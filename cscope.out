cscope 15 $HOME/src/nginx-1.2.9_serval               0004177768
	@auto/lib/zlib/patch.zlib.h

1 --- 
	gzlib
.
h
 
Thu
 
	gJul
 9 20:06:56 1998

2 +++ 
zlib
-1.1.3/zlib.
h
 
Tue
 
M¨
 22 13:41:04 2005

4 (0 
ö
 
of
 
	gîr‹
).

7 -
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

	@objs/ngx_auto_config.h

1 
	#NGX_CONFIGURE
 ""

	)

3 #i‚de‡
NGX_COMPILER


4 
	#NGX_COMPILER
 "gc¯4.5.1 20100924 (Red H© 4.5.1-4Ë(GCCË"

	)

8 #i‚de‡
NGX_HAVE_GCC_ATOMIC


9 
	#NGX_HAVE_GCC_ATOMIC
 1

	)

13 #i‚de‡
NGX_HAVE_C99_VARIADIC_MACROS


14 
	#NGX_HAVE_C99_VARIADIC_MACROS
 1

	)

18 #i‚de‡
NGX_HAVE_GCC_VARIADIC_MACROS


19 
	#NGX_HAVE_GCC_VARIADIC_MACROS
 1

	)

23 #i‚de‡
NGX_HAVE_EPOLL


24 
	#NGX_HAVE_EPOLL
 1

	)

28 #i‚de‡
NGX_HAVE_CLEAR_EVENT


29 
	#NGX_HAVE_CLEAR_EVENT
 1

	)

33 #i‚de‡
NGX_HAVE_SENDFILE


34 
	#NGX_HAVE_SENDFILE
 1

	)

38 #i‚de‡
NGX_HAVE_SENDFILE64


39 
	#NGX_HAVE_SENDFILE64
 1

	)

43 #i‚de‡
NGX_HAVE_PR_SET_DUMPABLE


44 
	#NGX_HAVE_PR_SET_DUMPABLE
 1

	)

48 #i‚de‡
NGX_HAVE_SCHED_SETAFFINITY


49 
	#NGX_HAVE_SCHED_SETAFFINITY
 1

	)

53 #i‚de‡
NGX_HAVE_GNU_CRYPT_R


54 
	#NGX_HAVE_GNU_CRYPT_R
 1

	)

58 #i‚de‡
NGX_HAVE_NONALIGNED


59 
	#NGX_HAVE_NONALIGNED
 1

	)

63 #i‚de‡
NGX_CPU_CACHE_LINE


64 
	#NGX_CPU_CACHE_LINE
 64

	)

68 
	#NGX_KQUEUE_UDATA_T
 (*)

	)

71 #i‚de‡
NGX_HAVE_POSIX_FADVISE


72 
	#NGX_HAVE_POSIX_FADVISE
 1

	)

76 #i‚de‡
NGX_HAVE_O_DIRECT


77 
	#NGX_HAVE_O_DIRECT
 1

	)

81 #i‚de‡
NGX_HAVE_ALIGNED_DIRECTIO


82 
	#NGX_HAVE_ALIGNED_DIRECTIO
 1

	)

86 #i‚de‡
NGX_HAVE_STATFS


87 
	#NGX_HAVE_STATFS
 1

	)

91 #i‚de‡
NGX_HAVE_STATVFS


92 
	#NGX_HAVE_STATVFS
 1

	)

96 #i‚de‡
NGX_HAVE_SCHED_YIELD


97 
	#NGX_HAVE_SCHED_YIELD
 1

	)

101 #i‚de‡
NGX_HAVE_DEFERRED_ACCEPT


102 
	#NGX_HAVE_DEFERRED_ACCEPT
 1

	)

106 #i‚de‡
NGX_HAVE_KEEPALIVE_TUNABLE


107 
	#NGX_HAVE_KEEPALIVE_TUNABLE
 1

	)

111 #i‚de‡
NGX_HAVE_TCP_INFO


112 
	#NGX_HAVE_TCP_INFO
 1

	)

116 #i‚de‡
NGX_HAVE_ACCEPT4


117 
	#NGX_HAVE_ACCEPT4
 1

	)

121 #i‚de‡
NGX_HAVE_UNIX_DOMAIN


122 
	#NGX_HAVE_UNIX_DOMAIN
 1

	)

126 #i‚de‡
NGX_PTR_SIZE


127 
	#NGX_PTR_SIZE
 8

	)

131 #i‚de‡
NGX_SIG_ATOMIC_T_SIZE


132 
	#NGX_SIG_ATOMIC_T_SIZE
 4

	)

136 #i‚de‡
NGX_HAVE_LITTLE_ENDIAN


137 
	#NGX_HAVE_LITTLE_ENDIAN
 1

	)

141 #i‚de‡
NGX_MAX_SIZE_T_VALUE


142 
	#NGX_MAX_SIZE_T_VALUE
 9223372036854775807LL

	)

146 #i‚de‡
NGX_SIZE_T_LEN


147 
	#NGX_SIZE_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

151 #i‚de‡
NGX_MAX_OFF_T_VALUE


152 
	#NGX_MAX_OFF_T_VALUE
 9223372036854775807LL

	)

156 #i‚de‡
NGX_OFF_T_LEN


157 
	#NGX_OFF_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

161 #i‚de‡
NGX_TIME_T_SIZE


162 
	#NGX_TIME_T_SIZE
 8

	)

166 #i‚de‡
NGX_TIME_T_LEN


167 
	#NGX_TIME_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

171 #i‚de‡
NGX_HAVE_PREAD


172 
	#NGX_HAVE_PREAD
 1

	)

176 #i‚de‡
NGX_HAVE_PWRITE


177 
	#NGX_HAVE_PWRITE
 1

	)

181 #i‚de‡
NGX_SYS_NERR


182 
	#NGX_SYS_NERR
 135

	)

186 #i‚de‡
NGX_HAVE_LOCALTIME_R


187 
	#NGX_HAVE_LOCALTIME_R
 1

	)

191 #i‚de‡
NGX_HAVE_POSIX_MEMALIGN


192 
	#NGX_HAVE_POSIX_MEMALIGN
 1

	)

196 #i‚de‡
NGX_HAVE_MEMALIGN


197 
	#NGX_HAVE_MEMALIGN
 1

	)

201 #i‚de‡
NGX_HAVE_MAP_ANON


202 
	#NGX_HAVE_MAP_ANON
 1

	)

206 #i‚de‡
NGX_HAVE_MAP_DEVZERO


207 
	#NGX_HAVE_MAP_DEVZERO
 1

	)

211 #i‚de‡
NGX_HAVE_SYSVSHM


212 
	#NGX_HAVE_SYSVSHM
 1

	)

216 #i‚de‡
NGX_HAVE_POSIX_SEM


217 
	#NGX_HAVE_POSIX_SEM
 1

	)

221 #i‚de‡
NGX_HAVE_MSGHDR_MSG_CONTROL


222 
	#NGX_HAVE_MSGHDR_MSG_CONTROL
 1

	)

226 #i‚de‡
NGX_HAVE_FIONBIO


227 
	#NGX_HAVE_FIONBIO
 1

	)

231 #i‚de‡
NGX_HAVE_GMTOFF


232 
	#NGX_HAVE_GMTOFF
 1

	)

236 #i‚de‡
NGX_HAVE_D_TYPE


237 
	#NGX_HAVE_D_TYPE
 1

	)

241 #i‚de‡
NGX_HAVE_SC_NPROCESSORS_ONLN


242 
	#NGX_HAVE_SC_NPROCESSORS_ONLN
 1

	)

246 #i‚de‡
NGX_HAVE_OPENAT


247 
	#NGX_HAVE_OPENAT
 1

	)

251 #i‚de‡
NGX_HTTP_CACHE


252 
	#NGX_HTTP_CACHE
 1

	)

256 #i‚de‡
NGX_HTTP_GZIP


257 
	#NGX_HTTP_GZIP
 1

	)

261 #i‚de‡
NGX_HTTP_SSI


262 
	#NGX_HTTP_SSI
 1

	)

266 #i‚de‡
NGX_CRYPT


267 
	#NGX_CRYPT
 1

	)

271 #i‚de‡
NGX_HTTP_GEO


272 
	#NGX_HTTP_GEO
 1

	)

276 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


277 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

281 #i‚de‡
NGX_HTTP_PROXY


282 
	#NGX_HTTP_PROXY
 1

	)

286 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


287 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

291 #i‚de‡
NGX_PCRE


292 
	#NGX_PCRE
 1

	)

296 #i‚de‡
NGX_OPENSSL_MD5


297 
	#NGX_OPENSSL_MD5
 1

	)

301 #i‚de‡
NGX_HAVE_OPENSSL_MD5_H


302 
	#NGX_HAVE_OPENSSL_MD5_H
 1

	)

306 #i‚de‡
NGX_HAVE_MD5


307 
	#NGX_HAVE_MD5
 1

	)

311 #i‚de‡
NGX_HAVE_SHA1


312 
	#NGX_HAVE_SHA1
 1

	)

316 #i‚de‡
NGX_HAVE_OPENSSL_SHA1_H


317 
	#NGX_HAVE_OPENSSL_SHA1_H
 1

	)

321 #i‚de‡
NGX_ZLIB


322 
	#NGX_ZLIB
 1

	)

326 #i‚de‡
NGX_PREFIX


327 
	#NGX_PREFIX
 "/u§/loˇl/ngöx/"

	)

331 #i‚de‡
NGX_CONF_PREFIX


332 
	#NGX_CONF_PREFIX
 "c⁄f/"

	)

336 #i‚de‡
NGX_SBIN_PATH


337 
	#NGX_SBIN_PATH
 ""

	)

341 #i‚de‡
NGX_CONF_PATH


342 
	#NGX_CONF_PATH
 "c⁄f/ngöx.c⁄f"

	)

346 #i‚de‡
NGX_PID_PATH


347 
	#NGX_PID_PATH
 "logs/ngöx.pid"

	)

351 #i‚de‡
NGX_LOCK_PATH


352 
	#NGX_LOCK_PATH
 "logs/ngöx.lock"

	)

356 #i‚de‡
NGX_ERROR_LOG_PATH


357 
	#NGX_ERROR_LOG_PATH
 "logs/îr‹.log"

	)

361 #i‚de‡
NGX_HTTP_LOG_PATH


362 
	#NGX_HTTP_LOG_PATH
 "logs/ac˚ss.log"

	)

366 #i‚de‡
NGX_HTTP_CLIENT_TEMP_PATH


367 
	#NGX_HTTP_CLIENT_TEMP_PATH
 "˛õ¡_body_ãmp"

	)

371 #i‚de‡
NGX_HTTP_PROXY_TEMP_PATH


372 
	#NGX_HTTP_PROXY_TEMP_PATH
 "¥oxy_ãmp"

	)

376 #i‚de‡
NGX_HTTP_FASTCGI_TEMP_PATH


377 
	#NGX_HTTP_FASTCGI_TEMP_PATH
 "Á°cgi_ãmp"

	)

381 #i‚de‡
NGX_HTTP_UWSGI_TEMP_PATH


382 
	#NGX_HTTP_UWSGI_TEMP_PATH
 "uwsgi_ãmp"

	)

386 #i‚de‡
NGX_HTTP_SCGI_TEMP_PATH


387 
	#NGX_HTTP_SCGI_TEMP_PATH
 "scgi_ãmp"

	)

391 #i‚de‡
NGX_SUPPRESS_WARN


392 
	#NGX_SUPPRESS_WARN
 1

	)

396 #i‚de‡
NGX_SMP


397 
	#NGX_SMP
 1

	)

401 #i‚de‡
NGX_USER


402 
	#NGX_USER
 "nobody"

	)

406 #i‚de‡
NGX_GROUP


407 
	#NGX_GROUP
 "nobody"

	)

	@objs/ngx_auto_headers.h

3 #i‚de‡
NGX_HAVE_UNISTD_H


4 
	#NGX_HAVE_UNISTD_H
 1

	)

8 #i‚de‡
NGX_HAVE_INTTYPES_H


9 
	#NGX_HAVE_INTTYPES_H
 1

	)

13 #i‚de‡
NGX_HAVE_LIMITS_H


14 
	#NGX_HAVE_LIMITS_H
 1

	)

18 #i‚de‡
NGX_HAVE_SYS_PARAM_H


19 
	#NGX_HAVE_SYS_PARAM_H
 1

	)

23 #i‚de‡
NGX_HAVE_SYS_MOUNT_H


24 
	#NGX_HAVE_SYS_MOUNT_H
 1

	)

28 #i‚de‡
NGX_HAVE_SYS_STATVFS_H


29 
	#NGX_HAVE_SYS_STATVFS_H
 1

	)

33 #i‚de‡
NGX_HAVE_CRYPT_H


34 
	#NGX_HAVE_CRYPT_H
 1

	)

38 #i‚de‡
NGX_HAVE_NETINET_SERVAL_H


39 
	#NGX_HAVE_NETINET_SERVAL_H
 1

	)

43 #i‚de‡
NGX_LINUX


44 
	#NGX_LINUX
 1

	)

48 #i‚de‡
NGX_HAVE_SYS_PRCTL_H


49 
	#NGX_HAVE_SYS_PRCTL_H
 1

	)

53 #i‚de‡
NGX_HAVE_SYS_VFS_H


54 
	#NGX_HAVE_SYS_VFS_H
 1

	)

	@objs/ngx_modules.c

2 
	~<ngx_c⁄fig.h
>

3 
	~<ngx_c‹e.h
>

7 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

8 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

9 
ngx_moduÀ_t
 
ngx_c⁄f_moduÀ
;

10 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

11 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

12 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

13 
ngx_moduÀ_t
 
ngx_ªgex_moduÀ
;

14 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

15 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

16 
ngx_moduÀ_t
 
ngx_hâp_log_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_hâp_°©ic_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_hâp_autoödex_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_hâp_ödex_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_hâp_auth_basic_moduÀ
;

22 
ngx_moduÀ_t
 
ngx_hâp_ac˚ss_moduÀ
;

23 
ngx_moduÀ_t
 
ngx_hâp_limô_c⁄n_moduÀ
;

24 
ngx_moduÀ_t
 
ngx_hâp_limô_ªq_moduÀ
;

25 
ngx_moduÀ_t
 
ngx_hâp_geo_moduÀ
;

26 
ngx_moduÀ_t
 
ngx_hâp_m≠_moduÀ
;

27 
ngx_moduÀ_t
 
ngx_hâp_•lô_˛õ¡s_moduÀ
;

28 
ngx_moduÀ_t
 
ngx_hâp_ª„ªr_moduÀ
;

29 
ngx_moduÀ_t
 
ngx_hâp_ªwrôe_moduÀ
;

30 
ngx_moduÀ_t
 
ngx_hâp_¥oxy_moduÀ
;

31 
ngx_moduÀ_t
 
ngx_hâp_Á°cgi_moduÀ
;

32 
ngx_moduÀ_t
 
ngx_hâp_uwsgi_moduÀ
;

33 
ngx_moduÀ_t
 
ngx_hâp_scgi_moduÀ
;

34 
ngx_moduÀ_t
 
ngx_hâp_memˇched_moduÀ
;

35 
ngx_moduÀ_t
 
ngx_hâp_em±y_gif_moduÀ
;

36 
ngx_moduÀ_t
 
ngx_hâp_brow£r_moduÀ
;

37 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_ù_hash_moduÀ
;

38 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
;

39 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_kì∑live_moduÀ
;

40 
ngx_moduÀ_t
 
ngx_hâp_wrôe_fûãr_moduÀ
;

41 
ngx_moduÀ_t
 
ngx_hâp_hódî_fûãr_moduÀ
;

42 
ngx_moduÀ_t
 
ngx_hâp_chunked_fûãr_moduÀ
;

43 
ngx_moduÀ_t
 
ngx_hâp_ønge_hódî_fûãr_moduÀ
;

44 
ngx_moduÀ_t
 
ngx_hâp_gzù_fûãr_moduÀ
;

45 
ngx_moduÀ_t
 
ngx_hâp_po°p⁄e_fûãr_moduÀ
;

46 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

47 
ngx_moduÀ_t
 
ngx_hâp_ch¨£t_fûãr_moduÀ
;

48 
ngx_moduÀ_t
 
ngx_hâp_u£rid_fûãr_moduÀ
;

49 
ngx_moduÀ_t
 
ngx_hâp_hódîs_fûãr_moduÀ
;

50 
ngx_moduÀ_t
 
ngx_hâp_c›y_fûãr_moduÀ
;

51 
ngx_moduÀ_t
 
ngx_hâp_ønge_body_fûãr_moduÀ
;

52 
ngx_moduÀ_t
 
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
;

54 
ngx_moduÀ_t
 *
	gngx_moduÀs
[] = {

55 &
ngx_c‹e_moduÀ
,

56 &
ngx_îæog_moduÀ
,

57 &
ngx_c⁄f_moduÀ
,

58 &
ngx_evíts_moduÀ
,

59 &
ngx_evít_c‹e_moduÀ
,

60 &
ngx_ïﬁl_moduÀ
,

61 &
ngx_ªgex_moduÀ
,

62 &
ngx_hâp_moduÀ
,

63 &
ngx_hâp_c‹e_moduÀ
,

64 &
ngx_hâp_log_moduÀ
,

65 &
ngx_hâp_up°ªam_moduÀ
,

66 &
ngx_hâp_°©ic_moduÀ
,

67 &
ngx_hâp_autoödex_moduÀ
,

68 &
ngx_hâp_ödex_moduÀ
,

69 &
ngx_hâp_auth_basic_moduÀ
,

70 &
ngx_hâp_ac˚ss_moduÀ
,

71 &
ngx_hâp_limô_c⁄n_moduÀ
,

72 &
ngx_hâp_limô_ªq_moduÀ
,

73 &
ngx_hâp_geo_moduÀ
,

74 &
ngx_hâp_m≠_moduÀ
,

75 &
ngx_hâp_•lô_˛õ¡s_moduÀ
,

76 &
ngx_hâp_ª„ªr_moduÀ
,

77 &
ngx_hâp_ªwrôe_moduÀ
,

78 &
ngx_hâp_¥oxy_moduÀ
,

79 &
ngx_hâp_Á°cgi_moduÀ
,

80 &
ngx_hâp_uwsgi_moduÀ
,

81 &
ngx_hâp_scgi_moduÀ
,

82 &
ngx_hâp_memˇched_moduÀ
,

83 &
ngx_hâp_em±y_gif_moduÀ
,

84 &
ngx_hâp_brow£r_moduÀ
,

85 &
ngx_hâp_up°ªam_ù_hash_moduÀ
,

86 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
,

87 &
ngx_hâp_up°ªam_kì∑live_moduÀ
,

88 &
ngx_hâp_wrôe_fûãr_moduÀ
,

89 &
ngx_hâp_hódî_fûãr_moduÀ
,

90 &
ngx_hâp_chunked_fûãr_moduÀ
,

91 &
ngx_hâp_ønge_hódî_fûãr_moduÀ
,

92 &
ngx_hâp_gzù_fûãr_moduÀ
,

93 &
ngx_hâp_po°p⁄e_fûãr_moduÀ
,

94 &
ngx_hâp_ssi_fûãr_moduÀ
,

95 &
ngx_hâp_ch¨£t_fûãr_moduÀ
,

96 &
ngx_hâp_u£rid_fûãr_moduÀ
,

97 &
ngx_hâp_hódîs_fûãr_moduÀ
,

98 &
ngx_hâp_c›y_fûãr_moduÀ
,

99 &
ngx_hâp_ønge_body_fûãr_moduÀ
,

100 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
,

101 
NULL


	@src/core/nginx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
);

15 
ngx_öt_t
 
ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

16 
ngx_öt_t
 
ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
);

17 *
ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

18 *
ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

19 *
ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

20 *
ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

21 *
ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

22 *
ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_debug_poöts
[] = {

29 { 
ngx_°rög
("°›"), 
NGX_DEBUG_POINTS_STOP
 },

30 { 
ngx_°rög
("ab‹t"), 
NGX_DEBUG_POINTS_ABORT
 },

31 { 
ngx_nuŒ_°rög
, 0 }

35 
ngx_comm™d_t
 
	gngx_c‹e_comm™ds
[] = {

37 { 
ngx_°rög
("daemon"),

38 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

39 
ngx_c⁄f_£t_Êag_¶Ÿ
,

41 
off£tof
(
ngx_c‹e_c⁄f_t
, 
d´m⁄
),

42 
NULL
 },

44 { 
ngx_°rög
("master_process"),

45 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

46 
ngx_c⁄f_£t_Êag_¶Ÿ
,

48 
off£tof
(
ngx_c‹e_c⁄f_t
, 
ma°î
),

49 
NULL
 },

51 { 
ngx_°rög
("timer_resolution"),

52 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

53 
ngx_c⁄f_£t_m£c_¶Ÿ
,

55 
off£tof
(
ngx_c‹e_c⁄f_t
, 
timî_ªsﬁuti⁄
),

56 
NULL
 },

58 { 
ngx_°rög
("pid"),

59 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_°r_¶Ÿ
,

62 
off£tof
(
ngx_c‹e_c⁄f_t
, 
pid
),

63 
NULL
 },

65 { 
ngx_°rög
("lock_file"),

66 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_°r_¶Ÿ
,

69 
off£tof
(
ngx_c‹e_c⁄f_t
, 
lock_fûe
),

70 
NULL
 },

72 { 
ngx_°rög
("worker_processes"),

73 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_£t_w‹kî_¥o˚s£s
,

77 
NULL
 },

79 { 
ngx_°rög
("debug_points"),

80 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_íum_¶Ÿ
,

83 
off£tof
(
ngx_c‹e_c⁄f_t
, 
debug_poöts
),

84 &
ngx_debug_poöts
 },

86 { 
ngx_°rög
("user"),

87 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE12
,

88 
ngx_£t_u£r
,

91 
NULL
 },

93 { 
ngx_°rög
("worker_priority"),

94 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_£t_¥i‹ôy
,

98 
NULL
 },

100 { 
ngx_°rög
("worker_cpu_affinity"),

101 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_1MORE
,

102 
ngx_£t_˝u_afföôy
,

105 
NULL
 },

107 { 
ngx_°rög
("worker_rlimit_nofile"),

108 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_num_¶Ÿ
,

111 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_nofûe
),

112 
NULL
 },

114 { 
ngx_°rög
("worker_rlimit_core"),

115 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_c⁄f_£t_off_¶Ÿ
,

118 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_c‹e
),

119 
NULL
 },

121 { 
ngx_°rög
("worker_rlimit_sigpending"),

122 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

123 
ngx_c⁄f_£t_num_¶Ÿ
,

125 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_sig≥ndög
),

126 
NULL
 },

128 { 
ngx_°rög
("working_directory"),

129 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

130 
ngx_c⁄f_£t_°r_¶Ÿ
,

132 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kög_dúe˘‹y
),

133 
NULL
 },

135 { 
ngx_°rög
("env"),

136 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_£t_ív
,

140 
NULL
 },

142 #i‡(
NGX_THREADS
)

144 { 
ngx_°rög
("worker_threads"),

145 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_num_¶Ÿ
,

148 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kî_thªads
),

149 
NULL
 },

151 { 
ngx_°rög
("thread_stack_size"),

152 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_size_¶Ÿ
,

155 
off£tof
(
ngx_c‹e_c⁄f_t
, 
thªad_°ack_size
),

156 
NULL
 },

160 
ngx_nuŒ_comm™d


164 
ngx_c‹e_moduÀ_t
 
	gngx_c‹e_moduÀ_˘x
 = {

165 
ngx_°rög
("core"),

166 
ngx_c‹e_moduÀ_¸óã_c⁄f
,

167 
ngx_c‹e_moduÀ_öô_c⁄f


171 
ngx_moduÀ_t
 
	gngx_c‹e_moduÀ
 = {

172 
NGX_MODULE_V1
,

173 &
ngx_c‹e_moduÀ_˘x
,

174 
ngx_c‹e_comm™ds
,

175 
NGX_CORE_MODULE
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NGX_MODULE_V1_PADDING


187 
ngx_uöt_t
 
	gngx_max_moduÀ
;

189 
ngx_uöt_t
 
	gngx_show_hñp
;

190 
ngx_uöt_t
 
	gngx_show_vîsi⁄
;

191 
ngx_uöt_t
 
	gngx_show_c⁄figuª
;

192 
u_ch¨
 *
	gngx_¥efix
;

193 
u_ch¨
 *
	gngx_c⁄f_fûe
;

194 
u_ch¨
 *
	gngx_c⁄f_∑øms
;

195 *
	gngx_sig«l
;

198 **
	gngx_os_ívú⁄
;

201 
ngx_cde˛


202 
	$maö
(
¨gc
, *c⁄° *
¨gv
)

204 
ngx_öt_t
 
i
;

205 
ngx_log_t
 *
log
;

206 
ngx_cy˛e_t
 *
cy˛e
, 
öô_cy˛e
;

207 
ngx_c‹e_c⁄f_t
 *
ccf
;

209 
	`ngx_debug_öô
();

211 i‡(
	`ngx_°ªº‹_öô
(Ë!
NGX_OK
) {

215 i‡(
	`ngx_gë_›ti⁄s
(
¨gc
, 
¨gv
Ë!
NGX_OK
) {

219 i‡(
ngx_show_vîsi⁄
) {

220 
	`ngx_wrôe_°dîr
("ngöx vîsi⁄: " 
NGINX_VER
 
NGX_LINEFEED
);

222 i‡(
ngx_show_hñp
) {

223 
	`ngx_wrôe_°dîr
(

225 "[-∞¥efix] [-g dúe˘ives]" 
NGX_LINEFEED


226 
NGX_LINEFEED


227 "O±i⁄s:" 
NGX_LINEFEED


228 " -?,-h :Åhi†hñp" 
NGX_LINEFEED


229 " -v : show vîsi⁄ándÉxô" 
NGX_LINEFEED


231 
NGX_LINEFEED


232 " -à :Åe° c⁄figuøti⁄ándÉxô" 
NGX_LINEFEED


234 "durög c⁄figuøti⁄Åe°ög" 
NGX_LINEFEED


236 "°›, quô,Ñe›í,Ññﬂd" 
NGX_LINEFEED


237 #ifde‡
NGX_PREFIX


239 
NGX_PREFIX
 ")" 
NGX_LINEFEED


241 " -∞¥efix : sëÖªfixÖ©h (deÁu…: NONE)" 
NGX_LINEFEED


244 
NGX_CONF_PATH
 ")" 
NGX_LINEFEED


246 "fûe" 
NGX_LINEFEED
 NGX_LINEFEED

250 i‡(
ngx_show_c⁄figuª
) {

251 
	`ngx_wrôe_°dîr
(

252 #ifde‡
NGX_COMPILER


253 "buûàby " 
NGX_COMPILER
 
NGX_LINEFEED


255 #i‡(
NGX_SSL
)

256 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


257 "TLS SNI suµ‹àíabÀd" 
NGX_LINEFEED


259 "TLS SNI suµ‹àdißbÀd" 
NGX_LINEFEED


262 "c⁄figuªárgumíts:" 
NGX_CONFIGURE
 
NGX_LINEFEED
);

265 i‡(!
ngx_ã°_c⁄fig
) {

270  
ngx_max_sockës
 = -1;

272 
	`ngx_time_öô
();

274 #i‡(
NGX_PCRE
)

275 
	`ngx_ªgex_öô
();

278 
ngx_pid
 = 
	`ngx_gëpid
();

280 
log
 = 
	`ngx_log_öô
(
ngx_¥efix
);

281 i‡(
log
 =
NULL
) {

286 #i‡(
NGX_OPENSSL
)

287 
	`ngx_s¶_öô
(
log
);

295 
	`ngx_memzîo
(&
öô_cy˛e
, (
ngx_cy˛e_t
));

296 
öô_cy˛e
.
log
 =Üog;

297 
ngx_cy˛e
 = &
öô_cy˛e
;

299 
öô_cy˛e
.
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, 
log
);

300 i‡(
öô_cy˛e
.
poﬁ
 =
NULL
) {

304 i‡(
	`ngx_ßve_¨gv
(&
öô_cy˛e
, 
¨gc
, 
¨gv
Ë!
NGX_OK
) {

308 i‡(
	`ngx_¥o˚ss_›ti⁄s
(&
öô_cy˛e
Ë!
NGX_OK
) {

312 i‡(
	`ngx_os_öô
(
log
Ë!
NGX_OK
) {

320 i‡(
	`ngx_¸c32_èbÀ_öô
(Ë!
NGX_OK
) {

324 i‡(
	`ngx_add_öhîôed_sockës
(&
öô_cy˛e
Ë!
NGX_OK
) {

328 
ngx_max_moduÀ
 = 0;

329 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

330 
ngx_moduÀs
[
i
]->
ödex
 = 
ngx_max_moduÀ
++;

333 
cy˛e
 = 
	`ngx_öô_cy˛e
(&
öô_cy˛e
);

334 i‡(
cy˛e
 =
NULL
) {

335 i‡(
ngx_ã°_c⁄fig
) {

336 
	`ngx_log_°dîr
(0, "configuration file %sÅest failed",

337 
öô_cy˛e
.
c⁄f_fûe
.
d©a
);

343 i‡(
ngx_ã°_c⁄fig
) {

344 i‡(!
ngx_quõt_mode
) {

345 
	`ngx_log_°dîr
(0, "configuration file %sÅest is successful",

346 
cy˛e
->
c⁄f_fûe
.
d©a
);

352 i‡(
ngx_sig«l
) {

353  
	`ngx_sig«l_¥o˚ss
(
cy˛e
, 
ngx_sig«l
);

356 
	`ngx_os_°©us
(
cy˛e
->
log
);

358 
ngx_cy˛e
 = 
cy˛e
;

360 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

362 i‡(
ccf
->
ma°î
 && 
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

363 
ngx_¥o˚ss
 = 
NGX_PROCESS_MASTER
;

366 #i‡!(
NGX_WIN32
)

368 i‡(
	`ngx_öô_sig«ls
(
cy˛e
->
log
Ë!
NGX_OK
) {

372 i‡(!
ngx_öhîôed
 && 
ccf
->
d´m⁄
) {

373 i‡(
	`ngx_d´m⁄
(
cy˛e
->
log
Ë!
NGX_OK
) {

377 
ngx_d´m⁄ized
 = 1;

380 i‡(
ngx_öhîôed
) {

381 
ngx_d´m⁄ized
 = 1;

386 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
cy˛e
->
log
Ë!
NGX_OK
) {

390 i‡(
cy˛e
->
log
->
fûe
->
fd
 !
ngx_°dîr
) {

392 i‡(
	`ngx_£t_°dîr
(
cy˛e
->
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

393 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

394 
ngx_£t_°dîr_n
 " failed");

399 i‡(
log
->
fûe
->
fd
 !
ngx_°dîr
) {

400 i‡(
	`ngx_˛o£_fûe
(
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

401 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

402 
ngx_˛o£_fûe_n
 " built-inÜog failed");

406 
ngx_u£_°dîr
 = 0;

408 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

409 
	`ngx_sögÀ_¥o˚ss_cy˛e
(
cy˛e
);

412 
	`ngx_ma°î_¥o˚ss_cy˛e
(
cy˛e
);

416 
	}
}

419 
ngx_öt_t


420 
	$ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

422 
u_ch¨
 *
p
, *
v
, *
öhîôed
;

423 
ngx_öt_t
 
s
;

424 
ngx_li°íög_t
 *
ls
;

426 
öhîôed
 = (
u_ch¨
 *Ë
	`gëív
(
NGINX_VAR
);

428 i‡(
öhîôed
 =
NULL
) {

429  
NGX_OK
;

432 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

433 "usög inhîôed sockë†‰om \"%s\"", 
öhîôed
);

435 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
li°íög
, cy˛e->
poﬁ
, 10,

436 (
ngx_li°íög_t
))

437 !
NGX_OK
)

439  
NGX_ERROR
;

442 
p
 = 
öhîôed
, 
v
 =Ö; *p;Ö++) {

443 i‡(*
p
 == ':' || *p == ';') {

444 
s
 = 
	`ngx_©oi
(
v
, 
p
 - v);

445 i‡(
s
 =
NGX_ERROR
) {

446 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

447 "övÆid sockëÇumbî \"%s\" i¿" 
NGINX_VAR


449 " o‡thêv¨übÀ", 
v
);

453 
v
 = 
p
 + 1;

455 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

456 i‡(
ls
 =
NULL
) {

457  
NGX_ERROR
;

460 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

462 
ls
->
fd
 = (
ngx_sockë_t
Ë
s
;

466 
ngx_öhîôed
 = 1;

468  
	`ngx_£t_öhîôed_sockës
(
cy˛e
);

469 
	}
}

473 
	$ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
)

475 **
p
, **
ív
;

476 
ngx_°r_t
 *
v¨
;

477 
ngx_uöt_t
 
i
, 
n
;

478 
ngx_c‹e_c⁄f_t
 *
ccf
;

480 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

482 i‡(
œ°
 =
NULL
 && 
ccf
->
ívú⁄mít
) {

483  
ccf
->
ívú⁄mít
;

486 
v¨
 = 
ccf
->
ív
.
ñts
;

488 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

489 i‡(
	`ngx_°rcmp
(
v¨
[
i
].
d©a
, "TZ") == 0

490 || 
	`ngx_°∫cmp
(
v¨
[
i
].
d©a
, "TZ=", 3) == 0)

492 
tz_found
;

496 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

497 i‡(
v¨
 =
NULL
) {

498  
NULL
;

501 
v¨
->
Àn
 = 2;

502 
v¨
->
d©a
 = (
u_ch¨
 *) "TZ";

504 
v¨
 = 
ccf
->
ív
.
ñts
;

506 
tz_found
:

508 
n
 = 0;

510 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

512 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

513 
n
++;

517 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

519 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

520 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

522 
n
++;

528 i‡(
œ°
) {

529 
ív
 = 
	`ngx_Æloc
((*
œ°
 + 
n
 + 1Ë* (*), 
cy˛e
->
log
);

530 *
œ°
 = 
n
;

533 
ív
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
n
 + 1) * (*));

536 i‡(
ív
 =
NULL
) {

537  
NULL
;

540 
n
 = 0;

542 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

544 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

545 
ív
[
n
++] = (*Ë
v¨
[
i
].
d©a
;

549 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

551 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

552 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

554 
ív
[
n
++] = *
p
;

560 
ív
[
n
] = 
NULL
;

562 i‡(
œ°
 =
NULL
) {

563 
ccf
->
ívú⁄mít
 = 
ív
;

564 
ívú⁄
 = 
ív
;

567  
ív
;

568 
	}
}

571 
ngx_pid_t


572 
	$ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
)

574 **
ív
, *
v¨
;

575 
u_ch¨
 *
p
;

576 
ngx_uöt_t
 
i
, 
n
;

577 
ngx_pid_t
 
pid
;

578 
ngx_exec_˘x_t
 
˘x
;

579 
ngx_c‹e_c⁄f_t
 *
ccf
;

580 
ngx_li°íög_t
 *
ls
;

582 
	`ngx_memzîo
(&
˘x
, (
ngx_exec_˘x_t
));

584 
˘x
.
∑th
 = 
¨gv
[0];

585 
˘x
.
«me
 = "new binaryÖrocess";

586 
˘x
.
¨gv
 =árgv;

588 
n
 = 2;

589 
ív
 = 
	`ngx_£t_ívú⁄mít
(
cy˛e
, &
n
);

590 i‡(
ív
 =
NULL
) {

591  
NGX_INVALID_PID
;

594 
v¨
 = 
	`ngx_Æloc
((
NGINX_VAR
)

595 + 
cy˛e
->
li°íög
.
√…s
 * (
NGX_INT32_LEN
 + 1) + 2,

596 
cy˛e
->
log
);

597 i‡(
v¨
 =
NULL
) {

598 
	`ngx_‰ì
(
ív
);

599  
NGX_INVALID_PID
;

602 
p
 = 
	`ngx_˝ymem
(
v¨
, 
NGINX_VAR
 "=", (NGINX_VAR));

604 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

605 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

606 
p
 = 
	`ngx_•rötf
’, "%ud;", 
ls
[
i
].
fd
);

609 *
p
 = '\0';

611 
ív
[
n
++] = 
v¨
;

613 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

617 
ív
[
n
++] = "SPARE=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

625 
ív
[
n
] = 
NULL
;

627 #i‡(
NGX_DEBUG
)

629 **
e
;

630 
e
 = 
ív
; *e;É++) {

631 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "ív: %s", *
e
);

636 
˘x
.
ívp
 = (*c⁄° *Ë
ív
;

638 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

640 i‡(
	`ngx_ª«me_fûe
(
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©aË=
NGX_FILE_ERROR
) {

641 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

642 
ngx_ª«me_fûe_n
 " %sÅo %s failed "

644 
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©a, 
¨gv
[0]);

646 
	`ngx_‰ì
(
ív
);

647 
	`ngx_‰ì
(
v¨
);

649  
NGX_INVALID_PID
;

652 
pid
 = 
	`ngx_execuã
(
cy˛e
, &
˘x
);

654 i‡(
pid
 =
NGX_INVALID_PID
) {

655 i‡(
	`ngx_ª«me_fûe
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.data)

656 =
NGX_FILE_ERROR
)

658 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

659 
ngx_ª«me_fûe_n
 " %s backÅo %s failedáfter "

661 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
¨gv
[0]);

665 
	`ngx_‰ì
(
ív
);

666 
	`ngx_‰ì
(
v¨
);

668  
pid
;

669 
	}
}

672 
ngx_öt_t


673 
	$ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
)

675 
u_ch¨
 *
p
;

676 
ngx_öt_t
 
i
;

678 
i
 = 1; i < 
¨gc
; i++) {

680 
p
 = (
u_ch¨
 *Ë
¨gv
[
i
];

682 i‡(*
p
++ != '-') {

683 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%s\"", 
¨gv
[
i
]);

684  
NGX_ERROR
;

687 *
p
) {

689 *
p
++) {

693 
ngx_show_vîsi⁄
 = 1;

694 
ngx_show_hñp
 = 1;

698 
ngx_show_vîsi⁄
 = 1;

702 
ngx_show_vîsi⁄
 = 1;

703 
ngx_show_c⁄figuª
 = 1;

707 
ngx_ã°_c⁄fig
 = 1;

711 
ngx_quõt_mode
 = 1;

715 i‡(*
p
) {

716 
ngx_¥efix
 = 
p
;

717 
√xt
;

720 i‡(
¨gv
[++
i
]) {

721 
ngx_¥efix
 = (
u_ch¨
 *Ë
¨gv
[
i
];

722 
√xt
;

725 
	`ngx_log_°dîr
(0, "option \"-p\"Ñequires directoryÇame");

726  
NGX_ERROR
;

729 i‡(*
p
) {

730 
ngx_c⁄f_fûe
 = 
p
;

731 
√xt
;

734 i‡(
¨gv
[++
i
]) {

735 
ngx_c⁄f_fûe
 = (
u_ch¨
 *Ë
¨gv
[
i
];

736 
√xt
;

739 
	`ngx_log_°dîr
(0, "option \"-c\"Ñequires fileÇame");

740  
NGX_ERROR
;

743 i‡(*
p
) {

744 
ngx_c⁄f_∑øms
 = 
p
;

745 
√xt
;

748 i‡(
¨gv
[++
i
]) {

749 
ngx_c⁄f_∑øms
 = (
u_ch¨
 *Ë
¨gv
[
i
];

750 
√xt
;

753 
	`ngx_log_°dîr
(0, "option \"-g\"ÑequiresÖarameter");

754  
NGX_ERROR
;

757 i‡(*
p
) {

758 
ngx_sig«l
 = (*Ë
p
;

760 } i‡(
¨gv
[++
i
]) {

761 
ngx_sig«l
 = 
¨gv
[
i
];

764 
	`ngx_log_°dîr
(0, "option \"-s\"ÑequiresÖarameter");

765  
NGX_ERROR
;

768 i‡(
	`ngx_°rcmp
(
ngx_sig«l
, "stop") == 0

769 || 
	`ngx_°rcmp
(
ngx_sig«l
, "quit") == 0

770 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reopen") == 0

771 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reload") == 0)

773 
ngx_¥o˚ss
 = 
NGX_PROCESS_SIGNALLER
;

774 
√xt
;

777 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"-†%s\"", 
ngx_sig«l
);

778  
NGX_ERROR
;

781 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%c\"", *(
p
 - 1));

782  
NGX_ERROR
;

786 
√xt
:

791  
NGX_OK
;

792 
	}
}

795 
ngx_öt_t


796 
	$ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
)

798 #i‡(
NGX_FREEBSD
)

800 
ngx_os_¨gv
 = (**Ë
¨gv
;

801 
ngx_¨gc
 = 
¨gc
;

802 
ngx_¨gv
 = (**Ë
¨gv
;

805 
size_t
 
Àn
;

806 
ngx_öt_t
 
i
;

808 
ngx_os_¨gv
 = (**Ë
¨gv
;

809 
ngx_¨gc
 = 
¨gc
;

811 
ngx_¨gv
 = 
	`ngx_Æloc
((
¨gc
 + 1Ë* (*), 
cy˛e
->
log
);

812 i‡(
ngx_¨gv
 =
NULL
) {

813  
NGX_ERROR
;

816 
i
 = 0; i < 
¨gc
; i++) {

817 
Àn
 = 
	`ngx_°æí
(
¨gv
[
i
]) + 1;

819 
ngx_¨gv
[
i
] = 
	`ngx_Æloc
(
Àn
, 
cy˛e
->
log
);

820 i‡(
ngx_¨gv
[
i
] =
NULL
) {

821  
NGX_ERROR
;

824 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_¨gv
[
i
], (u_ch¨ *Ë
¨gv
[i], 
Àn
);

827 
ngx_¨gv
[
i
] = 
NULL
;

831 
ngx_os_ívú⁄
 = 
ívú⁄
;

833  
NGX_OK
;

834 
	}
}

837 
ngx_öt_t


838 
	$ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

840 
u_ch¨
 *
p
;

841 
size_t
 
Àn
;

843 i‡(
ngx_¥efix
) {

844 
Àn
 = 
	`ngx_°æí
(
ngx_¥efix
);

845 
p
 = 
ngx_¥efix
;

847 i‡(
Àn
 && !
	`ngx_∑th_£∑øt‹
(
p
[len - 1])) {

848 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 1);

849 i‡(
p
 =
NULL
) {

850  
NGX_ERROR
;

853 
	`ngx_mem˝y
(
p
, 
ngx_¥efix
, 
Àn
);

854 
p
[
Àn
++] = '/';

857 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

858 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

859 
cy˛e
->
¥efix
.
Àn
 =Üen;

860 
cy˛e
->
¥efix
.
d©a
 = 
p
;

864 #i‚de‡
NGX_PREFIX


866 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
NGX_MAX_PATH
);

867 i‡(
p
 =
NULL
) {

868  
NGX_ERROR
;

871 i‡(
	`ngx_gëcwd
(
p
, 
NGX_MAX_PATH
) == 0) {

872 
	`ngx_log_°dîr
(
ngx_î∫o
, "[emîg]: " 
ngx_gëcwd_n
 " failed");

873  
NGX_ERROR
;

876 
Àn
 = 
	`ngx_°æí
(
p
);

878 
p
[
Àn
++] = '/';

880 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

881 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

882 
cy˛e
->
¥efix
.
Àn
 =Üen;

883 
cy˛e
->
¥efix
.
d©a
 = 
p
;

887 #ifde‡
NGX_CONF_PREFIX


888 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_CONF_PREFIX
);

890 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_PREFIX
);

892 
	`ngx_°r_£t
(&
cy˛e
->
¥efix
, 
NGX_PREFIX
);

897 i‡(
ngx_c⁄f_fûe
) {

898 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_fûe
);

899 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
ngx_c⁄f_fûe
;

902 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_fûe
, 
NGX_CONF_PATH
);

905 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &cy˛e->
c⁄f_fûe
, 0Ë!
NGX_OK
) {

906  
NGX_ERROR
;

909 
p
 = 
cy˛e
->
c⁄f_fûe
.
d©a
 + cy˛e->c⁄f_fûe.
Àn
 - 1;

910 
p
 > 
cy˛e
->
c⁄f_fûe
.
d©a
;

911 
p
--)

913 i‡(
	`ngx_∑th_£∑øt‹
(*
p
)) {

914 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
p
 - 
ngx_cy˛e
->
c⁄f_fûe
.
d©a
 + 1;

915 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
ngx_cy˛e
->
c⁄f_fûe
.data;

920 i‡(
ngx_c⁄f_∑øms
) {

921 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_∑øms
);

922 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
ngx_c⁄f_∑øms
;

925 i‡(
ngx_ã°_c⁄fig
) {

926 
cy˛e
->
log
->
log_Àvñ
 = 
NGX_LOG_INFO
;

929  
NGX_OK
;

930 
	}
}

934 
	$ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

936 
ngx_c‹e_c⁄f_t
 *
ccf
;

938 
ccf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_c‹e_c⁄f_t
));

939 i‡(
ccf
 =
NULL
) {

940  
NULL
;

953 
ccf
->
d´m⁄
 = 
NGX_CONF_UNSET
;

954 
ccf
->
ma°î
 = 
NGX_CONF_UNSET
;

955 
ccf
->
timî_ªsﬁuti⁄
 = 
NGX_CONF_UNSET_MSEC
;

957 
ccf
->
w‹kî_¥o˚s£s
 = 
NGX_CONF_UNSET
;

958 
ccf
->
debug_poöts
 = 
NGX_CONF_UNSET
;

960 
ccf
->
æimô_nofûe
 = 
NGX_CONF_UNSET
;

961 
ccf
->
æimô_c‹e
 = 
NGX_CONF_UNSET
;

962 
ccf
->
æimô_sig≥ndög
 = 
NGX_CONF_UNSET
;

964 
ccf
->
u£r
 = (
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
;

965 
ccf
->
group
 = (
ngx_gid_t
Ë
NGX_CONF_UNSET_UINT
;

967 #i‡(
NGX_THREADS
)

968 
ccf
->
w‹kî_thªads
 = 
NGX_CONF_UNSET
;

969 
ccf
->
thªad_°ack_size
 = 
NGX_CONF_UNSET_SIZE
;

972 i‡(
	`ngx_¨øy_öô
(&
ccf
->
ív
, 
cy˛e
->
poﬁ
, 1, (
ngx_°r_t
))

973 !
NGX_OK
)

975  
NULL
;

978  
ccf
;

979 
	}
}

983 
	$ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

985 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

987 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
d´m⁄
, 1);

988 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
ma°î
, 1);

989 
	`ngx_c⁄f_öô_m£c_vÆue
(
ccf
->
timî_ªsﬁuti⁄
, 0);

991 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_¥o˚s£s
, 1);

992 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
debug_poöts
, 0);

994 #i‡(
NGX_HAVE_CPU_AFFINITY
)

996 i‡(
ccf
->
˝u_afföôy_n


997 && 
ccf
->
˝u_afföôy_n
 != 1

998 && 
ccf
->
˝u_afföôy_n
 !(
ngx_uöt_t
Ëccf->
w‹kî_¥o˚s£s
)

1000 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

1008 #i‡(
NGX_THREADS
)

1010 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_thªads
, 0);

1011 
ngx_thªads_n
 = 
ccf
->
w‹kî_thªads
;

1012 
	`ngx_c⁄f_öô_size_vÆue
(
ccf
->
thªad_°ack_size
, 2 * 1024 * 1024);

1017 i‡(
ccf
->
pid
.
Àn
 == 0) {

1018 
	`ngx_°r_£t
(&
ccf
->
pid
, 
NGX_PID_PATH
);

1021 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
pid
, 0Ë!
NGX_OK
) {

1022  
NGX_CONF_ERROR
;

1025 
ccf
->
ﬁdpid
.
Àn
 = ccf->
pid
.À¿+ (
NGX_OLDPID_EXT
);

1027 
ccf
->
ﬁdpid
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, ccf->ﬁdpid.
Àn
);

1028 i‡(
ccf
->
ﬁdpid
.
d©a
 =
NULL
) {

1029  
NGX_CONF_ERROR
;

1032 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, ccf->pid.
Àn
),

1033 
NGX_OLDPID_EXT
, (NGX_OLDPID_EXT));

1036 #i‡!(
NGX_WIN32
)

1038 i‡(
ccf
->
u£r
 =(
uid_t
Ë
NGX_CONF_UNSET_UINT
 && 
	`gëeuid
() == 0) {

1039 
group
 *
gΩ
;

1040 
∑sswd
 *
pwd
;

1042 
	`ngx_£t_î∫o
(0);

1043 
pwd
 = 
	`gëpw«m
(
NGX_USER
);

1044 i‡(
pwd
 =
NULL
) {

1045 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1046 "gëpw«m(\"" 
NGX_USER
 "\") failed");

1047  
NGX_CONF_ERROR
;

1050 
ccf
->
u£∫ame
 = 
NGX_USER
;

1051 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1053 
	`ngx_£t_î∫o
(0);

1054 
gΩ
 = 
	`gëg∫am
(
NGX_GROUP
);

1055 i‡(
gΩ
 =
NULL
) {

1056 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1057 "gëg∫am(\"" 
NGX_GROUP
 "\") failed");

1058  
NGX_CONF_ERROR
;

1061 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1065 i‡(
ccf
->
lock_fûe
.
Àn
 == 0) {

1066 
	`ngx_°r_£t
(&
ccf
->
lock_fûe
, 
NGX_LOCK_PATH
);

1069 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
lock_fûe
, 0Ë!
NGX_OK
) {

1070  
NGX_CONF_ERROR
;

1074 
ngx_°r_t
 
lock_fûe
;

1076 
lock_fûe
 = 
cy˛e
->
ﬁd_cy˛e
->lock_file;

1078 i‡(
lock_fûe
.
Àn
) {

1079 
lock_fûe
.
Àn
--;

1081 i‡(
ccf
->
lock_fûe
.
Àn
 !=Üock_file.len

1082 || 
	`ngx_°∫cmp
(
ccf
->
lock_fûe
.
d©a
,Üock_fûe.d©a,Üock_fûe.
Àn
)

1085 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1089 
cy˛e
->
lock_fûe
.
Àn
 =Üock_file.len + 1;

1090 
lock_fûe
.
Àn
 += (".accept");

1092 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_p°rdup
(cy˛e->
poﬁ
, &lock_file);

1093 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1094  
NGX_CONF_ERROR
;

1098 
cy˛e
->
lock_fûe
.
Àn
 = 
ccf
->lock_file.len + 1;

1099 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_≤Æloc
(cy˛e->
poﬁ
,

1100 
ccf
->
lock_fûe
.
Àn
 + (".accept"));

1101 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1102  
NGX_CONF_ERROR
;

1105 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
cy˛e
->
lock_fûe
.
d©a
, 
ccf
->lock_file.data,

1106 
ccf
->
lock_fûe
.
Àn
),

1113  
NGX_CONF_OK
;

1114 
	}
}

1118 
	$ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1120 #i‡(
NGX_WIN32
)

1122 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1125  
NGX_CONF_OK
;

1129 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1131 *
group
;

1132 
∑sswd
 *
pwd
;

1133 
group
 *
gΩ
;

1134 
ngx_°r_t
 *
vÆue
;

1136 i‡(
ccf
->
u£r
 !(
uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1140 i‡(
	`gëeuid
() != 0) {

1141 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1145  
NGX_CONF_OK
;

1148 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1150 
ccf
->
u£∫ame
 = (*Ë
vÆue
[1].
d©a
;

1152 
	`ngx_£t_î∫o
(0);

1153 
pwd
 = 
	`gëpw«m
((c⁄° *Ë
vÆue
[1].
d©a
);

1154 i‡(
pwd
 =
NULL
) {

1155 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1156 "gëpw«m(\"%s\"ËÁûed", 
vÆue
[1].
d©a
);

1157  
NGX_CONF_ERROR
;

1160 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1162 
group
 = (*Ë((
cf
->
¨gs
->
√…s
 =2Ë? 
vÆue
[1].
d©a
 : value[2].data);

1164 
	`ngx_£t_î∫o
(0);

1165 
gΩ
 = 
	`gëg∫am
(
group
);

1166 i‡(
gΩ
 =
NULL
) {

1167 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1168 "gëg∫am(\"%s\"ËÁûed", 
group
);

1169  
NGX_CONF_ERROR
;

1172 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1174  
NGX_CONF_OK
;

1177 
	}
}

1181 
	$ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1183 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1185 
ngx_°r_t
 *
vÆue
, *
v¨
;

1186 
ngx_uöt_t
 
i
;

1188 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

1189 i‡(
v¨
 =
NULL
) {

1190  
NGX_CONF_ERROR
;

1193 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1194 *
v¨
 = 
vÆue
[1];

1196 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

1198 i‡(
vÆue
[1].
d©a
[
i
] == '=') {

1200 
v¨
->
Àn
 = 
i
;

1202  
NGX_CONF_OK
;

1206  
NGX_CONF_OK
;

1207 
	}
}

1211 
	$ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1213 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1215 
ngx_°r_t
 *
vÆue
;

1216 
ngx_uöt_t
 
n
, 
möus
;

1218 i‡(
ccf
->
¥i‹ôy
 != 0) {

1222 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1224 i‡(
vÆue
[1].
d©a
[0] == '-') {

1225 
n
 = 1;

1226 
möus
 = 1;

1228 } i‡(
vÆue
[1].
d©a
[0] == '+') {

1229 
n
 = 1;

1230 
möus
 = 0;

1233 
n
 = 0;

1234 
möus
 = 0;

1237 
ccf
->
¥i‹ôy
 = 
	`ngx_©oi
(&
vÆue
[1].
d©a
[
n
], vÆue[1].
Àn
 -Ç);

1238 i‡(
ccf
->
¥i‹ôy
 =
NGX_ERROR
) {

1242 i‡(
möus
) {

1243 
ccf
->
¥i‹ôy
 = -ccf->priority;

1246  
NGX_CONF_OK
;

1247 
	}
}

1251 
	$ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1253 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1254 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1256 
u_ch¨
 
ch
;

1257 
uöt64_t
 *
mask
;

1258 
ngx_°r_t
 *
vÆue
;

1259 
ngx_uöt_t
 
i
, 
n
;

1261 i‡(
ccf
->
˝u_afföôy
) {

1265 
mask
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (cf->
¨gs
->
√…s
 - 1Ë* (
uöt64_t
));

1266 i‡(
mask
 =
NULL
) {

1267  
NGX_CONF_ERROR
;

1270 
ccf
->
˝u_afföôy_n
 = 
cf
->
¨gs
->
√…s
 - 1;

1271 
ccf
->
˝u_afföôy
 = 
mask
;

1273 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1275 
n
 = 1;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

1277 i‡(
vÆue
[
n
].
Àn
 > 64) {

1278 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1280  
NGX_CONF_ERROR
;

1283 
mask
[
n
 - 1] = 0;

1285 
i
 = 0; i < 
vÆue
[
n
].
Àn
; i++) {

1287 
ch
 = 
vÆue
[
n
].
d©a
[
i
];

1289 i‡(
ch
 == ' ') {

1293 
mask
[
n
 - 1] <<= 1;

1295 i‡(
ch
 == '0') {

1299 i‡(
ch
 == '1') {

1300 
mask
[
n
 - 1] |= 1;

1304 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1306 
ch
);

1307  
NGX_CONF_ERROR
;

1313 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1318  
NGX_CONF_OK
;

1319 
	}
}

1322 
uöt64_t


1323 
	$ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
)

1325 
ngx_c‹e_c⁄f_t
 *
ccf
;

1327 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

1328 
ngx_c‹e_moduÀ
);

1330 i‡(
ccf
->
˝u_afföôy
 =
NULL
) {

1334 i‡(
ccf
->
˝u_afföôy_n
 > 
n
) {

1335  
ccf
->
˝u_afföôy
[
n
];

1338  
ccf
->
˝u_afföôy
[ccf->
˝u_afföôy_n
 - 1];

1339 
	}
}

1343 
	$ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1345 
ngx_°r_t
 *
vÆue
;

1346 
ngx_c‹e_c⁄f_t
 *
ccf
;

1348 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
c⁄f
;

1350 i‡(
ccf
->
w‹kî_¥o˚s£s
 !
NGX_CONF_UNSET
) {

1354 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1356 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "auto") == 0) {

1357 
ccf
->
w‹kî_¥o˚s£s
 = 
ngx_n˝u
;

1358  
NGX_CONF_OK
;

1361 
ccf
->
w‹kî_¥o˚s£s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1363 i‡(
ccf
->
w‹kî_¥o˚s£s
 =
NGX_ERROR
) {

1367  
NGX_CONF_OK
;

1368 
	}
}

	@src/core/nginx.h

8 #i‚de‡
_NGINX_H_INCLUDED_


9 
	#_NGINX_H_INCLUDED_


	)

12 
	#ngöx_vîsi⁄
 1002009

	)

13 
	#NGINX_VERSION
 "1.2.9"

	)

14 
	#NGINX_VER
 "ngöx/" 
NGINX_VERSION


	)

16 
	#NGINX_VAR
 "NGINX"

	)

17 
	#NGX_OLDPID_EXT
 ".ﬁdbö"

	)

	@src/core/ngx_array.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_¨øy_t
 *

13 
	$ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_¨øy_t
 *
a
;

17 
a
 = 
	`ngx_∑Œoc
(
p
, (
ngx_¨øy_t
));

18 i‡(
a
 =
NULL
) {

19  
NULL
;

22 
a
->
ñts
 = 
	`ngx_∑Œoc
(
p
, 
n
 * 
size
);

23 i‡(
a
->
ñts
 =
NULL
) {

24  
NULL
;

27 
a
->
√…s
 = 0;

28 
a
->
size
 = size;

29 
a
->
«Œoc
 = 
n
;

30 
a
->
poﬁ
 = 
p
;

32  
a
;

33 
	}
}

37 
	$ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
)

39 
ngx_poﬁ_t
 *
p
;

41 
p
 = 
a
->
poﬁ
;

43 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°
) {

44 
p
->
d
.
œ°
 -
a
->
size
 *á->
«Œoc
;

47 i‡((
u_ch¨
 *Ë
a
 + (
ngx_¨øy_t
Ë=
p
->
d
.
œ°
) {

48 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë
a
;

50 
	}
}

54 
	$ngx_¨øy_push
(
ngx_¨øy_t
 *
a
)

56 *
ñt
, *
√w
;

57 
size_t
 
size
;

58 
ngx_poﬁ_t
 *
p
;

60 i‡(
a
->
√…s
 =a->
«Œoc
) {

64 
size
 = 
a
->sizê*á->
«Œoc
;

66 
p
 = 
a
->
poﬁ
;

68 i‡((
u_ch¨
 *Ë
a
->
ñts
 + 
size
 =
p
->
d
.
œ°


69 && 
p
->
d
.
œ°
 + 
a
->
size
 <p->d.
íd
)

76 
p
->
d
.
œ°
 +
a
->
size
;

77 
a
->
«Œoc
++;

82 
√w
 = 
	`ngx_∑Œoc
(
p
, 2 * 
size
);

83 i‡(
√w
 =
NULL
) {

84  
NULL
;

87 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
, 
size
);

88 
a
->
ñts
 = 
√w
;

89 
a
->
«Œoc
 *= 2;

93 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

94 
a
->
√…s
++;

96  
ñt
;

97 
	}
}

101 
	$ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
)

103 *
ñt
, *
√w
;

104 
size_t
 
size
;

105 
ngx_uöt_t
 
«Œoc
;

106 
ngx_poﬁ_t
 *
p
;

108 
size
 = 
n
 * 
a
->size;

110 i‡(
a
->
√…s
 + 
n
 >á->
«Œoc
) {

114 
p
 = 
a
->
poﬁ
;

116 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°


117 && 
p
->
d
.
œ°
 + 
size
 <p->d.
íd
)

124 
p
->
d
.
œ°
 +
size
;

125 
a
->
«Œoc
 +
n
;

130 
«Œoc
 = 2 * ((
n
 >
a
->nalloc) ?Ç :á->nalloc);

132 
√w
 = 
	`ngx_∑Œoc
(
p
, 
«Œoc
 * 
a
->
size
);

133 i‡(
√w
 =
NULL
) {

134  
NULL
;

137 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
,á->
√…s
 *á->
size
);

138 
a
->
ñts
 = 
√w
;

139 
a
->
«Œoc
 =Çalloc;

143 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

144 
a
->
√…s
 +
n
;

146  
ñt
;

147 
	}
}

	@src/core/ngx_array.h

8 #i‚de‡
_NGX_ARRAY_H_INCLUDED_


9 
	#_NGX_ARRAY_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_¨øy_s
 {

17 *
	mñts
;

18 
ngx_uöt_t
 
	m√…s
;

19 
size_t
 
	msize
;

20 
ngx_uöt_t
 
	m«Œoc
;

21 
ngx_poﬁ_t
 *
	mpoﬁ
;

25 
ngx_¨øy_t
 *
ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

26 
ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
);

27 *
ngx_¨øy_push
(
ngx_¨øy_t
 *
a
);

28 *
ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
);

31 
ngx_ölöe
 
ngx_öt_t


32 
	$ngx_¨øy_öô
(
ngx_¨øy_t
 *
¨øy
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
¨øy
->
√…s
 = 0;

40 
¨øy
->
size
 = size;

41 
¨øy
->
«Œoc
 = 
n
;

42 
¨øy
->
poﬁ
 =Öool;

44 
¨øy
->
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

45 i‡(
¨øy
->
ñts
 =
NULL
) {

46  
NGX_ERROR
;

49  
NGX_OK
;

50 
	}
}

	@src/core/ngx_buf.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_buf_t
 *

13 
	$ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

15 
ngx_buf_t
 *
b
;

17 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

18 i‡(
b
 =
NULL
) {

19  
NULL
;

22 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

23 i‡(
b
->
°¨t
 =
NULL
) {

24  
NULL
;

38 
b
->
pos
 = b->
°¨t
;

39 
b
->
œ°
 = b->
°¨t
;

40 
b
->
íd
 = b->
œ°
 + 
size
;

41 
b
->
ãmp‹¨y
 = 1;

43  
b
;

44 
	}
}

47 
ngx_chaö_t
 *

48 
	$ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
)

50 
ngx_chaö_t
 *
˛
;

52 
˛
 = 
poﬁ
->
chaö
;

54 i‡(
˛
) {

55 
poﬁ
->
chaö
 = 
˛
->
√xt
;

56  
˛
;

59 
˛
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_chaö_t
));

60 i‡(
˛
 =
NULL
) {

61  
NULL
;

64  
˛
;

65 
	}
}

68 
ngx_chaö_t
 *

69 
	$ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
)

71 
u_ch¨
 *
p
;

72 
ngx_öt_t
 
i
;

73 
ngx_buf_t
 *
b
;

74 
ngx_chaö_t
 *
chaö
, *
˛
, **
Œ
;

76 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
bufs
->
num
 * bufs->
size
);

77 i‡(
p
 =
NULL
) {

78  
NULL
;

81 
Œ
 = &
chaö
;

83 
i
 = 0; i < 
bufs
->
num
; i++) {

85 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

86 i‡(
b
 =
NULL
) {

87  
NULL
;

102 
b
->
pos
 = 
p
;

103 
b
->
œ°
 = 
p
;

104 
b
->
ãmp‹¨y
 = 1;

106 
b
->
°¨t
 = 
p
;

107 
p
 +
bufs
->
size
;

108 
b
->
íd
 = 
p
;

110 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

111 i‡(
˛
 =
NULL
) {

112  
NULL
;

115 
˛
->
buf
 = 
b
;

116 *
Œ
 = 
˛
;

117 
Œ
 = &
˛
->
√xt
;

120 *
Œ
 = 
NULL
;

122  
chaö
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
)

129 
ngx_chaö_t
 *
˛
, **
Œ
;

131 
Œ
 = 
chaö
;

133 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

134 
Œ
 = &
˛
->
√xt
;

137 
ö
) {

138 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

139 i‡(
˛
 =
NULL
) {

140  
NGX_ERROR
;

143 
˛
->
buf
 = 
ö
->buf;

144 *
Œ
 = 
˛
;

145 
Œ
 = &
˛
->
√xt
;

146 
ö
 = in->
√xt
;

149 *
Œ
 = 
NULL
;

151  
NGX_OK
;

152 
	}
}

155 
ngx_chaö_t
 *

156 
	$ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
)

158 
ngx_chaö_t
 *
˛
;

160 i‡(*
‰ì
) {

161 
˛
 = *
‰ì
;

162 *
‰ì
 = 
˛
->
√xt
;

163 
˛
->
√xt
 = 
NULL
;

164  
˛
;

167 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
);

168 i‡(
˛
 =
NULL
) {

169  
NULL
;

172 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
p
);

173 i‡(
˛
->
buf
 =
NULL
) {

174  
NULL
;

177 
˛
->
√xt
 = 
NULL
;

179  
˛
;

180 
	}
}

184 
	$ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,Çgx_chaö_à**
busy
,

185 
ngx_chaö_t
 **
out
, 
ngx_buf_èg_t
 
èg
)

187 
ngx_chaö_t
 *
˛
;

189 i‡(*
busy
 =
NULL
) {

190 *
busy
 = *
out
;

193 
˛
 = *
busy
; cl->
√xt
; cl = cl->next) { }

195 
˛
->
√xt
 = *
out
;

198 *
out
 = 
NULL
;

200 *
busy
) {

201 
˛
 = *
busy
;

203 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

207 i‡(
˛
->
buf
->
èg
 !=Åag) {

208 *
busy
 = 
˛
->
√xt
;

209 
	`ngx_‰ì_chaö
(
p
, 
˛
);

213 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

214 
˛
->
buf
->
œ°
 = cl->buf->
°¨t
;

216 *
busy
 = 
˛
->
√xt
;

217 
˛
->
√xt
 = *
‰ì
;

218 *
‰ì
 = 
˛
;

220 
	}
}

	@src/core/ngx_buf.h

8 #i‚de‡
_NGX_BUF_H_INCLUDED_


9 
	#_NGX_BUF_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 * 
	tngx_buf_èg_t
;

18 
ngx_buf_s
 
	tngx_buf_t
;

20 
	sngx_buf_s
 {

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	mœ°
;

23 
off_t
 
	mfûe_pos
;

24 
off_t
 
	mfûe_œ°
;

26 
u_ch¨
 *
	m°¨t
;

27 
u_ch¨
 *
	míd
;

28 
ngx_buf_èg_t
 
	mèg
;

29 
ngx_fûe_t
 *
	mfûe
;

30 
ngx_buf_t
 *
	mshadow
;

34 
	mãmp‹¨y
:1;

40 
	mmem‹y
:1;

43 
	mmm≠
:1;

45 
	mªcy˛ed
:1;

46 
	mö_fûe
:1;

47 
	mÊush
:1;

48 
	msync
:1;

49 
	mœ°_buf
:1;

50 
	mœ°_ö_chaö
:1;

52 
	mœ°_shadow
:1;

53 
	mãmp_fûe
:1;

55  
	mnum
;

59 
	sngx_chaö_s
 {

60 
ngx_buf_t
 *
	mbuf
;

61 
ngx_chaö_t
 *
	m√xt
;

66 
ngx_öt_t
 
	mnum
;

67 
size_t
 
	msize
;

68 } 
	tngx_bufs_t
;

71 
ngx_ouçut_chaö_˘x_s
 
	tngx_ouçut_chaö_˘x_t
;

73 
	$ngx_öt_t
 (*
	tngx_ouçut_chaö_fûãr_±
)(*
	t˘x
, 
	tngx_chaö_t
 *
	tö
);

75 #i‡(
NGX_HAVE_FILE_AIO
)

76 (*
	tngx_ouçut_chaö_aio_±
)(
	tngx_ouçut_chaö_˘x_t
 *
	t˘x
,

77 
	tngx_fûe_t
 *
	tfûe
);

80 
	sngx_ouçut_chaö_˘x_s
 {

81 
ngx_buf_t
 *
buf
;

82 
ngx_chaö_t
 *
ö
;

83 
ngx_chaö_t
 *
‰ì
;

84 
ngx_chaö_t
 *
busy
;

86 
£ndfûe
:1;

87 
dúe˘io
:1;

88 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

89 
u«lig√d
:1;

91 
√ed_ö_mem‹y
:1;

92 
√ed_ö_ãmp
:1;

93 #i‡(
NGX_HAVE_FILE_AIO
)

94 
aio
:1;

96 
ngx_ouçut_chaö_aio_±
 
aio_h™dÀr
;

99 
off_t
 
Æignmít
;

101 
ngx_poﬁ_t
 *
poﬁ
;

102 
ngx_öt_t
 
Æloˇãd
;

103 
ngx_bufs_t
 
bufs
;

104 
ngx_buf_èg_t
 
èg
;

106 
ngx_ouçut_chaö_fûãr_±
 
ouçut_fûãr
;

107 *
fûãr_˘x
;

112 
ngx_chaö_t
 *
out
;

113 
ngx_chaö_t
 **
œ°
;

114 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

115 
ngx_poﬁ_t
 *
poﬁ
;

116 
off_t
 
limô
;

117 } 
	tngx_chaö_wrôî_˘x_t
;

120 
	#NGX_CHAIN_ERROR
 (
ngx_chaö_t
 *Ë
NGX_ERROR


	)

123 
	#ngx_buf_ö_mem‹y
(
b
Ë(b->
ãmp‹¨y
 || b->
mem‹y
 || b->
mm≠
)

	)

124 
	#ngx_buf_ö_mem‹y_⁄ly
(
b
Ë(
	`ngx_buf_ö_mem‹y
(bË&& !b->
ö_fûe
)

	)

126 
	#ngx_buf_•ecül
(
b
) \

127 ((
b
->
Êush
 || b->
œ°_buf
 || b->
sync
) \

128 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
)

	)

130 
	#ngx_buf_sync_⁄ly
(
b
) \

131 (
b
->
sync
 \

132 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
 && !b->
Êush
 && !b->
œ°_buf
)

	)

134 
	#ngx_buf_size
(
b
) \

135 (
	`ngx_buf_ö_mem‹y
(
b
Ë? (
off_t
Ë(b->
œ°
 - b->
pos
): \

136 (
b
->
fûe_œ°
 - b->
fûe_pos
))

	)

138 
ngx_buf_t
 *
	`ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

139 
ngx_chaö_t
 *
	`ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
);

142 
	#ngx_Æloc_buf
(
poﬁ
Ë
	`ngx_∑Œoc
’oﬁ, (
ngx_buf_t
))

	)

143 
	#ngx_ˇŒoc_buf
(
poﬁ
Ë
	`ngx_pˇŒoc
’oﬁ, (
ngx_buf_t
))

	)

145 
ngx_chaö_t
 *
	`ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
);

146 
	#ngx_‰ì_chaö
(
poﬁ
, 
˛
) \

147 
˛
->
√xt
 = 
poﬁ
->
chaö
; \

148 
poﬁ
->
chaö
 = 
˛


	)

152 
ngx_öt_t
 
	`ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

153 
ngx_öt_t
 
	`ngx_chaö_wrôî
(*
˘x
, 
ngx_chaö_t
 *
ö
);

155 
ngx_öt_t
 
	`ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

156 
ngx_chaö_t
 *
ö
);

157 
ngx_chaö_t
 *
	`ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
,Çgx_chaö_à**
‰ì
);

158 
	`ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,

159 
ngx_chaö_t
 **
busy
,Çgx_chaö_à**
out
, 
ngx_buf_èg_t
 
èg
);

	@src/core/ngx_conf_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

11 
	#NGX_CONF_BUFFER
 4096

	)

13 
ngx_öt_t
 
ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
,Çgx_öt_à
œ°
);

14 
ngx_öt_t
 
ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_c⁄f_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
);

16 
ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
);

19 
ngx_comm™d_t
 
	gngx_c⁄f_comm™ds
[] = {

21 { 
ngx_°rög
("include"),

22 
NGX_ANY_CONF
|
NGX_CONF_TAKE1
,

23 
ngx_c⁄f_ö˛ude
,

26 
NULL
 },

28 
ngx_nuŒ_comm™d


32 
ngx_moduÀ_t
 
	gngx_c⁄f_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 
NULL
,

35 
ngx_c⁄f_comm™ds
,

36 
NGX_CONF_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
ngx_c⁄f_Êush_fûes
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


50 
ngx_uöt_t
 
	g¨gumít_numbî
[] = {

51 
NGX_CONF_NOARGS
,

52 
NGX_CONF_TAKE1
,

53 
NGX_CONF_TAKE2
,

54 
NGX_CONF_TAKE3
,

55 
NGX_CONF_TAKE4
,

56 
NGX_CONF_TAKE5
,

57 
NGX_CONF_TAKE6
,

58 
NGX_CONF_TAKE7


63 
	$ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
)

65 *
rv
;

66 
ngx_°r_t
 *
∑øm
;

67 
ngx_buf_t
 
b
;

68 
ngx_c⁄f_fûe_t
 
c⁄f_fûe
;

70 
∑øm
 = &
cf
->
cy˛e
->
c⁄f_∑øm
;

72 i‡(
∑øm
->
Àn
 == 0) {

73  
NGX_CONF_OK
;

76 
	`ngx_memzîo
(&
c⁄f_fûe
, (
ngx_c⁄f_fûe_t
));

78 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

80 
b
.
°¨t
 = 
∑øm
->
d©a
;

81 
b
.
pos
 = 
∑øm
->
d©a
;

82 
b
.
œ°
 = 
∑øm
->
d©a
 +Ö¨am->
Àn
;

83 
b
.
íd
 = b.
œ°
;

84 
b
.
ãmp‹¨y
 = 1;

86 
c⁄f_fûe
.
fûe
.
fd
 = 
NGX_INVALID_FILE
;

87 
c⁄f_fûe
.
fûe
.
«me
.
d©a
 = 
NULL
;

88 
c⁄f_fûe
.
löe
 = 0;

90 
cf
->
c⁄f_fûe
 = &conf_file;

91 
cf
->
c⁄f_fûe
->
buf„r
 = &
b
;

93 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

95 
cf
->
c⁄f_fûe
 = 
NULL
;

97  
rv
;

98 
	}
}

102 
	$ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
)

104 *
rv
;

105 
ngx_fd_t
 
fd
;

106 
ngx_öt_t
 
rc
;

107 
ngx_buf_t
 
buf
;

108 
ngx_c⁄f_fûe_t
 *
¥ev
, 
c⁄f_fûe
;

110 
∑r£_fûe
 = 0,

111 
∑r£_block
,

112 
∑r£_∑øm


113 } 
ty≥
;

115 #i‡(
NGX_SUPPRESS_WARN
)

116 
fd
 = 
NGX_INVALID_FILE
;

117 
¥ev
 = 
NULL
;

120 i‡(
fûíame
) {

124 
fd
 = 
	`ngx_›í_fûe
(
fûíame
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

125 i‡(
fd
 =
NGX_INVALID_FILE
) {

126 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

127 
ngx_›í_fûe_n
 " \"%s\" failed",

128 
fûíame
->
d©a
);

129  
NGX_CONF_ERROR
;

132 
¥ev
 = 
cf
->
c⁄f_fûe
;

134 
cf
->
c⁄f_fûe
 = &conf_file;

136 i‡(
	`ngx_fd_öfo
(
fd
, &
cf
->
c⁄f_fûe
->
fûe
.
öfo
Ë=
NGX_FILE_ERROR
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 
ngx_î∫o
,

138 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûíame
->
d©a
);

141 
cf
->
c⁄f_fûe
->
buf„r
 = &
buf
;

143 
buf
.
°¨t
 = 
	`ngx_Æloc
(
NGX_CONF_BUFFER
, 
cf
->
log
);

144 i‡(
buf
.
°¨t
 =
NULL
) {

145 
Áûed
;

148 
buf
.
pos
 = buf.
°¨t
;

149 
buf
.
œ°
 = buf.
°¨t
;

150 
buf
.
íd
 = buf.
œ°
 + 
NGX_CONF_BUFFER
;

151 
buf
.
ãmp‹¨y
 = 1;

153 
cf
->
c⁄f_fûe
->
fûe
.
fd
 = fd;

154 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn
 = 
fûíame
->len;

155 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
 = 
fûíame
->data;

156 
cf
->
c⁄f_fûe
->
fûe
.
off£t
 = 0;

157 
cf
->
c⁄f_fûe
->
fûe
.
log
 = cf->log;

158 
cf
->
c⁄f_fûe
->
löe
 = 1;

160 
ty≥
 = 
∑r£_fûe
;

162 } i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

164 
ty≥
 = 
∑r£_block
;

167 
ty≥
 = 
∑r£_∑øm
;

172 
rc
 = 
	`ngx_c⁄f_ªad_tokí
(
cf
);

184 i‡(
rc
 =
NGX_ERROR
) {

185 
d⁄e
;

188 i‡(
rc
 =
NGX_CONF_BLOCK_DONE
) {

190 i‡(
ty≥
 !
∑r£_block
) {

191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"}\"");

192 
Áûed
;

195 
d⁄e
;

198 i‡(
rc
 =
NGX_CONF_FILE_DONE
) {

200 i‡(
ty≥
 =
∑r£_block
) {

201 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

203 
Áûed
;

206 
d⁄e
;

209 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

211 i‡(
ty≥
 =
∑r£_∑øm
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

215 
Áûed
;

221 i‡(
cf
->
h™dÀr
) {

228 
rv
 = (*
cf
->
h™dÀr
)(cf, 
NULL
, cf->
h™dÀr_c⁄f
);

229 i‡(
rv
 =
NGX_CONF_OK
) {

233 i‡(
rv
 =
NGX_CONF_ERROR
) {

234 
Áûed
;

237 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, 
rv
);

239 
Áûed
;

243 
rc
 = 
	`ngx_c⁄f_h™dÀr
(
cf
,Ñc);

245 i‡(
rc
 =
NGX_ERROR
) {

246 
Áûed
;

250 
Áûed
:

252 
rc
 = 
NGX_ERROR
;

254 
d⁄e
:

256 i‡(
fûíame
) {

257 i‡(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
) {

258 
	`ngx_‰ì
(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
);

261 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

262 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

263 
ngx_˛o£_fûe_n
 " %s failed",

264 
fûíame
->
d©a
);

265  
NGX_CONF_ERROR
;

268 
cf
->
c⁄f_fûe
 = 
¥ev
;

271 i‡(
rc
 =
NGX_ERROR
) {

272  
NGX_CONF_ERROR
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
, 
ngx_öt_t
 
œ°
)

282 *
rv
;

283 *
c⁄f
, **
c⁄Â
;

284 
ngx_uöt_t
 
i
, 
found
;

285 
ngx_°r_t
 *
«me
;

286 
ngx_comm™d_t
 *
cmd
;

288 
«me
 = 
cf
->
¨gs
->
ñts
;

290 
found
 = 0;

292 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

294 
cmd
 = 
ngx_moduÀs
[
i
]->
comm™ds
;

295 i‡(
cmd
 =
NULL
) {

299  ; 
cmd
->
«me
.
Àn
; cmd++) {

301 i‡(
«me
->
Àn
 !
cmd
->name.len) {

305 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, 
cmd
->name.data) != 0) {

309 
found
 = 1;

311 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CONF_MODULE


312 && 
ngx_moduÀs
[
i
]->
ty≥
 !
cf
->
moduÀ_ty≥
)

319 i‡(!(
cmd
->
ty≥
 & 
cf
->
cmd_ty≥
)) {

323 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_OK
) {

324 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

326 
«me
->
d©a
);

327  
NGX_ERROR
;

330 i‡((
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_CONF_BLOCK_START
) {

331 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

333 
«me
->
d©a
);

334  
NGX_ERROR
;

339 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_ANY
)) {

341 i‡(
cmd
->
ty≥
 & 
NGX_CONF_FLAG
) {

343 i‡(
cf
->
¨gs
->
√…s
 != 2) {

344 
övÆid
;

347 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_1MORE
) {

349 i‡(
cf
->
¨gs
->
√…s
 < 2) {

350 
övÆid
;

353 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_2MORE
) {

355 i‡(
cf
->
¨gs
->
√…s
 < 3) {

356 
övÆid
;

359 } i‡(
cf
->
¨gs
->
√…s
 > 
NGX_CONF_MAX_ARGS
) {

361 
övÆid
;

363 } i‡(!(
cmd
->
ty≥
 & 
¨gumít_numbî
[
cf
->
¨gs
->
√…s
 - 1]))

365 
övÆid
;

371 
c⁄f
 = 
NULL
;

373 i‡(
cmd
->
ty≥
 & 
NGX_DIRECT_CONF
) {

374 
c⁄f
 = ((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
];

376 } i‡(
cmd
->
ty≥
 & 
NGX_MAIN_CONF
) {

377 
c⁄f
 = &(((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
]);

379 } i‡(
cf
->
˘x
) {

380 
c⁄Â
 = *(**Ë((*Ë
cf
->
˘x
 + 
cmd
->
c⁄f
);

382 i‡(
c⁄Â
) {

383 
c⁄f
 = 
c⁄Â
[
ngx_moduÀs
[
i
]->
˘x_ödex
];

387 
rv
 = 
cmd
->
	`£t
(
cf
, cmd, 
c⁄f
);

389 i‡(
rv
 =
NGX_CONF_OK
) {

390  
NGX_OK
;

393 i‡(
rv
 =
NGX_CONF_ERROR
) {

394  
NGX_ERROR
;

397 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

398 "\"%s\" dúe˘ivê%s", 
«me
->
d©a
, 
rv
);

400  
NGX_ERROR
;

404 i‡(
found
) {

405 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

406 "\"%s\" dúe˘ivêi†nŸáŒowed hîe", 
«me
->
d©a
);

408  
NGX_ERROR
;

411 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

412 "unknow¿dúe˘ivê\"%s\"", 
«me
->
d©a
);

414  
NGX_ERROR
;

416 
övÆid
:

418 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

420 
«me
->
d©a
);

422  
NGX_ERROR
;

423 
	}
}

426 
ngx_öt_t


427 
	$ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
)

429 
u_ch¨
 *
°¨t
, 
ch
, *
§c
, *
d°
;

430 
off_t
 
fûe_size
;

431 
size_t
 
Àn
;

432 
ssize_t
 
n
, 
size
;

433 
ngx_uöt_t
 
found
, 
√ed_•a˚
, 
œ°_•a˚
, 
sh¨p_commít
, 
v¨übÀ
;

434 
ngx_uöt_t
 
quŸed
, 
s_quŸed
, 
d_quŸed
, 
°¨t_löe
;

435 
ngx_°r_t
 *
w‹d
;

436 
ngx_buf_t
 *
b
;

438 
found
 = 0;

439 
√ed_•a˚
 = 0;

440 
œ°_•a˚
 = 1;

441 
sh¨p_commít
 = 0;

442 
v¨übÀ
 = 0;

443 
quŸed
 = 0;

444 
s_quŸed
 = 0;

445 
d_quŸed
 = 0;

447 
cf
->
¨gs
->
√…s
 = 0;

448 
b
 = 
cf
->
c⁄f_fûe
->
buf„r
;

449 
°¨t
 = 
b
->
pos
;

450 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

452 
fûe_size
 = 
	`ngx_fûe_size
(&
cf
->
c⁄f_fûe
->
fûe
.
öfo
);

456 i‡(
b
->
pos
 >b->
œ°
) {

458 i‡(
cf
->
c⁄f_fûe
->
fûe
.
off£t
 >
fûe_size
) {

460 i‡(
cf
->
¨gs
->
√…s
 > 0 || !
œ°_•a˚
) {

462 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

463 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

466  
NGX_ERROR
;

469 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

472  
NGX_ERROR
;

475  
NGX_CONF_FILE_DONE
;

478 
Àn
 = 
b
->
pos
 - 
°¨t
;

480 i‡(
Àn
 =
NGX_CONF_BUFFER
) {

481 
cf
->
c⁄f_fûe
->
löe
 = 
°¨t_löe
;

483 i‡(
d_quŸed
) {

484 
ch
 = '"';

486 } i‡(
s_quŸed
) {

487 
ch
 = '\'';

490 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

492 10, 
°¨t
);

493  
NGX_ERROR
;

496 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

498 "missögÅîmö©ög \"%c\" ch¨a˘î", 
ch
);

499  
NGX_ERROR
;

502 i‡(
Àn
) {

503 
	`ngx_memmove
(
b
->
°¨t
, sèπ, 
Àn
);

506 
size
 = (
ssize_t
Ë(
fûe_size
 - 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

508 i‡(
size
 > 
b
->
íd
 - (b->
°¨t
 + 
Àn
)) {

509 
size
 = 
b
->
íd
 - (b->
°¨t
 + 
Àn
);

512 
n
 = 
	`ngx_ªad_fûe
(&
cf
->
c⁄f_fûe
->
fûe
, 
b
->
°¨t
 + 
Àn
, 
size
,

513 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

515 i‡(
n
 =
NGX_ERROR
) {

516  
NGX_ERROR
;

519 i‡(
n
 !
size
) {

520 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

521 
ngx_ªad_fûe_n
 "Ñeturned "

523 
n
, 
size
);

524  
NGX_ERROR
;

527 
b
->
pos
 = b->
°¨t
 + 
Àn
;

528 
b
->
œ°
 = b->
pos
 + 
n
;

529 
°¨t
 = 
b
->start;

532 
ch
 = *
b
->
pos
++;

534 i‡(
ch
 =
LF
) {

535 
cf
->
c⁄f_fûe
->
löe
++;

537 i‡(
sh¨p_commít
) {

538 
sh¨p_commít
 = 0;

542 i‡(
sh¨p_commít
) {

546 i‡(
quŸed
) {

547 
quŸed
 = 0;

551 i‡(
√ed_•a˚
) {

552 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

553 
œ°_•a˚
 = 1;

554 
√ed_•a˚
 = 0;

558 i‡(
ch
 == ';') {

559  
NGX_OK
;

562 i‡(
ch
 == '{') {

563  
NGX_CONF_BLOCK_START
;

566 i‡(
ch
 == ')') {

567 
œ°_•a˚
 = 1;

568 
√ed_•a˚
 = 0;

571 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

572 "u√x≥˘ed \"%c\"", 
ch
);

573  
NGX_ERROR
;

577 i‡(
œ°_•a˚
) {

578 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

582 
°¨t
 = 
b
->
pos
 - 1;

583 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

585 
ch
) {

589 i‡(
cf
->
¨gs
->
√…s
 == 0) {

590 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

591 "u√x≥˘ed \"%c\"", 
ch
);

592  
NGX_ERROR
;

595 i‡(
ch
 == '{') {

596  
NGX_CONF_BLOCK_START
;

599  
NGX_OK
;

602 i‡(
cf
->
¨gs
->
√…s
 != 0) {

603 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

605  
NGX_ERROR
;

608  
NGX_CONF_BLOCK_DONE
;

611 
sh¨p_commít
 = 1;

615 
quŸed
 = 1;

616 
œ°_•a˚
 = 0;

620 
°¨t
++;

621 
d_quŸed
 = 1;

622 
œ°_•a˚
 = 0;

626 
°¨t
++;

627 
s_quŸed
 = 1;

628 
œ°_•a˚
 = 0;

632 
œ°_•a˚
 = 0;

636 i‡(
ch
 ='{' && 
v¨übÀ
) {

640 
v¨übÀ
 = 0;

642 i‡(
ch
 == '\\') {

643 
quŸed
 = 1;

647 i‡(
ch
 == '$') {

648 
v¨übÀ
 = 1;

652 i‡(
d_quŸed
) {

653 i‡(
ch
 == '"') {

654 
d_quŸed
 = 0;

655 
√ed_•a˚
 = 1;

656 
found
 = 1;

659 } i‡(
s_quŸed
) {

660 i‡(
ch
 == '\'') {

661 
s_quŸed
 = 0;

662 
√ed_•a˚
 = 1;

663 
found
 = 1;

666 } i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF


667 || 
ch
 == ';' || ch == '{')

669 
œ°_•a˚
 = 1;

670 
found
 = 1;

673 i‡(
found
) {

674 
w‹d
 = 
	`ngx_¨øy_push
(
cf
->
¨gs
);

675 i‡(
w‹d
 =
NULL
) {

676  
NGX_ERROR
;

679 
w‹d
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
b
->
pos
 - 
°¨t
 + 1);

680 i‡(
w‹d
->
d©a
 =
NULL
) {

681  
NGX_ERROR
;

684 
d°
 = 
w‹d
->
d©a
, 
§c
 = 
°¨t
, 
Àn
 = 0;

685 
§c
 < 
b
->
pos
 - 1;

686 
Àn
++)

688 i‡(*
§c
 == '\\') {

689 
§c
[1]) {

693 
§c
++;

697 *
d°
++ = '\t';

698 
§c
 += 2;

702 *
d°
++ = '\r';

703 
§c
 += 2;

707 *
d°
++ = '\n';

708 
§c
 += 2;

713 *
d°
++ = *
§c
++;

715 *
d°
 = '\0';

716 
w‹d
->
Àn
 =Üen;

718 i‡(
ch
 == ';') {

719  
NGX_OK
;

722 i‡(
ch
 == '{') {

723  
NGX_CONF_BLOCK_START
;

726 
found
 = 0;

730 
	}
}

734 
	$ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

736 *
rv
;

737 
ngx_öt_t
 
n
;

738 
ngx_°r_t
 *
vÆue
, 
fûe
, 
«me
;

739 
ngx_glob_t
 
gl
;

741 
vÆue
 = 
cf
->
¨gs
->
ñts
;

742 
fûe
 = 
vÆue
[1];

744 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

746 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

747  
NGX_CONF_ERROR
;

750 i‡(
	`°Ωbrk
((*Ë
fûe
.
d©a
, "*?["Ë=
NULL
) {

752 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

754  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

757 
	`ngx_memzîo
(&
gl
, (
ngx_glob_t
));

759 
gl
.
∑âîn
 = 
fûe
.
d©a
;

760 
gl
.
log
 = 
cf
->log;

761 
gl
.
ã°
 = 1;

763 i‡(
	`ngx_›í_glob
(&
gl
Ë!
NGX_OK
) {

764 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

765 
ngx_›í_glob_n
 " \"%s\" faûed", 
fûe
.
d©a
);

766  
NGX_CONF_ERROR
;

769 
rv
 = 
NGX_CONF_OK
;

772 
n
 = 
	`ngx_ªad_glob
(&
gl
, &
«me
);

774 i‡(
n
 !
NGX_OK
) {

778 
fûe
.
Àn
 = 
«me
.len++;

779 
fûe
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

781 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

783 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

785 i‡(
rv
 !
NGX_CONF_OK
) {

790 
	`ngx_˛o£_glob
(&
gl
);

792  
rv
;

793 
	}
}

796 
ngx_öt_t


797 
	$ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
c⁄f_¥efix
)

799 
size_t
 
Àn
;

800 
u_ch¨
 *
p
, *
n
, *
¥efix
;

801 
ngx_öt_t
 
rc
;

803 
rc
 = 
	`ngx_c⁄f_ã°_fuŒ_«me
(
«me
);

805 i‡(
rc
 =
NGX_OK
) {

806  
rc
;

809 i‡(
c⁄f_¥efix
) {

810 
Àn
 = 
cy˛e
->
c⁄f_¥efix
.len;

811 
¥efix
 = 
cy˛e
->
c⁄f_¥efix
.
d©a
;

814 
Àn
 = 
cy˛e
->
¥efix
.len;

815 
¥efix
 = 
cy˛e
->¥efix.
d©a
;

818 #i‡(
NGX_WIN32
)

820 i‡(
rc
 == 2) {

821 
Àn
 = 
rc
;

826 
n
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 
«me
->len + 1);

827 i‡(
n
 =
NULL
) {

828  
NGX_ERROR
;

831 
p
 = 
	`ngx_˝ymem
(
n
, 
¥efix
, 
Àn
);

832 
	`ngx_˝y°∫
(
p
, 
«me
->
d©a
,Çame->
Àn
 + 1);

834 
«me
->
Àn
 +=Üen;

835 
«me
->
d©a
 = 
n
;

837  
NGX_OK
;

838 
	}
}

841 
ngx_öt_t


842 
	$ngx_c⁄f_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
)

844 #i‡(
NGX_WIN32
)

845 
u_ch¨
 
c0
, 
c1
;

847 
c0
 = 
«me
->
d©a
[0];

849 i‡(
«me
->
Àn
 < 2) {

850 i‡(
c0
 == '/') {

854  
NGX_DECLINED
;

857 
c1
 = 
«me
->
d©a
[1];

859 i‡(
c1
 == ':') {

860 
c0
 |= 0x20;

862 i‡((
c0
 >= 'a' && c0 <= 'z')) {

863  
NGX_OK
;

866  
NGX_DECLINED
;

869 i‡(
c1
 == '/') {

870  
NGX_OK
;

873 i‡(
c0
 == '/') {

877  
NGX_DECLINED
;

881 i‡(
«me
->
d©a
[0] == '/') {

882  
NGX_OK
;

885  
NGX_DECLINED
;

888 
	}
}

891 
ngx_›í_fûe_t
 *

892 
	$ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

894 
ngx_°r_t
 
fuŒ
;

895 
ngx_uöt_t
 
i
;

896 
ngx_li°_∑π_t
 *
∑π
;

897 
ngx_›í_fûe_t
 *
fûe
;

899 #i‡(
NGX_SUPPRESS_WARN
)

900 
	`ngx_°r_nuŒ
(&
fuŒ
);

903 i‡(
«me
->
Àn
) {

904 
fuŒ
 = *
«me
;

906 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
fuŒ
, 0Ë!
NGX_OK
) {

907  
NULL
;

910 
∑π
 = &
cy˛e
->
›í_fûes
.part;

911 
fûe
 = 
∑π
->
ñts
;

913 
i
 = 0; ; i++) {

915 i‡(
i
 >
∑π
->
√…s
) {

916 i‡(
∑π
->
√xt
 =
NULL
) {

919 
∑π
 =Ö¨t->
√xt
;

920 
fûe
 = 
∑π
->
ñts
;

921 
i
 = 0;

924 i‡(
fuŒ
.
Àn
 !
fûe
[
i
].
«me
.len) {

928 i‡(
	`ngx_°rcmp
(
fuŒ
.
d©a
, 
fûe
[
i
].
«me
.data) == 0) {

929  &
fûe
[
i
];

934 
fûe
 = 
	`ngx_li°_push
(&
cy˛e
->
›í_fûes
);

935 i‡(
fûe
 =
NULL
) {

936  
NULL
;

939 i‡(
«me
->
Àn
) {

940 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

941 
fûe
->
«me
 = 
fuŒ
;

944 
fûe
->
fd
 = 
ngx_°dîr
;

945 
fûe
->
«me
 = *name;

948 
fûe
->
Êush
 = 
NULL
;

949 
fûe
->
d©a
 = 
NULL
;

951  
fûe
;

952 
	}
}

956 
	$ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
)

958 
ngx_uöt_t
 
i
;

959 
ngx_li°_∑π_t
 *
∑π
;

960 
ngx_›í_fûe_t
 *
fûe
;

962 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "flush files");

964 
∑π
 = &
cy˛e
->
›í_fûes
.part;

965 
fûe
 = 
∑π
->
ñts
;

967 
i
 = 0; ; i++) {

969 i‡(
i
 >
∑π
->
√…s
) {

970 i‡(
∑π
->
√xt
 =
NULL
) {

973 
∑π
 =Ö¨t->
√xt
;

974 
fûe
 = 
∑π
->
ñts
;

975 
i
 = 0;

978 i‡(
fûe
[
i
].
Êush
) {

979 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

982 
	}
}

985 
ngx_cde˛


986 
	$ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
, 
ngx_îr_t
 
îr
,

987 c⁄° *
fmt
, ...)

989 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
], *
p
, *
œ°
;

990 
va_li°
 
¨gs
;

992 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

994 
	`va_°¨t
(
¨gs
, 
fmt
);

995 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
, 
fmt
, 
¨gs
);

996 
	`va_íd
(
¨gs
);

998 i‡(
îr
) {

999 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

1002 i‡(
cf
->
c⁄f_fûe
 =
NULL
) {

1003 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s", 
p
 - 
îr°r
,Érrstr);

1007 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1008 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in commandÜine",

1009 
p
 - 
îr°r
,Érrstr);

1013 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in %s:%ui",

1014 
p
 - 
îr°r
,Érrstr,

1015 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
, cf->c⁄f_fûe->
löe
);

1016 
	}
}

1020 
	$ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1022 *
p
 = 
c⁄f
;

1024 
ngx_°r_t
 *
vÆue
;

1025 
ngx_Êag_t
 *
Â
;

1026 
ngx_c⁄f_po°_t
 *
po°
;

1028 
Â
 = (
ngx_Êag_t
 *Ë(
p
 + 
cmd
->
off£t
);

1030 i‡(*
Â
 !
NGX_CONF_UNSET
) {

1034 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1036 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "on") == 0) {

1037 *
Â
 = 1;

1039 } i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "off") == 0) {

1040 *
Â
 = 0;

1043 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1046 
vÆue
[1].
d©a
, 
cmd
->
«me
.data);

1047  
NGX_CONF_ERROR
;

1050 i‡(
cmd
->
po°
) {

1051 
po°
 = 
cmd
->post;

1052  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
Â
);

1055  
NGX_CONF_OK
;

1056 
	}
}

1060 
	$ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1062 *
p
 = 
c⁄f
;

1064 
ngx_°r_t
 *
fõld
, *
vÆue
;

1065 
ngx_c⁄f_po°_t
 *
po°
;

1067 
fõld
 = (
ngx_°r_t
 *Ë(
p
 + 
cmd
->
off£t
);

1069 i‡(
fõld
->
d©a
) {

1073 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1075 *
fõld
 = 
vÆue
[1];

1077 i‡(
cmd
->
po°
) {

1078 
po°
 = 
cmd
->post;

1079  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
fõld
);

1082  
NGX_CONF_OK
;

1083 
	}
}

1087 
	$ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1089 *
p
 = 
c⁄f
;

1091 
ngx_°r_t
 *
vÆue
, *
s
;

1092 
ngx_¨øy_t
 **
a
;

1093 
ngx_c⁄f_po°_t
 *
po°
;

1095 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1097 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1098 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_°r_t
));

1099 i‡(*
a
 =
NULL
) {

1100  
NGX_CONF_ERROR
;

1104 
s
 = 
	`ngx_¨øy_push
(*
a
);

1105 i‡(
s
 =
NULL
) {

1106  
NGX_CONF_ERROR
;

1109 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1111 *
s
 = 
vÆue
[1];

1113 i‡(
cmd
->
po°
) {

1114 
po°
 = 
cmd
->post;

1115  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
s
);

1118  
NGX_CONF_OK
;

1119 
	}
}

1123 
	$ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1125 *
p
 = 
c⁄f
;

1127 
ngx_°r_t
 *
vÆue
;

1128 
ngx_¨øy_t
 **
a
;

1129 
ngx_keyvÆ_t
 *
kv
;

1130 
ngx_c⁄f_po°_t
 *
po°
;

1132 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1134 i‡(*
a
 =
NULL
) {

1135 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_keyvÆ_t
));

1136 i‡(*
a
 =
NULL
) {

1137  
NGX_CONF_ERROR
;

1141 
kv
 = 
	`ngx_¨øy_push
(*
a
);

1142 i‡(
kv
 =
NULL
) {

1143  
NGX_CONF_ERROR
;

1146 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1148 
kv
->
key
 = 
vÆue
[1];

1149 
kv
->
vÆue
 = value[2];

1151 i‡(
cmd
->
po°
) {

1152 
po°
 = 
cmd
->post;

1153  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
kv
);

1156  
NGX_CONF_OK
;

1157 
	}
}

1161 
	$ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1163 *
p
 = 
c⁄f
;

1165 
ngx_öt_t
 *
≈
;

1166 
ngx_°r_t
 *
vÆue
;

1167 
ngx_c⁄f_po°_t
 *
po°
;

1170 
≈
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1172 i‡(*
≈
 !
NGX_CONF_UNSET
) {

1176 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1177 *
≈
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1178 i‡(*
≈
 =
NGX_ERROR
) {

1182 i‡(
cmd
->
po°
) {

1183 
po°
 = 
cmd
->post;

1184  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
≈
);

1187  
NGX_CONF_OK
;

1188 
	}
}

1192 
	$ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1194 *
p
 = 
c⁄f
;

1196 
size_t
 *
•
;

1197 
ngx_°r_t
 *
vÆue
;

1198 
ngx_c⁄f_po°_t
 *
po°
;

1201 
•
 = (
size_t
 *Ë(
p
 + 
cmd
->
off£t
);

1202 i‡(*
•
 !
NGX_CONF_UNSET_SIZE
) {

1206 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1208 *
•
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

1209 i‡(*
•
 =(
size_t
Ë
NGX_ERROR
) {

1213 i‡(
cmd
->
po°
) {

1214 
po°
 = 
cmd
->post;

1215  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1218  
NGX_CONF_OK
;

1219 
	}
}

1223 
	$ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1225 *
p
 = 
c⁄f
;

1227 
off_t
 *
›
;

1228 
ngx_°r_t
 *
vÆue
;

1229 
ngx_c⁄f_po°_t
 *
po°
;

1232 
›
 = (
off_t
 *Ë(
p
 + 
cmd
->
off£t
);

1233 i‡(*
›
 !
NGX_CONF_UNSET
) {

1237 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1239 *
›
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

1240 i‡(*
›
 =(
off_t
Ë
NGX_ERROR
) {

1244 i‡(
cmd
->
po°
) {

1245 
po°
 = 
cmd
->post;

1246  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
›
);

1249  
NGX_CONF_OK
;

1250 
	}
}

1254 
	$ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1256 *
p
 = 
c⁄f
;

1258 
ngx_m£c_t
 *
m•
;

1259 
ngx_°r_t
 *
vÆue
;

1260 
ngx_c⁄f_po°_t
 *
po°
;

1263 
m•
 = (
ngx_m£c_t
 *Ë(
p
 + 
cmd
->
off£t
);

1264 i‡(*
m•
 !
NGX_CONF_UNSET_MSEC
) {

1268 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1270 *
m•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

1271 i‡(*
m•
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1275 i‡(
cmd
->
po°
) {

1276 
po°
 = 
cmd
->post;

1277  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
m•
);

1280  
NGX_CONF_OK
;

1281 
	}
}

1285 
	$ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1287 *
p
 = 
c⁄f
;

1289 
time_t
 *
•
;

1290 
ngx_°r_t
 *
vÆue
;

1291 
ngx_c⁄f_po°_t
 *
po°
;

1294 
•
 = (
time_t
 *Ë(
p
 + 
cmd
->
off£t
);

1295 i‡(*
•
 !
NGX_CONF_UNSET
) {

1299 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1301 *
•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

1302 i‡(*
•
 =(
time_t
Ë
NGX_ERROR
) {

1306 i‡(
cmd
->
po°
) {

1307 
po°
 = 
cmd
->post;

1308  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1311  
NGX_CONF_OK
;

1312 
	}
}

1316 
	$ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1318 *
p
 = 
c⁄f
;

1320 
ngx_°r_t
 *
vÆue
;

1321 
ngx_bufs_t
 *
bufs
;

1324 
bufs
 = (
ngx_bufs_t
 *Ë(
p
 + 
cmd
->
off£t
);

1325 i‡(
bufs
->
num
) {

1329 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1331 
bufs
->
num
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1332 i‡(
bufs
->
num
 =
NGX_ERROR
 || bufs->num == 0) {

1336 
bufs
->
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

1337 i‡(
bufs
->
size
 =(
size_t
Ë
NGX_ERROR
 || bufs->size == 0) {

1341  
NGX_CONF_OK
;

1342 
	}
}

1346 
	$ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1348 *
p
 = 
c⁄f
;

1350 
ngx_uöt_t
 *
≈
, 
i
;

1351 
ngx_°r_t
 *
vÆue
;

1352 
ngx_c⁄f_íum_t
 *
e
;

1354 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1356 i‡(*
≈
 !
NGX_CONF_UNSET_UINT
) {

1360 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1361 
e
 = 
cmd
->
po°
;

1363 
i
 = 0; 
e
[i].
«me
.
Àn
 != 0; i++) {

1364 i‡(
e
[
i
].
«me
.
Àn
 !
vÆue
[1].len

1365 || 
	`ngx_°rˇ£cmp
(
e
[
i
].
«me
.
d©a
, 
vÆue
[1].data) != 0)

1370 *
≈
 = 
e
[
i
].
vÆue
;

1372  
NGX_CONF_OK
;

1375 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1376 "övÆid vÆuê\"%s\"", 
vÆue
[1].
d©a
);

1378  
NGX_CONF_ERROR
;

1379 
	}
}

1383 
	$ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1385 *
p
 = 
c⁄f
;

1387 
ngx_uöt_t
 *
≈
, 
i
, 
m
;

1388 
ngx_°r_t
 *
vÆue
;

1389 
ngx_c⁄f_bômask_t
 *
mask
;

1392 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1393 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1394 
mask
 = 
cmd
->
po°
;

1396 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1397 
m
 = 0; 
mask
[m].
«me
.
Àn
 != 0; m++) {

1399 i‡(
mask
[
m
].
«me
.
Àn
 !
vÆue
[
i
].len

1400 || 
	`ngx_°rˇ£cmp
(
mask
[
m
].
«me
.
d©a
, 
vÆue
[
i
].data) != 0)

1405 i‡(*
≈
 & 
mask
[
m
].mask) {

1406 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1407 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1410 *
≈
 |
mask
[
m
].mask;

1416 i‡(
mask
[
m
].
«me
.
Àn
 == 0) {

1417 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1418 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1420  
NGX_CONF_ERROR
;

1424  
NGX_CONF_OK
;

1425 
	}
}

1431 
	$ngx_c⁄f_unsuµ‹ãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1434 
	}
}

1440 
	$ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1442 
ngx_c⁄f_dïªˇãd_t
 *
d
 = 
po°
;

1444 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1447 
d
->
ﬁd_«me
, d->
√w_«me
);

1449  
NGX_CONF_OK
;

1450 
	}
}

1454 
	$ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1456 
ngx_c⁄f_num_bounds_t
 *
bounds
 = 
po°
;

1457 
ngx_öt_t
 *
≈
 = 
d©a
;

1459 i‡(
bounds
->
high
 == -1) {

1460 i‡(*
≈
 >
bounds
->
low
) {

1461  
NGX_CONF_OK
;

1464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1466 
bounds
->
low
);

1468  
NGX_CONF_ERROR
;

1471 i‡(*
≈
 >
bounds
->
low
 && *≈ <bounds->
high
) {

1472  
NGX_CONF_OK
;

1475 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1477 
bounds
->
low
, bounds->
high
);

1479  
NGX_CONF_ERROR
;

1480 
	}
}

	@src/core/ngx_conf_file.h

8 #i‚de‡
_NGX_HTTP_CONF_FILE_H_INCLUDED_


9 
	#_NGX_HTTP_CONF_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

22 
	#NGX_CONF_NOARGS
 0x00000001

	)

23 
	#NGX_CONF_TAKE1
 0x00000002

	)

24 
	#NGX_CONF_TAKE2
 0x00000004

	)

25 
	#NGX_CONF_TAKE3
 0x00000008

	)

26 
	#NGX_CONF_TAKE4
 0x00000010

	)

27 
	#NGX_CONF_TAKE5
 0x00000020

	)

28 
	#NGX_CONF_TAKE6
 0x00000040

	)

29 
	#NGX_CONF_TAKE7
 0x00000080

	)

31 
	#NGX_CONF_MAX_ARGS
 8

	)

33 
	#NGX_CONF_TAKE12
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
)

	)

34 
	#NGX_CONF_TAKE13
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE3
)

	)

36 
	#NGX_CONF_TAKE23
 (
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

38 
	#NGX_CONF_TAKE123
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

39 
	#NGX_CONF_TAKE1234
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
 \

40 |
NGX_CONF_TAKE4
)

	)

42 
	#NGX_CONF_ARGS_NUMBER
 0x000000ff

	)

43 
	#NGX_CONF_BLOCK
 0x00000100

	)

44 
	#NGX_CONF_FLAG
 0x00000200

	)

45 
	#NGX_CONF_ANY
 0x00000400

	)

46 
	#NGX_CONF_1MORE
 0x00000800

	)

47 
	#NGX_CONF_2MORE
 0x00001000

	)

48 
	#NGX_CONF_MULTI
 0x00000000

	)

50 
	#NGX_DIRECT_CONF
 0x00010000

	)

52 
	#NGX_MAIN_CONF
 0x01000000

	)

53 
	#NGX_ANY_CONF
 0x0F000000

	)

57 
	#NGX_CONF_UNSET
 -1

	)

58 
	#NGX_CONF_UNSET_UINT
 (
ngx_uöt_t
Ë-1

	)

59 
	#NGX_CONF_UNSET_PTR
 (*Ë-1

	)

60 
	#NGX_CONF_UNSET_SIZE
 (
size_t
Ë-1

	)

61 
	#NGX_CONF_UNSET_MSEC
 (
ngx_m£c_t
Ë-1

	)

64 
	#NGX_CONF_OK
 
NULL


	)

65 
	#NGX_CONF_ERROR
 (*Ë-1

	)

67 
	#NGX_CONF_BLOCK_START
 1

	)

68 
	#NGX_CONF_BLOCK_DONE
 2

	)

69 
	#NGX_CONF_FILE_DONE
 3

	)

71 
	#NGX_CORE_MODULE
 0x45524F43

	)

72 
	#NGX_CONF_MODULE
 0x464E4F43

	)

75 
	#NGX_MAX_CONF_ERRSTR
 1024

	)

78 
	sngx_comm™d_s
 {

79 
ngx_°r_t
 
	m«me
;

80 
ngx_uöt_t
 
	mty≥
;

81 *(*
	m£t
)(
ngx_c⁄f_t
 *
	mcf
, 
ngx_comm™d_t
 *
	mcmd
, *
	mc⁄f
);

82 
ngx_uöt_t
 
	mc⁄f
;

83 
ngx_uöt_t
 
	moff£t
;

84 *
	mpo°
;

87 
	#ngx_nuŒ_comm™d
 { 
ngx_nuŒ_°rög
, 0, 
NULL
, 0, 0, NULL }

	)

90 
	sngx_›í_fûe_s
 {

91 
ngx_fd_t
 
	mfd
;

92 
ngx_°r_t
 
	m«me
;

94 (*
	mÊush
)(
ngx_›í_fûe_t
 *
	mfûe
, 
ngx_log_t
 *
	mlog
);

95 *
	md©a
;

99 
	#NGX_MODULE_V1
 0, 0, 0, 0, 0, 0, 1

	)

100 
	#NGX_MODULE_V1_PADDING
 0, 0, 0, 0, 0, 0, 0, 0

	)

102 
	sngx_moduÀ_s
 {

103 
ngx_uöt_t
 
	m˘x_ödex
;

104 
ngx_uöt_t
 
	mödex
;

106 
ngx_uöt_t
 
	m•¨e0
;

107 
ngx_uöt_t
 
	m•¨e1
;

108 
ngx_uöt_t
 
	m•¨e2
;

109 
ngx_uöt_t
 
	m•¨e3
;

111 
ngx_uöt_t
 
	mvîsi⁄
;

113 *
	m˘x
;

114 
ngx_comm™d_t
 *
	mcomm™ds
;

115 
ngx_uöt_t
 
	mty≥
;

117 
ngx_öt_t
 (*
öô_ma°î
)(
ngx_log_t
 *
	mlog
);

119 
ngx_öt_t
 (*
öô_moduÀ
)(
ngx_cy˛e_t
 *
	mcy˛e
);

121 
ngx_öt_t
 (*
öô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

122 
ngx_öt_t
 (*
öô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

123 (*
	mexô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

124 (*
	mexô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

126 (*
	mexô_ma°î
)(
ngx_cy˛e_t
 *
	mcy˛e
);

128 
uöçå_t
 
	m•¨e_hook0
;

129 
uöçå_t
 
	m•¨e_hook1
;

130 
uöçå_t
 
	m•¨e_hook2
;

131 
uöçå_t
 
	m•¨e_hook3
;

132 
uöçå_t
 
	m•¨e_hook4
;

133 
uöçå_t
 
	m•¨e_hook5
;

134 
uöçå_t
 
	m•¨e_hook6
;

135 
uöçå_t
 
	m•¨e_hook7
;

140 
ngx_°r_t
 
	m«me
;

141 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

142 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

143 } 
	tngx_c‹e_moduÀ_t
;

147 
ngx_fûe_t
 
	mfûe
;

148 
ngx_buf_t
 *
	mbuf„r
;

149 
ngx_uöt_t
 
	mlöe
;

150 } 
	tngx_c⁄f_fûe_t
;

153 *(*
	tngx_c⁄f_h™dÀr_±
)(
	tngx_c⁄f_t
 *
	tcf
,

154 
	tngx_comm™d_t
 *
	tdummy
, *
	tc⁄f
);

157 
	sngx_c⁄f_s
 {

158 *
	m«me
;

159 
ngx_¨øy_t
 *
	m¨gs
;

161 
ngx_cy˛e_t
 *
	mcy˛e
;

162 
ngx_poﬁ_t
 *
	mpoﬁ
;

163 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

164 
ngx_c⁄f_fûe_t
 *
	mc⁄f_fûe
;

165 
ngx_log_t
 *
	mlog
;

167 *
	m˘x
;

168 
ngx_uöt_t
 
	mmoduÀ_ty≥
;

169 
ngx_uöt_t
 
	mcmd_ty≥
;

171 
ngx_c⁄f_h™dÀr_±
 
	mh™dÀr
;

172 *
	mh™dÀr_c⁄f
;

176 *(*
	tngx_c⁄f_po°_h™dÀr_±
Ë(
	tngx_c⁄f_t
 *
	tcf
,

177 *
	td©a
, *
	tc⁄f
);

180 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

181 } 
	tngx_c⁄f_po°_t
;

185 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

186 *
	mﬁd_«me
;

187 *
	m√w_«me
;

188 } 
	tngx_c⁄f_dïªˇãd_t
;

192 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

193 
ngx_öt_t
 
	mlow
;

194 
ngx_öt_t
 
	mhigh
;

195 } 
	tngx_c⁄f_num_bounds_t
;

199 
ngx_°r_t
 
	m«me
;

200 
ngx_uöt_t
 
	mvÆue
;

201 } 
	tngx_c⁄f_íum_t
;

204 
	#NGX_CONF_BITMASK_SET
 1

	)

207 
ngx_°r_t
 
	m«me
;

208 
ngx_uöt_t
 
	mmask
;

209 } 
	tngx_c⁄f_bômask_t
;

213 * 
ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

214 *
ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

217 
	#ngx_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
Ëc⁄f_˘x[moduÀ.
ödex
]

	)

221 
	#ngx_c⁄f_öô_vÆue
(
c⁄f
, ) \

222 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

223 
c⁄f
 = ; \

224 }

	)

226 
	#ngx_c⁄f_öô_±r_vÆue
(
c⁄f
, ) \

227 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

228 
c⁄f
 = ; \

229 }

	)

231 
	#ngx_c⁄f_öô_uöt_vÆue
(
c⁄f
, ) \

232 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

233 
c⁄f
 = ; \

234 }

	)

236 
	#ngx_c⁄f_öô_size_vÆue
(
c⁄f
, ) \

237 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

238 
c⁄f
 = ; \

239 }

	)

241 
	#ngx_c⁄f_öô_m£c_vÆue
(
c⁄f
, ) \

242 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

243 
c⁄f
 = ; \

244 }

	)

246 
	#ngx_c⁄f_mîge_vÆue
(
c⁄f
, 
¥ev
, ) \

247 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

248 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

249 }

	)

251 
	#ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
, 
¥ev
, ) \

252 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

253 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_PTR
) ?  :Örev; \

254 }

	)

256 
	#ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
, 
¥ev
, ) \

257 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

258 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_UINT
) ?  :Örev; \

259 }

	)

261 
	#ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
, 
¥ev
, ) \

262 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

263 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_MSEC
) ?  :Örev; \

264 }

	)

266 
	#ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
, 
¥ev
, ) \

267 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

268 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

269 }

	)

271 
	#ngx_c⁄f_mîge_size_vÆue
(
c⁄f
, 
¥ev
, ) \

272 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

273 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_SIZE
) ?  :Örev; \

274 }

	)

276 
	#ngx_c⁄f_mîge_off_vÆue
(
c⁄f
, 
¥ev
, ) \

277 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

278 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

279 }

	)

281 
	#ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
, 
¥ev
, ) \

282 i‡(
c⁄f
.
d©a
 =
NULL
) { \

283 i‡(
¥ev
.
d©a
) { \

284 
c⁄f
.
Àn
 = 
¥ev
.len; \

285 
c⁄f
.
d©a
 = 
¥ev
.data; \

287 
c⁄f
.
Àn
 = () - 1; \

288 
c⁄f
.
d©a
 = (
u_ch¨
 *) ; \

290 }

	)

292 
	#ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
, 
¥ev
, 
deÁu…_num
, 
deÁu…_size
) \

293 i‡(
c⁄f
.
num
 == 0) { \

294 i‡(
¥ev
.
num
) { \

295 
c⁄f
.
num
 = 
¥ev
.num; \

296 
c⁄f
.
size
 = 
¥ev
.size; \

298 
c⁄f
.
num
 = 
deÁu…_num
; \

299 
c⁄f
.
size
 = 
deÁu…_size
; \

301 }

	)

303 
	#ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
, 
¥ev
, ) \

304 i‡(
c⁄f
 == 0) { \

305 
c⁄f
 = (
¥ev
 == 0) ?  :Örev; \

306 }

	)

309 *
ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
);

310 *
ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

311 *
ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

314 
ngx_öt_t
 
ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
,

315 
ngx_uöt_t
 
c⁄f_¥efix
);

316 
ngx_›í_fûe_t
 *
ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

317 
ngx_cde˛
 
ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
,

318 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

321 *
ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

322 *
ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

323 *
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

324 *
c⁄f
);

325 *
ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

326 *
ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

327 *
ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

328 *
ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

329 *
ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

330 *
ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

331 *
ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

332 *
ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

333 *
ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

336 
ngx_uöt_t
 
ngx_max_moduÀ
;

337 
ngx_moduÀ_t
 *
ngx_moduÀs
[];

	@src/core/ngx_config.h

8 #i‚de‡
_NGX_CONFIG_H_INCLUDED_


9 
	#_NGX_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_auto_hódîs.h
>

15 #i‡
deföed
 
__Døg⁄Fly__
 && !deföed 
__FªeBSD__


16 
	#__FªeBSD__
 4

	)

17 
	#__FªeBSD_vîsi⁄
 480101

	)

21 #i‡(
NGX_FREEBSD
)

22 
	~<ngx_‰ìbsd_c⁄fig.h
>

25 #ñi‡(
NGX_LINUX
)

26 
	~<ngx_löux_c⁄fig.h
>

29 #ñi‡(
NGX_SOLARIS
)

30 
	~<ngx_sﬁ¨is_c⁄fig.h
>

33 #ñi‡(
NGX_DARWIN
)

34 
	~<ngx_d¨wö_c⁄fig.h
>

37 #ñi‡(
NGX_WIN32
)

38 
	~<ngx_wö32_c⁄fig.h
>

42 
	~<ngx_posix_c⁄fig.h
>

46 #i‡(
NGX_HAVE_NETINET_SERVAL_H
)

47 
	#NGX_HAVE_SERVAL
 1

	)

48 
	~<√töë/£rvÆ.h
>

51 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


52 
	#NGX_HAVE_SO_SNDLOWAT
 1

	)

56 #i‡!(
NGX_WIN32
)

58 
	#ngx_sig«l_hñ≥r
(
n
Ë
SIG
##
	)
n

59 
	#ngx_sig«l_vÆue
(
n
Ë
	`ngx_sig«l_hñ≥r
“)

	)

61 
	#ngx_øndom
 
øndom


	)

64 
	#NGX_SHUTDOWN_SIGNAL
 
QUIT


	)

65 
	#NGX_TERMINATE_SIGNAL
 
TERM


	)

66 
	#NGX_NOACCEPT_SIGNAL
 
WINCH


	)

67 
	#NGX_RECONFIGURE_SIGNAL
 
HUP


	)

69 #i‡(
NGX_LINUXTHREADS
)

70 
	#NGX_REOPEN_SIGNAL
 
INFO


	)

71 
	#NGX_CHANGEBIN_SIGNAL
 
XCPU


	)

73 
	#NGX_REOPEN_SIGNAL
 
USR1


	)

74 
	#NGX_CHANGEBIN_SIGNAL
 
USR2


	)

77 
	#ngx_cde˛


	)

78 
	#ngx_libc_cde˛


	)

82 
öçå_t
 
	tngx_öt_t
;

83 
uöçå_t
 
	tngx_uöt_t
;

84 
öçå_t
 
	tngx_Êag_t
;

87 
	#NGX_INT32_LEN
 ("-2147483648"Ë- 1

	)

88 
	#NGX_INT64_LEN
 ("-9223372036854775808"Ë- 1

	)

90 #i‡(
NGX_PTR_SIZE
 == 4)

91 
	#NGX_INT_T_LEN
 
NGX_INT32_LEN


	)

93 
	#NGX_INT_T_LEN
 
NGX_INT64_LEN


	)

97 #i‚de‡
NGX_ALIGNMENT


98 
	#NGX_ALIGNMENT
 (Ë

	)

101 
	#ngx_Æign
(
d
, 
a
Ë(((dË+ (®- 1)Ë& ~◊ - 1))

	)

102 
	#ngx_Æign_±r
(
p
, 
a
) \

103 (
u_ch¨
 *Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
a
 - 1)Ë& ~((uöçå_tË®- 1))

	)

106 
	#ngx_ab‹t
 
ab‹t


	)

110 
	#NGX_INVALID_ARRAY_INDEX
 0x80000000

	)

114 #i‚de‡
ngx_ölöe


115 
	#ngx_ölöe
 
ölöe


	)

118 #i‚de‡
INADDR_NONE


119 
	#INADDR_NONE
 ((Ë-1)

	)

122 #ifde‡
MAXHOSTNAMELEN


123 
	#NGX_MAXHOSTNAMELEN
 
MAXHOSTNAMELEN


	)

125 
	#NGX_MAXHOSTNAMELEN
 256

	)

129 #i‡((
__GNU__
 =2Ë&& (
__GNUC_MINOR__
 < 8))

130 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffffLL

	)

132 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffff

	)

135 
	#NGX_MAX_INT32_VALUE
 (
uöt32_t
Ë0x7fffffff

	)

	@src/core/ngx_connection.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_os_io_t
 
	gngx_io
;

16 
ngx_døö_c⁄√˘i⁄s
();

19 
ngx_li°íög_t
 *

20 
	$ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
, 
sockÀn_t
 
sockÀn
)

22 
size_t
 
Àn
;

23 
ngx_li°íög_t
 *
ls
;

24 
sockaddr
 *
ß
;

25 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

27 
ls
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
li°íög
);

28 i‡(
ls
 =
NULL
) {

29  
NULL
;

32 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

34 
ß
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
sockÀn
);

35 i‡(
ß
 =
NULL
) {

36  
NULL
;

39 
	`ngx_mem˝y
(
ß
, 
sockaddr
, 
sockÀn
);

41 
ls
->
sockaddr
 = 
ß
;

42 
ls
->
sockÀn
 = socklen;

44 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

45 
ls
->
addr_ãxt
.
Àn
 =Üen;

47 
ls
->
sockaddr
->
ß_Ámûy
) {

48 #i‡(
NGX_HAVE_INET6
)

49 
AF_INET6
:

50 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

53 #i‡(
NGX_HAVE_SERVAL
)

54 
AF_SERVAL
:

55 
ls
->
addr_ãxt_max_Àn
 = 
NGX_SERVAL_ADDRSTRLEN
;

58 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

59 
AF_UNIX
:

60 
ls
->
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

61 
Àn
++;

64 
AF_INET
:

65 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

68 
ls
->
addr_ãxt_max_Àn
 = 
NGX_SOCKADDR_STRLEN
;

72 
ls
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

73 i‡(
ls
->
addr_ãxt
.
d©a
 =
NULL
) {

74  
NULL
;

77 
	`ngx_mem˝y
(
ls
->
addr_ãxt
.
d©a
, 
ãxt
, 
Àn
);

79 
ls
->
fd
 = (
ngx_sockë_t
) -1;

80 
ls
->
ty≥
 = 
SOCK_STREAM
;

82 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

83 
ls
->
rcvbuf
 = -1;

84 
ls
->
¢dbuf
 = -1;

86 #i‡(
NGX_HAVE_SETFIB
)

87 
ls
->
£tfib
 = -1;

90  
ls
;

91 
	}
}

94 
ngx_öt_t


95 
	$ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

97 
size_t
 
Àn
;

98 
ngx_uöt_t
 
i
;

99 
ngx_li°íög_t
 *
ls
;

100 
sockÀn_t
 
ﬁí
;

101 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

102 
ngx_îr_t
 
îr
;

103 
ac˚±_fûãr_¨g
 
af
;

105 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

106 
timeout
;

109 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

110 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

112 
ls
[
i
].
sockaddr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 
NGX_SOCKADDRLEN
);

113 i‡(
ls
[
i
].
sockaddr
 =
NULL
) {

114  
NGX_ERROR
;

117 
ls
[
i
].
sockÀn
 = 
NGX_SOCKADDRLEN
;

118 i‡(
	`gësock«me
(
ls
[
i
].
fd
,Üs[i].
sockaddr
, &ls[i].
sockÀn
) == -1) {

119 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

121 "sockë #%d faûed", 
ls
[
i
].
fd
);

122 
ls
[
i
].
ign‹e
 = 1;

126 
ls
[
i
].
sockaddr
->
ß_Ámûy
) {

128 #i‡(
NGX_HAVE_INET6
)

129 
AF_INET6
:

130 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

131 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + (":65535") - 1;

135 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

136 
AF_UNIX
:

137 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

138 
Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

142 
AF_INET
:

143 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

144 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

148 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

150 "™ unsuµ‹ãdÖrŸocﬁ famûy", 
ls
[
i
].
fd
);

151 
ls
[
i
].
ign‹e
 = 1;

155 
ls
[
i
].
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
);

156 i‡(
ls
[
i
].
addr_ãxt
.
d©a
 =
NULL
) {

157  
NGX_ERROR
;

160 
Àn
 = 
	`ngx_sock_¡›
(
ls
[
i
].
sockaddr
,Üs[i].
addr_ãxt
.
d©a
,Üen, 1);

161 i‡(
Àn
 == 0) {

162  
NGX_ERROR
;

165 
ls
[
i
].
addr_ãxt
.
Àn
 =Üen;

167 
ls
[
i
].
backlog
 = 
NGX_LISTEN_BACKLOG
;

169 
ﬁí
 = ();

171 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&ls[i].
rcvbuf
,

172 &
ﬁí
)

175 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

177 &
ls
[
i
].
addr_ãxt
);

179 
ls
[
i
].
rcvbuf
 = -1;

182 
ﬁí
 = ();

184 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&ls[i].
¢dbuf
,

185 &
ﬁí
)

188 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

190 &
ls
[
i
].
addr_ãxt
);

192 
ls
[
i
].
¢dbuf
 = -1;

198 #i‡(
NGX_HAVE_SETFIB
)

200 i‡(
	`gësock›t
(
ls
[
i
].
£tfib
, 
SOL_SOCKET
, 
SO_SETFIB
,

201 (*Ë&
ls
[
i
].
£tfib
, &
ﬁí
)

204 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

206 &
ls
[
i
].
addr_ãxt
);

208 
ls
[
i
].
£tfib
 = -1;

214 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

216 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

217 
ﬁí
 = (
ac˚±_fûãr_¨g
);

219 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
af
, &
ﬁí
)

222 
îr
 = 
ngx_î∫o
;

224 i‡(
îr
 =
NGX_EINVAL
) {

228 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

230 &
ls
[
i
].
addr_ãxt
);

234 i‡(
ﬁí
 < (
ac˚±_fûãr_¨g
Ë|| 
af
.
af_«me
[0] == '\0') {

238 
ls
[
i
].
ac˚±_fûãr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 16);

239 i‡(
ls
[
i
].
ac˚±_fûãr
 =
NULL
) {

240  
NGX_ERROR
;

243 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
,

244 (
u_ch¨
 *Ë
af
.
af_«me
, 16);

247 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

249 
timeout
 = 0;

250 
ﬁí
 = ();

252 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
, &
timeout
, &
ﬁí
)

255 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
ngx_î∫o
,

257 &
ls
[
i
].
addr_ãxt
);

261 i‡(
ﬁí
 < (Ë|| 
timeout
 == 0) {

265 
ls
[
i
].
de„ºed_ac˚±
 = 1;

269  
NGX_OK
;

270 
	}
}

273 
ngx_öt_t


274 
	$ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

276 
ªu£addr
;

277 
ngx_uöt_t
 
i
, 
åõs
, 
Áûed
;

278 
ngx_îr_t
 
îr
;

279 
ngx_log_t
 *
log
;

280 
ngx_sockë_t
 
s
;

281 
ngx_li°íög_t
 *
ls
;

283 
ªu£addr
 = 1;

284 #i‡(
NGX_SUPPRESS_WARN
)

285 
Áûed
 = 0;

288 
log
 = 
cy˛e
->log;

292 
åõs
 = 5;Åries;Åries--) {

293 
Áûed
 = 0;

297 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

298 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

300 i‡(
ls
[
i
].
ign‹e
) {

304 i‡(
ls
[
i
].
fd
 != -1) {

308 i‡(
ls
[
i
].
öhîôed
) {

317 
s
 = 
	`ngx_sockë
(
ls
[
i
].
sockaddr
->
ß_Ámûy
,Üs[i].
ty≥
, 0);

319 i‡(
s
 == -1) {

320 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

321 
ngx_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

322  
NGX_ERROR
;

325 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

326 (c⁄° *Ë&
ªu£addr
, ())

329 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

331 &
ls
[
i
].
addr_ãxt
);

333 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

334 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

335 
ngx_˛o£_sockë_n
 " %V failed",

336 &
ls
[
i
].
addr_ãxt
);

339  
NGX_ERROR
;

342 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

344 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET6
 &&Üs[i].
ùv6⁄ly
) {

345 
ùv6⁄ly
;

347 
ùv6⁄ly
 = (
ls
[
i
].ipv6only == 1);

349 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

350 (c⁄° *Ë&
ùv6⁄ly
, ())

353 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

355 &
ls
[
i
].
addr_ãxt
);

361 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
)) {

362 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

363 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

364 
ngx_n⁄blockög_n
 " %V failed",

365 &
ls
[
i
].
addr_ãxt
);

367 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

368 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

369 
ngx_˛o£_sockë_n
 " %V failed",

370 &
ls
[
i
].
addr_ãxt
);

373  
NGX_ERROR
;

377 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

378 "böd(Ë%V #%d ", &
ls
[
i
].
addr_ãxt
, 
s
);

380 i‡(
	`böd
(
s
, 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
) == -1) {

381 
îr
 = 
ngx_sockë_î∫o
;

383 i‡(
îr
 =
NGX_EADDRINUSE
 && 
ngx_ã°_c⁄fig
) {

387 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

388 "böd(Ëtÿ%V faûed", &
ls
[
i
].
addr_ãxt
);

390 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

391 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

392 
ngx_˛o£_sockë_n
 " %V failed",

393 &
ls
[
i
].
addr_ãxt
);

396 i‡(
îr
 !
NGX_EADDRINUSE
) {

397  
NGX_ERROR
;

400 
Áûed
 = 1;

405 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

407 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

408 
mode_t
 
mode
;

409 
u_ch¨
 *
«me
;

411 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

412 
mode
 = (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
);

414 i‡(
	`chmod
((*Ë
«me
, 
mode
) == -1) {

415 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

416 "chmod(Ë\"%s\" faûed", 
«me
);

419 i‡(
ngx_ã°_c⁄fig
) {

420 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

421 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

422 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

428 i‡(
	`li°í
(
s
, 
ls
[
i
].
backlog
) == -1) {

429 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

431 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

433 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

434 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

435 
ngx_˛o£_sockë_n
 " %V failed",

436 &
ls
[
i
].
addr_ãxt
);

439  
NGX_ERROR
;

442 
ls
[
i
].
li°í
 = 1;

444 
ls
[
i
].
fd
 = 
s
;

447 i‡(!
Áûed
) {

453 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

456 
	`ngx_m¶ìp
(500);

459 i‡(
Áûed
) {

460 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0, "still couldÇot bind()");

461  
NGX_ERROR
;

464  
NGX_OK
;

465 
	}
}

469 
	$ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

471 
kì∑live
;

472 
ngx_uöt_t
 
i
;

473 
ngx_li°íög_t
 *
ls
;

475 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

476 
ac˚±_fûãr_¨g
 
af
;

478 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

479 
timeout
;

482 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

483 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

485 
ls
[
i
].
log
 = *ls[i].
logp
;

487 i‡(
ls
[
i
].
rcvbuf
 != -1) {

488 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

489 (c⁄° *Ë&
ls
[
i
].
rcvbuf
, ())

492 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

494 
ls
[
i
].
rcvbuf
, &ls[i].
addr_ãxt
);

498 i‡(
ls
[
i
].
¢dbuf
 != -1) {

499 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

500 (c⁄° *Ë&
ls
[
i
].
¢dbuf
, ())

503 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

505 
ls
[
i
].
¢dbuf
, &ls[i].
addr_ãxt
);

509 i‡(
ls
[
i
].
kì∑live
) {

510 
kì∑live
 = (
ls
[
i
].keepalive == 1) ? 1 : 0;

512 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

513 (c⁄° *Ë&
kì∑live
, ())

516 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

518 
kì∑live
, &
ls
[
i
].
addr_ãxt
);

522 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

524 i‡(
ls
[
i
].
kìpidÀ
) {

525 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
,

526 (c⁄° *Ë&
ls
[
i
].
kìpidÀ
, ())

529 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

531 
ls
[
i
].
kìpidÀ
, &ls[i].
addr_ãxt
);

535 i‡(
ls
[
i
].
kìpötvl
) {

536 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPINTVL
,

537 (c⁄° *Ë&
ls
[
i
].
kìpötvl
, ())

540 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

542 
ls
[
i
].
kìpötvl
, &ls[i].
addr_ãxt
);

546 i‡(
ls
[
i
].
kìp˙t
) {

547 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPCNT
,

548 (c⁄° *Ë&
ls
[
i
].
kìp˙t
, ())

551 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

553 
ls
[
i
].
kìp˙t
, &ls[i].
addr_ãxt
);

559 #i‡(
NGX_HAVE_SETFIB
)

560 i‡(
ls
[
i
].
£tfib
 != -1) {

561 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

562 (c⁄° *Ë&
ls
[
i
].
£tfib
, ())

565 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

567 
ls
[
i
].
£tfib
, &ls[i].
addr_ãxt
);

574 
t˝_nodñay
 = 1;

576 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

577 (c⁄° *Ë&
t˝_nodñay
, ())

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

582 &
ls
[
i
].
addr_ãxt
);

587 i‡(
ls
[
i
].
li°í
) {

591 i‡(
	`li°í
(
ls
[
i
].
fd
,Üs[i].
backlog
) == -1) {

592 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

594 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

603 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

605 #ifde‡
SO_ACCEPTFILTER


607 i‡(
ls
[
i
].
dñëe_de„ºed
) {

608 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, 
NULL
, 0)

611 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

614 &
ls
[
i
].
addr_ãxt
);

616 i‡(
ls
[
i
].
ac˚±_fûãr
) {

617 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

620 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

626 
ls
[
i
].
de„ºed_ac˚±
 = 0;

629 i‡(
ls
[
i
].
add_de„ºed
) {

630 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

631 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
af
.
af_«me
,

632 (
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
, 16);

634 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

635 &
af
, (
ac˚±_fûãr_¨g
))

638 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

641 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

645 
ls
[
i
].
de„ºed_ac˚±
 = 1;

650 #ifde‡
TCP_DEFER_ACCEPT


652 i‡(
ls
[
i
].
add_de„ºed
 ||Üs[i].
dñëe_de„ºed
) {

654 i‡(
ls
[
i
].
add_de„ºed
) {

655 
timeout
 = (Ë(
ls
[
i
].
po°_ac˚±_timeout
 / 1000);

658 
timeout
 = 0;

661 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
,

662 &
timeout
, ())

665 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

668 
timeout
, &
ls
[
i
].
addr_ãxt
);

674 i‡(
ls
[
i
].
add_de„ºed
) {

675 
ls
[
i
].
de„ºed_ac˚±
 = 1;

684 
	}
}

688 
	$ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

690 
ngx_uöt_t
 
i
;

691 
ngx_li°íög_t
 *
ls
;

692 
ngx_c⁄√˘i⁄_t
 *
c
;

694 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

698 
ngx_ac˚±_muãx_hñd
 = 0;

699 
ngx_u£_ac˚±_muãx
 = 0;

701 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

702 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

704 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

706 i‡(
c
) {

707 i‡(
c
->
ªad
->
a˘ive
) {

708 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

709 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

711 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

719 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0);

722 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

726 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

728 
c
->
fd
 = (
ngx_sockë_t
) -1;

731 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

732 "˛o£Üi°íög %V #%d ", &
ls
[
i
].
addr_ãxt
,Üs[i].
fd
);

734 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

735 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

736 
ngx_˛o£_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

739 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

741 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX


742 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER


743 && 
ngx_√w_bö¨y
 == 0)

745 
u_ch¨
 *
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

747 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

748 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

749 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

755 
ls
[
i
].
fd
 = (
ngx_sockë_t
) -1;

758 
cy˛e
->
li°íög
.
√…s
 = 0;

759 
	}
}

762 
ngx_c⁄√˘i⁄_t
 *

763 
	$ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
)

765 
ngx_uöt_t
 
ö°™˚
;

766 
ngx_evít_t
 *
ªv
, *
wev
;

767 
ngx_c⁄√˘i⁄_t
 *
c
;

771 i‡(
ngx_cy˛e
->
fûes
 && (
ngx_uöt_t
Ë
s
 >ngx_cy˛e->
fûes_n
) {

772 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

775 
s
, 
ngx_cy˛e
->
fûes_n
);

776  
NULL
;

781 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

783 i‡(
c
 =
NULL
) {

784 
	`ngx_døö_c⁄√˘i⁄s
();

785 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

788 i‡(
c
 =
NULL
) {

789 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

791 
ngx_cy˛e
->
c⁄√˘i⁄_n
);

795  
NULL
;

798 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
->
d©a
;

799 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
--;

803 i‡(
ngx_cy˛e
->
fûes
) {

804 
ngx_cy˛e
->
fûes
[
s
] = 
c
;

807 
ªv
 = 
c
->
ªad
;

808 
wev
 = 
c
->
wrôe
;

810 
	`ngx_memzîo
(
c
, (
ngx_c⁄√˘i⁄_t
));

812 
c
->
ªad
 = 
ªv
;

813 
c
->
wrôe
 = 
wev
;

814 
c
->
fd
 = 
s
;

815 
c
->
log
 =Üog;

817 
ö°™˚
 = 
ªv
->instance;

819 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

820 
	`ngx_memzîo
(
wev
, (
ngx_evít_t
));

822 
ªv
->
ö°™˚
 = !instance;

823 
wev
->
ö°™˚
 = !instance;

825 
ªv
->
ödex
 = 
NGX_INVALID_INDEX
;

826 
wev
->
ödex
 = 
NGX_INVALID_INDEX
;

828 
ªv
->
d©a
 = 
c
;

829 
wev
->
d©a
 = 
c
;

831 
wev
->
wrôe
 = 1;

833  
c
;

834 
	}
}

838 
	$ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

842 
c
->
d©a
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

843 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
;

844 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
++;

848 i‡(
ngx_cy˛e
->
fûes
) {

849 
ngx_cy˛e
->
fûes
[
c
->
fd
] = 
NULL
;

851 
	}
}

855 
	$ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

857 
ngx_îr_t
 
îr
;

858 
ngx_uöt_t
 
log_îr‹
, 
Àvñ
;

859 
ngx_sockë_t
 
fd
;

861 i‡(
c
->
fd
 == -1) {

862 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "connectionálready closed");

866 i‡(
c
->
ªad
->
timî_£t
) {

867 
	`ngx_dñ_timî
(
c
->
ªad
);

870 i‡(
c
->
wrôe
->
timî_£t
) {

871 
	`ngx_dñ_timî
(
c
->
wrôe
);

874 i‡(
ngx_dñ_c⁄n
) {

875 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

878 i‡(
c
->
ªad
->
a˘ive
 || c->ªad->
dißbÀd
) {

879 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

882 i‡(
c
->
wrôe
->
a˘ive
 || c->wrôe->
dißbÀd
) {

883 
	`ngx_dñ_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLOSE_EVENT
);

887 #i‡(
NGX_THREADS
)

895 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

897 i‡(
c
->
ªad
->
¥ev
) {

898 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

901 i‡(
c
->
wrôe
->
¥ev
) {

902 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

905 
c
->
ªad
->
˛o£d
 = 1;

906 
c
->
wrôe
->
˛o£d
 = 1;

908 i‡(
c
->
sögÀ_c⁄√˘i⁄
) {

909 
	`ngx_u∆ock
(&
c
->
lock
);

910 
c
->
ªad
->
locked
 = 0;

911 
c
->
wrôe
->
locked
 = 0;

914 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

918 i‡(
c
->
ªad
->
¥ev
) {

919 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

922 i‡(
c
->
wrôe
->
¥ev
) {

923 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

926 
c
->
ªad
->
˛o£d
 = 1;

927 
c
->
wrôe
->
˛o£d
 = 1;

931 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

933 
log_îr‹
 = 
c
->log_error;

935 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

937 
fd
 = 
c
->fd;

938 
c
->
fd
 = (
ngx_sockë_t
) -1;

940 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

942 
îr
 = 
ngx_sockë_î∫o
;

944 i‡(
îr
 =
NGX_ECONNRESET
 ||Éº =
NGX_ENOTCONN
) {

946 
log_îr‹
) {

948 
NGX_ERROR_INFO
:

949 
Àvñ
 = 
NGX_LOG_INFO
;

952 
NGX_ERROR_ERR
:

953 
Àvñ
 = 
NGX_LOG_ERR
;

957 
Àvñ
 = 
NGX_LOG_CRIT
;

961 
Àvñ
 = 
NGX_LOG_CRIT
;

966 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 
îr
,

967 
ngx_˛o£_sockë_n
 " %d faûed", 
fd
);

969 
	}
}

973 
	$ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
)

975 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

976 "ªußbÀ c⁄√˘i⁄: %ui", 
ªußbÀ
);

978 i‡(
c
->
ªußbÀ
) {

979 
	`ngx_queue_ªmove
(&
c
->
queue
);

982 
c
->
ªußbÀ
 =Ñeusable;

984 i‡(
ªußbÀ
) {

987 
	`ngx_queue_ö£π_hód
(

988 (
ngx_queue_t
 *Ë&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
, &
c
->
queue
);

990 
	}
}

994 
	$ngx_døö_c⁄√˘i⁄s
()

996 
ngx_öt_t
 
i
;

997 
ngx_queue_t
 *
q
;

998 
ngx_c⁄√˘i⁄_t
 *
c
;

1000 
i
 = 0; i < 32; i++) {

1001 i‡(
	`ngx_queue_em±y
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
)) {

1005 
q
 = 
	`ngx_queue_œ°
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

1006 
c
 = 
	`ngx_queue_d©a
(
q
, 
ngx_c⁄√˘i⁄_t
, 
queue
);

1008 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

1011 
c
->
˛o£
 = 1;

1012 
c
->
ªad
->
	`h™dÀr
(c->read);

1014 
	}
}

1017 
ngx_öt_t


1018 
	$ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

1019 
ngx_uöt_t
 
p‹t
)

1021 
sockÀn_t
 
Àn
;

1022 
ngx_uöt_t
 
addr
;

1023 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

1024 
sockaddr_ö
 *
sö
;

1025 #i‡(
NGX_HAVE_INET6
)

1026 
ngx_uöt_t
 
i
;

1027 
sockaddr_ö6
 *
sö6
;

1030 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

1032 #i‡(
NGX_HAVE_INET6
)

1033 
AF_INET6
:

1034 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

1036 
addr
 = 0, 
i
 = 0;áddr == 0 && i < 16; i++) {

1037 
addr
 |
sö6
->
sö6_addr
.
s6_addr
[
i
];

1044 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

1045 
addr
 = 
sö
->
sö_addr
.
s_addr
;

1049 i‡(
addr
 == 0) {

1051 
Àn
 = 
NGX_SOCKADDRLEN
;

1053 i‡(
	`gësock«me
(
c
->
fd
, (
sockaddr
 *Ë&
ß
, &
Àn
) == -1) {

1054 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, "getsockname() failed");

1055  
NGX_ERROR
;

1058 
c
->
loˇl_sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
Àn
);

1059 i‡(
c
->
loˇl_sockaddr
 =
NULL
) {

1060  
NGX_ERROR
;

1063 
	`ngx_mem˝y
(
c
->
loˇl_sockaddr
, &
ß
, 
Àn
);

1066 i‡(
s
 =
NULL
) {

1067  
NGX_OK
;

1070 
s
->
Àn
 = 
	`ngx_sock_¡›
(
c
->
loˇl_sockaddr
, s->
d©a
, s->Àn, 
p‹t
);

1072  
NGX_OK
;

1073 
	}
}

1076 
ngx_öt_t


1077 
	$ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
)

1079 
ngx_uöt_t
 
Àvñ
;

1083 i‡((
îr
 =
NGX_ECONNRESET


1084 #i‡(
NGX_WIN32
)

1085 || 
îr
 =
NGX_ECONNABORTED


1087 Ë&& 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_ECONNRESET
)

1092 #i‡(
NGX_SOLARIS
)

1093 i‡(
îr
 =
NGX_EINVAL
 && 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_EINVAL
) {

1098 i‡(
îr
 == 0

1099 || 
îr
 =
NGX_ECONNRESET


1100 #i‡(
NGX_WIN32
)

1101 || 
îr
 =
NGX_ECONNABORTED


1103 || 
îr
 =
NGX_EPIPE


1105 || 
îr
 =
NGX_ENOTCONN


1106 || 
îr
 =
NGX_ETIMEDOUT


1107 || 
îr
 =
NGX_ECONNREFUSED


1108 || 
îr
 =
NGX_ENETDOWN


1109 || 
îr
 =
NGX_ENETUNREACH


1110 || 
îr
 =
NGX_EHOSTDOWN


1111 || 
îr
 =
NGX_EHOSTUNREACH
)

1113 
c
->
log_îr‹
) {

1115 
NGX_ERROR_IGNORE_EINVAL
:

1116 
NGX_ERROR_IGNORE_ECONNRESET
:

1117 
NGX_ERROR_INFO
:

1118 
Àvñ
 = 
NGX_LOG_INFO
;

1122 
Àvñ
 = 
NGX_LOG_ERR
;

1126 
Àvñ
 = 
NGX_LOG_ALERT
;

1129 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1131  
NGX_ERROR
;

1132 
	}
}

	@src/core/ngx_connection.h

8 #i‚de‡
_NGX_CONNECTION_H_INCLUDED_


9 
	#_NGX_CONNECTION_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°íög_s
 
	tngx_li°íög_t
;

18 
	sngx_li°íög_s
 {

19 
ngx_sockë_t
 
	mfd
;

21 
sockaddr
 *
	msockaddr
;

22 
sockÀn_t
 
	msockÀn
;

23 
size_t
 
	maddr_ãxt_max_Àn
;

24 
ngx_°r_t
 
	maddr_ãxt
;

26 
	mty≥
;

28 
	mbacklog
;

29 
	mrcvbuf
;

30 
	m¢dbuf
;

31 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

32 
	mkìpidÀ
;

33 
	mkìpötvl
;

34 
	mkìp˙t
;

38 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

40 *
	m£rvîs
;

42 
ngx_log_t
 
	mlog
;

43 
ngx_log_t
 *
	mlogp
;

45 
size_t
 
	mpoﬁ_size
;

47 
size_t
 
	mpo°_ac˚±_buf„r_size
;

49 
ngx_m£c_t
 
	mpo°_ac˚±_timeout
;

51 
ngx_li°íög_t
 *
	m¥evious
;

52 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

54 
	m›í
:1;

55 
	mªmaö
:1;

56 
	mign‹e
:1;

58 
	mbound
:1;

59 
	möhîôed
:1;

60 
	mn⁄blockög_ac˚±
:1;

61 
	mli°í
:1;

62 
	mn⁄blockög
:1;

63 
	msh¨ed
:1;

64 
	maddr_¡›
:1;

66 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

67 
	mùv6⁄ly
:2;

69 
	mkì∑live
:2;

71 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

72 
	mde„ºed_ac˚±
:1;

73 
	mdñëe_de„ºed
:1;

74 
	madd_de„ºed
:1;

75 #ifde‡
SO_ACCEPTFILTER


76 *
	mac˚±_fûãr
;

79 #i‡(
NGX_HAVE_SETFIB
)

80 
	m£tfib
;

87 
	mNGX_ERROR_ALERT
 = 0,

88 
	mNGX_ERROR_ERR
,

89 
	mNGX_ERROR_INFO
,

90 
	mNGX_ERROR_IGNORE_ECONNRESET
,

91 
	mNGX_ERROR_IGNORE_EINVAL


92 } 
	tngx_c⁄√˘i⁄_log_îr‹_e
;

96 
	mNGX_TCP_NODELAY_UNSET
 = 0,

97 
	mNGX_TCP_NODELAY_SET
,

98 
	mNGX_TCP_NODELAY_DISABLED


99 } 
	tngx_c⁄√˘i⁄_t˝_nodñay_e
;

103 
	mNGX_TCP_NOPUSH_UNSET
 = 0,

104 
	mNGX_TCP_NOPUSH_SET
,

105 
	mNGX_TCP_NOPUSH_DISABLED


106 } 
	tngx_c⁄√˘i⁄_t˝_n›ush_e
;

109 
	#NGX_LOWLEVEL_BUFFERED
 0x0f

	)

110 
	#NGX_SSL_BUFFERED
 0x01

	)

113 
	sngx_c⁄√˘i⁄_s
 {

114 *
	md©a
;

115 
ngx_evít_t
 *
	mªad
;

116 
ngx_evít_t
 *
	mwrôe
;

118 
ngx_sockë_t
 
	mfd
;

120 
ngx_ªcv_±
 
	mªcv
;

121 
ngx_£nd_±
 
	m£nd
;

122 
ngx_ªcv_chaö_±
 
	mªcv_chaö
;

123 
ngx_£nd_chaö_±
 
	m£nd_chaö
;

125 
ngx_li°íög_t
 *
	mli°íög
;

127 
off_t
 
	m£¡
;

129 
ngx_log_t
 *
	mlog
;

131 
ngx_poﬁ_t
 *
	mpoﬁ
;

133 
sockaddr
 *
	msockaddr
;

134 
sockÀn_t
 
	msockÀn
;

135 
ngx_°r_t
 
	maddr_ãxt
;

137 #i‡(
NGX_SSL
)

138 
ngx_s¶_c⁄√˘i⁄_t
 *
	ms¶
;

141 
sockaddr
 *
	mloˇl_sockaddr
;

143 
ngx_buf_t
 *
	mbuf„r
;

145 
ngx_queue_t
 
	mqueue
;

147 
ngx_©omic_uöt_t
 
	mnumbî
;

149 
ngx_uöt_t
 
	mªque°s
;

151 
	mbuf„ªd
:8;

153 
	mlog_îr‹
:3;

155 
	msögÀ_c⁄√˘i⁄
:1;

156 
	mu√x≥˘ed_eof
:1;

157 
	mtimedout
:1;

158 
	mîr‹
:1;

159 
	mde°royed
:1;

161 
	midÀ
:1;

162 
	mªußbÀ
:1;

163 
	m˛o£
:1;

165 
	m£ndfûe
:1;

166 
	m¢dlow©
:1;

167 
	mt˝_nodñay
:2;

168 
	mt˝_n›ush
:2;

170 #i‡(
NGX_HAVE_IOCP
)

171 
	mac˚±_c⁄ãxt_upd©ed
:1;

174 #i‡(
NGX_HAVE_AIO_SENDFILE
)

175 
	maio_£ndfûe
:1;

176 
ngx_buf_t
 *
	mbusy_£ndfûe
;

179 #i‡(
NGX_THREADS
)

180 
ngx_©omic_t
 
	mlock
;

185 
ngx_li°íög_t
 *
ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
,

186 
sockÀn_t
 
sockÀn
);

187 
ngx_öt_t
 
ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

188 
ngx_öt_t
 
ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

189 
ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

190 
ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

191 
ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

192 
ngx_öt_t
 
ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

193 
ngx_uöt_t
 
p‹t
);

194 
ngx_öt_t
 
ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
);

196 
ngx_c⁄√˘i⁄_t
 *
ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
);

197 
ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

199 
ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
);

	@src/core/ngx_core.h

8 #i‚de‡
_NGX_CORE_H_INCLUDED_


9 
	#_NGX_CORE_H_INCLUDED_


	)

12 
ngx_moduÀ_s
 
	tngx_moduÀ_t
;

13 
ngx_c⁄f_s
 
	tngx_c⁄f_t
;

14 
ngx_cy˛e_s
 
	tngx_cy˛e_t
;

15 
ngx_poﬁ_s
 
	tngx_poﬁ_t
;

16 
ngx_chaö_s
 
	tngx_chaö_t
;

17 
ngx_log_s
 
	tngx_log_t
;

18 
ngx_¨øy_s
 
	tngx_¨øy_t
;

19 
ngx_›í_fûe_s
 
	tngx_›í_fûe_t
;

20 
ngx_comm™d_s
 
	tngx_comm™d_t
;

21 
ngx_fûe_s
 
	tngx_fûe_t
;

22 
ngx_evít_s
 
	tngx_evít_t
;

23 
ngx_evít_aio_s
 
	tngx_evít_aio_t
;

24 
ngx_c⁄√˘i⁄_s
 
	tngx_c⁄√˘i⁄_t
;

26 (*
	tngx_evít_h™dÀr_±
)(
	tngx_evít_t
 *
	tev
);

27 (*
	tngx_c⁄√˘i⁄_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
);

30 
	#NGX_OK
 0

	)

31 
	#NGX_ERROR
 -1

	)

32 
	#NGX_AGAIN
 -2

	)

33 
	#NGX_BUSY
 -3

	)

34 
	#NGX_DONE
 -4

	)

35 
	#NGX_DECLINED
 -5

	)

36 
	#NGX_ABORT
 -6

	)

39 
	~<ngx_î∫o.h
>

40 
	~<ngx_©omic.h
>

41 
	~<ngx_thªad.h
>

42 
	~<ngx_rbåì.h
>

43 
	~<ngx_time.h
>

44 
	~<ngx_sockë.h
>

45 
	~<ngx_°rög.h
>

46 
	~<ngx_fûes.h
>

47 
	~<ngx_shmem.h
>

48 
	~<ngx_¥o˚ss.h
>

49 
	~<ngx_u£r.h
>

50 
	~<ngx_∑r£.h
>

51 
	~<ngx_log.h
>

52 
	~<ngx_Æloc.h
>

53 
	~<ngx_∑Œoc.h
>

54 
	~<ngx_buf.h
>

55 
	~<ngx_queue.h
>

56 
	~<ngx_¨øy.h
>

57 
	~<ngx_li°.h
>

58 
	~<ngx_hash.h
>

59 
	~<ngx_fûe.h
>

60 
	~<ngx_¸c.h
>

61 
	~<ngx_¸c32.h
>

62 
	~<ngx_murmurhash.h
>

63 #i‡(
NGX_PCRE
)

64 
	~<ngx_ªgex.h
>

66 
	~<ngx_ødix_åì.h
>

67 
	~<ngx_times.h
>

68 
	~<ngx_shmtx.h
>

69 
	~<ngx_¶ab.h
>

70 
	~<ngx_öë.h
>

71 
	~<ngx_cy˛e.h
>

72 #i‡(
NGX_OPENSSL
)

73 
	~<ngx_evít_›ís¶.h
>

75 
	~<ngx_¥o˚ss_cy˛e.h
>

76 
	~<ngx_c⁄f_fûe.h
>

77 
	~<ngx_ªsﬁvî.h
>

78 
	~<ngx_›í_fûe_ˇche.h
>

79 
	~<ngx_os.h
>

80 
	~<ngx_c⁄√˘i⁄.h
>

83 
	#LF
 (
u_ch¨
Ë10

	)

84 
	#CR
 (
u_ch¨
Ë13

	)

85 
	#CRLF
 "\x0d\x0a"

	)

88 
	#ngx_abs
(
vÆue
Ë(((vÆueË>0Ë? (vÆueË: - (vÆue))

	)

89 
	#ngx_max
(
vÆ1
, 
vÆ2
Ë((vÆ1 < vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

90 
	#ngx_mö
(
vÆ1
, 
vÆ2
Ë((vÆ1 > vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

92 
	`ngx_˝uöfo
();

94 #i‡(
NGX_HAVE_OPENAT
)

95 
	#NGX_DISABLE_SYMLINKS_OFF
 0

	)

96 
	#NGX_DISABLE_SYMLINKS_ON
 1

	)

97 
	#NGX_DISABLE_SYMLINKS_NOTOWNER
 2

	)

	@src/core/ngx_cpuinfo.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(–
__i386__
 || 
__amd64__
 ) && ( 
__GNUC__
 || 
__INTEL_COMPILER
 ))

15 
ngx_ölöe
 
ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
);

18 #i‡–
__i386__
 )

20 
ngx_ölöe
 

21 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

30 
	`__asm__
 (

42 : : "a" (
i
), "D" (
buf
) : "ecx", "edx", "esi", "memory" );

43 
	}
}

49 
ngx_ölöe
 

50 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

52 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

54 
	`__asm__
 (

58 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
Ë: "a" (
i
) );

60 
buf
[0] = 
óx
;

61 
buf
[1] = 
ebx
;

62 
buf
[2] = 
edx
;

63 
buf
[3] = 
ecx
;

64 
	}
}

73 
	$ngx_˝uöfo
()

75 
u_ch¨
 *
víd‹
;

76 
uöt32_t
 
vbuf
[5], 
˝u
[4], 
modñ
;

78 
vbuf
[0] = 0;

79 
vbuf
[1] = 0;

80 
vbuf
[2] = 0;

81 
vbuf
[3] = 0;

82 
vbuf
[4] = 0;

84 
	`ngx_˝uid
(0, 
vbuf
);

86 
víd‹
 = (
u_ch¨
 *Ë&
vbuf
[1];

88 i‡(
vbuf
[0] == 0) {

92 
	`ngx_˝uid
(1, 
˝u
);

94 i‡(
	`ngx_°rcmp
(
víd‹
, "GenuineIntel") == 0) {

96 (
˝u
[0] & 0xf00) >> 8) {

100 
ngx_ˇchñöe_size
 = 32;

105 
ngx_ˇchñöe_size
 = 32;

107 
modñ
 = ((
˝u
[0] & 0xf0000) >> 8) | (cpu[0] & 0xf0);

109 i‡(
modñ
 >= 0xd0) {

111 
ngx_ˇchñöe_size
 = 64;

121 
ngx_ˇchñöe_size
 = 128;

125 } i‡(
	`ngx_°rcmp
(
víd‹
, "AuthenticAMD") == 0) {

126 
ngx_ˇchñöe_size
 = 64;

128 
	}
}

134 
	$ngx_˝uöfo
()

136 
	}
}

	@src/core/ngx_crc.h

8 #i‚de‡
_NGX_CRC_H_INCLUDED_


9 
	#_NGX_CRC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
uöt32_t


19 
	$ngx_¸c
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

21 
uöt32_t
 
sum
;

23 
sum
 = 0; 
Àn
;Üen--) {

30 
sum
 = sum >> 1 | sum << 31;

32 
sum
 +*
d©a
++;

35  
sum
;

36 
	}
}

	@src/core/ngx_crc32.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

26 
uöt32_t
 
	gngx_¸c32_èbÀ16
[] = {

34 
uöt32_t
 
	gngx_¸c32_èbÀ256
[] = {

102 
uöt32_t
 *
	gngx_¸c32_èbÀ_sh‹t
 = 
ngx_¸c32_èbÀ16
;

105 
ngx_öt_t


106 
	$ngx_¸c32_èbÀ_öô
()

108 *
p
;

110 i‡(((
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t


111 & ~((
uöçå_t
Ë
ngx_ˇchñöe_size
 - 1))

112 =(
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t
)

114  
NGX_OK
;

117 
p
 = 
	`ngx_Æloc
(16 * (
uöt32_t
Ë+ 
ngx_ˇchñöe_size
, 
ngx_cy˛e
->
log
);

118 i‡(
p
 =
NULL
) {

119  
NGX_ERROR
;

122 
p
 = 
	`ngx_Æign_±r
’, 
ngx_ˇchñöe_size
);

124 
	`ngx_mem˝y
(
p
, 
ngx_¸c32_èbÀ16
, 16 * (
uöt32_t
));

126 
ngx_¸c32_èbÀ_sh‹t
 = 
p
;

128  
NGX_OK
;

129 
	}
}

	@src/core/ngx_crc32.h

8 #i‚de‡
_NGX_CRC32_H_INCLUDED_


9 
	#_NGX_CRC32_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 *
ngx_¸c32_èbÀ_sh‹t
;

17 
uöt32_t
 
ngx_¸c32_èbÀ256
[];

20 
ngx_ölöe
 
uöt32_t


21 
	$ngx_¸c32_sh‹t
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

23 
u_ch¨
 
c
;

24 
uöt32_t
 
¸c
;

26 
¸c
 = 0xffffffff;

28 
Àn
--) {

29 
c
 = *
p
++;

30 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 & 0xf)) & 0xf] ^ (crc >> 4);

31 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 >> 4)) & 0xf] ^ (crc >> 4);

34  
¸c
 ^ 0xffffffff;

35 
	}
}

38 
ngx_ölöe
 
uöt32_t


39 
	$ngx_¸c32_l⁄g
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

41 
uöt32_t
 
¸c
;

43 
¸c
 = 0xffffffff;

45 
Àn
--) {

46 
¸c
 = 
ngx_¸c32_èbÀ256
[(¸¯^ *
p
++) & 0xff] ^ (crc >> 8);

49  
¸c
 ^ 0xffffffff;

50 
	}
}

53 
	#ngx_¸c32_öô
(
¸c
) \

54 
¸c
 = 0xffffffff

	)

57 
ngx_ölöe
 

58 
	$ngx_¸c32_upd©e
(
uöt32_t
 *
¸c
, 
u_ch¨
 *
p
, 
size_t
 
Àn
)

60 
uöt32_t
 
c
;

62 
c
 = *
¸c
;

64 
Àn
--) {

65 
c
 = 
ngx_¸c32_èbÀ256
[(¯^ *
p
++) & 0xff] ^ (c >> 8);

68 *
¸c
 = 
c
;

69 
	}
}

72 
	#ngx_¸c32_föÆ
(
¸c
) \

73 
¸c
 ^0xffffffff

	)

76 
ngx_öt_t
 
ngx_¸c32_èbÀ_öô
();

	@src/core/ngx_crypt.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_¸y±.h
>

10 
	~<ngx_md5.h
>

11 #i‡(
NGX_HAVE_SHA1
)

12 
	~<ngx_sha1.h
>

16 #i‡(
NGX_CRYPT
)

18 
ngx_öt_t
 
ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

19 
u_ch¨
 **
í¸y±ed
);

20 
ngx_öt_t
 
ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

23 #i‡(
NGX_HAVE_SHA1
)

25 
ngx_öt_t
 
ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

26 
u_ch¨
 **
í¸y±ed
);

31 
u_ch¨
 *
ngx_¸y±_to64
(u_ch¨ *
p
, 
uöt32_t
 
v
, 
size_t
 
n
);

34 
ngx_öt_t


35 
	$ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

37 i‡(
	`ngx_°∫cmp
(
ß…
, "$apr1$", ("$apr1$") - 1) == 0) {

38  
	`ngx_¸y±_≠r1
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

40 } i‡(
	`ngx_°∫cmp
(
ß…
, "{PLAIN}", ("{PLAIN}") - 1) == 0) {

41  
	`ngx_¸y±_∂aö
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

43 #i‡(
NGX_HAVE_SHA1
)

44 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SSHA}", ("{SSHA}") - 1) == 0) {

45  
	`ngx_¸y±_ssha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

51  
	`ngx_libc_¸y±
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

52 
	}
}

55 
ngx_öt_t


56 
	$ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

58 
ngx_öt_t
 
n
;

59 
ngx_uöt_t
 
i
;

60 
u_ch¨
 *
p
, *
œ°
, 
föÆ
[16];

61 
size_t
 
ß…Àn
, 
keyÀn
;

62 
ngx_md5_t
 
md5
, 
˘x1
;

66 
keyÀn
 = 
	`ngx_°æí
(
key
);

70 
ß…
 += ("$apr1$") - 1;

71 
œ°
 = 
ß…
 + 8;

72 
p
 = 
ß…
; *∞&& *∞!'$' &&Ö < 
œ°
;Ö++) { }

73 
ß…Àn
 = 
p
 - 
ß…
;

77 
	`ngx_md5_öô
(&
md5
);

78 
	`ngx_md5_upd©e
(&
md5
, 
key
, 
keyÀn
);

79 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) "$apr1$", ("$apr1$") - 1);

80 
	`ngx_md5_upd©e
(&
md5
, 
ß…
, 
ß…Àn
);

82 
	`ngx_md5_öô
(&
˘x1
);

83 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

84 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

85 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

86 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

88 
n
 = 
keyÀn
;Ç > 0;Ç -= 16) {

89 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 
n
 > 16 ? 16 :Ç);

92 
	`ngx_memzîo
(
föÆ
, (final));

94 
i
 = 
keyÀn
; i; i >>= 1) {

95 i‡(
i
 & 1) {

96 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 1);

99 
	`ngx_md5_upd©e
(&
md5
, 
key
, 1);

103 
	`ngx_md5_föÆ
(
föÆ
, &
md5
);

105 
i
 = 0; i < 1000; i++) {

106 
	`ngx_md5_öô
(&
˘x1
);

108 i‡(
i
 & 1) {

109 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

112 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

115 i‡(
i
 % 3) {

116 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

119 i‡(
i
 % 7) {

120 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

123 i‡(
i
 & 1) {

124 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

127 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

130 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

135 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("$≠r1$"Ë- 1 + 
ß…Àn
 + 16 + 1);

136 i‡(*
í¸y±ed
 =
NULL
) {

137  
NGX_ERROR
;

140 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "$apr1$", ("$apr1$") - 1);

141 
p
 = 
	`ngx_c›y
’, 
ß…
, 
ß…Àn
);

142 *
p
++ = '$';

144 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 0]<<16) | (final[ 6]<<8) | final[12], 4);

145 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 1]<<16) | (final[ 7]<<8) | final[13], 4);

146 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 2]<<16) | (final[ 8]<<8) | final[14], 4);

147 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 3]<<16) | (final[ 9]<<8) | final[15], 4);

148 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 4]<<16) | (final[10]<<8) | final[ 5], 4);

149 
p
 = 
	`ngx_¸y±_to64
’, 
föÆ
[11], 2);

150 *
p
 = '\0';

152  
NGX_OK
;

153 
	}
}

156 
u_ch¨
 *

157 
	$ngx_¸y±_to64
(
u_ch¨
 *
p
, 
uöt32_t
 
v
, 
size_t
 
n
)

159 
u_ch¨
 
ôﬂ64
[] =

162 
n
--) {

163 *
p
++ = 
ôﬂ64
[
v
 & 0x3f];

164 
v
 >>= 6;

167  
p
;

168 
	}
}

171 
ngx_öt_t


172 
	$ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

174 
size_t
 
Àn
;

175 
u_ch¨
 *
p
;

177 
Àn
 = 
	`ngx_°æí
(
key
);

179 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("{PLAIN}"Ë- 1 + 
Àn
 + 1);

180 i‡(*
í¸y±ed
 =
NULL
) {

181  
NGX_ERROR
;

184 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{PLAIN}", ("{PLAIN}") - 1);

185 
	`ngx_mem˝y
(
p
, 
key
, 
Àn
 + 1);

187  
NGX_OK
;

188 
	}
}

191 #i‡(
NGX_HAVE_SHA1
)

193 
ngx_öt_t


194 
	$ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

196 
size_t
 
Àn
;

197 
ngx_öt_t
 
rc
;

198 
ngx_°r_t
 
ícoded
, 
decoded
;

199 
ngx_sha1_t
 
sha1
;

205 
ícoded
.
d©a
 = 
ß…
 + ("{SSHA}") - 1;

206 
ícoded
.
Àn
 = 
	`ngx_°æí
”ncoded.
d©a
);

208 
Àn
 = 
	`ngx_max
(
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len), 20);

210 
decoded
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

211 i‡(
decoded
.
d©a
 =
NULL
) {

212  
NGX_ERROR
;

215 
rc
 = 
	`ngx_decode_ba£64
(&
decoded
, &
ícoded
);

217 i‡(
rc
 !
NGX_OK
 || 
decoded
.
Àn
 < 20) {

218 
decoded
.
Àn
 = 20;

223 
	`ngx_sha1_öô
(&
sha1
);

224 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

225 
	`ngx_sha1_upd©e
(&
sha1
, 
decoded
.
d©a
 + 20, decoded.
Àn
 - 20);

226 
	`ngx_sha1_föÆ
(
decoded
.
d©a
, &
sha1
);

230 
Àn
 = ("{SSHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

232 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

233 i‡(*
í¸y±ed
 =
NULL
) {

234  
NGX_ERROR
;

237 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SSHA}", ("{SSHA}") - 1);

238 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

239 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

241  
NGX_OK
;

242 
	}
}

	@src/core/ngx_crypt.h

8 #i‚de‡
_NGX_CRYPT_H_INCLUDED_


9 
	#_NGX_CRYPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_öt_t
 
ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

	@src/core/ngx_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
);

14 
ngx_öt_t
 
ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, sockadd∏*
ß2
);

15 
ngx_öt_t
 
ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
,

16 
ngx_shm_z⁄e_t
 *
shm_z⁄e
);

17 
ngx_öt_t
 
ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
);

18 
ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
);

21 vﬁ©ûê
ngx_cy˛e_t
 *
	gngx_cy˛e
;

22 
ngx_¨øy_t
 
	gngx_ﬁd_cy˛es
;

24 
ngx_poﬁ_t
 *
	gngx_ãmp_poﬁ
;

25 
ngx_evít_t
 
	gngx_˛ó√r_evít
;

27 
ngx_uöt_t
 
	gngx_ã°_c⁄fig
;

28 
ngx_uöt_t
 
	gngx_quõt_mode
;

30 #i‡(
NGX_THREADS
)

31 
ngx_és_key_t
 
	gngx_c‹e_és_key
;

36 
ngx_c⁄√˘i⁄_t
 
	gdumb
;

39 
ngx_°r_t
 
	gîr‹_log
 = 
ngx_°rög
(
NGX_ERROR_LOG_PATH
);

42 
ngx_cy˛e_t
 *

43 
	$ngx_öô_cy˛e
(
ngx_cy˛e_t
 *
ﬁd_cy˛e
)

45 *
rv
;

46 **
£nv
, **
ív
;

47 
ngx_uöt_t
 
i
, 
n
;

48 
ngx_log_t
 *
log
;

49 
ngx_time_t
 *
ç
;

50 
ngx_c⁄f_t
 
c⁄f
;

51 
ngx_poﬁ_t
 *
poﬁ
;

52 
ngx_cy˛e_t
 *
cy˛e
, **
ﬁd
;

53 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
oshm_z⁄e
;

54 
ngx_li°_∑π_t
 *
∑π
, *
›¨t
;

55 
ngx_›í_fûe_t
 *
fûe
;

56 
ngx_li°íög_t
 *
ls
, *
∆s
;

57 
ngx_c‹e_c⁄f_t
 *
ccf
, *
ﬁd_ccf
;

58 
ngx_c‹e_moduÀ_t
 *
moduÀ
;

59 
ho°«me
[
NGX_MAXHOSTNAMELEN
];

61 
	`ngx_timez⁄e_upd©e
();

65 
ç
 = 
	`ngx_timeofday
();

66 
ç
->
£c
 = 0;

68 
	`ngx_time_upd©e
();

71 
log
 = 
ﬁd_cy˛e
->log;

73 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

74 i‡(
poﬁ
 =
NULL
) {

75  
NULL
;

77 
poﬁ
->
log
 =Üog;

79 
cy˛e
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_cy˛e_t
));

80 i‡(
cy˛e
 =
NULL
) {

81 
	`ngx_de°roy_poﬁ
(
poﬁ
);

82  
NULL
;

85 
cy˛e
->
poﬁ
 =Öool;

86 
cy˛e
->
log
 =Üog;

87 
cy˛e
->
√w_log
.
log_Àvñ
 = 
NGX_LOG_ERR
;

88 
cy˛e
->
ﬁd_cy˛e
 = old_cycle;

90 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
ﬁd_cy˛e
->conf_prefix.len;

91 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_prefix);

92 i‡(
cy˛e
->
c⁄f_¥efix
.
d©a
 =
NULL
) {

93 
	`ngx_de°roy_poﬁ
(
poﬁ
);

94  
NULL
;

97 
cy˛e
->
¥efix
.
Àn
 = 
ﬁd_cy˛e
->prefix.len;

98 
cy˛e
->
¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->prefix);

99 i‡(
cy˛e
->
¥efix
.
d©a
 =
NULL
) {

100 
	`ngx_de°roy_poﬁ
(
poﬁ
);

101  
NULL
;

104 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
ﬁd_cy˛e
->conf_file.len;

105 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ﬁd_cy˛e
->c⁄f_fûe.
Àn
 + 1);

106 i‡(
cy˛e
->
c⁄f_fûe
.
d©a
 =
NULL
) {

107 
	`ngx_de°roy_poﬁ
(
poﬁ
);

108  
NULL
;

110 
	`ngx_˝y°∫
(
cy˛e
->
c⁄f_fûe
.
d©a
, 
ﬁd_cy˛e
->conf_file.data,

111 
ﬁd_cy˛e
->
c⁄f_fûe
.
Àn
 + 1);

113 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
ﬁd_cy˛e
->conf_param.len;

114 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_param);

115 i‡(
cy˛e
->
c⁄f_∑øm
.
d©a
 =
NULL
) {

116 
	`ngx_de°roy_poﬁ
(
poﬁ
);

117  
NULL
;

121 
n
 = 
ﬁd_cy˛e
->
∑ths
.
√…s
 ? old_cycle->paths.nelts : 10;

123 
cy˛e
->
∑ths
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_∑th_t
 *));

124 i‡(
cy˛e
->
∑ths
.
ñts
 =
NULL
) {

125 
	`ngx_de°roy_poﬁ
(
poﬁ
);

126  
NULL
;

129 
cy˛e
->
∑ths
.
√…s
 = 0;

130 
cy˛e
->
∑ths
.
size
 = (
ngx_∑th_t
 *);

131 
cy˛e
->
∑ths
.
«Œoc
 = 
n
;

132 
cy˛e
->
∑ths
.
poﬁ
 =Öool;

135 i‡(
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
) {

136 
n
 = 
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
;

137 
∑π
 = 
ﬁd_cy˛e
->
›í_fûes
.∑π.
√xt
;Öart;Öart =Öart->next) {

138 
n
 +
∑π
->
√…s
;

142 
n
 = 20;

145 i‡(
	`ngx_li°_öô
(&
cy˛e
->
›í_fûes
, 
poﬁ
, 
n
, (
ngx_›í_fûe_t
))

146 !
NGX_OK
)

148 
	`ngx_de°roy_poﬁ
(
poﬁ
);

149  
NULL
;

153 i‡(
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
) {

154 
n
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
;

155 
∑π
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.∑π.
√xt
;Öart;Öart =Öart->next)

157 
n
 +
∑π
->
√…s
;

161 
n
 = 1;

164 i‡(
	`ngx_li°_öô
(&
cy˛e
->
sh¨ed_mem‹y
, 
poﬁ
, 
n
, (
ngx_shm_z⁄e_t
))

165 !
NGX_OK
)

167 
	`ngx_de°roy_poﬁ
(
poﬁ
);

168  
NULL
;

171 
n
 = 
ﬁd_cy˛e
->
li°íög
.
√…s
 ? old_cycle->listening.nelts : 10;

173 
cy˛e
->
li°íög
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_li°íög_t
));

174 i‡(
cy˛e
->
li°íög
.
ñts
 =
NULL
) {

175 
	`ngx_de°roy_poﬁ
(
poﬁ
);

176  
NULL
;

179 
cy˛e
->
li°íög
.
√…s
 = 0;

180 
cy˛e
->
li°íög
.
size
 = (
ngx_li°íög_t
);

181 
cy˛e
->
li°íög
.
«Œoc
 = 
n
;

182 
cy˛e
->
li°íög
.
poﬁ
 =Öool;

185 
	`ngx_queue_öô
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

188 
cy˛e
->
c⁄f_˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
ngx_max_moduÀ
 * (*));

189 i‡(
cy˛e
->
c⁄f_˘x
 =
NULL
) {

190 
	`ngx_de°roy_poﬁ
(
poﬁ
);

191  
NULL
;

195 i‡(
	`gëho°«me
(
ho°«me
, 
NGX_MAXHOSTNAMELEN
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "gethostname() failed");

197 
	`ngx_de°roy_poﬁ
(
poﬁ
);

198  
NULL
;

203 
ho°«me
[
NGX_MAXHOSTNAMELEN
 - 1] = '\0';

204 
cy˛e
->
ho°«me
.
Àn
 = 
	`ngx_°æí
(hostname);

206 
cy˛e
->
ho°«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, cy˛e->ho°«me.
Àn
);

207 i‡(
cy˛e
->
ho°«me
.
d©a
 =
NULL
) {

208 
	`ngx_de°roy_poﬁ
(
poﬁ
);

209  
NULL
;

212 
	`ngx_°æow
(
cy˛e
->
ho°«me
.
d©a
, (
u_ch¨
 *Ëho°«me, cy˛e->ho°«me.
Àn
);

215 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

216 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

220 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

222 i‡(
moduÀ
->
¸óã_c⁄f
) {

223 
rv
 = 
moduÀ
->
	`¸óã_c⁄f
(
cy˛e
);

224 i‡(
rv
 =
NULL
) {

225 
	`ngx_de°roy_poﬁ
(
poﬁ
);

226  
NULL
;

228 
cy˛e
->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
] = 
rv
;

233 
£nv
 = 
ívú⁄
;

236 
	`ngx_memzîo
(&
c⁄f
, (
ngx_c⁄f_t
));

238 
c⁄f
.
¨gs
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 10, (
ngx_°r_t
));

239 i‡(
c⁄f
.
¨gs
 =
NULL
) {

240 
	`ngx_de°roy_poﬁ
(
poﬁ
);

241  
NULL
;

244 
c⁄f
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

245 i‡(
c⁄f
.
ãmp_poﬁ
 =
NULL
) {

246 
	`ngx_de°roy_poﬁ
(
poﬁ
);

247  
NULL
;

251 
c⁄f
.
˘x
 = 
cy˛e
->
c⁄f_˘x
;

252 
c⁄f
.
cy˛e
 = cycle;

253 
c⁄f
.
poﬁ
 =Öool;

254 
c⁄f
.
log
 =Üog;

255 
c⁄f
.
moduÀ_ty≥
 = 
NGX_CORE_MODULE
;

256 
c⁄f
.
cmd_ty≥
 = 
NGX_MAIN_CONF
;

259 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

262 i‡(
	`ngx_c⁄f_∑øm
(&
c⁄f
Ë!
NGX_CONF_OK
) {

263 
ívú⁄
 = 
£nv
;

264 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

265  
NULL
;

268 i‡(
	`ngx_c⁄f_∑r£
(&
c⁄f
, &
cy˛e
->
c⁄f_fûe
Ë!
NGX_CONF_OK
) {

269 
ívú⁄
 = 
£nv
;

270 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

271  
NULL
;

274 i‡(
ngx_ã°_c⁄fig
 && !
ngx_quõt_mode
) {

275 
	`ngx_log_°dîr
(0, "the configuration file %s syntax is ok",

276 
cy˛e
->
c⁄f_fûe
.
d©a
);

279 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

280 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

284 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

286 i‡(
moduÀ
->
öô_c⁄f
) {

287 i‡(
moduÀ
->
	`öô_c⁄f
(
cy˛e
, cy˛e->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
])

288 =
NGX_CONF_ERROR
)

290 
ívú⁄
 = 
£nv
;

291 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

292  
NULL
;

297 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SIGNALLER
) {

298  
cy˛e
;

301 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

303 i‡(
ngx_ã°_c⁄fig
) {

305 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

306 
Áûed
;

309 } i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

316 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

317 
ngx_c‹e_moduÀ
);

318 i‡(
ccf
->
pid
.
Àn
 !
ﬁd_ccf
->pid.len

319 || 
	`ngx_°rcmp
(
ccf
->
pid
.
d©a
, 
ﬁd_ccf
->pid.data) != 0)

323 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

324 
Áûed
;

327 
	`ngx_dñëe_pidfûe
(
ﬁd_cy˛e
);

332 i‡(
	`ngx_ã°_lockfûe
(
cy˛e
->
lock_fûe
.
d©a
, 
log
Ë!
NGX_OK
) {

333 
Áûed
;

337 i‡(
	`ngx_¸óã_∑ths
(
cy˛e
, 
ccf
->
u£r
Ë!
NGX_OK
) {

338 
Áûed
;

342 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

343 
cy˛e
->
√w_log
.
fûe
 = 
	`ngx_c⁄f_›í_fûe
(cy˛e, &
îr‹_log
);

344 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

345 
Áûed
;

351 
∑π
 = &
cy˛e
->
›í_fûes
.part;

352 
fûe
 = 
∑π
->
ñts
;

354 
i
 = 0; ; i++) {

356 i‡(
i
 >
∑π
->
√…s
) {

357 i‡(
∑π
->
√xt
 =
NULL
) {

360 
∑π
 =Ö¨t->
√xt
;

361 
fûe
 = 
∑π
->
ñts
;

362 
i
 = 0;

365 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

369 
fûe
[
i
].
fd
 = 
	`ngx_›í_fûe
(fûe[i].
«me
.
d©a
,

370 
NGX_FILE_APPEND
,

371 
NGX_FILE_CREATE_OR_OPEN
,

372 
NGX_FILE_DEFAULT_ACCESS
);

374 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

376 &
fûe
[
i
], fûe[i].
fd
, fûe[i].
«me
.
d©a
);

378 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

380 
ngx_›í_fûe_n
 " \"%s\" failed",

381 
fûe
[
i
].
«me
.
d©a
);

382 
Áûed
;

385 #i‡!(
NGX_WIN32
)

386 i‡(
	`f˙é
(
fûe
[
i
].
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

387 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

389 
fûe
[
i
].
«me
.
d©a
);

390 
Áûed
;

395 
cy˛e
->
log
 = &cy˛e->
√w_log
;

396 
poﬁ
->
log
 = &
cy˛e
->
√w_log
;

401 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

402 
shm_z⁄e
 = 
∑π
->
ñts
;

404 
i
 = 0; ; i++) {

406 i‡(
i
 >
∑π
->
√…s
) {

407 i‡(
∑π
->
√xt
 =
NULL
) {

410 
∑π
 =Ö¨t->
√xt
;

411 
shm_z⁄e
 = 
∑π
->
ñts
;

412 
i
 = 0;

415 i‡(
shm_z⁄e
[
i
].
shm
.
size
 == 0) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

418 &
shm_z⁄e
[
i
].
shm
.
«me
);

419 
Áûed
;

422 
shm_z⁄e
[
i
].
shm
.
log
 = 
cy˛e
->log;

424 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

425 
oshm_z⁄e
 = 
›¨t
->
ñts
;

427 
n
 = 0; ;Ç++) {

429 i‡(
n
 >
›¨t
->
√…s
) {

430 i‡(
›¨t
->
√xt
 =
NULL
) {

433 
›¨t
 = o∑π->
√xt
;

434 
oshm_z⁄e
 = 
›¨t
->
ñts
;

435 
n
 = 0;

438 i‡(
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
 !
oshm_z⁄e
[
n
].shm.name.len) {

442 i‡(
	`ngx_°∫cmp
(
shm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

443 
oshm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

444 
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

450 i‡(
shm_z⁄e
[
i
].
èg
 =
oshm_z⁄e
[
n
].tag

451 && 
shm_z⁄e
[
i
].
shm
.
size
 =
oshm_z⁄e
[
n
].shm.size)

453 
shm_z⁄e
[
i
].
shm
.
addr
 = 
oshm_z⁄e
[
n
].shm.addr;

455 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
oshm_z⁄e
[
n
].
d©a
)

456 !
NGX_OK
)

458 
Áûed
;

461 
shm_z⁄e_found
;

464 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
n
].
shm
);

469 i‡(
	`ngx_shm_Æloc
(&
shm_z⁄e
[
i
].
shm
Ë!
NGX_OK
) {

470 
Áûed
;

473 i‡(
	`ngx_öô_z⁄e_poﬁ
(
cy˛e
, &
shm_z⁄e
[
i
]Ë!
NGX_OK
) {

474 
Áûed
;

477 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
NULL
Ë!
NGX_OK
) {

478 
Áûed
;

481 
shm_z⁄e_found
:

489 i‡(
ﬁd_cy˛e
->
li°íög
.
√…s
) {

490 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

491 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

492 
ls
[
i
].
ªmaö
 = 0;

495 
∆s
 = 
cy˛e
->
li°íög
.
ñts
;

496 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

498 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

499 i‡(
ls
[
i
].
ign‹e
) {

503 i‡(
	`ngx_cmp_sockaddr
(
∆s
[
n
].
sockaddr
, 
ls
[
i
].sockaddrË=
NGX_OK
)

505 
∆s
[
n
].
fd
 = 
ls
[
i
].fd;

506 
∆s
[
n
].
¥evious
 = &
ls
[
i
];

507 
ls
[
i
].
ªmaö
 = 1;

509 i‡(
ls
[
n
].
backlog
 !
∆s
[
i
].backlog) {

510 
∆s
[
n
].
li°í
 = 1;

513 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

519 
∆s
[
n
].
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

521 i‡(
ls
[
i
].
ac˚±_fûãr
 && 
∆s
[
n
].accept_filter) {

522 i‡(
	`ngx_°rcmp
(
ls
[
i
].
ac˚±_fûãr
,

523 
∆s
[
n
].
ac˚±_fûãr
)

526 
∆s
[
n
].
dñëe_de„ºed
 = 1;

527 
∆s
[
n
].
add_de„ºed
 = 1;

530 } i‡(
ls
[
i
].
ac˚±_fûãr
) {

531 
∆s
[
n
].
dñëe_de„ºed
 = 1;

533 } i‡(
∆s
[
n
].
ac˚±_fûãr
) {

534 
∆s
[
n
].
add_de„ºed
 = 1;

538 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

540 i‡(
ls
[
n
].
de„ºed_ac˚±
 && !
∆s
[n].deferred_accept) {

541 
∆s
[
n
].
dñëe_de„ºed
 = 1;

543 } i‡(
ls
[
i
].
de„ºed_ac˚±
 !
∆s
[
n
].deferred_accept)

545 
∆s
[
n
].
add_de„ºed
 = 1;

552 i‡(
∆s
[
n
].
fd
 == -1) {

553 
∆s
[
n
].
›í
 = 1;

558 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

559 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

560 
ls
[
i
].
›í
 = 1;

561 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

562 i‡(
ls
[
i
].
ac˚±_fûãr
) {

563 
ls
[
i
].
add_de„ºed
 = 1;

566 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

567 i‡(
ls
[
i
].
de„ºed_ac˚±
) {

568 
ls
[
i
].
add_de„ºed
 = 1;

574 i‡(
	`ngx_›í_li°íög_sockës
(
cy˛e
Ë!
NGX_OK
) {

575 
Áûed
;

578 i‡(!
ngx_ã°_c⁄fig
) {

579 
	`ngx_c⁄figuª_li°íög_sockës
(
cy˛e
);

585 i‡(!
ngx_u£_°dîr
 && 
cy˛e
->
log
->
fûe
->
fd
 !
ngx_°dîr
) {

587 i‡(
	`ngx_£t_°dîr
(
cy˛e
->
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

588 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

589 
ngx_£t_°dîr_n
 " failed");

593 
poﬁ
->
log
 = 
cy˛e
->log;

595 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

596 i‡(
ngx_moduÀs
[
i
]->
öô_moduÀ
) {

597 i‡(
ngx_moduÀs
[
i
]->
	`öô_moduÀ
(
cy˛e
Ë!
NGX_OK
) {

599 
	`exô
(1);

609 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

610 
oshm_z⁄e
 = 
›¨t
->
ñts
;

612 
i
 = 0; ; i++) {

614 i‡(
i
 >
›¨t
->
√…s
) {

615 i‡(
›¨t
->
√xt
 =
NULL
) {

616 
ﬁd_shm_z⁄e_d⁄e
;

618 
›¨t
 = o∑π->
√xt
;

619 
oshm_z⁄e
 = 
›¨t
->
ñts
;

620 
i
 = 0;

623 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

624 
shm_z⁄e
 = 
∑π
->
ñts
;

626 
n
 = 0; ;Ç++) {

628 i‡(
n
 >
∑π
->
√…s
) {

629 i‡(
∑π
->
√xt
 =
NULL
) {

632 
∑π
 =Ö¨t->
√xt
;

633 
shm_z⁄e
 = 
∑π
->
ñts
;

634 
n
 = 0;

637 i‡(
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
 =
shm_z⁄e
[
n
].shm.name.len

638 && 
	`ngx_°∫cmp
(
oshm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

639 
shm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

640 
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

643 
live_shm_z⁄e
;

647 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
i
].
shm
);

649 
live_shm_z⁄e
:

654 
ﬁd_shm_z⁄e_d⁄e
:

659 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

660 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

662 i‡(
ls
[
i
].
ªmaö
 ||Üs[i].
fd
 == -1) {

666 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

667 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

668 
ngx_˛o£_sockë_n
 "Üistening socket on %V failed",

669 &
ls
[
i
].
addr_ãxt
);

672 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

674 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

675 
u_ch¨
 *
«me
;

677 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

679 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

680 "dñëög sockë %s", 
«me
);

682 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

683 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

684 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

694 
∑π
 = &
ﬁd_cy˛e
->
›í_fûes
.part;

695 
fûe
 = 
∑π
->
ñts
;

697 
i
 = 0; ; i++) {

699 i‡(
i
 >
∑π
->
√…s
) {

700 i‡(
∑π
->
√xt
 =
NULL
) {

703 
∑π
 =Ö¨t->
√xt
;

704 
fûe
 = 
∑π
->
ñts
;

705 
i
 = 0;

708 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

712 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

713 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

714 
ngx_˛o£_fûe_n
 " \"%s\" failed",

715 
fûe
[
i
].
«me
.
d©a
);

719 
	`ngx_de°roy_poﬁ
(
c⁄f
.
ãmp_poﬁ
);

721 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_MASTER
 || 
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

729 
ív
 = 
ívú⁄
;

730 
ívú⁄
 = 
£nv
;

732 
	`ngx_de°roy_poﬁ
(
ﬁd_cy˛e
->
poﬁ
);

733 
cy˛e
->
ﬁd_cy˛e
 = 
NULL
;

735 
ívú⁄
 = 
ív
;

737  
cy˛e
;

741 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

742 
ngx_ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
cy˛e
->
log
);

743 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

744 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

746 
	`exô
(1);

749 
n
 = 10;

750 
ngx_ﬁd_cy˛es
.
ñts
 = 
	`ngx_pˇŒoc
(
ngx_ãmp_poﬁ
,

751 
n
 * (
ngx_cy˛e_t
 *));

752 i‡(
ngx_ﬁd_cy˛es
.
ñts
 =
NULL
) {

753 
	`exô
(1);

755 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

756 
ngx_ﬁd_cy˛es
.
size
 = (
ngx_cy˛e_t
 *);

757 
ngx_ﬁd_cy˛es
.
«Œoc
 = 
n
;

758 
ngx_ﬁd_cy˛es
.
poﬁ
 = 
ngx_ãmp_poﬁ
;

760 
ngx_˛ó√r_evít
.
h™dÀr
 = 
ngx_˛ón_ﬁd_cy˛es
;

761 
ngx_˛ó√r_evít
.
log
 = 
cy˛e
->log;

762 
ngx_˛ó√r_evít
.
d©a
 = &
dumb
;

763 
dumb
.
fd
 = (
ngx_sockë_t
) -1;

766 
ngx_ãmp_poﬁ
->
log
 = 
cy˛e
->log;

768 
ﬁd
 = 
	`ngx_¨øy_push
(&
ngx_ﬁd_cy˛es
);

769 i‡(
ﬁd
 =
NULL
) {

770 
	`exô
(1);

772 *
ﬁd
 = 
ﬁd_cy˛e
;

774 i‡(!
ngx_˛ó√r_evít
.
timî_£t
) {

775 
	`ngx_add_timî
(&
ngx_˛ó√r_evít
, 30000);

776 
ngx_˛ó√r_evít
.
timî_£t
 = 1;

779  
cy˛e
;

782 
Áûed
:

784 i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

785 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

786 
ngx_c‹e_moduÀ
);

787 i‡(
ﬁd_ccf
->
ívú⁄mít
) {

788 
ívú⁄
 = 
ﬁd_ccf
->
ívú⁄mít
;

794 
∑π
 = &
cy˛e
->
›í_fûes
.part;

795 
fûe
 = 
∑π
->
ñts
;

797 
i
 = 0; ; i++) {

799 i‡(
i
 >
∑π
->
√…s
) {

800 i‡(
∑π
->
√xt
 =
NULL
) {

803 
∑π
 =Ö¨t->
√xt
;

804 
fûe
 = 
∑π
->
ñts
;

805 
i
 = 0;

808 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

812 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

813 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

814 
ngx_˛o£_fûe_n
 " \"%s\" failed",

815 
fûe
[
i
].
«me
.
d©a
);

819 i‡(
ngx_ã°_c⁄fig
) {

820 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

821  
NULL
;

824 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

825 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

826 i‡(
ls
[
i
].
fd
 =-1 || !ls[i].
›í
) {

830 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

831 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

832 
ngx_˛o£_sockë_n
 " %V failed",

833 &
ls
[
i
].
addr_ãxt
);

837 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

839  
NULL
;

840 
	}
}

844 
	$ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
)

846 
	`ngx_de°roy_poﬁ
(
c⁄f
->
ãmp_poﬁ
);

847 
	`ngx_de°roy_poﬁ
(
c⁄f
->
poﬁ
);

848 
	}
}

851 
ngx_öt_t


852 
	$ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, sockadd∏*
ß2
)

854 
sockaddr_ö
 *
sö1
, *
sö2
;

855 #i‡(
NGX_HAVE_INET6
)

856 
sockaddr_ö6
 *
sö61
, *
sö62
;

858 #i‡(
NGX_HAVE_SERVAL
)

859 
sockaddr_sv
 *
ssv1
, *
ssv2
;

861 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

862 
sockaddr_un
 *
ßun1
, *
ßun2
;

865 i‡(
ß1
->
ß_Ámûy
 !
ß2
->sa_family) {

866  
NGX_DECLINED
;

869 
ß1
->
ß_Ámûy
) {

871 #i‡(
NGX_HAVE_INET6
)

872 
AF_INET6
:

873 
sö61
 = (
sockaddr_ö6
 *Ë
ß1
;

874 
sö62
 = (
sockaddr_ö6
 *Ë
ß2
;

876 i‡(
sö61
->
sö6_p‹t
 !
sö62
->sin6_port) {

877  
NGX_DECLINED
;

880 i‡(
	`ngx_memcmp
(&
sö61
->
sö6_addr
, &
sö62
->sin6_addr, 16) != 0) {

881  
NGX_DECLINED
;

887 #i‡(
NGX_HAVE_SERVAL
)

888 
AF_SERVAL
:

889 
ssv1
 = (
sockaddr_sv
 *Ë
ß1
;

890 
ssv2
 = (
sockaddr_sv
 *Ë
ß2
;

898 i‡(
	`ngx_memcmp
(&
ssv1
->
sv_§vid
, &
ssv2
->sv_srvid,

899 (
ssv2
->
sv_§vid
)) != 0) {

900  
NGX_DECLINED
;

906 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

907 
AF_UNIX
:

908 
ßun1
 = (
sockaddr_un
 *Ë
ß1
;

909 
ßun2
 = (
sockaddr_un
 *Ë
ß2
;

911 i‡(
	`ngx_memcmp
(&
ßun1
->
sun_∑th
, &
ßun2
->sun_path,

912 (
ßun1
->
sun_∑th
))

915  
NGX_DECLINED
;

923 
sö1
 = (
sockaddr_ö
 *Ë
ß1
;

924 
sö2
 = (
sockaddr_ö
 *Ë
ß2
;

926 i‡(
sö1
->
sö_p‹t
 !
sö2
->sin_port) {

927  
NGX_DECLINED
;

930 i‡(
sö1
->
sö_addr
.
s_addr
 !
sö2
->sin_addr.s_addr) {

931  
NGX_DECLINED
;

937  
NGX_OK
;

938 
	}
}

941 
ngx_öt_t


942 
	$ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_shm_z⁄e_t
 *
zn
)

944 
u_ch¨
 *
fûe
;

945 
ngx_¶ab_poﬁ_t
 *
•
;

947 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
zn
->
shm
.
addr
;

949 i‡(
zn
->
shm
.
exi°s
) {

951 i‡(
•
 =•->
addr
) {

952  
NGX_OK
;

955 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

957 &
zn
->
shm
.
«me
, 
•
->
addr
, sp);

958  
NGX_ERROR
;

961 
•
->
íd
 = 
zn
->
shm
.
addr
 + zn->shm.
size
;

962 
•
->
mö_shi·
 = 3;

963 
•
->
addr
 = 
zn
->
shm
.addr;

965 #i‡(
NGX_HAVE_ATOMIC_OPS
)

967 
fûe
 = 
NULL
;

971 
fûe
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, cy˛e->
lock_fûe
.
Àn
 + 
zn
->
shm
.
«me
.len);

972 i‡(
fûe
 =
NULL
) {

973  
NGX_ERROR
;

976 (Ë
	`ngx_•rötf
(
fûe
, "%V%V%Z", &
cy˛e
->
lock_fûe
, &
zn
->
shm
.
«me
);

980 i‡(
	`ngx_shmtx_¸óã
(&
•
->
muãx
, &•->
lock
, 
fûe
Ë!
NGX_OK
) {

981  
NGX_ERROR
;

984 
	`ngx_¶ab_öô
(
•
);

986  
NGX_OK
;

987 
	}
}

990 
ngx_öt_t


991 
	$ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
)

993 
size_t
 
Àn
;

994 
ngx_uöt_t
 
¸óã
;

995 
ngx_fûe_t
 
fûe
;

996 
u_ch¨
 
pid
[
NGX_INT64_LEN
 + 2];

998 i‡(
ngx_¥o˚ss
 > 
NGX_PROCESS_MASTER
) {

999  
NGX_OK
;

1002 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1004 
fûe
.
«me
 = *name;

1005 
fûe
.
log
 =Üog;

1007 
¸óã
 = 
ngx_ã°_c⁄fig
 ? 
NGX_FILE_CREATE_OR_OPEN
 : 
NGX_FILE_TRUNCATE
;

1009 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
,

1010 
¸óã
, 
NGX_FILE_DEFAULT_ACCESS
);

1012 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1013 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

1014 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1015  
NGX_ERROR
;

1018 i‡(!
ngx_ã°_c⁄fig
) {

1019 
Àn
 = 
	`ngx_¢¥ötf
(
pid
, 
NGX_INT64_LEN
 + 2, "%P%N", 
ngx_pid
) -Öid;

1021 i‡(
	`ngx_wrôe_fûe
(&
fûe
, 
pid
, 
Àn
, 0Ë=
NGX_ERROR
) {

1022  
NGX_ERROR
;

1026 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1027 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1028 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1031  
NGX_OK
;

1032 
	}
}

1036 
	$ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
)

1038 
u_ch¨
 *
«me
;

1039 
ngx_c‹e_c⁄f_t
 *
ccf
;

1041 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1043 
«me
 = 
ngx_√w_bö¨y
 ? 
ccf
->
ﬁdpid
.
d©a
 : ccf->
pid
.data;

1045 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1046 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1047 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1049 
	}
}

1052 
ngx_öt_t


1053 
	$ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
)

1055 
ssize_t
 
n
;

1056 
ngx_öt_t
 
pid
;

1057 
ngx_fûe_t
 
fûe
;

1058 
ngx_c‹e_c⁄f_t
 *
ccf
;

1059 
u_ch¨
 
buf
[
NGX_INT64_LEN
 + 2];

1061 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "signalÖrocess started");

1063 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1065 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1067 
fûe
.
«me
 = 
ccf
->
pid
;

1068 
fûe
.
log
 = 
cy˛e
->log;

1070 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
,

1071 
NGX_FILE_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1073 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1074 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 
ngx_î∫o
,

1075 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1079 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 
NGX_INT64_LEN
 + 2, 0);

1081 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1082 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1083 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1086 i‡(
n
 =
NGX_ERROR
) {

1090 
n
-- && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

1092 
pid
 = 
	`ngx_©oi
(
buf
, ++
n
);

1094 i‡(
pid
 =
NGX_ERROR
) {

1095 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 0,

1097 
n
, 
buf
, 
fûe
.
«me
.
d©a
);

1101  
	`ngx_os_sig«l_¥o˚ss
(
cy˛e
, 
sig
, 
pid
);

1103 
	}
}

1106 
ngx_öt_t


1107 
	$ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
)

1109 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

1110 
ngx_fd_t
 
fd
;

1112 
fd
 = 
	`ngx_›í_fûe
(
fûe
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

1113 
NGX_FILE_DEFAULT_ACCESS
);

1115 i‡(
fd
 =
NGX_INVALID_FILE
) {

1116 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

1117 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
);

1118  
NGX_ERROR
;

1121 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1122 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1123 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
);

1126 i‡(
	`ngx_dñëe_fûe
(
fûe
Ë=
NGX_FILE_ERROR
) {

1127 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1128 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
fûe
);

1133  
NGX_OK
;

1134 
	}
}

1138 
	$ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

1140 
ngx_fd_t
 
fd
;

1141 
ngx_uöt_t
 
i
;

1142 
ngx_li°_∑π_t
 *
∑π
;

1143 
ngx_›í_fûe_t
 *
fûe
;

1145 
∑π
 = &
cy˛e
->
›í_fûes
.part;

1146 
fûe
 = 
∑π
->
ñts
;

1148 
i
 = 0; ; i++) {

1150 i‡(
i
 >
∑π
->
√…s
) {

1151 i‡(
∑π
->
√xt
 =
NULL
) {

1154 
∑π
 =Ö¨t->
√xt
;

1155 
fûe
 = 
∑π
->
ñts
;

1156 
i
 = 0;

1159 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

1163 i‡(
fûe
[
i
].
Êush
) {

1164 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

1167 
fd
 = 
	`ngx_›í_fûe
(
fûe
[
i
].
«me
.
d©a
, 
NGX_FILE_APPEND
,

1168 
NGX_FILE_CREATE_OR_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1170 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

1172 
fûe
[
i
].
«me
.
d©a
, fûe[i].
fd
, fd);

1174 i‡(
fd
 =
NGX_INVALID_FILE
) {

1175 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1176 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1180 #i‡!(
NGX_WIN32
)

1181 i‡(
u£r
 !(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1182 
ngx_fûe_öfo_t
 
fi
;

1184 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, &
fi
)

1185 =
NGX_FILE_ERROR
)

1187 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1188 
ngx_fûe_öfo_n
 " \"%s\" failed",

1189 
fûe
[
i
].
«me
.
d©a
);

1191 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1192 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1193 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1194 
fûe
[
i
].
«me
.
d©a
);

1198 i‡(
fi
.
°_uid
 !
u£r
) {

1199 i‡(
	`chown
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
u£r
, -1) == -1) {

1200 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1202 
fûe
[
i
].
«me
.
d©a
, 
u£r
);

1204 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1205 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1206 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1207 
fûe
[
i
].
«me
.
d©a
);

1212 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
)) != (S_IRUSR|S_IWUSR)) {

1214 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
);

1216 i‡(
	`chmod
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

1217 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1218 "chmod(Ë\"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1220 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1221 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1222 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1223 
fûe
[
i
].
«me
.
d©a
);

1229 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

1230 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1232 
fûe
[
i
].
«me
.
d©a
);

1234 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1235 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1236 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1237 
fûe
[
i
].
«me
.
d©a
);

1244 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

1245 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1246 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1247 
fûe
[
i
].
«me
.
d©a
);

1250 
fûe
[
i
].
fd
 = fd;

1253 #i‡!(
NGX_WIN32
)

1255 i‡(
cy˛e
->
log
->
fûe
->
fd
 !
STDERR_FILENO
) {

1256 i‡(
	`dup2
(
cy˛e
->
log
->
fûe
->
fd
, 
STDERR_FILENO
) == -1) {

1257 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1263 
	}
}

1266 
ngx_shm_z⁄e_t
 *

1267 
	$ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
size_t
 
size
, *
èg
)

1269 
ngx_uöt_t
 
i
;

1270 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1271 
ngx_li°_∑π_t
 *
∑π
;

1273 
∑π
 = &
cf
->
cy˛e
->
sh¨ed_mem‹y
.part;

1274 
shm_z⁄e
 = 
∑π
->
ñts
;

1276 
i
 = 0; ; i++) {

1278 i‡(
i
 >
∑π
->
√…s
) {

1279 i‡(
∑π
->
√xt
 =
NULL
) {

1282 
∑π
 =Ö¨t->
√xt
;

1283 
shm_z⁄e
 = 
∑π
->
ñts
;

1284 
i
 = 0;

1287 i‡(
«me
->
Àn
 !
shm_z⁄e
[
i
].
shm
.name.len) {

1291 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
shm_z⁄e
[
i
].
shm
.«me.d©a,Çame->
Àn
)

1297 i‡(
èg
 !
shm_z⁄e
[
i
].tag) {

1298 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1301 &
shm_z⁄e
[
i
].
shm
.
«me
);

1302  
NULL
;

1305 i‡(
size
 && sizê!
shm_z⁄e
[
i
].
shm
.size) {

1306 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1309 
size
, &
shm_z⁄e
[
i
].
shm
.
«me
, shm_zone[i].shm.size);

1310  
NULL
;

1313  &
shm_z⁄e
[
i
];

1316 
shm_z⁄e
 = 
	`ngx_li°_push
(&
cf
->
cy˛e
->
sh¨ed_mem‹y
);

1318 i‡(
shm_z⁄e
 =
NULL
) {

1319  
NULL
;

1322 
shm_z⁄e
->
d©a
 = 
NULL
;

1323 
shm_z⁄e
->
shm
.
log
 = 
cf
->
cy˛e
->log;

1324 
shm_z⁄e
->
shm
.
size
 = size;

1325 
shm_z⁄e
->
shm
.
«me
 = *name;

1326 
shm_z⁄e
->
shm
.
exi°s
 = 0;

1327 
shm_z⁄e
->
öô
 = 
NULL
;

1328 
shm_z⁄e
->
èg
 =Åag;

1330  
shm_z⁄e
;

1331 
	}
}

1335 
	$ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
)

1337 
ngx_uöt_t
 
i
, 
n
, 
found
, 
live
;

1338 
ngx_log_t
 *
log
;

1339 
ngx_cy˛e_t
 **
cy˛e
;

1341 
log
 = 
ngx_cy˛e
->log;

1342 
ngx_ãmp_poﬁ
->
log
 =Üog;

1344 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "clean old cycles");

1346 
live
 = 0;

1348 
cy˛e
 = 
ngx_ﬁd_cy˛es
.
ñts
;

1349 
i
 = 0; i < 
ngx_ﬁd_cy˛es
.
√…s
; i++) {

1351 i‡(
cy˛e
[
i
] =
NULL
) {

1355 
found
 = 0;

1357 
n
 = 0;Ç < 
cy˛e
[
i
]->
c⁄√˘i⁄_n
;Ç++) {

1358 i‡(
cy˛e
[
i
]->
c⁄√˘i⁄s
[
n
].
fd
 !(
ngx_sockë_t
) -1) {

1359 
found
 = 1;

1361 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "livêfd:%d", 
n
);

1367 i‡(
found
) {

1368 
live
 = 1;

1372 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "˛ó¿ﬁd cy˛e: %d", 
i
);

1374 
	`ngx_de°roy_poﬁ
(
cy˛e
[
i
]->
poﬁ
);

1375 
cy˛e
[
i
] = 
NULL
;

1378 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "ﬁd cy˛e†°©us: %d", 
live
);

1380 i‡(
live
) {

1381 
	`ngx_add_timî
(
ev
, 30000);

1384 
	`ngx_de°roy_poﬁ
(
ngx_ãmp_poﬁ
);

1385 
ngx_ãmp_poﬁ
 = 
NULL
;

1386 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

1388 
	}
}

	@src/core/ngx_cycle.h

8 #i‚de‡
_NGX_CYCLE_H_INCLUDED_


9 
	#_NGX_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‚de‡
NGX_CYCLE_POOL_SIZE


17 
	#NGX_CYCLE_POOL_SIZE
 16384

	)

21 
	#NGX_DEBUG_POINTS_STOP
 1

	)

22 
	#NGX_DEBUG_POINTS_ABORT
 2

	)

25 
ngx_shm_z⁄e_s
 
	tngx_shm_z⁄e_t
;

27 
	$ngx_öt_t
 (*
	tngx_shm_z⁄e_öô_±
Ë(
	tngx_shm_z⁄e_t
 *
	tz⁄e
, *
	td©a
);

29 
	sngx_shm_z⁄e_s
 {

30 *
d©a
;

31 
ngx_shm_t
 
shm
;

32 
ngx_shm_z⁄e_öô_±
 
öô
;

33 *
èg
;

37 
	sngx_cy˛e_s
 {

38 ****
c⁄f_˘x
;

39 
ngx_poﬁ_t
 *
poﬁ
;

41 
ngx_log_t
 *
log
;

42 
ngx_log_t
 
√w_log
;

44 
ngx_c⁄√˘i⁄_t
 **
fûes
;

45 
ngx_c⁄√˘i⁄_t
 *
‰ì_c⁄√˘i⁄s
;

46 
ngx_uöt_t
 
‰ì_c⁄√˘i⁄_n
;

48 
ngx_queue_t
 
ªußbÀ_c⁄√˘i⁄s_queue
;

50 
ngx_¨øy_t
 
li°íög
;

51 
ngx_¨øy_t
 
∑ths
;

52 
ngx_li°_t
 
›í_fûes
;

53 
ngx_li°_t
 
sh¨ed_mem‹y
;

55 
ngx_uöt_t
 
c⁄√˘i⁄_n
;

56 
ngx_uöt_t
 
fûes_n
;

58 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄s
;

59 
ngx_evít_t
 *
ªad_evíts
;

60 
ngx_evít_t
 *
wrôe_evíts
;

62 
ngx_cy˛e_t
 *
ﬁd_cy˛e
;

64 
ngx_°r_t
 
c⁄f_fûe
;

65 
ngx_°r_t
 
c⁄f_∑øm
;

66 
ngx_°r_t
 
c⁄f_¥efix
;

67 
ngx_°r_t
 
¥efix
;

68 
ngx_°r_t
 
lock_fûe
;

69 
ngx_°r_t
 
ho°«me
;

74 
ngx_Êag_t
 
d´m⁄
;

75 
ngx_Êag_t
 
ma°î
;

77 
ngx_m£c_t
 
timî_ªsﬁuti⁄
;

79 
ngx_öt_t
 
w‹kî_¥o˚s£s
;

80 
ngx_öt_t
 
debug_poöts
;

82 
ngx_öt_t
 
æimô_nofûe
;

83 
ngx_öt_t
 
æimô_sig≥ndög
;

84 
off_t
 
æimô_c‹e
;

86 
¥i‹ôy
;

88 
ngx_uöt_t
 
˝u_afföôy_n
;

89 
uöt64_t
 *
˝u_afföôy
;

91 *
u£∫ame
;

92 
ngx_uid_t
 
u£r
;

93 
ngx_gid_t
 
group
;

95 
ngx_°r_t
 
w‹kög_dúe˘‹y
;

96 
ngx_°r_t
 
lock_fûe
;

98 
ngx_°r_t
 
pid
;

99 
ngx_°r_t
 
ﬁdpid
;

101 
ngx_¨øy_t
 
ív
;

102 **
ívú⁄mít
;

104 #i‡(
NGX_THREADS
)

105 
ngx_öt_t
 
w‹kî_thªads
;

106 
size_t
 
thªad_°ack_size
;

109 } 
	tngx_c‹e_c⁄f_t
;

113 
ngx_poﬁ_t
 *
poﬁ
;

114 } 
	tngx_c‹e_és_t
;

117 
	#ngx_is_öô_cy˛e
(
cy˛e
Ë(cy˛e->
c⁄f_˘x
 =
NULL
)

	)

120 
ngx_cy˛e_t
 *
	`ngx_öô_cy˛e
“gx_cy˛e_à*
ﬁd_cy˛e
);

121 
ngx_öt_t
 
	`ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
);

122 
	`ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
);

123 
ngx_öt_t
 
	`ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
);

124 
	`ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

125 **
	`ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
);

126 
ngx_pid_t
 
	`ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
);

127 
uöt64_t
 
	`ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
);

128 
ngx_shm_z⁄e_t
 *
	`ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

129 
size_t
 
size
, *
èg
);

132 vﬁ©ûê
ngx_cy˛e_t
 *
ngx_cy˛e
;

133 
ngx_¨øy_t
 
ngx_ﬁd_cy˛es
;

134 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

135 
ngx_uöt_t
 
ngx_ã°_c⁄fig
;

136 
ngx_uöt_t
 
ngx_quõt_mode
;

137 #i‡(
NGX_THREADS
)

138 
ngx_és_key_t
 
ngx_c‹e_és_key
;

	@src/core/ngx_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_©omic_t
 
	gãmp_numbî
 = 0;

13 
ngx_©omic_t
 *
	gngx_ãmp_numbî
 = &
ãmp_numbî
;

14 
ngx_©omic_öt_t
 
	gngx_øndom_numbî
 = 123456;

17 
ssize_t


18 
	$ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
)

20 
ngx_öt_t
 
rc
;

22 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

23 
rc
 = 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

24 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
);

26 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_AGAIN
) {

27  
rc
;

30 i‡(
tf
->
log_Àvñ
) {

31 
	`ngx_log_îr‹
(
tf
->
log_Àvñ
,Åf->
fûe
.
log
, 0, "%s %V",

32 
tf
->
w¨n
, &tf->
fûe
.
«me
);

36  
	`ngx_wrôe_chaö_to_fûe
(&
tf
->
fûe
, 
chaö
,Åf->
off£t
,Åf->
poﬁ
);

37 
	}
}

40 
ngx_öt_t


41 
	$ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
, 
ngx_poﬁ_t
 *
poﬁ
,

42 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,Çgx_uöt_à
ac˚ss
)

44 
uöt32_t
 
n
;

45 
ngx_îr_t
 
îr
;

46 
ngx_poﬁ_˛ónup_t
 *
˛n
;

47 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

49 
fûe
->
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len + 10;

51 
fûe
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, fûe->«me.
Àn
 + 1);

52 i‡(
fûe
->
«me
.
d©a
 =
NULL
) {

53  
NGX_ERROR
;

57 
i
 = 0; i < 
fûe
->
«me
.
Àn
; i++) {

58 
fûe
->
«me
.
d©a
[
i
] = 'X';

62 
	`ngx_mem˝y
(
fûe
->
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

64 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0);

66 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

67 i‡(
˛n
 =
NULL
) {

68  
NGX_ERROR
;

72 (Ë
	`ngx_•rötf
(
fûe
->
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len,

73 "%010uD%Z", 
n
);

75 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
fûe
->
«me
.
d©a
, fûe->«me.
Àn
);

77 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

78 "hashedÖ©h: %s", 
fûe
->
«me
.
d©a
);

80 
fûe
->
fd
 = 
	`ngx_›í_ãmpfûe
(fûe->
«me
.
d©a
, 
≥rsi°ít
, 
ac˚ss
);

82 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

83 "ãm∞fd:%d", 
fûe
->
fd
);

85 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

87 
˛n
->
h™dÀr
 = 
˛ón
 ? 
ngx_poﬁ_dñëe_fûe
 : 
ngx_poﬁ_˛ónup_fûe
;

88 
˛nf
 = 
˛n
->
d©a
;

90 
˛nf
->
fd
 = 
fûe
->fd;

91 
˛nf
->
«me
 = 
fûe
->«me.
d©a
;

92 
˛nf
->
log
 = 
poﬁ
->log;

94  
NGX_OK
;

97 
îr
 = 
ngx_î∫o
;

99 i‡(
îr
 =
NGX_EEXIST
) {

100 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(1);

104 i‡((
∑th
->
Àvñ
[0] =0Ë|| (
îr
 !
NGX_ENOPATH
)) {

105 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

106 
ngx_›í_ãmpfûe_n
 " \"%s\" failed",

107 
fûe
->
«me
.
d©a
);

108  
NGX_ERROR
;

111 i‡(
	`ngx_¸óã_∑th
(
fûe
, 
∑th
Ë=
NGX_ERROR
) {

112  
NGX_ERROR
;

115 
	}
}

119 
	$ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
)

121 
size_t
 
i
, 
Àvñ
;

122 
ngx_uöt_t
 
n
;

124 
i
 = 
∑th
->
«me
.
Àn
 + 1;

126 
fûe
[
∑th
->
«me
.
Àn
 +Öath->len] = '/';

128 
n
 = 0;Ç < 3;Ç++) {

129 
Àvñ
 = 
∑th
->Àvñ[
n
];

131 i‡(
Àvñ
 == 0) {

135 
Àn
 -
Àvñ
;

136 
fûe
[
i
 - 1] = '/';

137 
	`ngx_mem˝y
(&
fûe
[
i
], &fûe[
Àn
], 
Àvñ
);

138 
i
 +
Àvñ
 + 1;

140 
	}
}

143 
ngx_öt_t


144 
	$ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
)

146 
size_t
 
pos
;

147 
ngx_îr_t
 
îr
;

148 
ngx_uöt_t
 
i
;

150 
pos
 = 
∑th
->
«me
.
Àn
;

152 
i
 = 0; i < 3; i++) {

153 i‡(
∑th
->
Àvñ
[
i
] == 0) {

157 
pos
 +
∑th
->
Àvñ
[
i
] + 1;

159 
fûe
->
«me
.
d©a
[
pos
] = '\0';

161 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

162 "ãm∞fûe: \"%s\"", 
fûe
->
«me
.
d©a
);

164 i‡(
	`ngx_¸óã_dú
(
fûe
->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

165 
îr
 = 
ngx_î∫o
;

166 i‡(
îr
 !
NGX_EEXIST
) {

167 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

168 
ngx_¸óã_dú_n
 " \"%s\" failed",

169 
fûe
->
«me
.
d©a
);

170  
NGX_ERROR
;

174 
fûe
->
«me
.
d©a
[
pos
] = '/';

177  
NGX_OK
;

178 
	}
}

181 
ngx_îr_t


182 
	$ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
)

184 
u_ch¨
 *
p
, 
ch
;

185 
ngx_îr_t
 
îr
;

187 
îr
 = 0;

189 #i‡(
NGX_WIN32
)

190 
p
 = 
dú
 + 3;

192 
p
 = 
dú
 + 1;

195  ; *
p
;Ö++) {

196 
ch
 = *
p
;

198 i‡(
ch
 != '/') {

202 *
p
 = '\0';

204 i‡(
	`ngx_¸óã_dú
(
dú
, 
ac˚ss
Ë=
NGX_FILE_ERROR
) {

205 
îr
 = 
ngx_î∫o
;

207 
îr
) {

208 
NGX_EEXIST
:

209 
îr
 = 0;

210 
NGX_EACCES
:

214  
îr
;

218 *
p
 = '/';

221  
îr
;

222 
	}
}

225 
ngx_©omic_uöt_t


226 
	$ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
)

228 
ngx_©omic_uöt_t
 
n
, 
add
;

230 
add
 = 
cﬁlisi⁄
 ? 
ngx_øndom_numbî
 : 1;

232 
n
 = 
	`ngx_©omic_„tch_add
(
ngx_ãmp_numbî
, 
add
);

234  
n
 + 
add
;

235 
	}
}

239 
	$ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

241 *
p
 = 
c⁄f
;

243 
ssize_t
 
Àvñ
;

244 
ngx_°r_t
 *
vÆue
;

245 
ngx_uöt_t
 
i
, 
n
;

246 
ngx_∑th_t
 *
∑th
, **
¶Ÿ
;

248 
¶Ÿ
 = (
ngx_∑th_t
 **Ë(
p
 + 
cmd
->
off£t
);

250 i‡(*
¶Ÿ
) {

254 
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

255 i‡(
∑th
 =
NULL
) {

256  
NGX_CONF_ERROR
;

259 
vÆue
 = 
cf
->
¨gs
->
ñts
;

261 
∑th
->
«me
 = 
vÆue
[1];

263 i‡(
∑th
->
«me
.
d©a
[∑th->«me.
Àn
 - 1] == '/') {

264 
∑th
->
«me
.
Àn
--;

267 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
->
«me
, 0Ë!
NGX_OK
) {

268  
NULL
;

271 
∑th
->
Àn
 = 0;

272 
∑th
->
m™agî
 = 
NULL
;

273 
∑th
->
lﬂdî
 = 
NULL
;

274 
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

275 
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

277 
i
 = 0, 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
; i++,Ç++) {

278 
Àvñ
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
, vÆue[n].
Àn
);

279 i‡(
Àvñ
 =
NGX_ERROR
 ||Üevel == 0) {

283 
∑th
->
Àvñ
[
i
] =Üevel;

284 
∑th
->
Àn
 +
Àvñ
 + 1;

287 
i
 < 3) {

288 
∑th
->
Àvñ
[
i
++] = 0;

291 *
¶Ÿ
 = 
∑th
;

293 i‡(
	`ngx_add_∑th
(
cf
, 
¶Ÿ
Ë=
NGX_ERROR
) {

294  
NGX_CONF_ERROR
;

297  
NGX_CONF_OK
;

298 
	}
}

302 
	$ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,Çgx_∑th_à*
¥ev
,

303 
ngx_∑th_öô_t
 *
öô
)

305 i‡(*
∑th
) {

306  
NGX_CONF_OK
;

309 i‡(
¥ev
) {

310 *
∑th
 = 
¥ev
;

311  
NGX_CONF_OK
;

314 *
∑th
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

315 i‡(*
∑th
 =
NULL
) {

316  
NGX_CONF_ERROR
;

319 (*
∑th
)->
«me
 = 
öô
->name;

321 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &(*
∑th
)->
«me
, 0Ë!
NGX_OK
) {

322  
NGX_CONF_ERROR
;

325 (*
∑th
)->
Àvñ
[0] = 
öô
->level[0];

326 (*
∑th
)->
Àvñ
[1] = 
öô
->level[1];

327 (*
∑th
)->
Àvñ
[2] = 
öô
->level[2];

329 (*
∑th
)->
Àn
 = 
öô
->
Àvñ
[0] + (init->level[0] ? 1 : 0)

330 + 
öô
->
Àvñ
[1] + (init->level[1] ? 1 : 0)

331 + 
öô
->
Àvñ
[2] + (init->level[2] ? 1 : 0);

333 (*
∑th
)->
m™agî
 = 
NULL
;

334 (*
∑th
)->
lﬂdî
 = 
NULL
;

335 (*
∑th
)->
c⁄f_fûe
 = 
NULL
;

337 i‡(
	`ngx_add_∑th
(
cf
, 
∑th
Ë!
NGX_OK
) {

338  
NGX_CONF_ERROR
;

341  
NGX_CONF_OK
;

342 
	}
}

346 
	$ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

348 *
c⁄Â
 = 
c⁄f
;

350 
u_ch¨
 *
p
;

351 
ngx_°r_t
 *
vÆue
;

352 
ngx_uöt_t
 
i
, 
right
, 
shi·
, *
ac˚ss
;

354 
ac˚ss
 = (
ngx_uöt_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

356 i‡(*
ac˚ss
 !
NGX_CONF_UNSET_UINT
) {

360 
vÆue
 = 
cf
->
¨gs
->
ñts
;

362 *
ac˚ss
 = 0600;

364 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

366 
p
 = 
vÆue
[
i
].
d©a
;

368 i‡(
	`ngx_°∫cmp
(
p
, "user:", ("user:") - 1) == 0) {

369 
shi·
 = 6;

370 
p
 += ("user:") - 1;

372 } i‡(
	`ngx_°∫cmp
(
p
, "group:", ("group:") - 1) == 0) {

373 
shi·
 = 3;

374 
p
 += ("group:") - 1;

376 } i‡(
	`ngx_°∫cmp
(
p
, "all:", ("all:") - 1) == 0) {

377 
shi·
 = 0;

378 
p
 += ("all:") - 1;

381 
övÆid
;

384 i‡(
	`ngx_°rcmp
(
p
, "rw") == 0) {

385 
right
 = 6;

387 } i‡(
	`ngx_°rcmp
(
p
, "r") == 0) {

388 
right
 = 4;

391 
övÆid
;

394 *
ac˚ss
 |
right
 << 
shi·
;

397  
NGX_CONF_OK
;

399 
övÆid
:

401 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

403  
NGX_CONF_ERROR
;

404 
	}
}

407 
ngx_öt_t


408 
	$ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
)

410 
ngx_uöt_t
 
i
, 
n
;

411 
ngx_∑th_t
 *
∑th
, **
p
;

413 
∑th
 = *
¶Ÿ
;

415 
p
 = 
cf
->
cy˛e
->
∑ths
.
ñts
;

416 
i
 = 0; i < 
cf
->
cy˛e
->
∑ths
.
√…s
; i++) {

417 i‡(
p
[
i
]->
«me
.
Àn
 =
∑th
->name.len

418 && 
	`ngx_°rcmp
(
p
[
i
]->
«me
.
d©a
, 
∑th
->name.data) == 0)

420 
n
 = 0;Ç < 3;Ç++) {

421 i‡(
p
[
i
]->
Àvñ
[
n
] !
∑th
->level[n]) {

422 i‡(
∑th
->
c⁄f_fûe
 =
NULL
) {

423 i‡(
p
[
i
]->
c⁄f_fûe
 =
NULL
) {

424 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

429 &
p
[
i
]->
«me
);

430  
NGX_ERROR
;

433 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

438 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

439  
NGX_ERROR
;

442 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

445 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

446  
NGX_ERROR
;

449 i‡(
p
[
i
]->
Àvñ
[
n
] == 0) {

454 *
¶Ÿ
 = 
p
[
i
];

456  
NGX_OK
;

460 
p
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
∑ths
);

461 i‡(
p
 =
NULL
) {

462  
NGX_ERROR
;

465 *
p
 = 
∑th
;

467  
NGX_OK
;

468 
	}
}

471 
ngx_öt_t


472 
	$ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

474 
ngx_îr_t
 
îr
;

475 
ngx_uöt_t
 
i
;

476 
ngx_∑th_t
 **
∑th
;

478 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

479 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

481 i‡(
	`ngx_¸óã_dú
(
∑th
[
i
]->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

482 
îr
 = 
ngx_î∫o
;

483 i‡(
îr
 !
NGX_EEXIST
) {

484 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
îr
,

485 
ngx_¸óã_dú_n
 " \"%s\" failed",

486 
∑th
[
i
]->
«me
.
d©a
);

487  
NGX_ERROR
;

491 i‡(
u£r
 =(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

495 #i‡!(
NGX_WIN32
)

497 
ngx_fûe_öfo_t
 
fi
;

499 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, &
fi
)

500 =
NGX_FILE_ERROR
)

502 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

503 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

504  
NGX_ERROR
;

507 i‡(
fi
.
°_uid
 !
u£r
) {

508 i‡(
	`chown
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
u£r
, -1) == -1) {

509 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

511 
∑th
[
i
]->
«me
.
d©a
, 
u£r
);

512  
NGX_ERROR
;

516 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

517 !(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

519 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
);

521 i‡(
	`chmod
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

522 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

523 "chmod(Ë\"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

524  
NGX_ERROR
;

531  
NGX_OK
;

532 
	}
}

535 
ngx_öt_t


536 
	$ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
, 
ngx_ext_ª«me_fûe_t
 *
ext
)

538 
u_ch¨
 *
«me
;

539 
ngx_îr_t
 
îr
;

540 
ngx_c›y_fûe_t
 
cf
;

542 #i‡!(
NGX_WIN32
)

544 i‡(
ext
->
ac˚ss
) {

545 i‡(
	`ngx_ch™ge_fûe_ac˚ss
(
§c
->
d©a
, 
ext
->
ac˚ss
Ë=
NGX_FILE_ERROR
) {

546 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

547 
ngx_ch™ge_fûe_ac˚ss_n
 " \"%s\" faûed", 
§c
->
d©a
);

548 
îr
 = 0;

549 
Áûed
;

555 i‡(
ext
->
time
 != -1) {

556 i‡(
	`ngx_£t_fûe_time
(
§c
->
d©a
, 
ext
->
fd
,Éxt->
time
Ë!
NGX_OK
) {

557 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

558 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
§c
->
d©a
);

559 
îr
 = 0;

560 
Áûed
;

564 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

565  
NGX_OK
;

568 
îr
 = 
ngx_î∫o
;

570 i‡(
îr
 =
NGX_ENOPATH
) {

572 i‡(!
ext
->
¸óã_∑th
) {

573 
Áûed
;

576 
îr
 = 
	`ngx_¸óã_fuŒ_∑th
(
to
->
d©a
, 
	`ngx_dú_ac˚ss
(
ext
->
∑th_ac˚ss
));

578 i‡(
îr
) {

579 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

580 
ngx_¸óã_dú_n
 " \"%s\" faûed", 
to
->
d©a
);

581 
îr
 = 0;

582 
Áûed
;

585 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

586  
NGX_OK
;

589 
îr
 = 
ngx_î∫o
;

592 #i‡(
NGX_WIN32
)

594 i‡(
îr
 =
NGX_EEXIST
) {

595 
îr
 = 
	`ngx_wö32_ª«me_fûe
(
§c
, 
to
, 
ext
->
log
);

597 i‡(
îr
 == 0) {

598  
NGX_OK
;

604 i‡(
îr
 =
NGX_EXDEV
) {

606 
cf
.
size
 = -1;

607 
cf
.
buf_size
 = 0;

608 
cf
.
ac˚ss
 = 
ext
->access;

609 
cf
.
time
 = 
ext
->time;

610 
cf
.
log
 = 
ext
->log;

612 
«me
 = 
	`ngx_Æloc
(
to
->
Àn
 + 1 + 10 + 1, 
ext
->
log
);

613 i‡(
«me
 =
NULL
) {

614  
NGX_ERROR
;

617 (Ë
	`ngx_•rötf
(
«me
, "%*s.%010uD%Z", 
to
->
Àn
,Åo->
d©a
,

618 (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0));

620 i‡(
	`ngx_c›y_fûe
(
§c
->
d©a
, 
«me
, &
cf
Ë=
NGX_OK
) {

622 i‡(
	`ngx_ª«me_fûe
(
«me
, 
to
->
d©a
Ë!
NGX_FILE_ERROR
) {

623 
	`ngx_‰ì
(
«me
);

625 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

627 
ngx_dñëe_fûe_n
 " \"%s\" failed",

628 
§c
->
d©a
);

629  
NGX_ERROR
;

632  
NGX_OK
;

635 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

636 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

637 
«me
, 
to
->
d©a
);

639 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

640 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

641 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

646 
	`ngx_‰ì
(
«me
);

648 
îr
 = 0;

651 
Áûed
:

653 i‡(
ext
->
dñëe_fûe
) {

654 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

655 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

656 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
§c
->
d©a
);

660 i‡(
îr
) {

661 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

662 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

663 
§c
->
d©a
, 
to
->data);

666  
NGX_ERROR
;

667 
	}
}

670 
ngx_öt_t


671 
	$ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
)

673 *
buf
;

674 
off_t
 
size
;

675 
size_t
 
Àn
;

676 
ssize_t
 
n
;

677 
ngx_fd_t
 
fd
, 
nfd
;

678 
ngx_öt_t
 
rc
;

679 
ngx_fûe_öfo_t
 
fi
;

681 
rc
 = 
NGX_ERROR
;

682 
buf
 = 
NULL
;

683 
nfd
 = 
NGX_INVALID_FILE
;

685 
fd
 = 
	`ngx_›í_fûe
(
‰om
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

687 i‡(
fd
 =
NGX_INVALID_FILE
) {

688 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

689 
ngx_›í_fûe_n
 " \"%s\" faûed", 
‰om
);

690 
Áûed
;

693 i‡(
cf
->
size
 != -1) {

694 
size
 = 
cf
->size;

697 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

698 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

699 
ngx_fd_öfo_n
 " \"%s\" faûed", 
‰om
);

701 
Áûed
;

704 
size
 = 
	`ngx_fûe_size
(&
fi
);

707 
Àn
 = 
cf
->
buf_size
 ? cf->buf_size : 65536;

709 i‡((
off_t
Ë
Àn
 > 
size
) {

710 
Àn
 = (
size_t
Ë
size
;

713 
buf
 = 
	`ngx_Æloc
(
Àn
, 
cf
->
log
);

714 i‡(
buf
 =
NULL
) {

715 
Áûed
;

718 
nfd
 = 
	`ngx_›í_fûe
(
to
, 
NGX_FILE_WRONLY
, 
NGX_FILE_CREATE_OR_OPEN
,

719 
cf
->
ac˚ss
);

721 i‡(
nfd
 =
NGX_INVALID_FILE
) {

722 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

723 
ngx_›í_fûe_n
 " \"%s\" faûed", 
to
);

724 
Áûed
;

727 
size
 > 0) {

729 i‡((
off_t
Ë
Àn
 > 
size
) {

730 
Àn
 = (
size_t
Ë
size
;

733 
n
 = 
	`ngx_ªad_fd
(
fd
, 
buf
, 
Àn
);

735 i‡(
n
 == -1) {

736 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

737 
ngx_ªad_fd_n
 " \"%s\" faûed", 
‰om
);

738 
Áûed
;

741 i‡((
size_t
Ë
n
 !
Àn
) {

742 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

743 
ngx_ªad_fd_n
 " hasÑead only %z of %uz from %s",

744 
n
, 
size
, 
‰om
);

745 
Áûed
;

748 
n
 = 
	`ngx_wrôe_fd
(
nfd
, 
buf
, 
Àn
);

750 i‡(
n
 == -1) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

752 
ngx_wrôe_fd_n
 " \"%s\" faûed", 
to
);

753 
Áûed
;

756 i‡((
size_t
Ë
n
 !
Àn
) {

757 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

758 
ngx_wrôe_fd_n
 " has written only %z of %uzÅo %s",

759 
n
, 
size
, 
to
);

760 
Áûed
;

763 
size
 -
n
;

766 i‡(
cf
->
time
 != -1) {

767 i‡(
	`ngx_£t_fûe_time
(
to
, 
nfd
, 
cf
->
time
Ë!
NGX_OK
) {

768 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

769 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
to
);

770 
Áûed
;

774 
rc
 = 
NGX_OK
;

776 
Áûed
:

778 i‡(
nfd
 !
NGX_INVALID_FILE
) {

779 i‡(
	`ngx_˛o£_fûe
(
nfd
Ë=
NGX_FILE_ERROR
) {

780 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

781 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
to
);

785 i‡(
fd
 !
NGX_INVALID_FILE
) {

786 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

787 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

788 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
‰om
);

792 i‡(
buf
) {

793 
	`ngx_‰ì
(
buf
);

796  
rc
;

797 
	}
}

818 
ngx_öt_t


819 
	$ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
)

821 *
d©a
, *
¥ev
;

822 
u_ch¨
 *
p
, *
«me
;

823 
size_t
 
Àn
;

824 
ngx_öt_t
 
rc
;

825 
ngx_îr_t
 
îr
;

826 
ngx_°r_t
 
fûe
, 
buf
;

827 
ngx_dú_t
 
dú
;

829 
	`ngx_°r_nuŒ
(&
buf
);

831 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

832 "wÆkÅªê\"%V\"", 
åì
);

834 i‡(
	`ngx_›í_dú
(
åì
, &
dú
Ë=
NGX_ERROR
) {

835 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

836 
ngx_›í_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

837  
NGX_ERROR
;

840 
¥ev
 = 
˘x
->
d©a
;

842 i‡(
˘x
->
Æloc
) {

843 
d©a
 = 
	`ngx_Æloc
(
˘x
->
Æloc
, ctx->
log
);

844 i‡(
d©a
 =
NULL
) {

845 
Áûed
;

848 i‡(
˘x
->
	`öô_h™dÀr
(
d©a
, 
¥ev
Ë=
NGX_ABORT
) {

849 
Áûed
;

852 
˘x
->
d©a
 = data;

855 
d©a
 = 
NULL
;

860 
	`ngx_£t_î∫o
(0);

862 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

863 
îr
 = 
ngx_î∫o
;

865 i‡(
îr
 =
NGX_ENOMOREFILES
) {

866 
rc
 = 
NGX_OK
;

869 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
îr
,

870 
ngx_ªad_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

871 
rc
 = 
NGX_ERROR
;

874 
d⁄e
;

877 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

878 
«me
 = 
	`ngx_de_«me
(&
dú
);

880 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

881 "åìÇamê%uz:\"%s\"", 
Àn
, 
«me
);

883 i‡(
Àn
 =1 && 
«me
[0] == '.') {

887 i‡(
Àn
 =2 && 
«me
[0] == '.' &&Çame[1] == '.') {

891 
fûe
.
Àn
 = 
åì
->len + 1 +Üen;

893 i‡(
fûe
.
Àn
 + 
NGX_DIR_MASK_LEN
 > 
buf
.len) {

895 i‡(
buf
.
Àn
) {

896 
	`ngx_‰ì
(
buf
.
d©a
);

899 
buf
.
Àn
 = 
åì
->À¿+ 1 +Üí + 
NGX_DIR_MASK_LEN
;

901 
buf
.
d©a
 = 
	`ngx_Æloc
(buf.
Àn
 + 1, 
˘x
->
log
);

902 i‡(
buf
.
d©a
 =
NULL
) {

903 
Áûed
;

907 
p
 = 
	`ngx_˝ymem
(
buf
.
d©a
, 
åì
->d©a,Åªe->
Àn
);

908 *
p
++ = '/';

909 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 + 1);

911 
fûe
.
d©a
 = 
buf
.data;

913 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

914 "åìÖ©h \"%s\"", 
fûe
.
d©a
);

916 i‡(!
dú
.
vÆid_öfo
) {

917 i‡(
	`ngx_de_öfo
(
fûe
.
d©a
, &
dú
Ë=
NGX_FILE_ERROR
) {

918 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

919 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûe
.
d©a
);

924 i‡(
	`ngx_de_is_fûe
(&
dú
)) {

926 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

927 "åì fûê\"%s\"", 
fûe
.
d©a
);

929 
˘x
->
size
 = 
	`ngx_de_size
(&
dú
);

930 
˘x
->
fs_size
 = 
	`ngx_de_fs_size
(&
dú
);

931 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

932 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

934 i‡(
˘x
->
	`fûe_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

935 
Áûed
;

938 } i‡(
	`ngx_de_is_dú
(&
dú
)) {

940 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

941 "åìÉ¡î dú \"%s\"", 
fûe
.
d©a
);

943 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

944 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

946 i‡(
˘x
->
	`¥e_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

947 
Áûed
;

950 i‡(
	`ngx_wÆk_åì
(
˘x
, &
fûe
Ë=
NGX_ABORT
) {

951 
Áûed
;

954 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

955 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

957 i‡(
˘x
->
	`po°_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

958 
Áûed
;

963 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

964 "åì s≥cü»\"%s\"", 
fûe
.
d©a
);

966 i‡(
˘x
->
	`•ec_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

967 
Áûed
;

972 
Áûed
:

974 
rc
 = 
NGX_ABORT
;

976 
d⁄e
:

978 i‡(
buf
.
Àn
) {

979 
	`ngx_‰ì
(
buf
.
d©a
);

982 i‡(
d©a
) {

983 
	`ngx_‰ì
(
d©a
);

984 
˘x
->
d©a
 = 
¥ev
;

987 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

988 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

989 
ngx_˛o£_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

992  
rc
;

993 
	}
}

	@src/core/ngx_file.h

8 #i‚de‡
_NGX_FILE_H_INCLUDED_


9 
	#_NGX_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_fûe_s
 {

17 
ngx_fd_t
 
	mfd
;

18 
ngx_°r_t
 
	m«me
;

19 
ngx_fûe_öfo_t
 
	möfo
;

21 
off_t
 
	moff£t
;

22 
off_t
 
	msys_off£t
;

24 
ngx_log_t
 *
	mlog
;

26 #i‡(
NGX_HAVE_FILE_AIO
)

27 
ngx_evít_aio_t
 *
	maio
;

30 
	mvÆid_öfo
:1;

31 
	mdúe˘io
:1;

35 
	#NGX_MAX_PATH_LEVEL
 3

	)

38 
	$time_t
 (*
	tngx_∑th_m™agî_±
Ë(*
	td©a
);

39 (*
	tngx_∑th_lﬂdî_±
Ë(*
	td©a
);

43 
ngx_°r_t
 
«me
;

44 
size_t
 
Àn
;

45 
size_t
 
Àvñ
[3];

47 
ngx_∑th_m™agî_±
 
m™agî
;

48 
ngx_∑th_lﬂdî_±
 
lﬂdî
;

49 *
d©a
;

51 
u_ch¨
 *
c⁄f_fûe
;

52 
ngx_uöt_t
 
löe
;

53 } 
	tngx_∑th_t
;

57 
ngx_°r_t
 
«me
;

58 
size_t
 
Àvñ
[3];

59 } 
	tngx_∑th_öô_t
;

63 
ngx_fûe_t
 
fûe
;

64 
off_t
 
off£t
;

65 
ngx_∑th_t
 *
∑th
;

66 
ngx_poﬁ_t
 *
poﬁ
;

67 *
w¨n
;

69 
ngx_uöt_t
 
ac˚ss
;

71 
log_Àvñ
:8;

72 
≥rsi°ít
:1;

73 
˛ón
:1;

74 } 
	tngx_ãmp_fûe_t
;

78 
ngx_uöt_t
 
ac˚ss
;

79 
ngx_uöt_t
 
∑th_ac˚ss
;

80 
time_t
 
time
;

81 
ngx_fd_t
 
fd
;

83 
¸óã_∑th
:1;

84 
dñëe_fûe
:1;

86 
ngx_log_t
 *
log
;

87 } 
	tngx_ext_ª«me_fûe_t
;

91 
off_t
 
size
;

92 
size_t
 
buf_size
;

94 
ngx_uöt_t
 
ac˚ss
;

95 
time_t
 
time
;

97 
ngx_log_t
 *
log
;

98 } 
	tngx_c›y_fûe_t
;

101 
ngx_åì_˘x_s
 
	tngx_åì_˘x_t
;

103 
	$ngx_öt_t
 (*
	tngx_åì_öô_h™dÀr_±
Ë(*
	t˘x
, *
	t¥ev
);

104 
	$ngx_öt_t
 (*
	tngx_åì_h™dÀr_±
Ë(
	tngx_åì_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 *
	t«me
);

106 
	sngx_åì_˘x_s
 {

107 
off_t
 
size
;

108 
off_t
 
fs_size
;

109 
ngx_uöt_t
 
ac˚ss
;

110 
time_t
 
mtime
;

112 
ngx_åì_öô_h™dÀr_±
 
öô_h™dÀr
;

113 
ngx_åì_h™dÀr_±
 
fûe_h™dÀr
;

114 
ngx_åì_h™dÀr_±
 
¥e_åì_h™dÀr
;

115 
ngx_åì_h™dÀr_±
 
po°_åì_h™dÀr
;

116 
ngx_åì_h™dÀr_±
 
•ec_h™dÀr
;

118 *
d©a
;

119 
size_t
 
Æloc
;

121 
ngx_log_t
 *
log
;

125 
ssize_t
 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
);

126 
ngx_öt_t
 
	`ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
,

127 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,

128 
ngx_uöt_t
 
ac˚ss
);

129 
	`ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
);

130 
ngx_öt_t
 
	`ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
);

131 
ngx_îr_t
 
	`ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
);

132 
ngx_öt_t
 
	`ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
);

133 
ngx_öt_t
 
	`ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

134 
ngx_öt_t
 
	`ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
,

135 
ngx_ext_ª«me_fûe_t
 *
ext
);

136 
ngx_öt_t
 
	`ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
);

137 
ngx_öt_t
 
	`ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
);

139 
ngx_©omic_uöt_t
 
	`ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
);

141 *
	`ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

142 *
	`ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,

143 
ngx_∑th_t
 *
¥ev
, 
ngx_∑th_öô_t
 *
öô
);

144 *
	`ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

147 
ngx_©omic_t
 *
ngx_ãmp_numbî
;

148 
ngx_©omic_öt_t
 
ngx_øndom_numbî
;

	@src/core/ngx_hash.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

15 
ngx_uöt_t
 
i
;

16 
ngx_hash_ñt_t
 *
ñt
;

19 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "hf:\"%*s\"", 
Àn
, 
«me
);

22 
ñt
 = 
hash
->
buckës
[
key
 % hash->
size
];

24 i‡(
ñt
 =
NULL
) {

25  
NULL
;

28 
ñt
->
vÆue
) {

29 i‡(
Àn
 !(
size_t
Ë
ñt
->len) {

30 
√xt
;

33 
i
 = 0; i < 
Àn
; i++) {

34 i‡(
«me
[
i
] !
ñt
->name[i]) {

35 
√xt
;

39  
ñt
->
vÆue
;

41 
√xt
:

43 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

48  
NULL
;

49 
	}
}

53 
	$ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

55 *
vÆue
;

56 
ngx_uöt_t
 
i
, 
n
, 
key
;

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "wch:\"%*s\"", 
Àn
, 
«me
);

62 
n
 = 
Àn
;

64 
n
) {

65 i‡(
«me
[
n
 - 1] == '.') {

69 
n
--;

72 
key
 = 0;

74 
i
 = 
n
; i < 
Àn
; i++) {

75 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

79 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

82 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, &
«me
[
n
], 
Àn
 -Ç);

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

88 i‡(
vÆue
) {

101 i‡((
uöçå_t
Ë
vÆue
 & 2) {

103 i‡(
n
 == 0) {

107 i‡((
uöçå_t
Ë
vÆue
 & 1) {

108  
NULL
;

111 
hwc
 = (
ngx_hash_wûdˇrd_t
 *)

112 ((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

113  
hwc
->
vÆue
;

116 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

118 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hwc
, 
«me
, 
n
 - 1);

120 i‡(
vÆue
) {

121  
vÆue
;

124  
hwc
->
vÆue
;

127 i‡((
uöçå_t
Ë
vÆue
 & 1) {

129 i‡(
n
 == 0) {

133  
NULL
;

136  (*Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

139  
vÆue
;

142  
hwc
->
vÆue
;

143 
	}
}

147 
	$ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

149 *
vÆue
;

150 
ngx_uöt_t
 
i
, 
key
;

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "w˘:\"%*s\"", 
Àn
, 
«me
);

156 
key
 = 0;

158 
i
 = 0; i < 
Àn
; i++) {

159 i‡(
«me
[
i
] == '.') {

163 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

166 i‡(
i
 =
Àn
) {

167  
NULL
;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

174 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, 
«me
, 
i
);

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

180 i‡(
vÆue
) {

188 i‡((
uöçå_t
Ë
vÆue
 & 2) {

190 
i
++;

192 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

194 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hwc
, &
«me
[
i
], 
Àn
 - i);

196 i‡(
vÆue
) {

197  
vÆue
;

200  
hwc
->
vÆue
;

203  
vÆue
;

206  
hwc
->
vÆue
;

207 
	}
}

211 
	$ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
,

212 
size_t
 
Àn
)

214 *
vÆue
;

216 i‡(
hash
->hash.
buckës
) {

217 
vÆue
 = 
	`ngx_hash_föd
(&
hash
->hash, 
key
, 
«me
, 
Àn
);

219 i‡(
vÆue
) {

220  
vÆue
;

224 i‡(
Àn
 == 0) {

225  
NULL
;

228 i‡(
hash
->
wc_hód
 && hash->wc_hód->hash.
buckës
) {

229 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hash
->
wc_hód
, 
«me
, 
Àn
);

231 i‡(
vÆue
) {

232  
vÆue
;

236 i‡(
hash
->
wc_èû
 && hash->wc_èû->hash.
buckës
) {

237 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hash
->
wc_èû
, 
«me
, 
Àn
);

239 i‡(
vÆue
) {

240  
vÆue
;

244  
NULL
;

245 
	}
}

248 
	#NGX_HASH_ELT_SIZE
(
«me
) \

249 ((*Ë+ 
	`ngx_Æign
((
«me
)->
key
.
Àn
 + 2, (*)))

	)

251 
ngx_öt_t


252 
	$ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
, 
ngx_uöt_t
 
√…s
)

254 
u_ch¨
 *
ñts
;

255 
size_t
 
Àn
;

256 
u_sh‹t
 *
ã°
;

257 
ngx_uöt_t
 
i
, 
n
, 
key
, 
size
, 
°¨t
, 
buckë_size
;

258 
ngx_hash_ñt_t
 *
ñt
, **
buckës
;

260 
n
 = 0;Ç < 
√…s
;Ç++) {

261 i‡(
höô
->
buckë_size
 < 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]) + (*))

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

266 
höô
->
«me
, höô->«me, höô->
buckë_size
);

267  
NGX_ERROR
;

271 
ã°
 = 
	`ngx_Æloc
(
höô
->
max_size
 * (
u_sh‹t
), höô->
poﬁ
->
log
);

272 i‡(
ã°
 =
NULL
) {

273  
NGX_ERROR
;

276 
buckë_size
 = 
höô
->bucket_size - (*);

278 
°¨t
 = 
√…s
 / (
buckë_size
 / (2 * (*)));

279 
°¨t
 = start ? start : 1;

281 i‡(
höô
->
max_size
 > 10000 && 
√…s
 && hinit->max_size /Çelts < 100) {

282 
°¨t
 = 
höô
->
max_size
 - 1000;

285 
size
 = 
°¨t
; sizê< 
höô
->
max_size
; size++) {

287 
	`ngx_memzîo
(
ã°
, 
size
 * (
u_sh‹t
));

289 
n
 = 0;Ç < 
√…s
;Ç++) {

290 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

294 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

295 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

298 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

300 
size
, 
key
, 
ã°
[key], &
«mes
[
n
].key);

303 i‡(
ã°
[
key
] > (
u_sh‹t
Ë
buckë_size
) {

304 
√xt
;

308 
found
;

310 
√xt
:

315 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

318 
höô
->
«me
, höô->«me, höô->
max_size
,

319 
höô
->
«me
, höô->
buckë_size
);

321 
	`ngx_‰ì
(
ã°
);

323  
NGX_ERROR
;

325 
found
:

327 
i
 = 0; i < 
size
; i++) {

328 
ã°
[
i
] = (*);

331 
n
 = 0;Ç < 
√…s
;Ç++) {

332 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

336 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

337 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

340 
Àn
 = 0;

342 
i
 = 0; i < 
size
; i++) {

343 i‡(
ã°
[
i
] == (*)) {

347 
ã°
[
i
] = (
u_sh‹t
Ë(
	`ngx_Æign
—e°[i], 
ngx_ˇchñöe_size
));

349 
Àn
 +
ã°
[
i
];

352 i‡(
höô
->
hash
 =
NULL
) {

353 
höô
->
hash
 = 
	`ngx_pˇŒoc
(höô->
poﬁ
, (
ngx_hash_wûdˇrd_t
)

354 + 
size
 * (
ngx_hash_ñt_t
 *));

355 i‡(
höô
->
hash
 =
NULL
) {

356 
	`ngx_‰ì
(
ã°
);

357  
NGX_ERROR
;

360 
buckës
 = (
ngx_hash_ñt_t
 **)

361 ((
u_ch¨
 *Ë
höô
->
hash
 + (
ngx_hash_wûdˇrd_t
));

364 
buckës
 = 
	`ngx_pˇŒoc
(
höô
->
poﬁ
, 
size
 * (
ngx_hash_ñt_t
 *));

365 i‡(
buckës
 =
NULL
) {

366 
	`ngx_‰ì
(
ã°
);

367  
NGX_ERROR
;

371 
ñts
 = 
	`ngx_∑Œoc
(
höô
->
poﬁ
, 
Àn
 + 
ngx_ˇchñöe_size
);

372 i‡(
ñts
 =
NULL
) {

373 
	`ngx_‰ì
(
ã°
);

374  
NGX_ERROR
;

377 
ñts
 = 
	`ngx_Æign_±r
”…s, 
ngx_ˇchñöe_size
);

379 
i
 = 0; i < 
size
; i++) {

380 i‡(
ã°
[
i
] == (*)) {

384 
buckës
[
i
] = (
ngx_hash_ñt_t
 *Ë
ñts
;

385 
ñts
 +
ã°
[
i
];

389 
i
 = 0; i < 
size
; i++) {

390 
ã°
[
i
] = 0;

393 
n
 = 0;Ç < 
√…s
;Ç++) {

394 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

398 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

399 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
key
] + 
ã°
[key]);

401 
ñt
->
vÆue
 = 
«mes
[
n
].value;

402 
ñt
->
Àn
 = (
u_sh‹t
Ë
«mes
[
n
].
key
.len;

404 
	`ngx_°æow
(
ñt
->
«me
, 
«mes
[
n
].
key
.
d©a
,Çames[n].key.
Àn
);

406 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

409 
i
 = 0; i < 
size
; i++) {

410 i‡(
buckës
[
i
] =
NULL
) {

414 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
i
] + 
ã°
[i]);

416 
ñt
->
vÆue
 = 
NULL
;

419 
	`ngx_‰ì
(
ã°
);

421 
höô
->
hash
->
buckës
 = buckets;

422 
höô
->
hash
->
size
 = size;

426 
i
 = 0; i < 
size
; i++) {

427 
ngx_°r_t
 
vÆ
;

428 
ngx_uöt_t
 
key
;

430 
ñt
 = 
buckës
[
i
];

432 i‡(
ñt
 =
NULL
) {

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

434 "%ui: NULL", 
i
);

438 
ñt
->
vÆue
) {

439 
vÆ
.
Àn
 = 
ñt
->len;

440 
vÆ
.
d©a
 = &
ñt
->
«me
[0];

442 
key
 = 
höô
->
	`key
(
vÆ
.
d©a
, vÆ.
Àn
);

444 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

445 "%ui: %∞\"%V\" %ui", 
i
, 
ñt
, &
vÆ
, 
key
);

447 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

454  
NGX_OK
;

455 
	}
}

458 
ngx_öt_t


459 
	$ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

460 
ngx_uöt_t
 
√…s
)

462 
size_t
 
Àn
, 
dŸ_Àn
;

463 
ngx_uöt_t
 
i
, 
n
, 
dŸ
;

464 
ngx_¨øy_t
 
cuº_«mes
, 
√xt_«mes
;

465 
ngx_hash_key_t
 *
«me
, *
√xt_«me
;

466 
ngx_hash_öô_t
 
h
;

467 
ngx_hash_wûdˇrd_t
 *
wdc
;

469 i‡(
	`ngx_¨øy_öô
(&
cuº_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

470 (
ngx_hash_key_t
))

471 !
NGX_OK
)

473  
NGX_ERROR
;

476 i‡(
	`ngx_¨øy_öô
(&
√xt_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

477 (
ngx_hash_key_t
))

478 !
NGX_OK
)

480  
NGX_ERROR
;

483 
n
 = 0;Ç < 
√…s
;Ç = 
i
) {

486 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

487 "wc0: \"%V\"", &
«mes
[
n
].
key
);

490 
dŸ
 = 0;

492 
Àn
 = 0;Üí < 
«mes
[
n
].
key
.len;Üen++) {

493 i‡(
«mes
[
n
].
key
.
d©a
[
Àn
] == '.') {

494 
dŸ
 = 1;

499 
«me
 = 
	`ngx_¨øy_push
(&
cuº_«mes
);

500 i‡(
«me
 =
NULL
) {

501  
NGX_ERROR
;

504 
«me
->
key
.
Àn
 =Üen;

505 
«me
->
key
.
d©a
 = 
«mes
[
n
].key.data;

506 
«me
->
key_hash
 = 
höô
->
	`key
“ame->
key
.
d©a
,Çame->key.
Àn
);

507 
«me
->
vÆue
 = 
«mes
[
n
].value;

510 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

511 "wc1: \"%V\" %ui", &
«me
->
key
, 
dŸ
);

514 
dŸ_Àn
 = 
Àn
 + 1;

516 i‡(
dŸ
) {

517 
Àn
++;

520 
√xt_«mes
.
√…s
 = 0;

522 i‡(
«mes
[
n
].
key
.
Àn
 !=Üen) {

523 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

524 i‡(
√xt_«me
 =
NULL
) {

525  
NGX_ERROR
;

528 
√xt_«me
->
key
.
Àn
 = 
«mes
[
n
].key.len -Üen;

529 
√xt_«me
->
key
.
d©a
 = 
«mes
[
n
].key.d©®+ 
Àn
;

530 
√xt_«me
->
key_hash
 = 0;

531 
√xt_«me
->
vÆue
 = 
«mes
[
n
].value;

534 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

535 "wc2: \"%V\"", &
√xt_«me
->
key
);

539 
i
 = 
n
 + 1; i < 
√…s
; i++) {

540 i‡(
	`ngx_°∫cmp
(
«mes
[
n
].
key
.
d©a
,Çames[
i
].key.d©a, 
Àn
) != 0) {

544 i‡(!
dŸ


545 && 
«mes
[
i
].
key
.
Àn
 >Üen

546 && 
«mes
[
i
].
key
.
d©a
[
Àn
] != '.')

551 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

552 i‡(
√xt_«me
 =
NULL
) {

553  
NGX_ERROR
;

556 
√xt_«me
->
key
.
Àn
 = 
«mes
[
i
].key.À¿- 
dŸ_Àn
;

557 
√xt_«me
->
key
.
d©a
 = 
«mes
[
i
].key.d©®+ 
dŸ_Àn
;

558 
√xt_«me
->
key_hash
 = 0;

559 
√xt_«me
->
vÆue
 = 
«mes
[
i
].value;

562 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

563 "wc3: \"%V\"", &
√xt_«me
->
key
);

567 i‡(
√xt_«mes
.
√…s
) {

569 
h
 = *
höô
;

570 
h
.
hash
 = 
NULL
;

572 i‡(
	`ngx_hash_wûdˇrd_öô
(&
h
, (
ngx_hash_key_t
 *Ë
√xt_«mes
.
ñts
,

573 
√xt_«mes
.
√…s
)

574 !
NGX_OK
)

576  
NGX_ERROR
;

579 
wdc
 = (
ngx_hash_wûdˇrd_t
 *Ë
h
.
hash
;

581 i‡(
«mes
[
n
].
key
.
Àn
 ==Üen) {

582 
wdc
->
vÆue
 = 
«mes
[
n
].value;

585 
«me
->
vÆue
 = (*Ë((
uöçå_t
Ë
wdc
 | (
dŸ
 ? 3 : 2));

587 } i‡(
dŸ
) {

588 
«me
->
vÆue
 = (*Ë((
uöçå_t
)Çame->value | 1);

592 i‡(
	`ngx_hash_öô
(
höô
, (
ngx_hash_key_t
 *Ë
cuº_«mes
.
ñts
,

593 
cuº_«mes
.
√…s
)

594 !
NGX_OK
)

596  
NGX_ERROR
;

599  
NGX_OK
;

600 
	}
}

603 
ngx_uöt_t


604 
	$ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

606 
ngx_uöt_t
 
i
, 
key
;

608 
key
 = 0;

610 
i
 = 0; i < 
Àn
; i++) {

611 
key
 = 
	`ngx_hash
(key, 
d©a
[
i
]);

614  
key
;

615 
	}
}

618 
ngx_uöt_t


619 
	$ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

621 
ngx_uöt_t
 
i
, 
key
;

623 
key
 = 0;

625 
i
 = 0; i < 
Àn
; i++) {

626 
key
 = 
	`ngx_hash
(key, 
	`ngx_tﬁowî
(
d©a
[
i
]));

629  
key
;

630 
	}
}

633 
ngx_uöt_t


634 
	$ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

636 
ngx_uöt_t
 
key
;

638 
key
 = 0;

640 
n
--) {

641 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

642 
key
 = 
	`ngx_hash
(key, *
d°
);

643 
d°
++;

644 
§c
++;

647  
key
;

648 
	}
}

651 
ngx_öt_t


652 
	$ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
)

654 
ngx_uöt_t
 
asize
;

656 i‡(
ty≥
 =
NGX_HASH_SMALL
) {

657 
asize
 = 4;

658 
ha
->
hsize
 = 107;

661 
asize
 = 
NGX_HASH_LARGE_ASIZE
;

662 
ha
->
hsize
 = 
NGX_HASH_LARGE_HSIZE
;

665 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys
, ha->
ãmp_poﬁ
, 
asize
, (
ngx_hash_key_t
))

666 !
NGX_OK
)

668  
NGX_ERROR
;

671 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_hód
, ha->
ãmp_poﬁ
, 
asize
,

672 (
ngx_hash_key_t
))

673 !
NGX_OK
)

675  
NGX_ERROR
;

678 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_èû
, ha->
ãmp_poﬁ
, 
asize
,

679 (
ngx_hash_key_t
))

680 !
NGX_OK
)

682  
NGX_ERROR
;

685 
ha
->
keys_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
, (
ngx_¨øy_t
Ë* ha->
hsize
);

686 i‡(
ha
->
keys_hash
 =
NULL
) {

687  
NGX_ERROR
;

690 
ha
->
dns_wc_hód_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

691 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

692 i‡(
ha
->
dns_wc_hód_hash
 =
NULL
) {

693  
NGX_ERROR
;

696 
ha
->
dns_wc_èû_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

697 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

698 i‡(
ha
->
dns_wc_èû_hash
 =
NULL
) {

699  
NGX_ERROR
;

702  
NGX_OK
;

703 
	}
}

706 
ngx_öt_t


707 
	$ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
, *
vÆue
,

708 
ngx_uöt_t
 
Êags
)

710 
size_t
 
Àn
;

711 
u_ch¨
 *
p
;

712 
ngx_°r_t
 *
«me
;

713 
ngx_uöt_t
 
i
, 
k
, 
n
, 
skù
, 
œ°
;

714 
ngx_¨øy_t
 *
keys
, *
hwc
;

715 
ngx_hash_key_t
 *
hk
;

717 
œ°
 = 
key
->
Àn
;

719 i‡(
Êags
 & 
NGX_HASH_WILDCARD_KEY
) {

726 
n
 = 0;

728 
i
 = 0; i < 
key
->
Àn
; i++) {

730 i‡(
key
->
d©a
[
i
] == '*') {

731 i‡(++
n
 > 1) {

732  
NGX_DECLINED
;

736 i‡(
key
->
d©a
[
i
] == '.' && key->data[i + 1] == '.') {

737  
NGX_DECLINED
;

741 i‡(
key
->
Àn
 > 1 && key->
d©a
[0] == '.') {

742 
skù
 = 1;

743 
wûdˇrd
;

746 i‡(
key
->
Àn
 > 2) {

748 i‡(
key
->
d©a
[0] == '*' && key->data[1] == '.') {

749 
skù
 = 2;

750 
wûdˇrd
;

753 i‡(
key
->
d©a
[
i
 - 2] == '.' && key->data[i - 1] == '*') {

754 
skù
 = 0;

755 
œ°
 -= 2;

756 
wûdˇrd
;

760 i‡(
n
) {

761  
NGX_DECLINED
;

767 
k
 = 0;

769 
i
 = 0; i < 
œ°
; i++) {

770 i‡(!(
Êags
 & 
NGX_HASH_READONLY_KEY
)) {

771 
key
->
d©a
[
i
] = 
	`ngx_tﬁowî
(key->data[i]);

773 
k
 = 
	`ngx_hash
(k, 
key
->
d©a
[
i
]);

776 
k
 %
ha
->
hsize
;

780 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

782 i‡(
«me
) {

783 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

784 i‡(
œ°
 !
«me
[
i
].
Àn
) {

788 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, 
«me
[
i
].d©a, 
œ°
) == 0) {

789  
NGX_BUSY
;

794 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

795 (
ngx_°r_t
))

796 !
NGX_OK
)

798  
NGX_ERROR
;

802 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

803 i‡(
«me
 =
NULL
) {

804  
NGX_ERROR
;

807 *
«me
 = *
key
;

809 
hk
 = 
	`ngx_¨øy_push
(&
ha
->
keys
);

810 i‡(
hk
 =
NULL
) {

811  
NGX_ERROR
;

814 
hk
->
key
 = *key;

815 
hk
->
key_hash
 = 
	`ngx_hash_key
(
key
->
d©a
, 
œ°
);

816 
hk
->
vÆue
 = value;

818  
NGX_OK
;

821 
wûdˇrd
:

825 
k
 = 
	`ngx_hash_°æow
(&
key
->
d©a
[
skù
], &key->d©a[skù], 
œ°
 - skip);

827 
k
 %
ha
->
hsize
;

829 i‡(
skù
 == 1) {

833 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

835 i‡(
«me
) {

836 
Àn
 = 
œ°
 - 
skù
;

838 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

839 i‡(
Àn
 !
«me
[
i
].len) {

843 i‡(
	`ngx_°∫cmp
(&
key
->
d©a
[1], 
«me
[
i
].d©a, 
Àn
) == 0) {

844  
NGX_BUSY
;

849 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

850 (
ngx_°r_t
))

851 !
NGX_OK
)

853  
NGX_ERROR
;

857 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

858 i‡(
«me
 =
NULL
) {

859  
NGX_ERROR
;

862 
«me
->
Àn
 = 
œ°
 - 1;

863 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

864 i‡(
«me
->
d©a
 =
NULL
) {

865  
NGX_ERROR
;

868 
	`ngx_mem˝y
(
«me
->
d©a
, &
key
->d©a[1],Çame->
Àn
);

872 i‡(
skù
) {

879 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

880 i‡(
p
 =
NULL
) {

881  
NGX_ERROR
;

884 
Àn
 = 0;

885 
n
 = 0;

887 
i
 = 
œ°
 - 1; i; i--) {

888 i‡(
key
->
d©a
[
i
] == '.') {

889 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[
i
 + 1], 
Àn
);

890 
n
 +
Àn
;

891 
p
[
n
++] = '.';

892 
Àn
 = 0;

896 
Àn
++;

899 i‡(
Àn
) {

900 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[1], 
Àn
);

901 
n
 +
Àn
;

904 
p
[
n
] = '\0';

906 
hwc
 = &
ha
->
dns_wc_hód
;

907 
keys
 = &
ha
->
dns_wc_hód_hash
[
k
];

913 
œ°
++;

915 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

916 i‡(
p
 =
NULL
) {

917  
NGX_ERROR
;

920 
	`ngx_˝y°∫
(
p
, 
key
->
d©a
, 
œ°
);

922 
hwc
 = &
ha
->
dns_wc_èû
;

923 
keys
 = &
ha
->
dns_wc_èû_hash
[
k
];

929 
«me
 = 
keys
->
ñts
;

931 i‡(
«me
) {

932 
Àn
 = 
œ°
 - 
skù
;

934 
i
 = 0; i < 
keys
->
√…s
; i++) {

935 i‡(
Àn
 !
«me
[
i
].len) {

939 i‡(
	`ngx_°∫cmp
(
key
->
d©a
 + 
skù
, 
«me
[
i
].d©a, 
Àn
) == 0) {

940  
NGX_BUSY
;

945 i‡(
	`ngx_¨øy_öô
(
keys
, 
ha
->
ãmp_poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
)

947  
NGX_ERROR
;

951 
«me
 = 
	`ngx_¨øy_push
(
keys
);

952 i‡(
«me
 =
NULL
) {

953  
NGX_ERROR
;

956 
«me
->
Àn
 = 
œ°
 - 
skù
;

957 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

958 i‡(
«me
->
d©a
 =
NULL
) {

959  
NGX_ERROR
;

962 
	`ngx_mem˝y
(
«me
->
d©a
, 
key
->d©®+ 
skù
,Çame->
Àn
);

967 
hk
 = 
	`ngx_¨øy_push
(
hwc
);

968 i‡(
hk
 =
NULL
) {

969  
NGX_ERROR
;

972 
hk
->
key
.
Àn
 = 
œ°
 - 1;

973 
hk
->
key
.
d©a
 = 
p
;

974 
hk
->
key_hash
 = 0;

975 
hk
->
vÆue
 = value;

977  
NGX_OK
;

978 
	}
}

	@src/core/ngx_hash.h

8 #i‚de‡
_NGX_HASH_H_INCLUDED_


9 
	#_NGX_HASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mvÆue
;

18 
u_sh‹t
 
	mÀn
;

19 
u_ch¨
 
	m«me
[1];

20 } 
	tngx_hash_ñt_t
;

24 
ngx_hash_ñt_t
 **
	mbuckës
;

25 
ngx_uöt_t
 
	msize
;

26 } 
	tngx_hash_t
;

30 
ngx_hash_t
 
	mhash
;

31 *
	mvÆue
;

32 } 
	tngx_hash_wûdˇrd_t
;

36 
ngx_°r_t
 
	mkey
;

37 
ngx_uöt_t
 
	mkey_hash
;

38 *
	mvÆue
;

39 } 
	tngx_hash_key_t
;

42 
	$ngx_uöt_t
 (*
	tngx_hash_key_±
Ë(
	tu_ch¨
 *
	td©a
, 
	tsize_t
 
	tÀn
);

46 
ngx_hash_t
 
hash
;

47 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

48 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

49 } 
	tngx_hash_comböed_t
;

53 
ngx_hash_t
 *
hash
;

54 
ngx_hash_key_±
 
key
;

56 
ngx_uöt_t
 
max_size
;

57 
ngx_uöt_t
 
buckë_size
;

59 *
«me
;

60 
ngx_poﬁ_t
 *
poﬁ
;

61 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

62 } 
	tngx_hash_öô_t
;

65 
	#NGX_HASH_SMALL
 1

	)

66 
	#NGX_HASH_LARGE
 2

	)

68 
	#NGX_HASH_LARGE_ASIZE
 16384

	)

69 
	#NGX_HASH_LARGE_HSIZE
 10007

	)

71 
	#NGX_HASH_WILDCARD_KEY
 1

	)

72 
	#NGX_HASH_READONLY_KEY
 2

	)

76 
ngx_uöt_t
 
hsize
;

78 
ngx_poﬁ_t
 *
poﬁ
;

79 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

81 
ngx_¨øy_t
 
keys
;

82 
ngx_¨øy_t
 *
keys_hash
;

84 
ngx_¨øy_t
 
dns_wc_hód
;

85 
ngx_¨øy_t
 *
dns_wc_hód_hash
;

87 
ngx_¨øy_t
 
dns_wc_èû
;

88 
ngx_¨øy_t
 *
dns_wc_èû_hash
;

89 } 
	tngx_hash_keys_¨øys_t
;

93 
ngx_uöt_t
 
hash
;

94 
ngx_°r_t
 
key
;

95 
ngx_°r_t
 
vÆue
;

96 
u_ch¨
 *
lowˇ£_key
;

97 } 
	tngx_èbÀ_ñt_t
;

100 *
	`ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

101 *
	`ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

102 *
	`ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

103 *
	`ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
,

104 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

106 
ngx_öt_t
 
	`ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

107 
ngx_uöt_t
 
√…s
);

108 
ngx_öt_t
 
	`ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

109 
ngx_uöt_t
 
√…s
);

111 
	#ngx_hash
(
key
, 
c
Ë((
ngx_uöt_t
Ëkey * 31 + c)

	)

112 
ngx_uöt_t
 
	`ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

113 
ngx_uöt_t
 
	`ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

114 
ngx_uöt_t
 
	`ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

117 
ngx_öt_t
 
	`ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
);

118 
ngx_öt_t
 
	`ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
,

119 *
vÆue
, 
ngx_uöt_t
 
Êags
);

	@src/core/ngx_inet.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

13 
ngx_öt_t
 
ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

14 
ngx_öt_t
 
ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

15 
ngx_öt_t
 
ngx_∑r£_£rvÆ_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

18 
ö_addr_t


19 
	$ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

21 
u_ch¨
 *
p
, 
c
;

22 
ö_addr_t
 
addr
;

23 
ngx_uöt_t
 
o˘ë
, 
n
;

25 
addr
 = 0;

26 
o˘ë
 = 0;

27 
n
 = 0;

29 
p
 = 
ãxt
;Ö <Åexà+ 
Àn
;Ö++) {

31 
c
 = *
p
;

33 i‡(
c
 >= '0' && c <= '9') {

34 
o˘ë
 = o˘ë * 10 + (
c
 - '0');

38 i‡(
c
 ='.' && 
o˘ë
 < 256) {

39 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

40 
o˘ë
 = 0;

41 
n
++;

45  
INADDR_NONE
;

48 i‡(
n
 =3 && 
o˘ë
 < 256) {

49 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

50  
	`ht⁄l
(
addr
);

53  
INADDR_NONE
;

54 
	}
}

56 #i‡(
NGX_HAVE_INET6
)

58 
ngx_öt_t


59 
	$ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
)

61 
u_ch¨
 
c
, *
zîo
, *
digô
, *
s
, *
d
;

62 
size_t
 
Àn4
;

63 
ngx_uöt_t
 
n
, 
nibbÀs
, 
w‹d
;

65 i‡(
Àn
 == 0) {

66  
NGX_ERROR
;

69 
zîo
 = 
NULL
;

70 
digô
 = 
NULL
;

71 
Àn4
 = 0;

72 
nibbÀs
 = 0;

73 
w‹d
 = 0;

74 
n
 = 8;

76 i‡(
p
[0] == ':') {

77 
p
++;

78 
Àn
--;

81  ; 
Àn
;Üen--) {

82 
c
 = *
p
++;

84 i‡(
c
 == ':') {

85 i‡(
nibbÀs
) {

86 
digô
 = 
p
;

87 
Àn4
 = 
Àn
;

88 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

89 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

91 i‡(--
n
) {

92 
nibbÀs
 = 0;

93 
w‹d
 = 0;

98 i‡(
zîo
 =
NULL
) {

99 
digô
 = 
p
;

100 
Àn4
 = 
Àn
;

101 
zîo
 = 
addr
;

106  
NGX_ERROR
;

109 i‡(
c
 ='.' && 
nibbÀs
) {

110 i‡(
n
 < 2 || 
digô
 =
NULL
) {

111  
NGX_ERROR
;

114 
w‹d
 = 
	`ngx_öë_addr
(
digô
, 
Àn4
 - 1);

115 i‡(
w‹d
 =
INADDR_NONE
) {

116  
NGX_ERROR
;

119 
w‹d
 = 
	`¡ohl
(word);

120 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 24) & 0xff);

121 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 16) & 0xff);

122 
n
--;

126 i‡(++
nibbÀs
 > 4) {

127  
NGX_ERROR
;

130 i‡(
c
 >= '0' && c <= '9') {

131 
w‹d
 = w‹d * 16 + (
c
 - '0');

135 
c
 |= 0x20;

137 i‡(
c
 >= 'a' && c <= 'f') {

138 
w‹d
 = w‹d * 16 + (
c
 - 'a') + 10;

142  
NGX_ERROR
;

145 i‡(
nibbÀs
 =0 && 
zîo
 =
NULL
) {

146  
NGX_ERROR
;

149 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

150 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

152 i‡(--
n
) {

153 i‡(
zîo
) {

154 
n
 *= 2;

155 
s
 = 
addr
 - 1;

156 
d
 = 
s
 + 
n
;

157 
s
 >
zîo
) {

158 *
d
-- = *
s
--;

160 
	`ngx_memzîo
(
zîo
, 
n
);

161  
NGX_OK
;

165 i‡(
zîo
 =
NULL
) {

166  
NGX_OK
;

170  
NGX_ERROR
;

171 
	}
}

175 #i‡(
NGX_HAVE_SERVAL
)

177 
ngx_öt_t


178 
	$ngx_£rvÆ_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
, u_ch¨ *
addr
)

182 
£rvi˚_id
 *
§vid
 = (£rvi˚_id *)
addr
;

198 i‡(
	`£rvÆ_±⁄
((c⁄° *)
ãxt
, 
§vid
->
s_sid
))

199  
NGX_OK
;

201  
NGX_ERROR
;

202 
	}
}

206 
size_t


207 
	$ngx_sock_¡›
(
sockaddr
 *
ß
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
, 
ngx_uöt_t
 
p‹t
)

209 
u_ch¨
 *
p
;

210 
sockaddr_ö
 *
sö
;

211 #i‡(
NGX_HAVE_INET6
)

212 
size_t
 
n
;

213 
sockaddr_ö6
 *
sö6
;

215 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

216 
sockaddr_un
 *
ßun
;

218 #i‡(
NGX_HAVE_SERVAL
)

219 
sockaddr_sv
 *
ssv
;

222 
ß
->
ß_Ámûy
) {

224 
AF_INET
:

226 
sö
 = (
sockaddr_ö
 *Ë
ß
;

227 
p
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

229 i‡(
p‹t
) {

230 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud:%d",

231 
p
[0],Ö[1],Ö[2],Ö[3], 
	`¡ohs
(
sö
->
sö_p‹t
));

233 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

234 
p
[0],Ö[1],Ö[2],Ö[3]);

237  (
p
 - 
ãxt
);

239 #i‡(
NGX_HAVE_INET6
)

241 
AF_INET6
:

243 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

245 
n
 = 0;

247 i‡(
p‹t
) {

248 
ãxt
[
n
++] = '[';

251 
n
 = 
	`ngx_öë6_¡›
(
sö6
->
sö6_addr
.
s6_addr
, &
ãxt
[n], 
Àn
);

253 i‡(
p‹t
) {

254 
n
 = 
	`ngx_•rötf
(&
ãxt
[1 +Ç], "]:%d",

255 
	`¡ohs
(
sö6
->
sö6_p‹t
)Ë- 
ãxt
;

258  
n
;

261 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

263 
AF_UNIX
:

264 
ßun
 = (
sockaddr_un
 *Ë
ß
;

268  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%s%Z", 
ßun
->
sun_∑th
) -Åext - 1;

272 #i‡(
NGX_HAVE_SERVAL
)

274 
AF_SERVAL
:

275 
ssv
 = (
sockaddr_sv
 *Ë
ß
;

277  
	`ngx_°æí
(
	`£rvÆ_¡›
(&
ssv
->
sv_§vid
, (*)
ãxt
, 
Àn
));

283 
	}
}

286 
size_t


287 
	$ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

289 
u_ch¨
 *
p
;

291 
Ámûy
) {

293 
AF_INET
:

295 
p
 = 
addr
;

297  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

298 
p
[0],Ö[1],Ö[2],Ö[3])

299 - 
ãxt
;

301 #i‡(
NGX_HAVE_INET6
)

303 
AF_INET6
:

304  
	`ngx_öë6_¡›
(
addr
, 
ãxt
, 
Àn
);

311 
	}
}

314 #i‡(
NGX_HAVE_INET6
)

316 
size_t


317 
	$ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, 
size_t
 
Àn
)

319 
u_ch¨
 *
d°
;

320 
size_t
 
max
, 
n
;

321 
ngx_uöt_t
 
i
, 
zîo
, 
œ°
;

323 i‡(
Àn
 < 
NGX_INET6_ADDRSTRLEN
) {

327 
zîo
 = (
ngx_uöt_t
) -1;

328 
œ°
 = (
ngx_uöt_t
) -1;

329 
max
 = 1;

330 
n
 = 0;

332 
i
 = 0; i < 16; i += 2) {

334 i‡(
p
[
i
] ||Ö[i + 1]) {

336 i‡(
max
 < 
n
) {

337 
zîo
 = 
œ°
;

338 
max
 = 
n
;

341 
n
 = 0;

345 i‡(
n
++ == 0) {

346 
œ°
 = 
i
;

350 i‡(
max
 < 
n
) {

351 
zîo
 = 
œ°
;

352 
max
 = 
n
;

355 
d°
 = 
ãxt
;

356 
n
 = 16;

358 i‡(
zîo
 == 0) {

360 i‡((
max
 =5 && 
p
[10] == 0xff &&Ö[11] == 0xff)

361 || (
max
 == 6)

362 || (
max
 =7 && 
p
[14] != 0 &&Ö[15] != 1))

364 
n
 = 12;

367 *
d°
++ = ':';

370 
i
 = 0; i < 
n
; i += 2) {

372 i‡(
i
 =
zîo
) {

373 *
d°
++ = ':';

374 
i
 +(
max
 - 1) * 2;

378 
d°
 = 
	`ngx_•rötf
(d°, "%uxi", 
p
[
i
] * 256 +Ö[i + 1]);

380 i‡(
i
 < 14) {

381 *
d°
++ = ':';

385 i‡(
n
 == 12) {

386 
d°
 = 
	`ngx_•rötf
(d°, "%ud.%ud.%ud.%ud", 
p
[12],Ö[13],Ö[14],Ö[15]);

389  
d°
 - 
ãxt
;

390 
	}
}

395 
ngx_öt_t


396 
	$ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
)

398 
u_ch¨
 *
addr
, *
mask
, *
œ°
;

399 
size_t
 
Àn
;

400 
ngx_öt_t
 
shi·
;

401 #i‡(
NGX_HAVE_INET6
)

402 
ngx_öt_t
 
rc
;

403 
ngx_uöt_t
 
s
, 
i
;

406 
addr
 = 
ãxt
->
d©a
;

407 
œ°
 = 
addr
 + 
ãxt
->
Àn
;

409 
mask
 = 
	`ngx_°æchr
(
addr
, 
œ°
, '/');

410 
Àn
 = (
mask
 ? mask : 
œ°
Ë- 
addr
;

412 
cidr
->
u
.
ö
.
addr
 = 
	`ngx_öë_addr
◊ddr, 
Àn
);

414 i‡(
cidr
->
u
.
ö
.
addr
 !
INADDR_NONE
) {

415 
cidr
->
Ámûy
 = 
AF_INET
;

417 i‡(
mask
 =
NULL
) {

418 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

419  
NGX_OK
;

422 #i‡(
NGX_HAVE_INET6
)

423 } i‡(
	`ngx_öë6_addr
(
addr
, 
Àn
, 
cidr
->
u
.
ö6
.addr.
s6_addr
Ë=
NGX_OK
) {

424 
cidr
->
Ámûy
 = 
AF_INET6
;

426 i‡(
mask
 =
NULL
) {

427 
	`ngx_mem£t
(
cidr
->
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

428  
NGX_OK
;

433  
NGX_ERROR
;

436 
mask
++;

438 
shi·
 = 
	`ngx_©oi
(
mask
, 
œ°
 - mask);

439 i‡(
shi·
 =
NGX_ERROR
) {

440  
NGX_ERROR
;

443 
cidr
->
Ámûy
) {

445 #i‡(
NGX_HAVE_INET6
)

446 
AF_INET6
:

447 i‡(
shi·
 > 128) {

448  
NGX_ERROR
;

451 
addr
 = 
cidr
->
u
.
ö6
.addr.
s6_addr
;

452 
mask
 = 
cidr
->
u
.
ö6
.mask.
s6_addr
;

453 
rc
 = 
NGX_OK
;

455 
i
 = 0; i < 16; i++) {

457 
s
 = (
shi·
 > 8) ? 8 : shift;

458 
shi·
 -
s
;

460 
mask
[
i
] = (
u_ch¨
Ë(0xffu << (8 - 
s
));

462 i‡(
addr
[
i
] !◊ddr[i] & 
mask
[i])) {

463 
rc
 = 
NGX_DONE
;

464 
addr
[
i
] &
mask
[i];

468  
rc
;

472 i‡(
shi·
 > 32) {

473  
NGX_ERROR
;

476 i‡(
shi·
) {

477 
cidr
->
u
.
ö
.
mask
 = 
	`ht⁄l
((
uöt32_t
Ë(0xffffffffu << (32 - 
shi·
)));

481 
cidr
->
u
.
ö
.
mask
 = 0;

484 i‡(
cidr
->
u
.
ö
.
addr
 =(cidr->u.ö.add∏& cidr->u.ö.
mask
)) {

485  
NGX_OK
;

488 
cidr
->
u
.
ö
.
addr
 &cidr->u.ö.
mask
;

490  
NGX_DONE
;

492 
	}
}

495 
ngx_öt_t


496 
	$ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

498 
ö_addr_t
 
öaddr
;

499 
ngx_uöt_t
 
Ámûy
;

500 
sockaddr_ö
 *
sö
;

501 #i‡(
NGX_HAVE_INET6
)

502 
ö6_addr
 
öaddr6
;

503 
sockaddr_ö6
 *
sö6
;

509 
	`ngx_memzîo
(&
öaddr6
, (
ö6_addr
));

512 
öaddr
 = 
	`ngx_öë_addr
(
ãxt
, 
Àn
);

514 i‡(
öaddr
 !
INADDR_NONE
) {

515 
Ámûy
 = 
AF_INET
;

516 
Àn
 = (
sockaddr_ö
);

518 #i‡(
NGX_HAVE_INET6
)

519 } i‡(
	`ngx_öë6_addr
(
ãxt
, 
Àn
, 
öaddr6
.
s6_addr
Ë=
NGX_OK
) {

520 
Ámûy
 = 
AF_INET6
;

521 
Àn
 = (
sockaddr_ö6
);

525  
NGX_DECLINED
;

528 
addr
->
sockaddr
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Àn
);

529 i‡(
addr
->
sockaddr
 =
NULL
) {

530  
NGX_ERROR
;

533 
addr
->
sockaddr
->
ß_Ámûy
 = (
u_ch¨
Ë
Ámûy
;

534 
addr
->
sockÀn
 = 
Àn
;

536 
Ámûy
) {

538 #i‡(
NGX_HAVE_INET6
)

539 
AF_INET6
:

540 
sö6
 = (
sockaddr_ö6
 *Ë
addr
->
sockaddr
;

541 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
öaddr6
.s6_addr, 16);

546 
sö
 = (
sockaddr_ö
 *Ë
addr
->
sockaddr
;

547 
sö
->
sö_addr
.
s_addr
 = 
öaddr
;

551  
NGX_OK
;

552 
	}
}

555 
ngx_öt_t


556 
	$ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

558 
u_ch¨
 *
p
;

560 
p
 = 
u
->
uæ
.
d©a
;

562 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "unix:", 5) == 0) {

563  
	`ngx_∑r£_unix_domaö_uæ
(
poﬁ
, 
u
);

566 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "serval:", 7) == 0) {

567  
	`ngx_∑r£_£rvÆ_uæ
(
poﬁ
, 
u
);

570 i‡(
p
[0] == '[') {

571  
	`ngx_∑r£_öë6_uæ
(
poﬁ
, 
u
);

574  
	`ngx_∑r£_öë_uæ
(
poﬁ
, 
u
);

575 
	}
}

578 
ngx_öt_t


579 
	$ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

581 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

582 
u_ch¨
 *
∑th
, *
uri
, *
œ°
;

583 
size_t
 
Àn
;

584 
sockaddr_un
 *
ßun
;

586 
Àn
 = 
u
->
uæ
.len;

587 
∑th
 = 
u
->
uæ
.
d©a
;

589 
∑th
 += 5;

590 
Àn
 -= 5;

592 i‡(
u
->
uri_∑π
) {

594 
œ°
 = 
∑th
 + 
Àn
;

595 
uri
 = 
	`ngx_°æchr
(
∑th
, 
œ°
, ':');

597 i‡(
uri
) {

598 
Àn
 = 
uri
 - 
∑th
;

599 
uri
++;

600 
u
->
uri
.
Àn
 = 
œ°
 - uri;

601 
u
->
uri
.
d©a
 = uri;

605 i‡(
Àn
 == 0) {

606 
u
->
îr
 = "noÖath inÅhe unix domain socket";

607  
NGX_ERROR
;

610 
u
->
ho°
.
Àn
 =Üen++;

611 
u
->
ho°
.
d©a
 = 
∑th
;

613 i‡(
Àn
 > (
ßun
->
sun_∑th
)) {

614 
u
->
îr
 = "tooÜongÖath inÅhe unix domain socket";

615  
NGX_ERROR
;

618 
u
->
sockÀn
 = (
sockaddr_un
);

619 
ßun
 = (
sockaddr_un
 *Ë&
u
->
sockaddr
;

620 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

621 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

623 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

624 i‡(
u
->
addrs
 =
NULL
) {

625  
NGX_ERROR
;

628 
ßun
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_un
));

629 i‡(
ßun
 =
NULL
) {

630  
NGX_ERROR
;

633 
u
->
Ámûy
 = 
AF_UNIX
;

634 
u
->
«ddrs
 = 1;

636 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

637 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

639 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
ßun
;

640 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_un
);

641 
u
->
addrs
[0].
«me
.
Àn
 =Üen + 4;

642 
u
->
addrs
[0].
«me
.
d©a
 = u->
uæ
.data;

644  
NGX_OK
;

648 
u
->
îr
 = "the unix domain socketsáreÇot supported onÅhisÖlatform";

650  
NGX_ERROR
;

653 
	}
}

656 
ngx_öt_t


657 
	$ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

659 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
, *
¨gs
;

660 
size_t
 
Àn
;

661 
ngx_öt_t
 
n
;

662 
ho°ít
 *
h
;

663 
sockaddr_ö
 *
sö
;

665 
u
->
sockÀn
 = (
sockaddr_ö
);

666 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

667 
sö
->
sö_Ámûy
 = 
AF_INET
;

669 
u
->
Ámûy
 = 
AF_INET
;

671 
ho°
 = 
u
->
uæ
.
d©a
;

673 
œ°
 = 
ho°
 + 
u
->
uæ
.
Àn
;

675 
p‹t
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ':');

677 
uri
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '/');

679 
¨gs
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '?');

681 i‡(
¨gs
) {

682 i‡(
uri
 =
NULL
 || 
¨gs
 < uri) {

683 
uri
 = 
¨gs
;

687 i‡(
uri
) {

688 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

689 
u
->
îr
 = "invalid host";

690  
NGX_ERROR
;

693 
u
->
uri
.
Àn
 = 
œ°
 - uri;

694 
u
->
uri
.
d©a
 = uri;

696 
œ°
 = 
uri
;

698 i‡(
uri
 < 
p‹t
) {

699 
p‹t
 = 
NULL
;

703 i‡(
p‹t
) {

704 
p‹t
++;

706 
Àn
 = 
œ°
 - 
p‹t
;

708 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

710 i‡(
n
 < 1 ||Ç > 65535) {

711 
u
->
îr
 = "invalidÖort";

712  
NGX_ERROR
;

715 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

716 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

718 
u
->
p‹t_ãxt
.
Àn
 =Üen;

719 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

721 
œ°
 = 
p‹t
 - 1;

724 i‡(
uri
 =
NULL
) {

726 i‡(
u
->
li°í
) {

730 
n
 = 
	`ngx_©oi
(
ho°
, 
œ°
 - host);

732 i‡(
n
 !
NGX_ERROR
) {

734 i‡(
n
 < 1 ||Ç > 65535) {

735 
u
->
îr
 = "invalidÖort";

736  
NGX_ERROR
;

739 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

740 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

742 
u
->
p‹t_ãxt
.
Àn
 = 
œ°
 - 
ho°
;

743 
u
->
p‹t_ãxt
.
d©a
 = 
ho°
;

745 
u
->
wûdˇrd
 = 1;

747  
NGX_OK
;

752 
u
->
no_p‹t
 = 1;

755 
Àn
 = 
œ°
 - 
ho°
;

757 i‡(
Àn
 == 0) {

758 
u
->
îr
 = "no host";

759  
NGX_ERROR
;

762 i‡(
Àn
 =1 && *
ho°
 == '*') {

763 
Àn
 = 0;

766 
u
->
ho°
.
Àn
 =Üen;

767 
u
->
ho°
.
d©a
 = host;

769 i‡(
u
->
no_ªsﬁve
) {

770  
NGX_OK
;

773 i‡(
Àn
) {

774 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
ho°
, 
Àn
);

776 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_NONE
) {

777 
p
 = 
	`ngx_Æloc
(++
Àn
, 
poﬁ
->
log
);

778 i‡(
p
 =
NULL
) {

779  
NGX_ERROR
;

782 (Ë
	`ngx_˝y°∫
(
p
, 
ho°
, 
Àn
);

784 
h
 = 
	`gëho°by«me
((c⁄° *Ë
p
);

786 
	`ngx_‰ì
(
p
);

788 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

789 
u
->
îr
 = "hostÇot found";

790  
NGX_ERROR
;

793 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[0]);

796 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

797 
u
->
wûdˇrd
 = 1;

801 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

802 
u
->
wûdˇrd
 = 1;

805 i‡(
u
->
no_p‹t
) {

806 
u
->
p‹t
 = u->
deÁu…_p‹t
;

807 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

810 i‡(
u
->
li°í
) {

811  
NGX_OK
;

814  
	`ngx_öë_ªsﬁve_ho°
(
poﬁ
, 
u
);

815 
	}
}

818 
ngx_öt_t


819 
	$ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

821 #i‡(
NGX_HAVE_INET6
)

822 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
;

823 
size_t
 
Àn
;

824 
ngx_öt_t
 
n
;

825 
sockaddr_ö6
 *
sö6
;

827 
u
->
sockÀn
 = (
sockaddr_ö6
);

828 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

829 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

831 
ho°
 = 
u
->
uæ
.
d©a
 + 1;

833 
œ°
 = 
u
->
uæ
.
d©a
 + u->uæ.
Àn
;

835 
p
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ']');

837 i‡(
p
 =
NULL
) {

838 
u
->
îr
 = "invalid host";

839  
NGX_ERROR
;

842 i‡(
œ°
 - 
p
) {

844 
p‹t
 = 
p
 + 1;

846 
uri
 = 
	`ngx_°æchr
(
p‹t
, 
œ°
, '/');

848 i‡(
uri
) {

849 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

850 
u
->
îr
 = "invalid host";

851  
NGX_ERROR
;

854 
u
->
uri
.
Àn
 = 
œ°
 - uri;

855 
u
->
uri
.
d©a
 = uri;

857 
œ°
 = 
uri
;

860 i‡(*
p‹t
 == ':') {

861 
p‹t
++;

863 
Àn
 = 
œ°
 - 
p‹t
;

865 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

867 i‡(
n
 < 1 ||Ç > 65535) {

868 
u
->
îr
 = "invalidÖort";

869  
NGX_ERROR
;

872 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

873 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

875 
u
->
p‹t_ãxt
.
Àn
 =Üen;

876 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

879 
u
->
no_p‹t
 = 1;

883 
Àn
 = 
p
 - 
ho°
;

885 i‡(
Àn
 == 0) {

886 
u
->
îr
 = "no host";

887  
NGX_ERROR
;

890 
u
->
ho°
.
Àn
 =Üen + 2;

891 
u
->
ho°
.
d©a
 = host - 1;

893 i‡(
	`ngx_öë6_addr
(
ho°
, 
Àn
, 
sö6
->
sö6_addr
.
s6_addr
Ë!
NGX_OK
) {

894 
u
->
îr
 = "invalid IPv6áddress";

895  
NGX_ERROR
;

898 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

899 
u
->
wûdˇrd
 = 1;

902 i‡(
u
->
no_p‹t
) {

903 
u
->
p‹t
 = u->
deÁu…_p‹t
;

904 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

907 
u
->
Ámûy
 = 
AF_INET6
;

908 
u
->
«ddrs
 = 1;

910 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

911 i‡(
u
->
addrs
 =
NULL
) {

912  
NGX_ERROR
;

915 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö6
));

916 i‡(
sö6
 =
NULL
) {

917  
NGX_ERROR
;

920 
	`ngx_mem˝y
(
sö6
, 
u
->
sockaddr
, (
sockaddr_ö6
));

922 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö6
;

923 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö6
);

925 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

926 i‡(
p
 =
NULL
) {

927  
NGX_ERROR
;

930 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

931 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

932 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

934  
NGX_OK
;

938 
u
->
îr
 = "the INET6 socketsáreÇot supported onÅhisÖlatform";

940  
NGX_ERROR
;

943 
	}
}

945 
ngx_öt_t


946 
	$ngx_∑r£_£rvÆ_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

948 #i‡(
NGX_HAVE_SERVAL
)

949 
u_ch¨
 *
p
, *
ho°
, *
œ°
;

950 
size_t
 
Àn
;

951 
sockaddr_sv
 *
ssv
;

953 
u
->
sockÀn
 = (
sockaddr_sv
);

954 
ssv
 = (
sockaddr_sv
 *Ë&
u
->
sockaddr
;

955 
ssv
->
sv_Ámûy
 = 
AF_SERVAL
;

957 
ho°
 = 
u
->
uæ
.
d©a
 + 7;

959 
œ°
 = 
u
->
uæ
.
d©a
 + u->uæ.
Àn
;

961 
Àn
 = 
œ°
 - 
ho°
;

963 i‡(
Àn
 == 0) {

964 
u
->
îr
 = "no service ID";

965  
NGX_ERROR
;

968 
u
->
ho°
.
Àn
 =Üen + 2;

969 
u
->
ho°
.
d©a
 = host - 1;

971 i‡(
	`ngx_£rvÆ_addr
(
ho°
, 
Àn
, (
u_ch¨
 *)
ssv
->
sv_§vid
.
s_sid
Ë!
NGX_OK
) {

972 
u
->
îr
 = "invalid service ID";

973  
NGX_ERROR
;

976 
u
->
Ámûy
 = 
AF_SERVAL
;

977 
u
->
«ddrs
 = 1;

979 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

980 i‡(
u
->
addrs
 =
NULL
) {

981  
NGX_ERROR
;

984 
ssv
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_sv
));

985 i‡(
ssv
 =
NULL
) {

986  
NGX_ERROR
;

989 
	`ngx_mem˝y
(
ssv
, 
u
->
sockaddr
, (
sockaddr_sv
));

991 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
ssv
;

992 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_sv
);

994 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
);

995 i‡(
p
 =
NULL
) {

996  
NGX_ERROR
;

999 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V",

1000 &
u
->
ho°
Ë- 
p
;

1001 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1003  
NGX_OK
;

1007 
u
->
îr
 = "the AF_SERVAL socketsáreÇot supported onÅhisÖlatform";

1009  
NGX_ERROR
;

1012 
	}
}

1015 
ngx_öt_t


1016 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

1018 
u_ch¨
 *
p
, *
ho°
;

1019 
size_t
 
Àn
;

1020 
ö_p‹t_t
 
p‹t
;

1021 
ö_addr_t
 
ö_addr
;

1022 
ngx_uöt_t
 
i
;

1023 
ho°ít
 *
h
;

1024 
sockaddr_ö
 *
sö
;

1028 
p‹t
 = 
	`ht⁄s
(
u
->port);

1030 
ö_addr
 = 
	`ngx_öë_addr
(
u
->
ho°
.
d©a
, u->ho°.
Àn
);

1032 i‡(
ö_addr
 =
INADDR_NONE
) {

1033 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

1034 i‡(
ho°
 =
NULL
) {

1035  
NGX_ERROR
;

1038 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

1040 
h
 = 
	`gëho°by«me
((*Ë
ho°
);

1042 
	`ngx_‰ì
(
ho°
);

1044 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

1045 
u
->
îr
 = "hostÇot found";

1046  
NGX_ERROR
;

1049 i‡(
u
->
⁄e_addr
 == 0) {

1050 
i
 = 0; 
h
->
h_addr_li°
[i] !
NULL
; i++) { }

1053 
i
 = 1;

1058 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1059 i‡(
u
->
addrs
 =
NULL
) {

1060  
NGX_ERROR
;

1063 
u
->
«ddrs
 = 
i
;

1065 
i
 = 0; i < 
u
->
«ddrs
; i++) {

1067 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1068 i‡(
sö
 =
NULL
) {

1069  
NGX_ERROR
;

1072 
sö
->
sö_Ámûy
 = 
AF_INET
;

1073 
sö
->
sö_p‹t
 = 
p‹t
;

1074 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[
i
]);

1076 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1077 
u
->
addrs
[
i
].
sockÀn
 = (
sockaddr_ö
);

1079 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1081 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1082 i‡(
p
 =
NULL
) {

1083  
NGX_ERROR
;

1086 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
p
,Üen, 1);

1088 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1089 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1096 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

1097 i‡(
u
->
addrs
 =
NULL
) {

1098  
NGX_ERROR
;

1101 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1102 i‡(
sö
 =
NULL
) {

1103  
NGX_ERROR
;

1106 
u
->
«ddrs
 = 1;

1108 
sö
->
sö_Ámûy
 = 
AF_INET
;

1109 
sö
->
sö_p‹t
 = 
p‹t
;

1110 
sö
->
sö_addr
.
s_addr
 = 
ö_addr
;

1112 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

1113 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

1115 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

1116 i‡(
p
 =
NULL
) {

1117  
NGX_ERROR
;

1120 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

1121 &
u
->
ho°
, 
	`¡ohs
(
p‹t
)Ë- 
p
;

1122 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1125  
NGX_OK
;

1126 
	}
}

	@src/core/ngx_inet.h

8 #i‚de‡
_NGX_INET_H_INCLUDED_


9 
	#_NGX_INET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

24 
	#NGX_INET_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

25 
	#NGX_INET6_ADDRSTRLEN
 \

26 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

27 
	#NGX_UNIX_ADDRSTRLEN
 \

28 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

30 #i‡(
NGX_HAVE_SERVAL
)

31 
	#NGX_SERVAL_ADDRSTRLEN
 \

32 (("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" - 1))

	)

35 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

36 
	#NGX_SOCKADDR_STRLEN
 (("unix:"Ë- 1 + 
NGX_UNIX_ADDRSTRLEN
)

	)

38 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET6_ADDRSTRLEN
 + ("[]:65535"Ë- 1)

	)

41 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

42 
	#NGX_SOCKADDRLEN
 (
sockaddr_un
)

	)

44 
	#NGX_SOCKADDRLEN
 512

	)

49 
ö_addr_t
 
	maddr
;

50 
ö_addr_t
 
	mmask
;

51 } 
	tngx_ö_cidr_t
;

54 #i‡(
NGX_HAVE_INET6
)

57 
ö6_addr
 
	maddr
;

58 
ö6_addr
 
	mmask
;

59 } 
	tngx_ö6_cidr_t
;

65 
ngx_uöt_t
 
	mÁmûy
;

67 
ngx_ö_cidr_t
 
	mö
;

68 #i‡(
NGX_HAVE_INET6
)

69 
ngx_ö6_cidr_t
 
	mö6
;

71 } 
	mu
;

72 } 
	tngx_cidr_t
;

76 
sockaddr
 *
	msockaddr
;

77 
sockÀn_t
 
	msockÀn
;

78 
ngx_°r_t
 
	m«me
;

79 } 
	tngx_addr_t
;

83 
ngx_°r_t
 
	muæ
;

84 
ngx_°r_t
 
	mho°
;

85 
ngx_°r_t
 
	mp‹t_ãxt
;

86 
ngx_°r_t
 
	muri
;

88 
ö_p‹t_t
 
	mp‹t
;

89 
ö_p‹t_t
 
	mdeÁu…_p‹t
;

90 
	mÁmûy
;

92 
	mli°í
:1;

93 
	muri_∑π
:1;

94 
	mno_ªsﬁve
:1;

95 
	m⁄e_addr
:1;

97 
	mno_p‹t
:1;

98 
	mwûdˇrd
:1;

100 
sockÀn_t
 
	msockÀn
;

101 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

103 
ngx_addr_t
 *
	maddrs
;

104 
ngx_uöt_t
 
	m«ddrs
;

106 *
	mîr
;

107 } 
	tngx_uæ_t
;

110 
ö_addr_t
 
ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

111 #i‡(
NGX_HAVE_INET6
)

112 
ngx_öt_t
 
ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
);

113 
size_t
 
ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, size_à
Àn
);

115 
size_t
 
ngx_sock_¡›
(
sockaddr
 *
ß
, 
u_ch¨
 *
ãxt
, size_à
Àn
,

116 
ngx_uöt_t
 
p‹t
);

117 
size_t
 
ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, size_à
Àn
);

118 
ngx_öt_t
 
ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
);

119 
ngx_öt_t
 
ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

120 
size_t
 
Àn
);

121 
ngx_öt_t
 
ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

122 
ngx_öt_t
 
ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

	@src/core/ngx_list.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_li°_t
 *

13 
	$ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_li°_t
 *
li°
;

17 
li°
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_li°_t
));

18 i‡(
li°
 =
NULL
) {

19  
NULL
;

22 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

23 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

24  
NULL
;

27 
li°
->
∑π
.
√…s
 = 0;

28 
li°
->
∑π
.
√xt
 = 
NULL
;

29 
li°
->
œ°
 = &li°->
∑π
;

30 
li°
->
size
 = size;

31 
li°
->
«Œoc
 = 
n
;

32 
li°
->
poﬁ
 =Öool;

34  
li°
;

35 
	}
}

39 
	$ngx_li°_push
(
ngx_li°_t
 *
l
)

41 *
ñt
;

42 
ngx_li°_∑π_t
 *
œ°
;

44 
œ°
 = 
l
->last;

46 i‡(
œ°
->
√…s
 =
l
->
«Œoc
) {

50 
œ°
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
, (
ngx_li°_∑π_t
));

51 i‡(
œ°
 =
NULL
) {

52  
NULL
;

55 
œ°
->
ñts
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
,Ü->
«Œoc
 *Ü->
size
);

56 i‡(
œ°
->
ñts
 =
NULL
) {

57  
NULL
;

60 
œ°
->
√…s
 = 0;

61 
œ°
->
√xt
 = 
NULL
;

63 
l
->
œ°
->
√xt
 =Üast;

64 
l
->
œ°
 =Üast;

67 
ñt
 = (*Ë
œ°
->
ñts
 + 
l
->
size
 *Üa°->
√…s
;

68 
œ°
->
√…s
++;

70  
ñt
;

71 
	}
}

	@src/core/ngx_list.h

8 #i‚de‡
_NGX_LIST_H_INCLUDED_


9 
	#_NGX_LIST_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°_∑π_s
 
	tngx_li°_∑π_t
;

18 
	sngx_li°_∑π_s
 {

19 *
	mñts
;

20 
ngx_uöt_t
 
	m√…s
;

21 
ngx_li°_∑π_t
 *
	m√xt
;

26 
ngx_li°_∑π_t
 *
	mœ°
;

27 
ngx_li°_∑π_t
 
	m∑π
;

28 
size_t
 
	msize
;

29 
ngx_uöt_t
 
	m«Œoc
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 } 
	tngx_li°_t
;

34 
ngx_li°_t
 *
ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

36 
ngx_ölöe
 
ngx_öt_t


37 
	$ngx_li°_öô
(
ngx_li°_t
 *
li°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

40 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

41  
NGX_ERROR
;

44 
li°
->
∑π
.
√…s
 = 0;

45 
li°
->
∑π
.
√xt
 = 
NULL
;

46 
li°
->
œ°
 = &li°->
∑π
;

47 
li°
->
size
 = size;

48 
li°
->
«Œoc
 = 
n
;

49 
li°
->
poﬁ
 =Öool;

51  
NGX_OK
;

52 
	}
}

80 *
ngx_li°_push
(
ngx_li°_t
 *
li°
);

	@src/core/ngx_log.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_îæog_comm™ds
[] = {

17 {
ngx_°rög
("error_log"),

18 
NGX_MAIN_CONF
|
NGX_CONF_1MORE
,

19 
ngx_îr‹_log
,

22 
NULL
},

24 
ngx_nuŒ_comm™d


28 
ngx_c‹e_moduÀ_t
 
	gngx_îæog_moduÀ_˘x
 = {

29 
ngx_°rög
("errlog"),

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_îæog_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_îæog_moduÀ_˘x
,

38 
ngx_îæog_comm™ds
,

39 
NGX_CORE_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_log_t
 
	gngx_log
;

52 
ngx_›í_fûe_t
 
	gngx_log_fûe
;

53 
ngx_uöt_t
 
	gngx_u£_°dîr
 = 1;

56 
ngx_°r_t
 
	gîr_Àvñs
[] = {

57 
ngx_nuŒ_°rög
,

58 
ngx_°rög
("emerg"),

59 
ngx_°rög
("alert"),

60 
ngx_°rög
("crit"),

61 
ngx_°rög
("error"),

62 
ngx_°rög
("warn"),

63 
ngx_°rög
("notice"),

64 
ngx_°rög
("info"),

65 
ngx_°rög
("debug")

68 c⁄° *
	gdebug_Àvñs
[] = {

74 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

77 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

78 c⁄° *
fmt
, ...)

83 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

84 c⁄° *
fmt
, 
va_li°
 
¨gs
)

88 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

89 
va_li°
 
¨gs
;

91 
u_ch¨
 *
p
, *
œ°
, *
msg
;

92 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

94 i‡(
log
->
fûe
->
fd
 =
NGX_INVALID_FILE
) {

98 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

100 
	`ngx_mem˝y
(
îr°r
, 
ngx_ˇched_îr_log_time
.
d©a
,

101 
ngx_ˇched_îr_log_time
.
Àn
);

103 
p
 = 
îr°r
 + 
ngx_ˇched_îr_log_time
.
Àn
;

105 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, " [%V] ", &
îr_Àvñs
[
Àvñ
]);

108 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%P#" 
NGX_TID_T_FMT
 ": ",

109 
ngx_log_pid
, 
ngx_log_tid
);

111 i‡(
log
->
c⁄√˘i⁄
) {

112 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "*%uA ", 
log
->
c⁄√˘i⁄
);

115 
msg
 = 
p
;

117 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

119 
	`va_°¨t
(
¨gs
, 
fmt
);

120 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

121 
	`va_íd
(
¨gs
);

125 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

129 i‡(
îr
) {

130 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

133 i‡(
Àvñ
 !
NGX_LOG_DEBUG
 && 
log
->
h™dÀr
) {

134 
p
 = 
log
->
	`h™dÀr
÷og,Ö, 
œ°
 -Ö);

137 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

138 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

141 
	`ngx_löe„ed
(
p
);

143 (Ë
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
îr°r
, 
p
 -Érrstr);

145 i‡(!
ngx_u£_°dîr


146 || 
Àvñ
 > 
NGX_LOG_WARN


147 || 
log
->
fûe
->
fd
 =
ngx_°dîr
)

152 
msg
 -(7 + 
îr_Àvñs
[
Àvñ
].
Àn
 + 3);

154 (Ë
	`ngx_•rötf
(
msg
, "ngöx: [%V] ", &
îr_Àvñs
[
Àvñ
]);

156 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
msg
, 
p
 - msg);

157 
	}
}

160 #i‡!(
NGX_HAVE_VARIADIC_MACROS
)

162 
ngx_cde˛


163 
	$ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

164 c⁄° *
fmt
, ...)

166 
va_li°
 
¨gs
;

168 i‡(
log
->
log_Àvñ
 >
Àvñ
) {

169 
	`va_°¨t
(
¨gs
, 
fmt
);

170 
	`ngx_log_îr‹_c‹e
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨gs
);

171 
	`va_íd
(
¨gs
);

173 
	}
}

176 
ngx_cde˛


177 
	$ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

179 
va_li°
 
¨gs
;

181 
	`va_°¨t
(
¨gs
, 
fmt
);

182 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
îr
, 
fmt
, 
¨gs
);

183 
	`va_íd
(
¨gs
);

184 
	}
}

189 
ngx_cde˛


190 
	$ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

192 
u_ch¨
 *
p
;

193 
va_li°
 
¨gs
;

194 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

196 
	`va_°¨t
(
¨gs
, 
fmt
);

197 
p
 = 
	`ngx_v¢¥ötf
(
îr°r
, ”º°rË- 1, 
fmt
, 
¨gs
);

198 
	`va_íd
(
¨gs
);

200 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

201 "%*s", 
p
 - 
îr°r
,Érrstr);

202 
	}
}

205 
ngx_cde˛


206 
	$ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

208 
u_ch¨
 *
p
, *
œ°
;

209 
va_li°
 
¨gs
;

210 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

212 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

213 
p
 = 
îr°r
 + 7;

215 
	`ngx_mem˝y
(
îr°r
, "nginx: ", 7);

217 
	`va_°¨t
(
¨gs
, 
fmt
);

218 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

219 
	`va_íd
(
¨gs
);

221 i‡(
îr
) {

222 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

225 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

226 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

229 
	`ngx_löe„ed
(
p
);

231 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
îr°r
, 
p
 -Érrstr);

232 
	}
}

235 
u_ch¨
 *

236 
	$ngx_log_î∫o
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
)

238 i‡(
buf
 > 
œ°
 - 50) {

242 
buf
 = 
œ°
 - 50;

243 *
buf
++ = '.';

244 *
buf
++ = '.';

245 *
buf
++ = '.';

248 #i‡(
NGX_WIN32
)

249 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, ((Ë
îr
 < 0x80000000)

250 ? " (%d: " : " (%Xd: ", 
îr
);

252 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, " (%d: ", 
îr
);

255 
buf
 = 
	`ngx_°ªº‹
(
îr
, buf, 
œ°
 - buf);

257 i‡(
buf
 < 
œ°
) {

258 *
buf
++ = ')';

261  
buf
;

262 
	}
}

265 
ngx_log_t
 *

266 
	$ngx_log_öô
(
u_ch¨
 *
¥efix
)

268 
u_ch¨
 *
p
, *
«me
;

269 
size_t
 
∆í
, 
∂í
;

271 
ngx_log
.
fûe
 = &
ngx_log_fûe
;

272 
ngx_log
.
log_Àvñ
 = 
NGX_LOG_NOTICE
;

274 
«me
 = (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
;

281 
∆í
 = 
	`ngx_°æí
(
«me
);

283 i‡(
∆í
 == 0) {

284 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

285  &
ngx_log
;

288 
p
 = 
NULL
;

290 #i‡(
NGX_WIN32
)

291 i‡(
«me
[1] != ':') {

293 i‡(
«me
[0] != '/') {

296 i‡(
¥efix
) {

297 
∂í
 = 
	`ngx_°æí
(
¥efix
);

300 #ifde‡
NGX_PREFIX


301 
¥efix
 = (
u_ch¨
 *Ë
NGX_PREFIX
;

302 
∂í
 = 
	`ngx_°æí
(
¥efix
);

304 
∂í
 = 0;

308 i‡(
∂í
) {

309 
«me
 = 
	`mÆloc
(
∂í
 + 
∆í
 + 2);

310 i‡(
«me
 =
NULL
) {

311  
NULL
;

314 
p
 = 
	`ngx_˝ymem
(
«me
, 
¥efix
, 
∂í
);

316 i‡(!
	`ngx_∑th_£∑øt‹
(*(
p
 - 1))) {

317 *
p
++ = '/';

320 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
, 
∆í
 + 1);

322 
p
 = 
«me
;

326 
ngx_log_fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_APPEND
,

327 
NGX_FILE_CREATE_OR_OPEN
,

328 
NGX_FILE_DEFAULT_ACCESS
);

330 i‡(
ngx_log_fûe
.
fd
 =
NGX_INVALID_FILE
) {

331 
	`ngx_log_°dîr
(
ngx_î∫o
,

333 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

334 #i‡(
NGX_WIN32
)

335 
	`ngx_evít_log
(
ngx_î∫o
,

337 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

340 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

343 i‡(
p
) {

344 
	`ngx_‰ì
(
p
);

347  &
ngx_log
;

348 
	}
}

351 
ngx_log_t
 *

352 
	$ngx_log_¸óã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

354 
ngx_log_t
 *
log
;

356 
log
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_log_t
));

357 i‡(
log
 =
NULL
) {

358  
NULL
;

361 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cy˛e
, 
«me
);

362 i‡(
log
->
fûe
 =
NULL
) {

363  
NULL
;

366  
log
;

367 
	}
}

371 
	$ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
)

373 
ngx_uöt_t
 
i
, 
n
, 
d
, 
found
;

374 
ngx_°r_t
 *
vÆue
;

376 
vÆue
 = 
cf
->
¨gs
->
ñts
;

378 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

379 
found
 = 0;

381 
n
 = 1;Ç <
NGX_LOG_DEBUG
;Ç++) {

382 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
îr_Àvñs
[
n
].data) == 0) {

384 i‡(
log
->
log_Àvñ
 != 0) {

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

387 &
vÆue
[
i
]);

388  
NGX_CONF_ERROR
;

391 
log
->
log_Àvñ
 = 
n
;

392 
found
 = 1;

397 
n
 = 0, 
d
 = 
NGX_LOG_DEBUG_FIRST
; d <
NGX_LOG_DEBUG_LAST
; d <<= 1) {

398 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
debug_Àvñs
[
n
++]) == 0) {

399 i‡(
log
->
log_Àvñ
 & ~
NGX_LOG_DEBUG_ALL
) {

400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

402 &
vÆue
[
i
]);

403  
NGX_CONF_ERROR
;

406 
log
->
log_Àvñ
 |
d
;

407 
found
 = 1;

413 i‡(!
found
) {

414 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

415 "övÆidÜogÜevñ \"%V\"", &
vÆue
[
i
]);

416  
NGX_CONF_ERROR
;

420 i‡(
log
->
log_Àvñ
 =
NGX_LOG_DEBUG
) {

421 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

424  
NGX_CONF_OK
;

425 
	}
}

429 
	$ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

431 
ngx_°r_t
 *
vÆue
, 
«me
;

433 i‡(
cf
->
cy˛e
->
√w_log
.
fûe
) {

437 
vÆue
 = 
cf
->
¨gs
->
ñts
;

439 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

440 
	`ngx_°r_nuŒ
(&
«me
);

443 
«me
 = 
vÆue
[1];

446 
cf
->
cy˛e
->
√w_log
.
fûe
 = 
	`ngx_c⁄f_›í_fûe
(cf->cy˛e, &
«me
);

447 i‡(
cf
->
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

448  
NULL
;

451 i‡(
cf
->
¨gs
->
√…s
 == 2) {

452 
cf
->
cy˛e
->
√w_log
.
log_Àvñ
 = 
NGX_LOG_ERR
;

453  
NGX_CONF_OK
;

456 
cf
->
cy˛e
->
√w_log
.
log_Àvñ
 = 0;

458  
	`ngx_log_£t_Àvñs
(
cf
, &cf->
cy˛e
->
√w_log
);

459 
	}
}

	@src/core/ngx_log.h

8 #i‚de‡
_NGX_LOG_H_INCLUDED_


9 
	#_NGX_LOG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_LOG_STDERR
 0

	)

17 
	#NGX_LOG_EMERG
 1

	)

18 
	#NGX_LOG_ALERT
 2

	)

19 
	#NGX_LOG_CRIT
 3

	)

20 
	#NGX_LOG_ERR
 4

	)

21 
	#NGX_LOG_WARN
 5

	)

22 
	#NGX_LOG_NOTICE
 6

	)

23 
	#NGX_LOG_INFO
 7

	)

24 
	#NGX_LOG_DEBUG
 8

	)

26 
	#NGX_LOG_DEBUG_CORE
 0x010

	)

27 
	#NGX_LOG_DEBUG_ALLOC
 0x020

	)

28 
	#NGX_LOG_DEBUG_MUTEX
 0x040

	)

29 
	#NGX_LOG_DEBUG_EVENT
 0x080

	)

30 
	#NGX_LOG_DEBUG_HTTP
 0x100

	)

31 
	#NGX_LOG_DEBUG_MAIL
 0x200

	)

32 
	#NGX_LOG_DEBUG_MYSQL
 0x400

	)

39 
	#NGX_LOG_DEBUG_FIRST
 
NGX_LOG_DEBUG_CORE


	)

40 
	#NGX_LOG_DEBUG_LAST
 
NGX_LOG_DEBUG_MYSQL


	)

41 
	#NGX_LOG_DEBUG_CONNECTION
 0x80000000

	)

42 
	#NGX_LOG_DEBUG_ALL
 0x7ffffff0

	)

45 
	gu_ch¨
 *(*
	tngx_log_h™dÀr_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

48 
	sngx_log_s
 {

49 
ngx_uöt_t
 
	mlog_Àvñ
;

50 
ngx_›í_fûe_t
 *
	mfûe
;

52 
ngx_©omic_uöt_t
 
	mc⁄√˘i⁄
;

54 
ngx_log_h™dÀr_±
 
	mh™dÀr
;

55 *
	md©a
;

63 *
	ma˘i⁄
;

67 
	#NGX_MAX_ERROR_STR
 2048

	)

72 #i‡(
NGX_HAVE_C99_VARIADIC_MACROS
)

74 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

76 
	#ngx_log_îr‹
(
Àvñ
, 
log
, ...) \

77 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
__VA_ARGS__
)

	)

79 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

80 c⁄° *
fmt
, ...);

82 
	#ngx_log_debug
(
Àvñ
, 
log
, ...) \

83 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

84 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
__VA_ARGS__
)

	)

88 #ñi‡(
NGX_HAVE_GCC_VARIADIC_MACROS
)

90 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

92 
	#ngx_log_îr‹
(
Àvñ
, 
log
, 
¨gs
...) \

93 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
¨gs
)

	)

95 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

96 c⁄° *
fmt
, ...);

98 
	#ngx_log_debug
(
Àvñ
, 
log
, 
¨gs
...) \

99 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

100 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
¨gs
)

	)

106 
	#NGX_HAVE_VARIADIC_MACROS
 0

	)

108 
ngx_cde˛
 
ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

109 c⁄° *
fmt
, ...);

110 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

111 c⁄° *
fmt
, 
va_li°
 
¨gs
);

112 
ngx_cde˛
 
ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

113 c⁄° *
fmt
, ...);

121 #i‡(
NGX_DEBUG
)

123 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

125 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

126 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

128 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

129 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

131 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

132 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

134 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

135 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

137 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

138 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

140 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

141 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

143 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

144 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

145 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

146 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

148 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

149 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

150 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

151 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

153 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

154 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

155 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

156 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

161 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

162 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

163 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
)

	)

165 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

166 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

167 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
)

	)

169 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

170 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

171 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

173 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

174 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

175 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

177 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

178 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

179 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

181 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

182 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

183 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

185 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

186 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

187 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

188 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

190 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

191 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

192 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

193 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

194 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

196 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

197 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

198 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

199 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

200 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

206 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

207 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

208 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

209 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

210 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

211 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

212 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

213 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

214 
¨g6
, 
¨g7
)

	)

215 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

216 
¨g6
, 
¨g7
, 
¨g8
)

	)

222 
ngx_log_t
 *
ngx_log_öô
(
u_ch¨
 *
¥efix
);

223 
ngx_log_t
 *
ngx_log_¸óã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

224 *
ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
);

225 
ngx_cde˛
 
ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

226 
ngx_cde˛
 
ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

227 
u_ch¨
 *
ngx_log_î∫o
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
);

239 
ngx_ölöe
 

240 
	$ngx_wrôe_°dîr
(*
ãxt
)

242 (Ë
	`ngx_wrôe_fd
(
ngx_°dîr
, 
ãxt
, 
	`°æí
(text));

243 
	}
}

246 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

247 
ngx_uöt_t
 
ngx_u£_°dîr
;

	@src/core/ngx_md5.c

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_md5.h
>

16 #i‡!(
NGX_HAVE_MD5
)

18 c⁄° 
u_ch¨
 *
ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° u_ch¨ *
d©a
,

19 
size_t
 
size
);

23 
	$ngx_md5_öô
(
ngx_md5_t
 *
˘x
)

25 
˘x
->
a
 = 0x67452301;

26 
˘x
->
b
 = 0xefcdab89;

27 
˘x
->
c
 = 0x98badcfe;

28 
˘x
->
d
 = 0x10325476;

30 
˘x
->
byãs
 = 0;

31 
	}
}

35 
	$ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
)

37 
size_t
 
u£d
, 
‰ì
;

39 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

40 
˘x
->
byãs
 +
size
;

42 i‡(
u£d
) {

43 
‰ì
 = 64 - 
u£d
;

45 i‡(
size
 < 
‰ì
) {

46 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

50 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

51 
d©a
 = (
u_ch¨
 *Ëd©®+ 
‰ì
;

52 
size
 -
‰ì
;

53 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

56 i‡(
size
 >= 64) {

57 
d©a
 = 
	`ngx_md5_body
(
˘x
, d©a, 
size
 & ~(
size_t
) 0x3f);

58 
size
 &= 0x3f;

61 
	`ngx_mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

62 
	}
}

66 
	$ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
)

68 
size_t
 
u£d
, 
‰ì
;

70 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

72 
˘x
->
buf„r
[
u£d
++] = 0x80;

74 
‰ì
 = 64 - 
u£d
;

76 i‡(
‰ì
 < 8) {

77 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
);

78 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

79 
u£d
 = 0;

80 
‰ì
 = 64;

83 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
 - 8);

85 
˘x
->
byãs
 <<= 3;

86 
˘x
->
buf„r
[56] = (
u_ch¨
Ë˘x->
byãs
;

87 
˘x
->
buf„r
[57] = (
u_ch¨
Ë(˘x->
byãs
 >> 8);

88 
˘x
->
buf„r
[58] = (
u_ch¨
Ë(˘x->
byãs
 >> 16);

89 
˘x
->
buf„r
[59] = (
u_ch¨
Ë(˘x->
byãs
 >> 24);

90 
˘x
->
buf„r
[60] = (
u_ch¨
Ë(˘x->
byãs
 >> 32);

91 
˘x
->
buf„r
[61] = (
u_ch¨
Ë(˘x->
byãs
 >> 40);

92 
˘x
->
buf„r
[62] = (
u_ch¨
Ë(˘x->
byãs
 >> 48);

93 
˘x
->
buf„r
[63] = (
u_ch¨
Ë(˘x->
byãs
 >> 56);

95 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

97 
ªsu…
[0] = (
u_ch¨
Ë
˘x
->
a
;

98 
ªsu…
[1] = (
u_ch¨
Ë(
˘x
->
a
 >> 8);

99 
ªsu…
[2] = (
u_ch¨
Ë(
˘x
->
a
 >> 16);

100 
ªsu…
[3] = (
u_ch¨
Ë(
˘x
->
a
 >> 24);

101 
ªsu…
[4] = (
u_ch¨
Ë
˘x
->
b
;

102 
ªsu…
[5] = (
u_ch¨
Ë(
˘x
->
b
 >> 8);

103 
ªsu…
[6] = (
u_ch¨
Ë(
˘x
->
b
 >> 16);

104 
ªsu…
[7] = (
u_ch¨
Ë(
˘x
->
b
 >> 24);

105 
ªsu…
[8] = (
u_ch¨
Ë
˘x
->
c
;

106 
ªsu…
[9] = (
u_ch¨
Ë(
˘x
->
c
 >> 8);

107 
ªsu…
[10] = (
u_ch¨
Ë(
˘x
->
c
 >> 16);

108 
ªsu…
[11] = (
u_ch¨
Ë(
˘x
->
c
 >> 24);

109 
ªsu…
[12] = (
u_ch¨
Ë
˘x
->
d
;

110 
ªsu…
[13] = (
u_ch¨
Ë(
˘x
->
d
 >> 8);

111 
ªsu…
[14] = (
u_ch¨
Ë(
˘x
->
d
 >> 16);

112 
ªsu…
[15] = (
u_ch¨
Ë(
˘x
->
d
 >> 24);

114 
	`ngx_memzîo
(
˘x
, (*ctx));

115 
	}
}

126 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

127 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

128 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

129 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

135 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

136 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

137 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

138 (
a
Ë+(
b
)

	)

149 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

151 
	#SET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

152 
	#GET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

156 
	#SET
(
n
) \

157 (
block
[
n
] = \

158 (
uöt32_t
Ë
p
[
n
 * 4] | \

159 ((
uöt32_t
Ë
p
[
n
 * 4 + 1] << 8) | \

160 ((
uöt32_t
Ë
p
[
n
 * 4 + 2] << 16) | \

161 ((
uöt32_t
Ë
p
[
n
 * 4 + 3] << 24))

	)

163 
	#GET
(
n
Ë
block
[n]

	)

173 c⁄° 
u_ch¨
 *

174 
	$ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° 
u_ch¨
 *
d©a
, 
size_t
 
size
)

176 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

177 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

178 c⁄° 
u_ch¨
 *
p
;

179 #i‡!(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

180 
uöt32_t
 
block
[16];

183 
p
 = 
d©a
;

185 
a
 = 
˘x
->a;

186 
b
 = 
˘x
->b;

187 
c
 = 
˘x
->c;

188 
d
 = 
˘x
->d;

191 
ßved_a
 = 
a
;

192 
ßved_b
 = 
b
;

193 
ßved_c
 = 
c
;

194 
ßved_d
 = 
d
;

198 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7);

199 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12);

200 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17);

201 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22);

202 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7);

203 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12);

204 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17);

205 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22);

206 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7);

207 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12);

208 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17);

209 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22);

210 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7);

211 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12);

212 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17);

213 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22);

217 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5);

218 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9);

219 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14);

220 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20);

221 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5);

222 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9);

223 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14);

224 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20);

225 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5);

226 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9);

227 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14);

228 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20);

229 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5);

230 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9);

231 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14);

232 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20);

236 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4);

237 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11);

238 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16);

239 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23);

240 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4);

241 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11);

242 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16);

243 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23);

244 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4);

245 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11);

246 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16);

247 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23);

248 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4);

249 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11);

250 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16);

251 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23);

255 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6);

256 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10);

257 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15);

258 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21);

259 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6);

260 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10);

261 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15);

262 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21);

263 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6);

264 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10);

265 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15);

266 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21);

267 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6);

268 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10);

269 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15);

270 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21);

272 
a
 +
ßved_a
;

273 
b
 +
ßved_b
;

274 
c
 +
ßved_c
;

275 
d
 +
ßved_d
;

277 
p
 += 64;

279 } 
size
 -= 64);

281 
˘x
->
a
 =á;

282 
˘x
->
b
 = b;

283 
˘x
->
c
 = c;

284 
˘x
->
d
 = d;

286  
p
;

287 
	}
}

	@src/core/ngx_md5.h

8 #i‚de‡
_NGX_MD5_H_INCLUDED_


9 
	#_NGX_MD5_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_MD5
)

18 #i‡(
NGX_HAVE_OPENSSL_MD5_H
)

19 
	~<›ís¶/md5.h
>

21 
	~<md5.h
>

25 
MD5_CTX
 
	tngx_md5_t
;

28 #i‡(
NGX_OPENSSL_MD5
)

30 
	#ngx_md5_öô
 
MD5_Inô


	)

31 
	#ngx_md5_upd©e
 
MD5_Upd©e


	)

32 
	#ngx_md5_föÆ
 
MD5_FöÆ


	)

36 
	#ngx_md5_öô
 
MD5Inô


	)

37 
	#ngx_md5_upd©e
 
MD5Upd©e


	)

38 
	#ngx_md5_föÆ
 
MD5FöÆ


	)

47 
uöt64_t
 
	mbyãs
;

48 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

49 
u_ch¨
 
	mbuf„r
[64];

50 } 
	tngx_md5_t
;

53 
ngx_md5_öô
(
ngx_md5_t
 *
˘x
);

54 
ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

55 
ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
);

	@src/core/ngx_murmurhash.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
uöt32_t


12 
	$ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

14 
uöt32_t
 
h
, 
k
;

16 
h
 = 0 ^ 
Àn
;

18 
Àn
 >= 4) {

19 
k
 = 
d©a
[0];

20 
k
 |
d©a
[1] << 8;

21 
k
 |
d©a
[2] << 16;

22 
k
 |
d©a
[3] << 24;

24 
k
 *= 0x5bd1e995;

25 
k
 ^= k >> 24;

26 
k
 *= 0x5bd1e995;

28 
h
 *= 0x5bd1e995;

29 
h
 ^
k
;

31 
d©a
 += 4;

32 
Àn
 -= 4;

35 
Àn
) {

37 
h
 ^
d©a
[2] << 16;

39 
h
 ^
d©a
[1] << 8;

41 
h
 ^
d©a
[0];

42 
h
 *= 0x5bd1e995;

45 
h
 ^= h >> 13;

46 
h
 *= 0x5bd1e995;

47 
h
 ^= h >> 15;

49  
h
;

50 
	}
}

	@src/core/ngx_murmurhash.h

8 #i‚de‡
_NGX_MURMURHASH_H_INCLUDED_


9 
	#_NGX_MURMURHASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 
ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

	@src/core/ngx_open_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

21 
	#NGX_MIN_READ_AHEAD
 (128 * 1024)

	)

24 
ngx_›í_fûe_ˇche_˛ónup
(*
d©a
);

25 #i‡(
NGX_HAVE_OPENAT
)

26 
ngx_fd_t
 
ngx_›í©_fûe_ow√r
“gx_fd_à
©_fd
, c⁄° 
u_ch¨
 *
«me
,

27 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
);

29 
ngx_fd_t
 
ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
,

30 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,

31 
ngx_öt_t
 
ac˚ss
, 
ngx_log_t
 *
log
);

32 
ngx_öt_t
 
ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
,

33 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
);

34 
ngx_öt_t
 
ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
,

35 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

36 
ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

37 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

38 
ngx_›í_fûe_˛ónup
(*
d©a
);

39 
ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

40 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
);

41 
ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
);

42 
ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

43 
ngx_uöt_t
 
n
, 
ngx_log_t
 *
log
);

44 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

45 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

46 
ngx_ˇched_›í_fûe_t
 *

47 
ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

48 
uöt32_t
 
hash
);

49 
ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
);

52 
ngx_›í_fûe_ˇche_t
 *

53 
	$ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
)

55 
ngx_poﬁ_˛ónup_t
 *
˛n
;

56 
ngx_›í_fûe_ˇche_t
 *
ˇche
;

58 
ˇche
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_›í_fûe_ˇche_t
));

59 i‡(
ˇche
 =
NULL
) {

60  
NULL
;

63 
	`ngx_rbåì_öô
(&
ˇche
->
rbåì
, &ˇche->
£¡öñ
,

64 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
);

66 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

68 
ˇche
->
cuºít
 = 0;

69 
ˇche
->
max
 = max;

70 
ˇche
->
öa˘ive
 = inactive;

72 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, 0);

73 i‡(
˛n
 =
NULL
) {

74  
NULL
;

77 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_˛ónup
;

78 
˛n
->
d©a
 = 
ˇche
;

80  
ˇche
;

81 
	}
}

85 
	$ngx_›í_fûe_ˇche_˛ónup
(*
d©a
)

87 
ngx_›í_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

89 
ngx_queue_t
 *
q
;

90 
ngx_ˇched_›í_fûe_t
 *
fûe
;

92 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

97 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

101 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

103 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

105 
	`ngx_queue_ªmove
(
q
);

107 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

109 
ˇche
->
cuºít
--;

111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

112 "dñëêˇched o≥¿fûe: %s", 
fûe
->
«me
);

114 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

115 
fûe
->
˛o£
 = 1;

116 
fûe
->
cou¡
 = 0;

117 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
ngx_cy˛e
->
log
);

120 
	`ngx_‰ì
(
fûe
->
«me
);

121 
	`ngx_‰ì
(
fûe
);

125 i‡(
ˇche
->
cuºít
) {

126 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

128 
ˇche
->
cuºít
);

131 i‡(
ˇche
->
rbåì
.
roŸ
 !ˇche->rbåì.
£¡öñ
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

136 
	}
}

139 
ngx_öt_t


140 
	$ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

141 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
)

143 
time_t
 
now
;

144 
uöt32_t
 
hash
;

145 
ngx_öt_t
 
rc
;

146 
ngx_fûe_öfo_t
 
fi
;

147 
ngx_poﬁ_˛ónup_t
 *
˛n
;

148 
ngx_ˇched_›í_fûe_t
 *
fûe
;

149 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

150 
ngx_›í_fûe_ˇche_˛ónup_t
 *
of˛n
;

152 
of
->
fd
 = 
NGX_INVALID_FILE
;

153 
of
->
îr
 = 0;

155 i‡(
ˇche
 =
NULL
) {

157 i‡(
of
->
ã°_⁄ly
) {

159 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
poﬁ
->
log
)

160 =
NGX_FILE_ERROR
)

162  
NGX_ERROR
;

165 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

166 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

167 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

168 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

169 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

170 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

171 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

172 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

174  
NGX_OK
;

177 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

178 i‡(
˛n
 =
NULL
) {

179  
NGX_ERROR
;

182 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

184 i‡(
rc
 =
NGX_OK
 && !
of
->
is_dú
) {

185 
˛n
->
h™dÀr
 = 
ngx_poﬁ_˛ónup_fûe
;

186 
˛nf
 = 
˛n
->
d©a
;

188 
˛nf
->
fd
 = 
of
->fd;

189 
˛nf
->
«me
 =Çame->
d©a
;

190 
˛nf
->
log
 = 
poﬁ
->log;

193  
rc
;

196 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_›í_fûe_ˇche_˛ónup_t
));

197 i‡(
˛n
 =
NULL
) {

198  
NGX_ERROR
;

201 
now
 = 
	`ngx_time
();

203 
hash
 = 
	`ngx_¸c32_l⁄g
(
«me
->
d©a
,Çame->
Àn
);

205 
fûe
 = 
	`ngx_›í_fûe_lookup
(
ˇche
, 
«me
, 
hash
);

207 i‡(
fûe
) {

209 
fûe
->
u£s
++;

211 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

213 i‡(
fûe
->
fd
 =
NGX_INVALID_FILE
 && fûe->
îr
 =0 && !fûe->
is_dú
) {

217 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

219 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

220 
Áûed
;

223 
add_evít
;

226 i‡(
fûe
->
u£_evít


227 || (
fûe
->
evít
 =
NULL


228 && (
of
->
uniq
 =0 || of->uniq =
fûe
->uniq)

229 && 
now
 - 
fûe
->
¸óãd
 < 
of
->
vÆid


230 #i‡(
NGX_HAVE_OPENAT
)

231 && 
of
->
dißbÀ_symlöks
 =
fûe
->disable_symlinks

232 && 
of
->
dißbÀ_symlöks_‰om
 =
fûe
->disable_symlinks_from

236 i‡(
fûe
->
îr
 == 0) {

238 
of
->
fd
 = 
fûe
->fd;

239 
of
->
uniq
 = 
fûe
->uniq;

240 
of
->
mtime
 = 
fûe
->mtime;

241 
of
->
size
 = 
fûe
->size;

243 
of
->
is_dú
 = 
fûe
->is_dir;

244 
of
->
is_fûe
 = 
fûe
->is_file;

245 
of
->
is_lök
 = 
fûe
->is_link;

246 
of
->
is_exec
 = 
fûe
->is_exec;

247 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

249 i‡(!
fûe
->
is_dú
) {

250 
fûe
->
cou¡
++;

251 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

255 
of
->
îr
 = 
fûe
->err;

256 #i‡(
NGX_HAVE_OPENAT
)

257 
of
->
Áûed
 = 
fûe
->
dißbÀ_symlöks
 ? 
ngx_›í©_fûe_n


258 : 
ngx_›í_fûe_n
;

260 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

264 
found
;

267 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

269 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
);

271 i‡(
fûe
->
is_dú
) {

279 
of
->
ã°_dú
 = 1;

282 
of
->
fd
 = 
fûe
->fd;

283 
of
->
uniq
 = 
fûe
->uniq;

285 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

287 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

288 
Áûed
;

291 i‡(
of
->
is_dú
) {

293 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

294 
upd©e
;

299 } i‡(
of
->
îr
 == 0) {

301 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

302 
add_evít
;

305 i‡(
of
->
uniq
 =
fûe
->uniq) {

307 i‡(
fûe
->
evít
) {

308 
fûe
->
u£_evít
 = 1;

311 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

313 
upd©e
;

320 i‡(
fûe
->
îr
 || fûe->
is_dú
) {

321 
upd©e
;

327 i‡(
fûe
->
cou¡
 == 0) {

329 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

331 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

332 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

333 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

336 
add_evít
;

339 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

341 
ˇche
->
cuºít
--;

343 
fûe
->
˛o£
 = 1;

345 
¸óã
;

350 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

352 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

353 
Áûed
;

356 
¸óã
:

358 i‡(
ˇche
->
cuºít
 >ˇche->
max
) {

359 
	`ngx_expúe_ﬁd_ˇched_fûes
(
ˇche
, 0, 
poﬁ
->
log
);

362 
fûe
 = 
	`ngx_Æloc
((
ngx_ˇched_›í_fûe_t
), 
poﬁ
->
log
);

364 i‡(
fûe
 =
NULL
) {

365 
Áûed
;

368 
fûe
->
«me
 = 
	`ngx_Æloc
“ame->
Àn
 + 1, 
poﬁ
->
log
);

370 i‡(
fûe
->
«me
 =
NULL
) {

371 
	`ngx_‰ì
(
fûe
);

372 
fûe
 = 
NULL
;

373 
Áûed
;

376 
	`ngx_˝y°∫
(
fûe
->
«me
,Çame->
d©a
,Çame->
Àn
 + 1);

378 
fûe
->
node
.
key
 = 
hash
;

380 
	`ngx_rbåì_ö£π
(&
ˇche
->
rbåì
, &
fûe
->
node
);

382 
ˇche
->
cuºít
++;

384 
fûe
->
u£s
 = 1;

385 
fûe
->
cou¡
 = 0;

386 
fûe
->
u£_evít
 = 0;

387 
fûe
->
evít
 = 
NULL
;

389 
add_evít
:

391 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

393 
upd©e
:

395 
fûe
->
fd
 = 
of
->fd;

396 
fûe
->
îr
 = 
of
->err;

397 #i‡(
NGX_HAVE_OPENAT
)

398 
fûe
->
dißbÀ_symlöks
 = 
of
->disable_symlinks;

399 
fûe
->
dißbÀ_symlöks_‰om
 = 
of
->disable_symlinks_from;

402 i‡(
of
->
îr
 == 0) {

403 
fûe
->
uniq
 = 
of
->uniq;

404 
fûe
->
mtime
 = 
of
->mtime;

405 
fûe
->
size
 = 
of
->size;

407 
fûe
->
˛o£
 = 0;

409 
fûe
->
is_dú
 = 
of
->is_dir;

410 
fûe
->
is_fûe
 = 
of
->is_file;

411 
fûe
->
is_lök
 = 
of
->is_link;

412 
fûe
->
is_exec
 = 
of
->is_exec;

413 
fûe
->
is_dúe˘io
 = 
of
->is_directio;

415 i‡(!
of
->
is_dú
) {

416 
fûe
->
cou¡
++;

420 
fûe
->
¸óãd
 = 
now
;

422 
found
:

424 
fûe
->
ac˚s£d
 = 
now
;

426 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

428 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

430 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
, fûe->
u£s
);

432 i‡(
of
->
îr
 == 0) {

434 i‡(!
of
->
is_dú
) {

435 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_˛ónup
;

436 
of˛n
 = 
˛n
->
d©a
;

438 
of˛n
->
ˇche
 = cache;

439 
of˛n
->
fûe
 = file;

440 
of˛n
->
mö_u£s
 = 
of
->min_uses;

441 
of˛n
->
log
 = 
poﬁ
->log;

444  
NGX_OK
;

447  
NGX_ERROR
;

449 
Áûed
:

451 i‡(
fûe
) {

452 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

454 
ˇche
->
cuºít
--;

456 i‡(
fûe
->
cou¡
 == 0) {

458 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

459 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

460 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

461 
ngx_˛o£_fûe_n
 " \"%s\" failed",

462 
fûe
->
«me
);

466 
	`ngx_‰ì
(
fûe
->
«me
);

467 
	`ngx_‰ì
(
fûe
);

470 
fûe
->
˛o£
 = 1;

474 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

475 i‡(
	`ngx_˛o£_fûe
(
of
->
fd
Ë=
NGX_FILE_ERROR
) {

476 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

477 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

481  
NGX_ERROR
;

482 
	}
}

485 #i‡(
NGX_HAVE_OPENAT
)

487 
ngx_fd_t


488 
	$ngx_›í©_fûe_ow√r
(
ngx_fd_t
 
©_fd
, c⁄° 
u_ch¨
 *
«me
,

489 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

491 
ngx_fd_t
 
fd
;

492 
ngx_îr_t
 
îr
;

493 
ngx_fûe_öfo_t
 
fi
, 
©fi
;

507 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
);

509 i‡(
fd
 =
NGX_INVALID_FILE
) {

510  
NGX_INVALID_FILE
;

513 i‡(
	`ngx_fûe_©_öfo
(
©_fd
, 
«me
, &
©fi
, 
AT_SYMLINK_NOFOLLOW
)

514 =
NGX_FILE_ERROR
)

516 
îr
 = 
ngx_î∫o
;

517 
Áûed
;

520 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

521 
îr
 = 
ngx_î∫o
;

522 
Áûed
;

525 i‡(
fi
.
°_uid
 !
©fi
.st_uid) {

526 
îr
 = 
NGX_ELOOP
;

527 
Áûed
;

530  
fd
;

532 
Áûed
:

534 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

535 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

536 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

539 
	`ngx_£t_î∫o
(
îr
);

541  
NGX_INVALID_FILE
;

542 
	}
}

547 
ngx_fd_t


548 
	$ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

549 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

551 
ngx_fd_t
 
fd
;

553 #i‡!(
NGX_HAVE_OPENAT
)

555 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

557 i‡(
fd
 =
NGX_INVALID_FILE
) {

558 
of
->
îr
 = 
ngx_î∫o
;

559 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

560  
NGX_INVALID_FILE
;

563  
fd
;

567 
u_ch¨
 *
p
, *
˝
, *
íd
;

568 
ngx_fd_t
 
©_fd
;

569 
ngx_°r_t
 
©_«me
;

571 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

572 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

574 i‡(
fd
 =
NGX_INVALID_FILE
) {

575 
of
->
îr
 = 
ngx_î∫o
;

576 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

577  
NGX_INVALID_FILE
;

580  
fd
;

583 
p
 = 
«me
->
d©a
;

584 
íd
 = 
p
 + 
«me
->
Àn
;

586 
©_«me
 = *
«me
;

588 i‡(
of
->
dißbÀ_symlöks_‰om
) {

590 
˝
 = 
p
 + 
of
->
dißbÀ_symlöks_‰om
;

592 *
˝
 = '\0';

594 
©_fd
 = 
	`ngx_›í_fûe
(
p
, 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

595 
NGX_FILE_OPEN
, 0);

597 *
˝
 = '/';

599 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

600 
of
->
îr
 = 
ngx_î∫o
;

601 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

602  
NGX_INVALID_FILE
;

605 
©_«me
.
Àn
 = 
of
->
dißbÀ_symlöks_‰om
;

606 
p
 = 
˝
 + 1;

608 } i‡(*
p
 == '/') {

610 
©_fd
 = 
	`ngx_›í_fûe
("/",

611 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

612 
NGX_FILE_OPEN
, 0);

614 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

615 
of
->
îr
 = 
ngx_î∫o
;

616 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

617  
NGX_INVALID_FILE
;

620 
©_«me
.
Àn
 = 1;

621 
p
++;

624 
©_fd
 = 
NGX_AT_FDCWD
;

628 
˝
 = 
	`ngx_°æchr
(
p
, 
íd
, '/');

629 i‡(
˝
 =
NULL
) {

633 i‡(
˝
 =
p
) {

634 
p
++;

638 *
˝
 = '\0';

640 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER
) {

641 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
,

642 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

643 
NGX_FILE_OPEN
, 0, 
log
);

646 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
,

647 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
|
NGX_FILE_NOFOLLOW
,

648 
NGX_FILE_OPEN
, 0);

651 *
˝
 = '/';

653 i‡(
fd
 =
NGX_INVALID_FILE
) {

654 
of
->
îr
 = 
ngx_î∫o
;

655 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

656 
Áûed
;

659 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

660 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

661 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

664 
p
 = 
˝
 + 1;

665 
©_fd
 = 
fd
;

666 
©_«me
.
Àn
 = 
˝
 -át_«me.
d©a
;

669 i‡(
p
 =
íd
) {

682 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, ".", 
mode
, 
¸óã
, 
ac˚ss
);

683 
d⁄e
;

686 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER


687 && !(
¸óã
 & (
NGX_FILE_CREATE_OR_OPEN
|
NGX_FILE_TRUNCATE
)))

689 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
, 
mode
, 
¸óã
, 
ac˚ss
, 
log
);

692 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
, 
mode
|
NGX_FILE_NOFOLLOW
, 
¸óã
, 
ac˚ss
);

695 
d⁄e
:

697 i‡(
fd
 =
NGX_INVALID_FILE
) {

698 
of
->
îr
 = 
ngx_î∫o
;

699 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

702 
Áûed
:

704 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

705 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

706 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

709  
fd
;

711 
	}
}

714 
ngx_öt_t


715 
	$ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

716 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

718 
ngx_öt_t
 
rc
;

720 #i‡!(
NGX_HAVE_OPENAT
)

722 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

724 i‡(
rc
 =
NGX_FILE_ERROR
) {

725 
of
->
îr
 = 
ngx_î∫o
;

726 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

727  
NGX_FILE_ERROR
;

730  
rc
;

734 
ngx_fd_t
 
fd
;

736 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

738 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

740 i‡(
rc
 =
NGX_FILE_ERROR
) {

741 
of
->
îr
 = 
ngx_î∫o
;

742 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

743  
NGX_FILE_ERROR
;

746  
rc
;

749 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

750 
NGX_FILE_OPEN
, 0, 
log
);

752 i‡(
fd
 =
NGX_INVALID_FILE
) {

753  
NGX_FILE_ERROR
;

756 
rc
 = 
	`ngx_fd_öfo
(
fd
, 
fi
);

758 i‡(
rc
 =
NGX_FILE_ERROR
) {

759 
of
->
îr
 = 
ngx_î∫o
;

760 
of
->
Áûed
 = 
ngx_fd_öfo_n
;

763 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

764 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

765 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

768  
rc
;

770 
	}
}

773 
ngx_öt_t


774 
	$ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

775 
ngx_log_t
 *
log
)

777 
ngx_fd_t
 
fd
;

778 
ngx_fûe_öfo_t
 
fi
;

780 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

782 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

783 
of
->
fd
 = 
NGX_INVALID_FILE
;

784  
NGX_ERROR
;

787 i‡(
of
->
uniq
 =
	`ngx_fûe_uniq
(&
fi
)) {

788 
d⁄e
;

791 } i‡(
of
->
ã°_dú
) {

793 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

794 
of
->
fd
 = 
NGX_INVALID_FILE
;

795  
NGX_ERROR
;

798 i‡(
	`ngx_is_dú
(&
fi
)) {

799 
d⁄e
;

803 i‡(!
of
->
log
) {

810 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

811 
NGX_FILE_OPEN
, 0, 
log
);

814 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_APPEND
,

815 
NGX_FILE_CREATE_OR_OPEN
,

816 
NGX_FILE_DEFAULT_ACCESS
, 
log
);

819 i‡(
fd
 =
NGX_INVALID_FILE
) {

820 
of
->
fd
 = 
NGX_INVALID_FILE
;

821  
NGX_ERROR
;

824 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

825 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 
ngx_î∫o
,

826 
ngx_fd_öfo_n
 " \"%V\" faûed", 
«me
);

828 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

829 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

830 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

833 
of
->
fd
 = 
NGX_INVALID_FILE
;

835  
NGX_ERROR
;

838 i‡(
	`ngx_is_dú
(&
fi
)) {

839 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

840 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

841 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

844 
of
->
fd
 = 
NGX_INVALID_FILE
;

847 
of
->
fd
 = fd;

849 i‡(
of
->
ªad_ahód
 && 
	`ngx_fûe_size
(&
fi
Ë> 
NGX_MIN_READ_AHEAD
) {

850 i‡(
	`ngx_ªad_ahód
(
fd
, 
of
->
ªad_ahód
Ë=
NGX_ERROR
) {

851 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

852 
ngx_ªad_ahód_n
 " \"%V\" faûed", 
«me
);

856 i‡(
of
->
dúe˘io
 <
	`ngx_fûe_size
(&
fi
)) {

857 i‡(
	`ngx_dúe˘io_⁄
(
fd
Ë=
NGX_FILE_ERROR
) {

858 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

859 
ngx_dúe˘io_⁄_n
 " \"%V\" faûed", 
«me
);

862 
of
->
is_dúe˘io
 = 1;

867 
d⁄e
:

869 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

870 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

871 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

872 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

873 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

874 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

875 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

876 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

878  
NGX_OK
;

879 
	}
}

888 
	$ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

889 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
)

891 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

893 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_VNODE_EVENT
)

894 || !
of
->
evíts


895 || 
fûe
->
evít


896 || 
of
->
fd
 =
NGX_INVALID_FILE


897 || 
fûe
->
u£s
 < 
of
->
mö_u£s
)

902 
fûe
->
u£_evít
 = 0;

904 
fûe
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
log
);

905 i‡(
fûe
->
evít
=
NULL
) {

909 
„v
 = 
	`ngx_Æloc
((
ngx_›í_fûe_ˇche_evít_t
), 
log
);

910 i‡(
„v
 =
NULL
) {

911 
	`ngx_‰ì
(
fûe
->
evít
);

912 
fûe
->
evít
 = 
NULL
;

916 
„v
->
fd
 = 
of
->fd;

917 
„v
->
fûe
 = file;

918 
„v
->
ˇche
 = cache;

920 
fûe
->
evít
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_ªmove
;

921 
fûe
->
evít
->
d©a
 = 
„v
;

929 
fûe
->
evít
->
log
 = 
ngx_cy˛e
->log;

931 i‡(
	`ngx_add_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
, 
NGX_ONESHOT_EVENT
)

932 !
NGX_OK
)

934 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

935 
	`ngx_‰ì
(
fûe
->
evít
);

936 
fûe
->
evít
 = 
NULL
;

948 
	}
}

952 
	$ngx_›í_fûe_˛ónup
(*
d©a
)

954 
ngx_›í_fûe_ˇche_˛ónup_t
 *
c
 = 
d©a
;

956 
c
->
fûe
->
cou¡
--;

958 
	`ngx_˛o£_ˇched_fûe
(
c
->
ˇche
, c->
fûe
, c->
mö_u£s
, c->
log
);

961 
	`ngx_expúe_ﬁd_ˇched_fûes
(
c
->
ˇche
, 1, c->
log
);

962 
	}
}

966 
	$ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

967 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
)

969 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

971 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
u£s
, fûe->
˛o£
);

973 i‡(!
fûe
->
˛o£
) {

975 
fûe
->
ac˚s£d
 = 
	`ngx_time
();

977 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

979 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

981 i‡(
fûe
->
u£s
 >
mö_u£s
 || fûe->
cou¡
) {

986 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

988 i‡(
fûe
->
cou¡
) {

992 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

994 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

995 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

996 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
);

999 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

1002 i‡(!
fûe
->
˛o£
) {

1006 
	`ngx_‰ì
(
fûe
->
«me
);

1007 
	`ngx_‰ì
(
fûe
);

1008 
	}
}

1012 
	$ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
)

1014 i‡(
fûe
->
evít
 =
NULL
) {

1018 (Ë
	`ngx_dñ_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
,

1019 
fûe
->
cou¡
 ? 
NGX_FLUSH_EVENT
 : 
NGX_CLOSE_EVENT
);

1021 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1022 
	`ngx_‰ì
(
fûe
->
evít
);

1023 
fûe
->
evít
 = 
NULL
;

1024 
fûe
->
u£_evít
 = 0;

1025 
	}
}

1029 
	$ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_uöt_t
 
n
,

1030 
ngx_log_t
 *
log
)

1032 
time_t
 
now
;

1033 
ngx_queue_t
 *
q
;

1034 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1036 
now
 = 
	`ngx_time
();

1044 
n
 < 3) {

1046 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

1050 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

1052 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

1054 i‡(
n
++ !0 && 
now
 - 
fûe
->
ac˚s£d
 <
ˇche
->
öa˘ive
) {

1058 
	`ngx_queue_ªmove
(
q
);

1060 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

1062 
ˇche
->
cuºít
--;

1064 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1065 "expúêˇched o≥¿fûe: %s", 
fûe
->
«me
);

1067 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

1068 
fûe
->
˛o£
 = 1;

1069 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
log
);

1072 
	`ngx_‰ì
(
fûe
->
«me
);

1073 
	`ngx_‰ì
(
fûe
);

1076 
	}
}

1080 
	$ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1081 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1083 
ngx_rbåì_node_t
 **
p
;

1084 
ngx_ˇched_›í_fûe_t
 *
fûe
, *
fûe_ãmp
;

1088 i‡(
node
->
key
 < 
ãmp
->key) {

1090 
p
 = &
ãmp
->
À·
;

1092 } i‡(
node
->
key
 > 
ãmp
->key) {

1094 
p
 = &
ãmp
->
right
;

1098 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1099 
fûe_ãmp
 = (
ngx_ˇched_›í_fûe_t
 *Ë
ãmp
;

1101 
p
 = (
	`ngx_°rcmp
(
fûe
->
«me
, 
fûe_ãmp
->name) < 0)

1102 ? &
ãmp
->
À·
 : &ãmp->
right
;

1105 i‡(*
p
 =
£¡öñ
) {

1109 
ãmp
 = *
p
;

1112 *
p
 = 
node
;

1113 
node
->
∑ª¡
 = 
ãmp
;

1114 
node
->
À·
 = 
£¡öñ
;

1115 
node
->
right
 = 
£¡öñ
;

1116 
	`ngx_rbt_ªd
(
node
);

1117 
	}
}

1120 
ngx_ˇched_›í_fûe_t
 *

1121 
	$ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

1122 
uöt32_t
 
hash
)

1124 
ngx_öt_t
 
rc
;

1125 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1126 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1128 
node
 = 
ˇche
->
rbåì
.
roŸ
;

1129 
£¡öñ
 = 
ˇche
->
rbåì
.sentinel;

1131 
node
 !
£¡öñ
) {

1133 i‡(
hash
 < 
node
->
key
) {

1134 
node
 =Çode->
À·
;

1138 i‡(
hash
 > 
node
->
key
) {

1139 
node
 =Çode->
right
;

1145 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1147 
rc
 = 
	`ngx_°rcmp
(
«me
->
d©a
, 
fûe
->name);

1149 i‡(
rc
 == 0) {

1150  
fûe
;

1153 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1156  
NULL
;

1157 
	}
}

1161 
	$ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
)

1163 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1164 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

1166 
„v
 = 
ev
->
d©a
;

1167 
fûe
 = 
„v
->file;

1169 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1171 
	`ngx_rbåì_dñëe
(&
„v
->
ˇche
->
rbåì
, &
fûe
->
node
);

1173 
„v
->
ˇche
->
cuºít
--;

1176 
fûe
->
evít
 = 
NULL
;

1177 
fûe
->
u£_evít
 = 0;

1179 
fûe
->
˛o£
 = 1;

1181 
	`ngx_˛o£_ˇched_fûe
(
„v
->
ˇche
, 
fûe
, 0, 
ev
->
log
);

1185 
	`ngx_‰ì
(
ev
->
d©a
);

1186 
	`ngx_‰ì
(
ev
);

1187 
	}
}

	@src/core/ngx_open_file_cache.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_OPEN_FILE_CACHE_H_INCLUDED_


13 
	#_NGX_OPEN_FILE_CACHE_H_INCLUDED_


	)

16 
	#NGX_OPEN_FILE_DIRECTIO_OFF
 
NGX_MAX_OFF_T_VALUE


	)

20 
ngx_fd_t
 
	mfd
;

21 
ngx_fûe_uniq_t
 
	muniq
;

22 
time_t
 
	mmtime
;

23 
off_t
 
	msize
;

24 
off_t
 
	mfs_size
;

25 
off_t
 
	mdúe˘io
;

26 
size_t
 
	mªad_ahód
;

28 
ngx_îr_t
 
	mîr
;

29 *
	mÁûed
;

31 
time_t
 
	mvÆid
;

33 
ngx_uöt_t
 
	mmö_u£s
;

35 #i‡(
NGX_HAVE_OPENAT
)

36 
size_t
 
	mdißbÀ_symlöks_‰om
;

37 
	mdißbÀ_symlöks
:2;

40 
	mã°_dú
:1;

41 
	mã°_⁄ly
:1;

42 
	mlog
:1;

43 
	mîr‹s
:1;

44 
	mevíts
:1;

46 
	mis_dú
:1;

47 
	mis_fûe
:1;

48 
	mis_lök
:1;

49 
	mis_exec
:1;

50 
	mis_dúe˘io
:1;

51 } 
	tngx_›í_fûe_öfo_t
;

54 
ngx_ˇched_›í_fûe_s
 
	tngx_ˇched_›í_fûe_t
;

56 
	sngx_ˇched_›í_fûe_s
 {

57 
ngx_rbåì_node_t
 
	mnode
;

58 
ngx_queue_t
 
	mqueue
;

60 
u_ch¨
 *
	m«me
;

61 
time_t
 
	m¸óãd
;

62 
time_t
 
	mac˚s£d
;

64 
ngx_fd_t
 
	mfd
;

65 
ngx_fûe_uniq_t
 
	muniq
;

66 
time_t
 
	mmtime
;

67 
off_t
 
	msize
;

68 
ngx_îr_t
 
	mîr
;

70 
uöt32_t
 
	mu£s
;

72 #i‡(
NGX_HAVE_OPENAT
)

73 
size_t
 
	mdißbÀ_symlöks_‰om
;

74 
	mdißbÀ_symlöks
:2;

77 
	mcou¡
:24;

78 
	m˛o£
:1;

79 
	mu£_evít
:1;

81 
	mis_dú
:1;

82 
	mis_fûe
:1;

83 
	mis_lök
:1;

84 
	mis_exec
:1;

85 
	mis_dúe˘io
:1;

87 
ngx_evít_t
 *
	mevít
;

92 
ngx_rbåì_t
 
	mrbåì
;

93 
ngx_rbåì_node_t
 
	m£¡öñ
;

94 
ngx_queue_t
 
	mexpúe_queue
;

96 
ngx_uöt_t
 
	mcuºít
;

97 
ngx_uöt_t
 
	mmax
;

98 
time_t
 
	möa˘ive
;

99 } 
	tngx_›í_fûe_ˇche_t
;

103 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

104 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

105 
ngx_uöt_t
 
	mmö_u£s
;

106 
ngx_log_t
 *
	mlog
;

107 } 
	tngx_›í_fûe_ˇche_˛ónup_t
;

113 *
	md©a
;

114 
ngx_evít_t
 *
	mªad
;

115 
ngx_evít_t
 *
	mwrôe
;

116 
ngx_fd_t
 
	mfd
;

118 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

119 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

120 } 
	tngx_›í_fûe_ˇche_evít_t
;

123 
ngx_›í_fûe_ˇche_t
 *
ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
,

124 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
);

125 
ngx_öt_t
 
ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

126 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
);

	@src/core/ngx_output_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
	#NGX_SENDFILE_LIMIT
 4096

	)

27 
	#NGX_NONE
 1

	)

30 
ngx_ölöe
 
ngx_öt_t


31 
ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
);

32 
ngx_öt_t
 
ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
,

33 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
);

34 
ngx_öt_t
 
ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

35 
off_t
 
bsize
);

36 
ngx_öt_t
 
ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

37 
off_t
 
bsize
);

38 
ngx_öt_t
 
ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
);

41 
ngx_öt_t


42 
	$ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

44 
off_t
 
bsize
;

45 
ngx_öt_t
 
rc
, 
œ°
;

46 
ngx_chaö_t
 *
˛
, *
out
, **
œ°_out
;

48 i‡(
˘x
->
ö
 =
NULL
 && ctx->
busy
 == NULL) {

56 i‡(
ö
 =
NULL
) {

57  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

60 i‡(
ö
->
√xt
 =
NULL


61 #i‡(
NGX_SENDFILE_LIMIT
)

62 && !(
ö
->
buf
->
ö_fûe
 && in->buf->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

64 && 
	`ngx_ouçut_chaö_as_is
(
˘x
, 
ö
->
buf
))

66  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

72 i‡(
ö
) {

73 i‡(
	`ngx_ouçut_chaö_add_c›y
(
˘x
->
poﬁ
, &˘x->
ö
, inË=
NGX_ERROR
) {

74  
NGX_ERROR
;

78 
out
 = 
NULL
;

79 
œ°_out
 = &
out
;

80 
œ°
 = 
NGX_NONE
;

84 #i‡(
NGX_HAVE_FILE_AIO
)

85 i‡(
˘x
->
aio
) {

86  
NGX_AGAIN
;

90 
˘x
->
ö
) {

97 
bsize
 = 
	`ngx_buf_size
(
˘x
->
ö
->
buf
);

99 i‡(
bsize
 =0 && !
	`ngx_buf_•ecül
(
˘x
->
ö
->
buf
)) {

101 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

104 
˘x
->
ö
->
buf
->
ãmp‹¨y
,

105 
˘x
->
ö
->
buf
->
ªcy˛ed
,

106 
˘x
->
ö
->
buf
->
ö_fûe
,

107 
˘x
->
ö
->
buf
->
°¨t
,

108 
˘x
->
ö
->
buf
->
pos
,

109 
˘x
->
ö
->
buf
->
œ°
,

110 
˘x
->
ö
->
buf
->
fûe
,

111 
˘x
->
ö
->
buf
->
fûe_pos
,

112 
˘x
->
ö
->
buf
->
fûe_œ°
);

114 
	`ngx_debug_poöt
();

116 
˘x
->
ö
 = ctx->ö->
√xt
;

121 i‡(
	`ngx_ouçut_chaö_as_is
(
˘x
, ctx->
ö
->
buf
)) {

125 
˛
 = 
˘x
->
ö
;

126 
˘x
->
ö
 = 
˛
->
√xt
;

128 *
œ°_out
 = 
˛
;

129 
œ°_out
 = &
˛
->
√xt
;

130 
˛
->
√xt
 = 
NULL
;

135 i‡(
˘x
->
buf
 =
NULL
) {

137 
rc
 = 
	`ngx_ouçut_chaö_Æign_fûe_buf
(
˘x
, 
bsize
);

139 i‡(
rc
 =
NGX_ERROR
) {

140  
NGX_ERROR
;

143 i‡(
rc
 !
NGX_OK
) {

145 i‡(
˘x
->
‰ì
) {

149 
˛
 = 
˘x
->
‰ì
;

150 
˘x
->
buf
 = 
˛
->buf;

151 
˘x
->
‰ì
 = 
˛
->
√xt
;

153 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
˛
);

155 } i‡(
out
 || 
˘x
->
Æloˇãd
 =˘x->
bufs
.
num
) {

159 } i‡(
	`ngx_ouçut_chaö_gë_buf
(
˘x
, 
bsize
Ë!
NGX_OK
) {

160  
NGX_ERROR
;

165 
rc
 = 
	`ngx_ouçut_chaö_c›y_buf
(
˘x
);

167 i‡(
rc
 =
NGX_ERROR
) {

168  
rc
;

171 i‡(
rc
 =
NGX_AGAIN
) {

172 i‡(
out
) {

176  
rc
;

181 i‡(
	`ngx_buf_size
(
˘x
->
ö
->
buf
) == 0) {

182 
˘x
->
ö
 = ctx->ö->
√xt
;

185 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

186 i‡(
˛
 =
NULL
) {

187  
NGX_ERROR
;

190 
˛
->
buf
 = 
˘x
->buf;

191 
˛
->
√xt
 = 
NULL
;

192 *
œ°_out
 = 
˛
;

193 
œ°_out
 = &
˛
->
√xt
;

194 
˘x
->
buf
 = 
NULL
;

197 i‡(
out
 =
NULL
 && 
œ°
 !
NGX_NONE
) {

199 i‡(
˘x
->
ö
) {

200  
NGX_AGAIN
;

203  
œ°
;

206 
œ°
 = 
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
out
);

208 i‡(
œ°
 =
NGX_ERROR
 ||Üa° =
NGX_DONE
) {

209  
œ°
;

212 
	`ngx_chaö_upd©e_chaös
(
˘x
->
poﬁ
, &˘x->
‰ì
, &˘x->
busy
, &
out
,

213 
˘x
->
èg
);

214 
œ°_out
 = &
out
;

216 
	}
}

219 
ngx_ölöe
 
ngx_öt_t


220 
	$ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
)

222 
ngx_uöt_t
 
£ndfûe
;

224 i‡(
	`ngx_buf_•ecül
(
buf
)) {

228 i‡(
buf
->
ö_fûe
 && buf->
fûe
->
dúe˘io
) {

232 
£ndfûe
 = 
˘x
->sendfile;

234 #i‡(
NGX_SENDFILE_LIMIT
)

236 i‡(
buf
->
ö_fûe
 && buf->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

237 
£ndfûe
 = 0;

242 i‡(!
£ndfûe
) {

244 i‡(!
	`ngx_buf_ö_mem‹y
(
buf
)) {

248 
buf
->
ö_fûe
 = 0;

251 i‡(
˘x
->
√ed_ö_mem‹y
 && !
	`ngx_buf_ö_mem‹y
(
buf
)) {

255 i‡(
˘x
->
√ed_ö_ãmp
 && (
buf
->
mem‹y
 || buf->
mm≠
)) {

260 
	}
}

263 
ngx_öt_t


264 
	$ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

265 
ngx_chaö_t
 *
ö
)

267 
ngx_chaö_t
 *
˛
, **
Œ
;

268 #i‡(
NGX_SENDFILE_LIMIT
)

269 
ngx_buf_t
 *
b
, *
buf
;

272 
Œ
 = 
chaö
;

274 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

275 
Œ
 = &
˛
->
√xt
;

278 
ö
) {

280 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

281 i‡(
˛
 =
NULL
) {

282  
NGX_ERROR
;

285 #i‡(
NGX_SENDFILE_LIMIT
)

287 
buf
 = 
ö
->buf;

289 i‡(
buf
->
ö_fûe


290 && 
buf
->
fûe_pos
 < 
NGX_SENDFILE_LIMIT


291 && 
buf
->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

295 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

296 i‡(
b
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

302 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

303 
buf
->
pos
 +(
ssize_t
Ë(
NGX_SENDFILE_LIMIT
 - buf->
fûe_pos
);

304 
b
->
œ°
 = 
buf
->
pos
;

307 
buf
->
fûe_pos
 = 
NGX_SENDFILE_LIMIT
;

308 
b
->
fûe_œ°
 = 
NGX_SENDFILE_LIMIT
;

310 
˛
->
buf
 = 
b
;

313 
˛
->
buf
 = buf;

314 
ö
 = in->
√xt
;

318 
˛
->
buf
 = 
ö
->buf;

319 
ö
 = in->
√xt
;

323 
˛
->
√xt
 = 
NULL
;

324 *
Œ
 = 
˛
;

325 
Œ
 = &
˛
->
√xt
;

328  
NGX_OK
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

335 
size_t
 
size
;

336 
ngx_buf_t
 *
ö
;

338 
ö
 = 
˘x
->ö->
buf
;

340 i‡(
ö
->
fûe
 =
NULL
 || !ö->fûe->
dúe˘io
) {

341  
NGX_DECLINED
;

344 
˘x
->
dúe˘io
 = 1;

346 
size
 = (
size_t
Ë(
ö
->
fûe_pos
 - (ö->fûe_po†& ~(
˘x
->
Æignmít
 - 1)));

348 i‡(
size
 == 0) {

350 i‡(
bsize
 >(
off_t
Ë
˘x
->
bufs
.
size
) {

351  
NGX_DECLINED
;

354 
size
 = (
size_t
Ë
bsize
;

357 
size
 = (
size_t
Ë
˘x
->
Æignmít
 - size;

359 i‡((
off_t
Ë
size
 > 
bsize
) {

360 
size
 = (
size_t
Ë
bsize
;

364 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 
size
);

365 i‡(
˘x
->
buf
 =
NULL
) {

366  
NGX_ERROR
;

374 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

375 
˘x
->
u«lig√d
 = 1;

378  
NGX_OK
;

379 
	}
}

382 
ngx_öt_t


383 
	$ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

385 
size_t
 
size
;

386 
ngx_buf_t
 *
b
, *
ö
;

387 
ngx_uöt_t
 
ªcy˛ed
;

389 
ö
 = 
˘x
->ö->
buf
;

390 
size
 = 
˘x
->
bufs
.size;

391 
ªcy˛ed
 = 1;

393 i‡(
ö
->
œ°_ö_chaö
) {

395 i‡(
bsize
 < (
off_t
Ë
size
) {

402 
size
 = (
size_t
Ë
bsize
;

403 
ªcy˛ed
 = 0;

405 } i‡(!
˘x
->
dúe˘io


406 && 
˘x
->
bufs
.
num
 == 1

407 && (
bsize
 < (
off_t
Ë(
size
 + size / 4)))

415 
size
 = (
size_t
Ë
bsize
;

416 
ªcy˛ed
 = 0;

420 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
poﬁ
);

421 i‡(
b
 =
NULL
) {

422  
NGX_ERROR
;

425 i‡(
˘x
->
dúe˘io
) {

432 
b
->
°¨t
 = 
	`ngx_pmemÆign
(
˘x
->
poﬁ
, 
size
, (
size_t
Ë˘x->
Æignmít
);

433 i‡(
b
->
°¨t
 =
NULL
) {

434  
NGX_ERROR
;

438 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

439 i‡(
b
->
°¨t
 =
NULL
) {

440  
NGX_ERROR
;

444 
b
->
pos
 = b->
°¨t
;

445 
b
->
œ°
 = b->
°¨t
;

446 
b
->
íd
 = b->
œ°
 + 
size
;

447 
b
->
ãmp‹¨y
 = 1;

448 
b
->
èg
 = 
˘x
->tag;

449 
b
->
ªcy˛ed
 =Ñecycled;

451 
˘x
->
buf
 = 
b
;

452 
˘x
->
Æloˇãd
++;

454  
NGX_OK
;

455 
	}
}

458 
ngx_öt_t


459 
	$ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
)

461 
off_t
 
size
;

462 
ssize_t
 
n
;

463 
ngx_buf_t
 *
§c
, *
d°
;

464 
ngx_uöt_t
 
£ndfûe
;

466 
§c
 = 
˘x
->
ö
->
buf
;

467 
d°
 = 
˘x
->
buf
;

469 
size
 = 
	`ngx_buf_size
(
§c
);

470 
size
 = 
	`ngx_mö
(size, 
d°
->
íd
 - d°->
pos
);

472 
£ndfûe
 = 
˘x
->£ndfûê& !˘x->
dúe˘io
;

474 #i‡(
NGX_SENDFILE_LIMIT
)

476 i‡(
§c
->
ö_fûe
 && src->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

477 
£ndfûe
 = 0;

482 i‡(
	`ngx_buf_ö_mem‹y
(
§c
)) {

483 
	`ngx_mem˝y
(
d°
->
pos
, 
§c
->pos, (
size_t
Ë
size
);

484 
§c
->
pos
 +(
size_t
Ë
size
;

485 
d°
->
œ°
 +(
size_t
Ë
size
;

487 i‡(
§c
->
ö_fûe
) {

489 i‡(
£ndfûe
) {

490 
d°
->
ö_fûe
 = 1;

491 
d°
->
fûe
 = 
§c
->file;

492 
d°
->
fûe_pos
 = 
§c
->file_pos;

493 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
size
;

496 
d°
->
ö_fûe
 = 0;

499 
§c
->
fûe_pos
 +
size
;

502 
d°
->
ö_fûe
 = 0;

505 i‡(
§c
->
pos
 =§c->
œ°
) {

506 
d°
->
Êush
 = 
§c
->flush;

507 
d°
->
œ°_buf
 = 
§c
->last_buf;

508 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

513 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

515 i‡(
˘x
->
u«lig√d
) {

516 i‡(
	`ngx_dúe˘io_off
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

518 
ngx_dúe˘io_off_n
 " \"%s\" failed",

519 
§c
->
fûe
->
«me
.
d©a
);

525 #i‡(
NGX_HAVE_FILE_AIO
)

527 i‡(
˘x
->
aio_h™dÀr
) {

528 
n
 = 
	`ngx_fûe_aio_ªad
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

529 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

530 i‡(
n
 =
NGX_AGAIN
) {

531 
˘x
->
	`aio_h™dÀr
(˘x, 
§c
->
fûe
);

532  
NGX_AGAIN
;

536 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

537 
§c
->
fûe_pos
);

541 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
, src->
fûe_pos
);

545 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

547 i‡(
˘x
->
u«lig√d
) {

548 
ngx_îr_t
 
îr
;

550 
îr
 = 
ngx_î∫o
;

552 i‡(
	`ngx_dúe˘io_⁄
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

553 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

554 
ngx_dúe˘io_⁄_n
 " \"%s\" failed",

555 
§c
->
fûe
->
«me
.
d©a
);

558 
	`ngx_£t_î∫o
(
îr
);

560 
˘x
->
u«lig√d
 = 0;

565 i‡(
n
 =
NGX_ERROR
) {

566  (
ngx_öt_t
Ë
n
;

569 i‡(
n
 !
size
) {

570 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

571 
ngx_ªad_fûe_n
 "Ñead only %z of %O from \"%s\"",

572 
n
, 
size
, 
§c
->
fûe
->
«me
.
d©a
);

573  
NGX_ERROR
;

576 
d°
->
œ°
 +
n
;

578 i‡(
£ndfûe
) {

579 
d°
->
ö_fûe
 = 1;

580 
d°
->
fûe
 = 
§c
->file;

581 
d°
->
fûe_pos
 = 
§c
->file_pos;

582 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
n
;

585 
d°
->
ö_fûe
 = 0;

588 
§c
->
fûe_pos
 +
n
;

590 i‡(
§c
->
fûe_pos
 =§c->
fûe_œ°
) {

591 
d°
->
Êush
 = 
§c
->flush;

592 
d°
->
œ°_buf
 = 
§c
->last_buf;

593 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

597  
NGX_OK
;

598 
	}
}

601 
ngx_öt_t


602 
	$ngx_chaö_wrôî
(*
d©a
, 
ngx_chaö_t
 *
ö
)

604 
ngx_chaö_wrôî_˘x_t
 *
˘x
 = 
d©a
;

606 
off_t
 
size
;

607 
ngx_chaö_t
 *
˛
;

608 
ngx_c⁄√˘i⁄_t
 *
c
;

610 
c
 = 
˘x
->
c⁄√˘i⁄
;

612 
size
 = 0; 
ö
; i¿ö->
√xt
) {

615 i‡(
	`ngx_buf_size
(
ö
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(in->buf)) {

616 
	`ngx_debug_poöt
();

620 
size
 +
	`ngx_buf_size
(
ö
->
buf
);

622 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

624 
ö
->
buf
->
Êush
, 
	`ngx_buf_size
(in->buf));

626 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

627 i‡(
˛
 =
NULL
) {

628  
NGX_ERROR
;

631 
˛
->
buf
 = 
ö
->buf;

632 
˛
->
√xt
 = 
NULL
;

633 *
˘x
->
œ°
 = 
˛
;

634 
˘x
->
œ°
 = &
˛
->
√xt
;

637 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

638 "chaö wrôî in: %p", 
˘x
->
out
);

640 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

643 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

644 
	`ngx_debug_poöt
();

649 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

652 i‡(
size
 =0 && !
c
->
buf„ªd
) {

653  
NGX_OK
;

656 
˘x
->
out
 = 
c
->
	`£nd_chaö
(c, ctx->out, ctx->
limô
);

658 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

659 "chaö wrôî out: %p", 
˘x
->
out
);

661 i‡(
˘x
->
out
 =
NGX_CHAIN_ERROR
) {

662  
NGX_ERROR
;

665 i‡(
˘x
->
out
 =
NULL
) {

666 
˘x
->
œ°
 = &˘x->
out
;

668 i‡(!
c
->
buf„ªd
) {

669  
NGX_OK
;

673  
NGX_AGAIN
;

674 
	}
}

	@src/core/ngx_palloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

13 *
ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

16 
ngx_poﬁ_t
 *

17 
	$ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
)

19 
ngx_poﬁ_t
 *
p
;

21 
p
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
size
, 
log
);

22 i‡(
p
 =
NULL
) {

23  
NULL
;

26 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

27 
p
->
d
.
íd
 = (
u_ch¨
 *Ë∞+ 
size
;

28 
p
->
d
.
√xt
 = 
NULL
;

29 
p
->
d
.
Áûed
 = 0;

31 
size
 = sizê- (
ngx_poﬁ_t
);

32 
p
->
max
 = (
size
 < 
NGX_MAX_ALLOC_FROM_POOL
) ? size : NGX_MAX_ALLOC_FROM_POOL;

34 
p
->
cuºít
 =Ö;

35 
p
->
chaö
 = 
NULL
;

36 
p
->
œrge
 = 
NULL
;

37 
p
->
˛ónup
 = 
NULL
;

38 
p
->
log
 =Üog;

40  
p
;

41 
	}
}

45 
	$ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

47 
ngx_poﬁ_t
 *
p
, *
n
;

48 
ngx_poﬁ_œrge_t
 *
l
;

49 
ngx_poﬁ_˛ónup_t
 *
c
;

51 
c
 = 
poﬁ
->
˛ónup
; c; c = c->
√xt
) {

52 i‡(
c
->
h™dÀr
) {

53 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

54 "ru¿˛ónup: %p", 
c
);

55 
c
->
	`h™dÀr
(c->
d©a
);

59 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

61 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0, "‰ì: %p", 
l
->
Æloc
);

63 i‡(
l
->
Æloc
) {

64 
	`ngx_‰ì
(
l
->
Æloc
);

68 #i‡(
NGX_DEBUG
)

75 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

76 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

77 "‰ì: %p, unu£d: %uz", 
p
,Ö->
d
.
íd
 -Ö->d.
œ°
);

79 i‡(
n
 =
NULL
) {

86 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

87 
	`ngx_‰ì
(
p
);

89 i‡(
n
 =
NULL
) {

93 
	}
}

97 
	$ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

99 
ngx_poﬁ_t
 *
p
;

100 
ngx_poﬁ_œrge_t
 *
l
;

102 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

103 i‡(
l
->
Æloc
) {

104 
	`ngx_‰ì
(
l
->
Æloc
);

108 
poﬁ
->
œrge
 = 
NULL
;

110 
p
 = 
poﬁ
;Ö;Ö =Ö->
d
.
√xt
) {

111 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

113 
	}
}

117 
	$ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

119 
u_ch¨
 *
m
;

120 
ngx_poﬁ_t
 *
p
;

122 i‡(
size
 <
poﬁ
->
max
) {

124 
p
 = 
poﬁ
->
cuºít
;

127 
m
 = 
	`ngx_Æign_±r
(
p
->
d
.
œ°
, 
NGX_ALIGNMENT
);

129 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

130 
p
->
d
.
œ°
 = 
m
 + 
size
;

132  
m
;

135 
p
 =Ö->
d
.
√xt
;

137 } 
p
);

139  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

142  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

143 
	}
}

147 
	$ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

149 
u_ch¨
 *
m
;

150 
ngx_poﬁ_t
 *
p
;

152 i‡(
size
 <
poﬁ
->
max
) {

154 
p
 = 
poﬁ
->
cuºít
;

157 
m
 = 
p
->
d
.
œ°
;

159 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

160 
p
->
d
.
œ°
 = 
m
 + 
size
;

162  
m
;

165 
p
 =Ö->
d
.
√xt
;

167 } 
p
);

169  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

172  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

173 
	}
}

177 
	$ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

179 
u_ch¨
 *
m
;

180 
size_t
 
psize
;

181 
ngx_poﬁ_t
 *
p
, *
√w
, *
cuºít
;

183 
psize
 = (
size_t
Ë(
poﬁ
->
d
.
íd
 - (
u_ch¨
 *)Öool);

185 
m
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
psize
, 
poﬁ
->
log
);

186 i‡(
m
 =
NULL
) {

187  
NULL
;

190 
√w
 = (
ngx_poﬁ_t
 *Ë
m
;

192 
√w
->
d
.
íd
 = 
m
 + 
psize
;

193 
√w
->
d
.
√xt
 = 
NULL
;

194 
√w
->
d
.
Áûed
 = 0;

196 
m
 +(
ngx_poﬁ_d©a_t
);

197 
m
 = 
	`ngx_Æign_±r
(m, 
NGX_ALIGNMENT
);

198 
√w
->
d
.
œ°
 = 
m
 + 
size
;

200 
cuºít
 = 
poﬁ
->current;

202 
p
 = 
cuºít
;Ö->
d
.
√xt
;Ö =Ö->d.next) {

203 i‡(
p
->
d
.
Áûed
++ > 4) {

204 
cuºít
 = 
p
->
d
.
√xt
;

208 
p
->
d
.
√xt
 = 
√w
;

210 
poﬁ
->
cuºít
 = cuºíà? cuºíà: 
√w
;

212  
m
;

213 
	}
}

217 
	$ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

219 *
p
;

220 
ngx_uöt_t
 
n
;

221 
ngx_poﬁ_œrge_t
 *
œrge
;

223 
p
 = 
	`ngx_Æloc
(
size
, 
poﬁ
->
log
);

224 i‡(
p
 =
NULL
) {

225  
NULL
;

228 
n
 = 0;

230 
œrge
 = 
poﬁ
->œrge;Ü¨ge;Ü¨gêœrge->
√xt
) {

231 i‡(
œrge
->
Æloc
 =
NULL
) {

232 
œrge
->
Æloc
 = 
p
;

233  
p
;

236 i‡(
n
++ > 3) {

241 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

242 i‡(
œrge
 =
NULL
) {

243 
	`ngx_‰ì
(
p
);

244  
NULL
;

247 
œrge
->
Æloc
 = 
p
;

248 
œrge
->
√xt
 = 
poﬁ
->large;

249 
poﬁ
->
œrge
 =Üarge;

251  
p
;

252 
	}
}

256 
	$ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
)

258 *
p
;

259 
ngx_poﬁ_œrge_t
 *
œrge
;

261 
p
 = 
	`ngx_memÆign
(
Æignmít
, 
size
, 
poﬁ
->
log
);

262 i‡(
p
 =
NULL
) {

263  
NULL
;

266 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

267 i‡(
œrge
 =
NULL
) {

268 
	`ngx_‰ì
(
p
);

269  
NULL
;

272 
œrge
->
Æloc
 = 
p
;

273 
œrge
->
√xt
 = 
poﬁ
->large;

274 
poﬁ
->
œrge
 =Üarge;

276  
p
;

277 
	}
}

280 
ngx_öt_t


281 
	$ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
)

283 
ngx_poﬁ_œrge_t
 *
l
;

285 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

286 i‡(
p
 =
l
->
Æloc
) {

287 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

288 "‰ì: %p", 
l
->
Æloc
);

289 
	`ngx_‰ì
(
l
->
Æloc
);

290 
l
->
Æloc
 = 
NULL
;

292  
NGX_OK
;

296  
NGX_DECLINED
;

297 
	}
}

301 
	$ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

303 *
p
;

305 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

306 i‡(
p
) {

307 
	`ngx_memzîo
(
p
, 
size
);

310  
p
;

311 
	}
}

314 
ngx_poﬁ_˛ónup_t
 *

315 
	$ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
)

317 
ngx_poﬁ_˛ónup_t
 *
c
;

319 
c
 = 
	`ngx_∑Œoc
(
p
, (
ngx_poﬁ_˛ónup_t
));

320 i‡(
c
 =
NULL
) {

321  
NULL
;

324 i‡(
size
) {

325 
c
->
d©a
 = 
	`ngx_∑Œoc
(
p
, 
size
);

326 i‡(
c
->
d©a
 =
NULL
) {

327  
NULL
;

331 
c
->
d©a
 = 
NULL
;

334 
c
->
h™dÀr
 = 
NULL
;

335 
c
->
√xt
 = 
p
->
˛ónup
;

337 
p
->
˛ónup
 = 
c
;

339 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
p
->
log
, 0, "add cÀ™up: %p", 
c
);

341  
c
;

342 
	}
}

346 
	$ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
)

348 
ngx_poﬁ_˛ónup_t
 *
c
;

349 
ngx_poﬁ_˛ónup_fûe_t
 *
cf
;

351 
c
 = 
p
->
˛ónup
; c; c = c->
√xt
) {

352 i‡(
c
->
h™dÀr
 =
ngx_poﬁ_˛ónup_fûe
) {

354 
cf
 = 
c
->
d©a
;

356 i‡(
cf
->
fd
 == fd) {

357 
c
->
	`h™dÀr
(
cf
);

358 
c
->
h™dÀr
 = 
NULL
;

363 
	}
}

367 
	$ngx_poﬁ_˛ónup_fûe
(*
d©a
)

369 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

371 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d",

372 
c
->
fd
);

374 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

376 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

378 
	}
}

382 
	$ngx_poﬁ_dñëe_fûe
(*
d©a
)

384 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

386 
ngx_îr_t
 
îr
;

388 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d %s",

389 
c
->
fd
, c->
«me
);

391 i‡(
	`ngx_dñëe_fûe
(
c
->
«me
Ë=
NGX_FILE_ERROR
) {

392 
îr
 = 
ngx_î∫o
;

394 i‡(
îr
 !
NGX_ENOENT
) {

395 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
îr
,

396 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

400 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

401 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

402 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

404 
	}
}

410 
	$ngx_gë_ˇched_block
(
size_t
 
size
)

412 *
p
;

413 
ngx_ˇched_block_¶Ÿ_t
 *
¶Ÿ
;

415 i‡(
ngx_cy˛e
->
ˇche
 =
NULL
) {

416  
NULL
;

419 
¶Ÿ
 = &
ngx_cy˛e
->
ˇche
[(
size
 + 
ngx_∑gesize
 - 1) /Çgx_pagesize];

421 
¶Ÿ
->
åõs
++;

423 i‡(
¶Ÿ
->
numbî
) {

424 
p
 = 
¶Ÿ
->
block
;

425 
¶Ÿ
->
block
 = slŸ->block->
√xt
;

426 
¶Ÿ
->
numbî
--;

427  
p
;

430  
NULL
;

431 
	}
}

	@src/core/ngx_palloc.h

8 #i‚de‡
_NGX_PALLOC_H_INCLUDED_


9 
	#_NGX_PALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

20 
	#NGX_MAX_ALLOC_FROM_POOL
 (
ngx_∑gesize
 - 1)

	)

22 
	#NGX_DEFAULT_POOL_SIZE
 (16 * 1024)

	)

24 
	#NGX_POOL_ALIGNMENT
 16

	)

25 
	#NGX_MIN_POOL_SIZE
 \

26 
	`ngx_Æign
(((
ngx_poﬁ_t
Ë+ 2 * (
ngx_poﬁ_œrge_t
)), \

27 
NGX_POOL_ALIGNMENT
)

	)

30 (*
	tngx_poﬁ_˛ónup_±
)(*
	td©a
);

32 
ngx_poﬁ_˛ónup_s
 
	tngx_poﬁ_˛ónup_t
;

34 
	sngx_poﬁ_˛ónup_s
 {

35 
ngx_poﬁ_˛ónup_±
 
h™dÀr
;

36 *
d©a
;

37 
ngx_poﬁ_˛ónup_t
 *
√xt
;

41 
ngx_poﬁ_œrge_s
 
	tngx_poﬁ_œrge_t
;

43 
	sngx_poﬁ_œrge_s
 {

44 
ngx_poﬁ_œrge_t
 *
√xt
;

45 *
Æloc
;

50 
u_ch¨
 *
œ°
;

51 
u_ch¨
 *
íd
;

52 
ngx_poﬁ_t
 *
√xt
;

53 
ngx_uöt_t
 
Áûed
;

54 } 
	tngx_poﬁ_d©a_t
;

57 
	sngx_poﬁ_s
 {

58 
ngx_poﬁ_d©a_t
 
d
;

59 
size_t
 
max
;

60 
ngx_poﬁ_t
 *
cuºít
;

61 
ngx_chaö_t
 *
chaö
;

62 
ngx_poﬁ_œrge_t
 *
œrge
;

63 
ngx_poﬁ_˛ónup_t
 *
˛ónup
;

64 
ngx_log_t
 *
log
;

69 
ngx_fd_t
 
fd
;

70 
u_ch¨
 *
«me
;

71 
ngx_log_t
 *
log
;

72 } 
	tngx_poﬁ_˛ónup_fûe_t
;

75 *
	`ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

76 *
	`ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

78 
ngx_poﬁ_t
 *
	`ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
);

79 
	`ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

80 
	`ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

82 *
	`ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

83 *
	`ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

84 *
	`ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

85 *
	`ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
);

86 
ngx_öt_t
 
	`ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
);

89 
ngx_poﬁ_˛ónup_t
 *
	`ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
);

90 
	`ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
);

91 
	`ngx_poﬁ_˛ónup_fûe
(*
d©a
);

92 
	`ngx_poﬁ_dñëe_fûe
(*
d©a
);

	@src/core/ngx_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ssize_t


13 
	$ngx_∑r£_size
(
ngx_°r_t
 *
löe
)

15 
u_ch¨
 
unô
;

16 
size_t
 
Àn
;

17 
ssize_t
 
size
;

18 
ngx_öt_t
 
sˇÀ
;

20 
Àn
 = 
löe
->len;

21 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

23 
unô
) {

26 
Àn
--;

27 
sˇÀ
 = 1024;

32 
Àn
--;

33 
sˇÀ
 = 1024 * 1024;

37 
sˇÀ
 = 1;

40 
size
 = 
	`ngx_©osz
(
löe
->
d©a
, 
Àn
);

41 i‡(
size
 =
NGX_ERROR
) {

42  
NGX_ERROR
;

45 
size
 *
sˇÀ
;

47  
size
;

48 
	}
}

51 
off_t


52 
	$ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
)

54 
u_ch¨
 
unô
;

55 
off_t
 
off£t
;

56 
size_t
 
Àn
;

57 
ngx_öt_t
 
sˇÀ
;

59 
Àn
 = 
löe
->len;

60 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

62 
unô
) {

65 
Àn
--;

66 
sˇÀ
 = 1024;

71 
Àn
--;

72 
sˇÀ
 = 1024 * 1024;

77 
Àn
--;

78 
sˇÀ
 = 1024 * 1024 * 1024;

82 
sˇÀ
 = 1;

85 
off£t
 = 
	`ngx_©oof
(
löe
->
d©a
, 
Àn
);

86 i‡(
off£t
 =
NGX_ERROR
) {

87  
NGX_ERROR
;

90 
off£t
 *
sˇÀ
;

92  
off£t
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
)

99 
u_ch¨
 *
p
, *
œ°
;

100 
ngx_öt_t
 
vÆue
, 
tŸÆ
, 
sˇÀ
;

101 
ngx_uöt_t
 
max
, 
vÆid
;

103 
°_°¨t
 = 0,

104 
°_yór
,

105 
°_m⁄th
,

106 
°_wìk
,

107 
°_day
,

108 
°_hour
,

109 
°_mö
,

110 
°_£c
,

111 
°_m£c
,

112 
°_œ°


113 } 
°ï
;

115 
vÆid
 = 0;

116 
vÆue
 = 0;

117 
tŸÆ
 = 0;

118 
°ï
 = 
is_£c
 ? 
°_°¨t
 : 
°_m⁄th
;

119 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

121 
p
 = 
löe
->
d©a
;

122 
œ°
 = 
p
 + 
löe
->
Àn
;

124 
p
 < 
œ°
) {

126 i‡(*
p
 >= '0' && *p <= '9') {

127 
vÆue
 = vÆuê* 10 + (*
p
++ - '0');

128 
vÆid
 = 1;

132 *
p
++) {

135 i‡(
°ï
 > 
°_°¨t
) {

136  
NGX_ERROR
;

138 
°ï
 = 
°_yór
;

139 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 365);

140 
sˇÀ
 = 60 * 60 * 24 * 365;

144 i‡(
°ï
 >
°_m⁄th
) {

145  
NGX_ERROR
;

147 
°ï
 = 
°_m⁄th
;

148 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 30);

149 
sˇÀ
 = 60 * 60 * 24 * 30;

153 i‡(
°ï
 >
°_wìk
) {

154  
NGX_ERROR
;

156 
°ï
 = 
°_wìk
;

157 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 7);

158 
sˇÀ
 = 60 * 60 * 24 * 7;

162 i‡(
°ï
 >
°_day
) {

163  
NGX_ERROR
;

165 
°ï
 = 
°_day
;

166 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24);

167 
sˇÀ
 = 60 * 60 * 24;

171 i‡(
°ï
 >
°_hour
) {

172  
NGX_ERROR
;

174 
°ï
 = 
°_hour
;

175 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60);

176 
sˇÀ
 = 60 * 60;

180 i‡(*
p
 == 's') {

181 i‡(
is_£c
 || 
°ï
 >
°_m£c
) {

182  
NGX_ERROR
;

184 
p
++;

185 
°ï
 = 
°_m£c
;

186 
max
 = 
NGX_MAX_INT32_VALUE
;

187 
sˇÀ
 = 1;

191 i‡(
°ï
 >
°_mö
) {

192  
NGX_ERROR
;

194 
°ï
 = 
°_mö
;

195 
max
 = 
NGX_MAX_INT32_VALUE
 / 60;

196 
sˇÀ
 = 60;

200 i‡(
°ï
 >
°_£c
) {

201  
NGX_ERROR
;

203 
°ï
 = 
°_£c
;

204 
max
 = 
NGX_MAX_INT32_VALUE
;

205 
sˇÀ
 = 1;

209 i‡(
°ï
 >
°_£c
) {

210  
NGX_ERROR
;

212 
°ï
 = 
°_œ°
;

213 
max
 = 
NGX_MAX_INT32_VALUE
;

214 
sˇÀ
 = 1;

218  
NGX_ERROR
;

221 i‡(
°ï
 !
°_m£c
 && !
is_£c
) {

222 
sˇÀ
 *= 1000;

223 
max
 /= 1000;

226 i‡((
ngx_uöt_t
Ë
vÆue
 > 
max
) {

227  
NGX_ERROR
;

230 
tŸÆ
 +
vÆue
 * 
sˇÀ
;

232 i‡((
ngx_uöt_t
Ë
tŸÆ
 > 
NGX_MAX_INT32_VALUE
) {

233  
NGX_ERROR
;

236 
vÆue
 = 0;

237 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

239 
p
 < 
œ°
 && *p == ' ') {

240 
p
++;

244 i‡(
vÆid
) {

245  
tŸÆ
 + 
vÆue
 * 
sˇÀ
;

248  
NGX_ERROR
;

249 
	}
}

	@src/core/ngx_parse.h

8 #i‚de‡
_NGX_PARSE_H_INCLUDED_


9 
	#_NGX_PARSE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ssize_t
 
ngx_∑r£_size
(
ngx_°r_t
 *
löe
);

17 
off_t
 
ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
);

18 
ngx_öt_t
 
ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
);

	@src/core/ngx_queue.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

17 
ngx_queue_t
 *

18 
	$ngx_queue_middÀ
(
ngx_queue_t
 *
queue
)

20 
ngx_queue_t
 *
middÀ
, *
√xt
;

22 
middÀ
 = 
	`ngx_queue_hód
(
queue
);

24 i‡(
middÀ
 =
	`ngx_queue_œ°
(
queue
)) {

25  
middÀ
;

28 
√xt
 = 
	`ngx_queue_hód
(
queue
);

31 
middÀ
 = 
	`ngx_queue_√xt
(middle);

33 
√xt
 = 
	`ngx_queue_√xt
(next);

35 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

36  
middÀ
;

39 
√xt
 = 
	`ngx_queue_√xt
(next);

41 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

42  
middÀ
;

45 
	}
}

51 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

52 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *))

54 
ngx_queue_t
 *
q
, *
¥ev
, *
√xt
;

56 
q
 = 
	`ngx_queue_hód
(
queue
);

58 i‡(
q
 =
	`ngx_queue_œ°
(
queue
)) {

62 
q
 = 
	`ngx_queue_√xt
(q); q !
	`ngx_queue_£¡öñ
(
queue
); q = 
√xt
) {

64 
¥ev
 = 
	`ngx_queue_¥ev
(
q
);

65 
√xt
 = 
	`ngx_queue_√xt
(
q
);

67 
	`ngx_queue_ªmove
(
q
);

70 i‡(
	`cmp
(
¥ev
, 
q
) <= 0) {

74 
¥ev
 = 
	`ngx_queue_¥ev
(prev);

76 } 
¥ev
 !
	`ngx_queue_£¡öñ
(
queue
));

78 
	`ngx_queue_ö£π_a·î
(
¥ev
, 
q
);

80 
	}
}

	@src/core/ngx_queue.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_QUEUE_H_INCLUDED_


13 
	#_NGX_QUEUE_H_INCLUDED_


	)

16 
ngx_queue_s
 
	tngx_queue_t
;

18 
	sngx_queue_s
 {

19 
ngx_queue_t
 *
	m¥ev
;

20 
ngx_queue_t
 *
	m√xt
;

24 
	#ngx_queue_öô
(
q
) \

25 (
q
)->
¥ev
 = q; \

26 (
q
)->
√xt
 = 
	)
q

29 
	#ngx_queue_em±y
(
h
) \

30 (
h
 =(h)->
¥ev
)

	)

33 
	#ngx_queue_ö£π_hód
(
h
, 
x
) \

34 (
x
)->
√xt
 = (
h
)->next; \

35 (
x
)->
√xt
->
¥ev
 = x; \

36 (
x
)->
¥ev
 = 
h
; \

37 (
h
)->
√xt
 = 
x


	)

40 
	#ngx_queue_ö£π_a·î
 
ngx_queue_ö£π_hód


	)

43 
	#ngx_queue_ö£π_èû
(
h
, 
x
) \

44 (
x
)->
¥ev
 = (
h
)->prev; \

45 (
x
)->
¥ev
->
√xt
 = x; \

46 (
x
)->
√xt
 = 
h
; \

47 (
h
)->
¥ev
 = 
x


	)

50 
	#ngx_queue_hód
(
h
) \

51 (
h
)->
√xt


	)

54 
	#ngx_queue_œ°
(
h
) \

55 (
h
)->
¥ev


	)

58 
	#ngx_queue_£¡öñ
(
h
) \

59 (
h
)

	)

62 
	#ngx_queue_√xt
(
q
) \

63 (
q
)->
√xt


	)

66 
	#ngx_queue_¥ev
(
q
) \

67 (
q
)->
¥ev


	)

70 #i‡(
NGX_DEBUG
)

72 
	#ngx_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->next; \

75 (
x
)->
¥ev
 = 
NULL
; \

76 (
x
)->
√xt
 = 
NULL


	)

80 
	#ngx_queue_ªmove
(
x
) \

81 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

82 (
x
)->
¥ev
->
√xt
 = (x)->
	)
next

87 
	#ngx_queue_•lô
(
h
, 
q
, 
n
) \

88 (
n
)->
¥ev
 = (
h
)->prev; \

89 (
n
)->
¥ev
->
√xt
 =Ç; \

90 (
n
)->
√xt
 = 
q
; \

91 (
h
)->
¥ev
 = (
q
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h; \

93 (
q
)->
¥ev
 = 
n
;

	)

96 
	#ngx_queue_add
(
h
, 
n
) \

97 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

98 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

99 (
h
)->
¥ev
 = (
n
)->prev; \

100 (
h
)->
¥ev
->
√xt
 = h;

	)

103 
	#ngx_queue_d©a
(
q
, 
ty≥
, 
lök
) \

104 (
ty≥
 *Ë((
u_ch¨
 *Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

107 
ngx_queue_t
 *
ngx_queue_middÀ
“gx_queue_à*
queue
);

108 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

109 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *));

	@src/core/ngx_radix_tree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_ødix_node_t
 *
ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
);

15 
ngx_ødix_åì_t
 *

16 
	$ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_öt_t
 
¥óŒoˇã
)

18 
uöt32_t
 
key
, 
mask
, 
öc
;

19 
ngx_ødix_åì_t
 *
åì
;

21 
åì
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_ødix_åì_t
));

22 i‡(
åì
 =
NULL
) {

23  
NULL
;

26 
åì
->
poﬁ
 =Öool;

27 
åì
->
‰ì
 = 
NULL
;

28 
åì
->
°¨t
 = 
NULL
;

29 
åì
->
size
 = 0;

31 
åì
->
roŸ
 = 
	`ngx_ødix_Æloc
(tree);

32 i‡(
åì
->
roŸ
 =
NULL
) {

33  
NULL
;

36 
åì
->
roŸ
->
right
 = 
NULL
;

37 
åì
->
roŸ
->
À·
 = 
NULL
;

38 
åì
->
roŸ
->
∑ª¡
 = 
NULL
;

39 
åì
->
roŸ
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

41 i‡(
¥óŒoˇã
 == 0) {

42  
åì
;

62 i‡(
¥óŒoˇã
 == -1) {

63 
ngx_∑gesize
 / (
ngx_ødix_node_t
)) {

67 
¥óŒoˇã
 = 6;

72 
¥óŒoˇã
 = 7;

77 
¥óŒoˇã
 = 8;

81 
mask
 = 0;

82 
öc
 = 0x80000000;

84 
¥óŒoˇã
--) {

86 
key
 = 0;

87 
mask
 >>= 1;

88 
mask
 |= 0x80000000;

91 i‡(
	`ngx_ødix32åì_ö£π
(
åì
, 
key
, 
mask
, 
NGX_RADIX_NO_VALUE
)

92 !
NGX_OK
)

94  
NULL
;

97 
key
 +
öc
;

99 } 
key
);

101 
öc
 >>= 1;

104  
åì
;

105 
	}
}

108 
ngx_öt_t


109 
	$ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
,

110 
uöçå_t
 
vÆue
)

112 
uöt32_t
 
bô
;

113 
ngx_ødix_node_t
 *
node
, *
√xt
;

115 
bô
 = 0x80000000;

117 
node
 = 
åì
->
roŸ
;

118 
√xt
 = 
åì
->
roŸ
;

120 
bô
 & 
mask
) {

121 i‡(
key
 & 
bô
) {

122 
√xt
 = 
node
->
right
;

125 
√xt
 = 
node
->
À·
;

128 i‡(
√xt
 =
NULL
) {

132 
bô
 >>= 1;

133 
node
 = 
√xt
;

136 i‡(
√xt
) {

137 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

138  
NGX_BUSY
;

141 
node
->
vÆue
 = value;

142  
NGX_OK
;

145 
bô
 & 
mask
) {

146 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

147 i‡(
√xt
 =
NULL
) {

148  
NGX_ERROR
;

151 
√xt
->
right
 = 
NULL
;

152 
√xt
->
À·
 = 
NULL
;

153 
√xt
->
∑ª¡
 = 
node
;

154 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

156 i‡(
key
 & 
bô
) {

157 
node
->
right
 = 
√xt
;

160 
node
->
À·
 = 
√xt
;

163 
bô
 >>= 1;

164 
node
 = 
√xt
;

167 
node
->
vÆue
 = value;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
)

176 
uöt32_t
 
bô
;

177 
ngx_ødix_node_t
 *
node
;

179 
bô
 = 0x80000000;

180 
node
 = 
åì
->
roŸ
;

182 
node
 && (
bô
 & 
mask
)) {

183 i‡(
key
 & 
bô
) {

184 
node
 =Çode->
right
;

187 
node
 =Çode->
À·
;

190 
bô
 >>= 1;

193 i‡(
node
 =
NULL
) {

194  
NGX_ERROR
;

197 i‡(
node
->
right
 ||Çode->
À·
) {

198 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

199 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

200  
NGX_OK
;

203  
NGX_ERROR
;

207 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

208 
node
->
∑ª¡
->
right
 = 
NULL
;

211 
node
->
∑ª¡
->
À·
 = 
NULL
;

214 
node
->
right
 = 
åì
->
‰ì
;

215 
åì
->
‰ì
 = 
node
;

217 
node
 =Çode->
∑ª¡
;

219 i‡(
node
->
right
 ||Çode->
À·
) {

223 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

227 i‡(
node
->
∑ª¡
 =
NULL
) {

232  
NGX_OK
;

233 
	}
}

236 
uöçå_t


237 
	$ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
)

239 
uöt32_t
 
bô
;

240 
uöçå_t
 
vÆue
;

241 
ngx_ødix_node_t
 *
node
;

243 
bô
 = 0x80000000;

244 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

245 
node
 = 
åì
->
roŸ
;

247 
node
) {

248 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

249 
vÆue
 = 
node
->value;

252 i‡(
key
 & 
bô
) {

253 
node
 =Çode->
right
;

256 
node
 =Çode->
À·
;

259 
bô
 >>= 1;

262  
vÆue
;

263 
	}
}

266 #i‡(
NGX_HAVE_INET6
)

268 
ngx_öt_t


269 
	$ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
,

270 
uöçå_t
 
vÆue
)

272 
u_ch¨
 
bô
;

273 
ngx_uöt_t
 
i
;

274 
ngx_ødix_node_t
 *
node
, *
√xt
;

276 
i
 = 0;

277 
bô
 = 0x80;

279 
node
 = 
åì
->
roŸ
;

280 
√xt
 = 
åì
->
roŸ
;

282 
bô
 & 
mask
[
i
]) {

283 i‡(
key
[
i
] & 
bô
) {

284 
√xt
 = 
node
->
right
;

287 
√xt
 = 
node
->
À·
;

290 i‡(
√xt
 =
NULL
) {

294 
bô
 >>= 1;

295 
node
 = 
√xt
;

297 i‡(
bô
 == 0) {

298 i‡(++
i
 == 16) {

302 
bô
 = 0x80;

306 i‡(
√xt
) {

307 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

308  
NGX_BUSY
;

311 
node
->
vÆue
 = value;

312  
NGX_OK
;

315 
bô
 & 
mask
[
i
]) {

316 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

317 i‡(
√xt
 =
NULL
) {

318  
NGX_ERROR
;

321 
√xt
->
right
 = 
NULL
;

322 
√xt
->
À·
 = 
NULL
;

323 
√xt
->
∑ª¡
 = 
node
;

324 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

326 i‡(
key
[
i
] & 
bô
) {

327 
node
->
right
 = 
√xt
;

330 
node
->
À·
 = 
√xt
;

333 
bô
 >>= 1;

334 
node
 = 
√xt
;

336 i‡(
bô
 == 0) {

337 i‡(++
i
 == 16) {

341 
bô
 = 0x80;

345 
node
->
vÆue
 = value;

347  
NGX_OK
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
)

354 
u_ch¨
 
bô
;

355 
ngx_uöt_t
 
i
;

356 
ngx_ødix_node_t
 *
node
;

358 
i
 = 0;

359 
bô
 = 0x80;

360 
node
 = 
åì
->
roŸ
;

362 
node
 && (
bô
 & 
mask
[
i
])) {

363 i‡(
key
[
i
] & 
bô
) {

364 
node
 =Çode->
right
;

367 
node
 =Çode->
À·
;

370 
bô
 >>= 1;

372 i‡(
bô
 == 0) {

373 i‡(++
i
 == 16) {

377 
bô
 = 0x80;

381 i‡(
node
 =
NULL
) {

382  
NGX_ERROR
;

385 i‡(
node
->
right
 ||Çode->
À·
) {

386 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

387 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

388  
NGX_OK
;

391  
NGX_ERROR
;

395 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

396 
node
->
∑ª¡
->
right
 = 
NULL
;

399 
node
->
∑ª¡
->
À·
 = 
NULL
;

402 
node
->
right
 = 
åì
->
‰ì
;

403 
åì
->
‰ì
 = 
node
;

405 
node
 =Çode->
∑ª¡
;

407 i‡(
node
->
right
 ||Çode->
À·
) {

411 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

415 i‡(
node
->
∑ª¡
 =
NULL
) {

420  
NGX_OK
;

421 
	}
}

424 
uöçå_t


425 
	$ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
)

427 
u_ch¨
 
bô
;

428 
uöçå_t
 
vÆue
;

429 
ngx_uöt_t
 
i
;

430 
ngx_ødix_node_t
 *
node
;

432 
i
 = 0;

433 
bô
 = 0x80;

434 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

435 
node
 = 
åì
->
roŸ
;

437 
node
) {

438 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

439 
vÆue
 = 
node
->value;

442 i‡(
key
[
i
] & 
bô
) {

443 
node
 =Çode->
right
;

446 
node
 =Çode->
À·
;

449 
bô
 >>= 1;

451 i‡(
bô
 == 0) {

452 
i
++;

453 
bô
 = 0x80;

457  
vÆue
;

458 
	}
}

463 
ngx_ødix_node_t
 *

464 
	$ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
)

466 
ngx_ødix_node_t
 *
p
;

468 i‡(
åì
->
‰ì
) {

469 
p
 = 
åì
->
‰ì
;

470 
åì
->
‰ì
 =Åªe->‰ì->
right
;

471  
p
;

474 i‡(
åì
->
size
 < (
ngx_ødix_node_t
)) {

475 
åì
->
°¨t
 = 
	`ngx_pmemÆign
—ªe->
poﬁ
, 
ngx_∑gesize
,Çgx_pagesize);

476 i‡(
åì
->
°¨t
 =
NULL
) {

477  
NULL
;

480 
åì
->
size
 = 
ngx_∑gesize
;

483 
p
 = (
ngx_ødix_node_t
 *Ë
åì
->
°¨t
;

484 
åì
->
°¨t
 +(
ngx_ødix_node_t
);

485 
åì
->
size
 -(
ngx_ødix_node_t
);

487  
p
;

488 
	}
}

	@src/core/ngx_radix_tree.h

8 #i‚de‡
_NGX_RADIX_TREE_H_INCLUDED_


9 
	#_NGX_RADIX_TREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_RADIX_NO_VALUE
 (
uöçå_t
Ë-1

	)

18 
ngx_ødix_node_s
 
	tngx_ødix_node_t
;

20 
	sngx_ødix_node_s
 {

21 
ngx_ødix_node_t
 *
	mright
;

22 
ngx_ødix_node_t
 *
	mÀ·
;

23 
ngx_ødix_node_t
 *
	m∑ª¡
;

24 
uöçå_t
 
	mvÆue
;

29 
ngx_ødix_node_t
 *
	mroŸ
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 
ngx_ødix_node_t
 *
	m‰ì
;

32 *
	m°¨t
;

33 
size_t
 
	msize
;

34 } 
	tngx_ødix_åì_t
;

37 
ngx_ødix_åì_t
 *
ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
,

38 
ngx_öt_t
 
¥óŒoˇã
);

40 
ngx_öt_t
 
ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

41 
uöt32_t
 
key
, uöt32_à
mask
, 
uöçå_t
 
vÆue
);

42 
ngx_öt_t
 
ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

43 
uöt32_t
 
key
, uöt32_à
mask
);

44 
uöçå_t
 
ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
);

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_öt_t
 
ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

48 
u_ch¨
 *
key
, u_ch¨ *
mask
, 
uöçå_t
 
vÆue
);

49 
ngx_öt_t
 
ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

50 
u_ch¨
 *
key
, u_ch¨ *
mask
);

51 
uöçå_t
 
ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
);

	@src/core/ngx_rbtree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

19 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

20 
ngx_ölöe
 
ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

21 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

25 
	$ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

26 
ngx_rbåì_node_t
 *
node
)

28 
ngx_rbåì_node_t
 **
roŸ
, *
ãmp
, *
£¡öñ
;

32 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

33 
£¡öñ
 = 
åì
->sentinel;

35 i‡(*
roŸ
 =
£¡öñ
) {

36 
node
->
∑ª¡
 = 
NULL
;

37 
node
->
À·
 = 
£¡öñ
;

38 
node
->
right
 = 
£¡öñ
;

39 
	`ngx_rbt_bœck
(
node
);

40 *
roŸ
 = 
node
;

45 
åì
->
	`ö£π
(*
roŸ
, 
node
, 
£¡öñ
);

49 
node
 !*
roŸ
 && 
	`ngx_rbt_is_ªd
“ode->
∑ª¡
)) {

51 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

52 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

54 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

55 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

56 
	`ngx_rbt_bœck
(
ãmp
);

57 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

58 
node
 =Çode->
∑ª¡
->parent;

61 i‡(
node
 =node->
∑ª¡
->
right
) {

62 
node
 =Çode->
∑ª¡
;

63 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

66 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

67 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

68 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

72 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

74 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

75 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

76 
	`ngx_rbt_bœck
(
ãmp
);

77 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

78 
node
 =Çode->
∑ª¡
->parent;

81 i‡(
node
 =node->
∑ª¡
->
À·
) {

82 
node
 =Çode->
∑ª¡
;

83 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

86 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

87 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

88 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

93 
	`ngx_rbt_bœck
(*
roŸ
);

94 
	}
}

98 
	$ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

99 
ngx_rbåì_node_t
 *
£¡öñ
)

101 
ngx_rbåì_node_t
 **
p
;

105 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

107 i‡(*
p
 =
£¡öñ
) {

111 
ãmp
 = *
p
;

114 *
p
 = 
node
;

115 
node
->
∑ª¡
 = 
ãmp
;

116 
node
->
À·
 = 
£¡öñ
;

117 
node
->
right
 = 
£¡öñ
;

118 
	`ngx_rbt_ªd
(
node
);

119 
	}
}

123 
	$ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

124 
ngx_rbåì_node_t
 *
£¡öñ
)

126 
ngx_rbåì_node_t
 **
p
;

139 
p
 = ((
ngx_rbåì_key_öt_t
Ë(
node
->
key
 - 
ãmp
->key) < 0)

140 ? &
ãmp
->
À·
 : &ãmp->
right
;

142 i‡(*
p
 =
£¡öñ
) {

146 
ãmp
 = *
p
;

149 *
p
 = 
node
;

150 
node
->
∑ª¡
 = 
ãmp
;

151 
node
->
À·
 = 
£¡öñ
;

152 
node
->
right
 = 
£¡öñ
;

153 
	`ngx_rbt_ªd
(
node
);

154 
	}
}

158 
	$ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

159 
ngx_rbåì_node_t
 *
node
)

161 
ngx_uöt_t
 
ªd
;

162 
ngx_rbåì_node_t
 **
roŸ
, *
£¡öñ
, *
sub°
, *
ãmp
, *
w
;

166 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

167 
£¡öñ
 = 
åì
->sentinel;

169 i‡(
node
->
À·
 =
£¡öñ
) {

170 
ãmp
 = 
node
->
right
;

171 
sub°
 = 
node
;

173 } i‡(
node
->
right
 =
£¡öñ
) {

174 
ãmp
 = 
node
->
À·
;

175 
sub°
 = 
node
;

178 
sub°
 = 
	`ngx_rbåì_mö
(
node
->
right
, 
£¡öñ
);

180 i‡(
sub°
->
À·
 !
£¡öñ
) {

181 
ãmp
 = 
sub°
->
À·
;

183 
ãmp
 = 
sub°
->
right
;

187 i‡(
sub°
 =*
roŸ
) {

188 *
roŸ
 = 
ãmp
;

189 
	`ngx_rbt_bœck
(
ãmp
);

192 
node
->
À·
 = 
NULL
;

193 
node
->
right
 = 
NULL
;

194 
node
->
∑ª¡
 = 
NULL
;

195 
node
->
key
 = 0;

200 
ªd
 = 
	`ngx_rbt_is_ªd
(
sub°
);

202 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

203 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

206 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

209 i‡(
sub°
 =
node
) {

211 
ãmp
->
∑ª¡
 = 
sub°
->parent;

215 i‡(
sub°
->
∑ª¡
 =
node
) {

216 
ãmp
->
∑ª¡
 = 
sub°
;

219 
ãmp
->
∑ª¡
 = 
sub°
->parent;

222 
sub°
->
À·
 = 
node
->left;

223 
sub°
->
right
 = 
node
->right;

224 
sub°
->
∑ª¡
 = 
node
->parent;

225 
	`ngx_rbt_c›y_cﬁ‹
(
sub°
, 
node
);

227 i‡(
node
 =*
roŸ
) {

228 *
roŸ
 = 
sub°
;

231 i‡(
node
 =node->
∑ª¡
->
À·
) {

232 
node
->
∑ª¡
->
À·
 = 
sub°
;

234 
node
->
∑ª¡
->
right
 = 
sub°
;

238 i‡(
sub°
->
À·
 !
£¡öñ
) {

239 
sub°
->
À·
->
∑ª¡
 = subst;

242 i‡(
sub°
->
right
 !
£¡öñ
) {

243 
sub°
->
right
->
∑ª¡
 = subst;

248 
node
->
À·
 = 
NULL
;

249 
node
->
right
 = 
NULL
;

250 
node
->
∑ª¡
 = 
NULL
;

251 
node
->
key
 = 0;

253 i‡(
ªd
) {

259 
ãmp
 !*
roŸ
 && 
	`ngx_rbt_is_bœck
(temp)) {

261 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

262 
w
 = 
ãmp
->
∑ª¡
->
right
;

264 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

265 
	`ngx_rbt_bœck
(
w
);

266 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

267 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

268 
w
 = 
ãmp
->
∑ª¡
->
right
;

271 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

272 
	`ngx_rbt_ªd
(
w
);

273 
ãmp
 =Åemp->
∑ª¡
;

276 i‡(
	`ngx_rbt_is_bœck
(
w
->
right
)) {

277 
	`ngx_rbt_bœck
(
w
->
À·
);

278 
	`ngx_rbt_ªd
(
w
);

279 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

280 
w
 = 
ãmp
->
∑ª¡
->
right
;

283 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

284 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

285 
	`ngx_rbt_bœck
(
w
->
right
);

286 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

287 
ãmp
 = *
roŸ
;

291 
w
 = 
ãmp
->
∑ª¡
->
À·
;

293 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

294 
	`ngx_rbt_bœck
(
w
);

295 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

296 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

297 
w
 = 
ãmp
->
∑ª¡
->
À·
;

300 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

301 
	`ngx_rbt_ªd
(
w
);

302 
ãmp
 =Åemp->
∑ª¡
;

305 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
)) {

306 
	`ngx_rbt_bœck
(
w
->
right
);

307 
	`ngx_rbt_ªd
(
w
);

308 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

309 
w
 = 
ãmp
->
∑ª¡
->
À·
;

312 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

313 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

314 
	`ngx_rbt_bœck
(
w
->
À·
);

315 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

316 
ãmp
 = *
roŸ
;

321 
	`ngx_rbt_bœck
(
ãmp
);

322 
	}
}

325 
ngx_ölöe
 

326 
	$ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

327 
ngx_rbåì_node_t
 *
node
)

329 
ngx_rbåì_node_t
 *
ãmp
;

331 
ãmp
 = 
node
->
right
;

332 
node
->
right
 = 
ãmp
->
À·
;

334 i‡(
ãmp
->
À·
 !
£¡öñ
) {

335 
ãmp
->
À·
->
∑ª¡
 = 
node
;

338 
ãmp
->
∑ª¡
 = 
node
->parent;

340 i‡(
node
 =*
roŸ
) {

341 *
roŸ
 = 
ãmp
;

343 } i‡(
node
 =node->
∑ª¡
->
À·
) {

344 
node
->
∑ª¡
->
À·
 = 
ãmp
;

347 
node
->
∑ª¡
->
right
 = 
ãmp
;

350 
ãmp
->
À·
 = 
node
;

351 
node
->
∑ª¡
 = 
ãmp
;

352 
	}
}

355 
ngx_ölöe
 

356 
	$ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

357 
ngx_rbåì_node_t
 *
node
)

359 
ngx_rbåì_node_t
 *
ãmp
;

361 
ãmp
 = 
node
->
À·
;

362 
node
->
À·
 = 
ãmp
->
right
;

364 i‡(
ãmp
->
right
 !
£¡öñ
) {

365 
ãmp
->
right
->
∑ª¡
 = 
node
;

368 
ãmp
->
∑ª¡
 = 
node
->parent;

370 i‡(
node
 =*
roŸ
) {

371 *
roŸ
 = 
ãmp
;

373 } i‡(
node
 =node->
∑ª¡
->
right
) {

374 
node
->
∑ª¡
->
right
 = 
ãmp
;

377 
node
->
∑ª¡
->
À·
 = 
ãmp
;

380 
ãmp
->
right
 = 
node
;

381 
node
->
∑ª¡
 = 
ãmp
;

382 
	}
}

	@src/core/ngx_rbtree.h

8 #i‚de‡
_NGX_RBTREE_H_INCLUDED_


9 
	#_NGX_RBTREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_uöt_t
 
	tngx_rbåì_key_t
;

17 
ngx_öt_t
 
	tngx_rbåì_key_öt_t
;

20 
ngx_rbåì_node_s
 
	tngx_rbåì_node_t
;

22 
	sngx_rbåì_node_s
 {

23 
ngx_rbåì_key_t
 
	mkey
;

24 
ngx_rbåì_node_t
 *
	mÀ·
;

25 
ngx_rbåì_node_t
 *
	mright
;

26 
ngx_rbåì_node_t
 *
	m∑ª¡
;

27 
u_ch¨
 
	mcﬁ‹
;

28 
u_ch¨
 
	md©a
;

32 
ngx_rbåì_s
 
	tngx_rbåì_t
;

34 (*
	tngx_rbåì_ö£π_±
Ë(
	tngx_rbåì_node_t
 *
	troŸ
,

35 
	tngx_rbåì_node_t
 *
	tnode
,Çgx_rbåì_node_à*
	t£¡öñ
);

37 
	sngx_rbåì_s
 {

38 
ngx_rbåì_node_t
 *
roŸ
;

39 
ngx_rbåì_node_t
 *
£¡öñ
;

40 
ngx_rbåì_ö£π_±
 
ö£π
;

44 
	#ngx_rbåì_öô
(
åì
, 
s
, 
i
) \

45 
	`ngx_rbåì_£¡öñ_öô
(
s
); \

46 (
åì
)->
roŸ
 = 
s
; \

47 (
åì
)->
£¡öñ
 = 
s
; \

48 (
åì
)->
ö£π
 = 
i


	)

51 
	`ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

52 
ngx_rbåì_node_t
 *
node
);

53 
	`ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

54 
ngx_rbåì_node_t
 *
node
);

55 
	`ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,Çgx_rbåì_node_à*
node
,

56 
ngx_rbåì_node_t
 *
£¡öñ
);

57 
	`ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,

58 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

61 
	#ngx_rbt_ªd
(
node
Ë(“ode)->
cﬁ‹
 = 1)

	)

62 
	#ngx_rbt_bœck
(
node
Ë(“ode)->
cﬁ‹
 = 0)

	)

63 
	#ngx_rbt_is_ªd
(
node
Ë(“ode)->
cﬁ‹
)

	)

64 
	#ngx_rbt_is_bœck
(
node
Ë(!
	`ngx_rbt_is_ªd
“ode))

	)

65 
	#ngx_rbt_c›y_cﬁ‹
(
n1
, 
n2
Ë“1->
cﬁ‹
 =Ç2->cﬁ‹)

	)

70 
	#ngx_rbåì_£¡öñ_öô
(
node
Ë
	`ngx_rbt_bœck
“ode)

	)

73 
ngx_ölöe
 
ngx_rbåì_node_t
 *

74 
	$ngx_rbåì_mö
(
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

76 
node
->
À·
 !
£¡öñ
) {

77 
node
 =Çode->
À·
;

80  
node
;

81 
	}
}

	@src/core/ngx_regex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
ngx_Êag_t
 
	mp¸e_jô
;

14 } 
	tngx_ªgex_c⁄f_t
;

17 * 
ngx_libc_cde˛
 
ngx_ªgex_mÆloc
(
size_t
 
size
);

18 
ngx_libc_cde˛
 
ngx_ªgex_‰ì
(*
p
);

19 #i‡(
NGX_HAVE_PCRE_JIT
)

20 
ngx_p¸e_‰ì_°udõs
(*
d©a
);

23 
ngx_öt_t
 
ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

25 *
ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

26 *
ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

28 *
ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

29 
ngx_c⁄f_po°_t
 
	gngx_ªgex_p¸e_jô_po°
 = { 
ngx_ªgex_p¸e_jô
 };

32 
ngx_comm™d_t
 
	gngx_ªgex_comm™ds
[] = {

34 { 
ngx_°rög
("pcre_jit"),

35 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

36 
ngx_c⁄f_£t_Êag_¶Ÿ
,

38 
off£tof
(
ngx_ªgex_c⁄f_t
, 
p¸e_jô
),

39 &
ngx_ªgex_p¸e_jô_po°
 },

41 
ngx_nuŒ_comm™d


45 
ngx_c‹e_moduÀ_t
 
	gngx_ªgex_moduÀ_˘x
 = {

46 
ngx_°rög
("regex"),

47 
ngx_ªgex_¸óã_c⁄f
,

48 
ngx_ªgex_öô_c⁄f


52 
ngx_moduÀ_t
 
	gngx_ªgex_moduÀ
 = {

53 
NGX_MODULE_V1
,

54 &
ngx_ªgex_moduÀ_˘x
,

55 
ngx_ªgex_comm™ds
,

56 
NGX_CORE_MODULE
,

57 
NULL
,

58 
ngx_ªgex_moduÀ_öô
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NGX_MODULE_V1_PADDING


68 
ngx_poﬁ_t
 *
	gngx_p¸e_poﬁ
;

69 
ngx_li°_t
 *
	gngx_p¸e_°udõs
;

73 
	$ngx_ªgex_öô
()

75 
p¸e_mÆloc
 = 
ngx_ªgex_mÆloc
;

76 
p¸e_‰ì
 = 
ngx_ªgex_‰ì
;

77 
	}
}

80 
ngx_ölöe
 

81 
	$ngx_ªgex_mÆloc_öô
(
ngx_poﬁ_t
 *
poﬁ
)

83 #i‡(
NGX_THREADS
)

84 
ngx_c‹e_és_t
 *
és
;

86 i‡(
ngx_thªaded
) {

87 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

88 
és
->
poﬁ
 =Öool;

94 
ngx_p¸e_poﬁ
 = 
poﬁ
;

95 
	}
}

98 
ngx_ölöe
 

99 
	$ngx_ªgex_mÆloc_d⁄e
()

101 #i‡(
NGX_THREADS
)

102 
ngx_c‹e_és_t
 *
és
;

104 i‡(
ngx_thªaded
) {

105 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

106 
és
->
poﬁ
 = 
NULL
;

112 
ngx_p¸e_poﬁ
 = 
NULL
;

113 
	}
}

116 
ngx_öt_t


117 
	$ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
)

119 
n
, 
îroff
;

120 *
p
;

121 
p¸e
 *
ª
;

122 c⁄° *
îr°r
;

123 
ngx_ªgex_ñt_t
 *
ñt
;

125 
	`ngx_ªgex_mÆloc_öô
(
rc
->
poﬁ
);

127 
ª
 = 
	`p¸e_compûe
((c⁄° *Ë
rc
->
∑âîn
.
d©a
, (Ërc->
›ti⁄s
,

128 &
îr°r
, &
îroff
, 
NULL
);

131 
	`ngx_ªgex_mÆloc_d⁄e
();

133 i‡(
ª
 =
NULL
) {

134 i‡((
size_t
Ë
îroff
 =
rc
->
∑âîn
.
Àn
) {

135 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

137 
îr°r
, &
rc
->
∑âîn
)

138 - 
rc
->
îr
.
d©a
;

141 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

143 
îr°r
, &
rc
->
∑âîn
,Ñc->∑âîn.
d©a
 + 
îroff
)

144 - 
rc
->
îr
.
d©a
;

147  
NGX_ERROR
;

150 
rc
->
ªgex
 = 
	`ngx_pˇŒoc
‘c->
poﬁ
, (
ngx_ªgex_t
));

151 i‡(
rc
->
ªgex
 =
NULL
) {

152  
NGX_ERROR
;

155 
rc
->
ªgex
->
code
 = 
ª
;

159 i‡(
ngx_p¸e_°udõs
 !
NULL
) {

160 
ñt
 = 
	`ngx_li°_push
(
ngx_p¸e_°udõs
);

161 i‡(
ñt
 =
NULL
) {

162  
NGX_ERROR
;

165 
ñt
->
ªgex
 = 
rc
->regex;

166 
ñt
->
«me
 = 
rc
->
∑âîn
.
d©a
;

169 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_CAPTURECOUNT
, &
rc
->
ˇ±uªs
);

170 i‡(
n
 < 0) {

171 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_CAPTURECOUNT) failed: %d";

172 
Áûed
;

175 i‡(
rc
->
ˇ±uªs
 == 0) {

176  
NGX_OK
;

179 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMECOUNT
, &
rc
->
«med_ˇ±uªs
);

180 i‡(
n
 < 0) {

181 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMECOUNT) failed: %d";

182 
Áûed
;

185 i‡(
rc
->
«med_ˇ±uªs
 == 0) {

186  
NGX_OK
;

189 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMEENTRYSIZE
, &
rc
->
«me_size
);

190 i‡(
n
 < 0) {

191 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMEENTRYSIZE) failed: %d";

192 
Áûed
;

195 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMETABLE
, &
rc
->
«mes
);

196 i‡(
n
 < 0) {

197 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMETABLE) failed: %d";

198 
Áûed
;

201  
NGX_OK
;

203 
Áûed
:

205 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->îr.Àn, 
p
, &rc->
∑âîn
, 
n
)

206 - 
rc
->
îr
.
d©a
;

207  
NGX_OK
;

208 
	}
}

211 
ngx_öt_t


212 
	$ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
)

214 
ngx_öt_t
 
n
;

215 
ngx_uöt_t
 
i
;

216 
ngx_ªgex_ñt_t
 *
ª
;

218 
ª
 = 
a
->
ñts
;

220 
i
 = 0; i < 
a
->
√…s
; i++) {

222 
n
 = 
	`ngx_ªgex_exec
(
ª
[
i
].
ªgex
, 
s
, 
NULL
, 0);

224 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

228 i‡(
n
 < 0) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

230 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%s\"",

231 
n
, 
s
, 
ª
[
i
].
«me
);

232  
NGX_ERROR
;

237  
NGX_OK
;

240  
NGX_DECLINED
;

241 
	}
}

244 * 
ngx_libc_cde˛


245 
	$ngx_ªgex_mÆloc
(
size_t
 
size
)

247 
ngx_poﬁ_t
 *
poﬁ
;

248 #i‡(
NGX_THREADS
)

249 
ngx_c‹e_és_t
 *
és
;

251 i‡(
ngx_thªaded
) {

252 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

253 
poﬁ
 = 
és
->pool;

256 
poﬁ
 = 
ngx_p¸e_poﬁ
;

261 
poﬁ
 = 
ngx_p¸e_poﬁ
;

265 i‡(
poﬁ
) {

266  
	`ngx_∑Œoc
(
poﬁ
, 
size
);

269  
NULL
;

270 
	}
}

273 
ngx_libc_cde˛


274 
	$ngx_ªgex_‰ì
(*
p
)

277 
	}
}

280 #i‡(
NGX_HAVE_PCRE_JIT
)

283 
	$ngx_p¸e_‰ì_°udõs
(*
d©a
)

285 
ngx_li°_t
 *
°udõs
 = 
d©a
;

287 
ngx_uöt_t
 
i
;

288 
ngx_li°_∑π_t
 *
∑π
;

289 
ngx_ªgex_ñt_t
 *
ñts
;

291 
∑π
 = &
°udõs
->part;

292 
ñts
 = 
∑π
->elts;

294 
i
 = 0 ; ; i++) {

296 i‡(
i
 >
∑π
->
√…s
) {

297 i‡(
∑π
->
√xt
 =
NULL
) {

301 
∑π
 =Ö¨t->
√xt
;

302 
ñts
 = 
∑π
->elts;

303 
i
 = 0;

306 i‡(
ñts
[
i
].
ªgex
->
exåa
 !
NULL
) {

307 
	`p¸e_‰ì_°udy
(
ñts
[
i
].
ªgex
->
exåa
);

310 
	}
}

315 
ngx_öt_t


316 
	$ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

318 
›t
;

319 c⁄° *
îr°r
;

320 
ngx_uöt_t
 
i
;

321 
ngx_li°_∑π_t
 *
∑π
;

322 
ngx_ªgex_ñt_t
 *
ñts
;

324 
›t
 = 0;

326 #i‡(
NGX_HAVE_PCRE_JIT
)

328 
ngx_ªgex_c⁄f_t
 *
rcf
;

329 
ngx_poﬁ_˛ónup_t
 *
˛n
;

331 
rcf
 = (
ngx_ªgex_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ªgex_moduÀ
);

333 i‡(
rcf
->
p¸e_jô
) {

334 
›t
 = 
PCRE_STUDY_JIT_COMPILE
;

342 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cy˛e
->
poﬁ
, 0);

343 i‡(
˛n
 =
NULL
) {

344  
NGX_ERROR
;

347 
˛n
->
h™dÀr
 = 
ngx_p¸e_‰ì_°udõs
;

348 
˛n
->
d©a
 = 
ngx_p¸e_°udõs
;

353 
	`ngx_ªgex_mÆloc_öô
(
cy˛e
->
poﬁ
);

355 
∑π
 = &
ngx_p¸e_°udõs
->part;

356 
ñts
 = 
∑π
->elts;

358 
i
 = 0 ; ; i++) {

360 i‡(
i
 >
∑π
->
√…s
) {

361 i‡(
∑π
->
√xt
 =
NULL
) {

365 
∑π
 =Ö¨t->
√xt
;

366 
ñts
 = 
∑π
->elts;

367 
i
 = 0;

370 
ñts
[
i
].
ªgex
->
exåa
 = 
	`p¸e_°udy
”…s[i].ªgex->
code
, 
›t
, &
îr°r
);

372 i‡(
îr°r
 !
NULL
) {

373 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

375 
îr°r
, 
ñts
[
i
].
«me
);

378 #i‡(
NGX_HAVE_PCRE_JIT
)

379 i‡(
›t
 & 
PCRE_STUDY_JIT_COMPILE
) {

380 
jô
, 
n
;

382 
jô
 = 0;

383 
n
 = 
	`p¸e_fuŒöfo
(
ñts
[
i
].
ªgex
->
code
,É…s[i].ªgex->
exåa
,

384 
PCRE_INFO_JIT
, &
jô
);

386 i‡(
n
 !0 || 
jô
 != 1) {

387 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
cy˛e
->
log
, 0,

389 
ñts
[
i
].
«me
);

395 
	`ngx_ªgex_mÆloc_d⁄e
();

397 
ngx_p¸e_°udõs
 = 
NULL
;

399  
NGX_OK
;

400 
	}
}

404 
	$ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

406 
ngx_ªgex_c⁄f_t
 *
rcf
;

408 
rcf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_ªgex_c⁄f_t
));

409 i‡(
rcf
 =
NULL
) {

410  
NULL
;

413 
rcf
->
p¸e_jô
 = 
NGX_CONF_UNSET
;

415 
ngx_p¸e_°udõs
 = 
	`ngx_li°_¸óã
(
cy˛e
->
poﬁ
, 8, (
ngx_ªgex_ñt_t
));

416 i‡(
ngx_p¸e_°udõs
 =
NULL
) {

417  
NULL
;

420  
rcf
;

421 
	}
}

425 
	$ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

427 
ngx_ªgex_c⁄f_t
 *
rcf
 = 
c⁄f
;

429 
	`ngx_c⁄f_öô_vÆue
(
rcf
->
p¸e_jô
, 0);

431  
NGX_CONF_OK
;

432 
	}
}

436 
	$ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

438 
ngx_Êag_t
 *
Â
 = 
d©a
;

440 i‡(*
Â
 == 0) {

441  
NGX_CONF_OK
;

444 #i‡(
NGX_HAVE_PCRE_JIT
)

446 
jô
, 
r
;

448 
jô
 = 0;

449 
r
 = 
	`p¸e_c⁄fig
(
PCRE_CONFIG_JIT
, &
jô
);

451 i‡(
r
 !0 || 
jô
 != 1) {

452 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

454 *
Â
 = 0;

458 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

460 *
Â
 = 0;

463  
NGX_CONF_OK
;

464 
	}
}

	@src/core/ngx_regex.h

8 #i‚de‡
_NGX_REGEX_H_INCLUDED_


9 
	#_NGX_REGEX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<p¸e.h
>

18 
	#NGX_REGEX_NO_MATCHED
 
PCRE_ERROR_NOMATCH


	)

20 
	#NGX_REGEX_CASELESS
 
PCRE_CASELESS


	)

24 
p¸e
 *
	mcode
;

25 
p¸e_exåa
 *
	mexåa
;

26 } 
	tngx_ªgex_t
;

30 
ngx_°r_t
 
	m∑âîn
;

31 
ngx_poﬁ_t
 *
	mpoﬁ
;

32 
ngx_öt_t
 
	m›ti⁄s
;

34 
ngx_ªgex_t
 *
	mªgex
;

35 
	mˇ±uªs
;

36 
	m«med_ˇ±uªs
;

37 
	m«me_size
;

38 
u_ch¨
 *
	m«mes
;

39 
ngx_°r_t
 
	mîr
;

40 } 
	tngx_ªgex_compûe_t
;

44 
ngx_ªgex_t
 *
	mªgex
;

45 
u_ch¨
 *
	m«me
;

46 } 
	tngx_ªgex_ñt_t
;

49 
ngx_ªgex_öô
();

50 
ngx_öt_t
 
ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
);

52 
	#ngx_ªgex_exec
(
ª
, 
s
, 
ˇ±uªs
, 
size
) \

53 
	`p¸e_exec
(
ª
->
code
,Ñe->
exåa
, (c⁄° *Ë(
s
)->
d©a
, (s)->
Àn
, 0, 0, \

54 
ˇ±uªs
, 
size
)

	)

55 
	#ngx_ªgex_exec_n
 "p¸e_exec()"

	)

57 
ngx_öt_t
 
ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
);

	@src/core/ngx_resolver.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_RESOLVER_UDP_SIZE
 4096

	)

17 
u_ch¨
 
	midít_hi
;

18 
u_ch¨
 
	midít_lo
;

19 
u_ch¨
 
	mÊags_hi
;

20 
u_ch¨
 
	mÊags_lo
;

21 
u_ch¨
 
	mnqs_hi
;

22 
u_ch¨
 
	mnqs_lo
;

23 
u_ch¨
 
	m«n_hi
;

24 
u_ch¨
 
	m«n_lo
;

25 
u_ch¨
 
	m¬s_hi
;

26 
u_ch¨
 
	m¬s_lo
;

27 
u_ch¨
 
	m«r_hi
;

28 
u_ch¨
 
	m«r_lo
;

29 } 
	tngx_ªsﬁvî_quîy_t
;

33 
u_ch¨
 
	mty≥_hi
;

34 
u_ch¨
 
	mty≥_lo
;

35 
u_ch¨
 
	m˛ass_hi
;

36 
u_ch¨
 
	m˛ass_lo
;

37 } 
	tngx_ªsﬁvî_qs_t
;

41 
u_ch¨
 
	mty≥_hi
;

42 
u_ch¨
 
	mty≥_lo
;

43 
u_ch¨
 
	m˛ass_hi
;

44 
u_ch¨
 
	m˛ass_lo
;

45 
u_ch¨
 
	mâl
[4];

46 
u_ch¨
 
	mÀn_hi
;

47 
u_ch¨
 
	mÀn_lo
;

48 } 
	tngx_ªsﬁvî_™_t
;

51 
ngx_öt_t
 
ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
);

54 
ngx_ªsﬁvî_˛ónup
(*
d©a
);

55 
ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
);

56 
ngx_öt_t
 
ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
,

57 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

58 
ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

59 
ngx_queue_t
 *
queue
);

60 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
,

61 
ngx_ªsﬁvî_node_t
 *
∫
);

62 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

63 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

64 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

65 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

66 
ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
);

67 
time_t
 
ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

68 
ngx_queue_t
 *
queue
);

69 
ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
);

70 
ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
,

71 
size_t
 
n
);

72 
ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

73 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,Çgx_uöt_à
™s
);

74 
ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

75 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
);

76 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
,

77 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
);

78 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
,

79 
ö_addr_t
 
addr
);

80 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

81 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

82 
ngx_öt_t
 
ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
,

83 
u_ch¨
 *
buf
, u_ch¨ *
§c
, u_ch¨ *
œ°
);

84 
ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
);

85 
ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
);

86 *
ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

87 *
ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

88 
ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

89 
ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

90 *
ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
);

91 
ö_addr_t
 *
ngx_ªsﬁvî_rŸ©e
(
ngx_ªsﬁvî_t
 *
r
, in_addr_à*
§c
,

92 
ngx_uöt_t
 
n
);

93 
u_ch¨
 *
ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

96 
ngx_ªsﬁvî_t
 *

97 
	$ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
, 
ngx_uöt_t
 
n
)

99 
ngx_°r_t
 
s
;

100 
ngx_uæ_t
 
u
;

101 
ngx_uöt_t
 
i
, 
j
;

102 
ngx_ªsﬁvî_t
 *
r
;

103 
ngx_poﬁ_˛ónup_t
 *
˛n
;

104 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

106 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

107 i‡(
˛n
 =
NULL
) {

108  
NULL
;

111 
˛n
->
h™dÀr
 = 
ngx_ªsﬁvî_˛ónup
;

113 
r
 = 
	`ngx_ˇŒoc
((
ngx_ªsﬁvî_t
), 
cf
->
log
);

114 i‡(
r
 =
NULL
) {

115  
NULL
;

118 
˛n
->
d©a
 = 
r
;

120 
r
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
cf
->
log
);

121 i‡(
r
->
evít
 =
NULL
) {

122  
NULL
;

125 
	`ngx_rbåì_öô
(&
r
->
«me_rbåì
, &r->
«me_£¡öñ
,

126 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
);

128 
	`ngx_rbåì_öô
(&
r
->
addr_rbåì
, &r->
addr_£¡öñ
,

129 
ngx_rbåì_ö£π_vÆue
);

131 
	`ngx_queue_öô
(&
r
->
«me_ª£nd_queue
);

132 
	`ngx_queue_öô
(&
r
->
addr_ª£nd_queue
);

134 
	`ngx_queue_öô
(&
r
->
«me_expúe_queue
);

135 
	`ngx_queue_öô
(&
r
->
addr_expúe_queue
);

137 
r
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_ª£nd_h™dÀr
;

138 
r
->
evít
->
d©a
 =Ñ;

139 
r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

140 
r
->
idít
 = -1;

142 
r
->
ª£nd_timeout
 = 5;

143 
r
->
expúe
 = 30;

144 
r
->
vÆid
 = 0;

146 
r
->
log
 = &
cf
->
cy˛e
->
√w_log
;

147 
r
->
log_Àvñ
 = 
NGX_LOG_ERR
;

149 i‡(
n
) {

150 i‡(
	`ngx_¨øy_öô
(&
r
->
udp_c⁄√˘i⁄s
, 
cf
->
poﬁ
, 
n
,

151 (
ngx_udp_c⁄√˘i⁄_t
))

152 !
NGX_OK
)

154  
NULL
;

158 
i
 = 0; i < 
n
; i++) {

159 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "valid=", 6) == 0) {

160 
s
.
Àn
 = 
«mes
[
i
].len - 6;

161 
s
.
d©a
 = 
«mes
[
i
].data + 6;

163 
r
->
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

165 i‡(
r
->
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

166 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

167 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

168  
NULL
;

174 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

176 
u
.
uæ
 = 
«mes
[
i
];

177 
u
.
deÁu…_p‹t
 = 53;

179 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

180 i‡(
u
.
îr
) {

181 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

183 
u
.
îr
, &u.
uæ
);

186  
NULL
;

189 
uc
 = 
	`ngx_¨øy_push_n
(&
r
->
udp_c⁄√˘i⁄s
, 
u
.
«ddrs
);

190 i‡(
uc
 =
NULL
) {

191  
NULL
;

194 
	`ngx_memzîo
(
uc
, 
u
.
«ddrs
 * (
ngx_udp_c⁄√˘i⁄_t
));

196 
j
 = 0; j < 
u
.
«ddrs
; j++) {

197 
uc
[
j
].
sockaddr
 = 
u
.
addrs
[j].sockaddr;

198 
uc
[
j
].
sockÀn
 = 
u
.
addrs
[j].socklen;

199 
uc
[
j
].
£rvî
 = 
u
.
addrs
[j].
«me
;

203  
r
;

204 
	}
}

208 
	$ngx_ªsﬁvî_˛ónup
(*
d©a
)

210 
ngx_ªsﬁvî_t
 *
r
 = 
d©a
;

212 
ngx_uöt_t
 
i
;

213 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

215 i‡(
r
) {

216 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

219 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
«me_rbåì
);

221 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr_rbåì
);

223 i‡(
r
->
evít
) {

224 
	`ngx_‰ì
(
r
->
evít
);

228 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

230 
i
 = 0; i < 
r
->
udp_c⁄√˘i⁄s
.
√…s
; i++) {

231 i‡(
uc
[
i
].
c⁄√˘i⁄
) {

232 
	`ngx_˛o£_c⁄√˘i⁄
(
uc
[
i
].
c⁄√˘i⁄
);

236 
	`ngx_‰ì
(
r
);

238 
	}
}

242 
	$ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
)

244 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

245 
ngx_ªsﬁvî_node_t
 *
∫
;

247 
åì
->
roŸ
 !åì->
£¡öñ
) {

249 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
	`ngx_rbåì_mö
(
åì
->
roŸ
,Åªe->
£¡öñ
);

251 
	`ngx_queue_ªmove
(&
∫
->
queue
);

253 
˘x
 = 
∫
->
waôög
; ctx; ctx = 
√xt
) {

254 
√xt
 = 
˘x
->next;

256 i‡(
˘x
->
evít
) {

257 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

260 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

263 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

265 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

267 
	}
}

270 
ngx_ªsﬁvî_˘x_t
 *

271 
	$ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
ãmp
)

273 
ö_addr_t
 
addr
;

274 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

276 i‡(
ãmp
) {

277 
addr
 = 
	`ngx_öë_addr
(
ãmp
->
«me
.
d©a
,Åemp->«me.
Àn
);

279 i‡(
addr
 !
INADDR_NONE
) {

280 
ãmp
->
ªsﬁvî
 = 
r
;

281 
ãmp
->
°©e
 = 
NGX_OK
;

282 
ãmp
->
«ddrs
 = 1;

283 
ãmp
->
addrs
 = &ãmp->
addr
;

284 
ãmp
->
addr
 =áddr;

285 
ãmp
->
quick
 = 1;

287  
ãmp
;

291 i‡(
r
->
udp_c⁄√˘i⁄s
.
√…s
 == 0) {

292  
NGX_NO_RESOLVER
;

295 
˘x
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_ªsﬁvî_˘x_t
));

297 i‡(
˘x
) {

298 
˘x
->
ªsﬁvî
 = 
r
;

301  
˘x
;

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

308 
ngx_öt_t
 
rc
;

309 
ngx_ªsﬁvî_t
 *
r
;

311 
r
 = 
˘x
->
ªsﬁvî
;

313 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

314 "ªsﬁve: \"%V\"", &
˘x
->
«me
);

316 i‡(
˘x
->
quick
) {

317 
˘x
->
	`h™dÀr
(ctx);

318  
NGX_OK
;

323 
rc
 = 
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

325 i‡(
rc
 =
NGX_OK
) {

326  
NGX_OK
;

331 i‡(
rc
 =
NGX_AGAIN
) {

332  
NGX_OK
;

337 i‡(
˘x
->
evít
) {

338 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

341 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

343  
NGX_ERROR
;

344 
	}
}

348 
	$ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

350 
uöt32_t
 
hash
;

351 
ngx_ªsﬁvî_t
 *
r
;

352 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

353 
ngx_ªsﬁvî_node_t
 *
∫
;

355 
r
 = 
˘x
->
ªsﬁvî
;

357 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

358 "ªsﬁvê«mêd⁄e: %i", 
˘x
->
°©e
);

360 i‡(
˘x
->
quick
) {

364 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

365 
	`ngx_dñ_timî
(
˘x
->
evít
);

370 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

372 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

374 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

376 i‡(
∫
) {

377 
p
 = &
∫
->
waôög
;

378 
w
 = 
∫
->
waôög
;

380 
w
) {

381 i‡(
w
 =
˘x
) {

382 *
p
 = 
w
->
√xt
;

384 
d⁄e
;

387 
p
 = &
w
->
√xt
;

388 
w
 = w->
√xt
;

392 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

393 "couldÇŸ c™˚»%VÑesﬁvög", &
˘x
->
«me
);

396 
d⁄e
:

398 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
«me_rbåì
, &r->
«me_expúe_queue
);

404 i‡(
˘x
->
evít
) {

405 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

408 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

411 
	}
}

416 
ngx_öt_t


417 
	$ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

419 
uöt32_t
 
hash
;

420 
ö_addr_t
 
addr
, *
addrs
;

421 
ngx_öt_t
 
rc
;

422 
ngx_uöt_t
 
«ddrs
;

423 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

424 
ngx_ªsﬁvî_node_t
 *
∫
;

426 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

428 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

430 i‡(
∫
) {

432 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

434 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

436 
	`ngx_queue_ªmove
(&
∫
->
queue
);

438 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

440 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

442 
«ddrs
 = 
∫
->naddrs;

444 i‡(
«ddrs
) {

448 i‡(
«ddrs
 != 1) {

449 
addr
 = 0;

450 
addrs
 = 
	`ngx_ªsﬁvî_rŸ©e
(
r
, 
∫
->
u
.addrs, 
«ddrs
);

451 i‡(
addrs
 =
NULL
) {

452  
NGX_ERROR
;

456 
addr
 = 
∫
->
u
.addr;

457 
addrs
 = 
NULL
;

460 
˘x
->
√xt
 = 
∫
->
waôög
;

461 
∫
->
waôög
 = 
NULL
;

466 
˘x
->
°©e
 = 
NGX_OK
;

467 
˘x
->
«ddrs
 =Çaddrs;

468 
˘x
->
addrs
 = (
«ddrs
 =1Ë? &˘x->
addr
 :áddrs;

469 
˘x
->
addr
 =áddr;

470 
√xt
 = 
˘x
->next;

472 
˘x
->
	`h™dÀr
(ctx);

474 
˘x
 = 
√xt
;

475 } 
˘x
);

477 i‡(
addrs
) {

478 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

481  
NGX_OK
;

486 i‡(
˘x
->
ªcursi⁄
++ < 
NGX_RESOLVER_MAX_RECURSION
) {

488 
˘x
->
«me
.
Àn
 = 
∫
->
˙Àn
;

489 
˘x
->
«me
.
d©a
 = 
∫
->
u
.
˙ame
;

491  
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

494 
˘x
->
√xt
 = 
∫
->
waôög
;

495 
∫
->
waôög
 = 
NULL
;

500 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

501 
√xt
 = 
˘x
->next;

503 
˘x
->
	`h™dÀr
(ctx);

505 
˘x
 = 
√xt
;

506 } 
˘x
);

508  
NGX_OK
;

511 i‡(
∫
->
waôög
) {

513 
˘x
->
√xt
 = 
∫
->
waôög
;

514 
∫
->
waôög
 = 
˘x
;

515 
˘x
->
°©e
 = 
NGX_AGAIN
;

517  
NGX_AGAIN
;

520 
	`ngx_queue_ªmove
(&
∫
->
queue
);

524 i‡(
∫
->
quîy
) {

525 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

526 
∫
->
quîy
 = 
NULL
;

529 i‡(
∫
->
˙Àn
) {

530 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

533 i‡(
∫
->
«ddrs
 > 1) {

534 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

541 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

542 i‡(
∫
 =
NULL
) {

543  
NGX_ERROR
;

546 
∫
->
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
˘x
->«me.
d©a
, ctx->«me.
Àn
);

547 i‡(
∫
->
«me
 =
NULL
) {

548 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

549  
NGX_ERROR
;

552 
∫
->
node
.
key
 = 
hash
;

553 
∫
->
∆í
 = (
u_sh‹t
Ë
˘x
->
«me
.
Àn
;

554 
∫
->
quîy
 = 
NULL
;

556 
	`ngx_rbåì_ö£π
(&
r
->
«me_rbåì
, &
∫
->
node
);

559 
rc
 = 
	`ngx_ªsﬁvî_¸óã_«me_quîy
(
∫
, 
˘x
);

561 i‡(
rc
 =
NGX_ERROR
) {

562 
Áûed
;

565 i‡(
rc
 =
NGX_DECLINED
) {

566 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

568 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

569 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

570 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

572 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

573 
˘x
->
	`h™dÀr
(ctx);

575  
NGX_OK
;

578 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

579 
Áûed
;

582 i‡(
˘x
->
evít
 =
NULL
) {

583 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

584 i‡(
˘x
->
evít
 =
NULL
) {

585 
Áûed
;

588 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

589 
˘x
->
evít
->
d©a
 = ctx;

590 
˘x
->
evít
->
log
 = 
r
->log;

591 
˘x
->
idít
 = -1;

593 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

596 i‡(
	`ngx_queue_em±y
(&
r
->
«me_ª£nd_queue
)) {

597 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

600 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

602 
	`ngx_queue_ö£π_hód
(&
r
->
«me_ª£nd_queue
, &
∫
->
queue
);

604 
∫
->
˙Àn
 = 0;

605 
∫
->
«ddrs
 = 0;

606 
∫
->
vÆid
 = 0;

607 
∫
->
waôög
 = 
˘x
;

609 
˘x
->
°©e
 = 
NGX_AGAIN
;

611  
NGX_AGAIN
;

613 
Áûed
:

615 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

617 i‡(
∫
->
quîy
) {

618 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

621 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

623 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

625  
NGX_ERROR
;

626 
	}
}

629 
ngx_öt_t


630 
	$ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

632 
u_ch¨
 *
«me
;

633 
ngx_ªsﬁvî_t
 *
r
;

634 
ngx_ªsﬁvî_node_t
 *
∫
;

636 
r
 = 
˘x
->
ªsﬁvî
;

638 
˘x
->
addr
 = 
	`¡ohl
(ctx->addr);

642 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
˘x
->
addr
);

644 i‡(
∫
) {

646 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

648 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

650 
	`ngx_queue_ªmove
(&
∫
->
queue
);

652 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

654 
	`ngx_queue_ö£π_hód
(&
r
->
addr_expúe_queue
, &
∫
->
queue
);

656 
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Ñn->
∆í
);

657 i‡(
«me
 =
NULL
) {

658 
Áûed
;

661 
˘x
->
«me
.
Àn
 = 
∫
->
∆í
;

662 
˘x
->
«me
.
d©a
 =Çame;

666 
˘x
->
°©e
 = 
NGX_OK
;

668 
˘x
->
	`h™dÀr
(ctx);

670 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
);

672  
NGX_OK
;

675 i‡(
∫
->
waôög
) {

677 
˘x
->
√xt
 = 
∫
->
waôög
;

678 
∫
->
waôög
 = 
˘x
;

679 
˘x
->
°©e
 = 
NGX_AGAIN
;

683  
NGX_OK
;

686 
	`ngx_queue_ªmove
(&
∫
->
queue
);

688 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

689 
∫
->
quîy
 = 
NULL
;

692 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

693 i‡(
∫
 =
NULL
) {

694 
Áûed
;

697 
∫
->
node
.
key
 = 
˘x
->
addr
;

698 
∫
->
quîy
 = 
NULL
;

700 
	`ngx_rbåì_ö£π
(&
r
->
addr_rbåì
, &
∫
->
node
);

703 i‡(
	`ngx_ªsﬁvî_¸óã_addr_quîy
(
∫
, 
˘x
Ë!
NGX_OK
) {

704 
Áûed
;

707 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

708 
Áûed
;

711 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

712 i‡(
˘x
->
evít
 =
NULL
) {

713 
Áûed
;

716 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

717 
˘x
->
evít
->
d©a
 = ctx;

718 
˘x
->
evít
->
log
 = 
r
->log;

719 
˘x
->
idít
 = -1;

721 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

723 i‡(
	`ngx_queue_em±y
(&
r
->
addr_ª£nd_queue
)) {

724 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

727 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

729 
	`ngx_queue_ö£π_hód
(&
r
->
addr_ª£nd_queue
, &
∫
->
queue
);

731 
∫
->
˙Àn
 = 0;

732 
∫
->
«ddrs
 = 0;

733 
∫
->
«me
 = 
NULL
;

734 
∫
->
∆í
 = 0;

735 
∫
->
vÆid
 = 0;

736 
∫
->
waôög
 = 
˘x
;

740 
˘x
->
°©e
 = 
NGX_AGAIN
;

742  
NGX_OK
;

744 
Áûed
:

746 i‡(
∫
) {

747 
	`ngx_rbåì_dñëe
(&
r
->
addr_rbåì
, &
∫
->
node
);

749 i‡(
∫
->
quîy
) {

750 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

753 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

758 i‡(
˘x
->
evít
) {

759 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

762 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

764  
NGX_ERROR
;

765 
	}
}

769 
	$ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

771 
ö_addr_t
 
addr
;

772 
ngx_ªsﬁvî_t
 *
r
;

773 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

774 
ngx_ªsﬁvî_node_t
 *
∫
;

776 
r
 = 
˘x
->
ªsﬁvî
;

778 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

779 "ªsﬁvêadd∏d⁄e: %i", 
˘x
->
°©e
);

781 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

782 
	`ngx_dñ_timî
(
˘x
->
evít
);

787 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

789 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
˘x
->
addr
);

791 i‡(
∫
) {

792 
p
 = &
∫
->
waôög
;

793 
w
 = 
∫
->
waôög
;

795 
w
) {

796 i‡(
w
 =
˘x
) {

797 *
p
 = 
w
->
√xt
;

799 
d⁄e
;

802 
p
 = &
w
->
√xt
;

803 
w
 = w->
√xt
;

807 
addr
 = 
	`¡ohl
(
˘x
->addr);

809 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

811 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

812 (
addr
 >> 8) & 0xff,áddr & 0xff);

815 
d⁄e
:

817 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
addr_rbåì
, &r->
addr_expúe_queue
);

823 i‡(
˘x
->
evít
) {

824 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

827 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

830 
	}
}

834 
	$ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

836 
time_t
 
now
;

837 
ngx_uöt_t
 
i
;

838 
ngx_queue_t
 *
q
;

839 
ngx_ªsﬁvî_node_t
 *
∫
;

841 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolverÉxpire");

843 
now
 = 
	`ngx_time
();

845 
i
 = 0; i < 2; i++) {

846 i‡(
	`ngx_queue_em±y
(
queue
)) {

850 
q
 = 
	`ngx_queue_œ°
(
queue
);

852 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

854 i‡(
now
 <
∫
->
expúe
) {

858 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

859 "ªsﬁvîÉxpúê\"%*s\"", (
size_t
Ë
∫
->
∆í
,Ñn->
«me
);

861 
	`ngx_queue_ªmove
(
q
);

863 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

865 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

867 
	}
}

870 
ngx_öt_t


871 
	$ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

873 
ssize_t
 
n
;

874 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

876 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

878 
uc
 = &uc[
r
->
œ°_c⁄√˘i⁄
++];

879 i‡(
r
->
œ°_c⁄√˘i⁄
 =r->
udp_c⁄√˘i⁄s
.
√…s
) {

880 
r
->
œ°_c⁄√˘i⁄
 = 0;

883 i‡(
uc
->
c⁄√˘i⁄
 =
NULL
) {

885 
uc
->
log
 = *
r
->log;

886 
uc
->
log
.
h™dÀr
 = 
ngx_ªsﬁvî_log_îr‹
;

887 
uc
->
log
.
d©a
 = uc;

888 
uc
->
log
.
a˘i⁄
 = "resolving";

890 i‡(
	`ngx_udp_c⁄√˘
(
uc
Ë!
NGX_OK
) {

891  
NGX_ERROR
;

894 
uc
->
c⁄√˘i⁄
->
d©a
 = 
r
;

895 
uc
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_ªsﬁvî_ªad_ª•⁄£
;

896 
uc
->
c⁄√˘i⁄
->
ªad
->
ªsﬁvî
 = 1;

899 
n
 = 
	`ngx_£nd
(
uc
->
c⁄√˘i⁄
, 
∫
->
quîy
,Ñn->
qÀn
);

901 i‡(
n
 == -1) {

902  
NGX_ERROR
;

905 i‡((
size_t
Ë
n
 !(size_tË
∫
->
qÀn
) {

906 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 0, "send() incomplete");

907  
NGX_ERROR
;

910  
NGX_OK
;

911 
	}
}

915 
	$ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
)

917 
time_t
 
timî
, 
©imî
, 
¡imî
;

918 
ngx_ªsﬁvî_t
 *
r
;

920 
r
 = 
ev
->
d©a
;

922 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

927 
¡imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
«me_rbåì
, &r->
«me_ª£nd_queue
);

933 
©imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr_rbåì
, &r->
addr_ª£nd_queue
);

937 i‡(
¡imî
 == 0) {

938 
timî
 = 
©imî
;

940 } i‡(
©imî
 == 0) {

941 
timî
 = 
¡imî
;

944 
timî
 = (
©imî
 < 
¡imî
) ?átimer :Çtimer;

947 i‡(
timî
) {

948 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë(
timî
 * 1000));

950 
	}
}

953 
time_t


954 
	$ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

956 
time_t
 
now
;

957 
ngx_queue_t
 *
q
;

958 
ngx_ªsﬁvî_node_t
 *
∫
;

960 
now
 = 
	`ngx_time
();

963 i‡(
	`ngx_queue_em±y
(
queue
)) {

967 
q
 = 
	`ngx_queue_œ°
(
queue
);

969 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

971 i‡(
now
 < 
∫
->
expúe
) {

972  
∫
->
expúe
 - 
now
;

975 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

977 (
size_t
Ë
∫
->
∆í
,Ñn->
«me
,Ñn->
waôög
);

979 
	`ngx_queue_ªmove
(
q
);

981 i‡(
∫
->
waôög
) {

983 (Ë
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
);

985 
∫
->
expúe
 = 
now
 + 
r
->
ª£nd_timeout
;

987 
	`ngx_queue_ö£π_hód
(
queue
, 
q
);

992 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

994 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

996 
	}
}

1000 
	$ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
)

1002 
ssize_t
 
n
;

1003 
ngx_c⁄√˘i⁄_t
 *
c
;

1004 
u_ch¨
 
buf
[
NGX_RESOLVER_UDP_SIZE
];

1006 
c
 = 
ªv
->
d©a
;

1009 
n
 = 
	`ngx_udp_ªcv
(
c
, 
buf
, 
NGX_RESOLVER_UDP_SIZE
);

1011 i‡(
n
 < 0) {

1015 
	`ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
c
->
d©a
, 
buf
, 
n
);

1017 } 
ªv
->
ªady
);

1018 
	}
}

1022 
	$ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
)

1024 *
îr
;

1025 
size_t
 
Àn
;

1026 
ngx_uöt_t
 
i
, 
times
, 
idít
, 
qidít
, 
Êags
, 
code
, 
nqs
, 
«n
,

1027 
qty≥
, 
q˛ass
;

1028 
ngx_queue_t
 *
q
;

1029 
ngx_ªsﬁvî_qs_t
 *
qs
;

1030 
ngx_ªsﬁvî_node_t
 *
∫
;

1031 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1033 i‡((
size_t
Ë
n
 < (
ngx_ªsﬁvî_quîy_t
)) {

1034 
sh‹t_ª•⁄£
;

1037 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
buf
;

1039 
idít
 = (
quîy
->
idít_hi
 << 8Ë+ quîy->
idít_lo
;

1040 
Êags
 = (
quîy
->
Êags_hi
 << 8Ë+ quîy->
Êags_lo
;

1041 
nqs
 = (
quîy
->
nqs_hi
 << 8Ë+ quîy->
nqs_lo
;

1042 
«n
 = (
quîy
->
«n_hi
 << 8Ë+ quîy->
«n_lo
;

1044 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1046 
idít
, 
Êags
, 
nqs
, 
«n
,

1047 (
quîy
->
¬s_hi
 << 8Ë+ quîy->
¬s_lo
,

1048 (
quîy
->
«r_hi
 << 8Ë+ quîy->
«r_lo
);

1050 i‡(!(
Êags
 & 0x8000)) {

1051 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1052 "övÆid DNSÑe•⁄£ %uòÊ:%04Xui", 
idít
, 
Êags
);

1056 
code
 = 
Êags
 & 0x7f;

1058 i‡(
code
 =
NGX_RESOLVE_FORMERR
) {

1060 
times
 = 0;

1062 
q
 = 
	`ngx_queue_hód
(&
r
->
«me_ª£nd_queue
);

1063 
q
 !
	`ngx_queue_£¡öñ
(&
r
->
«me_ª£nd_queue
Ë|| 
times
++ < 100;

1064 
q
 = 
	`ngx_queue_√xt
(q))

1066 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1067 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1069 i‡(
qidít
 =
idít
) {

1070 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1072 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
,

1073 
∫
->
∆í
,Ñn->
«me
);

1078 
dns_îr‹
;

1081 i‡(
code
 > 
NGX_RESOLVE_REFUSED
) {

1082 
dns_îr‹
;

1085 i‡(
nqs
 != 1) {

1086 
îr
 = "invalidÇumber of questions in DNSÑesponse";

1087 
d⁄e
;

1090 
i
 = (
ngx_ªsﬁvî_quîy_t
);

1092 
i
 < (
ngx_uöt_t
Ë
n
) {

1093 i‡(
buf
[
i
] == '\0') {

1094 
found
;

1097 
Àn
 = 
buf
[
i
];

1098 
i
 +1 + 
Àn
;

1101 
sh‹t_ª•⁄£
;

1103 
found
:

1105 i‡(
i
++ == 0) {

1106 
îr
 = "zero-length domainÇame in DNSÑesponse";

1107 
d⁄e
;

1110 i‡(
i
 + (
ngx_ªsﬁvî_qs_t
Ë+ 
«n
 * (2 + (
ngx_ªsﬁvî_™_t
))

1111 > (
ngx_uöt_t
Ë
n
)

1113 
sh‹t_ª•⁄£
;

1116 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë&
buf
[
i
];

1118 
qty≥
 = (
qs
->
ty≥_hi
 << 8Ë+ qs->
ty≥_lo
;

1119 
q˛ass
 = (
qs
->
˛ass_hi
 << 8Ë+ qs->
˛ass_lo
;

1121 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1122 "ªsﬁvî DNSÑe•⁄£ qt:%uò˛:%ui", 
qty≥
, 
q˛ass
);

1124 i‡(
q˛ass
 != 1) {

1125 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1126 "unknow¿quîy cœs†%uòö DNSÑe•⁄£", 
q˛ass
);

1130 
qty≥
) {

1132 
NGX_RESOLVE_A
:

1134 
	`ngx_ªsﬁvî_¥o˚ss_a
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
,

1135 
i
 + (
ngx_ªsﬁvî_qs_t
));

1139 
NGX_RESOLVE_PTR
:

1141 
	`ngx_ªsﬁvî_¥o˚ss_±r
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
);

1146 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1147 "unknow¿quîyÅy≥ %uòö DNSÑe•⁄£", 
qty≥
);

1153 
sh‹t_ª•⁄£
:

1155 
îr
 = "short dnsÑesponse";

1157 
d⁄e
:

1159 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1163 
dns_îr‹
:

1165 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1167 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
);

1169 
	}
}

1173 
	$ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
œ°
,

1174 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,Çgx_uöt_à
™s
)

1176 *
îr
;

1177 
u_ch¨
 *
˙ame
;

1178 
size_t
 
Àn
;

1179 
öt32_t
 
âl
;

1180 
uöt32_t
 
hash
;

1181 
ö_addr_t
 
addr
, *
addrs
;

1182 
ngx_°r_t
 
«me
;

1183 
ngx_uöt_t
 
qty≥
, 
qidít
, 
«ddrs
, 
a
, 
i
, 
n
, 
°¨t
;

1184 
ngx_ªsﬁvî_™_t
 *
™
;

1185 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1186 
ngx_ªsﬁvî_node_t
 *
∫
;

1188 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, &buf[12], &buf[
œ°
]Ë!
NGX_OK
) {

1192 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

1194 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
.
d©a
,Çame.
Àn
);

1198 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
«me
, 
hash
);

1200 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

1201 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1202 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1203 
Áûed
;

1206 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1208 i‡(
idít
 !
qidít
) {

1209 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1211 
idít
, &
«me
, 
qidít
);

1212 
Áûed
;

1215 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1217 i‡(
code
 =0 && 
«n
 == 0) {

1218 
code
 = 3;

1221 i‡(
code
) {

1222 
√xt
 = 
∫
->
waôög
;

1223 
∫
->
waôög
 = 
NULL
;

1225 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1227 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

1229 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1233 
√xt
) {

1234 
˘x
 = 
√xt
;

1235 
˘x
->
°©e
 = 
code
;

1236 
√xt
 = 
˘x
->next;

1238 
˘x
->
	`h™dÀr
(ctx);

1244 
i
 = 
™s
;

1245 
«ddrs
 = 0;

1246 
addr
 = 0;

1247 
addrs
 = 
NULL
;

1248 
˙ame
 = 
NULL
;

1249 
qty≥
 = 0;

1250 
âl
 = 0;

1252 
a
 = 0;á < 
«n
;á++) {

1254 
°¨t
 = 
i
;

1256 
i
 < 
œ°
) {

1258 i‡(
buf
[
i
] & 0xc0) {

1259 
i
 += 2;

1260 
found
;

1263 i‡(
buf
[
i
] == 0) {

1264 
i
++;

1265 
ã°_Àngth
;

1268 
i
 +1 + 
buf
[i];

1271 
sh‹t_ª•⁄£
;

1273 
ã°_Àngth
:

1275 i‡(
i
 - 
°¨t
 < 2) {

1276 
îr
 = "invalidÇame in dnsÑesponse";

1277 
övÆid
;

1280 
found
:

1282 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
œ°
) {

1283 
sh‹t_ª•⁄£
;

1286 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1288 
qty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1289 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1290 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

1291 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

1293 i‡(
âl
 < 0) {

1294 
âl
 = 0;

1297 i‡(
qty≥
 =
NGX_RESOLVE_A
) {

1299 
i
 +(
ngx_ªsﬁvî_™_t
);

1301 i‡(
i
 + 
Àn
 > 
œ°
) {

1302 
sh‹t_ª•⁄£
;

1305 
addr
 = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1306 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1308 
«ddrs
++;

1310 
i
 +
Àn
;

1312 } i‡(
qty≥
 =
NGX_RESOLVE_CNAME
) {

1313 
˙ame
 = &
buf
[
i
] + (
ngx_ªsﬁvî_™_t
);

1314 
i
 +(
ngx_ªsﬁvî_™_t
Ë+ 
Àn
;

1316 } i‡(
qty≥
 =
NGX_RESOLVE_DNAME
) {

1317 
i
 +(
ngx_ªsﬁvî_™_t
Ë+ 
Àn
;

1320 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1321 "u√x≥˘ed qty≥ %ui", 
qty≥
);

1325 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1327 
«ddrs
, 
˙ame
, 
âl
);

1329 i‡(
«ddrs
) {

1331 i‡(
«ddrs
 == 1) {

1332 
∫
->
u
.
addr
 =áddr;

1336 
addrs
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö_addr_t
));

1337 i‡(
addrs
 =
NULL
) {

1341 
n
 = 0;

1342 
i
 = 
™s
;

1344 
a
 = 0;á < 
«n
;á++) {

1348 i‡(
buf
[
i
] & 0xc0) {

1349 
i
 += 2;

1350 
ok
;

1353 i‡(
buf
[
i
] == 0) {

1354 
i
++;

1355 
ok
;

1358 
i
 +1 + 
buf
[i];

1361 
ok
:

1363 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1365 
qty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1366 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1368 
i
 +(
ngx_ªsﬁvî_™_t
);

1370 i‡(
qty≥
 =
NGX_RESOLVE_A
) {

1372 
addrs
[
n
++] = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1373 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1375 i‡(
n
 =
«ddrs
) {

1380 
i
 +
Àn
;

1383 
∫
->
u
.
addrs
 =áddrs;

1385 
addrs
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->
u
.addrs,

1386 
«ddrs
 * (
ö_addr_t
));

1387 i‡(
addrs
 =
NULL
) {

1392 
∫
->
«ddrs
 = (
u_sh‹t
)Çaddrs;

1394 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1396 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

1397 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1399 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1401 
√xt
 = 
∫
->
waôög
;

1402 
∫
->
waôög
 = 
NULL
;

1406 
√xt
) {

1407 
˘x
 = 
√xt
;

1408 
˘x
->
°©e
 = 
NGX_OK
;

1409 
˘x
->
«ddrs
 =Çaddrs;

1410 
˘x
->
addrs
 = (
«ddrs
 =1Ë? &˘x->
addr
 :áddrs;

1411 
˘x
->
addr
 =áddr;

1412 
√xt
 = 
˘x
->next;

1414 
˘x
->
	`h™dÀr
(ctx);

1417 i‡(
«ddrs
 > 1) {

1418 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

1421 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1422 
∫
->
quîy
 = 
NULL
;

1426 } i‡(
˙ame
) {

1430 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, 
˙ame
, &buf[
œ°
]Ë!
NGX_OK
) {

1434 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1435 "ªsﬁvî c«me:\"%V\"", &
«me
);

1437 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1439 
∫
->
˙Àn
 = (
u_sh‹t
Ë
«me
.
Àn
;

1440 
∫
->
u
.
˙ame
 = 
«me
.
d©a
;

1442 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

1443 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1445 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1447 
˘x
 = 
∫
->
waôög
;

1448 
∫
->
waôög
 = 
NULL
;

1450 i‡(
˘x
) {

1451 
˘x
->
«me
 =Çame;

1453 (Ë
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

1456 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1457 
∫
->
quîy
 = 
NULL
;

1462 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1464 
qty≥
);

1467 
sh‹t_ª•⁄£
:

1469 
îr
 = "short dnsÑesponse";

1471 
övÆid
:

1475 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1479 
Áûed
:

1483 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1486 
	}
}

1490 
	$ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

1491 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
)

1493 *
îr
;

1494 
size_t
 
Àn
;

1495 
ö_addr_t
 
addr
;

1496 
öt32_t
 
âl
;

1497 
ngx_öt_t
 
digô
;

1498 
ngx_°r_t
 
«me
;

1499 
ngx_uöt_t
 
i
, 
mask
, 
qidít
;

1500 
ngx_ªsﬁvî_™_t
 *
™
;

1501 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1502 
ngx_ªsﬁvî_node_t
 *
∫
;

1504 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, 
NULL
, 
buf
, &buf[12], &buf[
n
]Ë!
NGX_OK
) {

1505 
övÆid_ö_addr_¨∑
;

1508 
addr
 = 0;

1509 
i
 = 12;

1511 
mask
 = 0; mask < 32; mask += 8) {

1512 
Àn
 = 
buf
[
i
++];

1514 
digô
 = 
	`ngx_©oi
(&
buf
[
i
], 
Àn
);

1515 i‡(
digô
 =
NGX_ERROR
 || digit > 255) {

1516 
övÆid_ö_addr_¨∑
;

1519 
addr
 +
digô
 << 
mask
;

1520 
i
 +
Àn
;

1523 i‡(
	`ngx_°rcmp
(&
buf
[
i
], "\7in-addr\4arpa") != 0) {

1524 
övÆid_ö_addr_¨∑
;

1529 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

1531 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

1532 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1534 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

1535 (
addr
 >> 8) & 0xff,áddr & 0xff);

1536 
Áûed
;

1539 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1541 i‡(
idít
 !
qidít
) {

1542 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1544 
idít
, (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

1545 (
addr
 >> 8Ë& 0xff,ádd∏& 0xff, 
qidít
);

1546 
Áûed
;

1549 i‡(
code
 =0 && 
«n
 == 0) {

1550 
code
 = 3;

1553 i‡(
code
) {

1554 
√xt
 = 
∫
->
waôög
;

1555 
∫
->
waôög
 = 
NULL
;

1557 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1559 
	`ngx_rbåì_dñëe
(&
r
->
addr_rbåì
, &
∫
->
node
);

1561 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1565 
√xt
) {

1566 
˘x
 = 
√xt
;

1567 
˘x
->
°©e
 = 
code
;

1568 
√xt
 = 
˘x
->next;

1570 
˘x
->
	`h™dÀr
(ctx);

1576 
i
 +("\7ö-addr\4¨∑"Ë+ (
ngx_ªsﬁvî_qs_t
);

1578 i‡(
i
 + 2 + (
ngx_ªsﬁvî_™_t
Ë> (
ngx_uöt_t
Ë
n
) {

1579 
sh‹t_ª•⁄£
;

1584 i‡(
buf
[
i
] != 0xc0 || buf[i + 1] != 0x0c) {

1585 
îr
 = "invalid in-addr.arpaÇame in DNSÑesponse";

1586 
övÆid
;

1589 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
 + 2];

1591 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1592 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

1593 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

1595 i‡(
âl
 < 0) {

1596 
âl
 = 0;

1599 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1601 (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
,

1602 (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
, 
Àn
);

1604 
i
 +2 + (
ngx_ªsﬁvî_™_t
);

1606 i‡(
i
 + 
Àn
 > (
ngx_uöt_t
Ë
n
) {

1607 
sh‹t_ª•⁄£
;

1610 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, &buf[
i
], &buf[
n
]Ë!
NGX_OK
) {

1614 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvîán:%V", &
«me
);

1616 i‡(
«me
.
Àn
 !(
size_t
Ë
∫
->
∆í


1617 || 
	`ngx_°∫cmp
(
«me
.
d©a
, 
∫
->«me,Çame.
Àn
) != 0)

1619 i‡(
∫
->
∆í
) {

1620 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

1623 
∫
->
∆í
 = (
u_sh‹t
Ë
«me
.
Àn
;

1624 
∫
->
«me
 =Çame.
d©a
;

1626 
«me
.
d©a
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Çame.
Àn
);

1627 i‡(
«me
.
d©a
 =
NULL
) {

1628 
Áûed
;

1632 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1634 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

1635 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1637 
	`ngx_queue_ö£π_hód
(&
r
->
addr_expúe_queue
, &
∫
->
queue
);

1639 
√xt
 = 
∫
->
waôög
;

1640 
∫
->
waôög
 = 
NULL
;

1644 
√xt
) {

1645 
˘x
 = 
√xt
;

1646 
˘x
->
°©e
 = 
NGX_OK
;

1647 
˘x
->
«me
 =Çame;

1648 
√xt
 = 
˘x
->next;

1650 
˘x
->
	`h™dÀr
(ctx);

1653 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1657 
övÆid_ö_addr_¨∑
:

1659 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1663 
sh‹t_ª•⁄£
:

1665 
îr
 = "short DNSÑesponse";

1667 
övÆid
:

1671 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1675 
Áûed
:

1680 
	}
}

1683 
ngx_ªsﬁvî_node_t
 *

1684 
	$ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
)

1686 
ngx_öt_t
 
rc
;

1687 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1688 
ngx_ªsﬁvî_node_t
 *
∫
;

1690 
node
 = 
r
->
«me_rbåì
.
roŸ
;

1691 
£¡öñ
 = 
r
->
«me_rbåì
.sentinel;

1693 
node
 !
£¡öñ
) {

1695 i‡(
hash
 < 
node
->
key
) {

1696 
node
 =Çode->
À·
;

1700 i‡(
hash
 > 
node
->
key
) {

1701 
node
 =Çode->
right
;

1707 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1709 
rc
 = 
	`ngx_memn2cmp
(
«me
->
d©a
, 
∫
->«me,Çame->
Àn
,Ñn->
∆í
);

1711 i‡(
rc
 == 0) {

1712  
∫
;

1715 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1720  
NULL
;

1721 
	}
}

1724 
ngx_ªsﬁvî_node_t
 *

1725 
	$ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 
addr
)

1727 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1729 
node
 = 
r
->
addr_rbåì
.
roŸ
;

1730 
£¡öñ
 = 
r
->
addr_rbåì
.sentinel;

1732 
node
 !
£¡öñ
) {

1734 i‡(
addr
 < 
node
->
key
) {

1735 
node
 =Çode->
À·
;

1739 i‡(
addr
 > 
node
->
key
) {

1740 
node
 =Çode->
right
;

1746  (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1751  
NULL
;

1752 
	}
}

1756 
	$ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1757 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1759 
ngx_rbåì_node_t
 **
p
;

1760 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

1764 i‡(
node
->
key
 < 
ãmp
->key) {

1766 
p
 = &
ãmp
->
À·
;

1768 } i‡(
node
->
key
 > 
ãmp
->key) {

1770 
p
 = &
ãmp
->
right
;

1774 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1775 
∫_ãmp
 = (
ngx_ªsﬁvî_node_t
 *Ë
ãmp
;

1777 
p
 = (
	`ngx_memn2cmp
(
∫
->
«me
, 
∫_ãmp
->«me,Ñn->
∆í
,Ñn_temp->nlen)

1778 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

1781 i‡(*
p
 =
£¡öñ
) {

1785 
ãmp
 = *
p
;

1788 *
p
 = 
node
;

1789 
node
->
∑ª¡
 = 
ãmp
;

1790 
node
->
À·
 = 
£¡öñ
;

1791 
node
->
right
 = 
£¡öñ
;

1792 
	`ngx_rbt_ªd
(
node
);

1793 
	}
}

1796 
ngx_öt_t


1797 
	$ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1799 
u_ch¨
 *
p
, *
s
;

1800 
size_t
 
Àn
, 
∆í
;

1801 
ngx_uöt_t
 
idít
;

1802 
ngx_ªsﬁvî_qs_t
 *
qs
;

1803 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1805 
∆í
 = 
˘x
->
«me
.
Àn
 ? (1 + ctx->name.len + 1) : 1;

1807 
Àn
 = (
ngx_ªsﬁvî_quîy_t
Ë+ 
∆í
 + (
ngx_ªsﬁvî_qs_t
);

1809 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

1810 i‡(
p
 =
NULL
) {

1811  
NGX_ERROR
;

1814 
∫
->
qÀn
 = (
u_sh‹t
Ë
Àn
;

1815 
∫
->
quîy
 = 
p
;

1817 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
p
;

1819 
idít
 = 
	`ngx_øndom
();

1821 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
ªsﬁvî
->
log
, 0,

1822 "ªsﬁve: \"%V\" %i", &
˘x
->
«me
, 
idít
 & 0xffff);

1824 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

1825 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

1828 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

1831 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

1832 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

1833 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

1834 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

1836 
p
 +(
ngx_ªsﬁvî_quîy_t
Ë+ 
∆í
;

1838 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

1841 
qs
->
ty≥_hi
 = 0; qs->
ty≥_lo
 = (
u_ch¨
Ë
˘x
->
ty≥
;

1844 
qs
->
˛ass_hi
 = 0; qs->
˛ass_lo
 = 1;

1848 
Àn
 = 0;

1849 
p
--;

1850 *
p
-- = '\0';

1852 i‡(
˘x
->
«me
.
Àn
 == 0) {

1853  
NGX_DECLINED
;

1856 
s
 = 
˘x
->
«me
.
d©a
 + ctx->«me.
Àn
 - 1; s >= ctx->name.data; s--) {

1857 i‡(*
s
 != '.') {

1858 *
p
 = *
s
;

1859 
Àn
++;

1862 i‡(
Àn
 == 0 ||Üen > 255) {

1863  
NGX_DECLINED
;

1866 *
p
 = (
u_ch¨
Ë
Àn
;

1867 
Àn
 = 0;

1870 
p
--;

1873 i‡(
Àn
 == 0 ||Üen > 255) {

1874  
NGX_DECLINED
;

1877 *
p
 = (
u_ch¨
Ë
Àn
;

1879  
NGX_OK
;

1880 
	}
}

1885 
ngx_öt_t


1886 
	$ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1888 
u_ch¨
 *
p
, *
d
;

1889 
size_t
 
Àn
;

1890 
ngx_öt_t
 
n
;

1891 
ngx_uöt_t
 
idít
;

1892 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1894 
Àn
 = (
ngx_ªsﬁvî_quîy_t
)

1896 + (
ngx_ªsﬁvî_qs_t
);

1898 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

1899 i‡(
p
 =
NULL
) {

1900  
NGX_ERROR
;

1903 
∫
->
quîy
 = 
p
;

1904 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
p
;

1906 
idít
 = 
	`ngx_øndom
();

1908 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

1909 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

1912 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

1915 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

1916 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

1917 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

1918 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

1920 
p
 +(
ngx_ªsﬁvî_quîy_t
);

1922 
n
 = 0;Ç < 32;Ç += 8) {

1923 
d
 = 
	`ngx_•rötf
(&
p
[1], "%ud", (
˘x
->
addr
 >> 
n
) & 0xff);

1924 *
p
 = (
u_ch¨
Ë(
d
 - &p[1]);

1925 
p
 = 
d
;

1929 
	`ngx_mem˝y
(
p
, "\7in-addr\4arpa\0\0\14\0\1", 18);

1931 
∫
->
qÀn
 = (
u_sh‹t
)

1932 (
p
 + ("\7ö-addr\4¨∑"Ë+ (
ngx_ªsﬁvî_qs_t
)

1933 - 
∫
->
quîy
);

1935  
NGX_OK
;

1936 
	}
}

1939 
ngx_öt_t


1940 
	$ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
u_ch¨
 *
buf
, u_ch¨ *
§c
,

1941 
u_ch¨
 *
œ°
)

1943 *
îr
;

1944 
u_ch¨
 *
p
, *
d°
;

1945 
ssize_t
 
Àn
;

1946 
ngx_uöt_t
 
i
, 
n
;

1948 
p
 = 
§c
;

1949 
Àn
 = -1;

1956 
i
 = 0; i < 128; i++) {

1957 
n
 = *
p
++;

1959 i‡(
n
 == 0) {

1960 
d⁄e
;

1963 i‡(
n
 & 0xc0) {

1964 
n
 = (“ & 0x3fË<< 8Ë+ *
p
;

1965 
p
 = &
buf
[
n
];

1968 
Àn
 +1 + 
n
;

1969 
p
 = &p[
n
];

1972 i‡(
p
 >
œ°
) {

1973 
îr
 = "name is out ofÑesponse";

1974 
övÆid
;

1978 
îr
 = "compressionÖointersÜoop";

1980 
övÆid
:

1982 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1984  
NGX_ERROR
;

1986 
d⁄e
:

1988 i‡(
«me
 =
NULL
) {

1989  
NGX_OK
;

1992 i‡(
Àn
 == -1) {

1993 
«me
->
Àn
 = 0;

1994 
«me
->
d©a
 = 
NULL
;

1995  
NGX_OK
;

1998 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

1999 i‡(
d°
 =
NULL
) {

2000  
NGX_ERROR
;

2003 
«me
->
d©a
 = 
d°
;

2005 
n
 = *
§c
++;

2008 i‡(
n
 & 0xc0) {

2009 
n
 = (“ & 0x3fË<< 8Ë+ *
§c
;

2010 
§c
 = &
buf
[
n
];

2012 
n
 = *
§c
++;

2015 
	`ngx_mem˝y
(
d°
, 
§c
, 
n
);

2016 
d°
 +
n
;

2017 
§c
 +
n
;

2019 
n
 = *
§c
++;

2021 i‡(
n
 != 0) {

2022 *
d°
++ = '.';

2026 i‡(
n
 == 0) {

2027 
«me
->
Àn
 = 
d°
 -Çame->
d©a
;

2028  
NGX_OK
;

2031 
	}
}

2035 
	$ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
)

2037 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

2039 
˘x
 = 
ev
->
d©a
;

2041 
˘x
->
°©e
 = 
NGX_RESOLVE_TIMEDOUT
;

2043 
˘x
->
	`h™dÀr
(ctx);

2044 
	}
}

2048 
	$ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

2052 i‡(
∫
->
quîy
) {

2053 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

2056 i‡(
∫
->
«me
) {

2057 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
«me
);

2060 i‡(
∫
->
˙Àn
) {

2061 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

2064 i‡(
∫
->
«ddrs
 > 1) {

2065 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

2068 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
);

2071 
	}
}

2075 
	$ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2077 
u_ch¨
 *
p
;

2081 
p
 = 
	`ngx_Æloc
(
size
, 
r
->
log
);

2085  
p
;

2086 
	}
}

2090 
	$ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2092 
u_ch¨
 *
p
;

2094 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2096 i‡(
p
) {

2097 
	`ngx_memzîo
(
p
, 
size
);

2100  
p
;

2101 
	}
}

2105 
	$ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2109 
	`ngx_‰ì
(
p
);

2112 
	}
}

2116 
	$ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2118 
	`ngx_‰ì
(
p
);

2119 
	}
}

2123 
	$ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
)

2125 *
d°
;

2127 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2129 i‡(
d°
 =
NULL
) {

2130  
d°
;

2133 
	`ngx_mem˝y
(
d°
, 
§c
, 
size
);

2135  
d°
;

2136 
	}
}

2139 
ö_addr_t
 *

2140 
	$ngx_ªsﬁvî_rŸ©e
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 *
§c
, 
ngx_uöt_t
 
n
)

2142 *
d°
, *
p
;

2143 
ngx_uöt_t
 
j
;

2145 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
n
 * (
ö_addr_t
));

2147 i‡(
d°
 =
NULL
) {

2148  
d°
;

2151 
j
 = 
	`ngx_øndom
(Ë% 
n
;

2153 i‡(
j
 == 0) {

2154 
	`ngx_mem˝y
(
d°
, 
§c
, 
n
 * (
ö_addr_t
));

2155  
d°
;

2158 
p
 = 
	`ngx_˝ymem
(
d°
, &
§c
[
j
], (
n
 - jË* (
ö_addr_t
));

2159 
	`ngx_mem˝y
(
p
, 
§c
, 
j
 * (
ö_addr_t
));

2161  
d°
;

2162 
	}
}

2166 
	$ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
)

2168 *
îr‹s
[] = {

2176 i‡(
îr
 > 0 &&Érr < 6) {

2177  
îr‹s
[
îr
 - 1];

2180 i‡(
îr
 =
NGX_RESOLVE_TIMEDOUT
) {

2185 
	}
}

2188 
u_ch¨
 *

2189 
	$ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

2191 
u_ch¨
 *
p
;

2192 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

2194 
p
 = 
buf
;

2196 i‡(
log
->
a˘i⁄
) {

2197 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

2198 
Àn
 -
p
 - 
buf
;

2201 
uc
 = 
log
->
d©a
;

2203 i‡(
uc
) {

2204 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñesﬁvî: %V", &
uc
->
£rvî
);

2207  
p
;

2208 
	}
}

2211 
ngx_öt_t


2212 
	$ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
)

2214 
rc
;

2215 
ngx_öt_t
 
evít
;

2216 
ngx_evít_t
 *
ªv
, *
wev
;

2217 
ngx_sockë_t
 
s
;

2218 
ngx_c⁄√˘i⁄_t
 *
c
;

2220 
s
 = 
	`ngx_sockë
(
uc
->
sockaddr
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

2222 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0, "UDP sockë %d", 
s
);

2224 i‡(
s
 == -1) {

2225 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2226 
ngx_sockë_n
 " failed");

2227  
NGX_ERROR
;

2230 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, &
uc
->
log
);

2232 i‡(
c
 =
NULL
) {

2233 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

2234 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2235 
ngx_˛o£_sockë_n
 "failed");

2238  
NGX_ERROR
;

2241 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

2242 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2243 
ngx_n⁄blockög_n
 " failed");

2245 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

2247 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

2248 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2249 
ngx_˛o£_sockë_n
 " failed");

2252  
NGX_ERROR
;

2255 
ªv
 = 
c
->
ªad
;

2256 
wev
 = 
c
->
wrôe
;

2258 
ªv
->
log
 = &
uc
->log;

2259 
wev
->
log
 = &
uc
->log;

2261 
uc
->
c⁄√˘i⁄
 = 
c
;

2263 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

2265 #i‡(
NGX_THREADS
)

2269 
ªv
->
lock
 = &
c
->lock;

2270 
wev
->
lock
 = &
c
->lock;

2271 
ªv
->
own_lock
 = &
c
->
lock
;

2272 
wev
->
own_lock
 = &
c
->
lock
;

2276 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0,

2277 "c⁄√˘Åÿ%V, fd:%d #%d", &
uc
->
£rvî
, 
s
, 
c
->
numbî
);

2279 
rc
 = 
	`c⁄√˘
(
s
, 
uc
->
sockaddr
, uc->
sockÀn
);

2283 i‡(
rc
 == -1) {

2284 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2287  
NGX_ERROR
;

2291 
wev
->
ªady
 = 1;

2293 i‡(
ngx_add_evít
) {

2295 
evít
 = (
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) ?

2296  
NGX_CLEAR_EVENT
:

2297  
NGX_LEVEL_EVENT
;

2300 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

2301  
NGX_ERROR
;

2307 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

2308  
NGX_ERROR
;

2312  
NGX_OK
;

2313 
	}
}

	@src/core/ngx_resolver.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_RESOLVER_H_INCLUDED_


13 
	#_NGX_RESOLVER_H_INCLUDED_


	)

16 
	#NGX_RESOLVE_A
 1

	)

17 
	#NGX_RESOLVE_CNAME
 5

	)

18 
	#NGX_RESOLVE_PTR
 12

	)

19 
	#NGX_RESOLVE_MX
 15

	)

20 
	#NGX_RESOLVE_TXT
 16

	)

21 
	#NGX_RESOLVE_DNAME
 39

	)

23 
	#NGX_RESOLVE_FORMERR
 1

	)

24 
	#NGX_RESOLVE_SERVFAIL
 2

	)

25 
	#NGX_RESOLVE_NXDOMAIN
 3

	)

26 
	#NGX_RESOLVE_NOTIMP
 4

	)

27 
	#NGX_RESOLVE_REFUSED
 5

	)

28 
	#NGX_RESOLVE_TIMEDOUT
 
NGX_ETIMEDOUT


	)

31 
	#NGX_NO_RESOLVER
 (*Ë-1

	)

33 
	#NGX_RESOLVER_MAX_RECURSION
 50

	)

37 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

38 
sockaddr
 *
	msockaddr
;

39 
sockÀn_t
 
	msockÀn
;

40 
ngx_°r_t
 
	m£rvî
;

41 
ngx_log_t
 
	mlog
;

42 } 
	tngx_udp_c⁄√˘i⁄_t
;

45 
ngx_ªsﬁvî_˘x_s
 
	tngx_ªsﬁvî_˘x_t
;

47 (*
	tngx_ªsﬁvî_h™dÀr_±
)(
	tngx_ªsﬁvî_˘x_t
 *
	t˘x
);

51 
ngx_rbåì_node_t
 
node
;

52 
ngx_queue_t
 
queue
;

55 
u_ch¨
 *
«me
;

57 
u_sh‹t
 
∆í
;

58 
u_sh‹t
 
qÀn
;

60 
u_ch¨
 *
quîy
;

63 
ö_addr_t
 
addr
;

64 
ö_addr_t
 *
addrs
;

65 
u_ch¨
 *
˙ame
;

66 } 
u
;

68 
u_sh‹t
 
«ddrs
;

69 
u_sh‹t
 
˙Àn
;

71 
time_t
 
expúe
;

72 
time_t
 
vÆid
;

74 
ngx_ªsﬁvî_˘x_t
 *
waôög
;

75 } 
	tngx_ªsﬁvî_node_t
;

80 
ngx_evít_t
 *
evít
;

81 *
dummy
;

82 
ngx_log_t
 *
log
;

85 
ngx_öt_t
 
idít
;

88 
ngx_¨øy_t
 
udp_c⁄√˘i⁄s
;

89 
ngx_uöt_t
 
œ°_c⁄√˘i⁄
;

91 
ngx_rbåì_t
 
«me_rbåì
;

92 
ngx_rbåì_node_t
 
«me_£¡öñ
;

94 
ngx_rbåì_t
 
addr_rbåì
;

95 
ngx_rbåì_node_t
 
addr_£¡öñ
;

97 
ngx_queue_t
 
«me_ª£nd_queue
;

98 
ngx_queue_t
 
addr_ª£nd_queue
;

100 
ngx_queue_t
 
«me_expúe_queue
;

101 
ngx_queue_t
 
addr_expúe_queue
;

103 
time_t
 
ª£nd_timeout
;

104 
time_t
 
expúe
;

105 
time_t
 
vÆid
;

107 
ngx_uöt_t
 
log_Àvñ
;

108 } 
	tngx_ªsﬁvî_t
;

111 
	sngx_ªsﬁvî_˘x_s
 {

112 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

113 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

114 
ngx_udp_c⁄√˘i⁄_t
 *
udp_c⁄√˘i⁄
;

117 
ngx_öt_t
 
idít
;

119 
ngx_öt_t
 
°©e
;

120 
ngx_öt_t
 
ty≥
;

121 
ngx_°r_t
 
«me
;

123 
ngx_uöt_t
 
«ddrs
;

124 
ö_addr_t
 *
addrs
;

125 
ö_addr_t
 
addr
;

127 
ngx_ªsﬁvî_h™dÀr_±
 
h™dÀr
;

128 *
d©a
;

129 
ngx_m£c_t
 
timeout
;

131 
ngx_uöt_t
 
quick
;

132 
ngx_uöt_t
 
ªcursi⁄
;

133 
ngx_evít_t
 *
evít
;

137 
ngx_ªsﬁvî_t
 *
	`ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
,

138 
ngx_uöt_t
 
n
);

139 
ngx_ªsﬁvî_˘x_t
 *
	`ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
,

140 
ngx_ªsﬁvî_˘x_t
 *
ãmp
);

141 
ngx_öt_t
 
	`ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

142 
	`ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

143 
ngx_öt_t
 
	`ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

144 
	`ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

145 *
	`ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
);

	@src/core/ngx_sha1.h

8 #i‚de‡
_NGX_SHA1_H_INCLUDED_


9 
	#_NGX_SHA1_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_OPENSSL_SHA1_H
)

17 
	~<›ís¶/sha.h
>

19 
	~<sha.h
>

23 
SHA_CTX
 
	tngx_sha1_t
;

26 
	#ngx_sha1_öô
 
SHA1_Inô


	)

27 
	#ngx_sha1_upd©e
 
SHA1_Upd©e


	)

28 
	#ngx_sha1_föÆ
 
SHA1_FöÆ


	)

	@src/core/ngx_shmtx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_ATOMIC_OPS
)

15 
ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
);

18 
ngx_öt_t


19 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

21 
mtx
->
lock
 = &
addr
->lock;

23 i‡(
mtx
->
•ö
 =(
ngx_uöt_t
) -1) {

24  
NGX_OK
;

27 
mtx
->
•ö
 = 2048;

29 #i‡(
NGX_HAVE_POSIX_SEM
)

31 
mtx
->
waô
 = &
addr
->wait;

33 i‡(
	`£m_öô
(&
mtx
->
£m
, 1, 0) == -1) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

37 
mtx
->
£m≠h‹e
 = 1;

42  
NGX_OK
;

43 
	}
}

47 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

49 #i‡(
NGX_HAVE_POSIX_SEM
)

51 i‡(
mtx
->
£m≠h‹e
) {

52 i‡(
	`£m_de°roy
(&
mtx
->
£m
) == -1) {

53 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

59 
	}
}

62 
ngx_uöt_t


63 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

65  (*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
));

66 
	}
}

70 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

72 
ngx_uöt_t
 
i
, 
n
;

74 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtxÜock");

78 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

82 i‡(
ngx_n˝u
 > 1) {

84 
n
 = 1;Ç < 
mtx
->
•ö
;Ç <<= 1) {

86 
i
 = 0; i < 
n
; i++) {

87 
	`ngx_˝u_∑u£
();

90 i‡(*
mtx
->
lock
 == 0

91 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 0, 
ngx_pid
))

98 #i‡(
NGX_HAVE_POSIX_SEM
)

100 i‡(
mtx
->
£m≠h‹e
) {

101 (Ë
	`ngx_©omic_„tch_add
(
mtx
->
waô
, 1);

103 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

107 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

108 "shmtx waô %uA", *
mtx
->
waô
);

110 
	`£m_waô
(&
mtx
->
£m
) == -1) {

111 
ngx_îr_t
 
îr
;

113 
îr
 = 
ngx_î∫o
;

115 i‡(
îr
 !
NGX_EINTR
) {

116 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

122 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

130 
	`ngx_sched_yõld
();

132 
	}
}

136 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

138 i‡(
mtx
->
•ö
 !(
ngx_uöt_t
) -1) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtx unlock");

142 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
ngx_pid
, 0)) {

143 
	`ngx_shmtx_wakeup
(
mtx
);

145 
	}
}

148 
ngx_uöt_t


149 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

151 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

154 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
pid
, 0)) {

155 
	`ngx_shmtx_wakeup
(
mtx
);

160 
	}
}

164 
	$ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
)

166 #i‡(
NGX_HAVE_POSIX_SEM
)

167 
ngx_©omic_uöt_t
 
waô
;

169 i‡(!
mtx
->
£m≠h‹e
) {

175 
waô
 = *
mtx
->wait;

177 i‡(
waô
 == 0) {

181 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
waô
, wait, wait - 1)) {

186 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

187 "shmtx wakê%uA", 
waô
);

189 i‡(
	`£m_po°
(&
mtx
->
£m
) == -1) {

190 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

195 
	}
}

201 
ngx_öt_t


202 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

204 i‡(
mtx
->
«me
) {

206 i‡(
	`ngx_°rcmp
(
«me
, 
mtx
->name) == 0) {

207 
mtx
->
«me
 =Çame;

208  
NGX_OK
;

211 
	`ngx_shmtx_de°roy
(
mtx
);

214 
mtx
->
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

215 
NGX_FILE_DEFAULT_ACCESS
);

217 i‡(
mtx
->
fd
 =
NGX_INVALID_FILE
) {

218 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

219 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

220  
NGX_ERROR
;

223 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

224 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

225 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

228 
mtx
->
«me
 =Çame;

230  
NGX_OK
;

231 
	}
}

235 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

237 i‡(
	`ngx_˛o£_fûe
(
mtx
->
fd
Ë=
NGX_FILE_ERROR
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

239 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
mtx
->
«me
);

241 
	}
}

244 
ngx_uöt_t


245 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

247 
ngx_îr_t
 
îr
;

249 
îr
 = 
	`ngx_åylock_fd
(
mtx
->
fd
);

251 i‡(
îr
 == 0) {

255 i‡(
îr
 =
NGX_EAGAIN
) {

259 #i‡
__osf__


261 i‡(
îr
 =
NGX_EACCESS
) {

267 
	`ngx_log_ab‹t
(
îr
, 
ngx_åylock_fd_n
 " %†Áûed", 
mtx
->
«me
);

270 
	}
}

274 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

276 
ngx_îr_t
 
îr
;

278 
îr
 = 
	`ngx_lock_fd
(
mtx
->
fd
);

280 i‡(
îr
 == 0) {

284 
	`ngx_log_ab‹t
(
îr
, 
ngx_lock_fd_n
 " %†Áûed", 
mtx
->
«me
);

285 
	}
}

289 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

291 
ngx_îr_t
 
îr
;

293 
îr
 = 
	`ngx_u∆ock_fd
(
mtx
->
fd
);

295 i‡(
îr
 == 0) {

299 
	`ngx_log_ab‹t
(
îr
, 
ngx_u∆ock_fd_n
 " %†Áûed", 
mtx
->
«me
);

300 
	}
}

303 
ngx_uöt_t


304 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

307 
	}
}

	@src/core/ngx_shmtx.h

8 #i‚de‡
_NGX_SHMTX_H_INCLUDED_


9 
	#_NGX_SHMTX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
ngx_©omic_t
 
	mlock
;

18 #i‡(
NGX_HAVE_POSIX_SEM
)

19 
ngx_©omic_t
 
	mwaô
;

21 } 
	tngx_shmtx_sh_t
;

25 #i‡(
NGX_HAVE_ATOMIC_OPS
)

26 
ngx_©omic_t
 *
	mlock
;

27 #i‡(
NGX_HAVE_POSIX_SEM
)

28 
ngx_©omic_t
 *
	mwaô
;

29 
ngx_uöt_t
 
	m£m≠h‹e
;

30 
£m_t
 
	m£m
;

33 
ngx_fd_t
 
	mfd
;

34 
u_ch¨
 *
	m«me
;

36 
ngx_uöt_t
 
	m•ö
;

37 } 
	tngx_shmtx_t
;

40 
ngx_öt_t
 
ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
,

41 
u_ch¨
 *
«me
);

42 
ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
);

43 
ngx_uöt_t
 
ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
);

44 
ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
);

45 
ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
);

46 
ngx_uöt_t
 
ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
);

	@src/core/ngx_slab.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
	#NGX_SLAB_PAGE_MASK
 3

	)

12 
	#NGX_SLAB_PAGE
 0

	)

13 
	#NGX_SLAB_BIG
 1

	)

14 
	#NGX_SLAB_EXACT
 2

	)

15 
	#NGX_SLAB_SMALL
 3

	)

17 #i‡(
NGX_PTR_SIZE
 == 4)

19 
	#NGX_SLAB_PAGE_FREE
 0

	)

20 
	#NGX_SLAB_PAGE_BUSY
 0xffffffff

	)

21 
	#NGX_SLAB_PAGE_START
 0x80000000

	)

23 
	#NGX_SLAB_SHIFT_MASK
 0x0000000f

	)

24 
	#NGX_SLAB_MAP_MASK
 0xffff0000

	)

25 
	#NGX_SLAB_MAP_SHIFT
 16

	)

27 
	#NGX_SLAB_BUSY
 0xffffffff

	)

31 
	#NGX_SLAB_PAGE_FREE
 0

	)

32 
	#NGX_SLAB_PAGE_BUSY
 0xffffffffffffffff

	)

33 
	#NGX_SLAB_PAGE_START
 0x8000000000000000

	)

35 
	#NGX_SLAB_SHIFT_MASK
 0x000000000000000f

	)

36 
	#NGX_SLAB_MAP_MASK
 0xffffffff00000000

	)

37 
	#NGX_SLAB_MAP_SHIFT
 32

	)

39 
	#NGX_SLAB_BUSY
 0xffffffffffffffff

	)

44 #i‡(
NGX_DEBUG_MALLOC
)

46 
	#ngx_¶ab_junk
(
p
, 
size
Ë
	`ngx_mem£t
’, 0xA5, size)

	)

48 #ñi‡(
NGX_HAVE_DEBUG_MALLOC
)

50 
	#ngx_¶ab_junk
(
p
, 
size
) \

51 i‡(
ngx_debug_mÆloc
Ë
	`ngx_mem£t
(
p
, 0xA5, 
size
)

	)

55 
	#ngx_¶ab_junk
(
p
, 
size
)

	)

59 
ngx_¶ab_∑ge_t
 *
ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
,

60 
ngx_uöt_t
 
∑ges
);

61 
ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

62 
ngx_uöt_t
 
∑ges
);

63 
ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
,

64 *
ãxt
);

67 
ngx_uöt_t
 
	gngx_¶ab_max_size
;

68 
ngx_uöt_t
 
	gngx_¶ab_exa˘_size
;

69 
ngx_uöt_t
 
	gngx_¶ab_exa˘_shi·
;

73 
	$ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
)

75 
u_ch¨
 *
p
;

76 
size_t
 
size
;

77 
ngx_öt_t
 
m
;

78 
ngx_uöt_t
 
i
, 
n
, 
∑ges
;

79 
ngx_¶ab_∑ge_t
 *
¶Ÿs
;

82 i‡(
ngx_¶ab_max_size
 == 0) {

83 
ngx_¶ab_max_size
 = 
ngx_∑gesize
 / 2;

84 
ngx_¶ab_exa˘_size
 = 
ngx_∑gesize
 / (8 * (
uöçå_t
));

85 
n
 = 
ngx_¶ab_exa˘_size
;Ç >>1; 
ngx_¶ab_exa˘_shi·
++) {

91 
poﬁ
->
mö_size
 = 1 <<Öoﬁ->
mö_shi·
;

93 
p
 = (
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
);

94 
size
 = 
poﬁ
->
íd
 - 
p
;

96 
	`ngx_¶ab_junk
(
p
, 
size
);

98 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

99 
n
 = 
ngx_∑gesize_shi·
 - 
poﬁ
->
mö_shi·
;

101 
i
 = 0; i < 
n
; i++) {

102 
¶Ÿs
[
i
].
¶ab
 = 0;

103 
¶Ÿs
[
i
].
√xt
 = &slots[i];

104 
¶Ÿs
[
i
].
¥ev
 = 0;

107 
p
 +
n
 * (
ngx_¶ab_∑ge_t
);

109 
∑ges
 = (
ngx_uöt_t
Ë(
size
 / (
ngx_∑gesize
 + (
ngx_¶ab_∑ge_t
)));

111 
	`ngx_memzîo
(
p
, 
∑ges
 * (
ngx_¶ab_∑ge_t
));

113 
poﬁ
->
∑ges
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

115 
poﬁ
->
‰ì
.
¥ev
 = 0;

116 
poﬁ
->
‰ì
.
√xt
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

118 
poﬁ
->
∑ges
->
¶ab
 =Öages;

119 
poﬁ
->
∑ges
->
√xt
 = &poﬁ->
‰ì
;

120 
poﬁ
->
∑ges
->
¥ev
 = (
uöçå_t
Ë&poﬁ->
‰ì
;

122 
poﬁ
->
°¨t
 = (
u_ch¨
 *)

123 
	`ngx_Æign_±r
((
uöçå_t
Ë
p
 + 
∑ges
 * (
ngx_¶ab_∑ge_t
),

124 
ngx_∑gesize
);

126 
m
 = 
∑ges
 - (
poﬁ
->
íd
 -Öoﬁ->
°¨t
Ë/ 
ngx_∑gesize
;

127 i‡(
m
 > 0) {

128 
∑ges
 -
m
;

129 
poﬁ
->
∑ges
->
¶ab
 =Öages;

132 
poﬁ
->
log_˘x
 = &poﬁ->
zîo
;

133 
poﬁ
->
zîo
 = '\0';

134 
	}
}

138 
	$ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

140 *
p
;

142 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

144 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

146 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

148  
p
;

149 
	}
}

153 
	$ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

155 
size_t
 
s
;

156 
uöçå_t
 
p
, 
n
, 
m
, 
mask
, *
bôm≠
;

157 
ngx_uöt_t
 
i
, 
¶Ÿ
, 
shi·
, 
m≠
;

158 
ngx_¶ab_∑ge_t
 *
∑ge
, *
¥ev
, *
¶Ÿs
;

160 i‡(
size
 >
ngx_¶ab_max_size
) {

162 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

163 "¶abáŒoc: %uz", 
size
);

165 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, (
size
 >> 
ngx_∑gesize_shi·
)

166 + ((
size
 % 
ngx_∑gesize
) ? 1 : 0));

167 i‡(
∑ge
) {

168 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

169 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

172 
p
 = 0;

175 
d⁄e
;

178 i‡(
size
 > 
poﬁ
->
mö_size
) {

179 
shi·
 = 1;

180 
s
 = 
size
 - 1; s >>1; 
shi·
++) { }

181 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

184 
size
 = 
poﬁ
->
mö_size
;

185 
shi·
 = 
poﬁ
->
mö_shi·
;

186 
¶Ÿ
 = 0;

189 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

190 "¶abáŒoc: %uz slŸ: %ui", 
size
, 
¶Ÿ
);

192 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

193 
∑ge
 = 
¶Ÿs
[
¶Ÿ
].
√xt
;

195 i‡(
∑ge
->
√xt
 !=Öage) {

197 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

200 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

201 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

203 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
))

204 / ((
uöçå_t
) * 8);

206 
n
 = 0;Ç < 
m≠
;Ç++) {

208 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

210 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

211 i‡((
bôm≠
[
n
] & 
m
)) {

215 
bôm≠
[
n
] |
m
;

217 
i
 = ((
n
 * (
uöçå_t
Ë* 8Ë<< 
shi·
)

218 + (
i
 << 
shi·
);

220 i‡(
bôm≠
[
n
] =
NGX_SLAB_BUSY
) {

221 
n
 =Ç + 1;Ç < 
m≠
;Ç++) {

222 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

223 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

225 
d⁄e
;

229 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

230 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

231 
¥ev
->
√xt
 = 
∑ge
->next;

232 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

234 
∑ge
->
√xt
 = 
NULL
;

235 
∑ge
->
¥ev
 = 
NGX_SLAB_SMALL
;

238 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

240 
d⁄e
;

245 
∑ge
 =Öage->
√xt
;

247 } 
∑ge
);

249 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

252 i‡(
∑ge
->
¶ab
 !
NGX_SLAB_BUSY
) {

254 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

255 i‡((
∑ge
->
¶ab
 & 
m
)) {

259 
∑ge
->
¶ab
 |
m
;

261 i‡(
∑ge
->
¶ab
 =
NGX_SLAB_BUSY
) {

262 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

263 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

264 
¥ev
->
√xt
 = 
∑ge
->next;

265 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

267 
∑ge
->
√xt
 = 
NULL
;

268 
∑ge
->
¥ev
 = 
NGX_SLAB_EXACT
;

271 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

272 
p
 +
i
 << 
shi·
;

273 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

275 
d⁄e
;

279 
∑ge
 =Öage->
√xt
;

281 } 
∑ge
);

285 
n
 = 
ngx_∑gesize_shi·
 - (
∑ge
->
¶ab
 & 
NGX_SLAB_SHIFT_MASK
);

286 
n
 = 1 <<Ç;

287 
n
 = ((
uöçå_t
) 1 <<Ç) - 1;

288 
mask
 = 
n
 << 
NGX_SLAB_MAP_SHIFT
;

291 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë!
mask
) {

293 
m
 = (
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
, 
i
 = 0;

294 
m
 & 
mask
;

295 
m
 <<1, 
i
++)

297 i‡((
∑ge
->
¶ab
 & 
m
)) {

301 
∑ge
->
¶ab
 |
m
;

303 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë=
mask
) {

304 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

305 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

306 
¥ev
->
√xt
 = 
∑ge
->next;

307 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

309 
∑ge
->
√xt
 = 
NULL
;

310 
∑ge
->
¥ev
 = 
NGX_SLAB_BIG
;

313 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

314 
p
 +
i
 << 
shi·
;

315 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

317 
d⁄e
;

321 
∑ge
 =Öage->
√xt
;

323 } 
∑ge
);

327 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, 1);

329 i‡(
∑ge
) {

330 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

331 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

332 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

334 
s
 = 1 << 
shi·
;

335 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ 8 / 
s
;

337 i‡(
n
 == 0) {

338 
n
 = 1;

341 
bôm≠
[0] = (2 << 
n
) - 1;

343 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

345 
i
 = 1; i < 
m≠
; i++) {

346 
bôm≠
[
i
] = 0;

349 
∑ge
->
¶ab
 = 
shi·
;

350 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

351 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

353 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

355 
p
 = ((
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
Ë+ 
s
 * 
n
;

356 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

358 
d⁄e
;

360 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

362 
∑ge
->
¶ab
 = 1;

363 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

364 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

366 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

368 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

369 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

371 
d⁄e
;

375 
∑ge
->
¶ab
 = ((
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
Ë| 
shi·
;

376 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

377 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

379 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

381 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

382 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

384 
d⁄e
;

388 
p
 = 0;

390 
d⁄e
:

392 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶abáŒoc: %p", 
p
);

394  (*Ë
p
;

395 
	}
}

399 
	$ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

401 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

403 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
p
);

405 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

406 
	}
}

410 
	$ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

412 
size_t
 
size
;

413 
uöçå_t
 
¶ab
, 
m
, *
bôm≠
;

414 
ngx_uöt_t
 
n
, 
ty≥
, 
¶Ÿ
, 
shi·
, 
m≠
;

415 
ngx_¶ab_∑ge_t
 *
¶Ÿs
, *
∑ge
;

417 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶ab fªe: %p", 
p
);

419 i‡((
u_ch¨
 *Ë
p
 < 
poﬁ
->
°¨t
 || (u_ch¨ *Ë∞>Öoﬁ->
íd
) {

420 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
, "ngx_slab_free(): outside ofÖool");

421 
Áû
;

424 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

425 
∑ge
 = &
poﬁ
->
∑ges
[
n
];

426 
¶ab
 = 
∑ge
->slab;

427 
ty≥
 = 
∑ge
->
¥ev
 & 
NGX_SLAB_PAGE_MASK
;

429 
ty≥
) {

431 
NGX_SLAB_SMALL
:

433 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

434 
size
 = 1 << 
shi·
;

436 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

437 
wr⁄g_chunk
;

440 
n
 = ((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
;

441 
m
 = (
uöçå_t
Ë1 << (
n
 & ((uintptr_t) * 8 - 1));

442 
n
 /((
uöçå_t
) * 8);

443 
bôm≠
 = (
uöçå_t
 *Ë((uöçå_tË
p
 & ~(
ngx_∑gesize
 - 1));

445 i‡(
bôm≠
[
n
] & 
m
) {

447 i‡(
∑ge
->
√xt
 =
NULL
) {

448 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

449 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

450 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

452 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

453 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

455 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

456 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_SMALL
;

459 
bôm≠
[
n
] &~
m
;

461 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)) / 8 / (1 << shift);

463 i‡(
n
 == 0) {

464 
n
 = 1;

467 i‡(
bôm≠
[0] & ~(((
uöçå_t
Ë1 << 
n
) - 1)) {

468 
d⁄e
;

471 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

473 
n
 = 1;Ç < 
m≠
;Ç++) {

474 i‡(
bôm≠
[
n
]) {

475 
d⁄e
;

479 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

481 
d⁄e
;

484 
chunk_Æªady_‰ì
;

486 
NGX_SLAB_EXACT
:

488 
m
 = (
uöçå_t
) 1 <<

489 (((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
ngx_¶ab_exa˘_shi·
);

490 
size
 = 
ngx_¶ab_exa˘_size
;

492 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

493 
wr⁄g_chunk
;

496 i‡(
¶ab
 & 
m
) {

497 i‡(
¶ab
 =
NGX_SLAB_BUSY
) {

498 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

499 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

500 
¶Ÿ
 = 
ngx_¶ab_exa˘_shi·
 - 
poﬁ
->
mö_shi·
;

502 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

503 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

505 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

506 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_EXACT
;

509 
∑ge
->
¶ab
 &~
m
;

511 i‡(
∑ge
->
¶ab
) {

512 
d⁄e
;

515 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

517 
d⁄e
;

520 
chunk_Æªady_‰ì
;

522 
NGX_SLAB_BIG
:

524 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

525 
size
 = 1 << 
shi·
;

527 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

528 
wr⁄g_chunk
;

531 
m
 = (
uöçå_t
Ë1 << ((((uöçå_tË
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
)

532 + 
NGX_SLAB_MAP_SHIFT
);

534 i‡(
¶ab
 & 
m
) {

536 i‡(
∑ge
->
√xt
 =
NULL
) {

537 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

538 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

539 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

541 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

542 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

544 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

545 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_BIG
;

548 
∑ge
->
¶ab
 &~
m
;

550 i‡(
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
) {

551 
d⁄e
;

554 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

556 
d⁄e
;

559 
chunk_Æªady_‰ì
;

561 
NGX_SLAB_PAGE
:

563 i‡((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)) {

564 
wr⁄g_chunk
;

567 i‡(
¶ab
 =
NGX_SLAB_PAGE_FREE
) {

568 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

570 
Áû
;

573 i‡(
¶ab
 =
NGX_SLAB_PAGE_BUSY
) {

574 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

576 
Áû
;

579 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

580 
size
 = 
¶ab
 & ~
NGX_SLAB_PAGE_START
;

582 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, &poﬁ->
∑ges
[
n
], 
size
);

584 
	`ngx_¶ab_junk
(
p
, 
size
 << 
ngx_∑gesize_shi·
);

593 
d⁄e
:

595 
	`ngx_¶ab_junk
(
p
, 
size
);

599 
wr⁄g_chunk
:

601 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

604 
Áû
;

606 
chunk_Æªady_‰ì
:

608 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

611 
Áû
:

614 
	}
}

617 
ngx_¶ab_∑ge_t
 *

618 
	$ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
∑ges
)

620 
ngx_¶ab_∑ge_t
 *
∑ge
, *
p
;

622 
∑ge
 = 
poﬁ
->
‰ì
.
√xt
;Öage != &pool->free;Öage =Öage->next) {

624 i‡(
∑ge
->
¶ab
 >
∑ges
) {

626 i‡(
∑ge
->
¶ab
 > 
∑ges
) {

627 
∑ge
[
∑ges
].
¶ab
 =Öage->slab -Öages;

628 
∑ge
[
∑ges
].
√xt
 =Öage->next;

629 
∑ge
[
∑ges
].
¥ev
 =Öage->prev;

631 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

632 
p
->
√xt
 = &
∑ge
[
∑ges
];

633 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

636 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

637 
p
->
√xt
 = 
∑ge
->next;

638 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

641 
∑ge
->
¶ab
 = 
∑ges
 | 
NGX_SLAB_PAGE_START
;

642 
∑ge
->
√xt
 = 
NULL
;

643 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

645 i‡(--
∑ges
 == 0) {

646  
∑ge
;

649 
p
 = 
∑ge
 + 1; 
∑ges
;Öages--) {

650 
p
->
¶ab
 = 
NGX_SLAB_PAGE_BUSY
;

651 
p
->
√xt
 = 
NULL
;

652 
p
->
¥ev
 = 
NGX_SLAB_PAGE
;

653 
p
++;

656  
∑ge
;

660 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_CRIT
, "ngx_slab_alloc() failed:Ço memory");

662  
NULL
;

663 
	}
}

667 
	$ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

668 
ngx_uöt_t
 
∑ges
)

670 
ngx_¶ab_∑ge_t
 *
¥ev
;

672 
∑ge
->
¶ab
 = 
∑ges
--;

674 i‡(
∑ges
) {

675 
	`ngx_memzîo
(&
∑ge
[1], 
∑ges
 * (
ngx_¶ab_∑ge_t
));

678 i‡(
∑ge
->
√xt
) {

679 
¥ev
 = (
ngx_¶ab_∑ge_t
 *Ë(
∑ge
->¥ev & ~
NGX_SLAB_PAGE_MASK
);

680 
¥ev
->
√xt
 = 
∑ge
->next;

681 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

684 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
poﬁ
->
‰ì
;

685 
∑ge
->
√xt
 = 
poﬁ
->
‰ì
.next;

687 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
)Öage;

689 
poﬁ
->
‰ì
.
√xt
 = 
∑ge
;

690 
	}
}

694 
	$ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
, *
ãxt
)

696 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 0, "%s%s", 
ãxt
, 
poﬁ
->
log_˘x
);

697 
	}
}

	@src/core/ngx_slab.h

8 #i‚de‡
_NGX_SLAB_H_INCLUDED_


9 
	#_NGX_SLAB_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_¶ab_∑ge_s
 
	tngx_¶ab_∑ge_t
;

18 
	sngx_¶ab_∑ge_s
 {

19 
uöçå_t
 
	m¶ab
;

20 
ngx_¶ab_∑ge_t
 *
	m√xt
;

21 
uöçå_t
 
	m¥ev
;

26 
ngx_shmtx_sh_t
 
	mlock
;

28 
size_t
 
	mmö_size
;

29 
size_t
 
	mmö_shi·
;

31 
ngx_¶ab_∑ge_t
 *
	m∑ges
;

32 
ngx_¶ab_∑ge_t
 
	m‰ì
;

34 
u_ch¨
 *
	m°¨t
;

35 
u_ch¨
 *
	míd
;

37 
ngx_shmtx_t
 
	mmuãx
;

39 
u_ch¨
 *
	mlog_˘x
;

40 
u_ch¨
 
	mzîo
;

42 *
	md©a
;

43 *
	maddr
;

44 } 
	tngx_¶ab_poﬁ_t
;

47 
ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
);

48 *
ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

49 *
ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

50 
ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

51 
ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

	@src/core/ngx_spinlock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
)

16 #i‡(
NGX_HAVE_ATOMIC_OPS
)

18 
ngx_uöt_t
 
i
, 
n
;

22 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

26 i‡(
ngx_n˝u
 > 1) {

28 
n
 = 1;Ç < 
•ö
;Ç <<= 1) {

30 
i
 = 0; i < 
n
; i++) {

31 
	`ngx_˝u_∑u£
();

34 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

40 
	`ngx_sched_yõld
();

45 #i‡(
NGX_THREADS
)

47 #îr‹ 
	`ngx_•ölock
(Ë
‹
 
	`ngx_©omic_cmp_£t
(Ë
¨e
 
nŸ
 
deföed
 !

53 
	}
}

	@src/core/ngx_string.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *
ngx_•rötf_num
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
,

13 
u_ch¨
 
zîo
, 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
);

14 
ngx_öt_t
 
ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

15 c⁄° 
u_ch¨
 *
basis
);

19 
	$ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

21 
n
) {

22 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

23 
d°
++;

24 
§c
++;

25 
n
--;

27 
	}
}

30 
u_ch¨
 *

31 
	$ngx_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

33 i‡(
n
 == 0) {

34  
d°
;

37 --
n
) {

38 *
d°
 = *
§c
;

40 i‡(*
d°
 == '\0') {

41  
d°
;

44 
d°
++;

45 
§c
++;

48 *
d°
 = '\0';

50  
d°
;

51 
	}
}

54 
u_ch¨
 *

55 
	$ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
)

57 
u_ch¨
 *
d°
;

59 
d°
 = 
	`ngx_≤Æloc
(
poﬁ
, 
§c
->
Àn
);

60 i‡(
d°
 =
NULL
) {

61  
NULL
;

64 
	`ngx_mem˝y
(
d°
, 
§c
->
d©a
, src->
Àn
);

66  
d°
;

67 
	}
}

102 
u_ch¨
 * 
ngx_cde˛


103 
	$ngx_•rötf
(
u_ch¨
 *
buf
, c⁄° *
fmt
, ...)

105 
u_ch¨
 *
p
;

106 
va_li°
 
¨gs
;

108 
	`va_°¨t
(
¨gs
, 
fmt
);

109 
p
 = 
	`ngx_v¶¥ötf
(
buf
, (*Ë-1, 
fmt
, 
¨gs
);

110 
	`va_íd
(
¨gs
);

112  
p
;

113 
	}
}

116 
u_ch¨
 * 
ngx_cde˛


117 
	$ngx_¢¥ötf
(
u_ch¨
 *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...)

119 
u_ch¨
 *
p
;

120 
va_li°
 
¨gs
;

122 
	`va_°¨t
(
¨gs
, 
fmt
);

123 
p
 = 
	`ngx_v¶¥ötf
(
buf
, bu‡+ 
max
, 
fmt
, 
¨gs
);

124 
	`va_íd
(
¨gs
);

126  
p
;

127 
	}
}

130 
u_ch¨
 * 
ngx_cde˛


131 
	$ngx_¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, ...)

133 
u_ch¨
 *
p
;

134 
va_li°
 
¨gs
;

136 
	`va_°¨t
(
¨gs
, 
fmt
);

137 
p
 = 
	`ngx_v¶¥ötf
(
buf
, 
œ°
, 
fmt
, 
¨gs
);

138 
	`va_íd
(
¨gs
);

140  
p
;

141 
	}
}

144 
u_ch¨
 *

145 
	$ngx_v¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

147 
u_ch¨
 *
p
, 
zîo
;

148 
d
;

149 
f
;

150 
size_t
 
Àn
, 
¶í
;

151 
öt64_t
 
i64
;

152 
uöt64_t
 
ui64
, 
‰ac
;

153 
ngx_m£c_t
 
ms
;

154 
ngx_uöt_t
 
width
, 
sign
, 
hex
, 
max_width
, 
‰ac_width
, 
sˇÀ
, 
n
;

155 
ngx_°r_t
 *
v
;

156 
ngx_v¨übÀ_vÆue_t
 *
vv
;

158 *
fmt
 && 
buf
 < 
œ°
) {

165 i‡(*
fmt
 == '%') {

167 
i64
 = 0;

168 
ui64
 = 0;

170 
zîo
 = (
u_ch¨
Ë((*++
fmt
 == '0') ? '0' : ' ');

171 
width
 = 0;

172 
sign
 = 1;

173 
hex
 = 0;

174 
max_width
 = 0;

175 
‰ac_width
 = 0;

176 
¶í
 = (
size_t
) -1;

178 *
fmt
 >= '0' && *fmt <= '9') {

179 
width
 = width * 10 + *
fmt
++ - '0';

184 *
fmt
) {

187 
sign
 = 0;

188 
fmt
++;

192 
max_width
 = 1;

193 
fmt
++;

197 
hex
 = 2;

198 
sign
 = 0;

199 
fmt
++;

203 
hex
 = 1;

204 
sign
 = 0;

205 
fmt
++;

209 
fmt
++;

211 *
fmt
 >= '0' && *fmt <= '9') {

212 
‰ac_width
 = føc_width * 10 + *
fmt
++ - '0';

218 
¶í
 = 
	`va_¨g
(
¨gs
, 
size_t
);

219 
fmt
++;

230 *
fmt
) {

233 
v
 = 
	`va_¨g
(
¨gs
, 
ngx_°r_t
 *);

235 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
v
->len);

236 
buf
 = 
	`ngx_˝ymem
(buf, 
v
->
d©a
, 
Àn
);

237 
fmt
++;

242 
vv
 = 
	`va_¨g
(
¨gs
, 
ngx_v¨übÀ_vÆue_t
 *);

244 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
vv
->len);

245 
buf
 = 
	`ngx_˝ymem
(buf, 
vv
->
d©a
, 
Àn
);

246 
fmt
++;

251 
p
 = 
	`va_¨g
(
¨gs
, 
u_ch¨
 *);

253 i‡(
¶í
 =(
size_t
) -1) {

254 *
p
 && 
buf
 < 
œ°
) {

255 *
buf
++ = *
p
++;

259 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
¶í
);

260 
buf
 = 
	`ngx_˝ymem
(buf, 
p
, 
Àn
);

263 
fmt
++;

268 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
off_t
);

269 
sign
 = 1;

273 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_pid_t
);

274 
sign
 = 1;

278 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
time_t
);

279 
sign
 = 1;

283 
ms
 = (
ngx_m£c_t
Ë
	`va_¨g
(
¨gs
,Çgx_msec_t);

284 i‡((
ngx_m£c_öt_t
Ë
ms
 == -1) {

285 
sign
 = 1;

286 
i64
 = -1;

288 
sign
 = 0;

289 
ui64
 = (
uöt64_t
Ë
ms
;

294 i‡(
sign
) {

295 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ssize_t
);

297 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
size_t
);

302 i‡(
sign
) {

303 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_öt_t
);

305 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_uöt_t
);

308 i‡(
max_width
) {

309 
width
 = 
NGX_INT_T_LEN
;

315 i‡(
sign
) {

316 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

318 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_öt
);

323 i‡(
sign
) {

324 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

326 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_l⁄g
);

331 i‡(
sign
) {

332 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
öt32_t
);

334 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
uöt32_t
);

339 i‡(
sign
) {

340 
i64
 = 
	`va_¨g
(
¨gs
, 
öt64_t
);

342 
ui64
 = 
	`va_¨g
(
¨gs
, 
uöt64_t
);

347 i‡(
sign
) {

348 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_öt_t
);

350 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_uöt_t
);

353 i‡(
max_width
) {

354 
width
 = 
NGX_ATOMIC_T_LEN
;

360 
f
 = 
	`va_¨g
(
¨gs
, );

362 i‡(
f
 < 0) {

363 *
buf
++ = '-';

364 
f
 = -f;

367 
ui64
 = (
öt64_t
Ë
f
;

368 
‰ac
 = 0;

370 i‡(
‰ac_width
) {

372 
sˇÀ
 = 1;

373 
n
 = 
‰ac_width
;Ç;Ç--) {

374 
sˇÀ
 *= 10;

377 
‰ac
 = (
uöt64_t
Ë((
f
 - (Ë
ui64
Ë* 
sˇÀ
 + 0.5);

379 i‡(
‰ac
 =
sˇÀ
) {

380 
ui64
++;

381 
‰ac
 = 0;

385 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 0, 
width
);

387 i‡(
‰ac_width
) {

388 i‡(
buf
 < 
œ°
) {

389 *
buf
++ = '.';

392 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
‰ac
, '0', 0, 
‰ac_width
);

395 
fmt
++;

399 #i‡!(
NGX_WIN32
)

401 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
æim_t
);

402 
sign
 = 1;

407 
ui64
 = (
uöçå_t
Ë
	`va_¨g
(
¨gs
, *);

408 
hex
 = 2;

409 
sign
 = 0;

410 
zîo
 = '0';

411 
width
 = 
NGX_PTR_SIZE
 * 2;

415 
d
 = 
	`va_¨g
(
¨gs
, );

416 *
buf
++ = (
u_ch¨
Ë(
d
 & 0xff);

417 
fmt
++;

422 *
buf
++ = '\0';

423 
fmt
++;

428 #i‡(
NGX_WIN32
)

429 *
buf
++ = 
CR
;

431 *
buf
++ = 
LF
;

432 
fmt
++;

437 *
buf
++ = '%';

438 
fmt
++;

443 *
buf
++ = *
fmt
++;

448 i‡(
sign
) {

449 i‡(
i64
 < 0) {

450 *
buf
++ = '-';

451 
ui64
 = (
uöt64_t
Ë-
i64
;

454 
ui64
 = (
uöt64_t
Ë
i64
;

458 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 
hex
, 
width
);

460 
fmt
++;

463 *
buf
++ = *
fmt
++;

467  
buf
;

468 
	}
}

471 
u_ch¨
 *

472 
	$ngx_•rötf_num
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
, u_ch¨ 
zîo
,

473 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
)

475 
u_ch¨
 *
p
, 
ãmp
[
NGX_INT64_LEN
 + 1];

480 
size_t
 
Àn
;

481 
uöt32_t
 
ui32
;

482 
u_ch¨
 
hex
[] = "0123456789abcdef";

483 
u_ch¨
 
HEX
[] = "0123456789ABCDEF";

485 
p
 = 
ãmp
 + 
NGX_INT64_LEN
;

487 i‡(
hexadecimÆ
 == 0) {

489 i‡(
ui64
 <
NGX_MAX_UINT32_VALUE
) {

506 
ui32
 = (
uöt32_t
Ë
ui64
;

509 *--
p
 = (
u_ch¨
Ë(
ui32
 % 10 + '0');

510 } 
ui32
 /= 10);

514 *--
p
 = (
u_ch¨
Ë(
ui64
 % 10 + '0');

515 } 
ui64
 /= 10);

518 } i‡(
hexadecimÆ
 == 1) {

523 *--
p
 = 
hex
[(
uöt32_t
Ë(
ui64
 & 0xf)];

525 } 
ui64
 >>= 4);

532 *--
p
 = 
HEX
[(
uöt32_t
Ë(
ui64
 & 0xf)];

534 } 
ui64
 >>= 4);

539 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

541 
Àn
++ < 
width
 && 
buf
 < 
œ°
) {

542 *
buf
++ = 
zîo
;

547 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

549 i‡(
buf
 + 
Àn
 > 
œ°
) {

550 
Àn
 = 
œ°
 - 
buf
;

553  
	`ngx_˝ymem
(
buf
, 
p
, 
Àn
);

554 
	}
}

564 
ngx_öt_t


565 
	$ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

567 
ngx_uöt_t
 
c1
, 
c2
;

570 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

571 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

573 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

574 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

576 i‡(
c1
 =
c2
) {

578 i‡(
c1
) {

585  
c1
 - 
c2
;

587 
	}
}

590 
ngx_öt_t


591 
	$ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

593 
ngx_uöt_t
 
c1
, 
c2
;

595 
n
) {

596 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

597 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

599 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

600 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

602 i‡(
c1
 =
c2
) {

604 i‡(
c1
) {

605 
n
--;

612  
c1
 - 
c2
;

616 
	}
}

619 
u_ch¨
 *

620 
	$ngx_°∫°r
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
Àn
)

622 
u_ch¨
 
c1
, 
c2
;

623 
size_t
 
n
;

625 
c2
 = *(
u_ch¨
 *Ë
s2
++;

627 
n
 = 
	`ngx_°æí
(
s2
);

631 i‡(
Àn
-- == 0) {

632  
NULL
;

635 
c1
 = *
s1
++;

637 i‡(
c1
 == 0) {

638  
NULL
;

641 } 
c1
 !
c2
);

643 i‡(
n
 > 
Àn
) {

644  
NULL
;

647 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

649  --
s1
;

650 
	}
}

659 
u_ch¨
 *

660 
	$ngx_°r°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

662 
u_ch¨
 
c1
, 
c2
;

664 
c2
 = *(
u_ch¨
 *Ë
s2
++;

668 
c1
 = *
s1
++;

670 i‡(
c1
 == 0) {

671  
NULL
;

674 } 
c1
 !
c2
);

676 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

678  --
s1
;

679 
	}
}

682 
u_ch¨
 *

683 
	$ngx_°rˇ£°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

685 
ngx_uöt_t
 
c1
, 
c2
;

687 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

688 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

692 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

694 i‡(
c1
 == 0) {

695  
NULL
;

698 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

700 } 
c1
 !
c2
);

702 } 
	`ngx_°∫ˇ£cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

704  --
s1
;

705 
	}
}

714 
u_ch¨
 *

715 
	$ngx_°æˇ£°∫
(
u_ch¨
 *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
)

717 
ngx_uöt_t
 
c1
, 
c2
;

719 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

720 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

721 
œ°
 -
n
;

725 i‡(
s1
 >
œ°
) {

726  
NULL
;

729 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

731 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

733 } 
c1
 !
c2
);

735 } 
	`ngx_°∫ˇ£cmp
(
s1
, 
s2
, 
n
) != 0);

737  --
s1
;

738 
	}
}

741 
ngx_öt_t


742 
	$ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

744 i‡(
n
 == 0) {

748 
n
--;

751 i‡(
s1
[
n
] !
s2
[n]) {

752  
s1
[
n
] - 
s2
[n];

755 i‡(
n
 == 0) {

759 
n
--;

761 
	}
}

764 
ngx_öt_t


765 
	$ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

767 
u_ch¨
 
c1
, 
c2
;

769 i‡(
n
 == 0) {

773 
n
--;

776 
c1
 = 
s1
[
n
];

777 i‡(
c1
 >= 'a' && c1 <= 'z') {

778 
c1
 -= 'a' - 'A';

781 
c2
 = 
s2
[
n
];

782 i‡(
c2
 >= 'a' && c2 <= 'z') {

783 
c2
 -= 'a' - 'A';

786 i‡(
c1
 !
c2
) {

787  
c1
 - 
c2
;

790 i‡(
n
 == 0) {

794 
n
--;

796 
	}
}

799 
ngx_öt_t


800 
	$ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
)

802 
size_t
 
n
;

803 
ngx_öt_t
 
m
, 
z
;

805 i‡(
n1
 <
n2
) {

806 
n
 = 
n1
;

807 
z
 = -1;

810 
n
 = 
n2
;

811 
z
 = 1;

814 
m
 = 
	`ngx_memcmp
(
s1
, 
s2
, 
n
);

816 i‡(
m
 || 
n1
 =
n2
) {

817  
m
;

820  
z
;

821 
	}
}

824 
ngx_öt_t


825 
	$ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

827 
ngx_uöt_t
 
c1
, 
c2
;

830 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

831 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

833 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

834 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

836 i‡(
c1
 =
c2
) {

838 i‡(
c1
) {

847 
c1
 = (c1 == '.') ? ' ' : c1;

848 
c2
 = (c2 == '.') ? ' ' : c2;

850  
c1
 - 
c2
;

852 
	}
}

855 
ngx_öt_t


856 
	$ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

858 
ngx_öt_t
 
vÆue
;

860 i‡(
n
 == 0) {

861  
NGX_ERROR
;

864 
vÆue
 = 0; 
n
--; 
löe
++) {

865 i‡(*
löe
 < '0' || *line > '9') {

866  
NGX_ERROR
;

869 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

872 i‡(
vÆue
 < 0) {

873  
NGX_ERROR
;

876  
vÆue
;

878 
	}
}

883 
ngx_öt_t


884 
	$ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
)

886 
ngx_öt_t
 
vÆue
;

887 
ngx_uöt_t
 
dŸ
;

889 i‡(
n
 == 0) {

890  
NGX_ERROR
;

893 
dŸ
 = 0;

895 
vÆue
 = 0; 
n
--; 
löe
++) {

897 i‡(
poöt
 == 0) {

898  
NGX_ERROR
;

901 i‡(*
löe
 == '.') {

902 i‡(
dŸ
) {

903  
NGX_ERROR
;

906 
dŸ
 = 1;

910 i‡(*
löe
 < '0' || *line > '9') {

911  
NGX_ERROR
;

914 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

915 
poöt
 -
dŸ
;

918 
poöt
--) {

919 
vÆue
 = value * 10;

922 i‡(
vÆue
 < 0) {

923  
NGX_ERROR
;

926  
vÆue
;

928 
	}
}

931 
ssize_t


932 
	$ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
)

934 
ssize_t
 
vÆue
;

936 i‡(
n
 == 0) {

937  
NGX_ERROR
;

940 
vÆue
 = 0; 
n
--; 
löe
++) {

941 i‡(*
löe
 < '0' || *line > '9') {

942  
NGX_ERROR
;

945 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

948 i‡(
vÆue
 < 0) {

949  
NGX_ERROR
;

952  
vÆue
;

954 
	}
}

957 
off_t


958 
	$ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
)

960 
off_t
 
vÆue
;

962 i‡(
n
 == 0) {

963  
NGX_ERROR
;

966 
vÆue
 = 0; 
n
--; 
löe
++) {

967 i‡(*
löe
 < '0' || *line > '9') {

968  
NGX_ERROR
;

971 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

974 i‡(
vÆue
 < 0) {

975  
NGX_ERROR
;

978  
vÆue
;

980 
	}
}

983 
time_t


984 
	$ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
)

986 
time_t
 
vÆue
;

988 i‡(
n
 == 0) {

989  
NGX_ERROR
;

992 
vÆue
 = 0; 
n
--; 
löe
++) {

993 i‡(*
löe
 < '0' || *line > '9') {

994  
NGX_ERROR
;

997 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1000 i‡(
vÆue
 < 0) {

1001  
NGX_ERROR
;

1004  
vÆue
;

1006 
	}
}

1009 
ngx_öt_t


1010 
	$ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1012 
u_ch¨
 
c
, 
ch
;

1013 
ngx_öt_t
 
vÆue
;

1015 i‡(
n
 == 0) {

1016  
NGX_ERROR
;

1019 
vÆue
 = 0; 
n
--; 
löe
++) {

1020 
ch
 = *
löe
;

1022 i‡(
ch
 >= '0' && ch <= '9') {

1023 
vÆue
 = vÆuê* 16 + (
ch
 - '0');

1027 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1029 i‡(
c
 >= 'a' && c <= 'f') {

1030 
vÆue
 = vÆuê* 16 + (
c
 - 'a' + 10);

1034  
NGX_ERROR
;

1037 i‡(
vÆue
 < 0) {

1038  
NGX_ERROR
;

1041  
vÆue
;

1043 
	}
}

1046 
u_ch¨
 *

1047 
	$ngx_hex_dump
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

1049 
u_ch¨
 
hex
[] = "0123456789abcdef";

1051 
Àn
--) {

1052 *
d°
++ = 
hex
[*
§c
 >> 4];

1053 *
d°
++ = 
hex
[*
§c
++ & 0xf];

1056  
d°
;

1057 
	}
}

1061 
	$ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1063 
u_ch¨
 *
d
, *
s
;

1064 
size_t
 
Àn
;

1065 
u_ch¨
 
basis64
[] =

1068 
Àn
 = 
§c
->len;

1069 
s
 = 
§c
->
d©a
;

1070 
d
 = 
d°
->
d©a
;

1072 
Àn
 > 2) {

1073 *
d
++ = 
basis64
[(
s
[0] >> 2) & 0x3f];

1074 *
d
++ = 
basis64
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1075 *
d
++ = 
basis64
[((
s
[1] & 0x0f) << 2) | (s[2] >> 6)];

1076 *
d
++ = 
basis64
[
s
[2] & 0x3f];

1078 
s
 += 3;

1079 
Àn
 -= 3;

1082 i‡(
Àn
) {

1083 *
d
++ = 
basis64
[(
s
[0] >> 2) & 0x3f];

1085 i‡(
Àn
 == 1) {

1086 *
d
++ = 
basis64
[(
s
[0] & 3) << 4];

1087 *
d
++ = '=';

1090 *
d
++ = 
basis64
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1091 *
d
++ = 
basis64
[(
s
[1] & 0x0f) << 2];

1094 *
d
++ = '=';

1097 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1098 
	}
}

1101 
ngx_öt_t


1102 
	$ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1104 
u_ch¨
 
basis64
[] = {

1124  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1125 
	}
}

1128 
ngx_öt_t


1129 
	$ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1131 
u_ch¨
 
basis64
[] = {

1151  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1152 
	}
}

1155 
ngx_öt_t


1156 
	$ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
)

1158 
size_t
 
Àn
;

1159 
u_ch¨
 *
d
, *
s
;

1161 
Àn
 = 0;Üí < 
§c
->len;Üen++) {

1162 i‡(
§c
->
d©a
[
Àn
] == '=') {

1166 i‡(
basis
[
§c
->
d©a
[
Àn
]] == 77) {

1167  
NGX_ERROR
;

1171 i‡(
Àn
 % 4 == 1) {

1172  
NGX_ERROR
;

1175 
s
 = 
§c
->
d©a
;

1176 
d
 = 
d°
->
d©a
;

1178 
Àn
 > 3) {

1179 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1180 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1181 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[2]] << 6 | basis[s[3]]);

1183 
s
 += 4;

1184 
Àn
 -= 4;

1187 i‡(
Àn
 > 1) {

1188 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1191 i‡(
Àn
 > 2) {

1192 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1195 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1197  
NGX_OK
;

1198 
	}
}

1210 
uöt32_t


1211 
	$ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
)

1213 
size_t
 
Àn
;

1214 
uöt32_t
 
u
, 
i
, 
vÆid
;

1216 
u
 = **
p
;

1218 i‡(
u
 >= 0xf0) {

1220 
u
 &= 0x07;

1221 
vÆid
 = 0xffff;

1222 
Àn
 = 3;

1224 } i‡(
u
 >= 0xe0) {

1226 
u
 &= 0x0f;

1227 
vÆid
 = 0x7ff;

1228 
Àn
 = 2;

1230 } i‡(
u
 >= 0xc2) {

1232 
u
 &= 0x1f;

1233 
vÆid
 = 0x7f;

1234 
Àn
 = 1;

1237 (*
p
)++;

1241 i‡(
n
 - 1 < 
Àn
) {

1245 (*
p
)++;

1247 
Àn
) {

1248 
i
 = *(*
p
)++;

1250 i‡(
i
 < 0x80) {

1254 
u
 = (u << 6Ë| (
i
 & 0x3f);

1256 
Àn
--;

1259 i‡(
u
 > 
vÆid
) {

1260  
u
;

1264 
	}
}

1267 
size_t


1268 
	$ngx_utf8_Àngth
(
u_ch¨
 *
p
, 
size_t
 
n
)

1270 
u_ch¨
 
c
, *
œ°
;

1271 
size_t
 
Àn
;

1273 
œ°
 = 
p
 + 
n
;

1275 
Àn
 = 0; 
p
 < 
œ°
;Üen++) {

1277 
c
 = *
p
;

1279 i‡(
c
 < 0x80) {

1280 
p
++;

1284 i‡(
	`ngx_utf8_decode
(&
p
, 
n
) > 0x10ffff) {

1286  
n
;

1290  
Àn
;

1291 
	}
}

1294 
u_ch¨
 *

1295 
	$ngx_utf8_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
)

1297 
u_ch¨
 
c
, *
√xt
;

1299 i‡(
n
 == 0) {

1300  
d°
;

1303 --
n
) {

1305 
c
 = *
§c
;

1306 *
d°
 = 
c
;

1308 i‡(
c
 < 0x80) {

1310 i‡(
c
 != '\0') {

1311 
d°
++;

1312 
§c
++;

1313 
Àn
--;

1318  
d°
;

1321 
√xt
 = 
§c
;

1323 i‡(
	`ngx_utf8_decode
(&
√xt
, 
Àn
) > 0x10ffff) {

1328 
§c
 < 
√xt
) {

1329 *
d°
++ = *
§c
++;

1330 
Àn
--;

1334 *
d°
 = '\0';

1336  
d°
;

1337 
	}
}

1340 
uöçå_t


1341 
	$ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1343 
ngx_uöt_t
 
n
;

1344 
uöt32_t
 *
esˇ≥
;

1345 
u_ch¨
 
hex
[] = "0123456789abcdef";

1349 
uöt32_t
 
uri
[] = {

1369 
uöt32_t
 
¨gs
[] = {

1389 
uöt32_t
 
uri_comp⁄ít
[] = {

1409 
uöt32_t
 
html
[] = {

1429 
uöt32_t
 
ª‰esh
[] = {

1449 
uöt32_t
 
memˇched
[] = {

1469 
uöt32_t
 *
m≠
[] =

1470 { 
uri
, 
¨gs
, 
uri_comp⁄ít
, 
html
, 
ª‰esh
, 
memˇched
, memcached };

1473 
esˇ≥
 = 
m≠
[
ty≥
];

1475 i‡(
d°
 =
NULL
) {

1479 
n
 = 0;

1481 
size
) {

1482 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1483 
n
++;

1485 
§c
++;

1486 
size
--;

1489  (
uöçå_t
Ë
n
;

1492 
size
) {

1493 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1494 *
d°
++ = '%';

1495 *
d°
++ = 
hex
[*
§c
 >> 4];

1496 *
d°
++ = 
hex
[*
§c
 & 0xf];

1497 
§c
++;

1500 *
d°
++ = *
§c
++;

1502 
size
--;

1505  (
uöçå_t
Ë
d°
;

1506 
	}
}

1510 
	$ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1512 
u_ch¨
 *
d
, *
s
, 
ch
, 
c
, 
decoded
;

1514 
sw_usuÆ
 = 0,

1515 
sw_quŸed
,

1516 
sw_quŸed_£c⁄d


1517 } 
°©e
;

1519 
d
 = *
d°
;

1520 
s
 = *
§c
;

1522 
°©e
 = 0;

1523 
decoded
 = 0;

1525 
size
--) {

1527 
ch
 = *
s
++;

1529 
°©e
) {

1530 
sw_usuÆ
:

1531 i‡(
ch
 == '?'

1532 && (
ty≥
 & (
NGX_UNESCAPE_URI
|
NGX_UNESCAPE_REDIRECT
)))

1534 *
d
++ = 
ch
;

1535 
d⁄e
;

1538 i‡(
ch
 == '%') {

1539 
°©e
 = 
sw_quŸed
;

1543 *
d
++ = 
ch
;

1546 
sw_quŸed
:

1548 i‡(
ch
 >= '0' && ch <= '9') {

1549 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1550 
°©e
 = 
sw_quŸed_£c⁄d
;

1554 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1555 i‡(
c
 >= 'a' && c <= 'f') {

1556 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1557 
°©e
 = 
sw_quŸed_£c⁄d
;

1563 
°©e
 = 
sw_usuÆ
;

1565 *
d
++ = 
ch
;

1569 
sw_quŸed_£c⁄d
:

1571 
°©e
 = 
sw_usuÆ
;

1573 i‡(
ch
 >= '0' && ch <= '9') {

1574 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1576 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1577 i‡(
ch
 > '%' && ch < 0x7f) {

1578 *
d
++ = 
ch
;

1582 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1587 *
d
++ = 
ch
;

1592 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1593 i‡(
c
 >= 'a' && c <= 'f') {

1594 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1596 i‡(
ty≥
 & 
NGX_UNESCAPE_URI
) {

1597 i‡(
ch
 == '?') {

1598 *
d
++ = 
ch
;

1599 
d⁄e
;

1602 *
d
++ = 
ch
;

1606 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1607 i‡(
ch
 == '?') {

1608 *
d
++ = 
ch
;

1609 
d⁄e
;

1612 i‡(
ch
 > '%' && ch < 0x7f) {

1613 *
d
++ = 
ch
;

1617 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1621 *
d
++ = 
ch
;

1632 
d⁄e
:

1634 *
d°
 = 
d
;

1635 *
§c
 = 
s
;

1636 
	}
}

1639 
uöçå_t


1640 
	$ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1642 
u_ch¨
 
ch
;

1643 
ngx_uöt_t
 
Àn
;

1645 i‡(
d°
 =
NULL
) {

1647 
Àn
 = 0;

1649 
size
) {

1650 *
§c
++) {

1653 
Àn
 += ("&lt;") - 2;

1657 
Àn
 += ("&gt;") - 2;

1661 
Àn
 += ("&amp;") - 2;

1665 
Àn
 += ("&quot;") - 2;

1671 
size
--;

1674  (
uöçå_t
Ë
Àn
;

1677 
size
) {

1678 
ch
 = *
§c
++;

1680 
ch
) {

1683 *
d°
++ = '&'; *dst++ = 'l'; *dst++ = 't'; *dst++ = ';';

1687 *
d°
++ = '&'; *dst++ = 'g'; *dst++ = 't'; *dst++ = ';';

1691 *
d°
++ = '&'; *dst++ = 'a'; *dst++ = 'm'; *dst++ = 'p';

1692 *
d°
++ = ';';

1696 *
d°
++ = '&'; *dst++ = 'q'; *dst++ = 'u'; *dst++ = 'o';

1697 *
d°
++ = 't'; *dst++ = ';';

1701 *
d°
++ = 
ch
;

1704 
size
--;

1707  (
uöçå_t
Ë
d°
;

1708 
	}
}

1712 
	$ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1713 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1715 
ngx_°r_node_t
 *
n
, *
t
;

1716 
ngx_rbåì_node_t
 **
p
;

1720 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1721 
t
 = (
ngx_°r_node_t
 *Ë
ãmp
;

1723 i‡(
node
->
key
 !
ãmp
->key) {

1725 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

1727 } i‡(
n
->
°r
.
Àn
 !
t
->str.len) {

1729 
p
 = (
n
->
°r
.
Àn
 < 
t
->°r.ÀnË? &
ãmp
->
À·
 : &ãmp->
right
;

1732 
p
 = (
	`ngx_memcmp
(
n
->
°r
.
d©a
, 
t
->°r.d©a,Ç->°r.
Àn
) < 0)

1733 ? &
ãmp
->
À·
 : &ãmp->
right
;

1736 i‡(*
p
 =
£¡öñ
) {

1740 
ãmp
 = *
p
;

1743 *
p
 = 
node
;

1744 
node
->
∑ª¡
 = 
ãmp
;

1745 
node
->
À·
 = 
£¡öñ
;

1746 
node
->
right
 = 
£¡öñ
;

1747 
	`ngx_rbt_ªd
(
node
);

1748 
	}
}

1751 
ngx_°r_node_t
 *

1752 
	$ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
vÆ
, 
uöt32_t
 
hash
)

1754 
ngx_öt_t
 
rc
;

1755 
ngx_°r_node_t
 *
n
;

1756 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1758 
node
 = 
rbåì
->
roŸ
;

1759 
£¡öñ
 = 
rbåì
->sentinel;

1761 
node
 !
£¡öñ
) {

1763 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1765 i‡(
hash
 !
node
->
key
) {

1766 
node
 = (
hash
 <Çode->
key
Ë?Çode->
À·
 :Çode->
right
;

1770 i‡(
vÆ
->
Àn
 !
n
->
°r
.len) {

1771 
node
 = (
vÆ
->
Àn
 < 
n
->
°r
.ÀnË?Çode->
À·
 :Çode->
right
;

1775 
rc
 = 
	`ngx_memcmp
(
vÆ
->
d©a
, 
n
->
°r
.d©a, vÆ->
Àn
);

1777 i‡(
rc
 < 0) {

1778 
node
 =Çode->
À·
;

1782 i‡(
rc
 > 0) {

1783 
node
 =Çode->
right
;

1787  
n
;

1790  
NULL
;

1791 
	}
}

1797 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

1798 
	$ngx_öt_t
 (*
cmp
)(const *, const *))

1800 
u_ch¨
 *
p1
, *
p2
, *
p
;

1802 
p
 = 
	`ngx_Æloc
(
size
, 
ngx_cy˛e
->
log
);

1803 i‡(
p
 =
NULL
) {

1807 
p1
 = (
u_ch¨
 *Ë
ba£
 + 
size
;

1808 
p1
 < (
u_ch¨
 *Ë
ba£
 + 
n
 * 
size
;

1809 
p1
 +
size
)

1811 
	`ngx_mem˝y
(
p
, 
p1
, 
size
);

1813 
p2
 = 
p1
;

1814 
p2
 > (
u_ch¨
 *Ë
ba£
 && 
	`cmp
’2 - 
size
, 
p
) > 0;

1815 
p2
 -
size
)

1817 
	`ngx_mem˝y
(
p2
,Ö2 - 
size
, size);

1820 
	`ngx_mem˝y
(
p2
, 
p
, 
size
);

1823 
	`ngx_‰ì
(
p
);

1824 
	}
}

1827 #i‡(
NGX_MEMCPY_LIMIT
)

1830 
	$ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

1832 i‡(
n
 > 
NGX_MEMCPY_LIMIT
) {

1833 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "mem˝y %uz byãs", 
n
);

1834 
	`ngx_debug_poöt
();

1837  
	`mem˝y
(
d°
, 
§c
, 
n
);

1838 
	}
}

	@src/core/ngx_string.h

8 #i‚de‡
_NGX_STRING_H_INCLUDED_


9 
	#_NGX_STRING_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
size_t
 
	mÀn
;

18 
u_ch¨
 *
	md©a
;

19 } 
	tngx_°r_t
;

23 
ngx_°r_t
 
	mkey
;

24 
ngx_°r_t
 
	mvÆue
;

25 } 
	tngx_keyvÆ_t
;

29 
	mÀn
:28;

31 
	mvÆid
:1;

32 
	mno_ˇchóbÀ
:1;

33 
	mnŸ_found
:1;

34 
	mesˇ≥
:1;

36 
u_ch¨
 *
	md©a
;

37 } 
	tngx_v¨übÀ_vÆue_t
;

40 
	#ngx_°rög
(
°r
Ë{ (°rË- 1, (
u_ch¨
 *Ë°∏}

	)

41 
	#ngx_nuŒ_°rög
 { 0, 
NULL
 }

	)

42 
	#ngx_°r_£t
(
°r
, 
ãxt
) \

43 (
°r
)->
Àn
 = (
ãxt
Ë- 1; (°r)->
d©a
 = (
u_ch¨
 *Ë
	)
text

44 
	#ngx_°r_nuŒ
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

47 
	#ngx_tﬁowî
(
c
Ë(
u_ch¨
Ë((¯>'A' && c <'Z'Ë? (¯| 0x20Ë: c)

	)

48 
	#ngx_touµî
(
c
Ë(
u_ch¨
Ë((¯>'a' && c <'z'Ë? (¯& ~0x20Ë: c)

	)

50 
ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

53 
	#ngx_°∫cmp
(
s1
, 
s2
, 
n
Ë
	`°∫cmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

57 
	#ngx_°rcmp
(
s1
, 
s2
Ë
	`°rcmp
((c⁄° *Ës1, (c⁄° *Ës2)

	)

60 
	#ngx_°r°r
(
s1
, 
s2
Ë
	`°r°r
((c⁄° *Ës1, (c⁄° *Ës2)

	)

61 
	#ngx_°æí
(
s
Ë
	`°æí
((c⁄° *Ës)

	)

63 
	#ngx_°rchr
(
s1
, 
c
Ë
	`°rchr
((c⁄° *Ës1, (Ëc)

	)

65 
ngx_ölöe
 
u_ch¨
 *

66 
	$ngx_°æchr
(
u_ch¨
 *
p
, u_ch¨ *
œ°
, u_ch¨ 
c
)

68 
p
 < 
œ°
) {

70 i‡(*
p
 =
c
) {

71  
p
;

74 
p
++;

77  
NULL
;

78 
	}
}

86 
	#ngx_memzîo
(
buf
, 
n
Ë(Ë
	`mem£t
(buf, 0,Ç)

	)

87 
	#ngx_mem£t
(
buf
, 
c
, 
n
Ë(Ë
	`mem£t
(buf, c,Ç)

	)

90 #i‡(
NGX_MEMCPY_LIMIT
)

92 *
ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

93 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`ngx_mem˝y
(d°, src,Ç)Ë+ (n))

	)

102 
	#ngx_mem˝y
(
d°
, 
§c
, 
n
Ë(Ë
	`mem˝y
(d°, src,Ç)

	)

103 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`mem˝y
(d°, src,Ç)Ë+ (n))

	)

108 #i‡–
__INTEL_COMPILER
 >= 800 )

115 
ngx_ölöe
 
u_ch¨
 *

116 
	$ngx_c›y
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

118 i‡(
Àn
 < 17) {

120 
Àn
) {

121 *
d°
++ = *
§c
++;

122 
Àn
--;

125  
d°
;

128  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

130 
	}
}

134 
	#ngx_c›y
 
ngx_˝ymem


	)

139 
	#ngx_memmove
(
d°
, 
§c
, 
n
Ë(Ë
	`memmove
(d°, src,Ç)

	)

140 
	#ngx_movemem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`memmove
(d°, src,Ç)Ë+ (n))

	)

144 
	#ngx_memcmp
(
s1
, 
s2
, 
n
Ë
	`memcmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

147 
u_ch¨
 *
ngx_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

148 
u_ch¨
 *
ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
);

149 
u_ch¨
 * 
ngx_cde˛
 
ngx_•rötf
(u_ch¨ *
buf
, c⁄° *
fmt
, ...);

150 
u_ch¨
 * 
ngx_cde˛
 
ngx_¢¥ötf
(u_ch¨ *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...);

151 
u_ch¨
 * 
ngx_cde˛
 
ngx_¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
,

153 
u_ch¨
 *
ngx_v¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

154 
	#ngx_v¢¥ötf
(
buf
, 
max
, 
fmt
, 
¨gs
) \

155 
	`ngx_v¶¥ötf
(
buf
, bu‡+ (
max
), 
fmt
, 
¨gs
)

	)

157 
ngx_öt_t
 
ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

158 
ngx_öt_t
 
ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

160 
u_ch¨
 *
ngx_°∫°r
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

162 
u_ch¨
 *
ngx_°r°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

163 
u_ch¨
 *
ngx_°rˇ£°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

164 
u_ch¨
 *
ngx_°æˇ£°∫
(u_ch¨ *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
);

166 
ngx_öt_t
 
ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

167 
ngx_öt_t
 
ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

168 
ngx_öt_t
 
ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
);

169 
ngx_öt_t
 
ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

171 
ngx_öt_t
 
ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

172 
ngx_öt_t
 
ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

173 
ssize_t
 
ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
);

174 
off_t
 
ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
);

175 
time_t
 
ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
);

176 
ngx_öt_t
 
ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

178 
u_ch¨
 *
ngx_hex_dump
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
);

181 
	#ngx_ba£64_ícoded_Àngth
(
Àn
Ë((÷í + 2Ë/ 3Ë* 4)

	)

182 
	#ngx_ba£64_decoded_Àngth
(
Àn
Ë((÷í + 3Ë/ 4Ë* 3)

	)

184 
ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

185 
ngx_öt_t
 
ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

186 
ngx_öt_t
 
ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

188 
uöt32_t
 
ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
);

189 
size_t
 
ngx_utf8_Àngth
(
u_ch¨
 *
p
, size_à
n
);

190 
u_ch¨
 *
ngx_utf8_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
);

193 
	#NGX_ESCAPE_URI
 0

	)

194 
	#NGX_ESCAPE_ARGS
 1

	)

195 
	#NGX_ESCAPE_URI_COMPONENT
 2

	)

196 
	#NGX_ESCAPE_HTML
 3

	)

197 
	#NGX_ESCAPE_REFRESH
 4

	)

198 
	#NGX_ESCAPE_MEMCACHED
 5

	)

199 
	#NGX_ESCAPE_MAIL_AUTH
 6

	)

201 
	#NGX_UNESCAPE_URI
 1

	)

202 
	#NGX_UNESCAPE_REDIRECT
 2

	)

204 
uöçå_t
 
ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
,

205 
ngx_uöt_t
 
ty≥
);

206 
ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
);

207 
uöçå_t
 
ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

211 
ngx_rbåì_node_t
 
	mnode
;

212 
ngx_°r_t
 
	m°r
;

213 } 
	tngx_°r_node_t
;

216 
ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

217 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

218 
ngx_°r_node_t
 *
ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
«me
,

219 
uöt32_t
 
hash
);

222 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

223 
	$ngx_öt_t
 (*
cmp
)(const *, const *));

224 
	#ngx_qs‹t
 
qs‹t


	)

227 
	#ngx_vÆue_hñ≥r
(
n
Ë#n

	)

228 
	#ngx_vÆue
(
n
Ë
	`ngx_vÆue_hñ≥r
“)

	)

	@src/core/ngx_times.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

21 
	#NGX_TIME_SLOTS
 64

	)

23 
ngx_uöt_t
 
	g¶Ÿ
;

24 
ngx_©omic_t
 
	gngx_time_lock
;

26 vﬁ©ûê
ngx_m£c_t
 
	gngx_cuºít_m£c
;

27 vﬁ©ûê
ngx_time_t
 *
	gngx_ˇched_time
;

28 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_îr_log_time
;

29 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_time
;

30 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_time
;

31 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_iso8601
;

33 #i‡!(
NGX_WIN32
)

41 
ngx_öt_t
 
	gˇched_gmtoff
;

44 
ngx_time_t
 
	gˇched_time
[
NGX_TIME_SLOTS
];

45 
u_ch¨
 
	gˇched_îr_log_time
[
NGX_TIME_SLOTS
]

47 
u_ch¨
 
	gˇched_hâp_time
[
NGX_TIME_SLOTS
]

49 
u_ch¨
 
	gˇched_hâp_log_time
[
NGX_TIME_SLOTS
]

51 
u_ch¨
 
	gˇched_hâp_log_iso8601
[
NGX_TIME_SLOTS
]

55 *
	gwìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

56 *
	gm⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

60 
	$ngx_time_öô
()

62 
ngx_ˇched_îr_log_time
.
Àn
 = ("1970/09/28 12:00:00") - 1;

63 
ngx_ˇched_hâp_time
.
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT") - 1;

64 
ngx_ˇched_hâp_log_time
.
Àn
 = ("28/Sep/1970:12:00:00 +0600") - 1;

65 
ngx_ˇched_hâp_log_iso8601
.
Àn
 = ("1970-09-28T12:00:00+06:00") - 1;

67 
ngx_ˇched_time
 = &
ˇched_time
[0];

69 
	`ngx_time_upd©e
();

70 
	}
}

74 
	$ngx_time_upd©e
()

76 
u_ch¨
 *
p0
, *
p1
, *
p2
, *
p3
;

77 
ngx_tm_t
 
tm
, 
gmt
;

78 
time_t
 
£c
;

79 
ngx_uöt_t
 
m£c
;

80 
ngx_time_t
 *
ç
;

81 
timevÆ
 
tv
;

83 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

87 
	`ngx_gëtimeofday
(&
tv
);

89 
£c
 = 
tv
.
tv_£c
;

90 
m£c
 = 
tv
.
tv_u£c
 / 1000;

92 
ngx_cuºít_m£c
 = (
ngx_m£c_t
Ë
£c
 * 1000 + 
m£c
;

94 
ç
 = &
ˇched_time
[
¶Ÿ
];

96 i‡(
ç
->
£c
 == sec) {

97 
ç
->
m£c
 = msec;

98 
	`ngx_u∆ock
(&
ngx_time_lock
);

102 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

103 
¶Ÿ
 = 0;

105 
¶Ÿ
++;

108 
ç
 = &
ˇched_time
[
¶Ÿ
];

110 
ç
->
£c
 = sec;

111 
ç
->
m£c
 = msec;

113 
	`ngx_gmtime
(
£c
, &
gmt
);

116 
p0
 = &
ˇched_hâp_time
[
¶Ÿ
][0];

118 (Ë
	`ngx_•rötf
(
p0
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

119 
wìk
[
gmt
.
ngx_tm_wday
], gmt.
ngx_tm_mday
,

120 
m⁄ths
[
gmt
.
ngx_tm_m⁄
 - 1], gmt.
ngx_tm_yór
,

121 
gmt
.
ngx_tm_hour
, gmt.
ngx_tm_mö
, gmt.
ngx_tm_£c
);

123 #i‡(
NGX_HAVE_GETTIMEZONE
)

125 
ç
->
gmtoff
 = 
	`ngx_gëtimez⁄e
();

126 
	`ngx_gmtime
(
£c
 + 
ç
->
gmtoff
 * 60, &
tm
);

128 #ñi‡(
NGX_HAVE_GMTOFF
)

130 
	`ngx_loˇ…ime
(
£c
, &
tm
);

131 
ˇched_gmtoff
 = (
ngx_öt_t
Ë(
tm
.
ngx_tm_gmtoff
 / 60);

132 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

136 
	`ngx_loˇ…ime
(
£c
, &
tm
);

137 
ˇched_gmtoff
 = 
	`ngx_timez⁄e
(
tm
.
ngx_tm_isd°
);

138 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

143 
p1
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

145 (Ë
	`ngx_•rötf
(
p1
, "%4d/%02d/%02d %02d:%02d:%02d",

146 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

147 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

148 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

151 
p2
 = &
ˇched_hâp_log_time
[
¶Ÿ
][0];

153 (Ë
	`ngx_•rötf
(
p2
, "%02d/%s/%d:%02d:%02d:%02d %c%02d%02d",

154 
tm
.
ngx_tm_mday
, 
m⁄ths
[tm.
ngx_tm_m⁄
 - 1],

155 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_hour
,

156 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

157 
ç
->
gmtoff
 < 0 ? '-' : '+',

158 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

160 
p3
 = &
ˇched_hâp_log_iso8601
[
¶Ÿ
][0];

162 (Ë
	`ngx_•rötf
(
p3
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",

163 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

164 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

165 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

166 
ç
->
gmtoff
 < 0 ? '-' : '+',

167 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

170 
	`ngx_mem‹y_b¨rõr
();

172 
ngx_ˇched_time
 = 
ç
;

173 
ngx_ˇched_hâp_time
.
d©a
 = 
p0
;

174 
ngx_ˇched_îr_log_time
.
d©a
 = 
p1
;

175 
ngx_ˇched_hâp_log_time
.
d©a
 = 
p2
;

176 
ngx_ˇched_hâp_log_iso8601
.
d©a
 = 
p3
;

178 
	`ngx_u∆ock
(&
ngx_time_lock
);

179 
	}
}

182 #i‡!(
NGX_WIN32
)

185 
	$ngx_time_sigß„_upd©e
()

187 
u_ch¨
 *
p
;

188 
ngx_tm_t
 
tm
;

189 
time_t
 
£c
;

190 
ngx_time_t
 *
ç
;

191 
timevÆ
 
tv
;

193 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

197 
	`ngx_gëtimeofday
(&
tv
);

199 
£c
 = 
tv
.
tv_£c
;

201 
ç
 = &
ˇched_time
[
¶Ÿ
];

203 i‡(
ç
->
£c
 == sec) {

204 
	`ngx_u∆ock
(&
ngx_time_lock
);

208 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

209 
¶Ÿ
 = 0;

211 
¶Ÿ
++;

214 
ç
 = &
ˇched_time
[
¶Ÿ
];

216 
ç
->
£c
 = 0;

218 
	`ngx_gmtime
(
£c
 + 
ˇched_gmtoff
 * 60, &
tm
);

220 
p
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

222 (Ë
	`ngx_•rötf
(
p
, "%4d/%02d/%02d %02d:%02d:%02d",

223 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

224 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

225 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

227 
	`ngx_mem‹y_b¨rõr
();

229 
ngx_ˇched_îr_log_time
.
d©a
 = 
p
;

231 
	`ngx_u∆ock
(&
ngx_time_lock
);

232 
	}
}

237 
u_ch¨
 *

238 
	$ngx_hâp_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

240 
ngx_tm_t
 
tm
;

242 
	`ngx_gmtime
(
t
, &
tm
);

244  
	`ngx_•rötf
(
buf
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

245 
wìk
[
tm
.
ngx_tm_wday
],

246 
tm
.
ngx_tm_mday
,

247 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

248 
tm
.
ngx_tm_yór
,

249 
tm
.
ngx_tm_hour
,

250 
tm
.
ngx_tm_mö
,

251 
tm
.
ngx_tm_£c
);

252 
	}
}

255 
u_ch¨
 *

256 
	$ngx_hâp_cookõ_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

258 
ngx_tm_t
 
tm
;

260 
	`ngx_gmtime
(
t
, &
tm
);

267  
	`ngx_•rötf
(
buf
,

268 (
tm
.
ngx_tm_yór
 > 2037) ?

271 
wìk
[
tm
.
ngx_tm_wday
],

272 
tm
.
ngx_tm_mday
,

273 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

274 (
tm
.
ngx_tm_yór
 > 2037) ?Åm.ngx_tm_year:

275 
tm
.
ngx_tm_yór
 % 100,

276 
tm
.
ngx_tm_hour
,

277 
tm
.
ngx_tm_mö
,

278 
tm
.
ngx_tm_£c
);

279 
	}
}

283 
	$ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
)

285 
ngx_öt_t
 
yday
;

286 
ngx_uöt_t
 
n
, 
£c
, 
mö
, 
hour
, 
mday
, 
m⁄
, 
yór
, 
wday
, 
days
, 
À≠
;

290 
n
 = (
ngx_uöt_t
Ë
t
;

292 
days
 = 
n
 / 86400;

296 
wday
 = (4 + 
days
) % 7;

298 
n
 %= 86400;

299 
hour
 = 
n
 / 3600;

300 
n
 %= 3600;

301 
mö
 = 
n
 / 60;

302 
£c
 = 
n
 % 60;

310 
days
 = days - (31 + 28) + 719527;

319 
yór
 = (
days
 + 2) * 400 / (365 * 400 + 100 - 4 + 1);

321 
yday
 = 
days
 - (365 * 
yór
 + year / 4 - year / 100 + year / 400);

323 i‡(
yday
 < 0) {

324 
À≠
 = (
yór
 % 4 == 0) && (year % 100 || (year % 400 == 0));

325 
yday
 = 365 + 
À≠
 + yday;

326 
yór
--;

337 
m⁄
 = (
yday
 + 31) * 10 / 306;

341 
mday
 = 
yday
 - (367 * 
m⁄
 / 12 - 30) + 1;

343 i‡(
yday
 >= 306) {

345 
yór
++;

346 
m⁄
 -= 10;

356 
m⁄
 += 2;

365 
ç
->
ngx_tm_£c
 = (
ngx_tm_£c_t
Ë
£c
;

366 
ç
->
ngx_tm_mö
 = (
ngx_tm_mö_t
Ë
mö
;

367 
ç
->
ngx_tm_hour
 = (
ngx_tm_hour_t
Ë
hour
;

368 
ç
->
ngx_tm_mday
 = (
ngx_tm_mday_t
Ë
mday
;

369 
ç
->
ngx_tm_m⁄
 = (
ngx_tm_m⁄_t
Ë
m⁄
;

370 
ç
->
ngx_tm_yór
 = (
ngx_tm_yór_t
Ë
yór
;

371 
ç
->
ngx_tm_wday
 = (
ngx_tm_wday_t
Ë
wday
;

372 
	}
}

375 
time_t


376 
	$ngx_√xt_time
(
time_t
 
whí
)

378 
time_t
 
now
, 
√xt
;

379 
tm
Åm;

381 
now
 = 
	`ngx_time
();

383 
	`ngx_libc_loˇ…ime
(
now
, &
tm
);

385 
tm
.
tm_hour
 = (Ë(
whí
 / 3600);

386 
whí
 %= 3600;

387 
tm
.
tm_mö
 = (Ë(
whí
 / 60);

388 
tm
.
tm_£c
 = (Ë(
whí
 % 60);

390 
√xt
 = 
	`mktime
(&
tm
);

392 i‡(
√xt
 == -1) {

396 i‡(
√xt
 - 
now
 > 0) {

397  
√xt
;

400 
tm
.
tm_mday
++;

404 
√xt
 = 
	`mktime
(&
tm
);

406 i‡(
√xt
 != -1) {

407  
√xt
;

411 
	}
}

	@src/core/ngx_times.h

8 #i‚de‡
_NGX_TIMES_H_INCLUDED_


9 
	#_NGX_TIMES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
time_t
 
	m£c
;

18 
ngx_uöt_t
 
	mm£c
;

19 
ngx_öt_t
 
	mgmtoff
;

20 } 
	tngx_time_t
;

23 
ngx_time_öô
();

24 
ngx_time_upd©e
();

25 
ngx_time_sigß„_upd©e
();

26 
u_ch¨
 *
ngx_hâp_time
(u_ch¨ *
buf
, 
time_t
 
t
);

27 
u_ch¨
 *
ngx_hâp_cookõ_time
(u_ch¨ *
buf
, 
time_t
 
t
);

28 
ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
);

30 
time_t
 
ngx_√xt_time
—ime_à
whí
);

31 
	#ngx_√xt_time_n
 "mktime()"

	)

34 vﬁ©ûê
ngx_time_t
 *
ngx_ˇched_time
;

36 
	#ngx_time
(Ë
ngx_ˇched_time
->
£c


	)

37 
	#ngx_timeofday
(Ë(
ngx_time_t
 *Ë
ngx_ˇched_time


	)

39 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_îr_log_time
;

40 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_time
;

41 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_time
;

42 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_iso8601
;

48 vﬁ©ûê
ngx_m£c_t
 
ngx_cuºít_m£c
;

	@src/event/modules/ngx_aio_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evít_moduÀ_t
 
ngx_kqueue_moduÀ_˘x
;

16 
ngx_öt_t
 
ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

17 
ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_öt_t
 
ngx_aio_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

19 
ngx_uöt_t
 
Êags
);

20 
ngx_öt_t
 
ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

21 
ngx_uöt_t
 
Êags
);

22 
ngx_öt_t
 
ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

24 
ngx_uöt_t
 
Êags
);

27 
ngx_os_io_t
 
	gngx_os_aio
 = {

28 
ngx_aio_ªad
,

29 
ngx_aio_ªad_chaö
,

30 
NULL
,

31 
ngx_aio_wrôe
,

32 
ngx_aio_wrôe_chaö
,

37 
ngx_°r_t
 
	gaio_«me
 = 
ngx_°rög
("aio");

39 
ngx_evít_moduÀ_t
 
	gngx_aio_moduÀ_˘x
 = {

40 &
aio_«me
,

41 
NULL
,

42 
NULL
,

45 
ngx_aio_add_evít
,

46 
ngx_aio_dñ_evít
,

47 
NULL
,

48 
NULL
,

49 
NULL
,

50 
ngx_aio_dñ_c⁄√˘i⁄
,

51 
NULL
,

52 
ngx_aio_¥o˚ss_evíts
,

53 
ngx_aio_öô
,

54 
ngx_aio_d⁄e


59 
ngx_moduÀ_t
 
	gngx_aio_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_aio_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 #i‡(
NGX_HAVE_KQUEUE
)

77 
ngx_öt_t


78 
	$ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

80 i‡(
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`öô
(
cy˛e
, 
timî
Ë=
NGX_ERROR
) {

81  
NGX_ERROR
;

84 
ngx_io
 = 
ngx_os_aio
;

86 
ngx_evít_Êags
 = 
NGX_USE_AIO_EVENT
;

87 
ngx_evít_a˘i⁄s
 = 
ngx_aio_moduÀ_˘x
.
a˘i⁄s
;

90  
NGX_OK
;

91 
	}
}

95 
	$ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

97 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`d⁄e
(
cy˛e
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_aio_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

106  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`add
(
ev
, 
evít
, 
Êags
);

107 
	}
}

110 
ngx_öt_t


111 
	$ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

113  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`dñ
(
ev
, 
evít
, 
Êags
);

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

120 
rc
;

122 i‡(
c
->
ªad
->
a˘ive
 =0 && c->
wrôe
->active == 0) {

123  
NGX_OK
;

126 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

127  
NGX_OK
;

130 
rc
 = 
	`aio_ˇn˚l
(
c
->
fd
, 
NULL
);

132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ˇn˚l: %d", 
rc
);

134 i‡(
rc
 =
AIO_CANCELED
) {

135 
c
->
ªad
->
a˘ive
 = 0;

136 
c
->
wrôe
->
a˘ive
 = 0;

137  
NGX_OK
;

140 i‡(
rc
 =
AIO_ALLDONE
) {

141 
c
->
ªad
->
a˘ive
 = 0;

142 
c
->
wrôe
->
a˘ive
 = 0;

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

145  
NGX_OK
;

148 i‡(
rc
 == -1) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

151  
NGX_ERROR
;

154 i‡(
rc
 =
AIO_NOTCANCELED
) {

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

158  
NGX_ERROR
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

168  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

169 
	}
}

	@src/event/modules/ngx_devpoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_DEVPOLL
)

17 
	#POLLREMOVE
 0x0800

	)

18 
	#DP_POLL
 0xD001

	)

19 
	#DP_ISPOLLED
 0xD002

	)

21 
	sdvpﬁl
 {

22 
pﬁlfd
 *
	mdp_fds
;

23 
	mdp_nfds
;

24 
	mdp_timeout
;

31 
ngx_uöt_t
 
	mch™ges
;

32 
ngx_uöt_t
 
	mevíts
;

33 } 
	tngx_devpﬁl_c⁄f_t
;

36 
ngx_öt_t
 
ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

37 
ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_öt_t
 
ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

39 
ngx_uöt_t
 
Êags
);

40 
ngx_öt_t
 
ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

41 
ngx_uöt_t
 
Êags
);

42 
ngx_öt_t
 
ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

43 
ngx_uöt_t
 
Êags
);

44 
ngx_öt_t
 
ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

45 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

47 *
ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

48 *
ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

50 
	gdp
 = -1;

51 
pﬁlfd
 *
	gch™ge_li°
, *
	gevít_li°
;

52 
ngx_uöt_t
 
	gnch™ges
, 
	gmax_ch™ges
, 
	g√víts
;

54 
ngx_evít_t
 **
	gch™ge_ödex
;

57 
ngx_°r_t
 
	gdevpﬁl_«me
 = 
ngx_°rög
("/dev/poll");

59 
ngx_comm™d_t
 
	gngx_devpﬁl_comm™ds
[] = {

61 { 
ngx_°rög
("devpoll_changes"),

62 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

65 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
ch™ges
),

66 
NULL
 },

68 { 
ngx_°rög
("devpoll_events"),

69 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

72 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
evíts
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_evít_moduÀ_t
 
	gngx_devpﬁl_moduÀ_˘x
 = {

80 &
devpﬁl_«me
,

81 
ngx_devpﬁl_¸óã_c⁄f
,

82 
ngx_devpﬁl_öô_c⁄f
,

85 
ngx_devpﬁl_add_evít
,

86 
ngx_devpﬁl_dñ_evít
,

87 
ngx_devpﬁl_add_evít
,

88 
ngx_devpﬁl_dñ_evít
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
ngx_devpﬁl_¥o˚ss_evíts
,

93 
ngx_devpﬁl_öô
,

94 
ngx_devpﬁl_d⁄e
,

99 
ngx_moduÀ_t
 
	gngx_devpﬁl_moduÀ
 = {

100 
NGX_MODULE_V1
,

101 &
ngx_devpﬁl_moduÀ_˘x
,

102 
ngx_devpﬁl_comm™ds
,

103 
NGX_EVENT_MODULE
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NGX_MODULE_V1_PADDING


115 
ngx_öt_t


116 
	$ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

118 
size_t
 
n
;

119 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

121 
dpcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_devpﬁl_moduÀ
);

123 i‡(
dp
 == -1) {

124 
dp
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
);

126 i‡(
dp
 == -1) {

127 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

129  
NGX_ERROR
;

133 i‡(
max_ch™ges
 < 
dpcf
->
ch™ges
) {

134 i‡(
nch™ges
) {

135 
n
 = 
nch™ges
 * (
pﬁlfd
);

136 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
nch™ges
 = 0;

145 i‡(
ch™ge_li°
) {

146 
	`ngx_‰ì
(
ch™ge_li°
);

149 
ch™ge_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
ch™ges
,

150 
cy˛e
->
log
);

151 i‡(
ch™ge_li°
 =
NULL
) {

152  
NGX_ERROR
;

155 i‡(
ch™ge_ödex
) {

156 
	`ngx_‰ì
(
ch™ge_ödex
);

159 
ch™ge_ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 
dpcf
->
ch™ges
,

160 
cy˛e
->
log
);

161 i‡(
ch™ge_ödex
 =
NULL
) {

162  
NGX_ERROR
;

166 
max_ch™ges
 = 
dpcf
->
ch™ges
;

168 i‡(
√víts
 < 
dpcf
->
evíts
) {

169 i‡(
evít_li°
) {

170 
	`ngx_‰ì
(
evít_li°
);

173 
evít_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
evíts
,

174 
cy˛e
->
log
);

175 i‡(
evít_li°
 =
NULL
) {

176  
NGX_ERROR
;

180 
√víts
 = 
dpcf
->
evíts
;

182 
ngx_io
 = 
ngx_os_io
;

184 
ngx_evít_a˘i⁄s
 = 
ngx_devpﬁl_moduÀ_˘x
.
a˘i⁄s
;

186 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

188  
NGX_OK
;

189 
	}
}

193 
	$ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

195 i‡(
	`˛o£
(
dp
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

200 
dp
 = -1;

202 
	`ngx_‰ì
(
ch™ge_li°
);

203 
	`ngx_‰ì
(
evít_li°
);

204 
	`ngx_‰ì
(
ch™ge_ödex
);

206 
ch™ge_li°
 = 
NULL
;

207 
evít_li°
 = 
NULL
;

208 
ch™ge_ödex
 = 
NULL
;

209 
max_ch™ges
 = 0;

210 
nch™ges
 = 0;

211 
√víts
 = 0;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

218 #i‡(
NGX_DEBUG
)

219 
ngx_c⁄√˘i⁄_t
 *
c
;

222 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

223 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

226 #i‡(
NGX_DEBUG
)

227 
c
 = 
ev
->
d©a
;

228 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

229 "devpﬁ»addÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

232 
ev
->
a˘ive
 = 1;

234  
	`ngx_devpﬁl_£t_evít
(
ev
, 
evít
, 0);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

241 
ngx_evít_t
 *
e
;

242 
ngx_c⁄√˘i⁄_t
 *
c
;

244 
c
 = 
ev
->
d©a
;

246 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

247 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

250 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

251 "devpﬁ»dñÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

253 i‡(
	`ngx_devpﬁl_£t_evít
(
ev
, 
POLLREMOVE
, 
Êags
Ë=
NGX_ERROR
) {

254  
NGX_ERROR
;

257 
ev
->
a˘ive
 = 0;

259 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

260 
e
 = (
evít
 =
POLLIN
Ë? 
c
->
wrôe
 : c->
ªad
;

262 i‡(
e
) {

263 
e
->
a˘ive
 = 0;

266  
NGX_OK
;

271 i‡(
evít
 =
POLLIN
) {

272 
e
 = 
c
->
wrôe
;

273 
evít
 = 
POLLOUT
;

276 
e
 = 
c
->
ªad
;

277 
evít
 = 
POLLIN
;

280 i‡(
e
 &&É->
a˘ive
) {

281  
	`ngx_devpﬁl_£t_evít
(
e
, 
evít
, 0);

284  
NGX_OK
;

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

291 
size_t
 
n
;

292 
ngx_c⁄√˘i⁄_t
 *
c
;

294 
c
 = 
ev
->
d©a
;

296 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

297 "devpﬁ»fd:%dÉv:%04XòÊ:%04Xi", 
c
->
fd
, 
evít
, 
Êags
);

299 i‡(
nch™ges
 >
max_ch™ges
) {

300 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

303 
n
 = 
nch™ges
 * (
pﬁlfd
);

304 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

307  
NGX_ERROR
;

310 
nch™ges
 = 0;

313 
ch™ge_li°
[
nch™ges
].
fd
 = 
c
->fd;

314 
ch™ge_li°
[
nch™ges
].
evíts
 = (Ë
evít
;

315 
ch™ge_li°
[
nch™ges
].
ªvíts
 = 0;

317 
ch™ge_ödex
[
nch™ges
] = 
ev
;

318 
ev
->
ödex
 = 
nch™ges
;

320 
nch™ges
++;

322 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

323 
n
 = 
nch™ges
 * (
pﬁlfd
);

324 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

327  
NGX_ERROR
;

330 
nch™ges
 = 0;

333  
NGX_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

339 
ngx_uöt_t
 
Êags
)

341 
evíts
, 
ªvíts
, 
rc
;

342 
size_t
 
n
;

343 
ngx_fd_t
 
fd
;

344 
ngx_îr_t
 
îr
;

345 
ngx_öt_t
 
i
;

346 
ngx_uöt_t
 
Àvñ
;

347 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

348 
ngx_c⁄√˘i⁄_t
 *
c
;

349 
pﬁlfd
 
pfd
;

350 
dvpﬁl
 
dvp
;

354 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

355 "devpﬁ»timî: %M", 
timî
);

357 i‡(
nch™ges
) {

358 
n
 = 
nch™ges
 * (
pﬁlfd
);

359 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

362  
NGX_ERROR
;

365 
nch™ges
 = 0;

368 
dvp
.
dp_fds
 = 
evít_li°
;

369 
dvp
.
dp_nfds
 = (Ë
√víts
;

370 
dvp
.
dp_timeout
 = 
timî
;

371 
evíts
 = 
	`io˘l
(
dp
, 
DP_POLL
, &
dvp
);

373 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

375 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

376 
	`ngx_time_upd©e
();

379 i‡(
îr
) {

380 i‡(
îr
 =
NGX_EINTR
) {

382 i‡(
ngx_evít_timî_Æ¨m
) {

383 
ngx_evít_timî_Æ¨m
 = 0;

384  
NGX_OK
;

387 
Àvñ
 = 
NGX_LOG_INFO
;

390 
Àvñ
 = 
NGX_LOG_ALERT
;

393 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "ioctl(DP_POLL) failed");

394  
NGX_ERROR
;

397 i‡(
evíts
 == 0) {

398 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

399  
NGX_OK
;

402 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

404  
NGX_ERROR
;

407 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

409 
i
 = 0; i < 
evíts
; i++) {

411 
fd
 = 
evít_li°
[
i
].fd;

412 
ªvíts
 = 
evít_li°
[
i
].revents;

414 
c
 = 
ngx_cy˛e
->
fûes
[
fd
];

416 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

418 
pfd
.
fd
 = fd;

419 
pfd
.
evíts
 = 0;

420 
pfd
.
ªvíts
 = 0;

422 
rc
 = 
	`io˘l
(
dp
, 
DP_ISPOLLED
, &
pfd
);

424 
rc
) {

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

429 
fd
, 
ªvíts
);

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

435 
ªvíts
, 
fd
);

439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

442 
ªvíts
, 
fd
, 
rc
, 
pfd
.fd,Öfd.revents);

444 
pfd
.
fd
 = fd;

445 
pfd
.
evíts
 = 
POLLREMOVE
;

446 
pfd
.
ªvíts
 = 0;

448 i‡(
	`wrôe
(
dp
, &
pfd
, (
pﬁlfd
))

449 !(
ssize_t
Ë(
pﬁlfd
))

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

455 i‡(
	`˛o£
(
fd
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

457 "˛o£(%dËÁûed", 
fd
);

466 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

468 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

470 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

471 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

473 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

476 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

477 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

480 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

483 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

484 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

492 
ªvíts
 |
POLLIN
|
POLLOUT
;

495 
ªv
 = 
c
->
ªad
;

497 i‡((
ªvíts
 & 
POLLIN
Ë&& 
ªv
->
a˘ive
) {

499 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

500 
ªv
->
po°ed_ªady
 = 1;

503 
ªv
->
ªady
 = 1;

506 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

507 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

508 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

510 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

513 
ªv
->
	`h™dÀr
(rev);

517 
wev
 = 
c
->
wrôe
;

519 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
wev
->
a˘ive
) {

521 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

522 
wev
->
po°ed_ªady
 = 1;

525 
wev
->
ªady
 = 1;

528 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

529 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

532 
wev
->
	`h™dÀr
(wev);

537 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

539  
NGX_OK
;

540 
	}
}

544 
	$ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

546 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

548 
dpcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_devpﬁl_c⁄f_t
));

549 i‡(
dpcf
 =
NULL
) {

550  
NULL
;

553 
dpcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

554 
dpcf
->
evíts
 = 
NGX_CONF_UNSET
;

556  
dpcf
;

557 
	}
}

561 
	$ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

563 
ngx_devpﬁl_c⁄f_t
 *
dpcf
 = 
c⁄f
;

565 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
ch™ges
, 32);

566 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
evíts
, 32);

568  
NGX_CONF_OK
;

569 
	}
}

	@src/event/modules/ngx_epoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EPOLL
)

17 
	#EPOLLIN
 0x001

	)

18 
	#EPOLLPRI
 0x002

	)

19 
	#EPOLLOUT
 0x004

	)

20 
	#EPOLLRDNORM
 0x040

	)

21 
	#EPOLLRDBAND
 0x080

	)

22 
	#EPOLLWRNORM
 0x100

	)

23 
	#EPOLLWRBAND
 0x200

	)

24 
	#EPOLLMSG
 0x400

	)

25 
	#EPOLLERR
 0x008

	)

26 
	#EPOLLHUP
 0x010

	)

28 
	#EPOLLET
 0x80000000

	)

29 
	#EPOLLONESHOT
 0x40000000

	)

31 
	#EPOLL_CTL_ADD
 1

	)

32 
	#EPOLL_CTL_DEL
 2

	)

33 
	#EPOLL_CTL_MOD
 3

	)

35 
	uïﬁl_d©a
 {

36 *
	m±r
;

37 
	mfd
;

38 
uöt32_t
 
	mu32
;

39 
uöt64_t
 
	mu64
;

40 } 
	tïﬁl_d©a_t
;

42 
	sïﬁl_evít
 {

43 
uöt32_t
 
	mevíts
;

44 
ïﬁl_d©a_t
 
	md©a
;

48 
ïﬁl_¸óã
(
size
);

50 
	$ïﬁl_¸óã
(
size
)

53 
	}
}

56 
ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
);

58 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

61 
	}
}

64 
ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
);

66 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
)

69 
	}
}

71 #i‡(
NGX_HAVE_FILE_AIO
)

73 
	#SYS_io_£tup
 245

	)

74 
	#SYS_io_de°roy
 246

	)

75 
	#SYS_io_gëevíts
 247

	)

76 
	#SYS_evítfd
 323

	)

78 
u_öt
 
	taio_c⁄ãxt_t
;

80 
	sio_evít
 {

81 
uöt64_t
 
	md©a
;

82 
uöt64_t
 
	mobj
;

83 
öt64_t
 
	mªs
;

84 
öt64_t
 
	mªs2
;

93 
ngx_uöt_t
 
	mevíts
;

94 
ngx_uöt_t
 
	maio_ªque°s
;

95 } 
	tngx_ïﬁl_c⁄f_t
;

98 
ngx_öt_t
 
ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

99 
ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

100 
ngx_öt_t
 
ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

101 
ngx_uöt_t
 
Êags
);

102 
ngx_öt_t
 
ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

103 
ngx_uöt_t
 
Êags
);

104 
ngx_öt_t
 
ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

105 
ngx_öt_t
 
ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

106 
ngx_uöt_t
 
Êags
);

107 
ngx_öt_t
 
ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

108 
ngx_uöt_t
 
Êags
);

110 #i‡(
NGX_HAVE_FILE_AIO
)

111 
ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
);

114 *
ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

115 *
ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

117 
	gï
 = -1;

118 
ïﬁl_evít
 *
	gevít_li°
;

119 
ngx_uöt_t
 
	g√víts
;

121 #i‡(
NGX_HAVE_FILE_AIO
)

123 
	gngx_evítfd
 = -1;

124 
aio_c⁄ãxt_t
 
	gngx_aio_˘x
 = 0;

126 
ngx_evít_t
 
	gngx_evítfd_evít
;

127 
ngx_c⁄√˘i⁄_t
 
	gngx_evítfd_c⁄n
;

131 
ngx_°r_t
 
	gïﬁl_«me
 = 
ngx_°rög
("epoll");

133 
ngx_comm™d_t
 
	gngx_ïﬁl_comm™ds
[] = {

135 { 
ngx_°rög
("epoll_events"),

136 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_c⁄f_£t_num_¶Ÿ
,

139 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
evíts
),

140 
NULL
 },

142 { 
ngx_°rög
("worker_aio_requests"),

143 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

144 
ngx_c⁄f_£t_num_¶Ÿ
,

146 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
aio_ªque°s
),

147 
NULL
 },

149 
ngx_nuŒ_comm™d


153 
ngx_evít_moduÀ_t
 
	gngx_ïﬁl_moduÀ_˘x
 = {

154 &
ïﬁl_«me
,

155 
ngx_ïﬁl_¸óã_c⁄f
,

156 
ngx_ïﬁl_öô_c⁄f
,

159 
ngx_ïﬁl_add_evít
,

160 
ngx_ïﬁl_dñ_evít
,

161 
ngx_ïﬁl_add_evít
,

162 
ngx_ïﬁl_dñ_evít
,

163 
ngx_ïﬁl_add_c⁄√˘i⁄
,

164 
ngx_ïﬁl_dñ_c⁄√˘i⁄
,

165 
NULL
,

166 
ngx_ïﬁl_¥o˚ss_evíts
,

167 
ngx_ïﬁl_öô
,

168 
ngx_ïﬁl_d⁄e
,

172 
ngx_moduÀ_t
 
	gngx_ïﬁl_moduÀ
 = {

173 
NGX_MODULE_V1
,

174 &
ngx_ïﬁl_moduÀ_˘x
,

175 
ngx_ïﬁl_comm™ds
,

176 
NGX_EVENT_MODULE
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NGX_MODULE_V1_PADDING


188 #i‡(
NGX_HAVE_FILE_AIO
)

201 
	$io_£tup
(
u_öt
 
ƒ_ªqs
, 
aio_c⁄ãxt_t
 *
˘x
)

203  
	`sysˇŒ
(
SYS_io_£tup
, 
ƒ_ªqs
, 
˘x
);

204 
	}
}

208 
	$io_de°roy
(
aio_c⁄ãxt_t
 
˘x
)

210  
	`sysˇŒ
(
SYS_io_de°roy
, 
˘x
);

211 
	}
}

215 
	$io_gëevíts
(
aio_c⁄ãxt_t
 
˘x
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
,

216 
time•ec
 *
tmo
)

218  
	`sysˇŒ
(
SYS_io_gëevíts
, 
˘x
, 
mö_ƒ
, 
ƒ
, 
evíts
, 
tmo
);

219 
	}
}

223 
	$ngx_ïﬁl_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ïﬁl_c⁄f_t
 *
ïcf
)

225 
n
;

226 
ïﬁl_evít
 
ì
;

228 
ngx_evítfd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

230 i‡(
ngx_evítfd
 == -1) {

231 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

233 
ngx_fûe_aio
 = 0;

237 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

238 "evítfd: %d", 
ngx_evítfd
);

240 
n
 = 1;

242 i‡(
	`io˘l
(
ngx_evítfd
, 
FIONBIO
, &
n
) == -1) {

243 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

245 
Áûed
;

248 i‡(
	`io_£tup
(
ïcf
->
aio_ªque°s
, &
ngx_aio_˘x
) == -1) {

249 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

251 
Áûed
;

254 
ngx_evítfd_evít
.
d©a
 = &
ngx_evítfd_c⁄n
;

255 
ngx_evítfd_evít
.
h™dÀr
 = 
ngx_ïﬁl_evítfd_h™dÀr
;

256 
ngx_evítfd_evít
.
log
 = 
cy˛e
->log;

257 
ngx_evítfd_evít
.
a˘ive
 = 1;

258 
ngx_evítfd_c⁄n
.
fd
 = 
ngx_evítfd
;

259 
ngx_evítfd_c⁄n
.
ªad
 = &
ngx_evítfd_evít
;

260 
ngx_evítfd_c⁄n
.
log
 = 
cy˛e
->log;

262 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

263 
ì
.
d©a
.
±r
 = &
ngx_evítfd_c⁄n
;

265 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
ngx_evítfd
, &
ì
) != -1) {

269 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

272 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

273 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

277 
Áûed
:

279 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

280 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

284 
ngx_evítfd
 = -1;

285 
ngx_aio_˘x
 = 0;

286 
ngx_fûe_aio
 = 0;

287 
	}
}

292 
ngx_öt_t


293 
	$ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

295 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

297 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ïﬁl_moduÀ
);

299 i‡(
ï
 == -1) {

300 
ï
 = 
	`ïﬁl_¸óã
(
cy˛e
->
c⁄√˘i⁄_n
 / 2);

302 i‡(
ï
 == -1) {

303 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

305  
NGX_ERROR
;

308 #i‡(
NGX_HAVE_FILE_AIO
)

310 
	`ngx_ïﬁl_aio_öô
(
cy˛e
, 
ïcf
);

315 i‡(
√víts
 < 
ïcf
->
evíts
) {

316 i‡(
evít_li°
) {

317 
	`ngx_‰ì
(
evít_li°
);

320 
evít_li°
 = 
	`ngx_Æloc
((
ïﬁl_evít
Ë* 
ïcf
->
evíts
,

321 
cy˛e
->
log
);

322 i‡(
evít_li°
 =
NULL
) {

323  
NGX_ERROR
;

327 
√víts
 = 
ïcf
->
evíts
;

329 
ngx_io
 = 
ngx_os_io
;

331 
ngx_evít_a˘i⁄s
 = 
ngx_ïﬁl_moduÀ_˘x
.
a˘i⁄s
;

333 #i‡(
NGX_HAVE_CLEAR_EVENT
)

334 
ngx_evít_Êags
 = 
NGX_USE_CLEAR_EVENT


336 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT


338 |
NGX_USE_GREEDY_EVENT


339 |
NGX_USE_EPOLL_EVENT
;

341  
NGX_OK
;

342 
	}
}

346 
	$ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

348 i‡(
	`˛o£
(
ï
) == -1) {

349 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

353 
ï
 = -1;

355 #i‡(
NGX_HAVE_FILE_AIO
)

357 i‡(
ngx_evítfd
 != -1) {

359 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

364 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

365 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

369 
ngx_evítfd
 = -1;

372 
ngx_aio_˘x
 = 0;

376 
	`ngx_‰ì
(
evít_li°
);

378 
evít_li°
 = 
NULL
;

379 
√víts
 = 0;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

386 
›
;

387 
uöt32_t
 
evíts
, 
¥ev
;

388 
ngx_evít_t
 *
e
;

389 
ngx_c⁄√˘i⁄_t
 *
c
;

390 
ïﬁl_evít
 
ì
;

392 
c
 = 
ev
->
d©a
;

394 
evíts
 = (
uöt32_t
Ë
evít
;

396 i‡(
evít
 =
NGX_READ_EVENT
) {

397 
e
 = 
c
->
wrôe
;

398 
¥ev
 = 
EPOLLOUT
;

399 #i‡(
NGX_READ_EVENT
 !
EPOLLIN
)

400 
evíts
 = 
EPOLLIN
;

404 
e
 = 
c
->
ªad
;

405 
¥ev
 = 
EPOLLIN
;

406 #i‡(
NGX_WRITE_EVENT
 !
EPOLLOUT
)

407 
evíts
 = 
EPOLLOUT
;

411 i‡(
e
->
a˘ive
) {

412 
›
 = 
EPOLL_CTL_MOD
;

413 
evíts
 |
¥ev
;

416 
›
 = 
EPOLL_CTL_ADD
;

419 
ì
.
evíts
 =Évít†| (
uöt32_t
Ë
Êags
;

420 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

422 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

424 
c
->
fd
, 
›
, 
ì
.
evíts
);

426 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

428 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

429  
NGX_ERROR
;

432 
ev
->
a˘ive
 = 1;

434 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

437  
NGX_OK
;

438 
	}
}

441 
ngx_öt_t


442 
	$ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

444 
›
;

445 
uöt32_t
 
¥ev
;

446 
ngx_evít_t
 *
e
;

447 
ngx_c⁄√˘i⁄_t
 *
c
;

448 
ïﬁl_evít
 
ì
;

456 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

457 
ev
->
a˘ive
 = 0;

458  
NGX_OK
;

461 
c
 = 
ev
->
d©a
;

463 i‡(
evít
 =
NGX_READ_EVENT
) {

464 
e
 = 
c
->
wrôe
;

465 
¥ev
 = 
EPOLLOUT
;

468 
e
 = 
c
->
ªad
;

469 
¥ev
 = 
EPOLLIN
;

472 i‡(
e
->
a˘ive
) {

473 
›
 = 
EPOLL_CTL_MOD
;

474 
ì
.
evíts
 = 
¥ev
 | (
uöt32_t
Ë
Êags
;

475 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

478 
›
 = 
EPOLL_CTL_DEL
;

479 
ì
.
evíts
 = 0;

480 
ì
.
d©a
.
±r
 = 
NULL
;

483 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

485 
c
->
fd
, 
›
, 
ì
.
evíts
);

487 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

488 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

489 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

490  
NGX_ERROR
;

493 
ev
->
a˘ive
 = 0;

495  
NGX_OK
;

496 
	}
}

499 
ngx_öt_t


500 
	$ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

502 
ïﬁl_evít
 
ì
;

504 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLOUT
|
EPOLLET
;

505 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | c->
ªad
->
ö°™˚
);

507 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

508 "ïﬁ»add c⁄√˘i⁄: fd:%dÉv:%08XD", 
c
->
fd
, 
ì
.
evíts
);

510 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
c
->
fd
, &
ì
) == -1) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

512 "ïﬁl_˘l(EPOLL_CTL_ADD, %dËÁûed", 
c
->
fd
);

513  
NGX_ERROR
;

516 
c
->
ªad
->
a˘ive
 = 1;

517 
c
->
wrôe
->
a˘ive
 = 1;

519  
NGX_OK
;

520 
	}
}

523 
ngx_öt_t


524 
	$ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

526 
›
;

527 
ïﬁl_evít
 
ì
;

535 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

536 
c
->
ªad
->
a˘ive
 = 0;

537 
c
->
wrôe
->
a˘ive
 = 0;

538  
NGX_OK
;

541 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

542 "ïﬁ»dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

544 
›
 = 
EPOLL_CTL_DEL
;

545 
ì
.
evíts
 = 0;

546 
ì
.
d©a
.
±r
 = 
NULL
;

548 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

549 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

550 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

551  
NGX_ERROR
;

554 
c
->
ªad
->
a˘ive
 = 0;

555 
c
->
wrôe
->
a˘ive
 = 0;

557  
NGX_OK
;

558 
	}
}

561 
ngx_öt_t


562 
	$ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

564 
evíts
;

565 
uöt32_t
 
ªvíts
;

566 
ngx_öt_t
 
ö°™˚
, 
i
;

567 
ngx_uöt_t
 
Àvñ
;

568 
ngx_îr_t
 
îr
;

569 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

570 
ngx_c⁄√˘i⁄_t
 *
c
;

574 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

575 "ïﬁ»timî: %M", 
timî
);

577 
evíts
 = 
	`ïﬁl_waô
(
ï
, 
evít_li°
, (Ë
√víts
, 
timî
);

579 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

581 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

582 
	`ngx_time_upd©e
();

585 i‡(
îr
) {

586 i‡(
îr
 =
NGX_EINTR
) {

588 i‡(
ngx_evít_timî_Æ¨m
) {

589 
ngx_evít_timî_Æ¨m
 = 0;

590  
NGX_OK
;

593 
Àvñ
 = 
NGX_LOG_INFO
;

596 
Àvñ
 = 
NGX_LOG_ALERT
;

599 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "epoll_wait() failed");

600  
NGX_ERROR
;

603 i‡(
evíts
 == 0) {

604 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

605  
NGX_OK
;

608 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

610  
NGX_ERROR
;

613 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

615 
i
 = 0; i < 
evíts
; i++) {

616 
c
 = 
evít_li°
[
i
].
d©a
.
±r
;

618 
ö°™˚
 = (
uöçå_t
Ë
c
 & 1;

619 
c
 = (
ngx_c⁄√˘i⁄_t
 *Ë((
uöçå_t
) c & (uintptr_t) ~1);

621 
ªv
 = 
c
->
ªad
;

623 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

630 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

631 "ïﬁl: sèÀÉvíà%p", 
c
);

635 
ªvíts
 = 
evít_li°
[
i
].
evíts
;

637 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

639 
c
->
fd
, 
ªvíts
, 
evít_li°
[
i
].
d©a
.
±r
);

641 i‡(
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
)) {

642 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

644 
c
->
fd
, 
ªvíts
);

648 i‡(
ªvíts
 & ~(
EPOLLIN
|
EPOLLOUT
|
EPOLLERR
|
EPOLLHUP
)) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

651 
c
->
fd
, 
ªvíts
);

655 i‡((
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
))

656 && (
ªvíts
 & (
EPOLLIN
|
EPOLLOUT
)) == 0)

664 
ªvíts
 |
EPOLLIN
|
EPOLLOUT
;

667 i‡((
ªvíts
 & 
EPOLLIN
Ë&& 
ªv
->
a˘ive
) {

669 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

670 
ªv
->
po°ed_ªady
 = 1;

673 
ªv
->
ªady
 = 1;

676 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

677 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

678 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

680 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

683 
ªv
->
	`h™dÀr
(rev);

687 
wev
 = 
c
->
wrôe
;

689 i‡((
ªvíts
 & 
EPOLLOUT
Ë&& 
wev
->
a˘ive
) {

691 i‡(
c
->
fd
 =-1 || 
wev
->
ö°™˚
 != instance) {

698 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

699 "ïﬁl: sèÀÉvíà%p", 
c
);

703 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

704 
wev
->
po°ed_ªady
 = 1;

707 
wev
->
ªady
 = 1;

710 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

711 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

714 
wev
->
	`h™dÀr
(wev);

719 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

721  
NGX_OK
;

722 
	}
}

725 #i‡(
NGX_HAVE_FILE_AIO
)

728 
	$ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
)

730 
n
, 
evíts
;

731 
i
;

732 
uöt64_t
 
ªady
;

733 
ngx_îr_t
 
îr
;

734 
ngx_evít_t
 *
e
;

735 
ngx_evít_aio_t
 *
aio
;

736 
io_evít
 
evít
[64];

737 
time•ec
 
ts
;

739 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "eventfd handler");

741 
n
 = 
	`ªad
(
ngx_evítfd
, &
ªady
, 8);

743 
îr
 = 
ngx_î∫o
;

745 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "evítfd: %d", 
n
);

747 i‡(
n
 != 8) {

748 i‡(
n
 == -1) {

749 i‡(
îr
 =
NGX_EAGAIN
) {

753 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
, "read(eventfd) failed");

757 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

758 "ªad”vítfdËªtu∫ed o∆y %d byãs", 
n
);

762 
ts
.
tv_£c
 = 0;

763 
ts
.
tv_n£c
 = 0;

765 
ªady
) {

767 
evíts
 = 
	`io_gëevíts
(
ngx_aio_˘x
, 1, 64, 
evít
, &
ts
);

769 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

770 "io_gëevíts: %l", 
evíts
);

772 i‡(
evíts
 > 0) {

773 
ªady
 -
evíts
;

775 
i
 = 0; i < 
evíts
; i++) {

777 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

779 
evít
[
i
].
d©a
,Évít[i].
obj
,

780 
evít
[
i
].
ªs
,Évít[i].
ªs2
);

782 
e
 = (
ngx_evít_t
 *Ë(
uöçå_t
Ë
evít
[
i
].
d©a
;

784 
e
->
com∂ëe
 = 1;

785 
e
->
a˘ive
 = 0;

786 
e
->
ªady
 = 1;

788 
aio
 = 
e
->
d©a
;

789 
aio
->
ªs
 = 
evít
[
i
].res;

791 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

797 i‡(
evíts
 == 0) {

802 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

806 
	}
}

812 
	$ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

814 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

816 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_ïﬁl_c⁄f_t
));

817 i‡(
ïcf
 =
NULL
) {

818  
NULL
;

821 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

822 
ïcf
->
aio_ªque°s
 = 
NGX_CONF_UNSET
;

824  
ïcf
;

825 
	}
}

829 
	$ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

831 
ngx_ïﬁl_c⁄f_t
 *
ïcf
 = 
c⁄f
;

833 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 512);

834 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
aio_ªque°s
, 32);

836  
NGX_CONF_OK
;

837 
	}
}

	@src/event/modules/ngx_eventport_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EVENTPORT
)

15 
	#ush‹t_t
 
u_sh‹t


	)

16 
	#uöt_t
 
u_öt


	)

18 #i‚de‡
CLOCK_REALTIME


19 
	#CLOCK_REALTIME
 0

	)

20 
	t˛ockid_t
;

21 * 
	ttimî_t
;

26 
	#PORT_SOURCE_AIO
 1

	)

27 
	#PORT_SOURCE_TIMER
 2

	)

28 
	#PORT_SOURCE_USER
 3

	)

29 
	#PORT_SOURCE_FD
 4

	)

30 
	#PORT_SOURCE_ALERT
 5

	)

31 
	#PORT_SOURCE_MQ
 6

	)

33 #i‚de‡
ETIME


34 
	#ETIME
 64

	)

37 
	#SIGEV_PORT
 4

	)

40 
	mp‹ãv_evíts
;

41 
ush‹t_t
 
	mp‹ãv_sour˚
;

42 
ush‹t_t
 
	mp‹ãv_∑d
;

43 
uöçå_t
 
	mp‹ãv_obje˘
;

44 *
	mp‹ãv_u£r
;

45 } 
	tp‹t_evít_t
;

47 
	sp‹t_nŸify
 {

48 
	mp‹äfy_p‹t
;

49 *
	mp‹äfy_u£r
;

50 } 
	tp‹t_nŸify_t
;

52 #i‡(
__FªeBSD_vîsi⁄
 < 700005)

54 
	sôimî•ec
 {

55 
time•ec
 
	mô_öãrvÆ
;

56 
time•ec
 
	mô_vÆue
;

57 } 
	tôimî•ec_t
;

61 
p‹t_¸óã
();

63 
	$p‹t_¸óã
()

66 
	}
}

69 
p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

70 *
u£r
);

72 
	$p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

73 *
u£r
)

76 
	}
}

79 
p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
);

81 
	$p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
)

84 
	}
}

87 
p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

88 
time•ec
 *
timeout
);

90 
	$p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

91 
time•ec
 *
timeout
)

94 
	}
}

97 
timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
);

99 
	$timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

102 
	}
}

105 
timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

106 
ôimî•ec
 *
ovÆue
);

108 
	$timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

109 
ôimî•ec
 *
ovÆue
)

112 
	}
}

115 
timî_dñëe
(
timî_t
 
timîid
);

117 
	$timî_dñëe
(
timî_t
 
timîid
)

120 
	}
}

126 
ngx_uöt_t
 
	mevíts
;

127 } 
	tngx_evíç‹t_c⁄f_t
;

130 
ngx_öt_t
 
ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

131 
ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

132 
ngx_öt_t
 
ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

133 
ngx_uöt_t
 
Êags
);

134 
ngx_öt_t
 
ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

135 
ngx_uöt_t
 
Êags
);

136 
ngx_öt_t
 
ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

137 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

139 *
ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

140 *
ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

142 
	gï
 = -1;

143 
p‹t_evít_t
 *
	gevít_li°
;

144 
ngx_uöt_t
 
	g√víts
;

145 
timî_t
 
	gevít_timî
 = (timer_t) -1;

147 
ngx_°r_t
 
	gevíç‹t_«me
 = 
ngx_°rög
("eventport");

150 
ngx_comm™d_t
 
	gngx_evíç‹t_comm™ds
[] = {

152 { 
ngx_°rög
("eventport_events"),

153 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

154 
ngx_c⁄f_£t_num_¶Ÿ
,

156 
off£tof
(
ngx_evíç‹t_c⁄f_t
, 
evíts
),

157 
NULL
 },

159 
ngx_nuŒ_comm™d


163 
ngx_evít_moduÀ_t
 
	gngx_evíç‹t_moduÀ_˘x
 = {

164 &
evíç‹t_«me
,

165 
ngx_evíç‹t_¸óã_c⁄f
,

166 
ngx_evíç‹t_öô_c⁄f
,

169 
ngx_evíç‹t_add_evít
,

170 
ngx_evíç‹t_dñ_evít
,

171 
ngx_evíç‹t_add_evít
,

172 
ngx_evíç‹t_dñ_evít
,

173 
NULL
,

174 
NULL
,

175 
NULL
,

176 
ngx_evíç‹t_¥o˚ss_evíts
,

177 
ngx_evíç‹t_öô
,

178 
ngx_evíç‹t_d⁄e
,

183 
ngx_moduÀ_t
 
	gngx_evíç‹t_moduÀ
 = {

184 
NGX_MODULE_V1
,

185 &
ngx_evíç‹t_moduÀ_˘x
,

186 
ngx_evíç‹t_comm™ds
,

187 
NGX_EVENT_MODULE
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NGX_MODULE_V1_PADDING


199 
ngx_öt_t


200 
	$ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

202 
p‹t_nŸify_t
 
≤
;

203 
ôimî•ec
 
ôs
;

204 
sigevít
 
£v
;

205 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

207 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíç‹t_moduÀ
);

209 i‡(
ï
 == -1) {

210 
ï
 = 
	`p‹t_¸óã
();

212 i‡(
ï
 == -1) {

213 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

215  
NGX_ERROR
;

219 i‡(
√víts
 < 
ïcf
->
evíts
) {

220 i‡(
evít_li°
) {

221 
	`ngx_‰ì
(
evít_li°
);

224 
evít_li°
 = 
	`ngx_Æloc
((
p‹t_evít_t
Ë* 
ïcf
->
evíts
,

225 
cy˛e
->
log
);

226 i‡(
evít_li°
 =
NULL
) {

227  
NGX_ERROR
;

231 
ngx_evít_Êags
 = 
NGX_USE_EVENTPORT_EVENT
;

233 i‡(
timî
) {

234 
	`ngx_memzîo
(&
≤
, (
p‹t_nŸify_t
));

235 
≤
.
p‹äfy_p‹t
 = 
ï
;

237 
	`ngx_memzîo
(&
£v
, (
sigevít
));

238 
£v
.
sigev_nŸify
 = 
SIGEV_PORT
;

239 #i‡!(
NGX_TEST_BUILD_EVENTPORT
)

240 
£v
.
sigev_vÆue
.
sivÆ_±r
 = &
≤
;

243 i‡(
	`timî_¸óã
(
CLOCK_REALTIME
, &
£v
, &
evít_timî
) == -1) {

244 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

246  
NGX_ERROR
;

249 
ôs
.
ô_öãrvÆ
.
tv_£c
 = 
timî
 / 1000;

250 
ôs
.
ô_öãrvÆ
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

251 
ôs
.
ô_vÆue
.
tv_£c
 = 
timî
 / 1000;

252 
ôs
.
ô_vÆue
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

254 i‡(
	`timî_£âime
(
evít_timî
, 0, &
ôs
, 
NULL
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

257  
NGX_ERROR
;

260 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

263 
√víts
 = 
ïcf
->
evíts
;

265 
ngx_io
 = 
ngx_os_io
;

267 
ngx_evít_a˘i⁄s
 = 
ngx_evíç‹t_moduÀ_˘x
.
a˘i⁄s
;

269  
NGX_OK
;

270 
	}
}

274 
	$ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

276 i‡(
evít_timî
 !(
timî_t
) -1) {

277 i‡(
	`timî_dñëe
(
evít_timî
) == -1) {

278 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

282 
evít_timî
 = (
timî_t
) -1;

285 i‡(
	`˛o£
(
ï
) == -1) {

286 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

290 
ï
 = -1;

292 
	`ngx_‰ì
(
evít_li°
);

294 
evít_li°
 = 
NULL
;

295 
√víts
 = 0;

296 
	}
}

299 
ngx_öt_t


300 
	$ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

302 
ngx_öt_t
 
evíts
, 
¥ev
;

303 
ngx_evít_t
 *
e
;

304 
ngx_c⁄√˘i⁄_t
 *
c
;

306 
c
 = 
ev
->
d©a
;

308 
evíts
 = 
evít
;

310 i‡(
evít
 =
NGX_READ_EVENT
) {

311 
e
 = 
c
->
wrôe
;

312 
¥ev
 = 
POLLOUT
;

313 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

314 
evíts
 = 
POLLIN
;

318 
e
 = 
c
->
ªad
;

319 
¥ev
 = 
POLLIN
;

320 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

321 
evíts
 = 
POLLOUT
;

325 i‡(
e
->
⁄eshŸ
) {

326 
evíts
 |
¥ev
;

329 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

330 "evíç‹àaddÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evíts
);

332 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evíts
,

333 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

336 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

338  
NGX_ERROR
;

341 
ev
->
a˘ive
 = 1;

342 
ev
->
⁄eshŸ
 = 1;

344  
NGX_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

351 
ngx_evít_t
 *
e
;

352 
ngx_c⁄√˘i⁄_t
 *
c
;

360 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

361 
ev
->
a˘ive
 = 0;

362 
ev
->
⁄eshŸ
 = 0;

363  
NGX_OK
;

366 
c
 = 
ev
->
d©a
;

368 i‡(
evít
 =
NGX_READ_EVENT
) {

369 
e
 = 
c
->
wrôe
;

370 
evít
 = 
POLLOUT
;

373 
e
 = 
c
->
ªad
;

374 
evít
 = 
POLLIN
;

377 i‡(
e
->
⁄eshŸ
) {

378 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

379 "evíç‹àch™gêevít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

381 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evít
,

382 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

385 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

387  
NGX_ERROR
;

391 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

392 "evíç‹àdñÉvít: fd:%d", 
c
->
fd
);

394 i‡(
	`p‹t_dissocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
) == -1) {

395 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

397  
NGX_ERROR
;

401 
ev
->
a˘ive
 = 0;

402 
ev
->
⁄eshŸ
 = 0;

404  
NGX_OK
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

410 
ngx_uöt_t
 
Êags
)

412 
n
, 
ªvíts
;

413 
u_öt
 
evíts
;

414 
ngx_îr_t
 
îr
;

415 
ngx_öt_t
 
ö°™˚
;

416 
ngx_uöt_t
 
i
, 
Àvñ
;

417 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
, **
queue
;

418 
ngx_c⁄√˘i⁄_t
 *
c
;

419 
time•ec
 
ts
, *
ç
;

421 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

422 
ç
 = 
NULL
;

425 
ts
.
tv_£c
 = 
timî
 / 1000;

426 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

427 
ç
 = &
ts
;

430 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

431 "evíç‹àtimî: %M", 
timî
);

433 
evíts
 = 1;

435 
n
 = 
	`p‹t_gën
(
ï
, 
evít_li°
, (
u_öt
Ë
√víts
, &
evíts
, 
ç
);

437 
îr
 = 
ngx_î∫o
;

439 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

440 
	`ngx_time_upd©e
();

443 i‡(
n
 == -1) {

444 i‡(
îr
 =
ETIME
) {

445 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

446  
NGX_OK
;

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

451  
NGX_ERROR
;

454 
Àvñ
 = (
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
;

455 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "port_getn() failed");

456  
NGX_ERROR
;

459 i‡(
evíts
 == 0) {

460 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

461  
NGX_OK
;

464 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

466  
NGX_ERROR
;

469 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

471 
i
 = 0; i < 
evíts
; i++) {

473 i‡(
evít_li°
[
i
].
p‹ãv_sour˚
 =
PORT_SOURCE_TIMER
) {

474 
	`ngx_time_upd©e
();

478 
ev
 = 
evít_li°
[
i
].
p‹ãv_u£r
;

480 
evít_li°
[
i
].
p‹ãv_sour˚
) {

482 
PORT_SOURCE_FD
:

484 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

485 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

487 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

494 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

495 "evíç‹t: sèÀÉvíà%p", 
ev
);

499 
ªvíts
 = 
evít_li°
[
i
].
p‹ãv_evíts
;

501 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

503 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

505 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

506 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

508 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

511 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

512 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

514 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

517 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

518 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

526 
ªvíts
 |
POLLIN
|
POLLOUT
;

529 
c
 = 
ev
->
d©a
;

530 
ªv
 = 
c
->
ªad
;

531 
wev
 = 
c
->
wrôe
;

533 
ªv
->
a˘ive
 = 0;

534 
wev
->
a˘ive
 = 0;

536 i‡(
ªvíts
 & 
POLLIN
) {

538 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

539 
ªv
->
po°ed_ªady
 = 1;

542 
ªv
->
ªady
 = 1;

545 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

546 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

547 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

549 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

552 
ªv
->
	`h™dÀr
(rev);

554 i‡(
ev
->
˛o£d
) {

559 i‡(
ªv
->
ac˚±
) {

560 i‡(
ngx_u£_ac˚±_muãx
) {

561 
ngx_ac˚±_evíts
 = 1;

565 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
POLLIN
,

566 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

569 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

571  
NGX_ERROR
;

576 i‡(
ªvíts
 & 
POLLOUT
) {

578 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

579 
wev
->
po°ed_ªady
 = 1;

582 
wev
->
ªady
 = 1;

585 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

586 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

589 
wev
->
	`h™dÀr
(wev);

596 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

598 
evít_li°
[
i
].
p‹ãv_obje˘
);

603 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

605  
NGX_OK
;

606 
	}
}

610 
	$ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

612 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

614 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evíç‹t_c⁄f_t
));

615 i‡(
ïcf
 =
NULL
) {

616  
NULL
;

619 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

621  
ïcf
;

622 
	}
}

626 
	$ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

628 
ngx_evíç‹t_c⁄f_t
 *
ïcf
 = 
c⁄f
;

630 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 32);

632  
NGX_CONF_OK
;

633 
	}
}

	@src/event/modules/ngx_kqueue_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mch™ges
;

15 
ngx_uöt_t
 
	mevíts
;

16 } 
	tngx_kqueue_c⁄f_t
;

19 
ngx_öt_t
 
ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

20 
ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_öt_t
 
ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

22 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

24 
ngx_uöt_t
 
Êags
);

25 
ngx_öt_t
 
ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
fûãr
,

26 
ngx_uöt_t
 
Êags
);

27 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
);

28 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

29 
ngx_uöt_t
 
Êags
);

30 
ngx_ölöe
 
ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
,

31 
kevít
 *
kev
);

33 *
ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

34 *
ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

37 
	gngx_kqueue
 = -1;

47 
kevít
 *
	gch™ge_li°
, *
	gch™ge_li°0
, *
	gch™ge_li°1
;

48 
kevít
 *
	gevít_li°
;

49 
ngx_uöt_t
 
	gmax_ch™ges
, 
	gnch™ges
, 
	g√víts
;

51 #i‡(
NGX_THREADS
)

52 
ngx_muãx_t
 *
	gli°_muãx
;

53 
ngx_muãx_t
 *
	gkevít_muãx
;

58 
ngx_°r_t
 
	gkqueue_«me
 = 
ngx_°rög
("kqueue");

60 
ngx_comm™d_t
 
	gngx_kqueue_comm™ds
[] = {

62 { 
ngx_°rög
("kqueue_changes"),

63 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_c⁄f_£t_num_¶Ÿ
,

66 
off£tof
(
ngx_kqueue_c⁄f_t
, 
ch™ges
),

67 
NULL
 },

69 { 
ngx_°rög
("kqueue_events"),

70 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_num_¶Ÿ
,

73 
off£tof
(
ngx_kqueue_c⁄f_t
, 
evíts
),

74 
NULL
 },

76 
ngx_nuŒ_comm™d


80 
ngx_evít_moduÀ_t
 
	gngx_kqueue_moduÀ_˘x
 = {

81 &
kqueue_«me
,

82 
ngx_kqueue_¸óã_c⁄f
,

83 
ngx_kqueue_öô_c⁄f
,

86 
ngx_kqueue_add_evít
,

87 
ngx_kqueue_dñ_evít
,

88 
ngx_kqueue_add_evít
,

89 
ngx_kqueue_dñ_evít
,

90 
NULL
,

91 
NULL
,

92 
ngx_kqueue_¥o˚ss_ch™ges
,

93 
ngx_kqueue_¥o˚ss_evíts
,

94 
ngx_kqueue_öô
,

95 
ngx_kqueue_d⁄e


100 
ngx_moduÀ_t
 
	gngx_kqueue_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_kqueue_moduÀ_˘x
,

103 
ngx_kqueue_comm™ds
,

104 
NGX_EVENT_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_öt_t


117 
	$ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

119 
ngx_kqueue_c⁄f_t
 *
kcf
;

120 
time•ec
 
ts
;

121 #i‡(
NGX_HAVE_TIMER_EVENT
)

122 
kevít
 
kev
;

125 
kcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_kqueue_moduÀ
);

127 i‡(
ngx_kqueue
 == -1) {

128 
ngx_kqueue
 = 
	`kqueue
();

130 i‡(
ngx_kqueue
 == -1) {

131 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

133  
NGX_ERROR
;

136 #i‡(
NGX_THREADS
)

138 
li°_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

139 i‡(
li°_muãx
 =
NULL
) {

140  
NGX_ERROR
;

143 
kevít_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

144 i‡(
kevít_muãx
 =
NULL
) {

145  
NGX_ERROR
;

151 i‡(
max_ch™ges
 < 
kcf
->
ch™ges
) {

152 i‡(
nch™ges
) {

153 
ts
.
tv_£c
 = 0;

154 
ts
.
tv_n£c
 = 0;

156 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

161  
NGX_ERROR
;

163 
nch™ges
 = 0;

166 i‡(
ch™ge_li°0
) {

167 
	`ngx_‰ì
(
ch™ge_li°0
);

170 
ch™ge_li°0
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

171 
cy˛e
->
log
);

172 i‡(
ch™ge_li°0
 =
NULL
) {

173  
NGX_ERROR
;

176 i‡(
ch™ge_li°1
) {

177 
	`ngx_‰ì
(
ch™ge_li°1
);

180 
ch™ge_li°1
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

181 
cy˛e
->
log
);

182 i‡(
ch™ge_li°1
 =
NULL
) {

183  
NGX_ERROR
;

186 
ch™ge_li°
 = 
ch™ge_li°0
;

189 
max_ch™ges
 = 
kcf
->
ch™ges
;

191 i‡(
√víts
 < 
kcf
->
evíts
) {

192 i‡(
evít_li°
) {

193 
	`ngx_‰ì
(
evít_li°
);

196 
evít_li°
 = 
	`ngx_Æloc
(
kcf
->
evíts
 * (
kevít
), 
cy˛e
->
log
);

197 i‡(
evít_li°
 =
NULL
) {

198  
NGX_ERROR
;

202 
ngx_evít_Êags
 = 
NGX_USE_ONESHOT_EVENT


203 |
NGX_USE_KQUEUE_EVENT


204 |
NGX_USE_VNODE_EVENT
;

206 #i‡(
NGX_HAVE_TIMER_EVENT
)

208 i‡(
timî
) {

209 
kev
.
idít
 = 0;

210 
kev
.
fûãr
 = 
EVFILT_TIMER
;

211 
kev
.
Êags
 = 
EV_ADD
|
EV_ENABLE
;

212 
kev
.
fÊags
 = 0;

213 
kev
.
d©a
 = 
timî
;

214 
kev
.
ud©a
 = 0;

216 
ts
.
tv_£c
 = 0;

217 
ts
.
tv_n£c
 = 0;

219 i‡(
	`kevít
(
ngx_kqueue
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

220 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

222  
NGX_ERROR
;

225 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

230 #i‡(
NGX_HAVE_CLEAR_EVENT
)

231 
ngx_evít_Êags
 |
NGX_USE_CLEAR_EVENT
;

233 
ngx_evít_Êags
 |
NGX_USE_LEVEL_EVENT
;

236 #i‡(
NGX_HAVE_LOWAT_EVENT
)

237 
ngx_evít_Êags
 |
NGX_USE_LOWAT_EVENT
;

240 
√víts
 = 
kcf
->
evíts
;

242 
ngx_io
 = 
ngx_os_io
;

244 
ngx_evít_a˘i⁄s
 = 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
;

246  
NGX_OK
;

247 
	}
}

251 
	$ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

253 i‡(
	`˛o£
(
ngx_kqueue
) == -1) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

258 
ngx_kqueue
 = -1;

260 #i‡(
NGX_THREADS
)

261 
	`ngx_muãx_de°roy
(
kevít_muãx
);

262 
	`ngx_muãx_de°roy
(
li°_muãx
);

265 
	`ngx_‰ì
(
ch™ge_li°1
);

266 
	`ngx_‰ì
(
ch™ge_li°0
);

267 
	`ngx_‰ì
(
evít_li°
);

269 
ch™ge_li°1
 = 
NULL
;

270 
ch™ge_li°0
 = 
NULL
;

271 
ch™ge_li°
 = 
NULL
;

272 
evít_li°
 = 
NULL
;

273 
max_ch™ges
 = 0;

274 
nch™ges
 = 0;

275 
√víts
 = 0;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

282 
ngx_öt_t
 
rc
;

284 
ngx_evít_t
 *
e
;

285 
ngx_c⁄√˘i⁄_t
 *
c
;

288 
ev
->
a˘ive
 = 1;

289 
ev
->
dißbÀd
 = 0;

290 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

292 
	`ngx_muãx_lock
(
li°_muãx
);

296 i‡(
ev
->
ödex
 < 
nch™ges


297 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

298 =(
uöçå_t
Ë
ev
)

300 i‡(
ch™ge_li°
[
ev
->
ödex
].
Êags
 =
EV_DISABLE
) {

307 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

309 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

311 i‡(
ev
->
ödex
 < --
nch™ges
) {

312 
e
 = (
ngx_evít_t
 *)

313 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

314 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

315 
e
->
ödex
 = 
ev
->index;

318 
	`ngx_muãx_u∆ock
(
li°_muãx
);

320  
NGX_OK
;

323 
c
 = 
ev
->
d©a
;

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

326 "¥eviou†evíà⁄ #%d wîênŸÖas£d i¿kî√l", 
c
->
fd
);

328 
	`ngx_muãx_u∆ock
(
li°_muãx
);

330  
NGX_ERROR
;

335 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
EV_ADD
|
EV_ENABLE
|
Êags
);

337 
	`ngx_muãx_u∆ock
(
li°_muãx
);

339  
rc
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

346 
ngx_öt_t
 
rc
;

347 
ngx_evít_t
 *
e
;

349 
ev
->
a˘ive
 = 0;

350 
ev
->
dißbÀd
 = 0;

352 
	`ngx_muãx_lock
(
li°_muãx
);

354 i‡(
ev
->
ödex
 < 
nch™ges


355 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

356 =(
uöçå_t
Ë
ev
)

358 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

360 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

364 
nch™ges
--;

366 i‡(
ev
->
ödex
 < 
nch™ges
) {

367 
e
 = (
ngx_evít_t
 *)

368 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

369 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

370 
e
->
ödex
 = 
ev
->index;

373 
	`ngx_muãx_u∆ock
(
li°_muãx
);

375  
NGX_OK
;

384 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

385 
	`ngx_muãx_u∆ock
(
li°_muãx
);

386  
NGX_OK
;

389 i‡(
Êags
 & 
NGX_DISABLE_EVENT
) {

390 
ev
->
dißbÀd
 = 1;

393 
Êags
 |
EV_DELETE
;

396 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
Êags
);

398 
	`ngx_muãx_u∆ock
(
li°_muãx
);

400  
rc
;

401 
	}
}

404 
ngx_öt_t


405 
	$ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
fûãr
, 
ngx_uöt_t
 
Êags
)

407 
kevít
 *
kev
;

408 
time•ec
 
ts
;

409 
ngx_c⁄√˘i⁄_t
 *
c
;

411 
c
 = 
ev
->
d©a
;

413 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

415 
c
->
fd
, 
fûãr
, 
Êags
);

417 i‡(
nch™ges
 >
max_ch™ges
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

421 
ts
.
tv_£c
 = 0;

422 
ts
.
tv_n£c
 = 0;

424 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

428  
NGX_ERROR
;

431 
nch™ges
 = 0;

434 
kev
 = &
ch™ge_li°
[
nch™ges
];

436 
kev
->
idít
 = 
c
->
fd
;

437 
kev
->
fûãr
 = () filter;

438 
kev
->
Êags
 = (
u_sh‹t
) flags;

439 
kev
->
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë
ev
 |Év->
ö°™˚
);

441 i‡(
fûãr
 =
EVFILT_VNODE
) {

442 
kev
->
fÊags
 = 
NOTE_DELETE
|
NOTE_WRITE
|
NOTE_EXTEND


443 |
NOTE_ATTRIB
|
NOTE_RENAME


444 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 430000) \

445 || 
__FªeBSD_vîsi⁄
 >= 500018

446 |
NOTE_REVOKE


449 
kev
->
d©a
 = 0;

452 #i‡(
NGX_HAVE_LOWAT_EVENT
)

453 i‡(
Êags
 & 
NGX_LOWAT_EVENT
) {

454 
kev
->
fÊags
 = 
NOTE_LOWAT
;

455 
kev
->
d©a
 = 
ev
->
avaûabÀ
;

458 
kev
->
fÊags
 = 0;

459 
kev
->
d©a
 = 0;

462 
kev
->
fÊags
 = 0;

463 
kev
->
d©a
 = 0;

467 
ev
->
ödex
 = 
nch™ges
;

468 
nch™ges
++;

470 i‡(
Êags
 & 
NGX_FLUSH_EVENT
) {

471 
ts
.
tv_£c
 = 0;

472 
ts
.
tv_n£c
 = 0;

474 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "kevent flush");

476 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

479 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

480  
NGX_ERROR
;

483 
nch™ges
 = 0;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

492 
ngx_uöt_t
 
Êags
)

494 
evíts
, 
n
;

495 
ngx_öt_t
 
i
, 
ö°™˚
;

496 
ngx_uöt_t
 
Àvñ
;

497 
ngx_îr_t
 
îr
;

498 
ngx_evít_t
 *
ev
, **
queue
;

499 
time•ec
 
ts
, *
ç
;

501 i‡(
ngx_thªaded
) {

502 i‡(
	`ngx_kqueue_¥o˚ss_ch™ges
(
cy˛e
, 0Ë=
NGX_ERROR
) {

503  
NGX_ERROR
;

506 
n
 = 0;

509 
n
 = (Ë
nch™ges
;

510 
nch™ges
 = 0;

513 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

514 
ç
 = 
NULL
;

518 
ts
.
tv_£c
 = 
timî
 / 1000;

519 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

527 #i‡(
NGX_DARWIN_KEVENT_BUG
)

528 
ts
.
tv_n£c
 <<= 32;

531 
ç
 = &
ts
;

534 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

535 "kevíàtimî: %M, ch™ges: %d", 
timî
, 
n
);

537 
evíts
 = 
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, 
n
, 
evít_li°
, (Ë
√víts
, 
ç
);

539 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

541 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

542 
	`ngx_time_upd©e
();

545 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

546 "kevíàevíts: %d", 
evíts
);

548 i‡(
îr
) {

549 i‡(
îr
 =
NGX_EINTR
) {

551 i‡(
ngx_evít_timî_Æ¨m
) {

552 
ngx_evít_timî_Æ¨m
 = 0;

553  
NGX_OK
;

556 
Àvñ
 = 
NGX_LOG_INFO
;

559 
Àvñ
 = 
NGX_LOG_ALERT
;

562 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "kevent() failed");

563  
NGX_ERROR
;

566 i‡(
evíts
 == 0) {

567 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

568  
NGX_OK
;

571 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

573  
NGX_ERROR
;

576 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

578 
i
 = 0; i < 
evíts
; i++) {

580 
	`ngx_kqueue_dump_evít
(
cy˛e
->
log
, &
evít_li°
[
i
]);

582 i‡(
evít_li°
[
i
].
Êags
 & 
EV_ERROR
) {

583 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
evít_li°
[
i
].
d©a
,

585 
evít_li°
[
i
].
idít
,Évít_li°[i].
fûãr
,

586 
evít_li°
[
i
].
Êags
);

590 #i‡(
NGX_HAVE_TIMER_EVENT
)

592 i‡(
evít_li°
[
i
].
fûãr
 =
EVFILT_TIMER
) {

593 
	`ngx_time_upd©e
();

599 
ev
 = (
ngx_evít_t
 *Ë
evít_li°
[
i
].
ud©a
;

601 
evít_li°
[
i
].
fûãr
) {

603 
EVFILT_READ
:

604 
EVFILT_WRITE
:

606 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

607 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

609 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

616 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

617 "kevít: sèÀÉvíà%p", 
ev
);

621 i‡(
ev
->
log
 && (ev->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

622 
	`ngx_kqueue_dump_evít
(
ev
->
log
, &
evít_li°
[
i
]);

625 i‡(
ev
->
⁄eshŸ
) {

626 
ev
->
a˘ive
 = 0;

629 #i‡(
NGX_THREADS
)

631 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

632 
ev
->
po°ed_ªady
 = 1;

633 
ev
->
po°ed_avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

635 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

636 
ev
->
po°ed_eof
 = 1;

637 
ev
->
po°ed_î∫o
 = 
evít_li°
[
i
].
fÊags
;

640 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

647 
ev
->
avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

649 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

650 
ev
->
≥ndög_eof
 = 1;

651 
ev
->
kq_î∫o
 = 
evít_li°
[
i
].
fÊags
;

654 
ev
->
ªady
 = 1;

658 
EVFILT_VNODE
:

659 
ev
->
kq_vnode
 = 1;

663 
EVFILT_AIO
:

664 
ev
->
com∂ëe
 = 1;

665 
ev
->
ªady
 = 1;

670 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

672 
evít_li°
[
i
].
fûãr
);

676 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

677 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

678 &
ngx_po°ed_evíts
);

679 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

684 
ev
->
	`h™dÀr
(ev);

687 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

689  
NGX_OK
;

690 
	}
}

693 
ngx_öt_t


694 
	$ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
)

696 
n
;

697 
ngx_öt_t
 
rc
;

698 
ngx_îr_t
 
îr
;

699 
time•ec
 
ts
;

700 
kevít
 *
ch™ges
;

702 
	`ngx_muãx_lock
(
kevít_muãx
);

704 
	`ngx_muãx_lock
(
li°_muãx
);

706 i‡(
nch™ges
 == 0) {

707 
	`ngx_muãx_u∆ock
(
li°_muãx
);

708 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

709  
NGX_OK
;

712 
ch™ges
 = 
ch™ge_li°
;

713 i‡(
ch™ge_li°
 =
ch™ge_li°0
) {

714 
ch™ge_li°
 = 
ch™ge_li°1
;

716 
ch™ge_li°
 = 
ch™ge_li°0
;

719 
n
 = (Ë
nch™ges
;

720 
nch™ges
 = 0;

722 
	`ngx_muãx_u∆ock
(
li°_muãx
);

724 
ts
.
tv_£c
 = 0;

725 
ts
.
tv_n£c
 = 0;

727 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

728 "kevíàch™ges: %d", 
n
);

730 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ges
, 
n
, 
NULL
, 0, &
ts
) == -1) {

731 
îr
 = 
ngx_î∫o
;

732 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

733 
cy˛e
->
log
, 
îr
, "kevent() failed");

734 
rc
 = 
NGX_ERROR
;

737 
rc
 = 
NGX_OK
;

740 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

742  
rc
;

743 
	}
}

746 
ngx_ölöe
 

747 
	$ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
, 
kevít
 *
kev
)

749 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

750 (
kev
->
idít
 > 0x8000000 && kev->ident != () -1) ?

753 
kev
->
idít
, kev->
fûãr
,

754 
kev
->
Êags
, kev->
fÊags
,

755 
kev
->
d©a
, kev->
ud©a
);

756 
	}
}

760 
	$ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

762 
ngx_kqueue_c⁄f_t
 *
kcf
;

764 
kcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_kqueue_c⁄f_t
));

765 i‡(
kcf
 =
NULL
) {

766  
NULL
;

769 
kcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

770 
kcf
->
evíts
 = 
NGX_CONF_UNSET
;

772  
kcf
;

773 
	}
}

777 
	$ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

779 
ngx_kqueue_c⁄f_t
 *
kcf
 = 
c⁄f
;

781 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
ch™ges
, 512);

782 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
evíts
, 512);

784  
NGX_CONF_OK
;

785 
	}
}

	@src/event/modules/ngx_poll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 *
ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

24 
pﬁlfd
 *
	gevít_li°
;

25 
ngx_öt_t
 
	g√víts
;

28 
ngx_°r_t
 
	gpﬁl_«me
 = 
ngx_°rög
("poll");

30 
ngx_evít_moduÀ_t
 
	gngx_pﬁl_moduÀ_˘x
 = {

31 &
pﬁl_«me
,

32 
NULL
,

33 
ngx_pﬁl_öô_c⁄f
,

36 
ngx_pﬁl_add_evít
,

37 
ngx_pﬁl_dñ_evít
,

38 
ngx_pﬁl_add_evít
,

39 
ngx_pﬁl_dñ_evít
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
ngx_pﬁl_¥o˚ss_evíts
,

44 
ngx_pﬁl_öô
,

45 
ngx_pﬁl_d⁄e


50 
ngx_moduÀ_t
 
	gngx_pﬁl_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_pﬁl_moduÀ_˘x
,

53 
NULL
,

54 
NGX_EVENT_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
ngx_öt_t


68 
	$ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

70 
pﬁlfd
 *
li°
;

72 i‡(
evít_li°
 =
NULL
) {

73 
√víts
 = 0;

76 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


77 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


78 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

80 
li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
cy˛e
->
c⁄√˘i⁄_n
,

81 
cy˛e
->
log
);

82 i‡(
li°
 =
NULL
) {

83  
NGX_ERROR
;

86 i‡(
evít_li°
) {

87 
	`ngx_mem˝y
(
li°
, 
evít_li°
, (
ngx_evít_t
 *Ë* 
√víts
);

88 
	`ngx_‰ì
(
evít_li°
);

91 
evít_li°
 = 
li°
;

94 
ngx_io
 = 
ngx_os_io
;

96 
ngx_evít_a˘i⁄s
 = 
ngx_pﬁl_moduÀ_˘x
.
a˘i⁄s
;

98 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

100  
NGX_OK
;

101 
	}
}

105 
	$ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

107 
	`ngx_‰ì
(
evít_li°
);

109 
evít_li°
 = 
NULL
;

110 
	}
}

113 
ngx_öt_t


114 
	$ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

116 
ngx_evít_t
 *
e
;

117 
ngx_c⁄√˘i⁄_t
 *
c
;

119 
c
 = 
ev
->
d©a
;

121 
ev
->
a˘ive
 = 1;

123 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

125 "pﬁ»evíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

126  
NGX_OK
;

129 i‡(
evít
 =
NGX_READ_EVENT
) {

130 
e
 = 
c
->
wrôe
;

131 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

132 
evít
 = 
POLLIN
;

136 
e
 = 
c
->
ªad
;

137 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

138 
evít
 = 
POLLOUT
;

142 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

143 "pﬁ»addÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

145 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

146 
evít_li°
[
√víts
].
fd
 = 
c
->fd;

147 
evít_li°
[
√víts
].
evíts
 = (Ë
evít
;

148 
evít_li°
[
√víts
].
ªvíts
 = 0;

150 
ev
->
ödex
 = 
√víts
;

151 
√víts
++;

154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

155 "pﬁ»add index: %i", 
e
->
ödex
);

157 
evít_li°
[
e
->
ödex
].
evíts
 |(Ë
evít
;

158 
ev
->
ödex
 = 
e
->index;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

168 
ngx_evít_t
 *
e
;

169 
ngx_c⁄√˘i⁄_t
 *
c
;

171 
c
 = 
ev
->
d©a
;

173 
ev
->
a˘ive
 = 0;

175 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

178 
c
->
fd
, 
evít
);

179  
NGX_OK
;

182 i‡(
evít
 =
NGX_READ_EVENT
) {

183 
e
 = 
c
->
wrôe
;

184 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

185 
evít
 = 
POLLIN
;

189 
e
 = 
c
->
ªad
;

190 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

191 
evít
 = 
POLLOUT
;

195 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

196 "pﬁ»dñÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

198 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

199 
√víts
--;

201 i‡(
ev
->
ödex
 < (
ngx_uöt_t
Ë
√víts
) {

203 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

204 "ödex: c›yÉvíà%uòtÿ%i", 
√víts
, 
ev
->
ödex
);

206 
evít_li°
[
ev
->
ödex
] =Évít_li°[
√víts
];

208 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
√víts
].
fd
];

210 i‡(
c
->
fd
 == -1) {

211 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

215 i‡(
c
->
ªad
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

216 
c
->
ªad
->
ödex
 = 
ev
->index;

219 i‡(
c
->
wrôe
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

220 
c
->
wrôe
->
ödex
 = 
ev
->index;

226 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

227 "pﬁ»dñ index: %i", 
e
->
ödex
);

229 
evít_li°
[
e
->
ödex
].
evíts
 &(Ë~
evít
;

232 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

234  
NGX_OK
;

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

241 
ªady
, 
ªvíts
;

242 
ngx_îr_t
 
îr
;

243 
ngx_öt_t
 
i
, 
ƒódy
;

244 
ngx_uöt_t
 
found
, 
Àvñ
;

245 
ngx_evít_t
 *
ev
, **
queue
;

246 
ngx_c⁄√˘i⁄_t
 *
c
;

250 #i‡(
NGX_DEBUG0
)

251 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

252 
i
 = 0; i < 
√víts
; i++) {

253 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

255 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
);

260 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "pﬁ»timî: %M", 
timî
);

262 
ªady
 = 
	`pﬁl
(
evít_li°
, (
u_öt
Ë
√víts
, (Ë
timî
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "pﬁ»ªady %d o‡%d", 
ªady
, 
√víts
);

273 i‡(
îr
) {

274 i‡(
îr
 =
NGX_EINTR
) {

276 i‡(
ngx_evít_timî_Æ¨m
) {

277 
ngx_evít_timî_Æ¨m
 = 0;

278  
NGX_OK
;

281 
Àvñ
 = 
NGX_LOG_INFO
;

284 
Àvñ
 = 
NGX_LOG_ALERT
;

287 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "poll() failed");

288  
NGX_ERROR
;

291 i‡(
ªady
 == 0) {

292 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

293  
NGX_OK
;

296 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

298  
NGX_ERROR
;

301 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

303 
ƒódy
 = 0;

305 
i
 = 0; i < 
√víts
 && 
ªady
; i++) {

307 
ªvíts
 = 
evít_li°
[
i
].revents;

310 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

314 i‡(
ªvíts
) {

315 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

317 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

321 i‡(
ªvíts
 & 
POLLNVAL
) {

322 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

324 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

327 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

328 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

330 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

333 i‡(
evít_li°
[
i
].
fd
 == -1) {

341 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
i
].
fd
];

343 i‡(
c
->
fd
 == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "unexpectedÉvent");

351 i‡(
i
 =
√víts
 - 1) {

352 
√víts
--;

354 
evít_li°
[
i
].
fd
 = -1;

360 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

361 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

369 
ªvíts
 |
POLLIN
|
POLLOUT
;

372 
found
 = 0;

374 i‡((
ªvíts
 & 
POLLIN
Ë&& 
c
->
ªad
->
a˘ive
) {

375 
found
 = 1;

377 
ev
 = 
c
->
ªad
;

379 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

380 
ev
->
po°ed_ªady
 = 1;

383 
ev
->
ªady
 = 1;

386 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

387 &
ngx_po°ed_evíts
);

388 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

391 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
c
->
wrôe
->
a˘ive
) {

392 
found
 = 1;

393 
ev
 = 
c
->
wrôe
;

395 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

396 
ev
->
po°ed_ªady
 = 1;

399 
ev
->
ªady
 = 1;

402 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

405 i‡(
found
) {

406 
ªady
--;

411 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

413 i‡(
ªady
 != 0) {

414 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "pollÑeady !=Évents");

417  
ƒódy
;

418 
	}
}

422 
	$ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

424 
ngx_evít_c⁄f_t
 *
ecf
;

426 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

428 i‡(
ecf
->
u£
 !
ngx_pﬁl_moduÀ
.
˘x_ödex
) {

429  
NGX_CONF_OK
;

432 #i‡(
NGX_THREADS
)

434 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

436  
NGX_CONF_ERROR
;

440  
NGX_CONF_OK
;

443 
	}
}

	@src/event/modules/ngx_rtsig_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_RTSIG
)

15 #i‡(
NGX_DARWIN
)

17 
	#SIGRTMIN
 33

	)

18 
	#si_fd
 
__∑d
[0]

	)

22 #ifde‡ 
SIGRTMIN


23 
	#si_fd
 
_ªas⁄
.
__•¨e__
.
__•¨e2__
[0]

	)

25 
	#SIGRTMIN
 33

	)

26 
	#si_fd
 
__•¨e__
[0]

	)

31 
	#F_SETSIG
 10

	)

32 
	#KERN_RTSIGNR
 30

	)

33 
	#KERN_RTSIGMAX
 31

	)

35 
sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

36 c⁄° 
time•ec
 *
timeout
);

38 
	$sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

39 c⁄° 
time•ec
 *
timeout
)

42 
	}
}

44 
	gngx_löux_πsig_max
;

50 
ngx_uöt_t
 
	msigno
;

51 
ngx_uöt_t
 
	movîÊow_evíts
;

52 
ngx_uöt_t
 
	movîÊow_ã°
;

53 
ngx_uöt_t
 
	movîÊow_thªshﬁd
;

54 } 
	tngx_πsig_c⁄f_t
;

57 
ngx_evít_moduÀ_t
 
ngx_pﬁl_moduÀ_˘x
;

59 
ngx_öt_t
 
ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

60 
ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

61 
ngx_öt_t
 
ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

62 
ngx_öt_t
 
ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

63 
ngx_uöt_t
 
Êags
);

64 
ngx_öt_t
 
ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

65 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

66 
ngx_öt_t
 
ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
,

67 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

69 *
ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

70 *
ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

71 *
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
,

72 *
po°
, *
d©a
);

75 
sig£t_t
 
	g£t
;

76 
ngx_uöt_t
 
	govîÊow
, 
	govîÊow_cuºít
;

77 
pﬁlfd
 *
	govîÊow_li°
;

80 
ngx_°r_t
 
	gπsig_«me
 = 
ngx_°rög
("rtsig");

82 
ngx_c⁄f_num_bounds_t
 
	gngx_ovîÊow_thªshﬁd_bounds
 = {

83 
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
, 2, 10

87 
ngx_comm™d_t
 
	gngx_πsig_comm™ds
[] = {

89 { 
ngx_°rög
("rtsig_signo"),

90 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_c⁄f_£t_num_¶Ÿ
,

93 
off£tof
(
ngx_πsig_c⁄f_t
, 
signo
),

94 
NULL
 },

96 { 
ngx_°rög
("rtsig_overflow_events"),

97 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_num_¶Ÿ
,

100 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_evíts
),

101 
NULL
 },

103 { 
ngx_°rög
("rtsig_overflow_test"),

104 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

105 
ngx_c⁄f_£t_num_¶Ÿ
,

107 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_ã°
),

108 
NULL
 },

110 { 
ngx_°rög
("rtsig_overflow_threshold"),

111 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

112 
ngx_c⁄f_£t_num_¶Ÿ
,

114 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_thªshﬁd
),

115 &
ngx_ovîÊow_thªshﬁd_bounds
 },

117 
ngx_nuŒ_comm™d


121 
ngx_evít_moduÀ_t
 
	gngx_πsig_moduÀ_˘x
 = {

122 &
πsig_«me
,

123 
ngx_πsig_¸óã_c⁄f
,

124 
ngx_πsig_öô_c⁄f
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
ngx_πsig_add_c⁄√˘i⁄
,

132 
ngx_πsig_dñ_c⁄√˘i⁄
,

133 
NULL
,

134 
ngx_πsig_¥o˚ss_evíts
,

135 
ngx_πsig_öô
,

136 
ngx_πsig_d⁄e
,

141 
ngx_moduÀ_t
 
	gngx_πsig_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_πsig_moduÀ_˘x
,

144 
ngx_πsig_comm™ds
,

145 
NGX_EVENT_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


157 
ngx_öt_t


158 
	$ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

160 
ngx_πsig_c⁄f_t
 *
πscf
;

162 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

164 
	`sigem±y£t
(&
£t
);

165 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
);

166 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
 + 1);

167 
	`sigadd£t
(&
£t
, 
SIGIO
);

168 
	`sigadd£t
(&
£t
, 
SIGALRM
);

170 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

171 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

173  
NGX_ERROR
;

176 i‡(
ovîÊow_li°
) {

177 
	`ngx_‰ì
(
ovîÊow_li°
);

180 
ovîÊow_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
πscf
->
ovîÊow_evíts
,

181 
cy˛e
->
log
);

182 i‡(
ovîÊow_li°
 =
NULL
) {

183  
NGX_ERROR
;

186 
ngx_io
 = 
ngx_os_io
;

188 
ngx_evít_a˘i⁄s
 = 
ngx_πsig_moduÀ_˘x
.
a˘i⁄s
;

190 
ngx_evít_Êags
 = 
NGX_USE_RTSIG_EVENT


191 |
NGX_USE_GREEDY_EVENT


192 |
NGX_USE_FD_EVENT
;

194  
NGX_OK
;

195 
	}
}

199 
	$ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

201 
	`ngx_‰ì
(
ovîÊow_li°
);

203 
ovîÊow_li°
 = 
NULL
;

204 
	}
}

207 
ngx_öt_t


208 
	$ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

210 
ngx_uöt_t
 
signo
;

211 
ngx_πsig_c⁄f_t
 *
πscf
;

213 i‡(
c
->
ªad
->
ac˚±
 && c->ªad->
dißbÀd
) {

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

216 "πsigÉ«bÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

218 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

219 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

221  
NGX_ERROR
;

224 
c
->
ªad
->
a˘ive
 = 1;

225 
c
->
ªad
->
dißbÀd
 = 0;

228 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

230 
signo
 = 
πscf
->signÿ+ 
c
->
ªad
->
ö°™˚
;

232 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

233 "πsigádd c⁄√˘i⁄: fd:%d signo:%ui", 
c
->
fd
, 
signo
);

235 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
|
O_ASYNC
) == -1) {

236 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

238  
NGX_ERROR
;

241 i‡(
	`f˙é
(
c
->
fd
, 
F_SETSIG
, (Ë
signo
) == -1) {

242 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

244  
NGX_ERROR
;

247 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

248 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

250  
NGX_ERROR
;

253 #i‡(
NGX_HAVE_ONESIGFD
)

254 i‡(
	`f˙é
(
c
->
fd
, 
F_SETAUXFL
, 
O_ONESIGFD
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

257  
NGX_ERROR
;

261 
c
->
ªad
->
a˘ive
 = 1;

262 
c
->
wrôe
->
a˘ive
 = 1;

264  
NGX_OK
;

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

272 "πsig dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

274 i‡((
Êags
 & 
NGX_DISABLE_EVENT
Ë&& 
c
->
ªad
->
ac˚±
) {

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

277 "πsig dißbÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

279 
c
->
ªad
->
a˘ive
 = 0;

280 
c
->
ªad
->
dißbÀd
 = 1;

281  
NGX_OK
;

284 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

285 
c
->
ªad
->
a˘ive
 = 0;

286 
c
->
wrôe
->
a˘ive
 = 0;

287  
NGX_OK
;

290 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
) == -1) {

291 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

293  
NGX_ERROR
;

296 
c
->
ªad
->
a˘ive
 = 0;

297 
c
->
wrôe
->
a˘ive
 = 0;

299  
NGX_OK
;

300 
	}
}

303 
ngx_öt_t


304 
	$ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

306 
signo
;

307 
ngx_öt_t
 
ö°™˚
;

308 
ngx_îr_t
 
îr
;

309 
sigöfo_t
 
si
;

310 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

311 
time•ec
 
ts
, *
ç
;

312 
siga˘i⁄
 
ß
;

313 
ngx_c⁄√˘i⁄_t
 *
c
;

314 
ngx_πsig_c⁄f_t
 *
πscf
;

316 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

317 
ç
 = 
NULL
;

320 
ts
.
tv_£c
 = 
timî
 / 1000;

321 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

322 
ç
 = &
ts
;

325 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

326 "πsigÅimî: %M", 
timî
);

330 
signo
 = 
	`sigtimedwaô
(&
£t
, &
si
, 
ç
);

332 i‡(
signo
 == -1) {

333 
îr
 = 
ngx_î∫o
;

335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 
îr
,

336 "πsig signo:%d", 
signo
);

338 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

339 
	`ngx_time_upd©e
();

342 i‡(
îr
 =
NGX_EAGAIN
) {

346 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

347  
NGX_AGAIN
;

350 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

352  
NGX_ERROR
;

355 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

356 
cy˛e
->
log
, 
îr
, "sigtimedwait() failed");

357  
NGX_ERROR
;

360 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

362 
signo
, 
si
.
si_fd
, si.
si_b™d
);

364 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

365 
	`ngx_time_upd©e
();

368 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

370 i‡(
signo
 =(Ë
πscf
->signo || signo == ()Ñtscf->signo + 1) {

372 i‡(
ovîÊow
 && (
ngx_uöt_t
Ë
si
.
si_fd
 > 
ovîÊow_cuºít
) {

373  
NGX_OK
;

376 
c
 = 
ngx_cy˛e
->
fûes
[
si
.
si_fd
];

378 i‡(
c
 =
NULL
) {

382  
NGX_OK
;

385 
ö°™˚
 = 
signo
 - (Ë
πscf
->signo;

387 
ªv
 = 
c
->
ªad
;

389 i‡(
ªv
->
ö°™˚
 != instance) {

396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

397 "πsig: sèÀÉvíà%p", 
c
);

399  
NGX_OK
;

402 i‡((
si
.
si_b™d
 & (
POLLIN
|
POLLHUP
|
POLLERR
)Ë&& 
ªv
->
a˘ive
) {

404 
ªv
->
ªady
 = 1;

406 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

407 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

408 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

410 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

413 
ªv
->
	`h™dÀr
(rev);

417 
wev
 = 
c
->
wrôe
;

419 i‡((
si
.
si_b™d
 & (
POLLOUT
|
POLLHUP
|
POLLERR
)Ë&& 
wev
->
a˘ive
) {

421 
wev
->
ªady
 = 1;

423 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

424 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

427 
wev
->
	`h™dÀr
(wev);

431  
NGX_OK
;

433 } i‡(
signo
 =
SIGALRM
) {

435 
	`ngx_time_upd©e
();

437  
NGX_OK
;

439 } i‡(
signo
 =
SIGIO
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

446 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

447 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

448 
	`sigem±y£t
(&
ß
.
ß_mask
);

450 i‡(
	`siga˘i⁄
(
πscf
->
signo
, &
ß
, 
NULL
) == -1) {

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

452 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
);

455 i‡(
	`siga˘i⁄
(
πscf
->
signo
 + 1, &
ß
, 
NULL
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

457 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
 + 1);

460 
ovîÊow
 = 1;

461 
ovîÊow_cuºít
 = 0;

462 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_ovîÊow
;

464  
NGX_ERROR
;

468 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

469 "sigtimedwaô(Ëªtu∫ed u√x≥˘ed sig«l: %d", 
signo
);

471  
NGX_ERROR
;

472 
	}
}

475 
ngx_öt_t


476 
	$ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

477 
ngx_uöt_t
 
Êags
)

479 
«me
[2], 
πsig_max
, 
πsig_ƒ
, 
evíts
, 
ªady
;

480 
size_t
 
Àn
;

481 
ngx_îr_t
 
îr
;

482 
ngx_uöt_t
 
ã°ed
, 
n
, 
i
;

483 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

484 
ngx_c⁄√˘i⁄_t
 *
c
;

485 
ngx_πsig_c⁄f_t
 *
πscf
;

487 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

490 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

492 
ã°ed
 = 0;

496 
n
 = 0;

497 
n
 < 
πscf
->
ovîÊow_evíts
) {

499 i‡(
ovîÊow_cuºít
 =
cy˛e
->
c⁄√˘i⁄_n
) {

503 
c
 = 
cy˛e
->
fûes
[
ovîÊow_cuºít
++];

505 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

509 
evíts
 = 0;

511 i‡(
c
->
ªad
->
a˘ive
 && c->ªad->
h™dÀr
) {

512 
evíts
 |
POLLIN
;

515 i‡(
c
->
wrôe
->
a˘ive
 && c->wrôe->
h™dÀr
) {

516 
evíts
 |
POLLOUT
;

519 i‡(
evíts
 == 0) {

523 
ovîÊow_li°
[
n
].
fd
 = 
c
->fd;

524 
ovîÊow_li°
[
n
].
evíts
 =Évents;

525 
ovîÊow_li°
[
n
].
ªvíts
 = 0;

526 
n
++;

529 i‡(
n
 == 0) {

534 
ªady
 = 
	`pﬁl
(
ovîÊow_li°
, 
n
, 0);

536 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

537 "πsig ovîÊowÖﬁl:%d", 
ªady
);

539 i‡(
ªady
 == -1) {

540 
îr
 = 
ngx_î∫o
;

541 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

542 
cy˛e
->
log
, 0,

545 i‡(
îr
 =
NGX_EINTR
) {

553 i‡(
ªady
 <= 0) {

557 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

559 
i
 = 0; i < 
n
; i++) {

560 
c
 = 
cy˛e
->
fûes
[
ovîÊow_li°
[
i
].
fd
];

562 i‡(
c
 =
NULL
) {

566 
ªv
 = 
c
->
ªad
;

568 i‡(
ªv
->
a˘ive


569 && !
ªv
->
˛o£d


570 && 
ªv
->
h™dÀr


571 && (
ovîÊow_li°
[
i
].
ªvíts


572 & (
POLLIN
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

574 
ã°ed
++;

576 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

577 
ªv
->
po°ed_ªady
 = 1;

580 
ªv
->
ªady
 = 1;

583 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

584 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

585 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

587 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

590 
ªv
->
	`h™dÀr
(rev);

594 
wev
 = 
c
->
wrôe
;

596 i‡(
wev
->
a˘ive


597 && !
wev
->
˛o£d


598 && 
wev
->
h™dÀr


599 && (
ovîÊow_li°
[
i
].
ªvíts


600 & (
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

602 
ã°ed
++;

604 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

605 
wev
->
po°ed_ªady
 = 1;

608 
wev
->
ªady
 = 1;

611 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

612 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

615 
wev
->
	`h™dÀr
(wev);

620 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

622 i‡(
ã°ed
 >
πscf
->
ovîÊow_ã°
) {

624 i‡(
ngx_löux_πsig_max
) {

634 
«me
[0] = 
CTL_KERN
;

635 
«me
[1] = 
KERN_RTSIGMAX
;

636 
Àn
 = (
πsig_max
);

638 i‡(
	`sys˘l
(
«me
, 2, &
πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

639 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

641  
NGX_ERROR
;

645 
«me
[1] = 
KERN_RTSIGNR
;

646 
Àn
 = (
πsig_ƒ
);

648 i‡(
	`sys˘l
(
«me
, 2, &
πsig_ƒ
, &
Àn
, 
NULL
, 0) == -1) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

651  
NGX_ERROR
;

660 i‡(
πsig_max
 / (Ë
πscf
->
ovîÊow_thªshﬁd
 < 
πsig_ƒ
) {

661 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

663 
πsig_ƒ
, 
πsig_max
);

664 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
)

677 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
) {

682 
ã°ed
 = 0;

686 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

687 
	`ngx_time_upd©e
();

690 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

693 
ovîÊow
 = 0;

694 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_evíts
;

696  
NGX_OK
;

697 
	}
}

701 
	$ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

703 
ngx_πsig_c⁄f_t
 *
πscf
;

705 
πscf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_πsig_c⁄f_t
));

706 i‡(
πscf
 =
NULL
) {

707  
NULL
;

710 
πscf
->
signo
 = 
NGX_CONF_UNSET
;

711 
πscf
->
ovîÊow_evíts
 = 
NGX_CONF_UNSET
;

712 
πscf
->
ovîÊow_ã°
 = 
NGX_CONF_UNSET
;

713 
πscf
->
ovîÊow_thªshﬁd
 = 
NGX_CONF_UNSET
;

715  
πscf
;

716 
	}
}

720 
	$ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

722 
ngx_πsig_c⁄f_t
 *
πscf
 = 
c⁄f
;

725 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
signo
, 
SIGRTMIN
 + 10);

727 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_evíts
, 16);

728 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_ã°
, 32);

729 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_thªshﬁd
, 10);

731  
NGX_CONF_OK
;

732 
	}
}

736 
	$ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

738 i‡(
ngx_löux_πsig_max
) {

739  
	`ngx_c⁄f_check_num_bounds
(
cf
, 
po°
, 
d©a
);

742 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

746  
NGX_CONF_OK
;

747 
	}
}

	@src/event/modules/ngx_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_öt_t
 
	gmax_fd
;

31 
ngx_uöt_t
 
	g√víts
;

33 
ngx_evít_t
 **
	gevít_ödex
;

36 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

38 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

39 &
£À˘_«me
,

40 
NULL
,

41 
ngx_£À˘_öô_c⁄f
,

44 
ngx_£À˘_add_evít
,

45 
ngx_£À˘_dñ_evít
,

46 
ngx_£À˘_add_evít
,

47 
ngx_£À˘_dñ_evít
,

48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
ngx_£À˘_¥o˚ss_evíts
,

52 
ngx_£À˘_öô
,

53 
ngx_£À˘_d⁄e


58 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_£À˘_moduÀ_˘x
,

61 
NULL
,

62 
NGX_EVENT_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

77 
ngx_evít_t
 **
ödex
;

79 i‡(
evít_ödex
 =
NULL
) {

80 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

81 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

82 
√víts
 = 0;

85 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


86 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


87 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

89 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

90 
cy˛e
->
log
);

91 i‡(
ödex
 =
NULL
) {

92  
NGX_ERROR
;

95 i‡(
evít_ödex
) {

96 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

97 
	`ngx_‰ì
(
evít_ödex
);

100 
evít_ödex
 = 
ödex
;

103 
ngx_io
 = 
ngx_os_io
;

105 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

107 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

109 
max_fd
 = -1;

111  
NGX_OK
;

112 
	}
}

116 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

118 
	`ngx_‰ì
(
evít_ödex
);

120 
evít_ödex
 = 
NULL
;

121 
	}
}

124 
ngx_öt_t


125 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

127 
ngx_c⁄√˘i⁄_t
 *
c
;

129 
c
 = 
ev
->
d©a
;

131 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

132 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

134 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

136 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

137  
NGX_OK
;

140 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

141 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

145 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

146  
NGX_ERROR
;

149 i‡(
evít
 =
NGX_READ_EVENT
) {

150 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

152 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

153 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

156 i‡(
max_fd
 !-1 && max_fd < 
c
->
fd
) {

157 
max_fd
 = 
c
->
fd
;

160 
ev
->
a˘ive
 = 1;

162 
evít_ödex
[
√víts
] = 
ev
;

163 
ev
->
ödex
 = 
√víts
;

164 
√víts
++;

166  
NGX_OK
;

167 
	}
}

170 
ngx_öt_t


171 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

173 
ngx_evít_t
 *
e
;

174 
ngx_c⁄√˘i⁄_t
 *
c
;

176 
c
 = 
ev
->
d©a
;

178 
ev
->
a˘ive
 = 0;

180 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

181  
NGX_OK
;

184 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

185 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

187 i‡(
evít
 =
NGX_READ_EVENT
) {

188 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

190 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

191 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

194 i‡(
max_fd
 =
c
->
fd
) {

195 
max_fd
 = -1;

198 i‡(
ev
->
ödex
 < --
√víts
) {

199 
e
 = 
evít_ödex
[
√víts
];

200 
evít_ödex
[
ev
->
ödex
] = 
e
;

201 
e
->
ödex
 = 
ev
->index;

204 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

206  
NGX_OK
;

207 
	}
}

210 
ngx_öt_t


211 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

212 
ngx_uöt_t
 
Êags
)

214 
ªady
, 
ƒódy
;

215 
ngx_îr_t
 
îr
;

216 
ngx_uöt_t
 
i
, 
found
;

217 
ngx_evít_t
 *
ev
, **
queue
;

218 
timevÆ
 
tv
, *
ç
;

219 
ngx_c⁄√˘i⁄_t
 *
c
;

221 i‡(
max_fd
 == -1) {

222 
i
 = 0; i < 
√víts
; i++) {

223 
c
 = 
evít_ödex
[
i
]->
d©a
;

224 i‡(
max_fd
 < 
c
->
fd
) {

225 
max_fd
 = 
c
->
fd
;

229 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

230 "ch™gêmax_fd: %d", 
max_fd
);

233 #i‡(
NGX_DEBUG
)

234 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

235 
i
 = 0; i < 
√víts
; i++) {

236 
ev
 = 
evít_ödex
[
i
];

237 
c
 = 
ev
->
d©a
;

238 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

239 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

243 "max_fd: %d", 
max_fd
);

247 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

248 
ç
 = 
NULL
;

251 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

252 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

253 
ç
 = &
tv
;

256 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

257 "£À˘Åimî: %M", 
timî
);

259 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

260 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

262 
ªady
 = 
	`£À˘
(
max_fd
 + 1, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "£À˘Ñódy %d", 
ªady
);

273 i‡(
îr
) {

274 
ngx_uöt_t
 
Àvñ
;

276 i‡(
îr
 =
NGX_EINTR
) {

278 i‡(
ngx_evít_timî_Æ¨m
) {

279 
ngx_evít_timî_Æ¨m
 = 0;

280  
NGX_OK
;

283 
Àvñ
 = 
NGX_LOG_INFO
;

286 
Àvñ
 = 
NGX_LOG_ALERT
;

289 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "select() failed");

291 i‡(
îr
 =
EBADF
) {

292 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

295  
NGX_ERROR
;

298 i‡(
ªady
 == 0) {

299 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

300  
NGX_OK
;

303 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

305  
NGX_ERROR
;

308 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

310 
ƒódy
 = 0;

312 
i
 = 0; i < 
√víts
; i++) {

313 
ev
 = 
evít_ödex
[
i
];

314 
c
 = 
ev
->
d©a
;

315 
found
 = 0;

317 i‡(
ev
->
wrôe
) {

318 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

319 
found
 = 1;

320 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

321 "£À˘ wrôê%d", 
c
->
fd
);

325 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

326 
found
 = 1;

327 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

328 "£À˘Ñód %d", 
c
->
fd
);

332 i‡(
found
) {

333 
ev
->
ªady
 = 1;

335 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

336 &
ngx_po°ed_evíts
);

337 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

339 
ƒódy
++;

343 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

345 i‡(
ªady
 !
ƒódy
) {

346 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

347 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

349 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

352  
NGX_OK
;

353 
	}
}

357 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

359 
n
;

360 
sockÀn_t
 
Àn
;

361 
ngx_îr_t
 
îr
;

362 
ngx_sockë_t
 
s
;

364 
s
 = 0; s <
max_fd
; s++) {

366 i‡(
	`FD_ISSET
(
s
, &
ma°î_ªad_fd_£t
) == 0) {

370 
Àn
 = ();

372 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

373 
îr
 = 
ngx_sockë_î∫o
;

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

376 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

378 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

382 
s
 = 0; s <
max_fd
; s++) {

384 i‡(
	`FD_ISSET
(
s
, &
ma°î_wrôe_fd_£t
) == 0) {

388 
Àn
 = ();

390 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

391 
îr
 = 
ngx_sockë_î∫o
;

393 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

394 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

396 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

400 
max_fd
 = -1;

401 
	}
}

405 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

407 
ngx_evít_c⁄f_t
 *
ecf
;

409 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

411 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

412  
NGX_CONF_OK
;

417 i‡(
cy˛e
->
c⁄√˘i⁄_n
 > 
FD_SETSIZE
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

420 "suµ‹ãd by sñe˘(Ëi†%ud", 
FD_SETSIZE
);

421  
NGX_CONF_ERROR
;

424 #i‡(
NGX_THREADS
)

426 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

428  
NGX_CONF_ERROR
;

432  
NGX_CONF_OK
;

435 
	}
}

	@src/event/modules/ngx_win32_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_uöt_t
 
	gmax_ªad
;

31 
ngx_uöt_t
 
	gmax_wrôe
;

32 
ngx_uöt_t
 
	g√víts
;

34 
ngx_evít_t
 **
	gevít_ödex
;

37 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

39 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

40 &
£À˘_«me
,

41 
NULL
,

42 
ngx_£À˘_öô_c⁄f
,

45 
ngx_£À˘_add_evít
,

46 
ngx_£À˘_dñ_evít
,

47 
ngx_£À˘_add_evít
,

48 
ngx_£À˘_dñ_evít
,

49 
NULL
,

50 
NULL
,

51 
NULL
,

52 
ngx_£À˘_¥o˚ss_evíts
,

53 
ngx_£À˘_öô
,

54 
ngx_£À˘_d⁄e


59 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_£À˘_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 
ngx_öt_t


76 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

78 
ngx_evít_t
 **
ödex
;

80 i‡(
evít_ödex
 =
NULL
) {

81 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

82 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

83 
√víts
 = 0;

86 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


87 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


88 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

90 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

91 
cy˛e
->
log
);

92 i‡(
ödex
 =
NULL
) {

93  
NGX_ERROR
;

96 i‡(
evít_ödex
) {

97 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

98 
	`ngx_‰ì
(
evít_ödex
);

101 
evít_ödex
 = 
ödex
;

104 
ngx_io
 = 
ngx_os_io
;

106 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

108 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

110 
max_ªad
 = 0;

111 
max_wrôe
 = 0;

113  
NGX_OK
;

114 
	}
}

118 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

120 
	`ngx_‰ì
(
evít_ödex
);

122 
evít_ödex
 = 
NULL
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

129 
ngx_c⁄√˘i⁄_t
 *
c
;

131 
c
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

134 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

136 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

138 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

139  
NGX_OK
;

142 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

143 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

147 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

148  
NGX_ERROR
;

151 i‡((
evít
 =
NGX_READ_EVENT
Ë&& (
max_ªad
 >
FD_SETSIZE
)

152 || (
evít
 =
NGX_WRITE_EVENT
Ë&& (
max_wrôe
 >
FD_SETSIZE
))

154 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ev
->
log
, 0,

156 "suµ‹ãd by sñe˘(Ëi†%d", 
FD_SETSIZE
);

157  
NGX_ERROR
;

160 i‡(
evít
 =
NGX_READ_EVENT
) {

161 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

162 
max_ªad
++;

164 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

165 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

166 
max_wrôe
++;

169 
ev
->
a˘ive
 = 1;

171 
evít_ödex
[
√víts
] = 
ev
;

172 
ev
->
ödex
 = 
√víts
;

173 
√víts
++;

175  
NGX_OK
;

176 
	}
}

179 
ngx_öt_t


180 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

182 
ngx_evít_t
 *
e
;

183 
ngx_c⁄√˘i⁄_t
 *
c
;

185 
c
 = 
ev
->
d©a
;

187 
ev
->
a˘ive
 = 0;

189 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

190  
NGX_OK
;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

194 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

196 i‡(
evít
 =
NGX_READ_EVENT
) {

197 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

198 
max_ªad
--;

200 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

201 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

202 
max_wrôe
--;

205 i‡(
ev
->
ödex
 < --
√víts
) {

206 
e
 = 
evít_ödex
[
√víts
];

207 
evít_ödex
[
ev
->
ödex
] = 
e
;

208 
e
->
ödex
 = 
ev
->index;

211 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

219 
ngx_uöt_t
 
Êags
)

221 
ªady
, 
ƒódy
;

222 
ngx_îr_t
 
îr
;

223 
ngx_uöt_t
 
i
, 
found
;

224 
ngx_evít_t
 *
ev
, **
queue
;

225 
timevÆ
 
tv
, *
ç
;

226 
ngx_c⁄√˘i⁄_t
 *
c
;

228 #i‡(
NGX_DEBUG
)

229 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

230 
i
 = 0; i < 
√víts
; i++) {

231 
ev
 = 
evít_ödex
[
i
];

232 
c
 = 
ev
->
d©a
;

233 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

234 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

239 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

240 
ç
 = 
NULL
;

243 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

244 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

245 
ç
 = &
tv
;

248 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

249 "£À˘Åimî: %M", 
timî
);

251 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

252 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

254 i‡(
max_ªad
 || 
max_wrôe
) {

255 
ªady
 = 
	`£À˘
(0, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

265 
	`ngx_m¶ìp
(
timî
);

267 
ªady
 = 0;

270 
îr
 = (
ªady
 =-1Ë? 
ngx_sockë_î∫o
 : 0;

272 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

273 
	`ngx_time_upd©e
();

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

277 "£À˘Ñódy %d", 
ªady
);

279 i‡(
îr
) {

280 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
, "select() failed");

282 i‡(
îr
 =
WSAENOTSOCK
) {

283 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

286  
NGX_ERROR
;

289 i‡(
ªady
 == 0) {

290 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

291  
NGX_OK
;

294 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

296  
NGX_ERROR
;

299 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

301 
ƒódy
 = 0;

303 
i
 = 0; i < 
√víts
; i++) {

304 
ev
 = 
evít_ödex
[
i
];

305 
c
 = 
ev
->
d©a
;

306 
found
 = 0;

308 i‡(
ev
->
wrôe
) {

309 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

310 
found
 = 1;

311 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 "£À˘ wrôê%d", 
c
->
fd
);

316 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

317 
found
 = 1;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

319 "£À˘Ñód %d", 
c
->
fd
);

323 i‡(
found
) {

324 
ev
->
ªady
 = 1;

326 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

327 &
ngx_po°ed_evíts
);

328 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

330 
ƒódy
++;

334 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

336 i‡(
ªady
 !
ƒódy
) {

337 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

338 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

340 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

343  
NGX_OK
;

344 
	}
}

348 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

350 
n
;

351 
u_öt
 
i
;

352 
sockÀn_t
 
Àn
;

353 
ngx_îr_t
 
îr
;

354 
ngx_sockë_t
 
s
;

356 
i
 = 0; i < 
ma°î_ªad_fd_£t
.
fd_cou¡
; i++) {

358 
s
 = 
ma°î_ªad_fd_£t
.
fd_¨øy
[
i
];

359 
Àn
 = ();

361 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

362 
îr
 = 
ngx_sockë_î∫o
;

364 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

365 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

367 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

371 
i
 = 0; i < 
ma°î_wrôe_fd_£t
.
fd_cou¡
; i++) {

373 
s
 = 
ma°î_wrôe_fd_£t
.
fd_¨øy
[
i
];

374 
Àn
 = ();

376 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

377 
îr
 = 
ngx_sockë_î∫o
;

379 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

380 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

382 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

385 
	}
}

389 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

391 
ngx_evít_c⁄f_t
 *
ecf
;

393 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

395 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

396  
NGX_CONF_OK
;

399  
NGX_CONF_OK
;

400 
	}
}

	@src/event/ngx_event.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#DEFAULT_CONNECTIONS
 512

	)

16 
ngx_moduÀ_t
 
ngx_kqueue_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_evíç‹t_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_devpﬁl_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_πsig_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_£À˘_moduÀ
;

24 *
ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
ngx_öt_t
 
ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_öt_t
 
ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
);

27 *
ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

29 *
ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

30 *
c⁄f
);

31 *
ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

32 *
ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

35 *
ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

36 *
ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

39 
ngx_uöt_t
 
	gngx_timî_ªsﬁuti⁄
;

40 
sig_©omic_t
 
	gngx_evít_timî_Æ¨m
;

42 
ngx_uöt_t
 
	gngx_evít_max_moduÀ
;

44 
ngx_uöt_t
 
	gngx_evít_Êags
;

45 
ngx_evít_a˘i⁄s_t
 
	gngx_evít_a˘i⁄s
;

48 
ngx_©omic_t
 
	gc⁄√˘i⁄_cou¡î
 = 1;

49 
ngx_©omic_t
 *
	gngx_c⁄√˘i⁄_cou¡î
 = &
c⁄√˘i⁄_cou¡î
;

52 
ngx_©omic_t
 *
	gngx_ac˚±_muãx_±r
;

53 
ngx_shmtx_t
 
	gngx_ac˚±_muãx
;

54 
ngx_uöt_t
 
	gngx_u£_ac˚±_muãx
;

55 
ngx_uöt_t
 
	gngx_ac˚±_evíts
;

56 
ngx_uöt_t
 
	gngx_ac˚±_muãx_hñd
;

57 
ngx_m£c_t
 
	gngx_ac˚±_muãx_dñay
;

58 
ngx_öt_t
 
	gngx_ac˚±_dißbÀd
;

59 
ngx_fûe_t
 
	gngx_ac˚±_muãx_lock_fûe
;

62 #i‡(
NGX_STAT_STUB
)

64 
ngx_©omic_t
 
	gngx_°©_ac˚±ed0
;

65 
ngx_©omic_t
 *
	gngx_°©_ac˚±ed
 = &
ngx_°©_ac˚±ed0
;

66 
ngx_©omic_t
 
	gngx_°©_h™dÀd0
;

67 
ngx_©omic_t
 *
	gngx_°©_h™dÀd
 = &
ngx_°©_h™dÀd0
;

68 
ngx_©omic_t
 
	gngx_°©_ªque°s0
;

69 
ngx_©omic_t
 *
	gngx_°©_ªque°s
 = &
ngx_°©_ªque°s0
;

70 
ngx_©omic_t
 
	gngx_°©_a˘ive0
;

71 
ngx_©omic_t
 *
	gngx_°©_a˘ive
 = &
ngx_°©_a˘ive0
;

72 
ngx_©omic_t
 
	gngx_°©_ªadög0
;

73 
ngx_©omic_t
 *
	gngx_°©_ªadög
 = &
ngx_°©_ªadög0
;

74 
ngx_©omic_t
 
	gngx_°©_wrôög0
;

75 
ngx_©omic_t
 *
	gngx_°©_wrôög
 = &
ngx_°©_wrôög0
;

81 
ngx_comm™d_t
 
	gngx_evíts_comm™ds
[] = {

83 { 
ngx_°rög
("events"),

84 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

85 
ngx_evíts_block
,

88 
NULL
 },

90 
ngx_nuŒ_comm™d


94 
ngx_c‹e_moduÀ_t
 
	gngx_evíts_moduÀ_˘x
 = {

95 
ngx_°rög
("events"),

96 
NULL
,

97 
ngx_evít_öô_c⁄f


101 
ngx_moduÀ_t
 
	gngx_evíts_moduÀ
 = {

102 
NGX_MODULE_V1
,

103 &
ngx_evíts_moduÀ_˘x
,

104 
ngx_evíts_comm™ds
,

105 
NGX_CORE_MODULE
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NGX_MODULE_V1_PADDING


117 
ngx_°r_t
 
	gevít_c‹e_«me
 = 
ngx_°rög
("event_core");

120 
ngx_comm™d_t
 
	gngx_evít_c‹e_comm™ds
[] = {

122 { 
ngx_°rög
("worker_connections"),

123 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

124 
ngx_evít_c⁄√˘i⁄s
,

127 
NULL
 },

129 { 
ngx_°rög
("connections"),

130 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

131 
ngx_evít_c⁄√˘i⁄s
,

134 
NULL
 },

136 { 
ngx_°rög
("use"),

137 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

138 
ngx_evít_u£
,

141 
NULL
 },

143 { 
ngx_°rög
("multi_accept"),

144 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

145 
ngx_c⁄f_£t_Êag_¶Ÿ
,

147 
off£tof
(
ngx_evít_c⁄f_t
, 
mu…i_ac˚±
),

148 
NULL
 },

150 { 
ngx_°rög
("accept_mutex"),

151 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

152 
ngx_c⁄f_£t_Êag_¶Ÿ
,

154 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx
),

155 
NULL
 },

157 { 
ngx_°rög
("accept_mutex_delay"),

158 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

159 
ngx_c⁄f_£t_m£c_¶Ÿ
,

161 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx_dñay
),

162 
NULL
 },

164 { 
ngx_°rög
("debug_connection"),

165 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

166 
ngx_evít_debug_c⁄√˘i⁄
,

169 
NULL
 },

171 
ngx_nuŒ_comm™d


175 
ngx_evít_moduÀ_t
 
	gngx_evít_c‹e_moduÀ_˘x
 = {

176 &
evít_c‹e_«me
,

177 
ngx_evít_c‹e_¸óã_c⁄f
,

178 
ngx_evít_c‹e_öô_c⁄f
,

180 { 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }

184 
ngx_moduÀ_t
 
	gngx_evít_c‹e_moduÀ
 = {

185 
NGX_MODULE_V1
,

186 &
ngx_evít_c‹e_moduÀ_˘x
,

187 
ngx_evít_c‹e_comm™ds
,

188 
NGX_EVENT_MODULE
,

189 
NULL
,

190 
ngx_evít_moduÀ_öô
,

191 
ngx_evít_¥o˚ss_öô
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NGX_MODULE_V1_PADDING


201 
	$ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
)

203 
ngx_uöt_t
 
Êags
;

204 
ngx_m£c_t
 
timî
, 
dñè
;

206 i‡(
ngx_timî_ªsﬁuti⁄
) {

207 
timî
 = 
NGX_TIMER_INFINITE
;

208 
Êags
 = 0;

211 
timî
 = 
	`ngx_evít_föd_timî
();

212 
Êags
 = 
NGX_UPDATE_TIME
;

214 #i‡(
NGX_THREADS
)

216 i‡(
timî
 =
NGX_TIMER_INFINITE
 ||Åimer > 500) {

217 
timî
 = 500;

223 i‡(
ngx_u£_ac˚±_muãx
) {

224 i‡(
ngx_ac˚±_dißbÀd
 > 0) {

225 
ngx_ac˚±_dißbÀd
--;

228 i‡(
	`ngx_åylock_ac˚±_muãx
(
cy˛e
Ë=
NGX_ERROR
) {

232 i‡(
ngx_ac˚±_muãx_hñd
) {

233 
Êags
 |
NGX_POST_EVENTS
;

236 i‡(
timî
 =
NGX_TIMER_INFINITE


237 || 
timî
 > 
ngx_ac˚±_muãx_dñay
)

239 
timî
 = 
ngx_ac˚±_muãx_dñay
;

245 
dñè
 = 
ngx_cuºít_m£c
;

247 (Ë
	`ngx_¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

249 
dñè
 = 
ngx_cuºít_m£c
 - delta;

251 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

252 "timî dñè: %M", 
dñè
);

254 i‡(
ngx_po°ed_ac˚±_evíts
) {

255 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_ac˚±_evíts
);

258 i‡(
ngx_ac˚±_muãx_hñd
) {

259 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

262 i‡(
dñè
) {

263 
	`ngx_evít_expúe_timîs
();

266 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

267 "po°edÉvít†%p", 
ngx_po°ed_evíts
);

269 i‡(
ngx_po°ed_evíts
) {

270 i‡(
ngx_thªaded
) {

271 
	`ngx_wakeup_w‹kî_thªad
(
cy˛e
);

274 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_evíts
);

277 
	}
}

280 
ngx_öt_t


281 
	$ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
)

283 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

287 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

288 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_CLEAR_EVENT
)

289 =
NGX_ERROR
)

291  
NGX_ERROR
;

295  
NGX_OK
;

297 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

301 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

302 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
)

303 =
NGX_ERROR
)

305  
NGX_ERROR
;

308  
NGX_OK
;

311 i‡(
ªv
->
a˘ive
 && (ªv->
ªady
 || (
Êags
 & 
NGX_CLOSE_EVENT
))) {

312 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
 | 
Êags
)

313 =
NGX_ERROR
)

315  
NGX_ERROR
;

318  
NGX_OK
;

321 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

325 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

326 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

327  
NGX_ERROR
;

330  
NGX_OK
;

333 i‡(
ªv
->
⁄eshŸ
 && !ªv->
ªady
) {

334 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

335  
NGX_ERROR
;

338  
NGX_OK
;

344  
NGX_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
)

351 
ngx_c⁄√˘i⁄_t
 *
c
;

353 i‡(
low©
) {

354 
c
 = 
wev
->
d©a
;

356 i‡(
	`ngx_£nd_low©
(
c
, 
low©
Ë=
NGX_ERROR
) {

357  
NGX_ERROR
;

361 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

365 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

366 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
,

367 
NGX_CLEAR_EVENT
 | (
low©
 ? 
NGX_LOWAT_EVENT
 : 0))

368 =
NGX_ERROR
)

370  
NGX_ERROR
;

374  
NGX_OK
;

376 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

380 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

381 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

382 =
NGX_ERROR
)

384  
NGX_ERROR
;

387  
NGX_OK
;

390 i‡(
wev
->
a˘ive
 && wev->
ªady
) {

391 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

392 =
NGX_ERROR
)

394  
NGX_ERROR
;

397  
NGX_OK
;

400 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

404 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

405 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

406  
NGX_ERROR
;

409  
NGX_OK
;

412 i‡(
wev
->
⁄eshŸ
 && wev->
ªady
) {

413 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

414  
NGX_ERROR
;

417  
NGX_OK
;

423  
NGX_OK
;

424 
	}
}

428 
	$ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

430 i‡(
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
Ë=
NULL
) {

431 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

433  
NGX_CONF_ERROR
;

436  
NGX_CONF_OK
;

437 
	}
}

440 
ngx_öt_t


441 
	$ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

443 ***
cf
;

444 
u_ch¨
 *
sh¨ed
;

445 
size_t
 
size
, 
˛
;

446 
ngx_shm_t
 
shm
;

447 
ngx_time_t
 *
ç
;

448 
ngx_c‹e_c⁄f_t
 *
ccf
;

449 
ngx_evít_c⁄f_t
 *
ecf
;

451 
cf
 = 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
);

452 
ecf
 = (*
cf
)[
ngx_evít_c‹e_moduÀ
.
˘x_ödex
];

454 i‡(!
ngx_ã°_c⁄fig
 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER
) {

455 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

456 "usögÅhê\"%s\"Évíàmëhod", 
ecf
->
«me
);

459 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

461 
ngx_timî_ªsﬁuti⁄
 = 
ccf
->
timî_ªsﬁuti⁄
;

463 #i‡!(
NGX_WIN32
)

465 
ngx_öt_t
 
limô
;

466 
æimô
 
æmt
;

468 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

469 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

473 i‡(
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
æmt
.
æim_cur


474 && (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET


475 || 
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
ccf
->
æimô_nofûe
))

477 
limô
 = (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET
) ?

478 (
ngx_öt_t
Ë
æmt
.
æim_cur
 : 
ccf
->
æimô_nofûe
;

480 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

483 
ecf
->
c⁄√˘i⁄s
, 
limô
);

490 i‡(
ccf
->
ma°î
 == 0) {

491  
NGX_OK
;

494 i‡(
ngx_ac˚±_muãx_±r
) {

495  
NGX_OK
;

501 
˛
 = 128;

503 
size
 = 
˛


504 + 
˛


505 + 
˛
;

507 #i‡(
NGX_STAT_STUB
)

509 
size
 +
˛


510 + 
˛


511 + 
˛


512 + 
˛


513 + 
˛


514 + 
˛
;

518 
shm
.
size
 = size;

519 
shm
.
«me
.
Àn
 = ("nginx_shared_zone");

520 
shm
.
«me
.
d©a
 = (
u_ch¨
 *) "nginx_shared_zone";

521 
shm
.
log
 = 
cy˛e
->log;

523 i‡(
	`ngx_shm_Æloc
(&
shm
Ë!
NGX_OK
) {

524  
NGX_ERROR
;

527 
sh¨ed
 = 
shm
.
addr
;

529 
ngx_ac˚±_muãx_±r
 = (
ngx_©omic_t
 *Ë
sh¨ed
;

530 
ngx_ac˚±_muãx
.
•ö
 = (
ngx_uöt_t
) -1;

532 i‡(
	`ngx_shmtx_¸óã
(&
ngx_ac˚±_muãx
, (
ngx_shmtx_sh_t
 *Ë
sh¨ed
,

533 
cy˛e
->
lock_fûe
.
d©a
)

534 !
NGX_OK
)

536  
NGX_ERROR
;

539 
ngx_c⁄√˘i⁄_cou¡î
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 1 * 
˛
);

541 (Ë
	`ngx_©omic_cmp_£t
(
ngx_c⁄√˘i⁄_cou¡î
, 0, 1);

543 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

545 
ngx_c⁄√˘i⁄_cou¡î
, *ngx_connection_counter);

547 
ngx_ãmp_numbî
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 2 * 
˛
);

549 
ç
 = 
	`ngx_timeofday
();

551 
ngx_øndom_numbî
 = (
ç
->
m£c
 << 16Ë+ 
ngx_pid
;

553 #i‡(
NGX_STAT_STUB
)

555 
ngx_°©_ac˚±ed
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 3 * 
˛
);

556 
ngx_°©_h™dÀd
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 4 * 
˛
);

557 
ngx_°©_ªque°s
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 5 * 
˛
);

558 
ngx_°©_a˘ive
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 6 * 
˛
);

559 
ngx_°©_ªadög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 7 * 
˛
);

560 
ngx_°©_wrôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 8 * 
˛
);

564  
NGX_OK
;

565 
	}
}

568 #i‡!(
NGX_WIN32
)

571 
	$ngx_timî_sig«l_h™dÀr
(
signo
)

573 
ngx_evít_timî_Æ¨m
 = 1;

576 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0, "timer signal");

578 
	}
}

583 
ngx_öt_t


584 
	$ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
)

586 
ngx_uöt_t
 
m
, 
i
;

587 
ngx_evít_t
 *
ªv
, *
wev
;

588 
ngx_li°íög_t
 *
ls
;

589 
ngx_c⁄√˘i⁄_t
 *
c
, *
√xt
, *
ﬁd
;

590 
ngx_c‹e_c⁄f_t
 *
ccf
;

591 
ngx_evít_c⁄f_t
 *
ecf
;

592 
ngx_evít_moduÀ_t
 *
moduÀ
;

594 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

595 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

597 i‡(
ccf
->
ma°î
 && ccf->
w‹kî_¥o˚s£s
 > 1 && 
ecf
->
ac˚±_muãx
) {

598 
ngx_u£_ac˚±_muãx
 = 1;

599 
ngx_ac˚±_muãx_hñd
 = 0;

600 
ngx_ac˚±_muãx_dñay
 = 
ecf
->
ac˚±_muãx_dñay
;

603 
ngx_u£_ac˚±_muãx
 = 0;

606 #i‡(
NGX_THREADS
)

607 
ngx_po°ed_evíts_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

608 i‡(
ngx_po°ed_evíts_muãx
 =
NULL
) {

609  
NGX_ERROR
;

613 i‡(
	`ngx_evít_timî_öô
(
cy˛e
->
log
Ë=
NGX_ERROR
) {

614  
NGX_ERROR
;

617 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

618 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

622 i‡(
ngx_moduÀs
[
m
]->
˘x_ödex
 !
ecf
->
u£
) {

626 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

628 i‡(
moduÀ
->
a˘i⁄s
.
	`öô
(
cy˛e
, 
ngx_timî_ªsﬁuti⁄
Ë!
NGX_OK
) {

630 
	`exô
(2);

636 #i‡!(
NGX_WIN32
)

638 i‡(
ngx_timî_ªsﬁuti⁄
 && !(
ngx_evít_Êags
 & 
NGX_USE_TIMER_EVENT
)) {

639 
siga˘i⁄
 
ß
;

640 
ôimîvÆ
 
ôv
;

642 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

643 
ß
.
ß_h™dÀr
 = 
ngx_timî_sig«l_h™dÀr
;

644 
	`sigem±y£t
(&
ß
.
ß_mask
);

646 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
) == -1) {

647 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

649  
NGX_ERROR
;

652 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

653 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000) * 1000;

654 
ôv
.
ô_vÆue
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

655 
ôv
.
ô_vÆue
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000 ) * 1000;

657 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

658 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

663 i‡(
ngx_evít_Êags
 & 
NGX_USE_FD_EVENT
) {

664 
æimô
 
æmt
;

666 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

667 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

669  
NGX_ERROR
;

672 
cy˛e
->
fûes_n
 = (
ngx_uöt_t
Ë
æmt
.
æim_cur
;

674 
cy˛e
->
fûes
 = 
	`ngx_ˇŒoc
((
ngx_c⁄√˘i⁄_t
 *Ë* cy˛e->
fûes_n
,

675 
cy˛e
->
log
);

676 i‡(
cy˛e
->
fûes
 =
NULL
) {

677  
NGX_ERROR
;

683 
cy˛e
->
c⁄√˘i⁄s
 =

684 
	`ngx_Æloc
((
ngx_c⁄√˘i⁄_t
Ë* 
cy˛e
->
c⁄√˘i⁄_n
, cy˛e->
log
);

685 i‡(
cy˛e
->
c⁄√˘i⁄s
 =
NULL
) {

686  
NGX_ERROR
;

689 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

691 
cy˛e
->
ªad_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

692 
cy˛e
->
log
);

693 i‡(
cy˛e
->
ªad_evíts
 =
NULL
) {

694  
NGX_ERROR
;

697 
ªv
 = 
cy˛e
->
ªad_evíts
;

698 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

699 
ªv
[
i
].
˛o£d
 = 1;

700 
ªv
[
i
].
ö°™˚
 = 1;

701 #i‡(
NGX_THREADS
)

702 
ªv
[
i
].
lock
 = &
c
[i].lock;

703 
ªv
[
i
].
own_lock
 = &
c
[i].
lock
;

707 
cy˛e
->
wrôe_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

708 
cy˛e
->
log
);

709 i‡(
cy˛e
->
wrôe_evíts
 =
NULL
) {

710  
NGX_ERROR
;

713 
wev
 = 
cy˛e
->
wrôe_evíts
;

714 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

715 
wev
[
i
].
˛o£d
 = 1;

716 #i‡(
NGX_THREADS
)

717 
wev
[
i
].
lock
 = &
c
[i].lock;

718 
wev
[
i
].
own_lock
 = &
c
[i].
lock
;

722 
i
 = 
cy˛e
->
c⁄√˘i⁄_n
;

723 
√xt
 = 
NULL
;

726 
i
--;

728 
c
[
i
].
d©a
 = 
√xt
;

729 
c
[
i
].
ªad
 = &
cy˛e
->
ªad_evíts
[i];

730 
c
[
i
].
wrôe
 = &
cy˛e
->
wrôe_evíts
[i];

731 
c
[
i
].
fd
 = (
ngx_sockë_t
) -1;

733 
√xt
 = &
c
[
i
];

735 #i‡(
NGX_THREADS
)

736 
c
[
i
].
lock
 = 0;

738 } 
i
);

740 
cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
√xt
;

741 
cy˛e
->
‰ì_c⁄√˘i⁄_n
 = cy˛e->
c⁄√˘i⁄_n
;

745 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

746 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

748 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
ls
[
i
].
fd
, 
cy˛e
->
log
);

750 i‡(
c
 =
NULL
) {

751  
NGX_ERROR
;

754 
c
->
log
 = &
ls
[
i
].log;

756 
c
->
li°íög
 = &
ls
[
i
];

757 
ls
[
i
].
c⁄√˘i⁄
 = 
c
;

759 
ªv
 = 
c
->
ªad
;

761 
ªv
->
log
 = 
c
->log;

762 
ªv
->
ac˚±
 = 1;

764 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

765 
ªv
->
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

768 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

769 i‡(
ls
[
i
].
¥evious
) {

776 
ﬁd
 = 
ls
[
i
].
¥evious
->
c⁄√˘i⁄
;

778 i‡(
	`ngx_dñ_evít
(
ﬁd
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
)

779 =
NGX_ERROR
)

781  
NGX_ERROR
;

784 
ﬁd
->
fd
 = (
ngx_sockë_t
) -1;

788 #i‡(
NGX_WIN32
)

790 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

791 
ngx_io˝_c⁄f_t
 *
io˝cf
;

793 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±ex
;

795 i‡(
ngx_u£_ac˚±_muãx
) {

799 i‡(
	`ngx_add_evít
(
ªv
, 0, 
NGX_IOCP_ACCEPT
Ë=
NGX_ERROR
) {

800  
NGX_ERROR
;

803 
ls
[
i
].
log
.
h™dÀr
 = 
ngx_ac˚±ex_log_îr‹
;

805 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

806 i‡(
	`ngx_evít_po°_ac˚±ex
(&
ls
[
i
], 
io˝cf
->
po°_ac˚±ex
)

807 =
NGX_ERROR
)

809  
NGX_ERROR
;

813 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

815 i‡(
ngx_u£_ac˚±_muãx
) {

819 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

820  
NGX_ERROR
;

826 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

828 i‡(
ngx_u£_ac˚±_muãx
) {

832 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

833 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

834  
NGX_ERROR
;

838 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

839  
NGX_ERROR
;

847  
NGX_OK
;

848 
	}
}

851 
ngx_öt_t


852 
	$ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
)

854 
¢dlow©
;

856 #i‡(
NGX_HAVE_LOWAT_EVENT
)

858 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

859 
c
->
wrôe
->
avaûabÀ
 = 
low©
;

860  
NGX_OK
;

865 i‡(
low©
 =0 || 
c
->
¢dlow©
) {

866  
NGX_OK
;

869 
¢dlow©
 = (Ë
low©
;

871 i‡(
	`£tsock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_SNDLOWAT
,

872 (c⁄° *Ë&
¢dlow©
, ())

875 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

877  
NGX_ERROR
;

880 
c
->
¢dlow©
 = 1;

882  
NGX_OK
;

883 
	}
}

887 
	$ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

889 *
rv
;

890 ***
˘x
;

891 
ngx_uöt_t
 
i
;

892 
ngx_c⁄f_t
 
pcf
;

893 
ngx_evít_moduÀ_t
 *
m
;

895 i‡(*(**Ë
c⁄f
) {

901 
ngx_evít_max_moduÀ
 = 0;

902 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

903 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

907 
ngx_moduÀs
[
i
]->
˘x_ödex
 = 
ngx_evít_max_moduÀ
++;

910 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*));

911 i‡(
˘x
 =
NULL
) {

912  
NGX_CONF_ERROR
;

915 *
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 
ngx_evít_max_moduÀ
 * (*));

916 i‡(*
˘x
 =
NULL
) {

917  
NGX_CONF_ERROR
;

920 *(**Ë
c⁄f
 = 
˘x
;

922 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

923 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

927 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

929 i‡(
m
->
¸óã_c⁄f
) {

930 (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
m
->
	`¸óã_c⁄f
(
cf
->
cy˛e
);

931 i‡((*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

932  
NGX_CONF_ERROR
;

937 
pcf
 = *
cf
;

938 
cf
->
˘x
 = ctx;

939 
cf
->
moduÀ_ty≥
 = 
NGX_EVENT_MODULE
;

940 
cf
->
cmd_ty≥
 = 
NGX_EVENT_CONF
;

942 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

944 *
cf
 = 
pcf
;

946 i‡(
rv
 !
NGX_CONF_OK
)

947  
rv
;

949 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

950 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

954 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

956 i‡(
m
->
öô_c⁄f
) {

957 
rv
 = 
m
->
	`öô_c⁄f
(
cf
->
cy˛e
, (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
]);

958 i‡(
rv
 !
NGX_CONF_OK
) {

959  
rv
;

964  
NGX_CONF_OK
;

965 
	}
}

969 
	$ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

971 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

973 
ngx_°r_t
 *
vÆue
;

975 i‡(
ecf
->
c⁄√˘i⁄s
 !
NGX_CONF_UNSET_UINT
) {

979 i‡(
	`ngx_°rcmp
(
cmd
->
«me
.
d©a
, "connections") == 0) {

980 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

985 
vÆue
 = 
cf
->
¨gs
->
ñts
;

986 
ecf
->
c⁄√˘i⁄s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

987 i‡(
ecf
->
c⁄√˘i⁄s
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

988 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

989 "övÆidÇumbî \"%V\"", &
vÆue
[1]);

991  
NGX_CONF_ERROR
;

994 
cf
->
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

996  
NGX_CONF_OK
;

997 
	}
}

1001 
	$ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1003 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1005 
ngx_öt_t
 
m
;

1006 
ngx_°r_t
 *
vÆue
;

1007 
ngx_evít_c⁄f_t
 *
ﬁd_ecf
;

1008 
ngx_evít_moduÀ_t
 *
moduÀ
;

1010 i‡(
ecf
->
u£
 !
NGX_CONF_UNSET_UINT
) {

1014 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1016 i‡(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
) {

1017 
ﬁd_ecf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
,

1018 
ngx_evít_c‹e_moduÀ
);

1020 
ﬁd_ecf
 = 
NULL
;

1024 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

1025 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1029 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

1030 i‡(
moduÀ
->
«me
->
Àn
 =
vÆue
[1].len) {

1031 i‡(
	`ngx_°rcmp
(
moduÀ
->
«me
->
d©a
, 
vÆue
[1].data) == 0) {

1032 
ecf
->
u£
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

1033 
ecf
->
«me
 = 
moduÀ
->«me->
d©a
;

1035 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE


1036 && 
ﬁd_ecf


1037 && 
ﬁd_ecf
->
u£
 !
ecf
->use)

1039 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1046 &
vÆue
[1], 
ﬁd_ecf
->
«me
);

1048  
NGX_CONF_ERROR
;

1051  
NGX_CONF_OK
;

1056 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1057 "övÆidÉvíàty≥ \"%V\"", &
vÆue
[1]);

1059  
NGX_CONF_ERROR
;

1060 
	}
}

1064 
	$ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1066 #i‡(
NGX_DEBUG
)

1067 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1069 
ngx_öt_t
 
rc
;

1070 
ngx_°r_t
 *
vÆue
;

1071 
ngx_uæ_t
 
u
;

1072 
ngx_cidr_t
 
c
, *
cidr
;

1073 
ngx_uöt_t
 
i
;

1074 
sockaddr_ö
 *
sö
;

1075 #i‡(
NGX_HAVE_INET6
)

1076 
sockaddr_ö6
 *
sö6
;

1079 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1081 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1083 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

1084 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1085 i‡(
cidr
 =
NULL
) {

1086  
NGX_CONF_ERROR
;

1089 
cidr
->
Ámûy
 = 
AF_UNIX
;

1090  
NGX_CONF_OK
;

1095 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
c
);

1097 i‡(
rc
 !
NGX_ERROR
) {

1098 i‡(
rc
 =
NGX_DONE
) {

1099 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1101 &
vÆue
[1]);

1104 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1105 i‡(
cidr
 =
NULL
) {

1106  
NGX_CONF_ERROR
;

1109 *
cidr
 = 
c
;

1111  
NGX_CONF_OK
;

1114 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1115 
u
.
ho°
 = 
vÆue
[1];

1117 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1118 i‡(
u
.
îr
) {

1119 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1121 
u
.
îr
, &u.
ho°
);

1124  
NGX_CONF_ERROR
;

1127 
cidr
 = 
	`ngx_¨øy_push_n
(&
ecf
->
debug_c⁄√˘i⁄
, 
u
.
«ddrs
);

1128 i‡(
cidr
 =
NULL
) {

1129  
NGX_CONF_ERROR
;

1132 
	`ngx_memzîo
(
cidr
, 
u
.
«ddrs
 * (
ngx_cidr_t
));

1134 
i
 = 0; i < 
u
.
«ddrs
; i++) {

1135 
cidr
[
i
].
Ámûy
 = 
u
.
addrs
[i].
sockaddr
->
ß_Ámûy
;

1137 
cidr
[
i
].
Ámûy
) {

1139 #i‡(
NGX_HAVE_INET6
)

1140 
AF_INET6
:

1141 
sö6
 = (
sockaddr_ö6
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1142 
cidr
[
i
].
u
.
ö6
.
addr
 = 
sö6
->
sö6_addr
;

1143 
	`ngx_mem£t
(
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

1148 
sö
 = (
sockaddr_ö
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1149 
cidr
[
i
].
u
.
ö
.
addr
 = 
sö
->
sö_addr
.
s_addr
;

1150 
cidr
[
i
].
u
.
ö
.
mask
 = 0xffffffff;

1157 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1163  
NGX_CONF_OK
;

1164 
	}
}

1168 
	$ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1170 
ngx_evít_c⁄f_t
 *
ecf
;

1172 
ecf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evít_c⁄f_t
));

1173 i‡(
ecf
 =
NULL
) {

1174  
NULL
;

1177 
ecf
->
c⁄√˘i⁄s
 = 
NGX_CONF_UNSET_UINT
;

1178 
ecf
->
u£
 = 
NGX_CONF_UNSET_UINT
;

1179 
ecf
->
mu…i_ac˚±
 = 
NGX_CONF_UNSET
;

1180 
ecf
->
ac˚±_muãx
 = 
NGX_CONF_UNSET
;

1181 
ecf
->
ac˚±_muãx_dñay
 = 
NGX_CONF_UNSET_MSEC
;

1182 
ecf
->
«me
 = (*Ë
NGX_CONF_UNSET
;

1184 #i‡(
NGX_DEBUG
)

1186 i‡(
	`ngx_¨øy_öô
(&
ecf
->
debug_c⁄√˘i⁄
, 
cy˛e
->
poﬁ
, 4,

1187 (
ngx_cidr_t
)Ë=
NGX_ERROR
)

1189  
NULL
;

1194  
ecf
;

1195 
	}
}

1199 
	$ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1201 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1203 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1204 
fd
;

1206 #i‡(
NGX_HAVE_RTSIG
)

1207 
ngx_uöt_t
 
πsig
;

1208 
ngx_c‹e_c⁄f_t
 *
ccf
;

1210 
ngx_öt_t
 
i
;

1211 
ngx_moduÀ_t
 *
moduÀ
;

1212 
ngx_evít_moduÀ_t
 *
evít_moduÀ
;

1214 
moduÀ
 = 
NULL
;

1216 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1218 
fd
 = 
	`ïﬁl_¸óã
(100);

1220 i‡(
fd
 != -1) {

1221 (Ë
	`˛o£
(
fd
);

1222 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1224 } i‡(
ngx_î∫o
 !
NGX_ENOSYS
) {

1225 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1230 #i‡(
NGX_HAVE_RTSIG
)

1232 i‡(
moduÀ
 =
NULL
) {

1233 
moduÀ
 = &
ngx_πsig_moduÀ
;

1234 
πsig
 = 1;

1237 
πsig
 = 0;

1242 #i‡(
NGX_HAVE_DEVPOLL
)

1244 
moduÀ
 = &
ngx_devpﬁl_moduÀ
;

1248 #i‡(
NGX_HAVE_KQUEUE
)

1250 
moduÀ
 = &
ngx_kqueue_moduÀ
;

1254 #i‡(
NGX_HAVE_SELECT
)

1256 i‡(
moduÀ
 =
NULL
) {

1257 
moduÀ
 = &
ngx_£À˘_moduÀ
;

1262 i‡(
moduÀ
 =
NULL
) {

1263 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1265 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1269 
evít_moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

1271 i‡(
	`ngx_°rcmp
(
evít_moduÀ
->
«me
->
d©a
, 
evít_c‹e_«me
.data) == 0)

1276 
moduÀ
 = 
ngx_moduÀs
[
i
];

1281 i‡(
moduÀ
 =
NULL
) {

1282 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0, "noÉvents module found");

1283  
NGX_CONF_ERROR
;

1286 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
c⁄√˘i⁄s
, 
DEFAULT_CONNECTIONS
);

1287 
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1289 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
u£
, 
moduÀ
->
˘x_ödex
);

1291 
evít_moduÀ
 = 
moduÀ
->
˘x
;

1292 
	`ngx_c⁄f_öô_±r_vÆue
(
ecf
->
«me
, 
evít_moduÀ
->«me->
d©a
);

1294 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
mu…i_ac˚±
, 0);

1295 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
ac˚±_muãx
, 1);

1296 
	`ngx_c⁄f_öô_m£c_vÆue
(
ecf
->
ac˚±_muãx_dñay
, 500);

1299 #i‡(
NGX_HAVE_RTSIG
)

1301 i‡(!
πsig
) {

1302  
NGX_CONF_OK
;

1305 i‡(
ecf
->
ac˚±_muãx
) {

1306  
NGX_CONF_OK
;

1309 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1311 i‡(
ccf
->
w‹kî_¥o˚s£s
 == 0) {

1312  
NGX_CONF_OK
;

1315 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1318  
NGX_CONF_ERROR
;

1322  
NGX_CONF_OK
;

1325 
	}
}

	@src/event/ngx_event.h

8 #i‚de‡
_NGX_EVENT_H_INCLUDED_


9 
	#_NGX_EVENT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INVALID_INDEX
 0xd0d0d0d0

	)

19 #i‡(
NGX_HAVE_IOCP
)

22 
WSAOVERLAPPED
 
	movÕ
;

23 
ngx_evít_t
 *
	mevít
;

24 
	mîr‹
;

25 } 
	tngx_evít_ovÕ_t
;

31 
ngx_uöt_t
 
	mlock
;

33 
ngx_evít_t
 *
	mevíts
;

34 
ngx_evít_t
 *
	mœ°
;

35 } 
	tngx_evít_muãx_t
;

38 
	sngx_evít_s
 {

39 *
	md©a
;

41 
	mwrôe
:1;

43 
	mac˚±
:1;

46 
	mö°™˚
:1;

52 
	ma˘ive
:1;

54 
	mdißbÀd
:1;

57 
	mªady
:1;

59 
	m⁄eshŸ
:1;

62 
	mcom∂ëe
:1;

64 
	meof
:1;

65 
	mîr‹
:1;

67 
	mtimedout
:1;

68 
	mtimî_£t
:1;

70 
	mdñayed
:1;

72 
	mªad_disˇrded
:1;

74 
	mu√x≥˘ed_eof
:1;

76 
	mde„ºed_ac˚±
:1;

79 
	m≥ndög_eof
:1;

81 #i‡!(
NGX_THREADS
)

82 
	mpo°ed_ªady
:1;

85 #i‡(
NGX_WIN32
)

87 
	mac˚±_c⁄ãxt_upd©ed
:1;

90 #i‡(
NGX_HAVE_KQUEUE
)

91 
	mkq_vnode
:1;

94 
	mkq_î∫o
;

111 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

112 
	mavaûabÀ
;

114 
	mavaûabÀ
:1;

117 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

120 #i‡(
NGX_HAVE_AIO
)

122 #i‡(
NGX_HAVE_IOCP
)

123 
ngx_evít_ovÕ_t
 
	movÕ
;

125 
aiocb
 
	maiocb
;

130 
ngx_uöt_t
 
	mödex
;

132 
ngx_log_t
 *
	mlog
;

134 
ngx_rbåì_node_t
 
	mtimî
;

136 
	m˛o£d
:1;

139 
	mch™√l
:1;

140 
	mªsﬁvî
:1;

142 #i‡(
NGX_THREADS
)

144 
	mlocked
:1;

146 
	mpo°ed_ªady
:1;

147 
	mpo°ed_timedout
:1;

148 
	mpo°ed_eof
:1;

150 #i‡(
NGX_HAVE_KQUEUE
)

152 
	mpo°ed_î∫o
;

155 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

156 
	mpo°ed_avaûabÀ
;

158 
	mpo°ed_avaûabÀ
:1;

161 
ngx_©omic_t
 *
	mlock
;

162 
ngx_©omic_t
 *
	mown_lock
;

167 
ngx_evít_t
 *
	m√xt
;

168 
ngx_evít_t
 **
	m¥ev
;

181 *
	mthr_˘x
;

183 #i‡(
NGX_EVENT_T_PADDING
)

187 
uöt32_t
 
	m∑ddög
[
NGX_EVENT_T_PADDING
];

193 #i‡(
NGX_HAVE_FILE_AIO
)

195 
	sngx_evít_aio_s
 {

196 *
	md©a
;

197 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

198 
ngx_fûe_t
 *
	mfûe
;

200 
ngx_fd_t
 
	mfd
;

202 #i‡(
NGX_HAVE_EVENTFD
)

203 
öt64_t
 
	mªs
;

204 #i‡(
NGX_TEST_BUILD_EPOLL
)

205 
ngx_îr_t
 
	mîr
;

206 
size_t
 
	mnbyãs
;

209 
ngx_îr_t
 
	mîr
;

210 
size_t
 
	mnbyãs
;

213 #i‡(
NGX_HAVE_AIO_SENDFILE
)

214 
off_t
 
	mœ°_off£t
;

217 
ngx_aiocb_t
 
	maiocb
;

218 
ngx_evít_t
 
	mevít
;

225 
ngx_öt_t
 (*
add
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

226 
ngx_öt_t
 (*
dñ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

228 
ngx_öt_t
 (*
íabÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

229 
ngx_öt_t
 (*
dißbÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

231 
ngx_öt_t
 (*
add_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
);

232 
ngx_öt_t
 (*
dñ_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
, 
ngx_uöt_t
 
	mÊags
);

234 
ngx_öt_t
 (*
¥o˚ss_ch™ges
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_uöt_t
 
	mnowaô
);

235 
ngx_öt_t
 (*
¥o˚ss_evíts
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
,

236 
ngx_uöt_t
 
	mÊags
);

238 
ngx_öt_t
 (*
öô
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
);

239 (*
	md⁄e
)(
ngx_cy˛e_t
 *
	mcy˛e
);

240 } 
	tngx_evít_a˘i⁄s_t
;

243 
ngx_evít_a˘i⁄s_t
 
ngx_evít_a˘i⁄s
;

250 
	#NGX_USE_LEVEL_EVENT
 0x00000001

	)

256 
	#NGX_USE_ONESHOT_EVENT
 0x00000002

	)

262 
	#NGX_USE_CLEAR_EVENT
 0x00000004

	)

268 
	#NGX_USE_KQUEUE_EVENT
 0x00000008

	)

274 
	#NGX_USE_LOWAT_EVENT
 0x00000010

	)

279 
	#NGX_USE_GREEDY_EVENT
 0x00000020

	)

284 
	#NGX_USE_EPOLL_EVENT
 0x00000040

	)

289 
	#NGX_USE_RTSIG_EVENT
 0x00000080

	)

295 
	#NGX_USE_AIO_EVENT
 0x00000100

	)

301 
	#NGX_USE_IOCP_EVENT
 0x00000200

	)

307 
	#NGX_USE_FD_EVENT
 0x00000400

	)

313 
	#NGX_USE_TIMER_EVENT
 0x00000800

	)

319 
	#NGX_USE_EVENTPORT_EVENT
 0x00001000

	)

324 
	#NGX_USE_VNODE_EVENT
 0x00002000

	)

337 
	#NGX_CLOSE_EVENT
 1

	)

343 
	#NGX_DISABLE_EVENT
 2

	)

348 
	#NGX_FLUSH_EVENT
 4

	)

352 
	#NGX_LOWAT_EVENT
 0

	)

353 
	#NGX_VNODE_EVENT
 0

	)

356 #i‡(
NGX_HAVE_KQUEUE
)

358 
	#NGX_READ_EVENT
 
EVFILT_READ


	)

359 
	#NGX_WRITE_EVENT
 
EVFILT_WRITE


	)

361 #unde‡
NGX_VNODE_EVENT


362 
	#NGX_VNODE_EVENT
 
EVFILT_VNODE


	)

371 #unde‡
NGX_CLOSE_EVENT


372 
	#NGX_CLOSE_EVENT
 
EV_EOF


	)

374 #unde‡
NGX_LOWAT_EVENT


375 
	#NGX_LOWAT_EVENT
 
EV_FLAG1


	)

377 #unde‡
NGX_FLUSH_EVENT


378 
	#NGX_FLUSH_EVENT
 
EV_ERROR


	)

380 
	#NGX_LEVEL_EVENT
 0

	)

381 
	#NGX_ONESHOT_EVENT
 
EV_ONESHOT


	)

382 
	#NGX_CLEAR_EVENT
 
EV_CLEAR


	)

384 #unde‡
NGX_DISABLE_EVENT


385 
	#NGX_DISABLE_EVENT
 
EV_DISABLE


	)

388 #ñi‡(
NGX_HAVE_DEVPOLL
 || 
NGX_HAVE_EVENTPORT
)

390 
	#NGX_READ_EVENT
 
POLLIN


	)

391 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

393 
	#NGX_LEVEL_EVENT
 0

	)

394 
	#NGX_ONESHOT_EVENT
 1

	)

397 #ñi‡(
NGX_HAVE_EPOLL
)

399 
	#NGX_READ_EVENT
 
EPOLLIN


	)

400 
	#NGX_WRITE_EVENT
 
EPOLLOUT


	)

402 
	#NGX_LEVEL_EVENT
 0

	)

403 
	#NGX_CLEAR_EVENT
 
EPOLLET


	)

404 
	#NGX_ONESHOT_EVENT
 0x70000000

	)

406 
	#NGX_ONESHOT_EVENT
 
EPOLLONESHOT


	)

410 #ñi‡(
NGX_HAVE_POLL
)

412 
	#NGX_READ_EVENT
 
POLLIN


	)

413 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

415 
	#NGX_LEVEL_EVENT
 0

	)

416 
	#NGX_ONESHOT_EVENT
 1

	)

421 
	#NGX_READ_EVENT
 0

	)

422 
	#NGX_WRITE_EVENT
 1

	)

424 
	#NGX_LEVEL_EVENT
 0

	)

425 
	#NGX_ONESHOT_EVENT
 1

	)

430 #i‡(
NGX_HAVE_IOCP
)

431 
	#NGX_IOCP_ACCEPT
 0

	)

432 
	#NGX_IOCP_IO
 1

	)

433 
	#NGX_IOCP_CONNECT
 2

	)

437 #i‚de‡
NGX_CLEAR_EVENT


438 
	#NGX_CLEAR_EVENT
 0

	)

442 
	#ngx_¥o˚ss_ch™ges
 
ngx_evít_a˘i⁄s
.
¥o˚ss_ch™ges


	)

443 
	#ngx_¥o˚ss_evíts
 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts


	)

444 
	#ngx_d⁄e_evíts
 
ngx_evít_a˘i⁄s
.
d⁄e


	)

446 
	#ngx_add_evít
 
ngx_evít_a˘i⁄s
.
add


	)

447 
	#ngx_dñ_evít
 
ngx_evít_a˘i⁄s
.
dñ


	)

448 
	#ngx_add_c⁄n
 
ngx_evít_a˘i⁄s
.
add_c⁄n


	)

449 
	#ngx_dñ_c⁄n
 
ngx_evít_a˘i⁄s
.
dñ_c⁄n


	)

451 
	#ngx_add_timî
 
ngx_evít_add_timî


	)

452 
	#ngx_dñ_timî
 
ngx_evít_dñ_timî


	)

455 
ngx_os_io_t
 
ngx_io
;

457 
	#ngx_ªcv
 
ngx_io
.
ªcv


	)

458 
	#ngx_ªcv_chaö
 
ngx_io
.
ªcv_chaö


	)

459 
	#ngx_udp_ªcv
 
ngx_io
.
udp_ªcv


	)

460 
	#ngx_£nd
 
ngx_io
.
£nd


	)

461 
	#ngx_£nd_chaö
 
ngx_io
.
£nd_chaö


	)

464 
	#NGX_EVENT_MODULE
 0x544E5645

	)

465 
	#NGX_EVENT_CONF
 0x02000000

	)

469 
ngx_uöt_t
 
	mc⁄√˘i⁄s
;

470 
ngx_uöt_t
 
	mu£
;

472 
ngx_Êag_t
 
	mmu…i_ac˚±
;

473 
ngx_Êag_t
 
	mac˚±_muãx
;

475 
ngx_m£c_t
 
	mac˚±_muãx_dñay
;

477 
u_ch¨
 *
	m«me
;

479 #i‡(
NGX_DEBUG
)

480 
ngx_¨øy_t
 
	mdebug_c⁄√˘i⁄
;

482 } 
	tngx_evít_c⁄f_t
;

486 
ngx_°r_t
 *
	m«me
;

488 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

489 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

491 
ngx_evít_a˘i⁄s_t
 
	ma˘i⁄s
;

492 } 
	tngx_evít_moduÀ_t
;

495 
ngx_©omic_t
 *
ngx_c⁄√˘i⁄_cou¡î
;

497 
ngx_©omic_t
 *
ngx_ac˚±_muãx_±r
;

498 
ngx_shmtx_t
 
ngx_ac˚±_muãx
;

499 
ngx_uöt_t
 
ngx_u£_ac˚±_muãx
;

500 
ngx_uöt_t
 
ngx_ac˚±_evíts
;

501 
ngx_uöt_t
 
ngx_ac˚±_muãx_hñd
;

502 
ngx_m£c_t
 
ngx_ac˚±_muãx_dñay
;

503 
ngx_öt_t
 
ngx_ac˚±_dißbÀd
;

506 #i‡(
NGX_STAT_STUB
)

508 
ngx_©omic_t
 *
ngx_°©_ac˚±ed
;

509 
ngx_©omic_t
 *
ngx_°©_h™dÀd
;

510 
ngx_©omic_t
 *
ngx_°©_ªque°s
;

511 
ngx_©omic_t
 *
ngx_°©_a˘ive
;

512 
ngx_©omic_t
 *
ngx_°©_ªadög
;

513 
ngx_©omic_t
 *
ngx_°©_wrôög
;

518 
	#NGX_UPDATE_TIME
 1

	)

519 
	#NGX_POST_EVENTS
 2

	)

520 
	#NGX_POST_THREAD_EVENTS
 4

	)

523 
sig_©omic_t
 
ngx_evít_timî_Æ¨m
;

524 
ngx_uöt_t
 
ngx_evít_Êags
;

525 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

526 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

529 
	#ngx_evít_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
) \

530 (*(
	`ngx_gë_c⁄f
(
c⁄f_˘x
, 
ngx_evíts_moduÀ
))Ë[
moduÀ
.
˘x_ödex
];

	)

534 
ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
);

535 
ngx_öt_t
 
ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
);

536 
u_ch¨
 *
ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

539 
ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
);

540 
ngx_öt_t
 
ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
);

541 
ngx_öt_t
 
ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
);

544 #i‡(
NGX_WIN32
)

545 
ngx_evít_ac˚±ex
(
ngx_evít_t
 *
ev
);

546 
ngx_öt_t
 
ngx_evít_po°_ac˚±ex
(
ngx_li°íög_t
 *
ls
, 
ngx_uöt_t
 
n
);

547 
u_ch¨
 *
ngx_ac˚±ex_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

551 
ngx_öt_t
 
ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
);

555 
	#ngx_evít_idít
(
p
Ë((
ngx_c⁄√˘i⁄_t
 *Ë’))->
fd


	)

558 
	~<ngx_evít_timî.h
>

559 
	~<ngx_evít_po°ed.h
>

560 
	~<ngx_evít_busy_lock.h
>

562 #i‡(
NGX_WIN32
)

563 
	~<ngx_io˝_moduÀ.h
>

	@src/event/ngx_event_accept.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

19 
	$ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
)

21 
sockÀn_t
 
sockÀn
;

22 
ngx_îr_t
 
îr
;

23 
ngx_log_t
 *
log
;

24 
ngx_uöt_t
 
Àvñ
;

25 
ngx_sockë_t
 
s
;

26 
ngx_evít_t
 *
ªv
, *
wev
;

27 
ngx_li°íög_t
 *
ls
;

28 
ngx_c⁄√˘i⁄_t
 *
c
, *
lc
;

29 
ngx_evít_c⁄f_t
 *
ecf
;

30 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

31 #i‡(
NGX_HAVE_ACCEPT4
)

32 
ngx_uöt_t
 
u£_ac˚±4
 = 1;

35 i‡(
ev
->
timedout
) {

36 i‡(
	`ngx_íabÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
Ë!
NGX_OK
) {

40 
ev
->
timedout
 = 0;

43 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

45 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

46 
ev
->
avaûabÀ
 = 1;

48 } i‡(!(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
)) {

49 
ev
->
avaûabÀ
 = 
ecf
->
mu…i_ac˚±
;

52 
lc
 = 
ev
->
d©a
;

53 
ls
 = 
lc
->
li°íög
;

54 
ev
->
ªady
 = 0;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

57 "ac˚± o¿%V,Ñódy: %d", &
ls
->
addr_ãxt
, 
ev
->
avaûabÀ
);

60 
sockÀn
 = 
NGX_SOCKADDRLEN
;

62 #i‡(
NGX_HAVE_ACCEPT4
)

63 i‡(
u£_ac˚±4
) {

64 
s
 = 
	`ac˚±4
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
,

65 
SOCK_NONBLOCK
);

67 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

70 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

73 i‡(
s
 == -1) {

74 
îr
 = 
ngx_sockë_î∫o
;

76 i‡(
îr
 =
NGX_EAGAIN
) {

77 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 
îr
,

82 
Àvñ
 = 
NGX_LOG_ALERT
;

84 i‡(
îr
 =
NGX_ECONNABORTED
) {

85 
Àvñ
 = 
NGX_LOG_ERR
;

87 } i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

88 
Àvñ
 = 
NGX_LOG_CRIT
;

91 #i‡(
NGX_HAVE_ACCEPT4
)

92 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
,

93 
u£_ac˚±4
 ? "accept4() failed" : "accept() failed");

95 i‡(
u£_ac˚±4
 && 
îr
 =
NGX_ENOSYS
) {

96 
u£_ac˚±4
 = 0;

97 
ngx_öhîôed_n⁄blockög
 = 0;

101 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
, "accept() failed");

104 i‡(
îr
 =
NGX_ECONNABORTED
) {

105 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

106 
ev
->
avaûabÀ
--;

109 i‡(
ev
->
avaûabÀ
) {

114 i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

115 i‡(
	`ngx_dißbÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
)

116 !
NGX_OK
)

121 i‡(
ngx_u£_ac˚±_muãx
) {

122 i‡(
ngx_ac˚±_muãx_hñd
) {

123 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

124 
ngx_ac˚±_muãx_hñd
 = 0;

127 
ngx_ac˚±_dißbÀd
 = 1;

130 
	`ngx_add_timî
(
ev
, 
ecf
->
ac˚±_muãx_dñay
);

137 #i‡(
NGX_STAT_STUB
)

138 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ac˚±ed
, 1);

141 
ngx_ac˚±_dißbÀd
 = 
ngx_cy˛e
->
c⁄√˘i⁄_n
 / 8

142 - 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
;

144 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
ev
->
log
);

146 i‡(
c
 =
NULL
) {

147 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

148 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

149 
ngx_˛o£_sockë_n
 " failed");

155 #i‡(
NGX_STAT_STUB
)

156 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

159 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
ls
->
poﬁ_size
, 
ev
->
log
);

160 i‡(
c
->
poﬁ
 =
NULL
) {

161 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

165 
c
->
sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
sockÀn
);

166 i‡(
c
->
sockaddr
 =
NULL
) {

167 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

171 
	`ngx_mem˝y
(
c
->
sockaddr
, 
ß
, 
sockÀn
);

173 
log
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_log_t
));

174 i‡(
log
 =
NULL
) {

175 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

181 i‡(
ngx_öhîôed_n⁄blockög
) {

182 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

183 i‡(
	`ngx_blockög
(
s
) == -1) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

185 
ngx_blockög_n
 " failed");

186 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

192 i‡(!(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
))) {

193 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

195 
ngx_n⁄blockög_n
 " failed");

196 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

202 *
log
 = 
ls
->log;

204 
c
->
ªcv
 = 
ngx_ªcv
;

205 
c
->
£nd
 = 
ngx_£nd
;

206 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

207 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

209 
c
->
log
 =Üog;

210 
c
->
poﬁ
->
log
 =Üog;

212 
c
->
sockÀn
 = socklen;

213 
c
->
li°íög
 = 
ls
;

214 
c
->
loˇl_sockaddr
 = 
ls
->
sockaddr
;

216 
c
->
u√x≥˘ed_eof
 = 1;

218 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

219 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

220 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

221 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

222 #i‡(
NGX_SOLARIS
)

224 
c
->
£ndfûe
 = 0;

229 
ªv
 = 
c
->
ªad
;

230 
wev
 = 
c
->
wrôe
;

232 
wev
->
ªady
 = 1;

234 i‡(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
)) {

236 
ªv
->
ªady
 = 1;

239 i‡(
ev
->
de„ºed_ac˚±
) {

240 
ªv
->
ªady
 = 1;

241 #i‡(
NGX_HAVE_KQUEUE
)

242 
ªv
->
avaûabÀ
 = 1;

246 
ªv
->
log
 =Üog;

247 
wev
->
log
 =Üog;

258 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

260 #i‡(
NGX_STAT_STUB
)

261 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_h™dÀd
, 1);

264 #i‡(
NGX_THREADS
)

265 
ªv
->
lock
 = &
c
->lock;

266 
wev
->
lock
 = &
c
->lock;

267 
ªv
->
own_lock
 = &
c
->
lock
;

268 
wev
->
own_lock
 = &
c
->
lock
;

271 i‡(
ls
->
addr_¡›
) {

272 
c
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
ls
->
addr_ãxt_max_Àn
);

273 i‡(
c
->
addr_ãxt
.
d©a
 =
NULL
) {

274 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

278 
c
->
addr_ãxt
.
Àn
 = 
	`ngx_sock_¡›
(c->
sockaddr
, c->addr_ãxt.
d©a
,

279 
ls
->
addr_ãxt_max_Àn
, 0);

280 i‡(
c
->
addr_ãxt
.
Àn
 == 0) {

281 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

286 #i‡(
NGX_DEBUG
)

289 
sockaddr_ö
 *
sö
;

290 
ngx_cidr_t
 *
cidr
;

291 
ngx_uöt_t
 
i
;

292 #i‡(
NGX_HAVE_INET6
)

293 
sockaddr_ö6
 *
sö6
;

294 
ngx_uöt_t
 
n
;

296 #i‡(
NGX_HAVE_SERVAL
)

297 
sockaddr_sv
 *
ssv
;

300 
cidr
 = 
ecf
->
debug_c⁄√˘i⁄
.
ñts
;

301 
i
 = 0; i < 
ecf
->
debug_c⁄√˘i⁄
.
√…s
; i++) {

302 i‡(
cidr
[
i
].
Ámûy
 !
c
->
sockaddr
->
ß_Ámûy
) {

303 
√xt
;

306 
cidr
[
i
].
Ámûy
) {

308 #i‡(
NGX_HAVE_INET6
)

309 
AF_INET6
:

310 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
sockaddr
;

311 
n
 = 0;Ç < 16;Ç++) {

312 i‡((
sö6
->
sö6_addr
.
s6_addr
[
n
]

313 & 
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
[
n
])

314 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

316 
√xt
;

322 #i‡(
NGX_HAVE_SERVAL
)

323 
AF_SERVAL
:

327 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

328 
AF_UNIX
:

333 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

334 i‡((
sö
->
sö_addr
.
s_addr
 & 
cidr
[
i
].
u
.
ö
.
mask
)

335 !
cidr
[
i
].
u
.
ö
.
addr
)

337 
√xt
;

342 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_CONNECTION
|
NGX_LOG_DEBUG_ALL
;

345 
√xt
:

352 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

353 "*%dác˚±: %V fd:%d", 
c
->
numbî
, &c->
addr_ãxt
, 
s
);

355 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

356 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

357 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

362 
log
->
d©a
 = 
NULL
;

363 
log
->
h™dÀr
 = 
NULL
;

365 
ls
->
	`h™dÀr
(
c
);

367 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

368 
ev
->
avaûabÀ
--;

371 } 
ev
->
avaûabÀ
);

372 
	}
}

375 
ngx_öt_t


376 
	$ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
)

378 i‡(
	`ngx_shmtx_åylock
(&
ngx_ac˚±_muãx
)) {

380 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

383 i‡(
ngx_ac˚±_muãx_hñd


384 && 
ngx_ac˚±_evíts
 == 0

385 && !(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
))

387  
NGX_OK
;

390 i‡(
	`ngx_íabÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

391 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

392  
NGX_ERROR
;

395 
ngx_ac˚±_evíts
 = 0;

396 
ngx_ac˚±_muãx_hñd
 = 1;

398  
NGX_OK
;

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

402 "ac˚± muãxÜock faûed: %ui", 
ngx_ac˚±_muãx_hñd
);

404 i‡(
ngx_ac˚±_muãx_hñd
) {

405 i‡(
	`ngx_dißbÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

406  
NGX_ERROR
;

409 
ngx_ac˚±_muãx_hñd
 = 0;

412  
NGX_OK
;

413 
	}
}

416 
ngx_öt_t


417 
	$ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

419 
ngx_uöt_t
 
i
;

420 
ngx_li°íög_t
 *
ls
;

421 
ngx_c⁄√˘i⁄_t
 *
c
;

423 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

424 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

426 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

428 i‡(
c
->
ªad
->
a˘ive
) {

432 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

434 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

435  
NGX_ERROR
;

439 i‡(
	`ngx_add_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

440  
NGX_ERROR
;

445  
NGX_OK
;

446 
	}
}

449 
ngx_öt_t


450 
	$ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

452 
ngx_uöt_t
 
i
;

453 
ngx_li°íög_t
 *
ls
;

454 
ngx_c⁄√˘i⁄_t
 *
c
;

456 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

457 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

459 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

461 i‡(!
c
->
ªad
->
a˘ive
) {

465 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

466 i‡(
	`ngx_dñ_c⁄n
(
c
, 
NGX_DISABLE_EVENT
Ë=
NGX_ERROR
) {

467  
NGX_ERROR
;

471 i‡(
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_DISABLE_EVENT
)

472 =
NGX_ERROR
)

474  
NGX_ERROR
;

479  
NGX_OK
;

480 
	}
}

484 
	$ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

486 
ngx_sockë_t
 
fd
;

488 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

490 
fd
 = 
c
->fd;

491 
c
->
fd
 = (
ngx_sockë_t
) -1;

493 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

494 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_sockë_î∫o
,

495 
ngx_˛o£_sockë_n
 " failed");

498 i‡(
c
->
poﬁ
) {

499 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

502 #i‡(
NGX_STAT_STUB
)

503 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

505 
	}
}

508 
u_ch¨
 *

509 
	$ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

511  
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whileácceptingÇew connection on %V",

512 
log
->
d©a
);

513 
	}
}

	@src/event/ngx_event_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

14 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

15 
ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
);

16 
ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_öt_t


27 
	$ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
, 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

29 
ngx_öt_t
 
rc
;

31 
	`ngx_muãx_lock
(
bl
->
muãx
);

33 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

35 
bl
->
busy
, bl->
max_busy
);

37 i‡(
bl
->
busy
 < bl->
max_busy
) {

38 
bl
->
busy
++;

40 
rc
 = 
NGX_OK
;

42 } i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

43 
bl
->
waôög
++;

44 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

45 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

47 i‡(
bl
->
evíts
) {

48 
bl
->
œ°
->
√xt
 = 
˘x
;

51 
bl
->
evíts
 = 
˘x
;

54 
bl
->
œ°
 = 
˘x
;

56 
rc
 = 
NGX_AGAIN
;

59 
rc
 = 
NGX_BUSY
;

62 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

64  
rc
;

65 
	}
}

68 
ngx_öt_t


69 
	$ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

70 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

72 
ngx_öt_t
 
rc
;

74 
	`ngx_muãx_lock
(
bl
->
muãx
);

76 
rc
 = 
	`ngx_evít_busy_lock_look_ˇchóbÀ
(
bl
, 
˘x
);

78 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

80 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

88 i‡(
rc
 =
NGX_AGAIN
) {

90 i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

91 
bl
->
waôög
++;

92 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

93 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

95 i‡(
bl
->
evíts
 =
NULL
) {

96 
bl
->
evíts
 = 
˘x
;

98 
bl
->
œ°
->
√xt
 = 
˘x
;

100 
bl
->
œ°
 = 
˘x
;

103 
rc
 = 
NGX_BUSY
;

107 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

109  
rc
;

110 
	}
}

114 
	$ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

115 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

117 
ngx_evít_t
 *
ev
;

118 
ngx_evít_busy_lock_˘x_t
 *
wakeup
;

120 
	`ngx_muãx_lock
(
bl
->
muãx
);

122 i‡(
bl
->
evíts
) {

123 
wakeup
 = 
bl
->
evíts
;

124 
bl
->
evíts
 = bl->evíts->
√xt
;

127 
wakeup
 = 
NULL
;

128 
bl
->
busy
--;

136 i‡(
wakeup
 =
NULL
) {

137 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

141 i‡(
˘x
->
md5
) {

142 
wakeup
 = 
bl
->
evíts
; wakeup; wakeu∞wakeup->
√xt
) {

143 i‡(
wakeup
->
md5
 =
NULL
 || wakeup->
¶Ÿ
 !
˘x
->slot) {

147 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

148 
wakeup
->
ˇche_upd©ed
 = 1;

150 
ev
 = 
wakeup
->
evít
;

152 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

155 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

158 
bl
->
waôög
--;

160 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

162 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

163 
wakeup
->
locked
 = 1;

165 
ev
 = 
wakeup
->
evít
;

167 i‡(
ev
->
timî_£t
) {

168 
	`ngx_dñ_timî
(
ev
);

171 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

173 
	}
}

177 
	$ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

178 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

180 
ngx_evít_busy_lock_˘x_t
 *
c
, *
p
;

182 
	`ngx_muãx_lock
(
bl
->
muãx
);

184 
bl
->
waôög
--;

186 i‡(
˘x
 =
bl
->
evíts
) {

187 
bl
->
evíts
 = 
˘x
->
√xt
;

190 
p
 = 
bl
->
evíts
;

191 
c
 = 
bl
->
evíts
->
√xt
; c; c = c->next) {

192 i‡(
c
 =
˘x
) {

193 
p
->
√xt
 = 
˘x
->next;

196 
p
 = 
c
;

200 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

201 
	}
}

204 
ngx_öt_t


205 
	$ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

206 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

208 
ngx_öt_t
 
‰ì
;

209 
ngx_uöt_t
 
i
, 
bô
, 
ˇchóbÀ
, 
mask
;

211 
bô
 = 0;

212 
ˇchóbÀ
 = 0;

213 
‰ì
 = -1;

215 #i‡(
NGX_SUPPRESS_WARN
)

216 
mask
 = 0;

219 
i
 = 0; i < 
bl
->
max_busy
; i++) {

221 i‡((
bô
 & 7) == 0) {

222 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

225 i‡(
mask
 & 1) {

226 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
˘x
->md5, 16) == 0) {

227 
˘x
->
waôög
 = 1;

228 
˘x
->
¶Ÿ
 = 
i
;

229  
NGX_AGAIN
;

231 
ˇchóbÀ
++;

233 } i‡(
‰ì
 == -1) {

234 
‰ì
 = 
i
;

237 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

238 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

239 
‰ì
 = 
i
 + 1;

245 
mask
 >>= 1;

246 
bô
++;

249 i‡(
‰ì
 == -1) {

250  
NGX_BUSY
;

254 i‡(
bl
->
busy
 =bl->
max_busy
) {

255  
NGX_BUSY
;

259 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
˘x
->md5, 16);

260 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

261 
˘x
->
¶Ÿ
 = 
‰ì
;

263 
bl
->
ˇchóbÀ
++;

264 
bl
->
busy
++;

266  
NGX_OK
;

267 
	}
}

271 
	$ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
)

273 
ev
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

275 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

276 
	}
}

280 
	$ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
)

282 
ngx_evít_busy_lock_˘x_t
 *
˘x
;

284 
˘x
 = 
ev
->
d©a
;

285 
˘x
->
	`h™dÀr
(
ev
);

286 
	}
}

	@src/event/ngx_event_busy_lock.h

8 #i‚de‡
_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

16 
ngx_evít_busy_lock_˘x_s
 
	tngx_evít_busy_lock_˘x_t
;

18 
	sngx_evít_busy_lock_˘x_s
 {

19 
ngx_evít_t
 *
	mevít
;

20 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

21 *
	md©a
;

22 
ngx_m£c_t
 
	mtimî
;

24 
	mlocked
:1;

25 
	mwaôög
:1;

26 
	mˇche_upd©ed
:1;

28 *
	mmd5
;

29 
ngx_öt_t
 
	m¶Ÿ
;

31 
ngx_evít_busy_lock_˘x_t
 *
	m√xt
;

36 
u_ch¨
 *
	mmd5_mask
;

37 *
	mmd5
;

38 
ngx_uöt_t
 
	mˇchóbÀ
;

40 
ngx_uöt_t
 
	mbusy
;

41 
ngx_uöt_t
 
	mmax_busy
;

43 
ngx_uöt_t
 
	mwaôög
;

44 
ngx_uöt_t
 
	mmax_waôög
;

46 
ngx_evít_busy_lock_˘x_t
 *
	mevíts
;

47 
ngx_evít_busy_lock_˘x_t
 *
	mœ°
;

49 #i‡(
NGX_THREADS
)

50 
ngx_muãx_t
 *
	mmuãx
;

52 } 
	tngx_evít_busy_lock_t
;

55 
ngx_öt_t
 
ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
,

56 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

57 
ngx_öt_t
 
ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

58 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

59 
ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

60 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

61 
ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

62 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

	@src/event/ngx_event_connect.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 
ngx_öt_t


15 
	$ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
)

17 
rc
;

18 
ngx_öt_t
 
evít
;

19 
ngx_îr_t
 
îr
;

20 
ngx_uöt_t
 
Àvñ
;

21 
ngx_sockë_t
 
s
;

22 
ngx_evít_t
 *
ªv
, *
wev
;

23 
ngx_c⁄√˘i⁄_t
 *
c
;

25 
rc
 = 
pc
->
	`gë
’c,Öc->
d©a
);

26 i‡(
rc
 !
NGX_OK
) {

27  
rc
;

30 
s
 = 
	`ngx_sockë
(
pc
->
sockaddr
->
ß_Ámûy
, 
SOCK_STREAM
, 0);

32 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "sockë %d", 
s
);

34 i‡(
s
 == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

36 
ngx_sockë_n
 " failed");

37  
NGX_ERROR
;

41 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
pc
->
log
);

43 i‡(
c
 =
NULL
) {

44 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

46 
ngx_˛o£_sockë_n
 "failed");

49  
NGX_ERROR
;

52 i‡(
pc
->
rcvbuf
) {

53 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVBUF
,

54 (c⁄° *Ë&
pc
->
rcvbuf
, ()) == -1)

56 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

58 
Áûed
;

62 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

64 
ngx_n⁄blockög_n
 " failed");

66 
Áûed
;

69 i‡(
pc
->
loˇl
) {

70 i‡(
	`böd
(
s
, 
pc
->
loˇl
->
sockaddr
,Öc->loˇl->
sockÀn
) == -1) {

71 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

72 "böd(%VËÁûed", &
pc
->
loˇl
->
«me
);

74 
Áûed
;

78 
c
->
ªcv
 = 
ngx_ªcv
;

79 
c
->
£nd
 = 
ngx_£nd
;

80 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

81 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

83 
c
->
£ndfûe
 = 1;

85 
c
->
log_îr‹
 = 
pc
->log_error;

87 i‡(
pc
->
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

88 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

89 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

91 #i‡(
NGX_SOLARIS
)

93 
c
->
£ndfûe
 = 0;

97 
ªv
 = 
c
->
ªad
;

98 
wev
 = 
c
->
wrôe
;

100 
ªv
->
log
 = 
pc
->log;

101 
wev
->
log
 = 
pc
->log;

103 
pc
->
c⁄√˘i⁄
 = 
c
;

105 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

107 #i‡(
NGX_THREADS
)

111 
ªv
->
lock
 = 
pc
->lock;

112 
wev
->
lock
 = 
pc
->lock;

113 
ªv
->
own_lock
 = &
c
->
lock
;

114 
wev
->
own_lock
 = &
c
->
lock
;

118 i‡(
ngx_add_c⁄n
) {

119 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

120 
Áûed
;

124 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0,

125 "c⁄√˘Åÿ%V, fd:%d #%d", 
pc
->
«me
, 
s
, 
c
->
numbî
);

127 
rc
 = 
	`c⁄√˘
(
s
, 
pc
->
sockaddr
,Öc->
sockÀn
);

129 i‡(
rc
 == -1) {

130 
îr
 = 
ngx_sockë_î∫o
;

133 i‡(
îr
 !
NGX_EINPROGRESS


134 #i‡(
NGX_WIN32
)

136 && 
îr
 !
NGX_EAGAIN


140 i‡(
îr
 =
NGX_ECONNREFUSED


141 #i‡(
NGX_LINUX
)

146 || 
îr
 =
NGX_EAGAIN


148 || 
îr
 =
NGX_ECONNRESET


149 || 
îr
 =
NGX_ENETDOWN


150 || 
îr
 =
NGX_ENETUNREACH


151 || 
îr
 =
NGX_EHOSTDOWN


152 || 
îr
 =
NGX_EHOSTUNREACH
)

154 
Àvñ
 = 
NGX_LOG_ERR
;

157 
Àvñ
 = 
NGX_LOG_CRIT
;

160 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, "connect()Åo %V failed",

161 
pc
->
«me
);

163 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

164 
pc
->
c⁄√˘i⁄
 = 
NULL
;

166  
NGX_DECLINED
;

170 i‡(
ngx_add_c⁄n
) {

171 i‡(
rc
 == -1) {

175  
NGX_AGAIN
;

178 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

180 
wev
->
ªady
 = 1;

182  
NGX_OK
;

185 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

187 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

188 "c⁄√˘(): %d", 
rc
);

192 i‡(
	`ngx_blockög
(
s
) == -1) {

193 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

194 
ngx_blockög_n
 " failed");

195 
Áûed
;

205 
ªv
->
ªady
 = 1;

206 
wev
->
ªady
 = 1;

208  
NGX_OK
;

211 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

215 
evít
 = 
NGX_CLEAR_EVENT
;

221 
evít
 = 
NGX_LEVEL_EVENT
;

224 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

225 
Áûed
;

228 i‡(
rc
 == -1) {

232 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
evít
Ë!
NGX_OK
) {

233 
Áûed
;

236  
NGX_AGAIN
;

239 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

241 
wev
->
ªady
 = 1;

243  
NGX_OK
;

245 
Áûed
:

247 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

248 
pc
->
c⁄√˘i⁄
 = 
NULL
;

250  
NGX_ERROR
;

251 
	}
}

254 
ngx_öt_t


255 
	$ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

257  
NGX_OK
;

258 
	}
}

	@src/event/ngx_event_connect.h

8 #i‚de‡
_NGX_EVENT_CONNECT_H_INCLUDED_


9 
	#_NGX_EVENT_CONNECT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_PEER_KEEPALIVE
 1

	)

18 
	#NGX_PEER_NEXT
 2

	)

19 
	#NGX_PEER_FAILED
 4

	)

22 
ngx_≥î_c⁄√˘i⁄_s
 
	tngx_≥î_c⁄√˘i⁄_t
;

24 
	$ngx_öt_t
 (*
	tngx_evít_gë_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

25 *
	td©a
);

26 (*
	tngx_evít_‰ì_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
, *
	td©a
,

27 
	tngx_uöt_t
 
	t°©e
);

28 #i‡(
NGX_SSL
)

30 
	$ngx_öt_t
 (*
	tngx_evít_£t_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

31 *
	td©a
);

32 (*
	tngx_evít_ßve_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

33 *
	td©a
);

37 
	sngx_≥î_c⁄√˘i⁄_s
 {

38 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

40 
sockaddr
 *sockaddr;

41 
sockÀn_t
 
sockÀn
;

42 
ngx_°r_t
 *
«me
;

44 
ngx_uöt_t
 
åõs
;

46 
ngx_evít_gë_≥î_±
 
gë
;

47 
ngx_evít_‰ì_≥î_±
 
‰ì
;

48 *
d©a
;

50 #i‡(
NGX_SSL
)

51 
ngx_evít_£t_≥î_£ssi⁄_±
 
£t_£ssi⁄
;

52 
ngx_evít_ßve_≥î_£ssi⁄_±
 
ßve_£ssi⁄
;

55 #i‡(
NGX_THREADS
)

56 
ngx_©omic_t
 *
lock
;

59 
ngx_addr_t
 *
loˇl
;

61 
rcvbuf
;

63 
ngx_log_t
 *
log
;

65 
ˇched
:1;

68 
log_îr‹
:2;

72 
ngx_öt_t
 
	`ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

73 
ngx_öt_t
 
	`ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

	@src/event/ngx_event_mutex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
	$ngx_evít_muãx_timedlock
(
ngx_evít_muãx_t
 *
m
, 
ngx_m£c_t
 
timî
,

14 
ngx_evít_t
 *
ev
)

16 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

17 "lockÉvíàmuãx %∞lock:%XD", 
m
, m->
lock
);

19 i‡(
m
->
lock
) {

21 i‡(
m
->
evíts
 =
NULL
) {

22 
m
->
evíts
 = 
ev
;

25 
m
->
œ°
->
√xt
 = 
ev
;

28 
m
->
œ°
 = 
ev
;

29 
ev
->
√xt
 = 
NULL
;

31 #i‡(
NGX_THREADS0
)

32 
ev
->
light
 = 1;

35 
	`ngx_add_timî
(
ev
, 
timî
);

37  
NGX_AGAIN
;

40 
m
->
lock
 = 1;

42  
NGX_OK
;

43 
	}
}

46 
ngx_öt_t
 
	$ngx_evít_muãx_u∆ock
(
ngx_evít_muãx_t
 *
m
, 
ngx_log_t
 *
log
)

48 
ngx_evít_t
 *
ev
;

50 i‡(
m
->
lock
 == 0) {

51 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

52 "åögÅÿu∆ockÅhê‰ìÉvíàmuãx %p", 
m
);

53  
NGX_ERROR
;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

57 "u∆ockÉvíàmuãx %p,Çexàevít: %p", 
m
, m->
evíts
);

59 
m
->
lock
 = 0;

61 i‡(
m
->
evíts
) {

62 
ev
 = 
m
->
evíts
;

63 
m
->
evíts
 = 
ev
->
√xt
;

65 
ev
->
√xt
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

66 
ngx_po°ed_evíts
 = 
ev
;

69  
NGX_OK
;

70 
	}
}

	@src/event/ngx_event_openssl.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mígöe
;

15 } 
	tngx_›ís¶_c⁄f_t
;

18 
ngx_hâp_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
);

19 
ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
,

20 
ªt
);

21 
ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
);

22 
ngx_öt_t
 
ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
);

23 
ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

24 
ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

25 
ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
,

27 
ngx_îr_t
 
îr
, *
ãxt
);

28 
ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
);

30 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

31 
ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

32 
ngx_s¶_£ssi⁄_t
 *
£ss
);

33 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

34 
u_ch¨
 *
id
, 
Àn
, *
c›y
);

35 
ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

36 
ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

37 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
);

38 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

39 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

41 *
ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

42 *
ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

43 
ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
);

46 
ngx_comm™d_t
 
	gngx_›ís¶_comm™ds
[] = {

48 { 
ngx_°rög
("ssl_engine"),

49 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_›ís¶_ígöe
,

53 
NULL
 },

55 
ngx_nuŒ_comm™d


59 
ngx_c‹e_moduÀ_t
 
	gngx_›ís¶_moduÀ_˘x
 = {

60 
ngx_°rög
("openssl"),

61 
ngx_›ís¶_¸óã_c⁄f
,

62 
NULL


66 
ngx_moduÀ_t
 
	gngx_›ís¶_moduÀ
 = {

67 
NGX_MODULE_V1
,

68 &
ngx_›ís¶_moduÀ_˘x
,

69 
ngx_›ís¶_comm™ds
,

70 
NGX_CORE_MODULE
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
ngx_›ís¶_exô
,

78 
NGX_MODULE_V1_PADDING


82 
	gngx_s¶_c⁄√˘i⁄_ödex
;

83 
	gngx_s¶_£rvî_c⁄f_ödex
;

84 
	gngx_s¶_£ssi⁄_ˇche_ödex
;

87 
ngx_öt_t


88 
	$ngx_s¶_öô
(
ngx_log_t
 *
log
)

90 
	`OPENSSL_c⁄fig
(
NULL
);

92 
	`SSL_libøry_öô
();

93 
	`SSL_lﬂd_îr‹_°rögs
();

95 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

97 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

98 #i‚de‡
SSL_OP_NO_COMPRESSION


104 
n
;

105 
	`STACK_OF
(
SSL_COMP
Ë*
s¶_comp_mëhods
;

107 
s¶_comp_mëhods
 = 
	`SSL_COMP_gë_com¥essi⁄_mëhods
();

108 
n
 = 
	`sk_SSL_COMP_num
(
s¶_comp_mëhods
);

110 
n
--) {

111 (Ë
	`sk_SSL_COMP_p›
(
s¶_comp_mëhods
);

117 
ngx_s¶_c⁄√˘i⁄_ödex
 = 
	`SSL_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL, NULL);

119 i‡(
ngx_s¶_c⁄√˘i⁄_ödex
 == -1) {

120 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "SSL_get_ex_new_index() failed");

121  
NGX_ERROR
;

124 
ngx_s¶_£rvî_c⁄f_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

125 
NULL
);

126 i‡(
ngx_s¶_£rvî_c⁄f_ödex
 == -1) {

127 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

129  
NGX_ERROR
;

132 
ngx_s¶_£ssi⁄_ˇche_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

133 
NULL
);

134 i‡(
ngx_s¶_£ssi⁄_ˇche_ödex
 == -1) {

135 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

137  
NGX_ERROR
;

140  
NGX_OK
;

141 
	}
}

144 
ngx_öt_t


145 
	$ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
)

147 
s¶
->
˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_mëhod
());

149 i‡(
s¶
->
˘x
 =
NULL
) {

150 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "SSL_CTX_new() failed");

151  
NGX_ERROR
;

154 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
, 
d©a
) == 0) {

155 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

157  
NGX_ERROR
;

162 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_SESS_ID_BUG
);

163 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NETSCAPE_CHALLENGE_BUG
);

167 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
);

168 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
);

171 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MSIE_SSLV2_RSA_PADDING
);

173 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLEAY_080_CLIENT_DH_BUG
);

174 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_D5_BUG
);

175 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_BLOCK_PADDING_BUG
);

177 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
);

179 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_DH_USE
);

181 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv2
)) {

182 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv2
);

184 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv3
)) {

185 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv3
);

187 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1
)) {

188 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1
);

190 #ifde‡
SSL_OP_NO_TLSv1_1


191 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_1
)) {

192 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

195 #ifde‡
SSL_OP_NO_TLSv1_2


196 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_2
)) {

197 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

201 #ifde‡
SSL_OP_NO_COMPRESSION


202 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_COMPRESSION
);

205 #ifde‡
SSL_MODE_RELEASE_BUFFERS


206 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

209 
	`SSL_CTX_£t_ªad_ahód
(
s¶
->
˘x
, 1);

211 
	`SSL_CTX_£t_öfo_ˇŒback
(
s¶
->
˘x
, 
ngx_s¶_öfo_ˇŒback
);

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

219 
ngx_°r_t
 *
key
)

221 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

222  
NGX_ERROR
;

225 i‡(
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
)

228 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

230 
˚π
->
d©a
);

231  
NGX_ERROR
;

234 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
key
, 1Ë!
NGX_OK
) {

235  
NGX_ERROR
;

238 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
s¶
->
˘x
, (*Ë
key
->
d©a
,

239 
SSL_FILETYPE_PEM
)

242 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

243 "SSL_CTX_u£_Priv©eKey_fûe(\"%s\"ËÁûed", 
key
->
d©a
);

244  
NGX_ERROR
;

247  
NGX_OK
;

248 
	}
}

251 
ngx_öt_t


252 
	$ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

253 
ngx_öt_t
 
dïth
)

255 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

257 
	`SSL_CTX_£t_vîify
(
s¶
->
˘x
, 
SSL_VERIFY_PEER
, 
ngx_hâp_s¶_vîify_ˇŒback
);

259 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

261 i‡(
˚π
->
Àn
 == 0) {

262  
NGX_OK
;

265 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

266  
NGX_ERROR
;

269 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

272 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

274 
˚π
->
d©a
);

275  
NGX_ERROR
;

278 
li°
 = 
	`SSL_lﬂd_˛õ¡_CA_fûe
((*Ë
˚π
->
d©a
);

280 i‡(
li°
 =
NULL
) {

281 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

282 "SSL_lﬂd_˛õ¡_CA_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

283  
NGX_ERROR
;

291 
	`ERR_˛ór_îr‹
();

293 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
s¶
->
˘x
, 
li°
);

295  
NGX_OK
;

296 
	}
}

299 
ngx_öt_t


300 
	$ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
)

302 
X509_STORE
 *
°‹e
;

303 
X509_LOOKUP
 *
lookup
;

305 i‡(
¸l
->
Àn
 == 0) {

306  
NGX_OK
;

309 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
¸l
, 1Ë!
NGX_OK
) {

310  
NGX_ERROR
;

313 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

315 i‡(
°‹e
 =
NULL
) {

316 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

318  
NGX_ERROR
;

321 
lookup
 = 
	`X509_STORE_add_lookup
(
°‹e
, 
	`X509_LOOKUP_fûe
());

323 i‡(
lookup
 =
NULL
) {

324 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

326  
NGX_ERROR
;

329 i‡(
	`X509_LOOKUP_lﬂd_fûe
(
lookup
, (*Ë
¸l
->
d©a
, 
X509_FILETYPE_PEM
)

332 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

333 "X509_LOOKUP_lﬂd_fûe(\"%s\"ËÁûed", 
¸l
->
d©a
);

334  
NGX_ERROR
;

337 
	`X509_STORE_£t_Êags
(
°‹e
,

338 
X509_V_FLAG_CRL_CHECK
|
X509_V_FLAG_CRL_CHECK_ALL
);

340  
NGX_OK
;

341 
	}
}

345 
	$ngx_hâp_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
)

347 #i‡(
NGX_DEBUG
)

348 *
subje˘
, *
issuî
;

349 
îr
, 
dïth
;

350 
X509
 *
˚π
;

351 
X509_NAME
 *
¢ame
, *
öame
;

352 
ngx_c⁄√˘i⁄_t
 *
c
;

353 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
;

355 
s¶_c⁄n
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
x509_°‹e
,

356 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

358 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

360 
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
x509_°‹e
);

361 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
x509_°‹e
);

362 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
x509_°‹e
);

364 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

365 
subje˘
 = 
¢ame
 ? 
	`X509_NAME_⁄ñöe
(¢ame, 
NULL
, 0) : "(none)";

367 
öame
 = 
	`X509_gë_issuî_«me
(
˚π
);

368 
issuî
 = 
öame
 ? 
	`X509_NAME_⁄ñöe
(öame, 
NULL
, 0) : "(none)";

370 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

373 
ok
, 
îr
, 
dïth
, 
subje˘
, 
issuî
);

375 i‡(
¢ame
) {

376 
	`OPENSSL_‰ì
(
subje˘
);

379 i‡(
öame
) {

380 
	`OPENSSL_‰ì
(
issuî
);

385 
	}
}

389 
	$ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
, 
ªt
)

391 
ngx_c⁄√˘i⁄_t
 *
c
;

393 i‡(
whîe
 & 
SSL_CB_HANDSHAKE_START
) {

394 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

396 i‡(
c
->
s¶
->
h™dshaked
) {

397 
c
->
s¶
->
ª√gŸüti⁄
 = 1;

398 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÑenegotiation");

401 
	}
}

404 
RSA
 *

405 
	$ngx_s¶_rß512_key_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
, 
key_Àngth
)

407 
RSA
 *
key
;

409 i‡(
key_Àngth
 == 512) {

410 i‡(
key
 =
NULL
) {

411 
key
 = 
	`RSA_gíî©e_key
(512, 
RSA_F4
, 
NULL
, NULL);

415  
key
;

416 
	}
}

419 
ngx_öt_t


420 
	$ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

422 
DH
 *
dh
;

423 
BIO
 *
bio
;

433 
dh1024_p
[] = {

447 
dh1024_g
[] = { 0x02 };

450 i‡(
fûe
->
Àn
 == 0) {

452 
dh
 = 
	`DH_√w
();

453 i‡(
dh
 =
NULL
) {

454 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "DH_new() failed");

455  
NGX_ERROR
;

458 
dh
->
p
 = 
	`BN_bö2bn
(
dh1024_p
, (dh1024_p), 
NULL
);

459 
dh
->
g
 = 
	`BN_bö2bn
(
dh1024_g
, (dh1024_g), 
NULL
);

461 i‡(
dh
->
p
 =
NULL
 || dh->
g
 == NULL) {

462 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "BN_bin2bn() failed");

463 
	`DH_‰ì
(
dh
);

464  
NGX_ERROR
;

467 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

469 
	`DH_‰ì
(
dh
);

471  
NGX_OK
;

474 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

475  
NGX_ERROR
;

478 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

479 i‡(
bio
 =
NULL
) {

480 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

481 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

482  
NGX_ERROR
;

485 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

486 i‡(
dh
 =
NULL
) {

487 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

488 "PEM_ªad_bio_DH∑øms(\"%s\"ËÁûed", 
fûe
->
d©a
);

489 
	`BIO_‰ì
(
bio
);

490  
NGX_ERROR
;

493 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

495 
	`DH_‰ì
(
dh
);

496 
	`BIO_‰ì
(
bio
);

498  
NGX_OK
;

499 
	}
}

502 
ngx_öt_t


503 
	$ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
)

505 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

506 #i‚de‡
OPENSSL_NO_ECDH


507 
nid
;

508 
EC_KEY
 *
ecdh
;

517 
nid
 = 
	`OBJ_¢2nid
((c⁄° *Ë
«me
->
d©a
);

518 i‡(
nid
 == 0) {

519 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

520 "Unknow¿curvê«mê\"%s\"", 
«me
->
d©a
);

521  
NGX_ERROR
;

524 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
nid
);

525 i‡(
ecdh
 =
NULL
) {

526 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

527 "U«bÀÅÿ¸óã curvê\"%s\"", 
«me
->
d©a
);

528  
NGX_ERROR
;

531 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_ECDH_USE
);

533 
	`SSL_CTX_£t_tmp_ecdh
(
s¶
->
˘x
, 
ecdh
);

535 
	`EC_KEY_‰ì
(
ecdh
);

539  
NGX_OK
;

540 
	}
}

543 
ngx_öt_t


544 
	$ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

546 
ngx_s¶_c⁄√˘i⁄_t
 *
sc
;

548 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_s¶_c⁄√˘i⁄_t
));

549 i‡(
sc
 =
NULL
) {

550  
NGX_ERROR
;

553 
sc
->
buf„r
 = ((
Êags
 & 
NGX_SSL_BUFFER
) != 0);

555 
sc
->
c⁄√˘i⁄
 = 
	`SSL_√w
(
s¶
->
˘x
);

557 i‡(
sc
->
c⁄√˘i⁄
 =
NULL
) {

558 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_new() failed");

559  
NGX_ERROR
;

562 i‡(
	`SSL_£t_fd
(
sc
->
c⁄√˘i⁄
, 
c
->
fd
) == 0) {

563 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_fd() failed");

564  
NGX_ERROR
;

567 i‡(
Êags
 & 
NGX_SSL_CLIENT
) {

568 
	`SSL_£t_c⁄√˘_°©e
(
sc
->
c⁄√˘i⁄
);

571 
	`SSL_£t_ac˚±_°©e
(
sc
->
c⁄√˘i⁄
);

574 i‡(
	`SSL_£t_ex_d©a
(
sc
->
c⁄√˘i⁄
, 
ngx_s¶_c⁄√˘i⁄_ödex
, 
c
) == 0) {

575 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_ex_data() failed");

576  
NGX_ERROR
;

579 
c
->
s¶
 = 
sc
;

581  
NGX_OK
;

582 
	}
}

585 
ngx_öt_t


586 
	$ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
)

588 i‡(
£ssi⁄
) {

589 i‡(
	`SSL_£t_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
, 
£ssi⁄
) == 0) {

590 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_session() failed");

591  
NGX_ERROR
;

595  
NGX_OK
;

596 
	}
}

599 
ngx_öt_t


600 
	$ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

602 
n
, 
s¶îr
;

603 
ngx_îr_t
 
îr
;

605 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

607 
n
 = 
	`SSL_do_h™dshake
(
c
->
s¶
->
c⁄√˘i⁄
);

609 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_do_h™dshake: %d", 
n
);

611 i‡(
n
 == 1) {

613 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

614  
NGX_ERROR
;

617 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

618  
NGX_ERROR
;

621 #i‡(
NGX_DEBUG
)

623 
buf
[129], *
s
, *
d
;

624 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

627 
SSL_CIPHER
 *
cùhî
;

629 
cùhî
 = 
	`SSL_gë_cuºít_cùhî
(
c
->
s¶
->
c⁄√˘i⁄
);

631 i‡(
cùhî
) {

632 
	`SSL_CIPHER_des¸ùti⁄
(
cùhî
, &
buf
[1], 128);

634 
s
 = &
buf
[1], 
d
 = buf; *s; s++) {

635 i‡(*
s
 =' ' && *
d
 == ' ') {

639 i‡(*
s
 =
LF
 || *†=
CR
) {

643 *++
d
 = *
s
;

646 i‡(*
d
 != ' ') {

647 
d
++;

650 *
d
 = '\0';

652 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

654 
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
), &
buf
[1]);

656 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

657 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

662 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

668 
c
->
s¶
->
h™dshaked
 = 1;

670 
c
->
ªcv
 = 
ngx_s¶_ªcv
;

671 
c
->
£nd
 = 
ngx_s¶_wrôe
;

672 
c
->
ªcv_chaö
 = 
ngx_s¶_ªcv_chaö
;

673 
c
->
£nd_chaö
 = 
ngx_s¶_£nd_chaö
;

676 i‡(
c
->
s¶
->
c⁄√˘i⁄
->
s3
) {

677 
c
->
s¶
->
c⁄√˘i⁄
->
s3
->
Êags
 |
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
;

680  
NGX_OK
;

683 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

685 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

687 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

688 
c
->
ªad
->
ªady
 = 0;

689 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

690 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

692 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

693  
NGX_ERROR
;

696 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

697  
NGX_ERROR
;

700  
NGX_AGAIN
;

703 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

704 
c
->
wrôe
->
ªady
 = 0;

705 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

706 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

708 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

709  
NGX_ERROR
;

712 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

713  
NGX_ERROR
;

716  
NGX_AGAIN
;

719 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

721 
c
->
s¶
->
no_waô_shutdown
 = 1;

722 
c
->
s¶
->
no_£nd_shutdown
 = 1;

723 
c
->
ªad
->
eof
 = 1;

725 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

726 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

729  
NGX_ERROR
;

732 
c
->
ªad
->
îr‹
 = 1;

734 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_do_handshake() failed");

736  
NGX_ERROR
;

737 
	}
}

741 
	$ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
)

743 
ngx_c⁄√˘i⁄_t
 *
c
;

745 
c
 = 
ev
->
d©a
;

747 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

748 "SSL h™dshakêh™dÀr: %d", 
ev
->
wrôe
);

750 i‡(
ev
->
timedout
) {

751 
c
->
s¶
->
	`h™dÀr
(c);

755 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

759 
c
->
s¶
->
	`h™dÀr
(c);

760 
	}
}

763 
ssize_t


764 
	$ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

766 
u_ch¨
 *
œ°
;

767 
ssize_t
 
n
, 
byãs
;

768 
ngx_buf_t
 *
b
;

770 
byãs
 = 0;

772 
b
 = 
˛
->
buf
;

773 
œ°
 = 
b
->last;

777 
n
 = 
	`ngx_s¶_ªcv
(
c
, 
œ°
, 
b
->
íd
 -Üast);

779 i‡(
n
 > 0) {

780 
œ°
 +
n
;

781 
byãs
 +
n
;

783 i‡(
œ°
 =
b
->
íd
) {

784 
˛
 = cl->
√xt
;

786 i‡(
˛
 =
NULL
) {

787  
byãs
;

790 
b
 = 
˛
->
buf
;

791 
œ°
 = 
b
->last;

797 i‡(
byãs
) {

799 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

800 
c
->
ªad
->
ªady
 = 1;

803  
byãs
;

806  
n
;

808 
	}
}

811 
ssize_t


812 
	$ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

814 
n
, 
byãs
;

816 i‡(
c
->
s¶
->
œ°
 =
NGX_ERROR
) {

817 
c
->
ªad
->
îr‹
 = 1;

818  
NGX_ERROR
;

821 i‡(
c
->
s¶
->
œ°
 =
NGX_DONE
) {

822 
c
->
ªad
->
ªady
 = 0;

823 
c
->
ªad
->
eof
 = 1;

827 
byãs
 = 0;

829 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

838 
n
 = 
	`SSL_ªad
(
c
->
s¶
->
c⁄√˘i⁄
, 
buf
, 
size
);

840 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_ªad: %d", 
n
);

842 i‡(
n
 > 0) {

843 
byãs
 +
n
;

846 
c
->
s¶
->
œ°
 = 
	`ngx_s¶_h™dÀ_ªcv
(c, 
n
);

848 i‡(
c
->
s¶
->
œ°
 =
NGX_OK
) {

850 
size
 -
n
;

852 i‡(
size
 == 0) {

853  
byãs
;

856 
buf
 +
n
;

861 i‡(
byãs
) {

862  
byãs
;

865 
c
->
s¶
->
œ°
) {

867 
NGX_DONE
:

868 
c
->
ªad
->
ªady
 = 0;

869 
c
->
ªad
->
eof
 = 1;

872 
NGX_ERROR
:

873 
c
->
ªad
->
îr‹
 = 1;

877 
NGX_AGAIN
:

878  
c
->
s¶
->
œ°
;

881 
	}
}

884 
ngx_öt_t


885 
	$ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
)

887 
s¶îr
;

888 
ngx_îr_t
 
îr
;

890 i‡(
c
->
s¶
->
ª√gŸüti⁄
) {

897 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
c
->
log
, 0, "SSLÑenegotiation disabled");

899 
	`ERR_≥ek_îr‹
()) {

900 
	`ngx_s¶_îr‹
(
NGX_LOG_DEBUG
, 
c
->
log
, 0,

904 
	`ERR_˛ór_îr‹
();

906 
c
->
s¶
->
no_waô_shutdown
 = 1;

907 
c
->
s¶
->
no_£nd_shutdown
 = 1;

909  
NGX_ERROR
;

912 i‡(
n
 > 0) {

914 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
) {

916 
c
->
wrôe
->
h™dÀr
 = c->
s¶
->
ßved_wrôe_h™dÀr
;

917 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = 
NULL
;

918 
c
->
wrôe
->
ªady
 = 1;

920 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

921  
NGX_ERROR
;

924 
	`ngx_po°_evít
(
c
->
wrôe
, &
ngx_po°ed_evíts
);

927  
NGX_OK
;

930 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

932 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

934 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

936 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

937 
c
->
ªad
->
ªady
 = 0;

938  
NGX_AGAIN
;

941 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

943 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

946 
c
->
wrôe
->
ªady
 = 0;

948 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

949  
NGX_ERROR
;

956 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
 =
NULL
) {

957 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = c->
wrôe
->
h™dÀr
;

958 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_wrôe_h™dÀr
;

961  
NGX_AGAIN
;

964 
c
->
s¶
->
no_waô_shutdown
 = 1;

965 
c
->
s¶
->
no_£nd_shutdown
 = 1;

967 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

968 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

970  
NGX_DONE
;

973 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_read() failed");

975  
NGX_ERROR
;

976 
	}
}

980 
	$ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

982 
ngx_c⁄√˘i⁄_t
 *
c
;

984 
c
 = 
wev
->
d©a
;

986 
c
->
ªad
->
	`h™dÀr
(c->read);

987 
	}
}

998 
ngx_chaö_t
 *

999 
	$ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

1001 
n
;

1002 
ngx_uöt_t
 
Êush
;

1003 
ssize_t
 
£nd
, 
size
;

1004 
ngx_buf_t
 *
buf
;

1006 i‡(!
c
->
s¶
->
buf„r
) {

1008 
ö
) {

1009 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1010 
ö
 = in->
√xt
;

1014 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
ö
->
buf
->
pos
, in->buf->
œ°
 - in->buf->pos);

1016 i‡(
n
 =
NGX_ERROR
) {

1017  
NGX_CHAIN_ERROR
;

1020 i‡(
n
 =
NGX_AGAIN
) {

1021  
ö
;

1024 
ö
->
buf
->
pos
 +
n
;

1025 
c
->
£¡
 +
n
;

1027 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1028 
ö
 = in->
√xt
;

1032  
ö
;

1038 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
)) {

1039 
limô
 = 
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
;

1042 
buf
 = 
c
->
s¶
->buf;

1044 i‡(
buf
 =
NULL
) {

1045 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
NGX_SSL_BUFSIZE
);

1046 i‡(
buf
 =
NULL
) {

1047  
NGX_CHAIN_ERROR
;

1050 
c
->
s¶
->
buf
 = buf;

1053 i‡(
buf
->
°¨t
 =
NULL
) {

1054 
buf
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
NGX_SSL_BUFSIZE
);

1055 i‡(
buf
->
°¨t
 =
NULL
) {

1056  
NGX_CHAIN_ERROR
;

1059 
buf
->
pos
 = buf->
°¨t
;

1060 
buf
->
œ°
 = buf->
°¨t
;

1061 
buf
->
íd
 = buf->
°¨t
 + 
NGX_SSL_BUFSIZE
;

1064 
£nd
 = 
buf
->
œ°
 - buf->
pos
;

1065 
Êush
 = (
ö
 =
NULL
Ë? 1 : 
buf
->flush;

1069 
ö
 && 
buf
->
œ°
 < buf->
íd
 && 
£nd
 < 
limô
) {

1070 i‡(
ö
->
buf
->
œ°_buf
 || in->buf->
Êush
) {

1071 
Êush
 = 1;

1074 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1075 
ö
 = in->
√xt
;

1079 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

1081 i‡(
size
 > 
buf
->
íd
 - buf->
œ°
) {

1082 
size
 = 
buf
->
íd
 - buf->
œ°
;

1085 i‡(
£nd
 + 
size
 > 
limô
) {

1086 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

1089 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1090 "SSL bu‡c›y: %d", 
size
);

1092 
	`ngx_mem˝y
(
buf
->
œ°
, 
ö
->buf->
pos
, 
size
);

1094 
buf
->
œ°
 +
size
;

1095 
ö
->
buf
->
pos
 +
size
;

1096 
£nd
 +
size
;

1098 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1099 
ö
 = in->
√xt
;

1103 i‡(!
Êush
 && 
£nd
 < 
limô
 && 
buf
->
œ°
 < buf->
íd
) {

1107 
size
 = 
buf
->
œ°
 - buf->
pos
;

1109 i‡(
size
 == 0) {

1110 
buf
->
Êush
 = 0;

1111 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1112  
ö
;

1115 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
buf
->
pos
, 
size
);

1117 i‡(
n
 =
NGX_ERROR
) {

1118  
NGX_CHAIN_ERROR
;

1121 i‡(
n
 =
NGX_AGAIN
) {

1125 
buf
->
pos
 +
n
;

1126 
c
->
£¡
 +
n
;

1128 i‡(
n
 < 
size
) {

1132 
Êush
 = 0;

1134 
buf
->
pos
 = buf->
°¨t
;

1135 
buf
->
œ°
 = buf->
°¨t
;

1137 i‡(
ö
 =
NULL
 || 
£nd
 =
limô
) {

1142 
buf
->
Êush
 = flush;

1144 i‡(
buf
->
pos
 < buf->
œ°
) {

1145 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

1148 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1151  
ö
;

1152 
	}
}

1155 
ssize_t


1156 
	$ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
)

1158 
n
, 
s¶îr
;

1159 
ngx_îr_t
 
îr
;

1161 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1163 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÅÿwrôe: %d", 
size
);

1165 
n
 = 
	`SSL_wrôe
(
c
->
s¶
->
c⁄√˘i⁄
, 
d©a
, 
size
);

1167 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_wrôe: %d", 
n
);

1169 i‡(
n
 > 0) {

1171 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
) {

1173 
c
->
ªad
->
h™dÀr
 = c->
s¶
->
ßved_ªad_h™dÀr
;

1174 
c
->
s¶
->
ßved_ªad_h™dÀr
 = 
NULL
;

1175 
c
->
ªad
->
ªady
 = 1;

1177 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1178  
NGX_ERROR
;

1181 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

1184  
n
;

1187 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1189 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1191 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1193 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1194 
c
->
wrôe
->
ªady
 = 0;

1195  
NGX_AGAIN
;

1198 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1200 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1203 
c
->
ªad
->
ªady
 = 0;

1205 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1206  
NGX_ERROR
;

1214 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
 =
NULL
) {

1215 
c
->
s¶
->
ßved_ªad_h™dÀr
 = c->
ªad
->
h™dÀr
;

1216 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_ªad_h™dÀr
;

1219  
NGX_AGAIN
;

1222 
c
->
s¶
->
no_waô_shutdown
 = 1;

1223 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1224 
c
->
wrôe
->
îr‹
 = 1;

1226 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_write() failed");

1228  
NGX_ERROR
;

1229 
	}
}

1233 
	$ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1235 
ngx_c⁄√˘i⁄_t
 *
c
;

1237 
c
 = 
ªv
->
d©a
;

1239 
c
->
wrôe
->
	`h™dÀr
(c->write);

1240 
	}
}

1244 
	$ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
)

1246 i‡(
c
->
s¶
->
buf
 && c->s¶->buf->
°¨t
) {

1247 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, c->
s¶
->
buf
->
°¨t
Ë=
NGX_OK
) {

1248 
c
->
s¶
->
buf
->
°¨t
 = 
NULL
;

1251 
	}
}

1254 
ngx_öt_t


1255 
	$ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
)

1257 
n
, 
s¶îr
, 
mode
;

1258 
ngx_îr_t
 
îr
;

1260 i‡(
c
->
timedout
) {

1261 
mode
 = 
SSL_RECEIVED_SHUTDOWN
|
SSL_SENT_SHUTDOWN
;

1262 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1265 
mode
 = 
	`SSL_gë_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1267 i‡(
c
->
s¶
->
no_waô_shutdown
) {

1268 
mode
 |
SSL_RECEIVED_SHUTDOWN
;

1271 i‡(
c
->
s¶
->
no_£nd_shutdown
) {

1272 
mode
 |
SSL_SENT_SHUTDOWN
;

1275 i‡(
c
->
s¶
->
no_waô_shutdown
 && c->s¶->
no_£nd_shutdown
) {

1276 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1280 
	`SSL_£t_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 
mode
);

1282 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1284 
n
 = 
	`SSL_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_shutdown: %d", 
n
);

1288 
s¶îr
 = 0;

1292 i‡(
n
 !1 && 
	`ERR_≥ek_îr‹
()) {

1293 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1295 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1296 "SSL_gë_îr‹: %d", 
s¶îr
);

1299 i‡(
n
 =1 || 
s¶îr
 =0 || s¶î∏=
SSL_ERROR_ZERO_RETURN
) {

1300 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1301 
c
->
s¶
 = 
NULL
;

1303  
NGX_OK
;

1306 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
 || s¶î∏=
SSL_ERROR_WANT_WRITE
) {

1307 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1308 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1310 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1311  
NGX_ERROR
;

1314 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1315  
NGX_ERROR
;

1318 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1319 
	`ngx_add_timî
(
c
->
ªad
, 30000);

1322  
NGX_AGAIN
;

1325 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1327 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_shutdown() failed");

1329 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1330 
c
->
s¶
 = 
NULL
;

1332  
NGX_ERROR
;

1333 
	}
}

1337 
	$ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
)

1339 
ngx_c⁄√˘i⁄_t
 *
c
;

1340 
ngx_c⁄√˘i⁄_h™dÀr_±
 
h™dÀr
;

1342 
c
 = 
ev
->
d©a
;

1343 
h™dÀr
 = 
c
->
s¶
->handler;

1345 i‡(
ev
->
timedout
) {

1346 
c
->
timedout
 = 1;

1349 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "SSL shutdown handler");

1351 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

1355 
	`h™dÀr
(
c
);

1356 
	}
}

1360 
	$ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
, 
ngx_îr_t
 
îr
,

1361 *
ãxt
)

1363 
n
;

1364 
ngx_uöt_t
 
Àvñ
;

1366 
Àvñ
 = 
NGX_LOG_CRIT
;

1368 i‡(
s¶îr
 =
SSL_ERROR_SYSCALL
) {

1370 i‡(
îr
 =
NGX_ECONNRESET


1371 || 
îr
 =
NGX_EPIPE


1372 || 
îr
 =
NGX_ENOTCONN


1373 || 
îr
 =
NGX_ETIMEDOUT


1374 || 
îr
 =
NGX_ECONNREFUSED


1375 || 
îr
 =
NGX_ENETDOWN


1376 || 
îr
 =
NGX_ENETUNREACH


1377 || 
îr
 =
NGX_EHOSTDOWN


1378 || 
îr
 =
NGX_EHOSTUNREACH
)

1380 
c
->
log_îr‹
) {

1382 
NGX_ERROR_IGNORE_ECONNRESET
:

1383 
NGX_ERROR_INFO
:

1384 
Àvñ
 = 
NGX_LOG_INFO
;

1387 
NGX_ERROR_ERR
:

1388 
Àvñ
 = 
NGX_LOG_ERR
;

1396 } i‡(
s¶îr
 =
SSL_ERROR_SSL
) {

1398 
n
 = 
	`ERR_GET_REASON
(
	`ERR_≥ek_îr‹
());

1401 i‡(
n
 =
SSL_R_BAD_CHANGE_CIPHER_SPEC


1402 || 
n
 =
SSL_R_BLOCK_CIPHER_PAD_IS_WRONG


1403 || 
n
 =
SSL_R_DIGEST_CHECK_FAILED


1404 || 
n
 =
SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST


1405 || 
n
 =
SSL_R_EXCESSIVE_MESSAGE_SIZE


1406 || 
n
 =
SSL_R_LENGTH_MISMATCH


1407 || 
n
 =
SSL_R_NO_CIPHERS_PASSED


1408 || 
n
 =
SSL_R_NO_CIPHERS_SPECIFIED


1409 || 
n
 =
SSL_R_NO_COMPRESSION_SPECIFIED


1410 || 
n
 =
SSL_R_NO_SHARED_CIPHER


1411 || 
n
 =
SSL_R_RECORD_LENGTH_MISMATCH


1412 #ifde‡
SSL_R_PARSE_TLSEXT


1413 || 
n
 =
SSL_R_PARSE_TLSEXT


1415 || 
n
 =
SSL_R_UNEXPECTED_MESSAGE


1416 || 
n
 =
SSL_R_UNEXPECTED_RECORD


1417 || 
n
 =
SSL_R_UNKNOWN_ALERT_TYPE


1418 || 
n
 =
SSL_R_UNKNOWN_PROTOCOL


1419 || 
n
 =
SSL_R_WRONG_VERSION_NUMBER


1420 || 
n
 =
SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC


1421 #ifde‡
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1422 || 
n
 =
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1423 || 
n
 =
SSL_R_RENEGOTIATION_ENCODING_ERR


1424 || 
n
 =
SSL_R_RENEGOTIATION_MISMATCH


1426 #ifde‡
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1427 || 
n
 =
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1429 #ifde‡
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1430 || 
n
 =
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1432 || 
n
 == 1000

1433 || 
n
 =
SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE


1434 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_RECORD_MAC


1435 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPTION_FAILED


1436 || 
n
 =
SSL_R_TLSV1_ALERT_RECORD_OVERFLOW


1437 || 
n
 =
SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE


1438 || 
n
 =
SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE


1439 || 
n
 =
SSL_R_SSLV3_ALERT_NO_CERTIFICATE


1440 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_CERTIFICATE


1441 || 
n
 =
SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE


1442 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED


1443 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED


1444 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN


1445 || 
n
 =
SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER


1446 || 
n
 =
SSL_R_TLSV1_ALERT_UNKNOWN_CA


1447 || 
n
 =
SSL_R_TLSV1_ALERT_ACCESS_DENIED


1448 || 
n
 =
SSL_R_TLSV1_ALERT_DECODE_ERROR


1449 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPT_ERROR


1450 || 
n
 =
SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION


1451 || 
n
 =
SSL_R_TLSV1_ALERT_PROTOCOL_VERSION


1452 || 
n
 =
SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY


1453 || 
n
 =
SSL_R_TLSV1_ALERT_INTERNAL_ERROR


1454 || 
n
 =
SSL_R_TLSV1_ALERT_USER_CANCELLED


1455 || 
n
 =
SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
)

1457 
c
->
log_îr‹
) {

1459 
NGX_ERROR_IGNORE_ECONNRESET
:

1460 
NGX_ERROR_INFO
:

1461 
Àvñ
 = 
NGX_LOG_INFO
;

1464 
NGX_ERROR_ERR
:

1465 
Àvñ
 = 
NGX_LOG_ERR
;

1474 
	`ngx_s¶_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1475 
	}
}

1479 
	$ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
)

1481 
	`ERR_≥ek_îr‹
()) {

1482 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "ignoring stale global SSLÉrror");

1485 
	`ERR_˛ór_îr‹
();

1486 
	}
}

1489 
ngx_cde˛


1490 
	$ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, *
fmt
, ...)

1492 
u_l⁄g
 
n
;

1493 
va_li°
 
¨gs
;

1494 
u_ch¨
 *
p
, *
œ°
;

1495 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1497 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

1499 
	`va_°¨t
(
¨gs
, 
fmt
);

1500 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
 - 1, 
fmt
, 
¨gs
);

1501 
	`va_íd
(
¨gs
);

1503 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (SSL:", 
œ°
 -Ö);

1507 
n
 = 
	`ERR_gë_îr‹
();

1509 i‡(
n
 == 0) {

1513 i‡(
p
 >
œ°
) {

1517 *
p
++ = ' ';

1519 
	`ERR_îr‹_°rög_n
(
n
, (*Ë
p
, 
œ°
 -Ö);

1521 
p
 < 
œ°
 && *p) {

1522 
p
++;

1526 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%s)", 
îr°r
);

1527 
	}
}

1530 
ngx_öt_t


1531 
	$ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

1532 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
)

1534 
ˇche_mode
;

1536 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_SCACHE
) {

1537 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
SSL_SESS_CACHE_OFF
);

1538  
NGX_OK
;

1541 
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
s¶
->
˘x
, 
£ss_˘x
->
d©a
, sess_˘x->
Àn
);

1543 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NONE_SCACHE
) {

1556 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
,

1557 
SSL_SESS_CACHE_SERVER


1558 |
SSL_SESS_CACHE_NO_AUTO_CLEAR


1559 |
SSL_SESS_CACHE_NO_INTERNAL_STORE
);

1561 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 1);

1563  
NGX_OK
;

1566 
ˇche_mode
 = 
SSL_SESS_CACHE_SERVER
;

1568 i‡(
shm_z⁄e
 && 
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_BUILTIN_SCACHE
) {

1569 
ˇche_mode
 |
SSL_SESS_CACHE_NO_INTERNAL
;

1572 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
ˇche_mode
);

1574 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_NO_BUILTIN_SCACHE
) {

1576 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_DFLT_BUILTIN_SCACHE
) {

1577 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 
buûtö_£ssi⁄_ˇche
);

1581 
	`SSL_CTX_£t_timeout
(
s¶
->
˘x
, (Ë
timeout
);

1583 i‡(
shm_z⁄e
) {

1584 
	`SSL_CTX_£ss_£t_√w_cb
(
s¶
->
˘x
, 
ngx_s¶_√w_£ssi⁄
);

1585 
	`SSL_CTX_£ss_£t_gë_cb
(
s¶
->
˘x
, 
ngx_s¶_gë_ˇched_£ssi⁄
);

1586 
	`SSL_CTX_£ss_£t_ªmove_cb
(
s¶
->
˘x
, 
ngx_s¶_ªmove_£ssi⁄
);

1588 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
, 
shm_z⁄e
)

1591 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1593  
NGX_ERROR
;

1597  
NGX_OK
;

1598 
	}
}

1601 
ngx_öt_t


1602 
	$ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

1604 
size_t
 
Àn
;

1605 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1606 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1608 i‡(
d©a
) {

1609 
shm_z⁄e
->
d©a
 = data;

1610  
NGX_OK
;

1613 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

1614 
shm_z⁄e
->
d©a
 = data;

1615  
NGX_OK
;

1618 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1620 
ˇche
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_s¶_£ssi⁄_ˇche_t
));

1621 i‡(
ˇche
 =
NULL
) {

1622  
NGX_ERROR
;

1625 
shpoﬁ
->
d©a
 = 
ˇche
;

1626 
shm_z⁄e
->
d©a
 = 
ˇche
;

1628 
	`ngx_rbåì_öô
(&
ˇche
->
£ssi⁄_rbåì
, &ˇche->
£¡öñ
,

1629 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
);

1631 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

1633 
Àn
 = (" i¿SSL sessi⁄ sh¨ed cachê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

1635 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

1636 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

1637  
NGX_ERROR
;

1640 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in SSL session shared cache \"%V\"%Z",

1641 &
shm_z⁄e
->
shm
.
«me
);

1643  
NGX_OK
;

1644 
	}
}

1665 
	$ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1667 
Àn
;

1668 
u_ch¨
 *
p
, *
id
, *
ˇched_£ss
;

1669 
uöt32_t
 
hash
;

1670 
SSL_CTX
 *
s¶_˘x
;

1671 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1672 
ngx_c⁄√˘i⁄_t
 *
c
;

1673 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1674 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1675 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1676 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

1678 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

1682 i‡(
Àn
 > (Ë
NGX_SSL_MAX_SESSION_SIZE
) {

1686 
p
 = 
buf
;

1687 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

1689 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1691 
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
);

1692 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1694 
ˇche
 = 
shm_z⁄e
->
d©a
;

1695 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1697 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1700 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 1);

1702 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

1704 i‡(
ˇched_£ss
 =
NULL
) {

1708 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

1710 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

1712 i‡(
ˇched_£ss
 =
NULL
) {

1713 
£ss_id
 = 
NULL
;

1714 
Áûed
;

1718 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

1720 i‡(
£ss_id
 =
NULL
) {

1724 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

1726 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

1728 i‡(
£ss_id
 =
NULL
) {

1729 
Áûed
;

1733 #i‡(
NGX_PTR_SIZE
 == 8)

1735 
id
 = 
£ss_id
->sess_id;

1739 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ss
->
£ssi⁄_id_Àngth
);

1741 i‡(
id
 =
NULL
) {

1745 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

1747 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ss
->
£ssi⁄_id_Àngth
);

1749 i‡(
id
 =
NULL
) {

1750 
Áûed
;

1756 
	`ngx_mem˝y
(
ˇched_£ss
, 
buf
, 
Àn
);

1758 
	`ngx_mem˝y
(
id
, 
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

1760 
hash
 = 
	`ngx_¸c32_sh‹t
(
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

1762 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1764 
hash
, 
£ss
->
£ssi⁄_id_Àngth
, 
Àn
);

1766 
£ss_id
->
node
.
key
 = 
hash
;

1767 
£ss_id
->
node
.
d©a
 = (
u_ch¨
Ë
£ss
->
£ssi⁄_id_Àngth
;

1768 
£ss_id
->
id
 = id;

1769 
£ss_id
->
Àn
 =Üen;

1770 
£ss_id
->
£ssi⁄
 = 
ˇched_£ss
;

1772 
£ss_id
->
expúe
 = 
	`ngx_time
(Ë+ 
	`SSL_CTX_gë_timeout
(
s¶_˘x
);

1774 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
£ss_id
->
queue
);

1776 
	`ngx_rbåì_ö£π
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

1778 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1782 
Áûed
:

1784 i‡(
ˇched_£ss
) {

1785 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
ˇched_£ss
);

1788 i‡(
£ss_id
) {

1789 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1792 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1794 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

1798 
	}
}

1801 
ngx_s¶_£ssi⁄_t
 *

1802 
	$ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
u_ch¨
 *
id
, 
Àn
,

1803 *
c›y
)

1805 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

1808 
u_ch¨
 *
p
;

1809 
uöt32_t
 
hash
;

1810 
ngx_öt_t
 
rc
;

1811 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1812 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1813 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1814 
ngx_s¶_£ssi⁄_t
 *
£ss
;

1815 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1816 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1817 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

1818 #i‡(
NGX_DEBUG
)

1819 
ngx_c⁄√˘i⁄_t
 *
c
;

1822 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, (
size_t
Ë
Àn
);

1823 *
c›y
 = 0;

1825 #i‡(
NGX_DEBUG
)

1826 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1828 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1829 "s¶ gë sessi⁄: %08XD:%d", 
hash
, 
Àn
);

1832 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
),

1833 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1835 
ˇche
 = 
shm_z⁄e
->
d©a
;

1837 
£ss
 = 
NULL
;

1839 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1841 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1843 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

1844 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

1846 
node
 !
£¡öñ
) {

1848 i‡(
hash
 < 
node
->
key
) {

1849 
node
 =Çode->
À·
;

1853 i‡(
hash
 > 
node
->
key
) {

1854 
node
 =Çode->
right
;

1860 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

1862 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, (
size_t
Ë
Àn
, (size_tË
node
->
d©a
);

1864 i‡(
rc
 == 0) {

1866 i‡(
£ss_id
->
expúe
 > 
	`ngx_time
()) {

1867 
	`ngx_mem˝y
(
buf
, 
£ss_id
->
£ssi⁄
, sess_id->
Àn
);

1869 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1871 
p
 = 
buf
;

1872 
£ss
 = 
	`d2i_SSL_SESSION
(
NULL
, &
p
, 
£ss_id
->
Àn
);

1874  
£ss
;

1877 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

1879 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

1881 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

1882 #i‡(
NGX_PTR_SIZE
 == 4)

1883 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

1885 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1887 
£ss
 = 
NULL
;

1889 
d⁄e
;

1892 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1895 
d⁄e
:

1897 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1899  
£ss
;

1900 
	}
}

1904 
	$ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1906 
	`SSL_CTX_ªmove_£ssi⁄
(
s¶
, 
£ss
);

1908 
	`ngx_s¶_ªmove_£ssi⁄
(
s¶
, 
£ss
);

1909 
	}
}

1913 
	$ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1915 
size_t
 
Àn
;

1916 
u_ch¨
 *
id
;

1917 
uöt32_t
 
hash
;

1918 
ngx_öt_t
 
rc
;

1919 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1920 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1921 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1922 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1923 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1925 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1927 i‡(
shm_z⁄e
 =
NULL
) {

1931 
ˇche
 = 
shm_z⁄e
->
d©a
;

1933 
id
 = 
£ss
->
£ssi⁄_id
;

1934 
Àn
 = (
size_t
Ë
£ss
->
£ssi⁄_id_Àngth
;

1936 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, 
Àn
);

1938 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

1939 "s¶Ñemovê£ssi⁄: %08XD:%uz", 
hash
, 
Àn
);

1941 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1943 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1945 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

1946 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

1948 
node
 !
£¡öñ
) {

1950 i‡(
hash
 < 
node
->
key
) {

1951 
node
 =Çode->
À·
;

1955 i‡(
hash
 > 
node
->
key
) {

1956 
node
 =Çode->
right
;

1962 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

1964 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, 
Àn
, (
size_t
Ë
node
->
d©a
);

1966 i‡(
rc
 == 0) {

1968 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

1970 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

1972 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

1973 #i‡(
NGX_PTR_SIZE
 == 4)

1974 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

1976 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1978 
d⁄e
;

1981 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1984 
d⁄e
:

1986 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1987 
	}
}

1991 
	$ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

1992 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
)

1994 
time_t
 
now
;

1995 
ngx_queue_t
 *
q
;

1996 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1998 
now
 = 
	`ngx_time
();

2000 
n
 < 3) {

2002 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

2006 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

2008 
£ss_id
 = 
	`ngx_queue_d©a
(
q
, 
ngx_s¶_£ss_id_t
, 
queue
);

2010 i‡(
n
++ !0 && 
£ss_id
->
expúe
 > 
now
) {

2014 
	`ngx_queue_ªmove
(
q
);

2016 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2017 "expúê£ssi⁄: %08Xi", 
£ss_id
->
node
.
key
);

2019 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2021 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2022 #i‡(
NGX_PTR_SIZE
 == 4)

2023 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2025 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2027 
	}
}

2031 
	$ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2032 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2034 
ngx_rbåì_node_t
 **
p
;

2035 
ngx_s¶_£ss_id_t
 *
£ss_id
, *
£ss_id_ãmp
;

2039 i‡(
node
->
key
 < 
ãmp
->key) {

2041 
p
 = &
ãmp
->
À·
;

2043 } i‡(
node
->
key
 > 
ãmp
->key) {

2045 
p
 = &
ãmp
->
right
;

2049 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2050 
£ss_id_ãmp
 = (
ngx_s¶_£ss_id_t
 *Ë
ãmp
;

2052 
p
 = (
	`ngx_memn2cmp
(
£ss_id
->
id
, 
£ss_id_ãmp
->id,

2053 (
size_t
Ë
node
->
d©a
, (size_tË
ãmp
->data)

2054 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2057 i‡(*
p
 =
£¡öñ
) {

2061 
ãmp
 = *
p
;

2064 *
p
 = 
node
;

2065 
node
->
∑ª¡
 = 
ãmp
;

2066 
node
->
À·
 = 
£¡öñ
;

2067 
node
->
right
 = 
£¡öñ
;

2068 
	`ngx_rbt_ªd
(
node
);

2069 
	}
}

2073 
	$ngx_s¶_˛ónup_˘x
(*
d©a
)

2075 
ngx_s¶_t
 *
s¶
 = 
d©a
;

2077 
	`SSL_CTX_‰ì
(
s¶
->
˘x
);

2078 
	}
}

2081 
ngx_öt_t


2082 
	$ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2084 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2085  
NGX_OK
;

2086 
	}
}

2089 
ngx_öt_t


2090 
	$ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2092 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_cùhî_«me
(
c
->
s¶
->
c⁄√˘i⁄
);

2093  
NGX_OK
;

2094 
	}
}

2097 
ngx_öt_t


2098 
	$ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2100 
Àn
;

2101 
u_ch¨
 *
p
, *
buf
;

2102 
SSL_SESSION
 *
£ss
;

2104 
£ss
 = 
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2106 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

2108 
buf
 = 
	`ngx_Æloc
(
Àn
, 
c
->
log
);

2109 i‡(
buf
 =
NULL
) {

2110  
NGX_ERROR
;

2113 
s
->
Àn
 = 2 *Üen;

2114 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

2115 i‡(
s
->
d©a
 =
NULL
) {

2116 
	`ngx_‰ì
(
buf
);

2117  
NGX_ERROR
;

2120 
p
 = 
buf
;

2121 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

2123 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

2125 
	`ngx_‰ì
(
buf
);

2127  
NGX_OK
;

2128 
	}
}

2131 
ngx_öt_t


2132 
	$ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2134 
size_t
 
Àn
;

2135 
BIO
 *
bio
;

2136 
X509
 *
˚π
;

2138 
s
->
Àn
 = 0;

2140 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2141 i‡(
˚π
 =
NULL
) {

2142  
NGX_OK
;

2145 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2146 i‡(
bio
 =
NULL
) {

2147 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "BIO_new() failed");

2148 
	`X509_‰ì
(
˚π
);

2149  
NGX_ERROR
;

2152 i‡(
	`PEM_wrôe_bio_X509
(
bio
, 
˚π
) == 0) {

2153 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "PEM_write_bio_X509() failed");

2154 
Áûed
;

2157 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2158 
s
->
Àn
 =Üen;

2160 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2161 i‡(
s
->
d©a
 =
NULL
) {

2162 
Áûed
;

2165 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2167 
	`BIO_‰ì
(
bio
);

2168 
	`X509_‰ì
(
˚π
);

2170  
NGX_OK
;

2172 
Áûed
:

2174 
	`BIO_‰ì
(
bio
);

2175 
	`X509_‰ì
(
˚π
);

2177  
NGX_ERROR
;

2178 
	}
}

2181 
ngx_öt_t


2182 
	$ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2184 
u_ch¨
 *
p
;

2185 
size_t
 
Àn
;

2186 
ngx_uöt_t
 
i
;

2187 
ngx_°r_t
 
˚π
;

2189 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
˚π
Ë!
NGX_OK
) {

2190  
NGX_ERROR
;

2193 i‡(
˚π
.
Àn
 == 0) {

2194 
s
->
Àn
 = 0;

2195  
NGX_OK
;

2198 
Àn
 = 
˚π
.len - 1;

2200 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2201 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2202 
Àn
++;

2206 
s
->
Àn
 =Üen;

2207 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2208 i‡(
s
->
d©a
 =
NULL
) {

2209  
NGX_ERROR
;

2212 
p
 = 
s
->
d©a
;

2214 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2215 *
p
++ = 
˚π
.
d©a
[
i
];

2216 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2217 *
p
++ = '\t';

2221  
NGX_OK
;

2222 
	}
}

2225 
ngx_öt_t


2226 
	$ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2228 *
p
;

2229 
size_t
 
Àn
;

2230 
X509
 *
˚π
;

2231 
X509_NAME
 *
«me
;

2233 
s
->
Àn
 = 0;

2235 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2236 i‡(
˚π
 =
NULL
) {

2237  
NGX_OK
;

2240 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

2241 i‡(
«me
 =
NULL
) {

2242 
	`X509_‰ì
(
˚π
);

2243  
NGX_ERROR
;

2246 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2248 
Àn
 = 0; 
p
[len];Üen++) { }

2250 
s
->
Àn
 =Üen;

2251 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2252 i‡(
s
->
d©a
 =
NULL
) {

2253 
	`OPENSSL_‰ì
(
p
);

2254 
	`X509_‰ì
(
˚π
);

2255  
NGX_ERROR
;

2258 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2260 
	`OPENSSL_‰ì
(
p
);

2261 
	`X509_‰ì
(
˚π
);

2263  
NGX_OK
;

2264 
	}
}

2267 
ngx_öt_t


2268 
	$ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2270 *
p
;

2271 
size_t
 
Àn
;

2272 
X509
 *
˚π
;

2273 
X509_NAME
 *
«me
;

2275 
s
->
Àn
 = 0;

2277 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2278 i‡(
˚π
 =
NULL
) {

2279  
NGX_OK
;

2282 
«me
 = 
	`X509_gë_issuî_«me
(
˚π
);

2283 i‡(
«me
 =
NULL
) {

2284 
	`X509_‰ì
(
˚π
);

2285  
NGX_ERROR
;

2288 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2290 
Àn
 = 0; 
p
[len];Üen++) { }

2292 
s
->
Àn
 =Üen;

2293 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2294 i‡(
s
->
d©a
 =
NULL
) {

2295 
	`OPENSSL_‰ì
(
p
);

2296 
	`X509_‰ì
(
˚π
);

2297  
NGX_ERROR
;

2300 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2302 
	`OPENSSL_‰ì
(
p
);

2303 
	`X509_‰ì
(
˚π
);

2305  
NGX_OK
;

2306 
	}
}

2309 
ngx_öt_t


2310 
	$ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2312 
size_t
 
Àn
;

2313 
X509
 *
˚π
;

2314 
BIO
 *
bio
;

2316 
s
->
Àn
 = 0;

2318 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2319 i‡(
˚π
 =
NULL
) {

2320  
NGX_OK
;

2323 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2324 i‡(
bio
 =
NULL
) {

2325 
	`X509_‰ì
(
˚π
);

2326  
NGX_ERROR
;

2329 
	`i2a_ASN1_INTEGER
(
bio
, 
	`X509_gë_£rülNumbî
(
˚π
));

2330 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2332 
s
->
Àn
 =Üen;

2333 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2334 i‡(
s
->
d©a
 =
NULL
) {

2335 
	`BIO_‰ì
(
bio
);

2336 
	`X509_‰ì
(
˚π
);

2337  
NGX_ERROR
;

2340 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2341 
	`BIO_‰ì
(
bio
);

2342 
	`X509_‰ì
(
˚π
);

2344  
NGX_OK
;

2345 
	}
}

2348 
ngx_öt_t


2349 
	$ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2351 
X509
 *
˚π
;

2353 i‡(
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
Ë!
X509_V_OK
) {

2354 
	`ngx_°r_£t
(
s
, "FAILED");

2355  
NGX_OK
;

2358 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2360 i‡(
˚π
) {

2361 
	`ngx_°r_£t
(
s
, "SUCCESS");

2364 
	`ngx_°r_£t
(
s
, "NONE");

2367 
	`X509_‰ì
(
˚π
);

2369  
NGX_OK
;

2370 
	}
}

2374 
	$ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

2376 
ngx_›ís¶_c⁄f_t
 *
oscf
;

2378 
oscf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_›ís¶_c⁄f_t
));

2379 i‡(
oscf
 =
NULL
) {

2380  
NULL
;

2389  
oscf
;

2390 
	}
}

2394 
	$ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2396 
ngx_›ís¶_c⁄f_t
 *
oscf
 = 
c⁄f
;

2398 
ENGINE
 *
ígöe
;

2399 
ngx_°r_t
 *
vÆue
;

2401 i‡(
oscf
->
ígöe
) {

2405 
oscf
->
ígöe
 = 1;

2407 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2409 
ígöe
 = 
	`ENGINE_by_id
((c⁄° *Ë
vÆue
[1].
d©a
);

2411 i‡(
ígöe
 =
NULL
) {

2412 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2413 "ENGINE_by_id(\"%V\"ËÁûed", &
vÆue
[1]);

2414  
NGX_CONF_ERROR
;

2417 i‡(
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
) == 0) {

2418 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2420 &
vÆue
[1]);

2422 
	`ENGINE_‰ì
(
ígöe
);

2424  
NGX_CONF_ERROR
;

2427 
	`ENGINE_‰ì
(
ígöe
);

2429  
NGX_CONF_OK
;

2430 
	}
}

2434 
	$ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
)

2436 
	`EVP_˛ónup
();

2437 
	`ENGINE_˛ónup
();

2438 
	}
}

	@src/event/ngx_event_openssl.h

8 #i‚de‡
_NGX_EVENT_OPENSSL_H_INCLUDED_


9 
	#_NGX_EVENT_OPENSSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<›ís¶/s¶.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/c⁄f.h
>

18 
	~<›ís¶/ígöe.h
>

19 
	~<›ís¶/evp.h
>

21 
	#NGX_SSL_NAME
 "O≥nSSL"

	)

24 
	#ngx_s¶_£ssi⁄_t
 
SSL_SESSION


	)

25 
	#ngx_s¶_c⁄n_t
 
SSL


	)

29 
SSL_CTX
 *
	m˘x
;

30 
ngx_log_t
 *
	mlog
;

31 } 
	tngx_s¶_t
;

35 
ngx_s¶_c⁄n_t
 *
	mc⁄√˘i⁄
;

37 
ngx_öt_t
 
	mœ°
;

38 
ngx_buf_t
 *
	mbuf
;

40 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

42 
ngx_evít_h™dÀr_±
 
	mßved_ªad_h™dÀr
;

43 
ngx_evít_h™dÀr_±
 
	mßved_wrôe_h™dÀr
;

45 
	mh™dshaked
:1;

46 
	mª√gŸüti⁄
:1;

47 
	mbuf„r
:1;

48 
	mno_waô_shutdown
:1;

49 
	mno_£nd_shutdown
:1;

50 } 
	tngx_s¶_c⁄√˘i⁄_t
;

53 
	#NGX_SSL_NO_SCACHE
 -2

	)

54 
	#NGX_SSL_NONE_SCACHE
 -3

	)

55 
	#NGX_SSL_NO_BUILTIN_SCACHE
 -4

	)

56 
	#NGX_SSL_DFLT_BUILTIN_SCACHE
 -5

	)

59 
	#NGX_SSL_MAX_SESSION_SIZE
 4096

	)

61 
ngx_s¶_£ss_id_s
 
	tngx_s¶_£ss_id_t
;

63 
	sngx_s¶_£ss_id_s
 {

64 
ngx_rbåì_node_t
 
	mnode
;

65 
u_ch¨
 *
	mid
;

66 
size_t
 
	mÀn
;

67 
u_ch¨
 *
	m£ssi⁄
;

68 
ngx_queue_t
 
	mqueue
;

69 
time_t
 
	mexpúe
;

70 #i‡(
NGX_PTR_SIZE
 == 8)

71 *
	m°ub
;

72 
u_ch¨
 
	m£ss_id
[32];

78 
ngx_rbåì_t
 
	m£ssi⁄_rbåì
;

79 
ngx_rbåì_node_t
 
	m£¡öñ
;

80 
ngx_queue_t
 
	mexpúe_queue
;

81 } 
	tngx_s¶_£ssi⁄_ˇche_t
;

85 
	#NGX_SSL_SSLv2
 0x0002

	)

86 
	#NGX_SSL_SSLv3
 0x0004

	)

87 
	#NGX_SSL_TLSv1
 0x0008

	)

88 
	#NGX_SSL_TLSv1_1
 0x0010

	)

89 
	#NGX_SSL_TLSv1_2
 0x0020

	)

92 
	#NGX_SSL_BUFFER
 1

	)

93 
	#NGX_SSL_CLIENT
 2

	)

95 
	#NGX_SSL_BUFSIZE
 16384

	)

98 
ngx_öt_t
 
ngx_s¶_öô
(
ngx_log_t
 *
log
);

99 
ngx_öt_t
 
ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
);

100 
ngx_öt_t
 
ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

101 
ngx_°r_t
 *
˚π
,Çgx_°r_à*
key
);

102 
ngx_öt_t
 
ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

103 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

104 
ngx_öt_t
 
ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
);

105 
RSA
 *
ngx_s¶_rß512_key_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
, 
key_Àngth
);

106 
ngx_öt_t
 
ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
);

107 
ngx_öt_t
 
ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
);

108 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

109 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
);

110 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

111 
ngx_öt_t
 
ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
,

112 
ngx_uöt_t
 
Êags
);

114 
ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

115 
ngx_öt_t
 
ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
);

116 
	#ngx_s¶_gë_£ssi⁄
(
c
Ë
	`SSL_gë1_£ssi⁄
(c->
s¶
->
c⁄√˘i⁄
)

	)

117 
	#ngx_s¶_‰ì_£ssi⁄
 
SSL_SESSION_‰ì


	)

118 
	#ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
) \

119 
	`SSL_gë_ex_d©a
(
s¶_c⁄n
, 
ngx_s¶_c⁄√˘i⁄_ödex
)

	)

120 
	#ngx_s¶_gë_£rvî_c⁄f
(
s¶_˘x
) \

121 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
)

	)

123 
	#ngx_s¶_vîify_îr‹_›ti⁄Æ
(
n
) \

124 (
n
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 \

125 || 
n
 =
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 \

126 || 
n
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 \

127 || 
n
 =
X509_V_ERR_CERT_UNTRUSTED
 \

128 || 
n
 =
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
)

	)

131 
ngx_öt_t
 
ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

132 
ngx_°r_t
 *
s
);

133 
ngx_öt_t
 
ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

134 
ngx_°r_t
 *
s
);

135 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

136 
ngx_°r_t
 *
s
);

137 
ngx_öt_t
 
ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

138 
ngx_°r_t
 *
s
);

139 
ngx_öt_t
 
ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

140 
ngx_°r_t
 *
s
);

141 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

142 
ngx_°r_t
 *
s
);

143 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

144 
ngx_°r_t
 *
s
);

145 
ngx_öt_t
 
ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

146 
ngx_°r_t
 *
s
);

147 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

148 
ngx_°r_t
 *
s
);

151 
ngx_öt_t
 
ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

152 
ssize_t
 
ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

153 
ssize_t
 
ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
);

154 
ssize_t
 
ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

155 
ngx_chaö_t
 *
ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

156 
off_t
 
limô
);

157 
ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
);

158 
ngx_öt_t
 
ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
);

159 
ngx_cde˛
 
ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

160 *
fmt
, ...);

161 
ngx_s¶_˛ónup_˘x
(*
d©a
);

164 
ngx_s¶_c⁄√˘i⁄_ödex
;

165 
ngx_s¶_£rvî_c⁄f_ödex
;

166 
ngx_s¶_£ssi⁄_ˇche_ödex
;

	@src/event/ngx_event_pipe.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_pùe.h
>

14 
ngx_öt_t
 
ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
);

15 
ngx_öt_t
 
ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
);

17 
ngx_öt_t
 
ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
);

18 
ngx_ölöe
 
ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
);

19 
ngx_öt_t
 
ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
);

22 
ngx_öt_t


23 
	$ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
, 
ngx_öt_t
 
do_wrôe
)

25 
u_öt
 
Êags
;

26 
ngx_öt_t
 
rc
;

27 
ngx_evít_t
 *
ªv
, *
wev
;

30 i‡(
do_wrôe
) {

31 
p
->
log
->
a˘i⁄
 = "sendingÅo client";

33 
rc
 = 
	`ngx_evít_pùe_wrôe_to_down°ªam
(
p
);

35 i‡(
rc
 =
NGX_ABORT
) {

36  
NGX_ABORT
;

39 i‡(
rc
 =
NGX_BUSY
) {

40  
NGX_OK
;

44 
p
->
ªad
 = 0;

45 
p
->
up°ªam_blocked
 = 0;

47 
p
->
log
->
a˘i⁄
 = "reading upstream";

49 i‡(
	`ngx_evít_pùe_ªad_up°ªam
(
p
Ë=
NGX_ABORT
) {

50  
NGX_ABORT
;

53 i‡(!
p
->
ªad
 && !p->
up°ªam_blocked
) {

57 
do_wrôe
 = 1;

60 i‡(
p
->
up°ªam
->
fd
 != -1) {

61 
ªv
 = 
p
->
up°ªam
->
ªad
;

63 
Êags
 = (
ªv
->
eof
 ||Ñev->
îr‹
Ë? 
NGX_CLOSE_EVENT
 : 0;

65 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 
Êags
Ë!
NGX_OK
) {

66  
NGX_ABORT
;

69 i‡(
ªv
->
a˘ive
 && !ªv->
ªady
) {

70 
	`ngx_add_timî
(
ªv
, 
p
->
ªad_timeout
);

72 } i‡(
ªv
->
timî_£t
) {

73 
	`ngx_dñ_timî
(
ªv
);

77 i‡(
p
->
down°ªam
->
fd
 !-1 &&Ö->down°ªam->
d©a
 =p->
ouçut_˘x
) {

78 
wev
 = 
p
->
down°ªam
->
wrôe
;

79 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

80  
NGX_ABORT
;

83 i‡(!
wev
->
dñayed
) {

84 i‡(
wev
->
a˘ive
 && !wev->
ªady
) {

85 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

87 } i‡(
wev
->
timî_£t
) {

88 
	`ngx_dñ_timî
(
wev
);

93  
NGX_OK
;

94 
	}
}

97 
ngx_öt_t


98 
	$ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
)

100 
ssize_t
 
n
, 
size
;

101 
ngx_öt_t
 
rc
;

102 
ngx_buf_t
 *
b
;

103 
ngx_chaö_t
 *
chaö
, *
˛
, *
 
;

105 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

106  
NGX_OK
;

109 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

110 "pùêªad up°ªam: %d", 
p
->
up°ªam
->
ªad
->
ªady
);

114 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

118 i‡(
p
->
¥îód_bufs
 =
NULL
 && !p->
up°ªam
->
ªad
->
ªady
) {

122 i‡(
p
->
¥îód_bufs
) {

126 
chaö
 = 
p
->
¥îód_bufs
;

127 
p
->
¥îód_bufs
 = 
NULL
;

128 
n
 = 
p
->
¥îód_size
;

130 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

131 "pùê¥îód: %z", 
n
);

133 i‡(
n
) {

134 
p
->
ªad
 = 1;

139 #i‡(
NGX_HAVE_KQUEUE
)

147 i‡(
p
->
up°ªam
->
ªad
->
avaûabÀ
 == 0

148 && 
p
->
up°ªam
->
ªad
->
≥ndög_eof
)

150 
p
->
up°ªam
->
ªad
->
ªady
 = 0;

151 
p
->
up°ªam
->
ªad
->
eof
 = 1;

152 
p
->
up°ªam_eof
 = 1;

153 
p
->
ªad
 = 1;

155 i‡(
p
->
up°ªam
->
ªad
->
kq_î∫o
) {

156 
p
->
up°ªam
->
ªad
->
îr‹
 = 1;

157 
p
->
up°ªam_îr‹
 = 1;

158 
p
->
up°ªam_eof
 = 0;

160 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
,

161 
p
->
up°ªam
->
ªad
->
kq_î∫o
,

170 i‡(
p
->
‰ì_øw_bufs
) {

174 
chaö
 = 
p
->
‰ì_øw_bufs
;

175 i‡(
p
->
sögÀ_buf
) {

176 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

177 
chaö
->
√xt
 = 
NULL
;

179 
p
->
‰ì_øw_bufs
 = 
NULL
;

182 } i‡(
p
->
Æloˇãd
 <Ö->
bufs
.
num
) {

186 
b
 = 
	`ngx_¸óã_ãmp_buf
(
p
->
poﬁ
,Ö->
bufs
.
size
);

187 i‡(
b
 =
NULL
) {

188  
NGX_ABORT
;

191 
p
->
Æloˇãd
++;

193 
chaö
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

194 i‡(
chaö
 =
NULL
) {

195  
NGX_ABORT
;

198 
chaö
->
buf
 = 
b
;

199 
chaö
->
√xt
 = 
NULL
;

201 } i‡(!
p
->
ˇchóbÀ


202 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x


203 && 
p
->
down°ªam
->
wrôe
->
ªady


204 && !
p
->
down°ªam
->
wrôe
->
dñayed
)

211 
p
->
up°ªam_blocked
 = 1;

213 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

218 } i‡(
p
->
ˇchóbÀ


219 || 
p
->
ãmp_fûe
->
off£t
 <Ö->
max_ãmp_fûe_size
)

227 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

229 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

230 "pùêãm∞off£t: %O", 
p
->
ãmp_fûe
->
off£t
);

232 i‡(
rc
 =
NGX_BUSY
) {

236 i‡(
rc
 =
NGX_AGAIN
) {

237 i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT


238 && 
p
->
up°ªam
->
ªad
->
a˘ive


239 && 
p
->
up°ªam
->
ªad
->
ªady
)

241 i‡(
	`ngx_dñ_evít
(
p
->
up°ªam
->
ªad
, 
NGX_READ_EVENT
, 0)

242 =
NGX_ERROR
)

244  
NGX_ABORT
;

249 i‡(
rc
 !
NGX_OK
) {

250  
rc
;

253 
chaö
 = 
p
->
‰ì_øw_bufs
;

254 i‡(
p
->
sögÀ_buf
) {

255 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

256 
chaö
->
√xt
 = 
NULL
;

258 
p
->
‰ì_øw_bufs
 = 
NULL
;

265 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

271 
n
 = 
p
->
up°ªam
->
	`ªcv_chaö
’->up°ªam, 
chaö
);

273 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

274 "pùêªcv chaö: %z", 
n
);

276 i‡(
p
->
‰ì_øw_bufs
) {

277 
chaö
->
√xt
 = 
p
->
‰ì_øw_bufs
;

279 
p
->
‰ì_øw_bufs
 = 
chaö
;

281 i‡(
n
 =
NGX_ERROR
) {

282 
p
->
up°ªam_îr‹
 = 1;

283  
NGX_ERROR
;

286 i‡(
n
 =
NGX_AGAIN
) {

287 i‡(
p
->
sögÀ_buf
) {

288 
	`ngx_evít_pùe_ªmove_shadow_löks
(
chaö
->
buf
);

294 
p
->
ªad
 = 1;

296 i‡(
n
 == 0) {

297 
p
->
up°ªam_eof
 = 1;

302 
p
->
ªad_Àngth
 +
n
;

303 
˛
 = 
chaö
;

304 
p
->
‰ì_øw_bufs
 = 
NULL
;

306 
˛
 && 
n
 > 0) {

308 
	`ngx_evít_pùe_ªmove_shadow_löks
(
˛
->
buf
);

310 
size
 = 
˛
->
buf
->
íd
 - cl->buf->
œ°
;

312 i‡(
n
 >
size
) {

313 
˛
->
buf
->
œ°
 = cl->buf->
íd
;

315  
˛
->
buf
->
num
 = 
p
->num++;

317 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

318  
NGX_ABORT
;

321 
n
 -
size
;

322 
 
 = 
˛
;

323 
˛
 = cl->
√xt
;

324 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
 
);

327 
˛
->
buf
->
œ°
 +
n
;

328 
n
 = 0;

332 i‡(
˛
) {

333 
 
 = 
˛
;Ün->
√xt
;Ün =Ün->next) { }

335 
 
->
√xt
 = 
p
->
‰ì_øw_bufs
;

336 
p
->
‰ì_øw_bufs
 = 
˛
;

340 #i‡(
NGX_DEBUG
)

342 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

343 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

347 (
˛
->
buf
->
shadow
 ? 1 : 0),

348 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

349 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

350 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

351 
˛
->
buf
->
fûe_pos
,

352 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

355 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

356 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

360 (
˛
->
buf
->
shadow
 ? 1 : 0),

361 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

362 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

363 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

364 
˛
->
buf
->
fûe_pos
,

365 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

368 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

369 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

373 (
˛
->
buf
->
shadow
 ? 1 : 0),

374 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

375 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

376 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

377 
˛
->
buf
->
fûe_pos
,

378 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

381 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

382 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

386 (
˛
->
buf
->
shadow
 ? 1 : 0),

387 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

388 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

389 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

390 
˛
->
buf
->
fûe_pos
,

391 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

394 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

395 "pùêÀngth: %O", 
p
->
Àngth
);

399 i‡(
p
->
‰ì_øw_bufs
 &&Ö->
Àngth
 != -1) {

400 
˛
 = 
p
->
‰ì_øw_bufs
;

402 i‡(
˛
->
buf
->
œ°
 - cl->buf->
pos
 >
p
->
Àngth
) {

404 
p
->
‰ì_øw_bufs
 = 
˛
->
√xt
;

406  
˛
->
buf
->
num
 = 
p
->num++;

408 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

409  
NGX_ABORT
;

412 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

416 i‡(
p
->
Àngth
 == 0) {

417 
p
->
up°ªam_d⁄e
 = 1;

418 
p
->
ªad
 = 1;

421 i‡((
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
Ë&&Ö->
‰ì_øw_bufs
) {

423  
p
->
‰ì_øw_bufs
->
buf
->
num
 =Ö->num++;

425 i‡(
p
->
	`öput_fûãr
’,Ö->
‰ì_øw_bufs
->
buf
Ë=
NGX_ERROR
) {

426  
NGX_ABORT
;

429 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

431 i‡(
p
->
‰ì_bufs
 &&Ö->
buf_to_fûe
 =
NULL
) {

432 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

433 i‡(
˛
->
buf
->
shadow
 =
NULL
) {

434 
	`ngx_p‰ì
(
p
->
poﬁ
, 
˛
->
buf
->
°¨t
);

440 i‡(
p
->
ˇchóbÀ
 &&Ö->
ö
) {

441 i‡(
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
Ë=
NGX_ABORT
) {

442  
NGX_ABORT
;

446  
NGX_OK
;

447 
	}
}

450 
ngx_öt_t


451 
	$ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
)

453 
u_ch¨
 *
¥ev
;

454 
size_t
 
bsize
;

455 
ngx_öt_t
 
rc
;

456 
ngx_uöt_t
 
Êush
, 
Êushed
, 
¥ev_œ°_shadow
;

457 
ngx_chaö_t
 *
out
, **
Œ
, *
˛
, 
fûe
;

458 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

460 
down°ªam
 = 
p
->downstream;

462 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

463 "pùêwrôêdown°ªam: %d", 
down°ªam
->
wrôe
->
ªady
);

465 
Êushed
 = 0;

468 i‡(
p
->
down°ªam_îr‹
) {

469  
	`ngx_evít_pùe_døö_chaös
(
p
);

472 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

476 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

477 
˛
->
buf
->
ªcy˛ed
 = 0;

480 i‡(
p
->
out
) {

481 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

484 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

485 
˛
->
buf
->
ªcy˛ed
 = 0;

488 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
out
);

490 i‡(
rc
 =
NGX_ERROR
) {

491 
p
->
down°ªam_îr‹
 = 1;

492  
	`ngx_evít_pùe_døö_chaös
(
p
);

495 
p
->
out
 = 
NULL
;

498 i‡(
p
->
ö
) {

499 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

502 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

503 
˛
->
buf
->
ªcy˛ed
 = 0;

506 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
ö
);

508 i‡(
rc
 =
NGX_ERROR
) {

509 
p
->
down°ªam_îr‹
 = 1;

510  
	`ngx_evít_pùe_døö_chaös
(
p
);

513 
p
->
ö
 = 
NULL
;

516 i‡(
p
->
ˇchóbÀ
 &&Ö->
buf_to_fûe
) {

518 
fûe
.
buf
 = 
p
->
buf_to_fûe
;

519 
fûe
.
√xt
 = 
NULL
;

521 i‡(
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, &
fûe
)

522 =
NGX_ERROR
)

524  
NGX_ABORT
;

528 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

533 
p
->
down°ªam_d⁄e
 = 1;

537 i‡(
down°ªam
->
d©a
 !
p
->
ouçut_˘x


538 || !
down°ªam
->
wrôe
->
ªady


539 || 
down°ªam
->
wrôe
->
dñayed
)

546 
¥ev
 = 
NULL
;

547 
bsize
 = 0;

549 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

551 i‡(
˛
->
buf
->
ªcy˛ed
) {

552 i‡(
¥ev
 =
˛
->
buf
->
°¨t
) {

556 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

557 
¥ev
 = 
˛
->
buf
->
°¨t
;

561 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

562 "pùêwrôêbusy: %uz", 
bsize
);

564 
out
 = 
NULL
;

566 i‡(
bsize
 >(
size_t
Ë
p
->
busy_size
) {

567 
Êush
 = 1;

568 
Êush
;

571 
Êush
 = 0;

572 
Œ
 = 
NULL
;

573 
¥ev_œ°_shadow
 = 1;

576 i‡(
p
->
out
) {

577 
˛
 = 
p
->
out
;

579 i‡(
˛
->
buf
->
ªcy˛ed
) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
p
->
log
, 0,

584 
p
->
out
 =Ö->out->
√xt
;

586 } i‡(!
p
->
ˇchóbÀ
 &&Ö->
ö
) {

587 
˛
 = 
p
->
ö
;

589 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

591 
˛
->
buf
->
œ°_shadow
,

592 
˛
->
buf
->
pos
,

593 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

595 i‡(
˛
->
buf
->
ªcy˛ed
 && 
¥ev_œ°_shadow
) {

596 i‡(
bsize
 + 
˛
->
buf
->
íd
 - cl->buf->
°¨t
 > 
p
->
busy_size
) {

597 
Êush
 = 1;

601 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

604 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

606 
p
->
ö
 =Ö->ö->
√xt
;

612 
˛
->
√xt
 = 
NULL
;

614 i‡(
out
) {

615 *
Œ
 = 
˛
;

617 
out
 = 
˛
;

619 
Œ
 = &
˛
->
√xt
;

622 
Êush
:

624 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

625 "pùêwrôe: out:%p, f:%d", 
out
, 
Êush
);

627 i‡(
out
 =
NULL
) {

629 i‡(!
Êush
) {

634 i‡(
Êushed
++ > 10) {

635  
NGX_BUSY
;

639 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
, 
out
);

641 
	`ngx_chaö_upd©e_chaös
(
p
->
poﬁ
, &p->
‰ì
, &p->
busy
, &
out
,Ö->
èg
);

643 i‡(
rc
 =
NGX_ERROR
) {

644 
p
->
down°ªam_îr‹
 = 1;

645  
	`ngx_evít_pùe_døö_chaös
(
p
);

648 
˛
 = 
p
->
‰ì
; cl; c»˛->
√xt
) {

650 i‡(
˛
->
buf
->
ãmp_fûe
) {

651 i‡(
p
->
ˇchóbÀ
 || !p->
cy˛ic_ãmp_fûe
) {

657 i‡(
˛
->
buf
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

658 
p
->
ãmp_fûe
->
off£t
 = 0;

666 i‡(
˛
->
buf
->
œ°_shadow
) {

667 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

668  
NGX_ABORT
;

671 
˛
->
buf
->
œ°_shadow
 = 0;

674 
˛
->
buf
->
shadow
 = 
NULL
;

678  
NGX_OK
;

679 
	}
}

682 
ngx_öt_t


683 
	$ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
)

685 
ssize_t
 
size
, 
bsize
, 
n
;

686 
ngx_buf_t
 *
b
;

687 
ngx_uöt_t
 
¥ev_œ°_shadow
;

688 
ngx_chaö_t
 *
˛
, *
é
, *
√xt
, *
out
, **
Œ
, **
œ°_out
, **
œ°_‰ì
, 
Ê
;

690 i‡(
p
->
buf_to_fûe
) {

691 
Ê
.
buf
 = 
p
->
buf_to_fûe
;

692 
Ê
.
√xt
 = 
p
->
ö
;

693 
out
 = &
Ê
;

696 
out
 = 
p
->
ö
;

699 i‡(!
p
->
ˇchóbÀ
) {

701 
size
 = 0;

702 
˛
 = 
out
;

703 
Œ
 = 
NULL
;

704 
¥ev_œ°_shadow
 = 1;

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

707 "pùêoff£t: %O", 
p
->
ãmp_fûe
->
off£t
);

710 
bsize
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

712 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

714 
˛
->
buf
->
œ°_shadow
, cl->buf->
°¨t
,

715 
˛
->
buf
->
pos
, 
bsize
);

717 i‡(
¥ev_œ°_shadow


718 && ((
size
 + 
bsize
 > 
p
->
ãmp_fûe_wrôe_size
)

719 || (
p
->
ãmp_fûe
->
off£t
 + 
size
 + 
bsize


720 > 
p
->
max_ãmp_fûe_size
)))

725 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

727 
size
 +
bsize
;

728 
Œ
 = &
˛
->
√xt
;

729 
˛
 = cl->
√xt
;

731 } 
˛
);

733 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "size: %z", 
size
);

735 i‡(
Œ
 =
NULL
) {

736  
NGX_BUSY
;

739 i‡(
˛
) {

740 
p
->
ö
 = 
˛
;

741 *
Œ
 = 
NULL
;

744 
p
->
ö
 = 
NULL
;

745 
p
->
œ°_ö
 = &p->
ö
;

749 
p
->
ö
 = 
NULL
;

750 
p
->
œ°_ö
 = &p->
ö
;

753 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, 
out
);

755 i‡(
n
 =
NGX_ERROR
) {

756  
NGX_ABORT
;

759 i‡(
p
->
buf_to_fûe
) {

760 
p
->
ãmp_fûe
->
off£t
 =Ö->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

761 
n
 -
p
->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

762 
p
->
buf_to_fûe
 = 
NULL
;

763 
out
 = out->
√xt
;

766 i‡(
n
 > 0) {

769 i‡(
p
->
out
) {

770 
˛
 = 
p
->
out
; cl->
√xt
; cl = cl->next) { }

772 
b
 = 
˛
->
buf
;

774 i‡(
b
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

775 
p
->
ãmp_fûe
->
off£t
 +
n
;

776 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

777 
‰ì
;

780 
œ°_out
 = &
˛
->
√xt
;

783 
œ°_out
 = &
p
->
out
;

786 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

787 i‡(
˛
 =
NULL
) {

788  
NGX_ABORT
;

791 
b
 = 
˛
->
buf
;

793 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

795 
b
->
èg
 = 
p
->tag;

797 
b
->
fûe
 = &
p
->
ãmp_fûe
->file;

798 
b
->
fûe_pos
 = 
p
->
ãmp_fûe
->
off£t
;

799 
p
->
ãmp_fûe
->
off£t
 +
n
;

800 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

802 
b
->
ö_fûe
 = 1;

803 
b
->
ãmp_fûe
 = 1;

805 *
œ°_out
 = 
˛
;

808 
‰ì
:

810 
œ°_‰ì
 = &
p
->
‰ì_øw_bufs
;

811 *
œ°_‰ì
 !
NULL
;

812 
œ°_‰ì
 = &(*œ°_‰ì)->
√xt
)

817 
˛
 = 
out
; cl; c»
√xt
) {

818 
√xt
 = 
˛
->next;

820 
˛
->
√xt
 = 
p
->
‰ì
;

821 
p
->
‰ì
 = 
˛
;

823 
b
 = 
˛
->
buf
;

825 i‡(
b
->
œ°_shadow
) {

827 
é
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

828 i‡(
é
 =
NULL
) {

829  
NGX_ABORT
;

832 
é
->
buf
 = 
b
->
shadow
;

833 
é
->
√xt
 = 
NULL
;

835 *
œ°_‰ì
 = 
é
;

836 
œ°_‰ì
 = &
é
->
√xt
;

838 
b
->
shadow
->
pos
 = b->shadow->
°¨t
;

839 
b
->
shadow
->
œ°
 = b->shadow->
°¨t
;

841 
	`ngx_evít_pùe_ªmove_shadow_löks
(
b
->
shadow
);

845  
NGX_OK
;

846 
	}
}

851 
ngx_öt_t


852 
	$ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

854 
ngx_buf_t
 *
b
;

855 
ngx_chaö_t
 *
˛
;

857 i‡(
buf
->
pos
 =buf->
œ°
) {

858  
NGX_OK
;

861 i‡(
p
->
‰ì
) {

862 
˛
 = 
p
->
‰ì
;

863 
b
 = 
˛
->
buf
;

864 
p
->
‰ì
 = 
˛
->
√xt
;

865 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

868 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

869 i‡(
b
 =
NULL
) {

870  
NGX_ERROR
;

874 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

875 
b
->
shadow
 = 
buf
;

876 
b
->
èg
 = 
p
->tag;

877 
b
->
œ°_shadow
 = 1;

878 
b
->
ªcy˛ed
 = 1;

879 
buf
->
shadow
 = 
b
;

881 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

882 i‡(
˛
 =
NULL
) {

883  
NGX_ERROR
;

886 
˛
->
buf
 = 
b
;

887 
˛
->
√xt
 = 
NULL
;

889 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

891 i‡(
p
->
ö
) {

892 *
p
->
œ°_ö
 = 
˛
;

894 
p
->
ö
 = 
˛
;

896 
p
->
œ°_ö
 = &
˛
->
√xt
;

898 i‡(
p
->
Àngth
 == -1) {

899  
NGX_OK
;

902 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

904  
NGX_OK
;

905 
	}
}

908 
ngx_ölöe
 

909 
	$ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
)

911 
ngx_buf_t
 *
b
, *
√xt
;

913 
b
 = 
buf
->
shadow
;

915 i‡(
b
 =
NULL
) {

919 !
b
->
œ°_shadow
) {

920 
√xt
 = 
b
->
shadow
;

922 
b
->
ãmp‹¨y
 = 0;

923 
b
->
ªcy˛ed
 = 0;

925 
b
->
shadow
 = 
NULL
;

926 
b
 = 
√xt
;

929 
b
->
ãmp‹¨y
 = 0;

930 
b
->
ªcy˛ed
 = 0;

931 
b
->
œ°_shadow
 = 0;

933 
b
->
shadow
 = 
NULL
;

935 
buf
->
shadow
 = 
NULL
;

936 
	}
}

939 
ngx_öt_t


940 
	$ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
)

942 
ngx_chaö_t
 *
˛
;

944 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

945 i‡(
˛
 =
NULL
) {

946  
NGX_ERROR
;

949 i‡(
p
->
buf_to_fûe
 && 
b
->
°¨t
 ==Ö->buf_to_file->start) {

950 
b
->
pos
 = 
p
->
buf_to_fûe
->
œ°
;

951 
b
->
œ°
 = 
p
->
buf_to_fûe
->last;

954 
b
->
pos
 = b->
°¨t
;

955 
b
->
œ°
 = b->
°¨t
;

958 
b
->
shadow
 = 
NULL
;

960 
˛
->
buf
 = 
b
;

962 i‡(
p
->
‰ì_øw_bufs
 =
NULL
) {

963 
p
->
‰ì_øw_bufs
 = 
˛
;

964 
˛
->
√xt
 = 
NULL
;

966  
NGX_OK
;

969 i‡(
p
->
‰ì_øw_bufs
->
buf
->
pos
 =p->‰ì_øw_bufs->buf->
œ°
) {

973 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
;

974 
p
->
‰ì_øw_bufs
 = 
˛
;

976  
NGX_OK
;

981 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
->next;

982 
p
->
‰ì_øw_bufs
->
√xt
 = 
˛
;

984  
NGX_OK
;

985 
	}
}

988 
ngx_öt_t


989 
	$ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
)

991 
ngx_chaö_t
 *
˛
, *
é
;

994 i‡(
p
->
busy
) {

995 
˛
 = 
p
->
busy
;

996 
p
->
busy
 = 
NULL
;

998 } i‡(
p
->
out
) {

999 
˛
 = 
p
->
out
;

1000 
p
->
out
 = 
NULL
;

1002 } i‡(
p
->
ö
) {

1003 
˛
 = 
p
->
ö
;

1004 
p
->
ö
 = 
NULL
;

1007  
NGX_OK
;

1010 
˛
) {

1011 i‡(
˛
->
buf
->
œ°_shadow
) {

1012 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

1013  
NGX_ABORT
;

1016 
˛
->
buf
->
œ°_shadow
 = 0;

1019 
˛
->
buf
->
shadow
 = 
NULL
;

1020 
é
 = 
˛
->
√xt
;

1021 
˛
->
√xt
 = 
p
->
‰ì
;

1022 
p
->
‰ì
 = 
˛
;

1023 
˛
 = 
é
;

1026 
	}
}

	@src/event/ngx_event_pipe.h

8 #i‚de‡
_NGX_EVENT_PIPE_H_INCLUDED_


9 
	#_NGX_EVENT_PIPE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
ngx_evít_pùe_s
 
	tngx_evít_pùe_t
;

19 
	$ngx_öt_t
 (*
	tngx_evít_pùe_öput_fûãr_±
)(
	tngx_evít_pùe_t
 *
	tp
,

20 
	tngx_buf_t
 *
	tbuf
);

21 
	$ngx_öt_t
 (*
	tngx_evít_pùe_ouçut_fûãr_±
)(*
	td©a
,

22 
	tngx_chaö_t
 *
	tchaö
);

25 
	sngx_evít_pùe_s
 {

26 
ngx_c⁄√˘i⁄_t
 *
up°ªam
;

27 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

29 
ngx_chaö_t
 *
‰ì_øw_bufs
;

30 
ngx_chaö_t
 *
ö
;

31 
ngx_chaö_t
 **
œ°_ö
;

33 
ngx_chaö_t
 *
out
;

34 
ngx_chaö_t
 *
‰ì
;

35 
ngx_chaö_t
 *
busy
;

42 
ngx_evít_pùe_öput_fûãr_±
 
öput_fûãr
;

43 *
öput_˘x
;

45 
ngx_evít_pùe_ouçut_fûãr_±
 
ouçut_fûãr
;

46 *
ouçut_˘x
;

48 
ªad
:1;

49 
ˇchóbÀ
:1;

50 
sögÀ_buf
:1;

51 
‰ì_bufs
:1;

52 
up°ªam_d⁄e
:1;

53 
up°ªam_îr‹
:1;

54 
up°ªam_eof
:1;

55 
up°ªam_blocked
:1;

56 
down°ªam_d⁄e
:1;

57 
down°ªam_îr‹
:1;

58 
cy˛ic_ãmp_fûe
:1;

60 
ngx_öt_t
 
Æloˇãd
;

61 
ngx_bufs_t
 
bufs
;

62 
ngx_buf_èg_t
 
èg
;

64 
ssize_t
 
busy_size
;

66 
off_t
 
ªad_Àngth
;

67 
off_t
 
Àngth
;

69 
off_t
 
max_ãmp_fûe_size
;

70 
ssize_t
 
ãmp_fûe_wrôe_size
;

72 
ngx_m£c_t
 
ªad_timeout
;

73 
ngx_m£c_t
 
£nd_timeout
;

74 
ssize_t
 
£nd_low©
;

76 
ngx_poﬁ_t
 *
poﬁ
;

77 
ngx_log_t
 *
log
;

79 
ngx_chaö_t
 *
¥îód_bufs
;

80 
size_t
 
¥îód_size
;

81 
ngx_buf_t
 *
buf_to_fûe
;

83 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

85  
num
;

89 
ngx_öt_t
 
	`ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
,Çgx_öt_à
do_wrôe
);

90 
ngx_öt_t
 
	`ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
);

91 
ngx_öt_t
 
	`ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
);

	@src/event/ngx_event_posted.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_ac˚±_evíts
;

14 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_evíts
;

16 #i‡(
NGX_THREADS
)

17 
ngx_muãx_t
 *
	gngx_po°ed_evíts_muãx
;

22 
	$ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

23 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
)

25 
ngx_evít_t
 *
ev
;

29 
ev
 = (
ngx_evít_t
 *Ë*
po°ed
;

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

32 "po°edÉvíà%p", 
ev
);

34 i‡(
ev
 =
NULL
) {

38 
	`ngx_dñëe_po°ed_evít
(
ev
);

40 
ev
->
	`h™dÀr
(ev);

42 
	}
}

45 #i‡(
NGX_THREADS
Ë&& !(
NGX_WIN32
)

48 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

50 
ngx_öt_t
 
i
;

52 
ngx_uöt_t
 
busy
;

53 
ngx_evít_t
 *
ev
;

55 
busy
 = 1;

57 i‡(
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

61 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;Év;Év =Év->
√xt
) {

62 i‡(*(
ev
->
lock
) == 0) {

63 
busy
 = 0;

68 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

70 i‡(
busy
) {

75 
i
 = 0; i < 
ngx_thªads_n
; i++) {

76 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_FREE
) {

77 
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
);

81 
	}
}

84 
ngx_öt_t


85 
	$ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
)

87 
ngx_evít_t
 *
ev
;

91 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

95 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

96 "po°edÉvíà%p", 
ev
);

98 i‡(
ev
 =
NULL
) {

99  
NGX_OK
;

102 i‡(
	`ngx_åylock
(
ev
->
lock
) == 0) {

104 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

105 "po°edÉvíà%∞i†busy", 
ev
);

107 
ev
 =Év->
√xt
;

111 i‡(
ev
->
lock
 !ev->
own_lock
) {

112 i‡(*(
ev
->
own_lock
)) {

113 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

114 "thêow¿lock o‡thêpo°edÉvíà%∞i†busy", 
ev
);

115 
	`ngx_u∆ock
(
ev
->
lock
);

116 
ev
 =Év->
√xt
;

119 *(
ev
->
own_lock
) = 1;

122 
	`ngx_dñëe_po°ed_evít
(
ev
);

124 
ev
->
locked
 = 1;

126 
ev
->
ªady
 |ev->
po°ed_ªady
;

127 
ev
->
timedout
 |ev->
po°ed_timedout
;

128 
ev
->
≥ndög_eof
 |ev->
po°ed_eof
;

129 #i‡(
NGX_HAVE_KQUEUE
)

130 
ev
->
kq_î∫o
 |ev->
po°ed_î∫o
;

132 i‡(
ev
->
po°ed_avaûabÀ
) {

133 
ev
->
avaûabÀ
 =Év->
po°ed_avaûabÀ
;

136 
ev
->
po°ed_ªady
 = 0;

137 
ev
->
po°ed_timedout
 = 0;

138 
ev
->
po°ed_eof
 = 0;

139 #i‡(
NGX_HAVE_KQUEUE
)

140 
ev
->
po°ed_î∫o
 = 0;

142 
ev
->
po°ed_avaûabÀ
 = 0;

144 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

146 
ev
->
	`h™dÀr
(ev);

148 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

150 i‡(
ev
->
locked
) {

151 
	`ngx_u∆ock
(
ev
->
lock
);

153 i‡(
ev
->
lock
 !ev->
own_lock
) {

154 
	`ngx_u∆ock
(
ev
->
own_lock
);

158 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

159 "po°edÉvíà%∞i†d⁄e", 
ev
);

164 
	}
}

169 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

171 
	}
}

	@src/event/ngx_event_posted.h

8 #i‚de‡
_NGX_EVENT_POSTED_H_INCLUDED_


9 
	#_NGX_EVENT_POSTED_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 #i‡(
NGX_THREADS
)

18 
ngx_muãx_t
 *
ngx_po°ed_evíts_muãx
;

22 
	#ngx_locked_po°_evít
(
ev
, 
queue
) \

24 i‡(
ev
->
¥ev
 =
NULL
) { \

25 
ev
->
√xt
 = (
ngx_evít_t
 *Ë*
queue
; \

26 
ev
->
¥ev
 = (
ngx_evít_t
 **Ë
queue
; \

27 *
queue
 = 
ev
; \

29 i‡(
ev
->
√xt
) { \

30 
ev
->
√xt
->
¥ev
 = &ev->next; \

33 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "postÉvent %p",Év); \

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

37 "upd©êpo°edÉvíà%p", 
ev
); \

38 }

	)

41 
	#ngx_po°_evít
(
ev
, 
queue
) \

43 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
); \

44 
	`ngx_locked_po°_evít
(
ev
, 
queue
); \

45 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

	)

48 
	#ngx_dñëe_po°ed_evít
(
ev
) \

50 *(
ev
->
¥ev
Ëev->
√xt
; \

52 i‡(
ev
->
√xt
) { \

53 
ev
->
√xt
->
¥ev
 =Év->prev; \

56 
ev
->
¥ev
 = 
NULL
; \

57 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

58 "dñëêpo°edÉvíà%p", 
ev
);

	)

62 
ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

63 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
);

64 
ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
);

66 #i‡(
NGX_THREADS
)

67 
ngx_öt_t
 
ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
);

71 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_ac˚±_evíts
;

72 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_evíts
;

	@src/event/ngx_event_timer.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_THREADS
)

14 
ngx_muãx_t
 *
	gngx_evít_timî_muãx
;

18 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
	gngx_evít_timî_rbåì
;

19 
ngx_rbåì_node_t
 
	gngx_evít_timî_£¡öñ
;

27 
ngx_öt_t


28 
	$ngx_evít_timî_öô
(
ngx_log_t
 *
log
)

30 
	`ngx_rbåì_öô
(&
ngx_evít_timî_rbåì
, &
ngx_evít_timî_£¡öñ
,

31 
ngx_rbåì_ö£π_timî_vÆue
);

33 #i‡(
NGX_THREADS
)

35 i‡(
ngx_evít_timî_muãx
) {

36 
ngx_evít_timî_muãx
->
log
 =Üog;

37  
NGX_OK
;

40 
ngx_evít_timî_muãx
 = 
	`ngx_muãx_öô
(
log
, 0);

41 i‡(
ngx_evít_timî_muãx
 =
NULL
) {

42  
NGX_ERROR
;

47  
NGX_OK
;

48 
	}
}

51 
ngx_m£c_t


52 
	$ngx_evít_föd_timî
()

54 
ngx_m£c_öt_t
 
timî
;

55 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

57 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =&
ngx_evít_timî_£¡öñ
) {

58  
NGX_TIMER_INFINITE
;

61 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

63 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

64 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

66 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

68 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

70 
timî
 = (
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
);

72  (
ngx_m£c_t
Ë(
timî
 > 0 ?Åimer : 0);

73 
	}
}

77 
	$ngx_evít_expúe_timîs
()

79 
ngx_evít_t
 *
ev
;

80 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

82 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

86 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

88 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

90 i‡(
roŸ
 =
£¡öñ
) {

94 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

98 i‡((
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
) <= 0) {

99 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

101 #i‡(
NGX_THREADS
)

103 i‡(
ngx_thªaded
 && 
	`ngx_åylock
(
ev
->
lock
) == 0) {

113 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

114 "evíà%∞i†busy i¿expúêtimîs", 
ev
);

119 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

121 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

123 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

125 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

127 #i‡(
NGX_DEBUG
)

128 
ev
->
timî
.
À·
 = 
NULL
;

129 
ev
->
timî
.
right
 = 
NULL
;

130 
ev
->
timî
.
∑ª¡
 = 
NULL
;

133 
ev
->
timî_£t
 = 0;

135 #i‡(
NGX_THREADS
)

136 i‡(
ngx_thªaded
) {

137 
ev
->
po°ed_timedout
 = 1;

139 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

141 
	`ngx_u∆ock
(
ev
->
lock
);

147 
ev
->
timedout
 = 1;

149 
ev
->
	`h™dÀr
(ev);

157 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

158 
	}
}

	@src/event/ngx_event_timer.h

8 #i‚de‡
_NGX_EVENT_TIMER_H_INCLUDED_


9 
	#_NGX_EVENT_TIMER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_TIMER_INFINITE
 (
ngx_m£c_t
Ë-1

	)

19 
	#NGX_TIMER_LAZY_DELAY
 300

	)

22 
ngx_öt_t
 
ngx_evít_timî_öô
(
ngx_log_t
 *
log
);

23 
ngx_m£c_t
 
ngx_evít_föd_timî
();

24 
ngx_evít_expúe_timîs
();

27 #i‡(
NGX_THREADS
)

28 
ngx_muãx_t
 *
ngx_evít_timî_muãx
;

32 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
ngx_evít_timî_rbåì
;

35 
ngx_ölöe
 

36 
	$ngx_evít_dñ_timî
(
ngx_evít_t
 *
ev
)

38 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

40 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

42 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

44 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

46 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

48 #i‡(
NGX_DEBUG
)

49 
ev
->
timî
.
À·
 = 
NULL
;

50 
ev
->
timî
.
right
 = 
NULL
;

51 
ev
->
timî
.
∑ª¡
 = 
NULL
;

54 
ev
->
timî_£t
 = 0;

55 
	}
}

58 
ngx_ölöe
 

59 
	$ngx_evít_add_timî
(
ngx_evít_t
 *
ev
, 
ngx_m£c_t
 
timî
)

61 
ngx_m£c_t
 
key
;

62 
ngx_m£c_öt_t
 
diff
;

64 
key
 = 
ngx_cuºít_m£c
 + 
timî
;

66 i‡(
ev
->
timî_£t
) {

74 
diff
 = (
ngx_m£c_öt_t
Ë(
key
 - 
ev
->
timî
.key);

76 i‡(
	`ngx_abs
(
diff
Ë< 
NGX_TIMER_LAZY_DELAY
) {

77 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

79 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
, key);

83 
	`ngx_dñ_timî
(
ev
);

86 
ev
->
timî
.
key
 = key;

88 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

90 
	`ngx_evít_idít
(
ev
->
d©a
), 
timî
,Év->timî.
key
);

92 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

94 
	`ngx_rbåì_ö£π
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

96 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

98 
ev
->
timî_£t
 = 1;

99 
	}
}

	@src/http/modules/ngx_http_access_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ö_addr_t
 
	mmask
;

15 
ö_addr_t
 
	maddr
;

16 
ngx_uöt_t
 
	mdíy
;

17 } 
	tngx_hâp_ac˚ss_ruÀ_t
;

19 #i‡(
NGX_HAVE_INET6
)

22 
ö6_addr
 
	maddr
;

23 
ö6_addr
 
	mmask
;

24 
ngx_uöt_t
 
	mdíy
;

25 } 
	tngx_hâp_ac˚ss_ruÀ6_t
;

30 
ngx_¨øy_t
 *
	mruÀs
;

31 #i‡(
NGX_HAVE_INET6
)

32 
ngx_¨øy_t
 *
	mruÀs6
;

34 } 
	tngx_hâp_ac˚ss_loc_c⁄f_t
;

37 
ngx_öt_t
 
ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

38 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
ö_addr_t
 
addr
);

40 #i‡(
NGX_HAVE_INET6
)

41 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
u_ch¨
 *
p
);

44 
ngx_öt_t
 
ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
);

45 *
ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

48 *
ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

49 *
∑ª¡
, *
chûd
);

50 
ngx_öt_t
 
ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
);

53 
ngx_comm™d_t
 
	gngx_hâp_ac˚ss_comm™ds
[] = {

55 { 
ngx_°rög
("allow"),

56 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


57 |
NGX_CONF_TAKE1
,

58 
ngx_hâp_ac˚ss_ruÀ
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
NULL
 },

63 { 
ngx_°rög
("deny"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


65 |
NGX_CONF_TAKE1
,

66 
ngx_hâp_ac˚ss_ruÀ
,

67 
NGX_HTTP_LOC_CONF_OFFSET
,

69 
NULL
 },

71 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ_˘x
 = {

77 
NULL
,

78 
ngx_hâp_ac˚ss_öô
,

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
,

87 
ngx_hâp_ac˚ss_mîge_loc_c⁄f


91 
ngx_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_ac˚ss_moduÀ_˘x
,

94 
ngx_hâp_ac˚ss_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

110 
sockaddr_ö
 *
sö
;

111 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
;

112 #i‡(
NGX_HAVE_INET6
)

113 
u_ch¨
 *
p
;

114 
ö_addr_t
 
addr
;

115 
sockaddr_ö6
 *
sö6
;

118 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ac˚ss_moduÀ
);

120 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

122 
AF_INET
:

123 i‡(
Æcf
->
ruÀs
) {

124 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

125  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
sö
->
sö_addr
.
s_addr
);

129 #i‡(
NGX_HAVE_INET6
)

131 
AF_INET6
:

132 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

133 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

135 i‡(
Æcf
->
ruÀs
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

136 
addr
 = 
p
[12] << 24;

137 
addr
 +
p
[13] << 16;

138 
addr
 +
p
[14] << 8;

139 
addr
 +
p
[15];

140  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
	`ht⁄l
(
addr
));

143 i‡(
Æcf
->
ruÀs6
) {

144  
	`ngx_hâp_ac˚ss_öë6
(
r
, 
Æcf
, 
p
);

150  
NGX_DECLINED
;

151 
	}
}

154 
ngx_öt_t


155 
	$ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

156 
ö_addr_t
 
addr
)

158 
ngx_uöt_t
 
i
;

159 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

161 
ruÀ
 = 
Æcf
->
ruÀs
->
ñts
;

162 
i
 = 0; i < 
Æcf
->
ruÀs
->
√…s
; i++) {

164 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

166 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

168 i‡((
addr
 & 
ruÀ
[
i
].
mask
) ==Ñule[i].addr) {

169  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ
[
i
].
díy
);

173  
NGX_DECLINED
;

174 
	}
}

177 #i‡(
NGX_HAVE_INET6
)

179 
ngx_öt_t


180 
	$ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

181 
u_ch¨
 *
p
)

183 
ngx_uöt_t
 
n
;

184 
ngx_uöt_t
 
i
;

185 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

187 
ruÀ6
 = 
Æcf
->
ruÀs6
->
ñts
;

188 
i
 = 0; i < 
Æcf
->
ruÀs6
->
√…s
; i++) {

190 #i‡(
NGX_DEBUG
)

192 
size_t
 
˛
, 
ml
, 
Æ
;

193 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

194 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

195 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

197 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

198 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

199 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

201 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

202 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

206 
n
 = 0;Ç < 16;Ç++) {

207 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

208 
√xt
;

212  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ6
[
i
].
díy
);

214 
√xt
:

218  
NGX_DECLINED
;

219 
	}
}

224 
ngx_öt_t


225 
	$ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
)

227 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

229 i‡(
díy
) {

230 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

232 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

233 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

237  
NGX_HTTP_FORBIDDEN
;

240  
NGX_OK
;

241 
	}
}

245 
	$ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

247 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

249 
ngx_öt_t
 
rc
;

250 
ngx_uöt_t
 
Æl
;

251 
ngx_°r_t
 *
vÆue
;

252 
ngx_cidr_t
 
cidr
;

253 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

254 #i‡(
NGX_HAVE_INET6
)

255 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

258 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

260 
vÆue
 = 
cf
->
¨gs
->
ñts
;

262 
Æl
 = (
vÆue
[1].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "all") == 0);

264 i‡(!
Æl
) {

266 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

268 i‡(
rc
 =
NGX_ERROR
) {

269 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

270 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

271  
NGX_CONF_ERROR
;

274 i‡(
rc
 =
NGX_DONE
) {

275 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

276 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

280 
cidr
.
Ámûy
) {

282 #i‡(
NGX_HAVE_INET6
)

283 
AF_INET6
:

286 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

287 
Æcf
->
ruÀs6
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

288 (
ngx_hâp_ac˚ss_ruÀ6_t
));

289 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
ruÀ6
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs6
);

295 i‡(
ruÀ6
 =
NULL
) {

296  
NGX_CONF_ERROR
;

299 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

300 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

301 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

303 i‡(!
Æl
) {

312 i‡(
Æcf
->
ruÀs
 =
NULL
) {

313 
Æcf
->
ruÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

314 (
ngx_hâp_ac˚ss_ruÀ_t
));

315 i‡(
Æcf
->
ruÀs
 =
NULL
) {

316  
NGX_CONF_ERROR
;

320 
ruÀ
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs
);

321 i‡(
ruÀ
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

326 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

327 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

330  
NGX_CONF_OK
;

331 
	}
}

335 
	$ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

337 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
;

339 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ac˚ss_loc_c⁄f_t
));

340 i‡(
c⁄f
 =
NULL
) {

341  
NULL
;

344  
c⁄f
;

345 
	}
}

349 
	$ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

351 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

352 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

354 #i‡(
NGX_HAVE_INET6
)

356 i‡(
c⁄f
->
ruÀs
 =
NULL
 && c⁄f->
ruÀs6
 == NULL) {

357 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

358 
c⁄f
->
ruÀs6
 = 
¥ev
->rules6;

363 i‡(
c⁄f
->
ruÀs
 =
NULL
) {

364 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

369  
NGX_CONF_OK
;

370 
	}
}

373 
ngx_öt_t


374 
	$ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
)

376 
ngx_hâp_h™dÀr_±
 *
h
;

377 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

379 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

381 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

382 i‡(
h
 =
NULL
) {

383  
NGX_ERROR
;

386 *
h
 = 
ngx_hâp_ac˚ss_h™dÀr
;

388  
NGX_OK
;

389 
	}
}

	@src/http/modules/ngx_http_addition_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mbef‹e_body
;

15 
ngx_°r_t
 
	ma·î_body
;

17 
ngx_hash_t
 
	mty≥s
;

18 
ngx_¨øy_t
 *
	mty≥s_keys
;

19 } 
	tngx_hâp_addôi⁄_c⁄f_t
;

23 
ngx_uöt_t
 
	mbef‹e_body_£¡
;

24 } 
	tngx_hâp_addôi⁄_˘x_t
;

27 *
ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

29 *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_addôi⁄_comm™ds
[] = {

35 { 
ngx_°rög
("add_before_body"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

37 
ngx_c⁄f_£t_°r_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
bef‹e_body
),

40 
NULL
 },

42 { 
ngx_°rög
("add_after_body"),

43 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

44 
ngx_c⁄f_£t_°r_¶Ÿ
,

45 
NGX_HTTP_LOC_CONF_OFFSET
,

46 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
a·î_body
),

47 
NULL
 },

49 { 
ngx_°rög
("addition_types"),

50 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

51 
ngx_hâp_ty≥s_¶Ÿ
,

52 
NGX_HTTP_LOC_CONF_OFFSET
,

53 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
ty≥s_keys
),

54 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

56 
ngx_nuŒ_comm™d


60 
ngx_hâp_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ_˘x
 = {

61 
NULL
,

62 
ngx_hâp_addôi⁄_fûãr_öô
,

64 
NULL
,

65 
NULL
,

67 
NULL
,

68 
NULL
,

70 
ngx_hâp_addôi⁄_¸óã_c⁄f
,

71 
ngx_hâp_addôi⁄_mîge_c⁄f


75 
ngx_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ
 = {

76 
NGX_MODULE_V1
,

77 &
ngx_hâp_addôi⁄_fûãr_moduÀ_˘x
,

78 
ngx_hâp_addôi⁄_comm™ds
,

79 
NGX_HTTP_MODULE
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NGX_MODULE_V1_PADDING


91 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

92 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_addôi⁄_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

99 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

101 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK
 ||Ñ !r->
maö
) {

102  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

105 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

107 i‡(
c⁄f
->
bef‹e_body
.
Àn
 =0 && c⁄f->
a·î_body
.len == 0) {

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

111 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
) {

112  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

115 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_addôi⁄_˘x_t
));

116 i‡(
˘x
 =
NULL
) {

117  
NGX_ERROR
;

120 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

122 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

123 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

125  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

126 
	}
}

129 
ngx_öt_t


130 
	$ngx_hâp_addôi⁄_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

132 
ngx_öt_t
 
rc
;

133 
ngx_uöt_t
 
œ°
;

134 
ngx_chaö_t
 *
˛
;

135 
ngx_hâp_ªque°_t
 *
§
;

136 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

137 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

139 i‡(
ö
 =
NULL
 || 
r
->
hódî_⁄ly
) {

140  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

143 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

145 i‡(
˘x
 =
NULL
) {

146  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

149 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

151 i‡(!
˘x
->
bef‹e_body_£¡
) {

152 
˘x
->
bef‹e_body_£¡
 = 1;

154 i‡(
c⁄f
->
bef‹e_body
.
Àn
) {

155 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
bef‹e_body
, 
NULL
, &
§
, NULL, 0)

156 !
NGX_OK
)

158  
NGX_ERROR
;

163 i‡(
c⁄f
->
a·î_body
.
Àn
 == 0) {

164 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

165  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

168 
œ°
 = 0;

170 
˛
 = 
ö
; cl; c»˛->
√xt
) {

171 i‡(
˛
->
buf
->
œ°_buf
) {

172 
˛
->
buf
->
œ°_buf
 = 0;

173 
˛
->
buf
->
sync
 = 1;

174 
œ°
 = 1;

178 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

180 i‡(
rc
 =
NGX_ERROR
 || !
œ°
 || 
c⁄f
->
a·î_body
.
Àn
 == 0) {

181  
rc
;

184 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
a·î_body
, 
NULL
, &
§
, NULL, 0)

185 !
NGX_OK
)

187  
NGX_ERROR
;

190 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

192  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

193 
	}
}

196 
ngx_öt_t


197 
	$ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

199 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

200 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_addôi⁄_hódî_fûãr
;

202 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

203 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_addôi⁄_body_fûãr
;

205  
NGX_OK
;

206 
	}
}

210 
	$ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

212 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

214 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_addôi⁄_c⁄f_t
));

215 i‡(
c⁄f
 =
NULL
) {

216  
NULL
;

228  
c⁄f
;

229 
	}
}

233 
	$ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

235 
ngx_hâp_addôi⁄_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

236 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
 = 
chûd
;

238 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
bef‹e_body
, 
¥ev
->before_body, "");

239 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
a·î_body
, 
¥ev
->after_body, "");

241 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

242 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

243 
ngx_hâp_html_deÁu…_ty≥s
)

244 !
NGX_OK
)

246  
NGX_CONF_ERROR
;

249  
NGX_CONF_OK
;

250 
	}
}

	@src/http/modules/ngx_http_auth_basic_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_¸y±.h
>

14 
	#NGX_HTTP_AUTH_BUF_SIZE
 2048

	)

18 
ngx_°r_t
 
	m∑sswd
;

19 } 
	tngx_hâp_auth_basic_˘x_t
;

23 
ngx_hâp_com∂ex_vÆue_t
 *
	mªÆm
;

24 
ngx_hâp_com∂ex_vÆue_t
 
	mu£r_fûe
;

25 } 
	tngx_hâp_auth_basic_loc_c⁄f_t
;

28 
ngx_öt_t
 
ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
);

31 
ngx_öt_t
 
ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_°r_t
 *
ªÆm
);

33 
ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
);

34 *
ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

37 
ngx_öt_t
 
ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
);

38 *
ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_auth_basic_comm™ds
[] = {

44 { 
ngx_°rög
("auth_basic"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


46 |
NGX_CONF_TAKE1
,

47 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

48 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
ªÆm
),

50 
NULL
 },

52 { 
ngx_°rög
("auth_basic_user_file"),

53 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


54 |
NGX_CONF_TAKE1
,

55 
ngx_hâp_auth_basic_u£r_fûe
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
u£r_fûe
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ_˘x
 = {

65 
NULL
,

66 
ngx_hâp_auth_basic_öô
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_auth_basic_¸óã_loc_c⁄f
,

75 
ngx_hâp_auth_basic_mîge_loc_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_auth_basic_moduÀ_˘x
,

82 
ngx_hâp_auth_basic_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_öt_t


96 
	$ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

98 
off_t
 
off£t
;

99 
ssize_t
 
n
;

100 
ngx_fd_t
 
fd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_îr_t
 
îr
;

103 
ngx_°r_t
 
pwd
, 
ªÆm
, 
u£r_fûe
;

104 
ngx_uöt_t
 
i
, 
Àvñ
, 
logö
, 
À·
, 
∑sswd
;

105 
ngx_fûe_t
 
fûe
;

106 
ngx_hâp_auth_basic_˘x_t
 *
˘x
;

107 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
;

108 
u_ch¨
 
buf
[
NGX_HTTP_AUTH_BUF_SIZE
];

110 
sw_logö
,

111 
sw_∑sswd
,

112 
sw_skù


113 } 
°©e
;

115 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

117 i‡(
Æcf
->
ªÆm
 =
NULL
 ||álcf->
u£r_fûe
.
vÆue
.
d©a
 == NULL) {

118  
NGX_DECLINED
;

121 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
Æcf
->
ªÆm
, &ªÆmË!
NGX_OK
) {

122  
NGX_ERROR
;

125 i‡(
ªÆm
.
Àn
 =3 && 
	`ngx_°∫cmp
‘ólm.
d©a
, "off", 3) == 0) {

126  
NGX_DECLINED
;

129 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

131 i‡(
˘x
) {

132  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
˘x
, &˘x->
∑sswd
,

133 &
ªÆm
);

136 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

138 i‡(
rc
 =
NGX_DECLINED
) {

140 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

146 i‡(
rc
 =
NGX_ERROR
) {

147  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Æcf
->
u£r_fûe
, &u£r_fûeË!
NGX_OK
) {

151  
NGX_ERROR
;

154 
fd
 = 
	`ngx_›í_fûe
(
u£r_fûe
.
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

156 i‡(
fd
 =
NGX_INVALID_FILE
) {

157 
îr
 = 
ngx_î∫o
;

159 i‡(
îr
 =
NGX_ENOENT
) {

160 
Àvñ
 = 
NGX_LOG_ERR
;

161 
rc
 = 
NGX_HTTP_FORBIDDEN
;

164 
Àvñ
 = 
NGX_LOG_CRIT
;

165 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

168 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

169 
ngx_›í_fûe_n
 " \"%s\" faûed", 
u£r_fûe
.
d©a
);

171  
rc
;

174 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

176 
fûe
.
fd
 = fd;

177 
fûe
.
«me
 = 
u£r_fûe
;

178 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

180 
°©e
 = 
sw_logö
;

181 
∑sswd
 = 0;

182 
logö
 = 0;

183 
À·
 = 0;

184 
off£t
 = 0;

187 
i
 = 
À·
;

189 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
 + 
À·
, 
NGX_HTTP_AUTH_BUF_SIZE
 -Üeft,

190 
off£t
);

192 i‡(
n
 =
NGX_ERROR
) {

193 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

194  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

197 i‡(
n
 == 0) {

201 
i
 = 
À·
; i <Üe· + 
n
; i++) {

202 
°©e
) {

204 
sw_logö
:

205 i‡(
logö
 == 0) {

207 i‡(
buf
[
i
] ='#' || buf[i] =
CR
) {

208 
°©e
 = 
sw_skù
;

212 i‡(
buf
[
i
] =
LF
) {

217 i‡(
buf
[
i
] !
r
->
hódîs_ö
.
u£r
.
d©a
[
logö
]) {

218 
°©e
 = 
sw_skù
;

222 i‡(
logö
 =
r
->
hódîs_ö
.
u£r
.
Àn
) {

223 
°©e
 = 
sw_∑sswd
;

224 
∑sswd
 = 
i
 + 1;

227 
logö
++;

231 
sw_∑sswd
:

232 i‡(
buf
[
i
] =
LF
 || buf[i] =
CR
 || buf[i] == ':') {

233 
buf
[
i
] = '\0';

235 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

237 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

238 
pwd
.
d©a
 = &
buf
[
∑sswd
];

240  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
,

241 &
ªÆm
);

246 
sw_skù
:

247 i‡(
buf
[
i
] =
LF
) {

248 
°©e
 = 
sw_logö
;

249 
logö
 = 0;

256 i‡(
°©e
 =
sw_∑sswd
) {

257 
À·
 =Üe· + 
n
 - 
∑sswd
;

258 
	`ngx_memmove
(
buf
, &buf[
∑sswd
], 
À·
);

259 
∑sswd
 = 0;

262 
À·
 = 0;

265 
off£t
 +
n
;

268 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

270 i‡(
°©e
 =
sw_∑sswd
) {

271 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

272 
pwd
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Öwd.
Àn
 + 1);

273 i‡(
pwd
.
d©a
 =
NULL
) {

274  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

277 
	`ngx_˝y°∫
(
pwd
.
d©a
, &
buf
[
∑sswd
],Öwd.
Àn
 + 1);

279  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
, &
ªÆm
);

282 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

284 &
r
->
hódîs_ö
.
u£r
, &
u£r_fûe
);

286  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

287 
	}
}

290 
ngx_öt_t


291 
	$ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

292 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
)

294 
ngx_öt_t
 
rc
;

295 
u_ch¨
 *
í¸y±ed
;

297 
rc
 = 
	`ngx_¸y±
(
r
->
poﬁ
,Ñ->
hódîs_ö
.
∑sswd
.
d©a
,Öasswd->data,

298 &
í¸y±ed
);

300 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

302 
rc
, &
r
->
hódîs_ö
.
u£r
, 
∑sswd
->
d©a
);

304 i‡(
rc
 =
NGX_OK
) {

305 i‡(
	`ngx_°rcmp
(
í¸y±ed
, 
∑sswd
->
d©a
) == 0) {

306  
NGX_OK
;

309 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

310 "í¸y±ed: \"%s\"", 
í¸y±ed
);

312 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

314 &
r
->
hódîs_ö
.
u£r
);

316  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, 
ªÆm
);

319 i‡(
rc
 =
NGX_ERROR
) {

320  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

325 i‡(
˘x
 =
NULL
) {

326 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_auth_basic_˘x_t
));

327 i‡(
˘x
 =
NULL
) {

328  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

331 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_basic_moduÀ
);

333 
˘x
->
∑sswd
.
Àn
 =Öasswd->len;

334 
∑sswd
->
Àn
++;

336 
˘x
->
∑sswd
.
d©a
 = 
	`ngx_p°rdup
(
r
->
poﬁ
,Öasswd);

337 i‡(
˘x
->
∑sswd
.
d©a
 =
NULL
) {

338  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

345  
rc
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ªÆm
)

352 
size_t
 
Àn
;

353 
u_ch¨
 *
basic
, *
p
;

355 
r
->
hódîs_out
.
www_authítiˇã
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

356 i‡(
r
->
hódîs_out
.
www_authítiˇã
 =
NULL
) {

357  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

360 
Àn
 = ("Basi¯ªÆm=\"\""Ë- 1 + 
ªÆm
->len;

362 
basic
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

363 i‡(
basic
 =
NULL
) {

364  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

367 
p
 = 
	`ngx_˝ymem
(
basic
, "BasicÑealm=\"", ("BasicÑealm=\"") - 1);

368 
p
 = 
	`ngx_˝ymem
’, 
ªÆm
->
d©a
,Ñólm->
Àn
);

369 *
p
 = '"';

371 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 1;

372 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
www_authítiˇã
->
key
, "WWW-Authenticate");

373 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
d©a
 = 
basic
;

374 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
Àn
 =Üen;

376  
NGX_HTTP_UNAUTHORIZED
;

377 
	}
}

380 
	$ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
)

382 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
ngx_î∫o
,

384 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
.
d©a
);

386 
	}
}

390 
	$ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

392 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
;

394 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_basic_loc_c⁄f_t
));

395 i‡(
c⁄f
 =
NULL
) {

396  
NULL
;

399  
c⁄f
;

400 
	}
}

404 
	$ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

406 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

407 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

409 i‡(
c⁄f
->
ªÆm
 =
NULL
) {

410 
c⁄f
->
ªÆm
 = 
¥ev
->realm;

413 i‡(
c⁄f
->
u£r_fûe
.
vÆue
.
d©a
 =
NULL
) {

414 
c⁄f
->
u£r_fûe
 = 
¥ev
->user_file;

417  
NGX_CONF_OK
;

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
)

424 
ngx_hâp_h™dÀr_±
 *
h
;

425 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

427 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

429 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

430 i‡(
h
 =
NULL
) {

431  
NGX_ERROR
;

434 *
h
 = 
ngx_hâp_auth_basic_h™dÀr
;

436  
NGX_OK
;

437 
	}
}

441 
	$ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

443 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

445 
ngx_°r_t
 *
vÆue
;

446 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

448 i‡(
Æcf
->
u£r_fûe
.
vÆue
.
d©a
) {

452 
vÆue
 = 
cf
->
¨gs
->
ñts
;

454 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

456 
ccv
.
cf
 = cf;

457 
ccv
.
vÆue
 = &value[1];

458 
ccv
.
com∂ex_vÆue
 = &
Æcf
->
u£r_fûe
;

459 
ccv
.
zîo
 = 1;

460 
ccv
.
c⁄f_¥efix
 = 1;

462 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

463  
NGX_CONF_ERROR
;

466  
NGX_CONF_OK
;

467 
	}
}

	@src/http/modules/ngx_http_autoindex_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

16 
ngx_buf_t
 *
	mbuf
;

17 
size_t
 
	msize
;

18 
ngx_poﬁ_t
 *
	mpoﬁ
;

19 
size_t
 
	mÆloc_size
;

20 
ngx_chaö_t
 **
	mœ°_out
;

21 } 
	tngx_hâp_autoödex_˘x_t
;

27 
ngx_°r_t
 
	m«me
;

28 
size_t
 
	mutf_Àn
;

29 
size_t
 
	mesˇ≥
;

30 
size_t
 
	mesˇ≥_html
;

32 
	mdú
:1;

34 
time_t
 
	mmtime
;

35 
off_t
 
	msize
;

36 } 
	tngx_hâp_autoödex_íåy_t
;

40 
ngx_Êag_t
 
	míabÀ
;

41 
ngx_Êag_t
 
	mloˇ…ime
;

42 
ngx_Êag_t
 
	mexa˘_size
;

43 } 
	tngx_hâp_autoödex_loc_c⁄f_t
;

46 
	#NGX_HTTP_AUTOINDEX_PREALLOCATE
 50

	)

48 
	#NGX_HTTP_AUTOINDEX_NAME_LEN
 50

	)

51 
ngx_libc_cde˛
 
ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
,

52 c⁄° *
two
);

53 
ngx_öt_t
 
ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

55 
ngx_öt_t
 
ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
);

56 *
ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

58 *
∑ª¡
, *
chûd
);

61 
ngx_comm™d_t
 
	gngx_hâp_autoödex_comm™ds
[] = {

63 { 
ngx_°rög
("autoindex"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
íabÀ
),

68 
NULL
 },

70 { 
ngx_°rög
("autoindex_localtime"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
loˇ…ime
),

75 
NULL
 },

77 { 
ngx_°rög
("autoindex_exact_size"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

79 
ngx_c⁄f_£t_Êag_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
exa˘_size
),

82 
NULL
 },

84 
ngx_nuŒ_comm™d


88 
ngx_hâp_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ_˘x
 = {

89 
NULL
,

90 
ngx_hâp_autoödex_öô
,

92 
NULL
,

93 
NULL
,

95 
NULL
,

96 
NULL
,

98 
ngx_hâp_autoödex_¸óã_loc_c⁄f
,

99 
ngx_hâp_autoödex_mîge_loc_c⁄f


103 
ngx_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_hâp_autoödex_moduÀ_˘x
,

106 
ngx_hâp_autoödex_comm™ds
,

107 
NGX_HTTP_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


119 
u_ch¨
 
	gtôÀ
[] =

120 "<html>" 
CRLF


125 
u_ch¨
 
	ghódî
[] =

126 "</tôÀ></hód>" 
CRLF


127 "<body bgcﬁ‹=\"whôe\">" 
CRLF


131 
u_ch¨
 
	gèû
[] =

132 "</body>" 
CRLF


133 "</html>" 
CRLF


137 
ngx_öt_t


138 
	$ngx_hâp_autoödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

140 
u_ch¨
 *
œ°
, *
fûíame
, 
sˇÀ
;

141 
off_t
 
Àngth
;

142 
size_t
 
Àn
, 
ch¨_Àn
, 
esˇ≥_html
, 
Æloˇãd
, 
roŸ
;

143 
ngx_tm_t
 
tm
;

144 
ngx_îr_t
 
îr
;

145 
ngx_buf_t
 *
b
;

146 
ngx_öt_t
 
rc
, 
size
;

147 
ngx_°r_t
 
∑th
;

148 
ngx_dú_t
 
dú
;

149 
ngx_uöt_t
 
i
, 
Àvñ
, 
utf8
;

150 
ngx_poﬁ_t
 *
poﬁ
;

151 
ngx_time_t
 *
ç
;

152 
ngx_chaö_t
 
out
;

153 
ngx_¨øy_t
 
íåõs
;

154 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

155 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

157 *
m⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

160 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

161  
NGX_DECLINED
;

164 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

165  
NGX_DECLINED
;

168 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

170 i‡(!
Æcf
->
íabÀ
) {

171  
NGX_DECLINED
;

176 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
,

177 
NGX_HTTP_AUTOINDEX_PREALLOCATE
);

178 i‡(
œ°
 =
NULL
) {

179  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

182 
Æloˇãd
 = 
∑th
.
Àn
;

183 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

184 i‡(
∑th
.
Àn
 > 1) {

185 
∑th
.
Àn
--;

187 
∑th
.
d©a
[∑th.
Àn
] = '\0';

189 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

190 "hâ∞autoödex: \"%s\"", 
∑th
.
d©a
);

192 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

193 
îr
 = 
ngx_î∫o
;

195 i‡(
îr
 =
NGX_ENOENT


196 || 
îr
 =
NGX_ENOTDIR


197 || 
îr
 =
NGX_ENAMETOOLONG
)

199 
Àvñ
 = 
NGX_LOG_ERR
;

200 
rc
 = 
NGX_HTTP_NOT_FOUND
;

202 } i‡(
îr
 =
NGX_EACCES
) {

203 
Àvñ
 = 
NGX_LOG_ERR
;

204 
rc
 = 
NGX_HTTP_FORBIDDEN
;

207 
Àvñ
 = 
NGX_LOG_CRIT
;

208 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

212 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

214  
rc
;

217 #i‡(
NGX_SUPPRESS_WARN
)

220 
	`ngx_memzîo
(&
íåõs
, (
ngx_¨øy_t
));

225 
poﬁ
 = 
r
->pool;

227 i‡(
	`ngx_¨øy_öô
(&
íåõs
, 
poﬁ
, 40, (
ngx_hâp_autoödex_íåy_t
))

228 !
NGX_OK
)

230  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

233 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

234 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

235 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

237 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

239 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

240 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

241 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

242 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

245  
rc
;

248 
fûíame
 = 
∑th
.
d©a
;

249 
fûíame
[
∑th
.
Àn
] = '/';

251 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
 == 5

252 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
ch¨£t
.
d©a
, (
u_ch¨
 *) "utf-8", 5)

255 
utf8
 = 1;

258 
utf8
 = 0;

262 
	`ngx_£t_î∫o
(0);

264 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

265 
îr
 = 
ngx_î∫o
;

267 i‡(
îr
 !
NGX_ENOMOREFILES
) {

268 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

269 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

270  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

277 "hâ∞autoödex fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

279 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

281 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

285 i‡(!
dú
.
vÆid_öfo
) {

289 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

290 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

291 + 
NGX_HTTP_AUTOINDEX_PREALLOCATE
;

293 
fûíame
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Æloˇãd
);

294 i‡(
fûíame
 =
NULL
) {

295  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

298 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

299 *
œ°
++ = '/';

302 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

304 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

305 
îr
 = 
ngx_î∫o
;

307 i‡(
îr
 !
NGX_ENOENT
) {

308 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

309 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

311 i‡(
îr
 =
NGX_EACCES
) {

315  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

318 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

319 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

320 
ngx_de_lök_öfo_n
 " \"%s\" failed",

321 
fûíame
);

322  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

327 
íåy
 = 
	`ngx_¨øy_push
(&
íåõs
);

328 i‡(
íåy
 =
NULL
) {

329  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

332 
íåy
->
«me
.
Àn
 =Üen;

334 
íåy
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 1);

335 i‡(
íåy
->
«me
.
d©a
 =
NULL
) {

336  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

339 
	`ngx_˝y°∫
(
íåy
->
«me
.
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

341 
íåy
->
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
	`ngx_de_«me
(&
dú
), 
Àn
,

342 
NGX_ESCAPE_URI_COMPONENT
);

344 
íåy
->
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry->
«me
.
d©a
,

345 
íåy
->
«me
.
Àn
);

347 i‡(
utf8
) {

348 
íåy
->
utf_Àn
 = 
	`ngx_utf8_Àngth
”¡ry->
«me
.
d©a
,É¡ry->«me.
Àn
);

350 
íåy
->
utf_Àn
 = 
Àn
;

353 
íåy
->
dú
 = 
	`ngx_de_is_dú
(&dir);

354 
íåy
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

355 
íåy
->
size
 = 
	`ngx_de_size
(&
dú
);

358 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

359 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

360 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

363 
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

365 
Àn
 = (
tôÀ
) - 1

366 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


367 + (
hódî
) - 1

368 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


370 + ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1

372 + (
èû
) - 1;

374 
íåy
 = 
íåõs
.
ñts
;

375 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

376 
Àn
 += ("<a href=\"") - 1

377 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


380 + 
íåy
[
i
].
«me
.
Àn
 -É¡ry[i].
utf_Àn


381 + 
íåy
[
i
].
esˇ≥_html


382 + 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + ("&gt;") - 2

389 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

390 i‡(
b
 =
NULL
) {

391  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

394 i‡(
íåõs
.
√…s
 > 1) {

395 
	`ngx_qs‹t
(
íåy
, (
size_t
Ë
íåõs
.
√…s
,

396 (
ngx_hâp_autoödex_íåy_t
),

397 
ngx_hâp_autoödex_cmp_íåõs
);

400 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
tôÀ
, (title) - 1);

402 i‡(
esˇ≥_html
) {

403 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

404 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

405 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

408 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

409 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

410 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

413 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</h1>", ("</h1>") - 1);

415 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
,

416 ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1);

418 
ç
 = 
	`ngx_timeofday
();

420 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

421 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "<a href=\"", ("<a href=\"") - 1);

423 i‡(
íåy
[
i
].
esˇ≥
) {

424 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
íåy
[
i
].
«me
.
d©a
,É¡ry[i].«me.
Àn
,

425 
NGX_ESCAPE_URI_COMPONENT
);

427 
b
->
œ°
 +
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥
;

430 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

431 
íåy
[
i
].
«me
.
Àn
);

434 i‡(
íåy
[
i
].
dú
) {

435 *
b
->
œ°
++ = '/';

438 *
b
->
œ°
++ = '"';

439 *
b
->
œ°
++ = '>';

441 
Àn
 = 
íåy
[
i
].
utf_Àn
;

443 i‡(
íåy
[
i
].
«me
.
Àn
 !=Üen) {

444 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

445 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3 + 1;

448 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1;

451 
œ°
 = 
b
->last;

452 
b
->
œ°
 = 
	`ngx_utf8_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

453 
ch¨_Àn
, 
íåy
[
i
].
«me
.
Àn
 + 1);

455 i‡(
íåy
[
i
].
esˇ≥_html
) {

456 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
÷a°, 
íåy
[
i
].
«me
.
d©a
,

457 
b
->
œ°
 -Üast);

460 
œ°
 = 
b
->last;

463 i‡(
íåy
[
i
].
esˇ≥_html
) {

464 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

465 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3;

468 
ch¨_Àn
 = 
Àn
;

471 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->last,

472 
íåy
[
i
].
«me
.
d©a
, 
ch¨_Àn
);

473 
œ°
 = 
b
->last;

476 
b
->
œ°
 = 
	`ngx_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

477 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1);

478 
œ°
 = 
b
->last - 3;

482 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

483 
b
->
œ°
 = 
	`ngx_˝ymem
(last, "..&gt;</a>", ("..&gt;</a>") - 1);

486 i‡(
íåy
[
i
].
dú
 && 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

487 *
b
->
œ°
++ = '/';

488 
Àn
++;

491 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</a>", ("</a>") - 1);

493 i‡(
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

494 
	`ngx_mem£t
(
b
->
œ°
, ' ', 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
);

495 
b
->
œ°
 +
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
;

499 *
b
->
œ°
++ = ' ';

501 
	`ngx_gmtime
(
íåy
[
i
].
mtime
 + 
ç
->
gmtoff
 * 60 * 
Æcf
->
loˇ…ime
, &
tm
);

503 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%02d-%s-%d %02d:%02d ",

504 
tm
.
ngx_tm_mday
,

505 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

506 
tm
.
ngx_tm_yór
,

507 
tm
.
ngx_tm_hour
,

508 
tm
.
ngx_tm_mö
);

510 i‡(
Æcf
->
exa˘_size
) {

511 i‡(
íåy
[
i
].
dú
) {

512 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

515 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%19O", 
íåy
[
i
].
size
);

519 i‡(
íåy
[
i
].
dú
) {

520 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

524 
Àngth
 = 
íåy
[
i
].
size
;

526 i‡(
Àngth
 > 1024 * 1024 * 1024 - 1) {

527 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024 * 1024));

528 i‡((
Àngth
 % (1024 * 1024 * 1024))

531 
size
++;

533 
sˇÀ
 = 'G';

535 } i‡(
Àngth
 > 1024 * 1024 - 1) {

536 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024));

537 i‡((
Àngth
 % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {

538 
size
++;

540 
sˇÀ
 = 'M';

542 } i‡(
Àngth
 > 9999) {

543 
size
 = (
ngx_öt_t
Ë(
Àngth
 / 1024);

544 i‡(
Àngth
 % 1024 > 511) {

545 
size
++;

547 
sˇÀ
 = 'K';

550 
size
 = (
ngx_öt_t
Ë
Àngth
;

551 
sˇÀ
 = '\0';

554 i‡(
sˇÀ
) {

555 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%6i%c", 
size
, 
sˇÀ
);

558 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %6i", 
size
);

563 *
b
->
œ°
++ = 
CR
;

564 *
b
->
œ°
++ = 
LF
;

569 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</pre><hr>", ("</pre><hr>") - 1);

571 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

573 i‡(
r
 =r->
maö
) {

574 
b
->
œ°_buf
 = 1;

577 
b
->
œ°_ö_chaö
 = 1;

579 
out
.
buf
 = 
b
;

580 
out
.
√xt
 = 
NULL
;

582  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

583 
	}
}

586 
ngx_libc_cde˛


587 
	$ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
, c⁄° *
two
)

589 
ngx_hâp_autoödex_íåy_t
 *
fú°
 = (ngx_hâp_autoödex_íåy_à*Ë
⁄e
;

590 
ngx_hâp_autoödex_íåy_t
 *
£c⁄d
 = (ngx_hâp_autoödex_íåy_à*Ë
two
;

592 i‡(
fú°
->
dú
 && !
£c⁄d
->dir) {

597 i‡(!
fú°
->
dú
 && 
£c⁄d
->dir) {

602  (Ë
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

603 
	}
}

608 
ngx_buf_t
 *

609 
	$ngx_hâp_autoödex_Æloc
(
ngx_hâp_autoödex_˘x_t
 *
˘x
, 
size_t
 
size
)

611 
ngx_chaö_t
 *
˛
;

613 i‡(
˘x
->
buf
) {

615 i‡((
size_t
Ë(
˘x
->
buf
->
íd
 - ctx->buf->
œ°
Ë>
size
) {

616  
˘x
->
buf
;

619 
˘x
->
size
 +˘x->
buf
->
œ°
 - ctx->buf->
pos
;

622 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, ctx->
Æloc_size
);

623 i‡(
˘x
->
buf
 =
NULL
) {

624  
NULL
;

627 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

628 i‡(
˛
 =
NULL
) {

629  
NULL
;

632 
˛
->
buf
 = 
˘x
->buf;

633 
˛
->
√xt
 = 
NULL
;

635 *
˘x
->
œ°_out
 = 
˛
;

636 
˘x
->
œ°_out
 = &
˛
->
√xt
;

638  
˘x
->
buf
;

639 
	}
}

644 
ngx_öt_t


645 
	$ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
)

647 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

648 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

649 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

652  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

653 
	}
}

657 
	$ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

659 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
;

661 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_autoödex_loc_c⁄f_t
));

662 i‡(
c⁄f
 =
NULL
) {

663  
NULL
;

666 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

667 
c⁄f
->
loˇ…ime
 = 
NGX_CONF_UNSET
;

668 
c⁄f
->
exa˘_size
 = 
NGX_CONF_UNSET
;

670  
c⁄f
;

671 
	}
}

675 
	$ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

677 
ngx_hâp_autoödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

678 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

680 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

681 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
loˇ…ime
, 
¥ev
->localtime, 0);

682 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
exa˘_size
, 
¥ev
->exact_size, 1);

684  
NGX_CONF_OK
;

685 
	}
}

688 
ngx_öt_t


689 
	$ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
)

691 
ngx_hâp_h™dÀr_±
 *
h
;

692 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

694 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

696 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

697 i‡(
h
 =
NULL
) {

698  
NGX_ERROR
;

701 *
h
 = 
ngx_hâp_autoödex_h™dÀr
;

703  
NGX_OK
;

704 
	}
}

	@src/http/modules/ngx_http_browser_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_MODERN_BROWSER
 0

	)

21 
	#NGX_HTTP_ANCIENT_BROWSER
 1

	)

25 
u_ch¨
 
	mbrow£r
[12];

26 
size_t
 
	mskù
;

27 
size_t
 
	madd
;

28 
u_ch¨
 
	m«me
[12];

29 } 
	tngx_hâp_modîn_brow£r_mask_t
;

33 
ngx_uöt_t
 
	mvîsi⁄
;

34 
size_t
 
	mskù
;

35 
size_t
 
	madd
;

36 
u_ch¨
 
	m«me
[12];

37 } 
	tngx_hâp_modîn_brow£r_t
;

41 
ngx_°r_t
 
	m«me
;

42 
ngx_hâp_gë_v¨übÀ_±
 
	mh™dÀr
;

43 
uöçå_t
 
	md©a
;

44 } 
	tngx_hâp_brow£r_v¨übÀ_t
;

48 
ngx_¨øy_t
 *
	mmodîn_brow£rs
;

49 
ngx_¨øy_t
 *
	m™cõ¡_brow£rs
;

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mmodîn_brow£r_vÆue
;

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m™cõ¡_brow£r_vÆue
;

53 
	mmodîn_u∆i°ed_brow£rs
:1;

54 
	m√tsˇ≥4
:1;

55 } 
	tngx_hâp_brow£r_c⁄f_t
;

58 
ngx_öt_t
 
ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_uöt_t
 
ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_brow£r_c⁄f_t
 *
cf
);

66 
ngx_öt_t
 
ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
);

67 *
ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

69 *
chûd
);

70 
ngx_libc_cde˛
 
ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
,

71 c⁄° *
two
);

72 *
ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 *
ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

78 *
ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

79 *
c⁄f
);

82 
ngx_comm™d_t
 
	gngx_hâp_brow£r_comm™ds
[] = {

84 { 
ngx_°rög
("modern_browser"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

86 
ngx_hâp_modîn_brow£r
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("ancient_browser"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

93 
ngx_hâp_™cõ¡_brow£r
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

96 
NULL
 },

98 { 
ngx_°rög
("modern_browser_value"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_hâp_modîn_brow£r_vÆue
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
NULL
 },

105 { 
ngx_°rög
("ancient_browser_value"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_hâp_™cõ¡_brow£r_vÆue
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
NULL
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ_˘x
 = {

117 
ngx_hâp_brow£r_add_v¨übÀ
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
NULL
,

124 
NULL
,

126 
ngx_hâp_brow£r_¸óã_c⁄f
,

127 
ngx_hâp_brow£r_mîge_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_brow£r_moduÀ_˘x
,

134 
ngx_hâp_brow£r_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_hâp_modîn_brow£r_mask_t
 
	gngx_hâp_modîn_brow£r_masks
[] = {

221 
ngx_hâp_brow£r_v¨übÀ_t
 
	gngx_hâp_brow£rs
[] = {

222 { 
ngx_°rög
("msõ"), 
ngx_hâp_msõ_v¨übÀ
, 0 },

223 { 
ngx_°rög
("modîn_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

224 
NGX_HTTP_MODERN_BROWSER
 },

225 { 
ngx_°rög
("™cõ¡_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

226 
NGX_HTTP_ANCIENT_BROWSER
 },

227 { 
ngx_nuŒ_°rög
, 
NULL
, 0 }

231 
ngx_öt_t


232 
	$ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

233 
uöçå_t
 
d©a
)

235 
ngx_uöt_t
 
rc
;

236 
ngx_hâp_brow£r_c⁄f_t
 *
cf
;

238 
cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_brow£r_moduÀ
);

240 
rc
 = 
	`ngx_hâp_brow£r
(
r
, 
cf
);

242 i‡(
d©a
 =
NGX_HTTP_MODERN_BROWSER
 && 
rc
 == NGX_HTTP_MODERN_BROWSER) {

243 *
v
 = *
cf
->
modîn_brow£r_vÆue
;

244  
NGX_OK
;

247 i‡(
d©a
 =
NGX_HTTP_ANCIENT_BROWSER
 && 
rc
 == NGX_HTTP_ANCIENT_BROWSER) {

248 *
v
 = *
cf
->
™cõ¡_brow£r_vÆue
;

249  
NGX_OK
;

252 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

253  
NGX_OK
;

254 
	}
}

257 
ngx_uöt_t


258 
	$ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_brow£r_c⁄f_t
 *
cf
)

260 
size_t
 
Àn
;

261 
u_ch¨
 *
«me
, *
ua
, *
œ°
, 
c
;

262 
ngx_°r_t
 *
™cõ¡
;

263 
ngx_uöt_t
 
i
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

264 
ngx_hâp_modîn_brow£r_t
 *
modîn
;

266 i‡(
r
->
hódîs_ö
.
u£r_agít
 =
NULL
) {

267 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

268  
NGX_HTTP_MODERN_BROWSER
;

271  
NGX_HTTP_ANCIENT_BROWSER
;

274 
ua
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.
d©a
;

275 
Àn
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.len;

276 
œ°
 = 
ua
 + 
Àn
;

278 i‡(
cf
->
modîn_brow£rs
) {

279 
modîn
 = 
cf
->
modîn_brow£rs
->
ñts
;

281 
i
 = 0; i < 
cf
->
modîn_brow£rs
->
√…s
; i++) {

282 
«me
 = 
ua
 + 
modîn
[
i
].
skù
;

284 i‡(
«me
 >
œ°
) {

288 
«me
 = (
u_ch¨
 *Ë
	`ngx_°r°r
“ame, 
modîn
[
i
].name);

290 i‡(
«me
 =
NULL
) {

294 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

295 "brow£r: \"%s\"", 
«me
);

297 
«me
 +
modîn
[
i
].
add
;

299 i‡(
«me
 >
œ°
) {

303 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

304 "vîsi⁄: \"%ui\" \"%s\"", 
modîn
[
i
].
vîsi⁄
, 
«me
);

306 
vîsi⁄
 = 0;

307 
vî
 = 0;

308 
sˇÀ
 = 1000000;

310 
«me
 < 
œ°
) {

312 
c
 = *
«me
++;

314 i‡(
c
 >= '0' && c <= '9') {

315 
vî
 = vî * 10 + (
c
 - '0');

319 i‡(
c
 == '.') {

320 
vîsi⁄
 +
vî
 * 
sˇÀ
;

322 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

324 
modîn
[
i
].
vîsi⁄
, version);

326 i‡(
vîsi⁄
 > 
modîn
[
i
].version) {

327  
NGX_HTTP_MODERN_BROWSER
;

330 
vî
 = 0;

331 
sˇÀ
 /= 100;

338 
vîsi⁄
 +
vî
 * 
sˇÀ
;

340 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 
modîn
[
i
].
vîsi⁄
, version);

344 i‡(
vîsi⁄
 >
modîn
[
i
].version) {

345  
NGX_HTTP_MODERN_BROWSER
;

348  
NGX_HTTP_ANCIENT_BROWSER
;

351 i‡(!
cf
->
modîn_u∆i°ed_brow£rs
) {

352  
NGX_HTTP_ANCIENT_BROWSER
;

356 i‡(
cf
->
√tsˇ≥4
) {

357 i‡(
Àn
 > ("Mozilla/4.72 ") - 1

358 && 
	`ngx_°∫cmp
(
ua
, "Mozilla/", ("Mozilla/") - 1) == 0

359 && 
ua
[8] > '0' && ua[8] < '5')

361  
NGX_HTTP_ANCIENT_BROWSER
;

365 i‡(
cf
->
™cõ¡_brow£rs
) {

366 
™cõ¡
 = 
cf
->
™cõ¡_brow£rs
->
ñts
;

368 
i
 = 0; i < 
cf
->
™cõ¡_brow£rs
->
√…s
; i++) {

369 i‡(
Àn
 >
™cõ¡
[
i
].len

370 && 
	`ngx_°r°r
(
ua
, 
™cõ¡
[
i
].
d©a
Ë!
NULL
)

372  
NGX_HTTP_ANCIENT_BROWSER
;

377 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

378  
NGX_HTTP_MODERN_BROWSER
;

381  
NGX_HTTP_ANCIENT_BROWSER
;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

387 
uöçå_t
 
d©a
)

389 i‡(
r
->
hódîs_ö
.
msõ
) {

390 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

391  
NGX_OK
;

394 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

395  
NGX_OK
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
)

402 
ngx_hâp_brow£r_v¨übÀ_t
 *
v¨
;

403 
ngx_hâp_v¨übÀ_t
 *
v
;

405 
v¨
 = 
ngx_hâp_brow£rs
; v¨->
«me
.
Àn
; var++) {

407 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v¨
->
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

408 i‡(
v
 =
NULL
) {

409  
NGX_ERROR
;

412 
v
->
gë_h™dÀr
 = 
v¨
->
h™dÀr
;

413 
v
->
d©a
 = 
v¨
->data;

416  
NGX_OK
;

417 
	}
}

421 
	$ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

423 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
;

425 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_brow£r_c⁄f_t
));

426 i‡(
c⁄f
 =
NULL
) {

427  
NULL
;

442  
c⁄f
;

443 
	}
}

447 
	$ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

449 
ngx_hâp_brow£r_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

450 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
 = 
chûd
;

452 
ngx_uöt_t
 
i
, 
n
;

453 
ngx_hâp_modîn_brow£r_t
 *
brow£rs
, *
›îa
;

461 i‡(
c⁄f
->
modîn_brow£rs
 =
NULL
 && c⁄f->
modîn_u∆i°ed_brow£rs
 == 0) {

462 
c⁄f
->
modîn_brow£rs
 = 
¥ev
->modern_browsers;

463 
c⁄f
->
modîn_u∆i°ed_brow£rs
 = 
¥ev
->modern_unlisted_browsers;

465 } i‡(
c⁄f
->
modîn_brow£rs
 !
NULL
) {

466 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

468 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

469 i‡(
brow£rs
[
i
].
skù
 == 0) {

470 
found
;

479 
›îa
 = 
	`ngx_¨øy_push
(
c⁄f
->
modîn_brow£rs
);

480 i‡(
›îa
 =
NULL
) {

481  
NGX_CONF_ERROR
;

484 
›îa
->
skù
 = 0;

485 
›îa
->
vîsi⁄
 = 4001000000U;

487 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

489 
found
:

491 
	`ngx_qs‹t
(
brow£rs
, (
size_t
Ë
c⁄f
->
modîn_brow£rs
->
√…s
,

492 (
ngx_hâp_modîn_brow£r_t
),

493 
ngx_hâp_modîn_brow£r_s‹t
);

495 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

496 
n
 = 
brow£rs
[
i
].
skù
;

498 
brow£rs
[
i
].
skù
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].skip;

499 
brow£rs
[
i
].
add
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].add;

500 (Ë
	`ngx_˝y°∫
(
brow£rs
[
i
].
«me
,

501 
ngx_hâp_modîn_brow£r_masks
[
n
].
«me
, 12);

505 i‡(
c⁄f
->
™cõ¡_brow£rs
 =
NULL
 && c⁄f->
√tsˇ≥4
 == 0) {

506 
c⁄f
->
™cõ¡_brow£rs
 = 
¥ev
->ancient_browsers;

507 
c⁄f
->
√tsˇ≥4
 = 
¥ev
->netscape4;

510 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

511 
c⁄f
->
modîn_brow£r_vÆue
 = 
¥ev
->modern_browser_value;

514 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

515 
c⁄f
->
modîn_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

518 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

519 
c⁄f
->
™cõ¡_brow£r_vÆue
 = 
¥ev
->ancient_browser_value;

522 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

523 
c⁄f
->
™cõ¡_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

526  
NGX_CONF_OK
;

527 
	}
}

530 
ngx_libc_cde˛


531 
	$ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
, c⁄° *
two
)

533 
ngx_hâp_modîn_brow£r_t
 *
fú°
 = (ngx_hâp_modîn_brow£r_à*Ë
⁄e
;

534 
ngx_hâp_modîn_brow£r_t
 *
£c⁄d
 = (ngx_hâp_modîn_brow£r_à*Ë
two
;

536  (
fú°
->
skù
 - 
£c⁄d
->skip);

537 
	}
}

541 
	$ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

543 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

545 
u_ch¨
 
c
;

546 
ngx_°r_t
 *
vÆue
;

547 
ngx_uöt_t
 
i
, 
n
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

548 
ngx_hâp_modîn_brow£r_t
 *
brow£r
;

549 
ngx_hâp_modîn_brow£r_mask_t
 *
mask
;

551 
vÆue
 = 
cf
->
¨gs
->
ñts
;

553 i‡(
cf
->
¨gs
->
√…s
 == 2) {

554 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unlisted") == 0) {

555 
bcf
->
modîn_u∆i°ed_brow£rs
 = 1;

556  
NGX_CONF_OK
;

559  
NGX_CONF_ERROR
;

562 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

563 
bcf
->
modîn_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 5,

564 (
ngx_hâp_modîn_brow£r_t
));

565 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

566  
NGX_CONF_ERROR
;

570 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
modîn_brow£rs
);

571 i‡(
brow£r
 =
NULL
) {

572  
NGX_CONF_ERROR
;

575 
mask
 = 
ngx_hâp_modîn_brow£r_masks
;

577 
n
 = 0; 
mask
[n].
brow£r
[0] != '\0';Ç++) {

578 i‡(
	`ngx_°rˇ£cmp
(
mask
[
n
].
brow£r
, 
vÆue
[1].
d©a
) == 0) {

579 
found
;

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 "unknow¿brow£∏«mê\"%V\"", &
vÆue
[1]);

586  
NGX_CONF_ERROR
;

588 
found
:

596 
brow£r
->
skù
 = 
n
;

598 
vîsi⁄
 = 0;

599 
vî
 = 0;

600 
sˇÀ
 = 1000000;

602 
i
 = 0; i < 
vÆue
[2].
Àn
; i++) {

604 
c
 = 
vÆue
[2].
d©a
[
i
];

606 i‡(
c
 >= '0' && c <= '9') {

607 
vî
 = vî * 10 + (
c
 - '0');

611 i‡(
c
 == '.') {

612 
vîsi⁄
 +
vî
 * 
sˇÀ
;

613 
vî
 = 0;

614 
sˇÀ
 /= 100;

618 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

619 "övÆid brow£∏vîsi⁄ \"%V\"", &
vÆue
[2]);

621  
NGX_CONF_ERROR
;

624 
vîsi⁄
 +
vî
 * 
sˇÀ
;

626 
brow£r
->
vîsi⁄
 = version;

628  
NGX_CONF_OK
;

629 
	}
}

633 
	$ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

635 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

637 
ngx_°r_t
 *
vÆue
, *
brow£r
;

638 
ngx_uöt_t
 
i
;

640 
vÆue
 = 
cf
->
¨gs
->
ñts
;

642 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

643 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "netscape4") == 0) {

644 
bcf
->
√tsˇ≥4
 = 1;

648 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

649 
bcf
->
™cõ¡_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

650 (
ngx_°r_t
));

651 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

652  
NGX_CONF_ERROR
;

656 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
™cõ¡_brow£rs
);

657 i‡(
brow£r
 =
NULL
) {

658  
NGX_CONF_ERROR
;

661 *
brow£r
 = 
vÆue
[
i
];

664  
NGX_CONF_OK
;

665 
	}
}

669 
	$ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

671 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

673 
ngx_°r_t
 *
vÆue
;

675 
bcf
->
modîn_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

676 (
ngx_hâp_v¨übÀ_vÆue_t
));

677 i‡(
bcf
->
modîn_brow£r_vÆue
 =
NULL
) {

678  
NGX_CONF_ERROR
;

681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

683 
bcf
->
modîn_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

684 
bcf
->
modîn_brow£r_vÆue
->
vÆid
 = 1;

685 
bcf
->
modîn_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

686 
bcf
->
modîn_brow£r_vÆue
->
nŸ_found
 = 0;

687 
bcf
->
modîn_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

689  
NGX_CONF_OK
;

690 
	}
}

694 
	$ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

696 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

698 
ngx_°r_t
 *
vÆue
;

700 
bcf
->
™cõ¡_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

701 (
ngx_hâp_v¨übÀ_vÆue_t
));

702 i‡(
bcf
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

703  
NGX_CONF_ERROR
;

706 
vÆue
 = 
cf
->
¨gs
->
ñts
;

708 
bcf
->
™cõ¡_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

709 
bcf
->
™cõ¡_brow£r_vÆue
->
vÆid
 = 1;

710 
bcf
->
™cõ¡_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

711 
bcf
->
™cõ¡_brow£r_vÆue
->
nŸ_found
 = 0;

712 
bcf
->
™cõ¡_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

714  
NGX_CONF_OK
;

715 
	}
}

	@src/http/modules/ngx_http_charset_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_CHARSET_OFF
 -2

	)

14 
	#NGX_HTTP_NO_CHARSET
 -3

	)

15 
	#NGX_HTTP_CHARSET_VAR
 0x10000

	)

18 
	#NGX_UTF_LEN
 4

	)

20 
	#NGX_HTML_ENTITY_LEN
 (("&#1114111;"Ë- 1)

	)

24 
u_ch¨
 **
	mèbÀs
;

25 
ngx_°r_t
 
	m«me
;

27 
	mÀngth
:16;

28 
	mutf8
:1;

29 } 
	tngx_hâp_ch¨£t_t
;

33 
ngx_öt_t
 
	m§c
;

34 
ngx_öt_t
 
	md°
;

35 } 
	tngx_hâp_ch¨£t_ªcode_t
;

39 
ngx_öt_t
 
	m§c
;

40 
ngx_öt_t
 
	md°
;

41 
u_ch¨
 *
	m§c2d°
;

42 
u_ch¨
 *
	md°2§c
;

43 } 
	tngx_hâp_ch¨£t_èbÀs_t
;

47 
ngx_¨øy_t
 
	mch¨£ts
;

48 
ngx_¨øy_t
 
	mèbÀs
;

49 
ngx_¨øy_t
 
	mªcodes
;

50 } 
	tngx_hâp_ch¨£t_maö_c⁄f_t
;

54 
ngx_öt_t
 
	mch¨£t
;

55 
ngx_öt_t
 
	msour˚_ch¨£t
;

56 
ngx_Êag_t
 
	movîride_ch¨£t
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 } 
	tngx_hâp_ch¨£t_loc_c⁄f_t
;

64 
u_ch¨
 *
	mèbÀ
;

65 
ngx_öt_t
 
	mch¨£t
;

66 
ngx_°r_t
 
	mch¨£t_«me
;

68 
ngx_chaö_t
 *
	mbusy
;

69 
ngx_chaö_t
 *
	m‰ì_bufs
;

70 
ngx_chaö_t
 *
	m‰ì_buf„rs
;

72 
size_t
 
	mßved_Àn
;

73 
u_ch¨
 
	mßved
[
NGX_UTF_LEN
];

75 
	mÀngth
:16;

76 
	m‰om_utf8
:1;

77 
	mto_utf8
:1;

78 } 
	tngx_hâp_ch¨£t_˘x_t
;

82 
ngx_hâp_ch¨£t_èbÀs_t
 *
	mèbÀ
;

83 
ngx_hâp_ch¨£t_t
 *
	mch¨£t
;

84 
ngx_uöt_t
 
	mch¨a˘îs
;

85 } 
	tngx_hâp_ch¨£t_c⁄f_˘x_t
;

88 
ngx_öt_t
 
ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_°r_t
 *
«me
);

90 
ngx_öt_t
 
ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_°r_t
 *
«me
);

92 
ngx_öt_t
 
ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_°r_t
 *
«me
);

94 
ngx_öt_t
 
ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

95 
ngx_ölöe
 
ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_°r_t
 *
ch¨£t
);

97 
ngx_öt_t
 
ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
, 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
);

99 
ngx_uöt_t
 
ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
);

100 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

101 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

102 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

103 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

105 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
,

106 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

107 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
,

108 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
, 
size_t
 
size
);

110 *
ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

111 *
c⁄f
);

112 *
ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

113 *
c⁄f
);

115 *
ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

116 *
c⁄f
);

117 
ngx_öt_t
 
ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
);

119 *
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

120 *
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

121 *
ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

122 *
∑ª¡
, *
chûd
);

123 
ngx_öt_t
 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

126 
ngx_°r_t
 
	gngx_hâp_ch¨£t_deÁu…_ty≥s
[] = {

127 
ngx_°rög
("text/html"),

128 
ngx_°rög
("text/xml"),

129 
ngx_°rög
("text/plain"),

130 
ngx_°rög
("text/vnd.wap.wml"),

131 
ngx_°rög
("application/x-javascript"),

132 
ngx_°rög
("application/rss+xml"),

133 
ngx_nuŒ_°rög


137 
ngx_comm™d_t
 
	gngx_hâp_ch¨£t_fûãr_comm™ds
[] = {

139 { 
ngx_°rög
("charset"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


141 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

142 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
),

145 
NULL
 },

147 { 
ngx_°rög
("source_charset"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


149 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
sour˚_ch¨£t
),

153 
NULL
 },

155 { 
ngx_°rög
("override_charset"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


157 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

158 
ngx_c⁄f_£t_Êag_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ovîride_ch¨£t
),

161 
NULL
 },

163 { 
ngx_°rög
("charset_types"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

165 
ngx_hâp_ty≥s_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ty≥s_keys
),

168 &
ngx_hâp_ch¨£t_deÁu…_ty≥s
[0] },

170 { 
ngx_°rög
("charset_map"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

172 
ngx_hâp_ch¨£t_m≠_block
,

173 
NGX_HTTP_MAIN_CONF_OFFSET
,

175 
NULL
 },

177 
ngx_nuŒ_comm™d


181 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ_˘x
 = {

182 
NULL
,

183 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
,

185 
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
,

186 
NULL
,

188 
NULL
,

189 
NULL
,

191 
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
,

192 
ngx_hâp_ch¨£t_mîge_loc_c⁄f


196 
ngx_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ
 = {

197 
NGX_MODULE_V1
,

198 &
ngx_hâp_ch¨£t_fûãr_moduÀ_˘x
,

199 
ngx_hâp_ch¨£t_fûãr_comm™ds
,

200 
NGX_HTTP_MODULE
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NGX_MODULE_V1_PADDING


212 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

213 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

216 
ngx_öt_t


217 
	$ngx_hâp_ch¨£t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

219 
ngx_öt_t
 
ch¨£t
, 
sour˚_ch¨£t
;

220 
ngx_°r_t
 
d°
, 
§c
;

221 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

222 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

224 i‡(
r
 =r->
maö
) {

225 
ch¨£t
 = 
	`ngx_hâp_de°ö©i⁄_ch¨£t
(
r
, &
d°
);

228 
ch¨£t
 = 
	`ngx_hâp_maö_ªque°_ch¨£t
(
r
, &
d°
);

231 i‡(
ch¨£t
 =
NGX_ERROR
) {

232  
NGX_ERROR
;

235 i‡(
ch¨£t
 =
NGX_DECLINED
) {

236  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

241 
sour˚_ch¨£t
 = 
	`ngx_hâp_sour˚_ch¨£t
(
r
, &
§c
);

243 i‡(
sour˚_ch¨£t
 =
NGX_ERROR
) {

244  
NGX_ERROR
;

252 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

253 "ch¨£t: \"%V\" > \"%V\"", &
§c
, &
d°
);

255 i‡(
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

256 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

258  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

261 i‡(
ch¨£t
 =
NGX_HTTP_NO_CHARSET


262 || 
sour˚_ch¨£t
 =
NGX_HTTP_NO_CHARSET
)

264 i‡(
sour˚_ch¨£t
 !
ch¨£t


265 || 
	`ngx_°∫ˇ£cmp
(
d°
.
d©a
, 
§c
.d©a, d°.
Àn
) != 0)

267 
no_ch¨£t_m≠
;

270 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

272  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

275 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

276 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

278 i‡(
sour˚_ch¨£t
 !
ch¨£t


279 && (
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
 =
NULL


280 || 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
] =
NULL
))

282 
no_ch¨£t_m≠
;

285 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

287 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

289 i‡(
sour˚_ch¨£t
 !
ch¨£t
) {

290  
	`ngx_hâp_ch¨£t_˘x
(
r
, 
ch¨£ts
, 
ch¨£t
, 
sour˚_ch¨£t
);

293  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

295 
no_ch¨£t_m≠
:

297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

299 &
§c
, &
d°
);

301  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

308 
ngx_öt_t
 
ch¨£t
;

309 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

310 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

311 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
mlcf
;

312 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

314 i‡(!
r
->
ign‹e_c⁄ã¡_ícodög


315 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög


316 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

318  
NGX_DECLINED
;

321 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

322  
NGX_DECLINED
;

325 i‡(
r
->
hódîs_out
.
ovîride_ch¨£t


326 && 
r
->
hódîs_out
.
ovîride_ch¨£t
->
Àn
)

328 *
«me
 = *
r
->
hódîs_out
.
ovîride_ch¨£t
;

330 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

332 i‡(
ch¨£t
 !
NGX_HTTP_NO_CHARSET
) {

333  
ch¨£t
;

336 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

337 "unknow¿ch¨£à\"%V\"Åÿovîride", 
«me
);

339  
NGX_DECLINED
;

342 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

343 
ch¨£t
 = 
mlcf
->charset;

345 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

346  
NGX_DECLINED
;

349 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

350 i‡(
mlcf
->
ovîride_ch¨£t
 == 0) {

351  
NGX_DECLINED
;

355 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
mlcf
->
ty≥s
Ë=
NULL
) {

356  
NGX_DECLINED
;

360 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

361 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

362 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

363 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

364  
ch¨£t
;

367 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

369 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

370  
NGX_ERROR
;

373 
«me
->
Àn
 = 
vv
->len;

374 
«me
->
d©a
 = 
vv
->data;

376  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

377 
	}
}

380 
ngx_öt_t


381 
	$ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
§c
)

383 
ngx_öt_t
 
ch¨£t
;

384 
ngx_°r_t
 *
maö_ch¨£t
;

385 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

387 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

389 i‡(
˘x
) {

390 *
§c
 = 
˘x
->
ch¨£t_«me
;

391  
˘x
->
ch¨£t
;

394 
maö_ch¨£t
 = &
r
->
maö
->
hódîs_out
.
ch¨£t
;

396 i‡(
maö_ch¨£t
->
Àn
 == 0) {

397  
NGX_DECLINED
;

400 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

401 i‡(
˘x
 =
NULL
) {

402  
NGX_ERROR
;

405 
	`ngx_hâp_£t_˘x
(
r
->
maö
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

407 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
maö_ch¨£t
);

409 
˘x
->
ch¨£t
 = charset;

410 
˘x
->
ch¨£t_«me
 = *
maö_ch¨£t
;

411 *
§c
 = *
maö_ch¨£t
;

413  
ch¨£t
;

414 
	}
}

417 
ngx_öt_t


418 
	$ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

420 
ngx_öt_t
 
ch¨£t
;

421 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

422 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

423 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

424 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

426 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

427 *
«me
 = 
r
->
hódîs_out
.
ch¨£t
;

428  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

431 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

433 
ch¨£t
 = 
lcf
->
sour˚_ch¨£t
;

435 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

436 
«me
->
Àn
 = 0;

437  
ch¨£t
;

440 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

441 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

442 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

443 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

444  
ch¨£t
;

447 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

449 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

450  
NGX_ERROR
;

453 
«me
->
Àn
 = 
vv
->len;

454 
«me
->
d©a
 = 
vv
->data;

456  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

457 
	}
}

460 
ngx_öt_t


461 
	$ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

463 
ngx_uöt_t
 
i
, 
n
;

464 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

465 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

467 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

469 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

470 
n
 = 
mcf
->
ch¨£ts
.
√…s
;

472 
i
 = 0; i < 
n
; i++) {

473 i‡(
ch¨£t
[
i
].
«me
.
Àn
 !=Çame->len) {

477 i‡(
	`ngx_°∫ˇ£cmp
(
ch¨£t
[
i
].
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0) {

478  
i
;

482  
NGX_HTTP_NO_CHARSET
;

483 
	}
}

486 
ngx_ölöe
 

487 
	$ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ch¨£t
)

489 i‡(
r
 !r->
maö
) {

493 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


494 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY
)

501 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

505 
r
->
hódîs_out
.
ch¨£t
 = *charset;

506 
	}
}

509 
ngx_öt_t


510 
	$ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
,

511 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
)

513 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

515 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

516 i‡(
˘x
 =
NULL
) {

517  
NGX_ERROR
;

520 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

522 
˘x
->
èbÀ
 = 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
];

523 
˘x
->
ch¨£t
 = charset;

524 
˘x
->
ch¨£t_«me
 = 
ch¨£ts
[
ch¨£t
].
«me
;

525 
˘x
->
Àngth
 = 
ch¨£ts
[
ch¨£t
].length;

526 
˘x
->
‰om_utf8
 = 
ch¨£ts
[
sour˚_ch¨£t
].
utf8
;

527 
˘x
->
to_utf8
 = 
ch¨£ts
[
ch¨£t
].
utf8
;

529 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

531 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë&& 
r
 =r->
maö
) {

532 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

535 
r
->
fûãr_√ed_ãmp‹¨y
 = 1;

538  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

539 
	}
}

542 
ngx_öt_t


543 
	$ngx_hâp_ch¨£t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

545 
ngx_öt_t
 
rc
;

546 
ngx_buf_t
 *
b
;

547 
ngx_chaö_t
 *
˛
, *
out
, **
Œ
;

548 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

550 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

552 i‡(
˘x
 =
NULL
 || ctx->
èbÀ
 == NULL) {

553  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

556 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë|| ctx->
busy
) {

558 
out
 = 
NULL
;

559 
Œ
 = &
out
;

561 
˛
 = 
ö
; cl; c»˛->
√xt
) {

562 
b
 = 
˛
->
buf
;

564 i‡(
	`ngx_buf_size
(
b
) == 0) {

566 *
Œ
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

567 i‡(*
Œ
 =
NULL
) {

568  
NGX_ERROR
;

571 (*
Œ
)->
buf
 = 
b
;

572 (*
Œ
)->
√xt
 = 
NULL
;

574 
Œ
 = &(*Œ)->
√xt
;

579 i‡(
˘x
->
to_utf8
) {

580 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_to_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

583 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

586 i‡(*
Œ
 =
NULL
) {

587  
NGX_ERROR
;

590 *
Œ
) {

591 
Œ
 = &(*Œ)->
√xt
;

595 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

597 i‡(
out
) {

598 i‡(
˘x
->
busy
 =
NULL
) {

599 
˘x
->
busy
 = 
out
;

602 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

603 
˛
->
√xt
 = 
out
;

607 
˘x
->
busy
) {

609 
˛
 = 
˘x
->
busy
;

610 
b
 = 
˛
->
buf
;

612 i‡(
	`ngx_buf_size
(
b
) != 0) {

616 
˘x
->
busy
 = 
˛
->
√xt
;

618 i‡(
b
->
èg
 !(
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
) {

622 i‡(
b
->
shadow
) {

623 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

626 i‡(
b
->
pos
) {

627 
˛
->
√xt
 = 
˘x
->
‰ì_buf„rs
;

628 
˘x
->
‰ì_buf„rs
 = 
˛
;

632 
˛
->
√xt
 = 
˘x
->
‰ì_bufs
;

633 
˘x
->
‰ì_bufs
 = 
˛
;

636  
rc
;

639 
˛
 = 
ö
; cl; c»˛->
√xt
) {

640 (Ë
	`ngx_hâp_ch¨£t_ªcode
(
˛
->
buf
, 
˘x
->
èbÀ
);

643  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

644 
	}
}

647 
ngx_uöt_t


648 
	$ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
)

650 
u_ch¨
 *
p
, *
œ°
;

652 
œ°
 = 
b
->last;

654 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

656 i‡(*
p
 !
èbÀ
[*p]) {

657 
ªcode
;

663 
ªcode
:

666 i‡(*
p
 !
èbÀ
[*p]) {

667 *
p
 = 
èbÀ
[*p];

670 
p
++;

672 } 
p
 < 
œ°
);

674 
b
->
ö_fûe
 = 0;

677 
	}
}

680 
ngx_chaö_t
 *

681 
	$ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

682 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

684 
size_t
 
Àn
, 
size
;

685 
u_ch¨
 
c
, *
p
, *
§c
, *
d°
, *
ßved
, **
èbÀ
;

686 
uöt32_t
 
n
;

687 
ngx_buf_t
 *
b
;

688 
ngx_uöt_t
 
i
;

689 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

691 
§c
 = 
buf
->
pos
;

693 i‡(
˘x
->
ßved_Àn
 == 0) {

695  ; 
§c
 < 
buf
->
œ°
; src++) {

697 i‡(*
§c
 < 0x80) {

701 
Àn
 = 
§c
 - 
buf
->
pos
;

703 i‡(
Àn
 > 512) {

704 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

705 i‡(
out
 =
NULL
) {

706  
NULL
;

709 
b
 = 
out
->
buf
;

711 
b
->
ãmp‹¨y
 = 
buf
->temporary;

712 
b
->
mem‹y
 = 
buf
->memory;

713 
b
->
mm≠
 = 
buf
->mmap;

714 
b
->
Êush
 = 
buf
->flush;

716 
b
->
pos
 = 
buf
->pos;

717 
b
->
œ°
 = 
§c
;

719 
out
->
buf
 = 
b
;

720 
out
->
√xt
 = 
NULL
;

722 
size
 = 
buf
->
œ°
 - 
§c
;

724 
ßved
 = 
§c
;

725 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
size
);

727 i‡(
n
 == 0xfffffffe) {

730 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
size
);

731 
˘x
->
ßved_Àn
 = 
size
;

733 
b
->
shadow
 = 
buf
;

735  
out
;

739 
out
 = 
NULL
;

740 
size
 = 
Àn
 + 
buf
->
œ°
 - 
§c
;

741 
§c
 = 
buf
->
pos
;

744 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

745 
size
 +
NGX_HTML_ENTITY_LEN
;

748 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

749 i‡(
˛
 =
NULL
) {

750  
NULL
;

753 i‡(
out
) {

754 
out
->
√xt
 = 
˛
;

757 
out
 = 
˛
;

760 
b
 = 
˛
->
buf
;

761 
d°
 = 
b
->
pos
;

763 
ªcode
;

766 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

767 i‡(
out
 =
NULL
) {

768  
NULL
;

771 
out
->
buf
 = buf;

772 
out
->
√xt
 = 
NULL
;

774  
out
;

779 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

780 "hâ∞ch¨£àut‡ßved: %z", 
˘x
->
ßved_Àn
);

782 
p
 = 
§c
;

784 
i
 = 
˘x
->
ßved_Àn
; i < 
NGX_UTF_LEN
; i++) {

785 
˘x
->
ßved
[
i
] = *
p
++;

787 i‡(
p
 =
buf
->
œ°
) {

792 
ßved
 = 
˘x
->saved;

793 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
i
);

795 
c
 = '\0';

797 i‡(
n
 < 0x10000) {

798 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

799 
p
 = 
èbÀ
[
n
 >> 8];

801 i‡(
p
) {

802 
c
 = 
p
[
n
 & 0xff];

805 } i‡(
n
 == 0xfffffffe) {

809 i‡(
i
 < 
NGX_UTF_LEN
) {

810 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

811 i‡(
out
 =
NULL
) {

812  
NULL
;

815 
b
 = 
out
->
buf
;

817 
b
->
pos
 = 
buf
->pos;

818 
b
->
œ°
 = 
buf
->last;

819 
b
->
sync
 = 1;

820 
b
->
shadow
 = 
buf
;

822 
	`ngx_mem˝y
(&
˘x
->
ßved
[˘x->
ßved_Àn
], 
§c
, 
i
);

823 
˘x
->
ßved_Àn
 +
i
;

825  
out
;

829 
size
 = 
buf
->
œ°
 - buf->
pos
;

831 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

832 
size
 +
NGX_HTML_ENTITY_LEN
;

835 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

836 i‡(
˛
 =
NULL
) {

837  
NULL
;

840 
out
 = 
˛
;

842 
b
 = 
˛
->
buf
;

843 
d°
 = 
b
->
pos
;

845 i‡(
c
) {

846 *
d°
++ = 
c
;

848 } i‡(
n
 == 0xfffffffe) {

849 *
d°
++ = '?';

851 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

854 
ßved
 = &
˘x
->ßved[
NGX_UTF_LEN
];

856 } i‡(
n
 > 0x10ffff) {

857 *
d°
++ = '?';

859 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

863 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

866 
§c
 +(
ßved
 - 
˘x
->ßvedË- ctx->
ßved_Àn
;

867 
˘x
->
ßved_Àn
 = 0;

869 
ªcode
:

871 
Œ
 = &
˛
->
√xt
;

873 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

875 
§c
 < 
buf
->
œ°
) {

877 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
NGX_HTML_ENTITY_LEN
) {

878 
b
->
œ°
 = 
d°
;

880 
size
 = 
buf
->
œ°
 - 
§c
 + 
NGX_HTML_ENTITY_LEN
;

882 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

883 i‡(
˛
 =
NULL
) {

884  
NULL
;

887 *
Œ
 = 
˛
;

888 
Œ
 = &
˛
->
√xt
;

890 
b
 = 
˛
->
buf
;

891 
d°
 = 
b
->
pos
;

894 i‡(*
§c
 < 0x80) {

895 *
d°
++ = *
§c
++;

899 
Àn
 = 
buf
->
œ°
 - 
§c
;

901 
n
 = 
	`ngx_utf8_decode
(&
§c
, 
Àn
);

903 i‡(
n
 < 0x10000) {

905 
p
 = 
èbÀ
[
n
 >> 8];

907 i‡(
p
) {

908 
c
 = 
p
[
n
 & 0xff];

910 i‡(
c
) {

911 *
d°
++ = 
c
;

916 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

921 i‡(
n
 == 0xfffffffe) {

924 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
Àn
);

925 
˘x
->
ßved_Àn
 = 
Àn
;

927 i‡(
b
->
pos
 =
d°
) {

928 
b
->
sync
 = 1;

929 
b
->
ãmp‹¨y
 = 0;

935 i‡(
n
 > 0x10ffff) {

936 *
d°
++ = '?';

938 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

946 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

949 
b
->
œ°
 = 
d°
;

951 
b
->
œ°_buf
 = 
buf
->last_buf;

952 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

953 
b
->
Êush
 = 
buf
->flush;

955 
b
->
shadow
 = 
buf
;

957  
out
;

958 
	}
}

961 
ngx_chaö_t
 *

962 
	$ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

963 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

965 
size_t
 
Àn
, 
size
;

966 
u_ch¨
 *
p
, *
§c
, *
d°
, *
èbÀ
;

967 
ngx_buf_t
 *
b
;

968 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

970 
èbÀ
 = 
˘x
->table;

972 
§c
 = 
buf
->
pos
; sr¯< buf->
œ°
; src++) {

973 i‡(
èbÀ
[*
§c
 * 
NGX_UTF_LEN
] == '\1') {

977 
ªcode
;

980 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

981 i‡(
out
 =
NULL
) {

982  
NULL
;

985 
out
->
buf
 = buf;

986 
out
->
√xt
 = 
NULL
;

988  
out
;

990 
ªcode
:

997 
Àn
 = 
§c
 - 
buf
->
pos
;

999 i‡(
Àn
 > 512) {

1000 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

1001 i‡(
out
 =
NULL
) {

1002  
NULL
;

1005 
b
 = 
out
->
buf
;

1007 
b
->
ãmp‹¨y
 = 
buf
->temporary;

1008 
b
->
mem‹y
 = 
buf
->memory;

1009 
b
->
mm≠
 = 
buf
->mmap;

1010 
b
->
Êush
 = 
buf
->flush;

1012 
b
->
pos
 = 
buf
->pos;

1013 
b
->
œ°
 = 
§c
;

1015 
out
->
buf
 = 
b
;

1016 
out
->
√xt
 = 
NULL
;

1018 
size
 = 
buf
->
œ°
 - 
§c
;

1019 
size
 = sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1022 
out
 = 
NULL
;

1024 
size
 = 
buf
->
œ°
 - 
§c
;

1025 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1027 
§c
 = 
buf
->
pos
;

1030 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1031 i‡(
˛
 =
NULL
) {

1032  
NULL
;

1035 i‡(
out
) {

1036 
out
->
√xt
 = 
˛
;

1039 
out
 = 
˛
;

1042 
Œ
 = &
˛
->
√xt
;

1044 
b
 = 
˛
->
buf
;

1045 
d°
 = 
b
->
pos
;

1047 
§c
 < 
buf
->
œ°
) {

1049 
p
 = &
èbÀ
[*
§c
++ * 
NGX_UTF_LEN
];

1050 
Àn
 = *
p
++;

1052 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
Àn
) {

1053 
b
->
œ°
 = 
d°
;

1055 
size
 = 
buf
->
œ°
 - 
§c
;

1056 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1058 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1059 i‡(
˛
 =
NULL
) {

1060  
NULL
;

1063 *
Œ
 = 
˛
;

1064 
Œ
 = &
˛
->
√xt
;

1066 
b
 = 
˛
->
buf
;

1067 
d°
 = 
b
->
pos
;

1070 
Àn
) {

1071 *
d°
++ = *
p
++;

1072 
Àn
--;

1076 
b
->
œ°
 = 
d°
;

1078 
b
->
œ°_buf
 = 
buf
->last_buf;

1079 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

1080 
b
->
Êush
 = 
buf
->flush;

1082 
b
->
shadow
 = 
buf
;

1084  
out
;

1085 
	}
}

1088 
ngx_chaö_t
 *

1089 
	$ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

1091 
ngx_chaö_t
 *
˛
;

1093 
˛
 = 
˘x
->
‰ì_bufs
;

1095 i‡(
˛
) {

1096 
˘x
->
‰ì_bufs
 = 
˛
->
√xt
;

1098 
˛
->
buf
->
shadow
 = 
NULL
;

1099 
˛
->
√xt
 = 
NULL
;

1101  
˛
;

1104 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1105 i‡(
˛
 =
NULL
) {

1106  
NULL
;

1109 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

1110 i‡(
˛
->
buf
 =
NULL
) {

1111  
NULL
;

1114 
˛
->
√xt
 = 
NULL
;

1116 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1118  
˛
;

1119 
	}
}

1122 
ngx_chaö_t
 *

1123 
	$ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
,

1124 
size_t
 
size
)

1126 
ngx_buf_t
 *
b
;

1127 
ngx_chaö_t
 *
˛
, **
Œ
;

1129 
Œ
 = &
˘x
->
‰ì_buf„rs
, 
˛
 = ctx->free_buffers;

1130 
˛
;

1131 
Œ
 = &
˛
->
√xt
, cl = cl->next)

1133 
b
 = 
˛
->
buf
;

1135 i‡((
size_t
Ë(
b
->
íd
 - b->
°¨t
Ë>
size
) {

1136 *
Œ
 = 
˛
->
√xt
;

1137 
˛
->
√xt
 = 
NULL
;

1139 
b
->
pos
 = b->
°¨t
;

1140 
b
->
ãmp‹¨y
 = 1;

1141 
b
->
shadow
 = 
NULL
;

1143  
˛
;

1147 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1148 i‡(
˛
 =
NULL
) {

1149  
NULL
;

1152 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
size
);

1153 i‡(
˛
->
buf
 =
NULL
) {

1154  
NULL
;

1157 
˛
->
√xt
 = 
NULL
;

1159 
˛
->
buf
->
ãmp‹¨y
 = 1;

1160 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1162  
˛
;

1163 
	}
}

1167 
	$ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1169 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
 = 
c⁄f
;

1171 *
rv
;

1172 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1173 
ngx_öt_t
 
§c
, 
d°
;

1174 
ngx_uöt_t
 
i
, 
n
;

1175 
ngx_°r_t
 *
vÆue
;

1176 
ngx_c⁄f_t
 
pvcf
;

1177 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1178 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1179 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 
˘x
;

1181 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1183 
§c
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1184 i‡(
§c
 =
NGX_ERROR
) {

1185  
NGX_CONF_ERROR
;

1188 
d°
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[2]);

1189 i‡(
d°
 =
NGX_ERROR
) {

1190  
NGX_CONF_ERROR
;

1193 i‡(
§c
 =
d°
) {

1194 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1196 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1197  
NGX_CONF_ERROR
;

1200 
èbÀ
 = 
mcf
->
èbÀs
.
ñts
;

1201 
i
 = 0; i < 
mcf
->
èbÀs
.
√…s
; i++) {

1202 i‡((
§c
 =
èbÀ
->§¯&& 
d°
 ==Åable->dst)

1203 || (
§c
 =
èbÀ
->
d°
 && dst ==Åable->src))

1205 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1207 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1208  
NGX_CONF_ERROR
;

1212 
èbÀ
 = 
	`ngx_¨øy_push
(&
mcf
->
èbÀs
);

1213 i‡(
èbÀ
 =
NULL
) {

1214  
NGX_CONF_ERROR
;

1217 
èbÀ
->
§c
 = src;

1218 
èbÀ
->
d°
 = dst;

1220 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[2].
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1221 
èbÀ
->
§c2d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * 
NGX_UTF_LEN
);

1222 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1223  
NGX_CONF_ERROR
;

1226 
èbÀ
->
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * (*));

1227 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1228  
NGX_CONF_ERROR
;

1231 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1232 i‡(
d°2§c
 =
NULL
) {

1233  
NGX_CONF_ERROR
;

1236 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1237 
µ
[0] = 
d°2§c
;

1239 
i
 = 0; i < 128; i++) {

1240 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1241 
p
[0] = '\1';

1242 
p
[1] = (
u_ch¨
Ë
i
;

1243 
d°2§c
[
i
] = (
u_ch¨
) i;

1246  ; 
i
 < 256; i++) {

1247 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1248 
p
[0] = '\1';

1249 
p
[1] = '?';

1253 
èbÀ
->
§c2d°
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1254 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1255  
NGX_CONF_ERROR
;

1258 
èbÀ
->
d°2§c
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1259 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1260  
NGX_CONF_ERROR
;

1263 
i
 = 0; i < 128; i++) {

1264 
èbÀ
->
§c2d°
[
i
] = (
u_ch¨
) i;

1265 
èbÀ
->
d°2§c
[
i
] = (
u_ch¨
) i;

1268  ; 
i
 < 256; i++) {

1269 
èbÀ
->
§c2d°
[
i
] = '?';

1270 
èbÀ
->
d°2§c
[
i
] = '?';

1274 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1276 
˘x
.
èbÀ
 =Åable;

1277 
˘x
.
ch¨£t
 = &ch¨£t[
d°
];

1278 
˘x
.
ch¨a˘îs
 = 0;

1280 
pvcf
 = *
cf
;

1281 
cf
->
˘x
 = &ctx;

1282 
cf
->
h™dÀr
 = 
ngx_hâp_ch¨£t_m≠
;

1283 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

1285 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

1287 *
cf
 = 
pvcf
;

1289 i‡(
˘x
.
ch¨a˘îs
) {

1290 
n
 = 
˘x
.
ch¨£t
->
Àngth
;

1291 
˘x
.
ch¨£t
->
Àngth
 /˘x.
ch¨a˘îs
;

1293 i‡(((
n
 * 10Ë/ 
˘x
.
ch¨a˘îs
) % 10 > 4) {

1294 
˘x
.
ch¨£t
->
Àngth
++;

1298  
rv
;

1299 
	}
}

1303 
	$ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

1305 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1306 
uöt32_t
 
n
;

1307 
ngx_öt_t
 
§c
, 
d°
;

1308 
ngx_°r_t
 *
vÆue
;

1309 
ngx_uöt_t
 
i
;

1310 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1311 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 *
˘x
;

1313 i‡(
cf
->
¨gs
->
√…s
 != 2) {

1314 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarametersÇumber");

1315  
NGX_CONF_ERROR
;

1318 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1320 
§c
 = 
	`ngx_hextoi
(
vÆue
[0].
d©a
, vÆue[0].
Àn
);

1321 i‡(
§c
 =
NGX_ERROR
 || src > 255) {

1322 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1323 "övÆid vÆuê\"%V\"", &
vÆue
[0]);

1324  
NGX_CONF_ERROR
;

1327 
˘x
 = 
cf
->ctx;

1328 
èbÀ
 = 
˘x
->table;

1330 i‡(
˘x
->
ch¨£t
->
utf8
) {

1331 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
];

1333 *
p
++ = (
u_ch¨
Ë(
vÆue
[1].
Àn
 / 2);

1335 
i
 = 0; i < 
vÆue
[1].
Àn
; i += 2) {

1336 
d°
 = 
	`ngx_hextoi
(&
vÆue
[1].
d©a
[
i
], 2);

1337 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1338 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1339 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1340  
NGX_CONF_ERROR
;

1343 *
p
++ = (
u_ch¨
Ë
d°
;

1346 
i
 /= 2;

1348 
˘x
->
ch¨£t
->
Àngth
 +
i
;

1349 
˘x
->
ch¨a˘îs
++;

1351 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
] + 1;

1353 
n
 = 
	`ngx_utf8_decode
(&
p
, 
i
);

1355 i‡(
n
 > 0xffff) {

1356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1357 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1358  
NGX_CONF_ERROR
;

1361 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1363 
d°2§c
 = 
µ
[
n
 >> 8];

1365 i‡(
d°2§c
 =
NULL
) {

1366 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1367 i‡(
d°2§c
 =
NULL
) {

1368  
NGX_CONF_ERROR
;

1371 
µ
[
n
 >> 8] = 
d°2§c
;

1374 
d°2§c
[
n
 & 0xff] = (
u_ch¨
Ë
§c
;

1377 
d°
 = 
	`ngx_hextoi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1378 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1379 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1380 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1381  
NGX_CONF_ERROR
;

1384 
èbÀ
->
§c2d°
[
§c
] = (
u_ch¨
Ë
d°
;

1385 
èbÀ
->
d°2§c
[
d°
] = (
u_ch¨
Ë
§c
;

1388  
NGX_CONF_OK
;

1389 
	}
}

1393 
	$ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1395 *
p
 = 
c⁄f
;

1397 
ngx_öt_t
 *
˝
;

1398 
ngx_°r_t
 *
vÆue
, 
v¨
;

1399 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1401 
˝
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1403 i‡(*
˝
 !
NGX_CONF_UNSET
) {

1407 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1409 i‡(
cmd
->
off£t
 =
	`off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
)

1410 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0)

1412 *
˝
 = 
NGX_HTTP_CHARSET_OFF
;

1413  
NGX_CONF_OK
;

1417 i‡(
vÆue
[1].
d©a
[0] == '$') {

1418 
v¨
.
Àn
 = 
vÆue
[1].len - 1;

1419 
v¨
.
d©a
 = 
vÆue
[1].data + 1;

1421 *
˝
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
v¨
);

1423 i‡(*
˝
 =
NGX_ERROR
) {

1424  
NGX_CONF_ERROR
;

1427 *
˝
 +
NGX_HTTP_CHARSET_VAR
;

1429  
NGX_CONF_OK
;

1432 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1433 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1435 *
˝
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1436 i‡(*
˝
 =
NGX_ERROR
) {

1437  
NGX_CONF_ERROR
;

1440  
NGX_CONF_OK
;

1441 
	}
}

1444 
ngx_öt_t


1445 
	$ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
)

1447 
ngx_uöt_t
 
i
;

1448 
ngx_hâp_ch¨£t_t
 *
c
;

1450 
c
 = 
ch¨£ts
->
ñts
;

1451 
i
 = 0; i < 
ch¨£ts
->
√…s
; i++) {

1452 i‡(
«me
->
Àn
 !
c
[
i
].name.len) {

1456 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, 
c
[
i
].name.data) == 0) {

1461 i‡(
i
 < 
ch¨£ts
->
√…s
) {

1462  
i
;

1465 
c
 = 
	`ngx_¨øy_push
(
ch¨£ts
);

1466 i‡(
c
 =
NULL
) {

1467  
NGX_ERROR
;

1470 
c
->
èbÀs
 = 
NULL
;

1471 
c
->
«me
 = *name;

1472 
c
->
Àngth
 = 0;

1474 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1475 
c
->
utf8
 = 1;

1478 
c
->
utf8
 = 0;

1481  
i
;

1482 
	}
}

1486 
	$ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1488 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1490 
mcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_maö_c⁄f_t
));

1491 i‡(
mcf
 =
NULL
) {

1492  
NULL
;

1495 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ch¨£ts
, 
cf
->
poﬁ
, 2, (
ngx_hâp_ch¨£t_t
))

1496 !
NGX_OK
)

1498  
NULL
;

1501 i‡(
	`ngx_¨øy_öô
(&
mcf
->
èbÀs
, 
cf
->
poﬁ
, 1,

1502 (
ngx_hâp_ch¨£t_èbÀs_t
))

1503 !
NGX_OK
)

1505  
NULL
;

1508 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ªcodes
, 
cf
->
poﬁ
, 2,

1509 (
ngx_hâp_ch¨£t_ªcode_t
))

1510 !
NGX_OK
)

1512  
NULL
;

1515  
mcf
;

1516 
	}
}

1520 
	$ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1522 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

1524 
lcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_loc_c⁄f_t
));

1525 i‡(
lcf
 =
NULL
) {

1526  
NULL
;

1536 
lcf
->
ch¨£t
 = 
NGX_CONF_UNSET
;

1537 
lcf
->
sour˚_ch¨£t
 = 
NGX_CONF_UNSET
;

1538 
lcf
->
ovîride_ch¨£t
 = 
NGX_CONF_UNSET
;

1540  
lcf
;

1541 
	}
}

1545 
	$ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1547 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1548 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1550 
ngx_uöt_t
 
i
;

1551 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1552 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1554 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1555 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1556 
ngx_hâp_ch¨£t_deÁu…_ty≥s
)

1557 !
NGX_OK
)

1559  
NGX_CONF_ERROR
;

1562 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ovîride_ch¨£t
, 
¥ev
->override_charset, 0);

1563 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ch¨£t
, 
¥ev
->ch¨£t, 
NGX_HTTP_CHARSET_OFF
);

1564 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sour˚_ch¨£t
, 
¥ev
->source_charset,

1565 
NGX_HTTP_CHARSET_OFF
);

1567 i‡(
c⁄f
->
ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1568 || 
c⁄f
->
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1569 || 
c⁄f
->
ch¨£t
 =c⁄f->
sour˚_ch¨£t
)

1571  
NGX_CONF_OK
;

1574 i‡(
c⁄f
->
sour˚_ch¨£t
 >
NGX_HTTP_CHARSET_VAR


1575 || 
c⁄f
->
ch¨£t
 >
NGX_HTTP_CHARSET_VAR
)

1577  
NGX_CONF_OK
;

1580 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1581 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1582 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1583 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1584 i‡(
c⁄f
->
sour˚_ch¨£t
 =
ªcode
[
i
].
§c


1585 && 
c⁄f
->
ch¨£t
 =
ªcode
[
i
].
d°
)

1587  
NGX_CONF_OK
;

1591 
ªcode
 = 
	`ngx_¨øy_push
(&
mcf
->
ªcodes
);

1592 i‡(
ªcode
 =
NULL
) {

1593  
NGX_CONF_ERROR
;

1596 
ªcode
->
§c
 = 
c⁄f
->
sour˚_ch¨£t
;

1597 
ªcode
->
d°
 = 
c⁄f
->
ch¨£t
;

1599  
NGX_CONF_OK
;

1600 
	}
}

1603 
ngx_öt_t


1604 
	$ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1606 
u_ch¨
 **
§c
, **
d°
;

1607 
ngx_öt_t
 
c
;

1608 
ngx_uöt_t
 
i
, 
t
;

1609 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1610 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1611 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀs
;

1612 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1614 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1615 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1617 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1618 
èbÀs
 = 
mcf
->èbÀs.
ñts
;

1619 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1621 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1623 
c
 = 
ªcode
[
i
].
§c
;

1625 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1627 i‡(
c
 =
èbÀs
[
t
].
§c
 && 
ªcode
[
i
].
d°
 ==Åables[t].dst) {

1628 
√xt
;

1631 i‡(
c
 =
èbÀs
[
t
].
d°
 && 
ªcode
[
i
].d° =èbÀs[t].
§c
) {

1632 
√xt
;

1636 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1638 &
ch¨£t
[
c
].
«me
, &ch¨£t[
ªcode
[
i
].
d°
].name);

1639  
NGX_ERROR
;

1641 
√xt
:

1646 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1648 
§c
 = 
ch¨£t
[
èbÀs
[
t
].src].tables;

1650 i‡(
§c
 =
NULL
) {

1651 
§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1652 i‡(
§c
 =
NULL
) {

1653  
NGX_ERROR
;

1656 
ch¨£t
[
èbÀs
[
t
].
§c
].tables = src;

1659 
d°
 = 
ch¨£t
[
èbÀs
[
t
].dst].tables;

1661 i‡(
d°
 =
NULL
) {

1662 
d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1663 i‡(
d°
 =
NULL
) {

1664  
NGX_ERROR
;

1667 
ch¨£t
[
èbÀs
[
t
].
d°
].tables = dst;

1670 
§c
[
èbÀs
[
t
].
d°
] =ÅabÀs[t].
§c2d°
;

1671 
d°
[
èbÀs
[
t
].
§c
] =ÅabÀs[t].
d°2§c
;

1674 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1675 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ch¨£t_hódî_fûãr
;

1677 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1678 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ch¨£t_body_fûãr
;

1680  
NGX_OK
;

1681 
	}
}

	@src/http/modules/ngx_http_chunked_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_chaö_t
 *
	m‰ì
;

15 
ngx_chaö_t
 *
	mbusy
;

16 } 
	tngx_hâp_chunked_fûãr_˘x_t
;

19 
ngx_öt_t
 
ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

22 
ngx_hâp_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ_˘x
 = {

23 
NULL
,

24 
ngx_hâp_chunked_fûãr_öô
,

26 
NULL
,

27 
NULL
,

29 
NULL
,

30 
NULL
,

32 
NULL
,

33 
NULL


37 
ngx_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ
 = {

38 
NGX_MODULE_V1
,

39 &
ngx_hâp_chunked_fûãr_moduÀ_˘x
,

40 
NULL
,

41 
NGX_HTTP_MODULE
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NULL
,

49 
NGX_MODULE_V1_PADDING


53 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

57 
ngx_öt_t


58 
	$ngx_hâp_chunked_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

61 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

63 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED


64 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NO_CONTENT


65 || 
r
 !r->
maö


66 || (
r
->
mëhod
 & 
NGX_HTTP_HEAD
))

68  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

71 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1) {

72 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

73 
r
->
kì∑live
 = 0;

76 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

78 i‡(
˛cf
->
chunked_å™s„r_ícodög
) {

79 
r
->
chunked
 = 1;

81 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

82 (
ngx_hâp_chunked_fûãr_˘x_t
));

83 i‡(
˘x
 =
NULL
) {

84  
NGX_ERROR
;

87 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_chunked_fûãr_moduÀ
);

90 
r
->
kì∑live
 = 0;

95  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_hâp_chunked_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

102 
u_ch¨
 *
chunk
;

103 
off_t
 
size
;

104 
ngx_öt_t
 
rc
;

105 
ngx_buf_t
 *
b
;

106 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
;

107 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

109 i‡(
ö
 =
NULL
 || !
r
->
chunked
 ||Ñ->
hódî_⁄ly
) {

110  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

113 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_chunked_fûãr_moduÀ
);

115 
out
 = 
NULL
;

116 
Œ
 = &
out
;

118 
size
 = 0;

119 
˛
 = 
ö
;

122 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

123 "hâ∞chunk: %d", 
	`ngx_buf_size
(
˛
->
buf
));

125 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

127 i‡(
˛
->
buf
->
Êush


128 || 
˛
->
buf
->
sync


129 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

130 || 
˛
->
buf
->
ö_fûe
)

132 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

133 i‡(
é
 =
NULL
) {

134  
NGX_ERROR
;

137 
é
->
buf
 = 
˛
->buf;

138 *
Œ
 = 
é
;

139 
Œ
 = &
é
->
√xt
;

142 i‡(
˛
->
√xt
 =
NULL
) {

146 
˛
 = cl->
√xt
;

149 i‡(
size
) {

150 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

151 i‡(
é
 =
NULL
) {

152  
NGX_ERROR
;

155 
b
 = 
é
->
buf
;

156 
chunk
 = 
b
->
°¨t
;

158 i‡(
chunk
 =
NULL
) {

161 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

162 i‡(
chunk
 =
NULL
) {

163  
NGX_ERROR
;

166 
b
->
°¨t
 = 
chunk
;

167 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

170 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

171 
b
->
mem‹y
 = 0;

172 
b
->
ãmp‹¨y
 = 1;

173 
b
->
pos
 = 
chunk
;

174 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

176 
é
->
√xt
 = 
out
;

177 
out
 = 
é
;

180 i‡(
˛
->
buf
->
œ°_buf
) {

181 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

182 i‡(
é
 =
NULL
) {

183  
NGX_ERROR
;

186 
b
 = 
é
->
buf
;

188 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

189 
b
->
ãmp‹¨y
 = 0;

190 
b
->
mem‹y
 = 1;

191 
b
->
œ°_buf
 = 1;

192 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

193 
b
->
œ°
 = b->
pos
 + 7;

195 
˛
->
buf
->
œ°_buf
 = 0;

197 *
Œ
 = 
é
;

199 i‡(
size
 == 0) {

200 
b
->
pos
 += 2;

203 } i‡(
size
 > 0) {

204 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

205 i‡(
é
 =
NULL
) {

206  
NGX_ERROR
;

209 
b
 = 
é
->
buf
;

211 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

212 
b
->
ãmp‹¨y
 = 0;

213 
b
->
mem‹y
 = 1;

214 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

215 
b
->
œ°
 = b->
pos
 + 2;

217 *
Œ
 = 
é
;

220 *
Œ
 = 
NULL
;

223 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

225 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

226 (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
);

228  
rc
;

229 
	}
}

232 
ngx_öt_t


233 
	$ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

235 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

236 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_chunked_hódî_fûãr
;

238 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

239 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_chunked_body_fûãr
;

241  
NGX_OK
;

242 
	}
}

	@src/http/modules/ngx_http_dav_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_DAV_COPY_BLOCK
 65536

	)

15 
	#NGX_HTTP_DAV_OFF
 2

	)

18 
	#NGX_HTTP_DAV_NO_DEPTH
 -3

	)

19 
	#NGX_HTTP_DAV_INVALID_DEPTH
 -2

	)

20 
	#NGX_HTTP_DAV_INFINITY_DEPTH
 -1

	)

24 
ngx_uöt_t
 
	mmëhods
;

25 
ngx_uöt_t
 
	mac˚ss
;

26 
ngx_uöt_t
 
	mmö_dñëe_dïth
;

27 
ngx_Êag_t
 
	m¸óã_fuŒ_put_∑th
;

28 } 
	tngx_hâp_dav_loc_c⁄f_t
;

32 
ngx_°r_t
 
	m∑th
;

33 
size_t
 
	mÀn
;

34 } 
	tngx_hâp_dav_c›y_˘x_t
;

37 
ngx_öt_t
 
ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

41 
ngx_öt_t
 
ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

42 
ngx_öt_t
 
ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
);

44 
ngx_öt_t
 
ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

45 
ngx_öt_t
 
ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

46 
ngx_öt_t
 
ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

48 
ngx_öt_t
 
ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
);

51 
ngx_öt_t
 
ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

53 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

55 
ngx_öt_t
 
ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
,

56 
ngx_°r_t
 *
∑th
);

58 
ngx_öt_t
 
ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
,Çgx_öt_à
dÊt
);

59 
ngx_öt_t
 
ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

60 
ngx_öt_t
 
nŸ_found
, *
Áûed
, 
u_ch¨
 *
∑th
);

61 
ngx_öt_t
 
ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
);

62 *
ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

63 *
ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

64 *
∑ª¡
, *
chûd
);

65 
ngx_öt_t
 
ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
);

68 
ngx_c⁄f_bômask_t
 
	gngx_hâp_dav_mëhods_mask
[] = {

69 { 
ngx_°rög
("off"), 
NGX_HTTP_DAV_OFF
 },

70 { 
ngx_°rög
("put"), 
NGX_HTTP_PUT
 },

71 { 
ngx_°rög
("dñëe"), 
NGX_HTTP_DELETE
 },

72 { 
ngx_°rög
("mkcﬁ"), 
NGX_HTTP_MKCOL
 },

73 { 
ngx_°rög
("c›y"), 
NGX_HTTP_COPY
 },

74 { 
ngx_°rög
("move"), 
NGX_HTTP_MOVE
 },

75 { 
ngx_nuŒ_°rög
, 0 }

79 
ngx_comm™d_t
 
	gngx_hâp_dav_comm™ds
[] = {

81 { 
ngx_°rög
("dav_methods"),

82 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

83 
ngx_c⁄f_£t_bômask_¶Ÿ
,

84 
NGX_HTTP_LOC_CONF_OFFSET
,

85 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mëhods
),

86 &
ngx_hâp_dav_mëhods_mask
 },

88 { 
ngx_°rög
("create_full_put_path"),

89 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

90 
ngx_c⁄f_£t_Êag_¶Ÿ
,

91 
NGX_HTTP_LOC_CONF_OFFSET
,

92 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
¸óã_fuŒ_put_∑th
),

93 
NULL
 },

95 { 
ngx_°rög
("min_delete_depth"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_num_¶Ÿ
,

98 
NGX_HTTP_LOC_CONF_OFFSET
,

99 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mö_dñëe_dïth
),

100 
NULL
 },

102 { 
ngx_°rög
("dav_access"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

104 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

105 
NGX_HTTP_LOC_CONF_OFFSET
,

106 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
ac˚ss
),

107 
NULL
 },

109 
ngx_nuŒ_comm™d


113 
ngx_hâp_moduÀ_t
 
	gngx_hâp_dav_moduÀ_˘x
 = {

114 
NULL
,

115 
ngx_hâp_dav_öô
,

117 
NULL
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
ngx_hâp_dav_¸óã_loc_c⁄f
,

124 
ngx_hâp_dav_mîge_loc_c⁄f


128 
ngx_moduÀ_t
 
	gngx_hâp_dav_moduÀ
 = {

129 
NGX_MODULE_V1
,

130 &
ngx_hâp_dav_moduÀ_˘x
,

131 
ngx_hâp_dav_comm™ds
,

132 
NGX_HTTP_MODULE
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NGX_MODULE_V1_PADDING


144 
ngx_öt_t


145 
	$ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

147 
ngx_öt_t
 
rc
;

148 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

150 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

152 i‡(!(
r
->
mëhod
 & 
dlcf
->
mëhods
)) {

153  
NGX_DECLINED
;

156 
r
->
mëhod
) {

158 
NGX_HTTP_PUT
:

160 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

161 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

163  
NGX_HTTP_CONFLICT
;

166 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

167 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

168 
r
->
ªque°_body_ö_˛ón_fûe
 = 1;

169 
r
->
ªque°_body_fûe_group_ac˚ss
 = 1;

170 
r
->
ªque°_body_fûe_log_Àvñ
 = 0;

172 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_dav_put_h™dÀr
);

174 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

175  
rc
;

178  
NGX_DONE
;

180 
NGX_HTTP_DELETE
:

182  
	`ngx_hâp_dav_dñëe_h™dÀr
(
r
);

184 
NGX_HTTP_MKCOL
:

186  
	`ngx_hâp_dav_mkcﬁ_h™dÀr
(
r
, 
dlcf
);

188 
NGX_HTTP_COPY
:

190  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

192 
NGX_HTTP_MOVE
:

194  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

197  
NGX_DECLINED
;

198 
	}
}

202 
	$ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

204 
size_t
 
roŸ
;

205 
time_t
 
d©e
;

206 
ngx_°r_t
 *
ãmp
, 
∑th
;

207 
ngx_uöt_t
 
°©us
;

208 
ngx_fûe_öfo_t
 
fi
;

209 
ngx_ext_ª«me_fûe_t
 
ext
;

210 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

212 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

213 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

217 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

219 
∑th
.
Àn
--;

221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

222 "hâ∞puàfûíame: \"%s\"", 
∑th
.
d©a
);

224 
ãmp
 = &
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
;

226 i‡(
	`ngx_fûe_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

227 
°©us
 = 
NGX_HTTP_CREATED
;

230 
°©us
 = 
NGX_HTTP_NO_CONTENT
;

232 i‡(
	`ngx_is_dú
(&
fi
)) {

233 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

234 "\"%s\" couldÇŸ bê¸óãd", 
∑th
.
d©a
);

236 i‡(
	`ngx_dñëe_fûe
(
ãmp
->
d©a
Ë=
NGX_FILE_ERROR
) {

237 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

238 
ngx_dñëe_fûe_n
 " \"%s\" failed",

239 
ãmp
->
d©a
);

242 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CONFLICT
);

247 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

249 
ext
.
ac˚ss
 = 
dlcf
->access;

250 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

251 
ext
.
time
 = -1;

252 
ext
.
¸óã_∑th
 = 
dlcf
->
¸óã_fuŒ_put_∑th
;

253 
ext
.
dñëe_fûe
 = 1;

254 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

256 i‡(
r
->
hódîs_ö
.
d©e
) {

257 
d©e
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.d©e->
vÆue
.
d©a
,

258 
r
->
hódîs_ö
.
d©e
->
vÆue
.
Àn
);

260 i‡(
d©e
 !
NGX_ERROR
) {

261 
ext
.
time
 = 
d©e
;

262 
ext
.
fd
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.fd;

266 i‡(
	`ngx_ext_ª«me_fûe
(
ãmp
, &
∑th
, &
ext
Ë!
NGX_OK
) {

267 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

271 i‡(
°©us
 =
NGX_HTTP_CREATED
) {

272 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

273 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

277 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

280 
r
->
hódîs_out
.
°©us
 = status;

281 
r
->
hódî_⁄ly
 = 1;

283 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_£nd_hódî
(r));

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

291 
size_t
 
roŸ
;

292 
ngx_îr_t
 
îr
;

293 
ngx_öt_t
 
rc
, 
dïth
;

294 
ngx_uöt_t
 
i
, 
d
, 
dú
;

295 
ngx_°r_t
 
∑th
;

296 
ngx_fûe_öfo_t
 
fi
;

297 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

299 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

300 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

302  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

305 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

307 i‡(
dlcf
->
mö_dñëe_dïth
) {

308 
d
 = 0;

310 
i
 = 0; i < 
r
->
uri
.
Àn
; ) {

311 i‡(
r
->
uri
.
d©a
[
i
++] == '/') {

312 i‡(++
d
 >
dlcf
->
mö_dñëe_dïth
 && 
i
 < 
r
->
uri
.
Àn
) {

313 
ok
;

318 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "ösufficõ¡ URI dïth:%òtÿDELETE", 
d
);

320  
NGX_HTTP_CONFLICT
;

323 
ok
:

325 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

327 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

328 "hâ∞dñëêfûíame: \"%s\"", 
∑th
.
d©a
);

330 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

331 
îr
 = 
ngx_î∫o
;

333 
rc
 = (
îr
 =
NGX_ENOTDIR
Ë? 
NGX_HTTP_CONFLICT
 : 
NGX_HTTP_NOT_FOUND
;

335  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

336 
rc
, 
ngx_lök_öfo_n
, 
∑th
.
d©a
);

339 i‡(
	`ngx_is_dú
(&
fi
)) {

341 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

342 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

343 "DELETE \"%s\" faûed", 
∑th
.
d©a
);

344  
NGX_HTTP_CONFLICT
;

347 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

349 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

350 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352  
NGX_HTTP_BAD_REQUEST
;

355 
∑th
.
Àn
 -= 2;

357 
dú
 = 1;

366 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 0);

368 i‡(
dïth
 !0 && dïth !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

369 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

371  
NGX_HTTP_BAD_REQUEST
;

374 
dú
 = 0;

377 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 
dú
);

379 i‡(
rc
 =
NGX_OK
) {

380  
NGX_HTTP_NO_CONTENT
;

383  
rc
;

384 
	}
}

387 
ngx_öt_t


388 
	$ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
)

390 *
Áûed
;

391 
ngx_åì_˘x_t
 
åì
;

393 i‡(
dú
) {

395 
åì
.
öô_h™dÀr
 = 
NULL
;

396 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

397 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_no›
;

398 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_dñëe_dú
;

399 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

400 
åì
.
d©a
 = 
NULL
;

401 
åì
.
Æloc
 = 0;

402 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

406 i‡(
	`ngx_wÆk_åì
(&
åì
, 
∑th
Ë!
NGX_OK
) {

407  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

410 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

411  
NGX_OK
;

414 
Áûed
 = 
ngx_dñëe_dú_n
;

418 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

419  
NGX_OK
;

422 
Áûed
 = 
ngx_dñëe_fûe_n
;

425  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

426 
NGX_HTTP_NOT_FOUND
, 
Áûed
, 
∑th
->
d©a
);

427 
	}
}

430 
ngx_öt_t


431 
	$ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

433 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

434 "hâ∞dñëêdú: \"%s\"", 
∑th
->
d©a
);

436 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

440 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_dú_n
,

441 
∑th
->
d©a
);

444  
NGX_OK
;

445 
	}
}

448 
ngx_öt_t


449 
	$ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

451 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

452 "hâ∞dñëêfûe: \"%s\"", 
∑th
->
d©a
);

454 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

458 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_fûe_n
,

459 
∑th
->
d©a
);

462  
NGX_OK
;

463 
	}
}

466 
ngx_öt_t


467 
	$ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

469  
NGX_OK
;

470 
	}
}

473 
ngx_öt_t


474 
	$ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
)

476 
u_ch¨
 *
p
;

477 
size_t
 
roŸ
;

478 
ngx_°r_t
 
∑th
;

480 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

481 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

483  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

486 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

487 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

489  
NGX_HTTP_CONFLICT
;

492 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

494 *(
p
 - 1) = '\0';

495 
r
->
uri
.
Àn
--;

497 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 "hâ∞mkcﬁÖ©h: \"%s\"", 
∑th
.
d©a
);

500 i‡(
	`ngx_¸óã_dú
(
∑th
.
d©a
, 
	`ngx_dú_ac˚ss
(
dlcf
->
ac˚ss
))

501 !
NGX_FILE_ERROR
)

503 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

504  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

507  
NGX_HTTP_CREATED
;

510  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

511 
NGX_HTTP_CONFLICT
, 
ngx_¸óã_dú_n
, 
∑th
.
d©a
);

512 
	}
}

515 
ngx_öt_t


516 
	$ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

518 
u_ch¨
 *
p
, *
ho°
, *
œ°
, 
ch
;

519 
size_t
 
Àn
, 
roŸ
;

520 
ngx_îr_t
 
îr
;

521 
ngx_öt_t
 
rc
, 
dïth
;

522 
ngx_uöt_t
 
ovîwrôe
, 
¶ash
, 
dú
, 
Êags
;

523 
ngx_°r_t
 
∑th
, 
uri
, 
duri
, 
¨gs
;

524 
ngx_åì_˘x_t
 
åì
;

525 
ngx_c›y_fûe_t
 
cf
;

526 
ngx_fûe_öfo_t
 
fi
;

527 
ngx_èbÀ_ñt_t
 *
de°
, *
ovî
;

528 
ngx_ext_ª«me_fûe_t
 
ext
;

529 
ngx_hâp_dav_c›y_˘x_t
 
c›y
;

530 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

532 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

533  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

536 
de°
 = 
r
->
hódîs_ö
.
de°ö©i⁄
;

538 i‡(
de°
 =
NULL
) {

539 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

541  
NGX_HTTP_BAD_REQUEST
;

544 
p
 = 
de°
->
vÆue
.
d©a
;

546 i‡(
p
[0] == '/') {

547 
œ°
 = 
p
 + 
de°
->
vÆue
.
Àn
;

548 
de°ö©i⁄_d⁄e
;

551 
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

553 i‡(
Àn
 == 0) {

554 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

556  
NGX_HTTP_BAD_REQUEST
;

559 #i‡(
NGX_HTTP_SSL
)

561 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

562 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "https://", ("https://") - 1)

565 
övÆid_de°ö©i⁄
;

568 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("https://") - 1;

573 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "http://", ("http://") - 1)

576 
övÆid_de°ö©i⁄
;

579 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("http://") - 1;

582 i‡(
	`ngx_°∫cmp
(
ho°
, 
r
->
hódîs_ö
.
£rvî
.
d©a
, 
Àn
) != 0) {

583 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

586 &
de°
->
vÆue
);

587  
NGX_HTTP_BAD_REQUEST
;

590 
œ°
 = 
de°
->
vÆue
.
d©a
 + de°->vÆue.
Àn
;

592 
p
 = 
ho°
 + 
Àn
;Ö < 
œ°
;Ö++) {

593 i‡(*
p
 == '/') {

594 
de°ö©i⁄_d⁄e
;

598 
övÆid_de°ö©i⁄
:

600 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

602 &
de°
->
vÆue
);

603  
NGX_HTTP_BAD_REQUEST
;

605 
de°ö©i⁄_d⁄e
:

607 
duri
.
Àn
 = 
œ°
 - 
p
;

608 
duri
.
d©a
 = 
p
;

609 
Êags
 = 0;

611 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
duri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

612 
övÆid_de°ö©i⁄
;

615 i‡((
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] ='/' && *(
œ°
 - 1) != '/')

616 || (
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] !'/' && *(
œ°
 - 1) == '/'))

618 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

621 &
r
->
uri
, &
de°
->
vÆue
);

622  
NGX_HTTP_CONFLICT
;

625 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

627 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

629 i‡(
r
->
mëhod
 =
NGX_HTTP_COPY
) {

630 i‡(
dïth
 != 0) {

631 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

633  
NGX_HTTP_BAD_REQUEST
;

637 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

639  
NGX_HTTP_BAD_REQUEST
;

643 
ovî
 = 
r
->
hódîs_ö
.
ovîwrôe
;

645 i‡(
ovî
) {

646 i‡(
ovî
->
vÆue
.
Àn
 == 1) {

647 
ch
 = 
ovî
->
vÆue
.
d©a
[0];

649 i‡(
ch
 == 'T' || ch == 't') {

650 
ovîwrôe
 = 1;

651 
ovîwrôe_d⁄e
;

654 i‡(
ch
 == 'F' || ch == 'f') {

655 
ovîwrôe
 = 0;

656 
ovîwrôe_d⁄e
;

661 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

663 &
ovî
->
vÆue
);

664  
NGX_HTTP_BAD_REQUEST
;

667 
ovîwrôe
 = 1;

669 
ovîwrôe_d⁄e
:

671 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

673 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

674 "hâ∞c›y from: \"%s\"", 
∑th
.
d©a
);

676 
uri
 = 
r
->uri;

677 
r
->
uri
 = 
duri
;

679 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
c›y
.
∑th
, &
roŸ
, 0);

681 
r
->
uri
 = uri;

683 
c›y
.
∑th
.
Àn
--;

685 i‡(
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
 - 1] == '/') {

686 
¶ash
 = 1;

687 
c›y
.
∑th
.
Àn
--;

688 
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
] = '\0';

691 
¶ash
 = 0;

694 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

695 "hâ∞c›yÅo: \"%s\"", 
c›y
.
∑th
.
d©a
);

697 i‡(
	`ngx_lök_öfo
(
c›y
.
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

698 
îr
 = 
ngx_î∫o
;

700 i‡(
îr
 !
NGX_ENOENT
) {

701  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

702 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

703 
c›y
.
∑th
.
d©a
);

708 
ovîwrôe
 = 0;

709 
dú
 = 0;

715 i‡(
	`ngx_is_dú
(&
fi
Ë&& !
¶ash
) {

716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

718 &
r
->
uri
, &r->
mëhod_«me
, &
de°
->
vÆue
);

719  
NGX_HTTP_CONFLICT
;

722 i‡(!
ovîwrôe
) {

723 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EEXIST
,

724 "\"%s\" couldÇŸ bê¸óãd", 
c›y
.
∑th
.
d©a
);

725  
NGX_HTTP_PRECONDITION_FAILED
;

728 
dú
 = 
	`ngx_is_dú
(&
fi
);

731 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

732  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

733 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

734 
∑th
.
d©a
);

737 i‡(
	`ngx_is_dú
(&
fi
)) {

739 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

741 "\"%V\" i†cﬁÀ˘i⁄", &
r
->
uri
);

742  
NGX_HTTP_BAD_REQUEST
;

745 i‡(
ovîwrôe
) {

746 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

747 "hâ∞dñëe: \"%s\"", 
c›y
.
∑th
.
d©a
);

749 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
c›y
.
∑th
, 
dú
);

751 i‡(
rc
 !
NGX_OK
) {

752  
rc
;

757 i‡(
	`ngx_is_dú
(&
fi
)) {

759 
∑th
.
Àn
 -= 2;

761 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

762 i‡(
	`ngx_ª«me_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©aË!
NGX_FILE_ERROR
) {

763  
NGX_HTTP_CREATED
;

767 i‡(
	`ngx_¸óã_dú
(
c›y
.
∑th
.
d©a
, 
	`ngx_fûe_ac˚ss
(&
fi
))

768 =
NGX_FILE_ERROR
)

770  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

771 
NGX_HTTP_NOT_FOUND
,

772 
ngx_¸óã_dú_n
, 
c›y
.
∑th
.
d©a
);

775 
c›y
.
Àn
 = 
∑th
.len;

777 
åì
.
öô_h™dÀr
 = 
NULL
;

778 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_c›y_åì_fûe
;

779 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú
;

780 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú_time
;

781 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_no›
;

782 
åì
.
d©a
 = &
c›y
;

783 
åì
.
Æloc
 = 0;

784 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

786 i‡(
	`ngx_wÆk_åì
(&
åì
, &
∑th
Ë=
NGX_OK
) {

788 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

789 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 1);

791 i‡(
rc
 !
NGX_OK
) {

792  
rc
;

796  
NGX_HTTP_CREATED
;

801 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

803 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

805 
ext
.
ac˚ss
 = 0;

806 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

807 
ext
.
time
 = -1;

808 
ext
.
¸óã_∑th
 = 1;

809 
ext
.
dñëe_fûe
 = 0;

810 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

812 i‡(
	`ngx_ext_ª«me_fûe
(&
∑th
, &
c›y
.∑th, &
ext
Ë=
NGX_OK
) {

813  
NGX_HTTP_NO_CONTENT
;

816  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

819 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

821 
cf
.
size
 = 
	`ngx_fûe_size
(&
fi
);

822 
cf
.
buf_size
 = 0;

823 
cf
.
ac˚ss
 = 
dlcf
->access;

824 
cf
.
time
 = 
	`ngx_fûe_mtime
(&
fi
);

825 
cf
.
log
 = 
r
->
c⁄√˘i⁄
->log;

827 i‡(
	`ngx_c›y_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©a, &
cf
Ë=
NGX_OK
) {

828  
NGX_HTTP_NO_CONTENT
;

832  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

833 
	}
}

836 
ngx_öt_t


837 
	$ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

839 
u_ch¨
 *
p
, *
dú
;

840 
size_t
 
Àn
;

841 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

843 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

844 "hâ∞c›y dú: \"%s\"", 
∑th
->
d©a
);

846 
c›y
 = 
˘x
->
d©a
;

848 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

850 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

851 i‡(
dú
 =
NULL
) {

852  
NGX_ABORT
;

855 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

856 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

858 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

859 "hâ∞c›y dúÅo: \"%s\"", 
dú
);

861 i‡(
	`ngx_¸óã_dú
(
dú
, 
	`ngx_dú_ac˚ss
(
˘x
->
ac˚ss
)Ë=
NGX_FILE_ERROR
) {

862 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_¸óã_dú_n
,

863 
dú
);

866 
	`ngx_‰ì
(
dú
);

868  
NGX_OK
;

869 
	}
}

872 
ngx_öt_t


873 
	$ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

875 
u_ch¨
 *
p
, *
dú
;

876 
size_t
 
Àn
;

877 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

879 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

880 "hâ∞c›y dúÅime: \"%s\"", 
∑th
->
d©a
);

882 
c›y
 = 
˘x
->
d©a
;

884 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

886 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

887 i‡(
dú
 =
NULL
) {

888  
NGX_ABORT
;

891 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

892 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

894 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

895 "hâ∞c›y dúÅimêto: \"%s\"", 
dú
);

897 #i‡(
NGX_WIN32
)

899 
ngx_fd_t
 
fd
;

901 
fd
 = 
	`ngx_›í_fûe
(
dú
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

903 i‡(
fd
 =
NGX_INVALID_FILE
) {

904 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_›í_fûe_n
, 
dú
);

905 
Áûed
;

908 i‡(
	`ngx_£t_fûe_time
(
NULL
, 
fd
, 
˘x
->
mtime
Ë!
NGX_OK
) {

909 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

910 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

913 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

914 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

915 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
dú
);

919 
Áûed
:

923 i‡(
	`ngx_£t_fûe_time
(
dú
, 0, 
˘x
->
mtime
Ë!
NGX_OK
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

925 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

930 
	`ngx_‰ì
(
dú
);

932  
NGX_OK
;

933 
	}
}

936 
ngx_öt_t


937 
	$ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

939 
u_ch¨
 *
p
, *
fûe
;

940 
size_t
 
Àn
;

941 
ngx_c›y_fûe_t
 
cf
;

942 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

944 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

945 "hâ∞c›y fûe: \"%s\"", 
∑th
->
d©a
);

947 
c›y
 = 
˘x
->
d©a
;

949 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

951 
fûe
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

952 i‡(
fûe
 =
NULL
) {

953  
NGX_ABORT
;

956 
p
 = 
	`ngx_˝ymem
(
fûe
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

957 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

959 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

960 "hâ∞c›y fûêto: \"%s\"", 
fûe
);

962 
cf
.
size
 = 
˘x
->size;

963 
cf
.
buf_size
 = 0;

964 
cf
.
ac˚ss
 = 
˘x
->access;

965 
cf
.
time
 = 
˘x
->
mtime
;

966 
cf
.
log
 = 
˘x
->log;

968 (Ë
	`ngx_c›y_fûe
(
∑th
->
d©a
, 
fûe
, &
cf
);

970 
	`ngx_‰ì
(
fûe
);

972  
NGX_OK
;

973 
	}
}

976 
ngx_öt_t


977 
	$ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
dÊt
)

979 
ngx_èbÀ_ñt_t
 *
dïth
;

981 
dïth
 = 
r
->
hódîs_ö
.depth;

983 i‡(
dïth
 =
NULL
) {

984  
dÊt
;

987 i‡(
dïth
->
vÆue
.
Àn
 == 1) {

989 i‡(
dïth
->
vÆue
.
d©a
[0] == '0') {

993 i‡(
dïth
->
vÆue
.
d©a
[0] == '1') {

999 i‡(
dïth
->
vÆue
.
Àn
 == ("infinity") - 1

1000 && 
	`ngx_°rcmp
(
dïth
->
vÆue
.
d©a
, "infinity") == 0)

1002  
NGX_HTTP_DAV_INFINITY_DEPTH
;

1006 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1008 &
dïth
->
vÆue
);

1010  
NGX_HTTP_DAV_INVALID_DEPTH
;

1011 
	}
}

1014 
ngx_öt_t


1015 
	$ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, 
ngx_öt_t
 
nŸ_found
,

1016 *
Áûed
, 
u_ch¨
 *
∑th
)

1018 
ngx_öt_t
 
rc
;

1019 
ngx_uöt_t
 
Àvñ
;

1021 i‡(
îr
 =
NGX_ENOENT
 ||Éº =
NGX_ENOTDIR
 ||Éº =
NGX_ENAMETOOLONG
) {

1022 
Àvñ
 = 
NGX_LOG_ERR
;

1023 
rc
 = 
nŸ_found
;

1025 } i‡(
îr
 =
NGX_EACCES
 ||Éº =
NGX_EPERM
) {

1026 
Àvñ
 = 
NGX_LOG_ERR
;

1027 
rc
 = 
NGX_HTTP_FORBIDDEN
;

1029 } i‡(
îr
 =
NGX_EEXIST
) {

1030 
Àvñ
 = 
NGX_LOG_ERR
;

1031 
rc
 = 
NGX_HTTP_NOT_ALLOWED
;

1033 } i‡(
îr
 =
NGX_ENOSPC
) {

1034 
Àvñ
 = 
NGX_LOG_CRIT
;

1035 
rc
 = 
NGX_HTTP_INSUFFICIENT_STORAGE
;

1038 
Àvñ
 = 
NGX_LOG_CRIT
;

1039 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1042 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%†\"%s\" faûed", 
Áûed
, 
∑th
);

1044  
rc
;

1045 
	}
}

1048 
ngx_öt_t


1049 
	$ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
)

1051 
u_ch¨
 *
loˇti⁄
;

1052 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1054 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

1055 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1056  
NGX_ERROR
;

1059 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1061 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
) {

1062 
loˇti⁄
 = 
∑th
 + 
˛cf
->
roŸ
.
Àn
;

1065 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
uri
.
Àn
);

1066 i‡(
loˇti⁄
 =
NULL
) {

1067  
NGX_ERROR
;

1070 
	`ngx_mem˝y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

1078 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Ñ->
uri
.len;

1079 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

1081  
NGX_OK
;

1082 
	}
}

1086 
	$ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1088 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
;

1090 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_dav_loc_c⁄f_t
));

1091 i‡(
c⁄f
 =
NULL
) {

1092  
NULL
;

1101 
c⁄f
->
mö_dñëe_dïth
 = 
NGX_CONF_UNSET_UINT
;

1102 
c⁄f
->
ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1103 
c⁄f
->
¸óã_fuŒ_put_∑th
 = 
NGX_CONF_UNSET
;

1105  
c⁄f
;

1106 
	}
}

1110 
	$ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1112 
ngx_hâp_dav_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1113 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1115 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
mëhods
, 
¥ev
->methods,

1116 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_DAV_OFF
));

1118 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mö_dñëe_dïth
,

1119 
¥ev
->
mö_dñëe_dïth
, 0);

1121 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ac˚ss
, 
¥ev
->access, 0600);

1123 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¸óã_fuŒ_put_∑th
,

1124 
¥ev
->
¸óã_fuŒ_put_∑th
, 0);

1126  
NGX_CONF_OK
;

1127 
	}
}

1130 
ngx_öt_t


1131 
	$ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
)

1133 
ngx_hâp_h™dÀr_±
 *
h
;

1134 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1136 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1138 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1139 i‡(
h
 =
NULL
) {

1140  
NGX_ERROR
;

1143 *
h
 = 
ngx_hâp_dav_h™dÀr
;

1145  
NGX_OK
;

1146 
	}
}

	@src/http/modules/ngx_http_degradation_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
size_t
 
	msbrk_size
;

15 } 
	tngx_hâp_degød©i⁄_maö_c⁄f_t
;

19 
ngx_uöt_t
 
	mdegøde
;

20 } 
	tngx_hâp_degød©i⁄_loc_c⁄f_t
;

23 
ngx_c⁄f_íum_t
 
	gngx_hâp_degøde
[] = {

24 { 
ngx_°rög
("204"), 204 },

25 { 
ngx_°rög
("444"), 444 },

26 { 
ngx_nuŒ_°rög
, 0 }

30 *
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 *
ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

35 *
c⁄f
);

36 
ngx_öt_t
 
ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_degød©i⁄_comm™ds
[] = {

41 { 
ngx_°rög
("degradation"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

43 
ngx_hâp_degød©i⁄
,

44 
NGX_HTTP_MAIN_CONF_OFFSET
,

46 
NULL
 },

48 { 
ngx_°rög
("degrade"),

49 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_íum_¶Ÿ
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_degød©i⁄_loc_c⁄f_t
, 
degøde
),

53 &
ngx_hâp_degøde
 },

55 
ngx_nuŒ_comm™d


59 
ngx_hâp_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ_˘x
 = {

60 
NULL
,

61 
ngx_hâp_degød©i⁄_öô
,

63 
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
,

64 
NULL
,

66 
NULL
,

67 
NULL
,

69 
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
,

70 
ngx_hâp_degød©i⁄_mîge_loc_c⁄f


74 
ngx_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_hâp_degød©i⁄_moduÀ_˘x
,

77 
ngx_hâp_degød©i⁄_comm™ds
,

78 
NGX_HTTP_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_öt_t


91 
	$ngx_hâp_degød©i⁄_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

93 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
dlcf
;

95 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

97 i‡(
dlcf
->
degøde
 && 
	`ngx_hâp_degøded
(
r
)) {

98  
dlcf
->
degøde
;

101  
NGX_DECLINED
;

102 
	}
}

105 
ngx_uöt_t


106 
	$ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *
r
)

108 
time_t
 
now
;

109 
ngx_uöt_t
 
log
;

110 
size_t
 
sbrk_size
;

111 
time_t
 
sbrk_time
;

112 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

114 
dmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

116 i‡(
dmcf
->
sbrk_size
) {

118 
log
 = 0;

119 
now
 = 
	`ngx_time
();

123 i‡(
now
 !
sbrk_time
) {

132 
sbrk_size
 = (
size_t
Ë
	`sbrk
(0Ë- ((
uöçå_t
Ë
ngx_∑Œoc
 & ~0x3FFFFF);

133 
sbrk_time
 = 
now
;

134 
log
 = 1;

139 i‡(
sbrk_size
 >
dmcf
->sbrk_size) {

140 i‡(
log
) {

141 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143 
sbrk_size
 / (1024 * 1024));

151 
	}
}

155 
	$ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

157 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

159 
dmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_maö_c⁄f_t
));

160 i‡(
dmcf
 =
NULL
) {

161  
NULL
;

164  
dmcf
;

165 
	}
}

169 
	$ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

171 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
;

173 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_loc_c⁄f_t
));

174 i‡(
c⁄f
 =
NULL
) {

175  
NULL
;

178 
c⁄f
->
degøde
 = 
NGX_CONF_UNSET_UINT
;

180  
c⁄f
;

181 
	}
}

185 
	$ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

187 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

188 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

190 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
degøde
, 
¥ev
->degrade, 0);

192  
NGX_CONF_OK
;

193 
	}
}

197 
	$ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

199 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
 = 
c⁄f
;

201 
ngx_°r_t
 *
vÆue
, 
s
;

203 
vÆue
 = 
cf
->
¨gs
->
ñts
;

205 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "sbrk=", 5) == 0) {

207 
s
.
Àn
 = 
vÆue
[1].len - 5;

208 
s
.
d©a
 = 
vÆue
[1].data + 5;

210 
dmcf
->
sbrk_size
 = 
	`ngx_∑r£_size
(&
s
);

211 i‡(
dmcf
->
sbrk_size
 =(
size_t
Ë
NGX_ERROR
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

213 "övÆid sbrk sizê\"%V\"", &
vÆue
[1]);

214  
NGX_CONF_ERROR
;

217  
NGX_CONF_OK
;

220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

223  
NGX_CONF_ERROR
;

224 
	}
}

227 
ngx_öt_t


228 
	$ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
)

230 
ngx_hâp_h™dÀr_±
 *
h
;

231 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

233 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

235 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

236 i‡(
h
 =
NULL
) {

237  
NGX_ERROR
;

240 *
h
 = 
ngx_hâp_degød©i⁄_h™dÀr
;

242  
NGX_OK
;

243 
	}
}

	@src/http/modules/ngx_http_empty_gif_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

13 *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_hâp_em±y_gif_comm™ds
[] = {

17 { 
ngx_°rög
("empty_gif"),

18 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

19 
ngx_hâp_em±y_gif
,

22 
NULL
 },

24 
ngx_nuŒ_comm™d


30 
u_ch¨
 
	gngx_em±y_gif
[] = {

78 
ngx_hâp_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ_˘x
 = {

79 
NULL
,

80 
NULL
,

82 
NULL
,

83 
NULL
,

85 
NULL
,

86 
NULL
,

88 
NULL
,

89 
NULL


93 
ngx_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ
 = {

94 
NGX_MODULE_V1
,

95 &
ngx_hâp_em±y_gif_moduÀ_˘x
,

96 
ngx_hâp_em±y_gif_comm™ds
,

97 
NGX_HTTP_MODULE
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NGX_MODULE_V1_PADDING


109 
ngx_°r_t
 
	gngx_hâp_gif_ty≥
 = 
ngx_°rög
("image/gif");

112 
ngx_öt_t


113 
	$ngx_hâp_em±y_gif_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

115 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

117 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

118  
NGX_HTTP_NOT_ALLOWED
;

121 
	`ngx_memzîo
(&
cv
, (
ngx_hâp_com∂ex_vÆue_t
));

123 
cv
.
vÆue
.
Àn
 = (
ngx_em±y_gif
);

124 
cv
.
vÆue
.
d©a
 = 
ngx_em±y_gif
;

125 
r
->
hódîs_out
.
œ°_modifõd_time
 = 23349600;

127  
	`ngx_hâp_£nd_ª•⁄£
(
r
, 
NGX_HTTP_OK
, &
ngx_hâp_gif_ty≥
, &
cv
);

128 
	}
}

132 
	$ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

134 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

136 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

137 
˛cf
->
h™dÀr
 = 
ngx_hâp_em±y_gif_h™dÀr
;

139  
NGX_CONF_OK
;

140 
	}
}

	@src/http/modules/ngx_http_fastcgi_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

16 
ngx_°r_t
 
	mödex
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_¨øy_t
 *
	mˇtch_°dîr
;

24 
ngx_¨øy_t
 *
	mÁ°cgi_Àngths
;

25 
ngx_¨øy_t
 *
	mÁ°cgi_vÆues
;

27 
ngx_hash_t
 
	mhódîs_hash
;

28 
ngx_uöt_t
 
	mhódî_∑øms
;

30 
ngx_Êag_t
 
	mkìp_c⁄n
;

32 #i‡(
NGX_HTTP_CACHE
)

33 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

36 #i‡(
NGX_PCRE
)

37 
ngx_ªgex_t
 *
	m•lô_ªgex
;

38 
ngx_°r_t
 
	m•lô_«me
;

40 } 
	tngx_hâp_Á°cgi_loc_c⁄f_t
;

44 
	mngx_hâp_Á°cgi_°_vîsi⁄
 = 0,

45 
	mngx_hâp_Á°cgi_°_ty≥
,

46 
	mngx_hâp_Á°cgi_°_ªque°_id_hi
,

47 
	mngx_hâp_Á°cgi_°_ªque°_id_lo
,

48 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
,

49 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
,

50 
	mngx_hâp_Á°cgi_°_∑ddög_Àngth
,

51 
	mngx_hâp_Á°cgi_°_ª£rved
,

52 
	mngx_hâp_Á°cgi_°_d©a
,

53 
	mngx_hâp_Á°cgi_°_∑ddög


54 } 
	tngx_hâp_Á°cgi_°©e_e
;

58 
u_ch¨
 *
	m°¨t
;

59 
u_ch¨
 *
	míd
;

60 } 
	tngx_hâp_Á°cgi_•lô_∑π_t
;

64 
ngx_hâp_Á°cgi_°©e_e
 
	m°©e
;

65 
u_ch¨
 *
	mpos
;

66 
u_ch¨
 *
	mœ°
;

67 
ngx_uöt_t
 
	mty≥
;

68 
size_t
 
	mÀngth
;

69 
size_t
 
	m∑ddög
;

71 
	mÁ°cgi_°dout
:1;

72 
	mœrge_°dîr
:1;

74 
ngx_¨øy_t
 *
	m•lô_∑πs
;

76 
ngx_°r_t
 
	ms¸ùt_«me
;

77 
ngx_°r_t
 
	m∑th_öfo
;

78 } 
	tngx_hâp_Á°cgi_˘x_t
;

81 
	#NGX_HTTP_FASTCGI_RESPONDER
 1

	)

83 
	#NGX_HTTP_FASTCGI_KEEP_CONN
 1

	)

85 
	#NGX_HTTP_FASTCGI_BEGIN_REQUEST
 1

	)

86 
	#NGX_HTTP_FASTCGI_ABORT_REQUEST
 2

	)

87 
	#NGX_HTTP_FASTCGI_END_REQUEST
 3

	)

88 
	#NGX_HTTP_FASTCGI_PARAMS
 4

	)

89 
	#NGX_HTTP_FASTCGI_STDIN
 5

	)

90 
	#NGX_HTTP_FASTCGI_STDOUT
 6

	)

91 
	#NGX_HTTP_FASTCGI_STDERR
 7

	)

92 
	#NGX_HTTP_FASTCGI_DATA
 8

	)

96 
u_ch¨
 
	mvîsi⁄
;

97 
u_ch¨
 
	mty≥
;

98 
u_ch¨
 
	mªque°_id_hi
;

99 
u_ch¨
 
	mªque°_id_lo
;

100 
u_ch¨
 
	mc⁄ã¡_Àngth_hi
;

101 
u_ch¨
 
	mc⁄ã¡_Àngth_lo
;

102 
u_ch¨
 
	m∑ddög_Àngth
;

103 
u_ch¨
 
	mª£rved
;

104 } 
	tngx_hâp_Á°cgi_hódî_t
;

108 
u_ch¨
 
	mrﬁe_hi
;

109 
u_ch¨
 
	mrﬁe_lo
;

110 
u_ch¨
 
	mÊags
;

111 
u_ch¨
 
	mª£rved
[5];

112 } 
	tngx_hâp_Á°cgi_begö_ªque°_t
;

116 
u_ch¨
 
	mvîsi⁄
;

117 
u_ch¨
 
	mty≥
;

118 
u_ch¨
 
	mªque°_id_hi
;

119 
u_ch¨
 
	mªque°_id_lo
;

120 } 
	tngx_hâp_Á°cgi_hódî_smÆl_t
;

124 
ngx_hâp_Á°cgi_hódî_t
 
	mh0
;

125 
ngx_hâp_Á°cgi_begö_ªque°_t
 
	mbr
;

126 
ngx_hâp_Á°cgi_hódî_smÆl_t
 
	mh1
;

127 } 
	tngx_hâp_Á°cgi_ªque°_°¨t_t
;

130 
ngx_öt_t
 
ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

132 #i‡(
NGX_HTTP_CACHE
)

133 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

135 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

136 
ngx_öt_t
 
ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

137 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

138 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
);

139 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
,

140 
ngx_buf_t
 *
buf
);

141 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

142 
ngx_hâp_Á°cgi_˘x_t
 *
f
);

143 
ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

144 
ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

145 
ngx_öt_t
 
rc
);

147 
ngx_öt_t
 
ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

148 *
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

149 *
ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

150 *
∑ª¡
, *
chûd
);

151 
ngx_öt_t
 
ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

152 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
);

154 
ngx_öt_t
 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

155 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

156 
ngx_öt_t
 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

157 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

158 
ngx_hâp_Á°cgi_˘x_t
 *
ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
,

159 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

161 *
ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

162 *
c⁄f
);

163 *
ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
,

164 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

165 *
ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

166 *
c⁄f
);

167 #i‡(
NGX_HTTP_CACHE
)

168 *
ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

169 *
c⁄f
);

170 *
ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

171 *
c⁄f
);

174 *
ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
,

175 *
d©a
);

178 
ngx_c⁄f_po°_t
 
	gngx_hâp_Á°cgi_low©_po°
 =

179 { 
ngx_hâp_Á°cgi_low©_check
 };

182 
ngx_c⁄f_bômask_t
 
	gngx_hâp_Á°cgi_√xt_up°ªam_masks
[] = {

183 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

184 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

185 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

186 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

187 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

188 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

189 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

190 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

191 { 
ngx_nuŒ_°rög
, 0 }

195 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
;

198 
ngx_comm™d_t
 
	gngx_hâp_Á°cgi_comm™ds
[] = {

200 { 
ngx_°rög
("fastcgi_pass"),

201 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

202 
ngx_hâp_Á°cgi_∑ss
,

203 
NGX_HTTP_LOC_CONF_OFFSET
,

205 
NULL
 },

207 { 
ngx_°rög
("fastcgi_index"),

208 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

209 
ngx_c⁄f_£t_°r_¶Ÿ
,

210 
NGX_HTTP_LOC_CONF_OFFSET
,

211 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ödex
),

212 
NULL
 },

214 { 
ngx_°rög
("fastcgi_split_path_info"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

216 
ngx_hâp_Á°cgi_•lô_∑th_öfo
,

217 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
NULL
 },

221 { 
ngx_°rög
("fastcgi_store"),

222 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

223 
ngx_hâp_Á°cgi_°‹e
,

224 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
NULL
 },

228 { 
ngx_°rög
("fastcgi_store_access"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

230 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

231 
NGX_HTTP_LOC_CONF_OFFSET
,

232 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

233 
NULL
 },

235 { 
ngx_°rög
("fastcgi_ignore_client_abort"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

237 
ngx_c⁄f_£t_Êag_¶Ÿ
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

239 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

240 
NULL
 },

242 { 
ngx_°rög
("fastcgi_bind"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

244 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

246 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

247 
NULL
 },

249 { 
ngx_°rög
("fastcgi_connect_timeout"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

251 
ngx_c⁄f_£t_m£c_¶Ÿ
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

253 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

254 
NULL
 },

256 { 
ngx_°rög
("fastcgi_send_timeout"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

258 
ngx_c⁄f_£t_m£c_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

261 
NULL
 },

263 { 
ngx_°rög
("fastcgi_send_lowat"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

265 
ngx_c⁄f_£t_size_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

268 &
ngx_hâp_Á°cgi_low©_po°
 },

270 { 
ngx_°rög
("fastcgi_buffer_size"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

272 
ngx_c⁄f_£t_size_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

275 
NULL
 },

277 { 
ngx_°rög
("fastcgi_pass_request_headers"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

279 
ngx_c⁄f_£t_Êag_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

282 
NULL
 },

284 { 
ngx_°rög
("fastcgi_pass_request_body"),

285 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

286 
ngx_c⁄f_£t_Êag_¶Ÿ
,

287 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

289 
NULL
 },

291 { 
ngx_°rög
("fastcgi_intercept_errors"),

292 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

293 
ngx_c⁄f_£t_Êag_¶Ÿ
,

294 
NGX_HTTP_LOC_CONF_OFFSET
,

295 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

296 
NULL
 },

298 { 
ngx_°rög
("fastcgi_read_timeout"),

299 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

300 
ngx_c⁄f_£t_m£c_¶Ÿ
,

301 
NGX_HTTP_LOC_CONF_OFFSET
,

302 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

303 
NULL
 },

305 { 
ngx_°rög
("fastcgi_buffers"),

306 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

307 
ngx_c⁄f_£t_bufs_¶Ÿ
,

308 
NGX_HTTP_LOC_CONF_OFFSET
,

309 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

310 
NULL
 },

312 { 
ngx_°rög
("fastcgi_busy_buffers_size"),

313 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

314 
ngx_c⁄f_£t_size_¶Ÿ
,

315 
NGX_HTTP_LOC_CONF_OFFSET
,

316 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

317 
NULL
 },

319 #i‡(
NGX_HTTP_CACHE
)

321 { 
ngx_°rög
("fastcgi_cache"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

323 
ngx_hâp_Á°cgi_ˇche
,

324 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
NULL
 },

328 { 
ngx_°rög
("fastcgi_cache_key"),

329 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

330 
ngx_hâp_Á°cgi_ˇche_key
,

331 
NGX_HTTP_LOC_CONF_OFFSET
,

333 
NULL
 },

335 { 
ngx_°rög
("fastcgi_cache_path"),

336 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

337 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

340 &
ngx_hâp_Á°cgi_moduÀ
 },

342 { 
ngx_°rög
("fastcgi_cache_bypass"),

343 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

344 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

345 
NGX_HTTP_LOC_CONF_OFFSET
,

346 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

347 
NULL
 },

349 { 
ngx_°rög
("fastcgi_no_cache"),

350 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

351 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

352 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

354 
NULL
 },

356 { 
ngx_°rög
("fastcgi_cache_valid"),

357 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

358 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

359 
NGX_HTTP_LOC_CONF_OFFSET
,

360 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

361 
NULL
 },

363 { 
ngx_°rög
("fastcgi_cache_min_uses"),

364 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

365 
ngx_c⁄f_£t_num_¶Ÿ
,

366 
NGX_HTTP_LOC_CONF_OFFSET
,

367 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

368 
NULL
 },

370 { 
ngx_°rög
("fastcgi_cache_use_stale"),

371 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

372 
ngx_c⁄f_£t_bômask_¶Ÿ
,

373 
NGX_HTTP_LOC_CONF_OFFSET
,

374 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

375 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

377 { 
ngx_°rög
("fastcgi_cache_methods"),

378 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

379 
ngx_c⁄f_£t_bômask_¶Ÿ
,

380 
NGX_HTTP_LOC_CONF_OFFSET
,

381 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

382 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

384 { 
ngx_°rög
("fastcgi_cache_lock"),

385 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

386 
ngx_c⁄f_£t_Êag_¶Ÿ
,

387 
NGX_HTTP_LOC_CONF_OFFSET
,

388 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

389 
NULL
 },

391 { 
ngx_°rög
("fastcgi_cache_lock_timeout"),

392 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

393 
ngx_c⁄f_£t_m£c_¶Ÿ
,

394 
NGX_HTTP_LOC_CONF_OFFSET
,

395 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

396 
NULL
 },

400 { 
ngx_°rög
("fastcgi_temp_path"),

401 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

402 
ngx_c⁄f_£t_∑th_¶Ÿ
,

403 
NGX_HTTP_LOC_CONF_OFFSET
,

404 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

405 
NULL
 },

407 { 
ngx_°rög
("fastcgi_max_temp_file_size"),

408 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

409 
ngx_c⁄f_£t_size_¶Ÿ
,

410 
NGX_HTTP_LOC_CONF_OFFSET
,

411 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

412 
NULL
 },

414 { 
ngx_°rög
("fastcgi_temp_file_write_size"),

415 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

416 
ngx_c⁄f_£t_size_¶Ÿ
,

417 
NGX_HTTP_LOC_CONF_OFFSET
,

418 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

419 
NULL
 },

421 { 
ngx_°rög
("fastcgi_next_upstream"),

422 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

423 
ngx_c⁄f_£t_bômask_¶Ÿ
,

424 
NGX_HTTP_LOC_CONF_OFFSET
,

425 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

426 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

428 { 
ngx_°rög
("fastcgi_param"),

429 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

430 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

431 
NGX_HTTP_LOC_CONF_OFFSET
,

432 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
∑øms_sour˚
),

433 
NULL
 },

435 { 
ngx_°rög
("fastcgi_pass_header"),

436 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

437 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

438 
NGX_HTTP_LOC_CONF_OFFSET
,

439 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

440 
NULL
 },

442 { 
ngx_°rög
("fastcgi_hide_header"),

443 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

444 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

445 
NGX_HTTP_LOC_CONF_OFFSET
,

446 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

447 
NULL
 },

449 { 
ngx_°rög
("fastcgi_ignore_headers"),

450 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

451 
ngx_c⁄f_£t_bômask_¶Ÿ
,

452 
NGX_HTTP_LOC_CONF_OFFSET
,

453 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

454 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

456 { 
ngx_°rög
("fastcgi_catch_stderr"),

457 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

458 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

459 
NGX_HTTP_LOC_CONF_OFFSET
,

460 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ˇtch_°dîr
),

461 
NULL
 },

463 { 
ngx_°rög
("fastcgi_keep_conn"),

464 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

465 
ngx_c⁄f_£t_Êag_¶Ÿ
,

466 
NGX_HTTP_LOC_CONF_OFFSET
,

467 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
kìp_c⁄n
),

468 
NULL
 },

470 
ngx_nuŒ_comm™d


474 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ_˘x
 = {

475 
ngx_hâp_Á°cgi_add_v¨übÀs
,

476 
NULL
,

478 
NULL
,

479 
NULL
,

481 
NULL
,

482 
NULL
,

484 
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
,

485 
ngx_hâp_Á°cgi_mîge_loc_c⁄f


489 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
 = {

490 
NGX_MODULE_V1
,

491 &
ngx_hâp_Á°cgi_moduÀ_˘x
,

492 
ngx_hâp_Á°cgi_comm™ds
,

493 
NGX_HTTP_MODULE
,

494 
NULL
,

495 
NULL
,

496 
NULL
,

497 
NULL
,

498 
NULL
,

499 
NULL
,

500 
NULL
,

501 
NGX_MODULE_V1_PADDING


505 
ngx_hâp_Á°cgi_ªque°_°¨t_t
 
	gngx_hâp_Á°cgi_ªque°_°¨t
 = {

507 
NGX_HTTP_FASTCGI_BEGIN_REQUEST
,

511 (
ngx_hâp_Á°cgi_begö_ªque°_t
),

516 
NGX_HTTP_FASTCGI_RESPONDER
,

521 
NGX_HTTP_FASTCGI_PARAMS
,

528 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_Á°cgi_v¨s
[] = {

530 { 
ngx_°rög
("Á°cgi_s¸ùt_«me"), 
NULL
,

531 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
, 0,

532 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

534 { 
ngx_°rög
("Á°cgi_∑th_öfo"), 
NULL
,

535 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
, 0,

536 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

538 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

542 
ngx_°r_t
 
	gngx_hâp_Á°cgi_hide_hódîs
[] = {

543 
ngx_°rög
("Status"),

544 
ngx_°rög
("X-Accel-Expires"),

545 
ngx_°rög
("X-Accel-Redirect"),

546 
ngx_°rög
("X-Accel-Limit-Rate"),

547 
ngx_°rög
("X-Accel-Buffering"),

548 
ngx_°rög
("X-Accel-Charset"),

549 
ngx_nuŒ_°rög


553 #i‡(
NGX_HTTP_CACHE
)

555 
ngx_keyvÆ_t
 
	gngx_hâp_Á°cgi_ˇche_hódîs
[] = {

556 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

557 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

558 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

559 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

560 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

561 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

562 { 
ngx_nuŒ_°rög
,Çgx_null_string }

568 
ngx_∑th_öô_t
 
	gngx_hâp_Á°cgi_ãmp_∑th
 = {

569 
ngx_°rög
(
NGX_HTTP_FASTCGI_TEMP_PATH
), { 1, 2, 0 }

573 
ngx_öt_t


574 
	$ngx_hâp_Á°cgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

576 
ngx_öt_t
 
rc
;

577 
ngx_hâp_up°ªam_t
 *
u
;

578 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

579 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

581 i‡(
r
->
subªque°_ö_mem‹y
) {

582 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

585  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

588 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

589  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

592 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

593 i‡(
f
 =
NULL
) {

594  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

597 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

599 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

601 i‡(
Êcf
->
Á°cgi_Àngths
) {

602 i‡(
	`ngx_hâp_Á°cgi_evÆ
(
r
, 
Êcf
Ë!
NGX_OK
) {

603  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

607 
u
 = 
r
->
up°ªam
;

609 
	`ngx_°r_£t
(&
u
->
schema
, "fastcgi://");

610 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_moduÀ
;

612 
u
->
c⁄f
 = &
Êcf
->
up°ªam
;

614 #i‡(
NGX_HTTP_CACHE
)

615 
u
->
¸óã_key
 = 
ngx_hâp_Á°cgi_¸óã_key
;

617 
u
->
¸óã_ªque°
 = 
ngx_hâp_Á°cgi_¸óã_ªque°
;

618 
u
->
ªöô_ªque°
 = 
ngx_hâp_Á°cgi_ªöô_ªque°
;

619 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_Á°cgi_¥o˚ss_hódî
;

620 
u
->
ab‹t_ªque°
 = 
ngx_hâp_Á°cgi_ab‹t_ªque°
;

621 
u
->
föÆize_ªque°
 = 
ngx_hâp_Á°cgi_föÆize_ªque°
;

622 
r
->
°©e
 = 0;

624 
u
->
buf„rög
 = 1;

626 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

627 i‡(
u
->
pùe
 =
NULL
) {

628  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

631 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_öput_fûãr
;

632 
u
->
pùe
->
öput_˘x
 = 
r
;

634 
u
->
öput_fûãr_öô
 = 
ngx_hâp_Á°cgi_öput_fûãr_öô
;

636 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

638 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

639  
rc
;

642  
NGX_DONE
;

643 
	}
}

646 
ngx_öt_t


647 
	$ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

649 
ngx_uæ_t
 
uæ
;

650 
ngx_hâp_up°ªam_t
 *
u
;

652 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

654 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
Êcf
->
Á°cgi_Àngths
->
ñts
, 0,

655 
Êcf
->
Á°cgi_vÆues
->
ñts
)

656 =
NULL
)

658  
NGX_ERROR
;

661 
uæ
.
no_ªsﬁve
 = 1;

663 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

664 i‡(
uæ
.
îr
) {

665 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

666 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

669  
NGX_ERROR
;

672 
u
 = 
r
->
up°ªam
;

674 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

675 i‡(
u
->
ªsﬁved
 =
NULL
) {

676  
NGX_ERROR
;

679 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

680 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

681 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

682 
u
->
ªsﬁved
->
«ddrs
 = 1;

683 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

686 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

687 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

688 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

691  
NGX_OK
;

692 
	}
}

695 #i‡(
NGX_HTTP_CACHE
)

697 
ngx_öt_t


698 
	$ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

700 
ngx_°r_t
 *
key
;

701 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

703 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

704 i‡(
key
 =
NULL
) {

705  
NGX_ERROR
;

708 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

710 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Êcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

711  
NGX_ERROR
;

714  
NGX_OK
;

715 
	}
}

720 
ngx_öt_t


721 
	$ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

723 
off_t
 
fûe_pos
;

724 
u_ch¨
 
ch
, *
pos
, *
lowˇ£_key
;

725 
size_t
 
size
, 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
∑ddög
,

726 
Æloˇãd
;

727 
ngx_uöt_t
 
i
, 
n
, 
√xt
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

728 
ngx_buf_t
 *
b
;

729 
ngx_chaö_t
 *
˛
, *
body
;

730 
ngx_li°_∑π_t
 *
∑π
;

731 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

732 
ngx_hâp_s¸ùt_code_±
 
code
;

733 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

734 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

735 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

736 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

738 
Àn
 = 0;

739 
hódî_∑øms
 = 0;

740 
ign‹ed
 = 
NULL
;

742 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

744 i‡(
Êcf
->
∑øms_Àn
) {

745 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

747 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
Êcf
->
Êushes
);

748 
À
.
Êushed
 = 1;

750 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

751 
À
.
ªque°
 = 
r
;

753 *(
uöçå_t
 *Ë
À
.
ù
) {

755 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

756 
key_Àn
 = 
	`lcode
(&
À
);

758 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

759 
skù_em±y
 = 
	`lcode
(&
À
);

761 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

762 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

764 
À
.
ù
 +(
uöçå_t
);

766 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

770 
Àn
 +1 + 
key_Àn
 + ((
vÆ_Àn
 > 127) ? 4 : 1) + val_len;

774 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

776 
Æloˇãd
 = 0;

777 
lowˇ£_key
 = 
NULL
;

779 i‡(
Êcf
->
hódî_∑øms
) {

780 
n
 = 0;

781 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

783 
∑π
) {

784 
n
 +
∑π
->
√…s
;

785 
∑π
 =Ö¨t->
√xt
;

788 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

789 i‡(
ign‹ed
 =
NULL
) {

790  
NGX_ERROR
;

794 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

795 
hódî
 = 
∑π
->
ñts
;

797 
i
 = 0; ; i++) {

799 i‡(
i
 >
∑π
->
√…s
) {

800 i‡(
∑π
->
√xt
 =
NULL
) {

804 
∑π
 =Ö¨t->
√xt
;

805 
hódî
 = 
∑π
->
ñts
;

806 
i
 = 0;

809 i‡(
Êcf
->
hódî_∑øms
) {

810 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

811 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

812 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

813 i‡(
lowˇ£_key
 =
NULL
) {

814  
NGX_ERROR
;

818 
hash
 = 0;

820 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

821 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

823 i‡(
ch
 >= 'A' && ch <= 'Z') {

824 
ch
 |= 0x20;

826 } i‡(
ch
 == '-') {

827 
ch
 = '_';

830 
hash
 = 
	`ngx_hash
(hash, 
ch
);

831 
lowˇ£_key
[
n
] = 
ch
;

834 i‡(
	`ngx_hash_föd
(&
Êcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

835 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

839 
n
 += ("HTTP_") - 1;

842 
n
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

845 
Àn
 +((
n
 > 127Ë? 4 : 1Ë+ ((
hódî
[
i
].
vÆue
.len > 127) ? 4 : 1)

846 + 
n
 + 
hódî
[
i
].
vÆue
.
Àn
;

851 i‡(
Àn
 > 65535) {

852 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

853 "Á°cgòªque°Ñec‹d i†toÿbig: %uz", 
Àn
);

854  
NGX_ERROR
;

858 
∑ddög
 = 8 - 
Àn
 % 8;

859 
∑ddög
 = (padding == 8) ? 0 :Öadding;

862 
size
 = (
ngx_hâp_Á°cgi_hódî_t
)

863 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

865 + (
ngx_hâp_Á°cgi_hódî_t
)

866 + 
Àn
 + 
∑ddög


867 + (
ngx_hâp_Á°cgi_hódî_t
)

869 + (
ngx_hâp_Á°cgi_hódî_t
);

872 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

873 i‡(
b
 =
NULL
) {

874  
NGX_ERROR
;

877 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

878 i‡(
˛
 =
NULL
) {

879  
NGX_ERROR
;

882 
˛
->
buf
 = 
b
;

884 
ngx_hâp_Á°cgi_ªque°_°¨t
.
br
.
Êags
 =

885 
Êcf
->
kìp_c⁄n
 ? 
NGX_HTTP_FASTCGI_KEEP_CONN
 : 0;

887 
	`ngx_mem˝y
(
b
->
pos
, &
ngx_hâp_Á°cgi_ªque°_°¨t
,

888 (
ngx_hâp_Á°cgi_ªque°_°¨t_t
));

890 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *)

891 (
b
->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

892 + (
ngx_hâp_Á°cgi_begö_ªque°_t
));

894 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

895 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

896 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

897 
h
->
ª£rved
 = 0;

899 
b
->
œ°
 = b->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

900 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

901 + (
ngx_hâp_Á°cgi_hódî_t
);

904 i‡(
Êcf
->
∑øms_Àn
) {

905 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

907 
e
.
ù
 = 
Êcf
->
∑øms
->
ñts
;

908 
e
.
pos
 = 
b
->
œ°
;

909 
e
.
ªque°
 = 
r
;

910 
e
.
Êushed
 = 1;

912 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

914 *(
uöçå_t
 *Ë
À
.
ù
) {

916 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

917 
key_Àn
 = (
u_ch¨
Ë
	`lcode
(&
À
);

919 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

920 
skù_em±y
 = 
	`lcode
(&
À
);

922 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

923 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

925 
À
.
ù
 +(
uöçå_t
);

927 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

928 
e
.
skù
 = 1;

930 *(
uöçå_t
 *Ë
e
.
ù
) {

931 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

932 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

934 
e
.
ù
 +(
uöçå_t
);

936 
e
.
skù
 = 0;

941 *
e
.
pos
++ = (
u_ch¨
Ë
key_Àn
;

943 i‡(
vÆ_Àn
 > 127) {

944 *
e
.
pos
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

945 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

946 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

947 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

950 *
e
.
pos
++ = (
u_ch¨
Ë
vÆ_Àn
;

953 *(
uöçå_t
 *Ë
e
.
ù
) {

954 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

955 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

957 
e
.
ù
 +(
uöçå_t
);

959 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

961 
key_Àn
, 
e
.
pos
 - (key_À¿+ 
vÆ_Àn
),

962 
vÆ_Àn
, 
e
.
pos
 - val_len);

965 
b
->
œ°
 = 
e
.
pos
;

969 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

971 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

972 
hódî
 = 
∑π
->
ñts
;

974 
i
 = 0; ; i++) {

976 i‡(
i
 >
∑π
->
√…s
) {

977 i‡(
∑π
->
√xt
 =
NULL
) {

981 
∑π
 =Ö¨t->
√xt
;

982 
hódî
 = 
∑π
->
ñts
;

983 
i
 = 0;

986 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

987 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

988 
√xt
;

992 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

993 i‡(
key_Àn
 > 127) {

994 *
b
->
œ°
++ = (
u_ch¨
Ë(((
key_Àn
 >> 24) & 0x7f) | 0x80);

995 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 16) & 0xff);

996 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

997 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1000 *
b
->
œ°
++ = (
u_ch¨
Ë
key_Àn
;

1003 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1004 i‡(
vÆ_Àn
 > 127) {

1005 *
b
->
œ°
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

1006 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

1007 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1008 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1011 *
b
->
œ°
++ = (
u_ch¨
Ë
vÆ_Àn
;

1014 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

1016 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

1017 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

1019 i‡(
ch
 >= 'a' && ch <= 'z') {

1020 
ch
 &= ~0x20;

1022 } i‡(
ch
 == '-') {

1023 
ch
 = '_';

1026 *
b
->
œ°
++ = 
ch
;

1029 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

1031 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1033 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 
vÆ_Àn
),

1034 
vÆ_Àn
, 
b
->
œ°
 - val_len);

1035 
√xt
:

1042 i‡(
∑ddög
) {

1043 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1044 
b
->
œ°
 +
∑ddög
;

1048 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1049 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1051 
h
->
vîsi⁄
 = 1;

1052 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_PARAMS
;

1053 
h
->
ªque°_id_hi
 = 0;

1054 
h
->
ªque°_id_lo
 = 1;

1055 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1056 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1057 
h
->
∑ddög_Àngth
 = 0;

1058 
h
->
ª£rved
 = 0;

1060 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1061 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1063 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_body
) {

1064 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

1065 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1067 #i‡(
NGX_SUPPRESS_WARN
)

1068 
fûe_pos
 = 0;

1069 
pos
 = 
NULL
;

1072 
body
) {

1074 i‡(
body
->
buf
->
ö_fûe
) {

1075 
fûe_pos
 = 
body
->
buf
->file_pos;

1078 
pos
 = 
body
->
buf
->pos;

1081 
√xt
 = 0;

1084 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1085 i‡(
b
 =
NULL
) {

1086  
NGX_ERROR
;

1089 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1091 i‡(
body
->
buf
->
ö_fûe
) {

1092 
b
->
fûe_pos
 = file_pos;

1093 
fûe_pos
 += 32 * 1024;

1095 i‡(
fûe_pos
 >
body
->
buf
->
fûe_œ°
) {

1096 
fûe_pos
 = 
body
->
buf
->
fûe_œ°
;

1097 
√xt
 = 1;

1100 
b
->
fûe_œ°
 = 
fûe_pos
;

1101 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1104 
b
->
pos
 =Öos;

1105 
pos
 += 32 * 1024;

1107 i‡(
pos
 >
body
->
buf
->
œ°
) {

1108 
pos
 = 
body
->
buf
->
œ°
;

1109 
√xt
 = 1;

1112 
b
->
œ°
 = 
pos
;

1113 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1116 
∑ddög
 = 8 - 
Àn
 % 8;

1117 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1119 
h
->
vîsi⁄
 = 1;

1120 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1121 
h
->
ªque°_id_hi
 = 0;

1122 
h
->
ªque°_id_lo
 = 1;

1123 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1124 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1125 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1126 
h
->
ª£rved
 = 0;

1128 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1129 i‡(
˛
->
√xt
 =
NULL
) {

1130  
NGX_ERROR
;

1133 
˛
 = cl->
√xt
;

1134 
˛
->
buf
 = 
b
;

1136 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

1137 (
ngx_hâp_Á°cgi_hódî_t
)

1138 + 
∑ddög
);

1139 i‡(
b
 =
NULL
) {

1140  
NGX_ERROR
;

1143 i‡(
∑ddög
) {

1144 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1145 
b
->
œ°
 +
∑ddög
;

1148 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1149 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1151 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1152 i‡(
˛
->
√xt
 =
NULL
) {

1153  
NGX_ERROR
;

1156 
˛
 = cl->
√xt
;

1157 
˛
->
buf
 = 
b
;

1159 } !
√xt
);

1161 
body
 = body->
√xt
;

1165 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1168 
h
->
vîsi⁄
 = 1;

1169 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1170 
h
->
ªque°_id_hi
 = 0;

1171 
h
->
ªque°_id_lo
 = 1;

1172 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1173 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1174 
h
->
∑ddög_Àngth
 = 0;

1175 
h
->
ª£rved
 = 0;

1177 
˛
->
√xt
 = 
NULL
;

1179  
NGX_OK
;

1180 
	}
}

1183 
ngx_öt_t


1184 
	$ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1186 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1188 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1190 i‡(
f
 =
NULL
) {

1191  
NGX_OK
;

1194 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1195 
f
->
Á°cgi_°dout
 = 0;

1196 
f
->
œrge_°dîr
 = 0;

1198 
r
->
°©e
 = 0;

1200  
NGX_OK
;

1201 
	}
}

1204 
ngx_öt_t


1205 
	$ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1207 
u_ch¨
 *
p
, *
msg
, *
°¨t
, *
œ°
,

1208 *
∑π_°¨t
, *
∑π_íd
;

1209 
size_t
 
size
;

1210 
ngx_°r_t
 *
°©us_löe
, *
∑âîn
;

1211 
ngx_öt_t
 
rc
, 
°©us
;

1212 
ngx_buf_t
 
buf
;

1213 
ngx_uöt_t
 
i
;

1214 
ngx_èbÀ_ñt_t
 *
h
;

1215 
ngx_hâp_up°ªam_t
 *
u
;

1216 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1217 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1218 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1219 
ngx_hâp_Á°cgi_•lô_∑π_t
 *
∑π
;

1220 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1222 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1224 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1226 
u
 = 
r
->
up°ªam
;

1230 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1232 
f
->
pos
 = 
u
->
buf„r
.pos;

1233 
f
->
œ°
 = 
u
->
buf„r
.last;

1235 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1237 
u
->
buf„r
.
pos
 = 
f
->pos;

1238 
u
->
buf„r
.
œ°
 = 
f
->last;

1240 i‡(
rc
 =
NGX_AGAIN
) {

1241  
NGX_AGAIN
;

1244 i‡(
rc
 =
NGX_ERROR
) {

1245  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1248 i‡(
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDOUT


1249 && 
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDERR
)

1251 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1253 
f
->
ty≥
);

1255  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1258 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1259 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1262  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1266 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1268 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 < u->buf„r.
œ°
) {

1269 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1270 
u
->
buf„r
.
pos
 +
f
->
∑ddög
;

1275 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 =u->buf„r.
œ°
) {

1276 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1277 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1279  
NGX_AGAIN
;

1282 
f
->
∑ddög
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1283 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1285  
NGX_AGAIN
;

1291 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1293 i‡(
f
->
Àngth
) {

1294 
msg
 = 
u
->
buf„r
.
pos
;

1296 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 <u->buf„r.
œ°
) {

1297 
u
->
buf„r
.
pos
 +
f
->
Àngth
;

1298 
f
->
Àngth
 = 0;

1299 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1302 
f
->
Àngth
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1303 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1306 
p
 = 
u
->
buf„r
.
pos
 - 1; 
msg
 <Ö;Ö--) {

1307 i‡(*
p
 !
LF
 && *∞!
CR
 && *p != '.' && *p != ' ') {

1312 
p
++;

1314 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1315 "Fa°CGI síàö stdîr: \"%*s\"", 
p
 - 
msg
, msg);

1317 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1319 i‡(
Êcf
->
ˇtch_°dîr
) {

1320 
∑âîn
 = 
Êcf
->
ˇtch_°dîr
->
ñts
;

1322 
i
 = 0; i < 
Êcf
->
ˇtch_°dîr
->
√…s
; i++) {

1323 i‡(
	`ngx_°∫°r
(
msg
, (*Ë
∑âîn
[
i
].
d©a
,

1324 
p
 - 
msg
)

1325 !
NULL
)

1327  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1332 i‡(
u
->
buf„r
.
pos
 =u->buf„r.
œ°
) {

1334 i‡(!
f
->
Á°cgi_°dout
) {

1341 #i‡(
NGX_HTTP_CACHE
)

1342 i‡(
r
->
ˇche
) {

1343 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t


1344 + 
r
->
ˇche
->
hódî_°¨t
;

1346 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1349 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1351 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1352 
f
->
œrge_°dîr
 = 1;

1355  
NGX_AGAIN
;

1359 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1368 #i‡(
NGX_HTTP_CACHE
)

1370 i‡(
f
->
œrge_°dîr
 && 
r
->
ˇche
) {

1371 
u_ch¨
 *
°¨t
;

1372 
ssize_t
 
Àn
;

1373 
ngx_hâp_Á°cgi_hódî_t
 *
fh
;

1375 
°¨t
 = 
u
->
buf„r
.°¨à+ 
r
->
ˇche
->
hódî_°¨t
;

1377 
Àn
 = 
u
->
buf„r
.
pos
 - 
°¨t
 - 2 * (
ngx_hâp_Á°cgi_hódî_t
);

1387 i‡(
Àn
 >= 0) {

1388 
fh
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
°¨t
;

1389 
fh
->
vîsi⁄
 = 1;

1390 
fh
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDERR
;

1391 
fh
->
ªque°_id_hi
 = 0;

1392 
fh
->
ªque°_id_lo
 = 1;

1393 
fh
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1394 
fh
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1395 
fh
->
∑ddög_Àngth
 = 0;

1396 
fh
->
ª£rved
 = 0;

1399 
r
->
ˇche
->
hódî_°¨t
 +
u
->
buf„r
.
pos
 - 
°¨t


1400 - (
ngx_hâp_Á°cgi_hódî_t
);

1403 
f
->
œrge_°dîr
 = 0;

1408 
f
->
Á°cgi_°dout
 = 1;

1410 
°¨t
 = 
u
->
buf„r
.
pos
;

1412 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 < u->buf„r.
œ°
) {

1419 
œ°
 = 
u
->
buf„r
.last;

1420 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
 + 
f
->
Àngth
;

1423 
œ°
 = 
NULL
;

1428 
∑π_°¨t
 = 
u
->
buf„r
.
pos
;

1429 
∑π_íd
 = 
u
->
buf„r
.
œ°
;

1431 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
u
->
buf„r
, 1);

1433 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1434 "hâ∞Á°cgò∑r£r: %d", 
rc
);

1436 i‡(
rc
 =
NGX_AGAIN
) {

1440 i‡(
rc
 =
NGX_OK
) {

1444 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
hódîs
);

1445 i‡(
h
 =
NULL
) {

1446  
NGX_ERROR
;

1449 i‡(
f
->
•lô_∑πs
 && f->•lô_∑πs->
√…s
) {

1451 
∑π
 = 
f
->
•lô_∑πs
->
ñts
;

1452 
size
 = 
u
->
buf„r
.
pos
 - 
∑π_°¨t
;

1454 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1455 
size
 +
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
;

1458 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
size
);

1459 i‡(
p
 =
NULL
) {

1460  
NGX_ERROR
;

1463 
buf
.
pos
 = 
p
;

1465 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1466 
p
 = 
	`ngx_˝ymem
’, 
∑π
[
i
].
°¨t
,

1467 
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
);

1470 
p
 = 
	`ngx_˝ymem
’, 
∑π_°¨t
, 
u
->
buf„r
.
pos
 -Öart_start);

1472 
buf
.
œ°
 = 
p
;

1474 
f
->
•lô_∑πs
->
√…s
 = 0;

1476 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
buf
, 1);

1478 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1479 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1480 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1482 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1483 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1484 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1486 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1487 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1488  
NGX_ERROR
;

1493 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1494 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1496 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1497 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1498 + 
h
->
key
.
Àn
);

1499 i‡(
h
->
key
.
d©a
 =
NULL
) {

1500  
NGX_ERROR
;

1503 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1504 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1

1505 + 
h
->
vÆue
.
Àn
 + 1;

1507 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1508 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1509 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1510 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1513 
h
->
hash
 = 
r
->
hódî_hash
;

1515 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1516 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1519 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1522 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1523 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1525 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1526  
NGX_ERROR
;

1529 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1531 &
h
->
key
, &h->
vÆue
);

1533 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1542 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1546 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1549 i‡(
u
->
hódîs_ö
.
°©us
) {

1550 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1552 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1554 i‡(
°©us
 =
NGX_ERROR
) {

1555 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1557 
°©us_löe
);

1558  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1561 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1562 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1564 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1565 
u
->
hódîs_ö
.
°©us_n
 = 302;

1566 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1570 
u
->
hódîs_ö
.
°©us_n
 = 200;

1571 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1574 i‡(
u
->
°©e
) {

1575 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1583 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1586  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1589 i‡(
œ°
) {

1590 
u
->
buf„r
.
œ°
 =Üast;

1593 
f
->
Àngth
 -
u
->
buf„r
.
pos
 - 
°¨t
;

1595 i‡(
f
->
Àngth
 == 0) {

1596 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1599 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1600  
NGX_OK
;

1603 i‡(
rc
 =
NGX_OK
) {

1609 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1612 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1613 
f
->
•lô_∑πs
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 1,

1614 (
ngx_hâp_Á°cgi_•lô_∑π_t
));

1615 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1616  
NGX_ERROR
;

1620 
∑π
 = 
	`ngx_¨øy_push
(
f
->
•lô_∑πs
);

1621 i‡(
∑π
 =
NULL
) {

1622  
NGX_ERROR
;

1625 
∑π
->
°¨t
 = 
∑π_°¨t
;

1626 
∑π
->
íd
 = 
∑π_íd
;

1628 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1632  
NGX_AGAIN
;

1634 
	}
}

1637 
ngx_öt_t


1638 
	$ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
)

1640 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1641 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1643 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1645 
r
->
up°ªam
->
pùe
->
Àngth
 = 
Êcf
->
kìp_c⁄n
 ?

1646 (
off_t
Ë(
ngx_hâp_Á°cgi_hódî_t
) : -1;

1648  
NGX_OK
;

1649 
	}
}

1652 
ngx_öt_t


1653 
	$ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1655 
u_ch¨
 *
m
, *
msg
;

1656 
ngx_öt_t
 
rc
;

1657 
ngx_buf_t
 *
b
, **
¥ev
;

1658 
ngx_chaö_t
 *
˛
;

1659 
ngx_hâp_ªque°_t
 *
r
;

1660 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1661 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1663 i‡(
buf
->
pos
 =buf->
œ°
) {

1664  
NGX_OK
;

1667 
r
 = 
p
->
öput_˘x
;

1668 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1669 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1671 
b
 = 
NULL
;

1672 
¥ev
 = &
buf
->
shadow
;

1674 
f
->
pos
 = 
buf
->pos;

1675 
f
->
œ°
 = 
buf
->last;

1678 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1680 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1682 i‡(
rc
 =
NGX_AGAIN
) {

1686 i‡(
rc
 =
NGX_ERROR
) {

1687  
NGX_ERROR
;

1690 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1691 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1693 i‡(!
Êcf
->
kìp_c⁄n
) {

1694 
p
->
up°ªam_d⁄e
 = 1;

1697 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1703 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1705 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1708 i‡(!
Êcf
->
kìp_c⁄n
) {

1709 
p
->
up°ªam_d⁄e
 = 1;

1718 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1720 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1722 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1723 
p
->
up°ªam_d⁄e
 = 1;

1727 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1728 
p
->
up°ªam_d⁄e
 = 1;

1729 
r
->
up°ªam
->
kì∑live
 = 1;

1733 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1738 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1739 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1740 
f
->
pos
 +f->
∑ddög
;

1745 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1746 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1751 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1759 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1761 i‡(
f
->
Àngth
) {

1763 i‡(
f
->
pos
 =f->
œ°
) {

1767 
msg
 = 
f
->
pos
;

1769 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1770 
f
->
pos
 +f->
Àngth
;

1771 
f
->
Àngth
 = 0;

1772 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1775 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1776 
f
->
pos
 = f->
œ°
;

1779 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

1780 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

1785 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
, 0,

1787 
m
 + 1 - 
msg
, msg);

1790 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1796 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1798 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1799 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1800 
f
->
pos
 +f->
Àngth
;

1805 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1813 i‡(
f
->
pos
 =f->
œ°
) {

1817 i‡(
p
->
‰ì
) {

1818 
˛
 = 
p
->
‰ì
;

1819 
b
 = 
˛
->
buf
;

1820 
p
->
‰ì
 = 
˛
->
√xt
;

1821 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

1824 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

1825 i‡(
b
 =
NULL
) {

1826  
NGX_ERROR
;

1830 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1832 
b
->
pos
 = 
f
->pos;

1833 
b
->
°¨t
 = 
buf
->start;

1834 
b
->
íd
 = 
buf
->end;

1835 
b
->
èg
 = 
p
->tag;

1836 
b
->
ãmp‹¨y
 = 1;

1837 
b
->
ªcy˛ed
 = 1;

1839 *
¥ev
 = 
b
;

1840 
¥ev
 = &
b
->
shadow
;

1842 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1843 i‡(
˛
 =
NULL
) {

1844  
NGX_ERROR
;

1847 
˛
->
buf
 = 
b
;

1848 
˛
->
√xt
 = 
NULL
;

1850 i‡(
p
->
ö
) {

1851 *
p
->
œ°_ö
 = 
˛
;

1853 
p
->
ö
 = 
˛
;

1855 
p
->
œ°_ö
 = &
˛
->
√xt
;

1858  
b
->
num
 = 
buf
->num;

1860 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1861 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

1863 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1864 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1865 
f
->
pos
 +f->
Àngth
;

1866 
b
->
œ°
 = 
f
->
pos
;

1871 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1873 
b
->
œ°
 = 
f
->last;

1879 i‡(
Êcf
->
kìp_c⁄n
) {

1883 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1884 
p
->
Àngth
 = 1;

1886 } i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1887 
p
->
Àngth
 = 
f
->
∑ddög
;

1892 
p
->
Àngth
 = 
f
->length;

1896 i‡(
b
) {

1897 
b
->
shadow
 = 
buf
;

1898 
b
->
œ°_shadow
 = 1;

1900 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1901 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

1903  
NGX_OK
;

1908 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

1909  
NGX_ERROR
;

1912  
NGX_OK
;

1913 
	}
}

1916 
ngx_öt_t


1917 
	$ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

1918 
ngx_hâp_Á°cgi_˘x_t
 *
f
)

1920 
u_ch¨
 
ch
, *
p
;

1921 
ngx_hâp_Á°cgi_°©e_e
 
°©e
;

1923 
°©e
 = 
f
->state;

1925 
p
 = 
f
->
pos
;Ö < f->
œ°
;Ö++) {

1927 
ch
 = *
p
;

1929 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1930 "hâ∞Á°cgòªc‹d byã: %02Xd", 
ch
);

1932 
°©e
) {

1934 
ngx_hâp_Á°cgi_°_vîsi⁄
:

1935 i‡(
ch
 != 1) {

1936 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1938 "¥Ÿocﬁ vîsi⁄: %d", 
ch
);

1939  
NGX_ERROR
;

1941 
°©e
 = 
ngx_hâp_Á°cgi_°_ty≥
;

1944 
ngx_hâp_Á°cgi_°_ty≥
:

1945 
ch
) {

1946 
NGX_HTTP_FASTCGI_STDOUT
:

1947 
NGX_HTTP_FASTCGI_STDERR
:

1948 
NGX_HTTP_FASTCGI_END_REQUEST
:

1949 
f
->
ty≥
 = (
ngx_uöt_t
Ë
ch
;

1952 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1954 "ªc‹dÅy≥: %d", 
ch
);

1955  
NGX_ERROR
;

1958 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_hi
;

1963 
ngx_hâp_Á°cgi_°_ªque°_id_hi
:

1964 i‡(
ch
 != 0) {

1965 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1967 "ªque° id high byã: %d", 
ch
);

1968  
NGX_ERROR
;

1970 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_lo
;

1973 
ngx_hâp_Á°cgi_°_ªque°_id_lo
:

1974 i‡(
ch
 != 1) {

1975 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1977 "ªque° idÜow byã: %d", 
ch
);

1978  
NGX_ERROR
;

1980 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
;

1983 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
:

1984 
f
->
Àngth
 = 
ch
 << 8;

1985 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
;

1988 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
:

1989 
f
->
Àngth
 |(
size_t
Ë
ch
;

1990 
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
;

1993 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
:

1994 
f
->
∑ddög
 = (
size_t
Ë
ch
;

1995 
°©e
 = 
ngx_hâp_Á°cgi_°_ª£rved
;

1998 
ngx_hâp_Á°cgi_°_ª£rved
:

1999 
°©e
 = 
ngx_hâp_Á°cgi_°_d©a
;

2001 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2002 "hâ∞Á°cgòªc‹dÜígth: %z", 
f
->
Àngth
);

2004 
f
->
pos
 = 
p
 + 1;

2005 
f
->
°©e
 = state;

2007  
NGX_OK
;

2010 
ngx_hâp_Á°cgi_°_d©a
:

2011 
ngx_hâp_Á°cgi_°_∑ddög
:

2016 
f
->
°©e
 = state;

2018  
NGX_AGAIN
;

2019 
	}
}

2023 
	$ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2025 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2029 
	}
}

2033 
	$ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2035 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2039 
	}
}

2042 
ngx_öt_t


2043 
	$ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2045 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2047 
v
 = 
ngx_hâp_Á°cgi_v¨s
; v->
«me
.
Àn
; v++) {

2048 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2049 i‡(
v¨
 =
NULL
) {

2050  
NGX_ERROR
;

2053 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2054 
v¨
->
d©a
 = 
v
->data;

2057  
NGX_OK
;

2058 
	}
}

2062 
	$ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2064 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
;

2066 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_loc_c⁄f_t
));

2067 i‡(
c⁄f
 =
NULL
) {

2068  
NULL
;

2089 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2090 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2091 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2092 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2094 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2095 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2096 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2098 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2099 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2101 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2102 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2103 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2105 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2106 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2108 #i‡(
NGX_HTTP_CACHE
)

2109 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

2110 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2111 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2112 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2113 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2114 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2115 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2118 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2119 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2121 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2124 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2126 
c⁄f
->
ˇtch_°dîr
 = 
NGX_CONF_UNSET_PTR
;

2128 
c⁄f
->
kìp_c⁄n
 = 
NGX_CONF_UNSET
;

2130 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "fastcgi");

2132  
c⁄f
;

2133 
	}
}

2137 
	$ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2139 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2140 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2142 
size_t
 
size
;

2143 
ngx_hash_öô_t
 
hash
;

2144 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2146 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

2147 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2148 
¥ev
->
up°ªam
.
°‹e
, 0);

2150 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

2151 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2152 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2156 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2157 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2159 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2160 
¥ev
->
up°ªam
.
buf„rög
, 1);

2162 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2163 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2165 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2166 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2168 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2169 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2171 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2172 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2174 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2175 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2177 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2178 
¥ev
->
up°ªam
.
buf„r_size
,

2179 (
size_t
Ë
ngx_∑gesize
);

2182 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2183 8, 
ngx_∑gesize
);

2185 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2188  
NGX_CONF_ERROR
;

2192 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2193 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2194 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2198 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2199 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2200 
NGX_CONF_UNSET_SIZE
);

2202 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2203 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2205 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2206 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2209 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2210 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2215  
NGX_CONF_ERROR
;

2218 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2219 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2221 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2225  
NGX_CONF_ERROR
;

2229 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2230 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2231 
NGX_CONF_UNSET_SIZE
);

2233 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2234 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2236 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2237 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2240 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2241 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2246  
NGX_CONF_ERROR
;

2250 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2251 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2252 
NGX_CONF_UNSET_SIZE
);

2254 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2255 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2257 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2258 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2261 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2262 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2264 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2270  
NGX_CONF_ERROR
;

2274 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2275 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2276 
NGX_CONF_BITMASK_SET
);

2279 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2280 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2281 (
NGX_CONF_BITMASK_SET


2282 |
NGX_HTTP_UPSTREAM_FT_ERROR


2283 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2285 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2286 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2287 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2290 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2291 
¥ev
->
up°ªam
.
ãmp_∑th
,

2292 &
ngx_hâp_Á°cgi_ãmp_∑th
)

2293 !
NGX_OK
)

2295  
NGX_CONF_ERROR
;

2298 #i‡(
NGX_HTTP_CACHE
)

2300 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2301 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

2303 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

2304 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2306 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

2308 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2310 &
shm_z⁄e
->
shm
.
«me
);

2312  
NGX_CONF_ERROR
;

2315 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2316 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2318 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2319 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2320 (
NGX_CONF_BITMASK_SET


2321 |
NGX_HTTP_UPSTREAM_FT_OFF
));

2323 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2324 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


2325 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2328 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2329 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

2332 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

2333 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

2336 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

2338 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

2339 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

2341 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

2342 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

2344 i‡(
c⁄f
->
up°ªam
.
no_ˇche
 && c⁄f->up°ªam.
ˇche_by∑ss
 =
NULL
) {

2345 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2350 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

2351 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

2353 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

2354 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

2357 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

2358 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

2360 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

2361 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

2365 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

2366 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

2367 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

2368 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

2370 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

2371 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

2373 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ˇtch_°dîr
, 
¥ev
->ˇtch_°dîr, 
NULL
);

2375 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
kìp_c⁄n
, 
¥ev
->keep_conn, 0);

2378 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ödex
, 
¥ev
->index, "");

2380 
hash
.
max_size
 = 512;

2381 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

2382 
hash
.
«me
 = "fastcgi_hide_headers_hash";

2384 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

2385 &
¥ev
->
up°ªam
, 
ngx_hâp_Á°cgi_hide_hódîs
, &
hash
)

2386 !
NGX_OK
)

2388  
NGX_CONF_ERROR
;

2391 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

2392 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

2395 i‡(
c⁄f
->
Á°cgi_Àngths
 =
NULL
) {

2396 
c⁄f
->
Á°cgi_Àngths
 = 
¥ev
->fastcgi_lengths;

2397 
c⁄f
->
Á°cgi_vÆues
 = 
¥ev
->fastcgi_values;

2400 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
Á°cgi_Àngths
) {

2401 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2402 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

2403 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

2407 #i‡(
NGX_PCRE
)

2408 i‡(
c⁄f
->
•lô_ªgex
 =
NULL
) {

2409 
c⁄f
->
•lô_ªgex
 = 
¥ev
->split_regex;

2410 
c⁄f
->
•lô_«me
 = 
¥ev
->split_name;

2414 i‡(
	`ngx_hâp_Á°cgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

2415  
NGX_CONF_ERROR
;

2418  
NGX_CONF_OK
;

2419 
	}
}

2422 
ngx_öt_t


2423 
	$ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

2424 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
)

2426 
u_ch¨
 *
p
;

2427 
size_t
 
size
;

2428 
uöçå_t
 *
code
;

2429 
ngx_uöt_t
 
i
, 
n§c
;

2430 
ngx_¨øy_t
 
hódîs_«mes
;

2431 #i‡(
NGX_HTTP_CACHE
)

2432 
ngx_¨øy_t
 
∑øms_mîged
;

2434 
ngx_hash_key_t
 *
hk
;

2435 
ngx_hash_öô_t
 
hash
;

2436 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

2437 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2438 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

2440 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

2441 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

2443 i‡(
¥ev
->
hódîs_hash
.
buckës


2444 #i‡(
NGX_HTTP_CACHE
)

2445 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

2446 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

2450 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

2451 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

2452 
c⁄f
->
∑øms
 = 
¥ev
->params;

2453 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

2454 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

2456  
NGX_OK
;

2460 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


2461 #i‡(
NGX_HTTP_CACHE
)

2462 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

2466 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

2467  
NGX_OK
;

2470 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

2471 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

2472  
NGX_ERROR
;

2475 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

2476 i‡(
c⁄f
->
∑øms
 =
NULL
) {

2477  
NGX_ERROR
;

2480 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

2481 !
NGX_OK
)

2483  
NGX_ERROR
;

2486 i‡(
c⁄f
->
∑øms_sour˚
) {

2487 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

2488 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

2491 
§c
 = 
NULL
;

2492 
n§c
 = 0;

2495 #i‡(
NGX_HTTP_CACHE
)

2497 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

2498 
ngx_keyvÆ_t
 *
h
;

2499 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

2501 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

2502 (
ngx_hâp_up°ªam_∑øm_t
))

2503 !
NGX_OK
)

2505  
NGX_ERROR
;

2508 
i
 = 0; i < 
n§c
; i++) {

2510 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2511 i‡(
s
 =
NULL
) {

2512  
NGX_ERROR
;

2515 *
s
 = 
§c
[
i
];

2518 
h
 = 
ngx_hâp_Á°cgi_ˇche_hódîs
;

2520 
h
->
key
.
Àn
) {

2522 
§c
 = 
∑øms_mîged
.
ñts
;

2523 
n§c
 = 
∑øms_mîged
.
√…s
;

2525 
i
 = 0; i < 
n§c
; i++) {

2526 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

2527 
√xt
;

2531 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2532 i‡(
s
 =
NULL
) {

2533  
NGX_ERROR
;

2536 
s
->
key
 = 
h
->key;

2537 
s
->
vÆue
 = 
h
->value;

2538 
s
->
skù_em±y
 = 0;

2540 
√xt
:

2542 
h
++;

2545 
§c
 = 
∑øms_mîged
.
ñts
;

2546 
n§c
 = 
∑øms_mîged
.
√…s
;

2551 
i
 = 0; i < 
n§c
; i++) {

2553 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

2554 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

2556 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

2557 i‡(
hk
 =
NULL
) {

2558  
NGX_ERROR
;

2561 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

2562 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

2563 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

2564 
hk
->
vÆue
 = (*) 1;

2566 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

2571 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

2572 (
ngx_hâp_s¸ùt_c›y_code_t
));

2573 i‡(
c›y
 =
NULL
) {

2574  
NGX_ERROR
;

2577 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

2578 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2580 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

2581 (
ngx_hâp_s¸ùt_c›y_code_t
));

2582 i‡(
c›y
 =
NULL
) {

2583  
NGX_ERROR
;

2586 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

2587 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

2590 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2591 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

2592 & ~((
uöçå_t
) - 1);

2594 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

2595 i‡(
c›y
 =
NULL
) {

2596  
NGX_ERROR
;

2599 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2600 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2602 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2603 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2606 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2608 
sc
.
cf
 = cf;

2609 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

2610 
sc
.
Êushes
 = &
c⁄f
->flushes;

2611 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

2612 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

2614 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2615  
NGX_ERROR
;

2618 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2619 i‡(
code
 =
NULL
) {

2620  
NGX_ERROR
;

2623 *
code
 = (
uöçå_t
Ë
NULL
;

2626 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

2627 i‡(
code
 =
NULL
) {

2628  
NGX_ERROR
;

2631 *
code
 = (
uöçå_t
Ë
NULL
;

2634 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2635 i‡(
code
 =
NULL
) {

2636  
NGX_ERROR
;

2639 *
code
 = (
uöçå_t
Ë
NULL
;

2641 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

2643 
hash
.hash = &
c⁄f
->
hódîs_hash
;

2644 
hash
.
key
 = 
ngx_hash_key_lc
;

2645 
hash
.
max_size
 = 512;

2646 
hash
.
buckë_size
 = 64;

2647 
hash
.
«me
 = "fastcgi_params_hash";

2648 
hash
.
poﬁ
 = 
cf
->pool;

2649 
hash
.
ãmp_poﬁ
 = 
NULL
;

2651  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

2652 
	}
}

2655 
ngx_öt_t


2656 
	$ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2657 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2659 
u_ch¨
 *
p
;

2660 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2661 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2663 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2665 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2667 i‡(
f
 =
NULL
) {

2668  
NGX_ERROR
;

2671 i‡(
f
->
s¸ùt_«me
.
Àn
 == 0

2672 || 
f
->
s¸ùt_«me
.
d©a
[f->s¸ùt_«me.
Àn
 - 1] != '/')

2674 
v
->
Àn
 = 
f
->
s¸ùt_«me
.len;

2675 
v
->
vÆid
 = 1;

2676 
v
->
no_ˇchóbÀ
 = 0;

2677 
v
->
nŸ_found
 = 0;

2678 
v
->
d©a
 = 
f
->
s¸ùt_«me
.data;

2680  
NGX_OK
;

2683 
v
->
Àn
 = 
f
->
s¸ùt_«me
.À¿+ 
Êcf
->
ödex
.len;

2685 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2686 i‡(
v
->
d©a
 =
NULL
) {

2687  
NGX_ERROR
;

2690 
p
 = 
	`ngx_c›y
(
v
->
d©a
, 
f
->
s¸ùt_«me
.d©a, f->s¸ùt_«me.
Àn
);

2691 
	`ngx_mem˝y
(
p
, 
Êcf
->
ödex
.
d©a
, flcf->ödex.
Àn
);

2693  
NGX_OK
;

2694 
	}
}

2697 
ngx_öt_t


2698 
	$ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2699 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2701 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2702 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2704 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2706 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2708 i‡(
f
 =
NULL
) {

2709  
NGX_ERROR
;

2712 
v
->
Àn
 = 
f
->
∑th_öfo
.len;

2713 
v
->
vÆid
 = 1;

2714 
v
->
no_ˇchóbÀ
 = 0;

2715 
v
->
nŸ_found
 = 0;

2716 
v
->
d©a
 = 
f
->
∑th_öfo
.data;

2718  
NGX_OK
;

2719 
	}
}

2722 
ngx_hâp_Á°cgi_˘x_t
 *

2723 
	$ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

2725 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2726 #i‡(
NGX_PCRE
)

2727 
ngx_öt_t
 
n
;

2728 
ˇ±uªs
[(1 + 2) * 3];

2730 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2732 i‡(
f
 =
NULL
) {

2733 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

2734 i‡(
f
 =
NULL
) {

2735  
NULL
;

2738 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

2741 i‡(
f
->
s¸ùt_«me
.
Àn
) {

2742  
f
;

2745 i‡(
Êcf
->
•lô_ªgex
 =
NULL
) {

2746 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2747  
f
;

2750 
n
 = 
	`ngx_ªgex_exec
(
Êcf
->
•lô_ªgex
, &
r
->
uri
, 
ˇ±uªs
, (1 + 2) * 3);

2752 i‡(
n
 >= 0) {

2753 
f
->
s¸ùt_«me
.
Àn
 = 
ˇ±uªs
[3] - captures[2];

2754 
f
->
s¸ùt_«me
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[2];

2756 
f
->
∑th_öfo
.
Àn
 = 
ˇ±uªs
[5] - captures[4];

2757 
f
->
∑th_öfo
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[4];

2759  
f
;

2762 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2763 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2764  
f
;

2767 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2768 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2769 
n
, &
r
->
uri
, &
Êcf
->
•lô_«me
);

2770  
NULL
;

2774 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2776 i‡(
f
 =
NULL
) {

2777 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

2778 i‡(
f
 =
NULL
) {

2779  
NULL
;

2782 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

2785 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2787  
f
;

2790 
	}
}

2794 
	$ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2796 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2798 
ngx_uæ_t
 
u
;

2799 
ngx_°r_t
 *
vÆue
, *
uæ
;

2800 
ngx_uöt_t
 
n
;

2801 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2802 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2804 i‡(
Êcf
->
up°ªam
.up°ªam || flcf->
Á°cgi_Àngths
) {

2808 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2810 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

2812 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

2813 
˛cf
->
auto_ªdúe˘
 = 1;

2816 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2818 
uæ
 = &
vÆue
[1];

2820 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

2822 i‡(
n
) {

2824 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2826 
sc
.
cf
 = cf;

2827 
sc
.
sour˚
 = 
uæ
;

2828 
sc
.
Àngths
 = &
Êcf
->
Á°cgi_Àngths
;

2829 
sc
.
vÆues
 = &
Êcf
->
Á°cgi_vÆues
;

2830 
sc
.
v¨übÀs
 = 
n
;

2831 
sc
.
com∂ëe_Àngths
 = 1;

2832 
sc
.
com∂ëe_vÆues
 = 1;

2834 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2835  
NGX_CONF_ERROR
;

2838  
NGX_CONF_OK
;

2841 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

2843 
u
.
uæ
 = 
vÆue
[1];

2844 
u
.
no_ªsﬁve
 = 1;

2846 
Êcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

2847 i‡(
Êcf
->
up°ªam
.up°ªam =
NULL
) {

2848  
NGX_CONF_ERROR
;

2851  
NGX_CONF_OK
;

2852 
	}
}

2856 
	$ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2858 #i‡(
NGX_PCRE
)

2859 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2861 
ngx_°r_t
 *
vÆue
;

2862 
ngx_ªgex_compûe_t
 
rc
;

2863 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

2865 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2867 
Êcf
->
•lô_«me
 = 
vÆue
[1];

2869 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

2871 
rc
.
∑âîn
 = 
vÆue
[1];

2872 
rc
.
poﬁ
 = 
cf
->pool;

2873 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

2874 
rc
.
îr
.
d©a
 = 
îr°r
;

2876 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

2877 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

2878  
NGX_CONF_ERROR
;

2881 i‡(
rc
.
ˇ±uªs
 != 2) {

2882 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2883 "∑âî¿\"%V\" mu° havê2 c≠tuªs", &
vÆue
[1]);

2884  
NGX_CONF_ERROR
;

2887 
Êcf
->
•lô_ªgex
 = 
rc
.
ªgex
;

2889  
NGX_CONF_OK
;

2893 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2894 "\"%V\"Ñequúe†PCREÜibøry", &
cmd
->
«me
);

2895  
NGX_CONF_ERROR
;

2898 
	}
}

2902 
	$ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2904 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2906 
ngx_°r_t
 *
vÆue
;

2907 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2909 i‡(
Êcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


2910 || 
Êcf
->
up°ªam
.
°‹e_Àngths
)

2915 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2917 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2918 
Êcf
->
up°ªam
.
°‹e
 = 0;

2919  
NGX_CONF_OK
;

2922 #i‡(
NGX_HTTP_CACHE
)

2924 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


2925 && 
Êcf
->
up°ªam
.
ˇche
 !
NULL
)

2932 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

2933 
Êcf
->
up°ªam
.
°‹e
 = 1;

2934  
NGX_CONF_OK
;

2938 
vÆue
[1].
Àn
++;

2940 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2942 
sc
.
cf
 = cf;

2943 
sc
.
sour˚
 = &
vÆue
[1];

2944 
sc
.
Àngths
 = &
Êcf
->
up°ªam
.
°‹e_Àngths
;

2945 
sc
.
vÆues
 = &
Êcf
->
up°ªam
.
°‹e_vÆues
;

2946 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

2947 
sc
.
com∂ëe_Àngths
 = 1;

2948 
sc
.
com∂ëe_vÆues
 = 1;

2950 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2951  
NGX_CONF_ERROR
;

2954  
NGX_CONF_OK
;

2955 
	}
}

2958 #i‡(
NGX_HTTP_CACHE
)

2961 
	$ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2963 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2965 
ngx_°r_t
 *
vÆue
;

2967 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2969 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

2973 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2974 
Êcf
->
up°ªam
.
ˇche
 = 
NULL
;

2975  
NGX_CONF_OK
;

2978 i‡(
Êcf
->
up°ªam
.
°‹e
 > 0 || flcf->up°ªam.
°‹e_Àngths
) {

2982 
Êcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

2983 &
ngx_hâp_Á°cgi_moduÀ
);

2984 i‡(
Êcf
->
up°ªam
.
ˇche
 =
NULL
) {

2985  
NGX_CONF_ERROR
;

2988  
NGX_CONF_OK
;

2989 
	}
}

2993 
	$ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2995 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2997 
ngx_°r_t
 *
vÆue
;

2998 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3000 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3002 i‡(
Êcf
->
ˇche_key
.
vÆue
.
d©a
) {

3006 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3008 
ccv
.
cf
 = cf;

3009 
ccv
.
vÆue
 = &value[1];

3010 
ccv
.
com∂ex_vÆue
 = &
Êcf
->
ˇche_key
;

3012 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3013  
NGX_CONF_ERROR
;

3016  
NGX_CONF_OK
;

3017 
	}
}

3023 
	$ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3025 #i‡(
NGX_FREEBSD
)

3026 
ssize_t
 *
≈
 = 
d©a
;

3028 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3029 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3032 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3034  
NGX_CONF_ERROR
;

3037 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3038 
ssize_t
 *
≈
 = 
d©a
;

3040 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3043 *
≈
 = 0;

3047  
NGX_CONF_OK
;

3048 
	}
}

	@src/http/modules/ngx_http_flv_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_comm™d_t
 
	gngx_hâp_Êv_comm™ds
[] = {

16 { 
ngx_°rög
("flv"),

17 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

18 
ngx_hâp_Êv
,

21 
NULL
 },

23 
ngx_nuŒ_comm™d


27 
u_ch¨
 
	gngx_Êv_hódî
[] = "FLV\x1\x5\0\0\0\x9\0\0\0\0";

30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Êv_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_Êv_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_Êv_moduÀ_˘x
,

48 
ngx_hâp_Êv_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t


62 
	$ngx_hâp_Êv_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

64 
u_ch¨
 *
œ°
;

65 
off_t
 
°¨t
, 
Àn
;

66 
size_t
 
roŸ
;

67 
ngx_öt_t
 
rc
;

68 
ngx_uöt_t
 
Àvñ
, 
i
;

69 
ngx_°r_t
 
∑th
, 
vÆue
;

70 
ngx_log_t
 *
log
;

71 
ngx_buf_t
 *
b
;

72 
ngx_chaö_t
 
out
[2];

73 
ngx_›í_fûe_öfo_t
 
of
;

74 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

76 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

77  
NGX_HTTP_NOT_ALLOWED
;

80 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

81  
NGX_DECLINED
;

84 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

86 i‡(
rc
 !
NGX_OK
) {

87  
rc
;

90 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

91 i‡(
œ°
 =
NULL
) {

92  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

95 
log
 = 
r
->
c⁄√˘i⁄
->log;

97 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

100 "hâ∞Êv fûíame: \"%V\"", &
∑th
);

102 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

104 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

106 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

107 
of
.
dúe˘io
 = 
˛cf
->directio;

108 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

109 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

110 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

111 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

113 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

114  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

118 !
NGX_OK
)

120 
of
.
îr
) {

123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

125 
NGX_ENOENT
:

126 
NGX_ENOTDIR
:

127 
NGX_ENAMETOOLONG
:

129 
Àvñ
 = 
NGX_LOG_ERR
;

130 
rc
 = 
NGX_HTTP_NOT_FOUND
;

133 
NGX_EACCES
:

134 #i‡(
NGX_HAVE_OPENAT
)

135 
NGX_EMLINK
:

136 
NGX_ELOOP
:

139 
Àvñ
 = 
NGX_LOG_ERR
;

140 
rc
 = 
NGX_HTTP_FORBIDDEN
;

145 
Àvñ
 = 
NGX_LOG_CRIT
;

146 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

151 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

152 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

155  
rc
;

158 i‡(!
of
.
is_fûe
) {

160 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

162 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

165  
NGX_DECLINED
;

168 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

170 
°¨t
 = 0;

171 
Àn
 = 
of
.
size
;

172 
i
 = 1;

174 i‡(
r
->
¨gs
.
Àn
) {

176 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

178 
°¨t
 = 
	`ngx_©oof
(
vÆue
.
d©a
, vÆue.
Àn
);

180 i‡(
°¨t
 =
NGX_ERROR
 || sèπ >
Àn
) {

181 
°¨t
 = 0;

184 i‡(
°¨t
) {

185 
Àn
 = (
ngx_Êv_hódî
Ë- 1 +Üí - 
°¨t
;

186 
i
 = 0;

191 
log
->
a˘i⁄
 = "sending flvÅo client";

193 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

194 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

195 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

197 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

198  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

201 i‡(
i
 == 0) {

202 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

203 i‡(
b
 =
NULL
) {

204  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

207 
b
->
pos
 = 
ngx_Êv_hódî
;

208 
b
->
œ°
 = 
ngx_Êv_hódî
 + (ngx_flv_header) - 1;

209 
b
->
mem‹y
 = 1;

211 
out
[0].
buf
 = 
b
;

212 
out
[0].
√xt
 = &out[1];

216 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

217 i‡(
b
 =
NULL
) {

218  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

221 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

222 i‡(
b
->
fûe
 =
NULL
) {

223  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

226 
r
->
Ælow_ønges
 = 1;

228 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

230 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

231  
rc
;

234 
b
->
fûe_pos
 = 
°¨t
;

235 
b
->
fûe_œ°
 = 
of
.
size
;

237 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

238 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

239 
b
->
œ°_ö_chaö
 = 1;

241 
b
->
fûe
->
fd
 = 
of
.fd;

242 
b
->
fûe
->
«me
 = 
∑th
;

243 
b
->
fûe
->
log
 =Üog;

244 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

246 
out
[1].
buf
 = 
b
;

247 
out
[1].
√xt
 = 
NULL
;

249  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[
i
]);

250 
	}
}

254 
	$ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

256 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

258 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

259 
˛cf
->
h™dÀr
 = 
ngx_hâp_Êv_h™dÀr
;

261  
NGX_CONF_OK
;

262 
	}
}

	@src/http/modules/ngx_http_geo_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

15 
u_sh‹t
 
	m°¨t
;

16 
u_sh‹t
 
	míd
;

17 } 
	tngx_hâp_geo_ønge_t
;

21 
ngx_ødix_åì_t
 *
	måì
;

22 #i‡(
NGX_HAVE_INET6
)

23 
ngx_ødix_åì_t
 *
	måì6
;

25 } 
	tngx_hâp_geo_åìs_t
;

29 
ngx_hâp_geo_ønge_t
 **
	mlow
;

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

31 } 
	tngx_hâp_geo_high_ønges_t
;

35 
ngx_°r_node_t
 
	m¢
;

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

37 
size_t
 
	moff£t
;

38 } 
	tngx_hâp_geo_v¨übÀ_vÆue_node_t
;

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

43 
ngx_°r_t
 *
	m√t
;

44 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

45 
ngx_ødix_åì_t
 *
	måì
;

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_ødix_åì_t
 *
	måì6
;

49 
ngx_rbåì_t
 
	mrbåì
;

50 
ngx_rbåì_node_t
 
	m£¡öñ
;

51 
ngx_¨øy_t
 *
	m¥oxõs
;

52 
ngx_poﬁ_t
 *
	mpoﬁ
;

53 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

55 
size_t
 
	md©a_size
;

57 
ngx_°r_t
 
	mö˛ude_«me
;

58 
ngx_uöt_t
 
	mö˛udes
;

59 
ngx_uöt_t
 
	míåõs
;

61 
	mønges
:1;

62 
	moutside_íåõs
:1;

63 
	mÆlow_bö¨y_ö˛ude
:1;

64 
	mbö¨y_ö˛ude
:1;

65 
	m¥oxy_ªcursive
:1;

66 } 
	tngx_hâp_geo_c⁄f_˘x_t
;

71 
ngx_hâp_geo_åìs_t
 
	måìs
;

72 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

73 } 
	mu
;

75 
ngx_¨øy_t
 *
	m¥oxõs
;

76 
	m¥oxy_ªcursive
:1;

78 
ngx_öt_t
 
	mödex
;

79 } 
	tngx_hâp_geo_˘x_t
;

82 
ngx_öt_t
 
ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

84 
ngx_öt_t
 
ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

86 *
ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

87 *
ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

88 *
ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

89 
ngx_°r_t
 *
vÆue
);

90 *
ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
,

91 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

92 
ngx_uöt_t
 
ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
,

93 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

94 *
ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

95 
ngx_°r_t
 *
vÆue
);

96 *
ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

97 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
);

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

100 *
ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
,

101 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_cidr_t
 *
cidr
);

102 
ngx_öt_t
 
ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

103 
ngx_cidr_t
 *
cidr
);

104 *
ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

105 
ngx_°r_t
 *
«me
);

106 
ngx_öt_t
 
ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

107 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

108 
ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
);

109 
u_ch¨
 *
ngx_hâp_geo_c›y_vÆues
(u_ch¨ *
ba£
, u_ch¨ *
p
,

110 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

113 
ngx_comm™d_t
 
	gngx_hâp_geo_comm™ds
[] = {

115 { 
ngx_°rög
("geo"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

117 
ngx_hâp_geo_block
,

118 
NGX_HTTP_MAIN_CONF_OFFSET
,

120 
NULL
 },

122 
ngx_nuŒ_comm™d


126 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geo_moduÀ_˘x
 = {

127 
NULL
,

128 
NULL
,

130 
NULL
,

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
NULL
,

137 
NULL


141 
ngx_moduÀ_t
 
	gngx_hâp_geo_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_hâp_geo_moduÀ_˘x
,

144 
ngx_hâp_geo_comm™ds
,

145 
NGX_HTTP_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


158 
u_ch¨
 
	mGEORNG
[6];

159 
u_ch¨
 
	mvîsi⁄
;

160 
u_ch¨
 
	m±r_size
;

161 
uöt32_t
 
	mídü¬ess
;

162 
uöt32_t
 
	m¸c32
;

163 } 
	tngx_hâp_geo_hódî_t
;

166 
ngx_hâp_geo_hódî_t
 
	gngx_hâp_geo_hódî
 = {

173 
ngx_öt_t


174 
	$ngx_hâp_geo_cidr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

175 
uöçå_t
 
d©a
)

177 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

179 
ö_addr_t
 
öaddr
;

180 
ngx_addr_t
 
addr
;

181 
sockaddr_ö
 *
sö
;

182 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

183 #i‡(
NGX_HAVE_INET6
)

184 
u_ch¨
 *
p
;

185 
ö6_addr
 *
öaddr6
;

188 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë!
NGX_OK
) {

189 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

190 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
INADDR_NONE
);

191 
d⁄e
;

194 
addr
.
sockaddr
->
ß_Ámûy
) {

196 #i‡(
NGX_HAVE_INET6
)

197 
AF_INET6
:

198 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

199 
p
 = 
öaddr6
->
s6_addr
;

201 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

202 
öaddr
 = 
p
[12] << 24;

203 
öaddr
 +
p
[13] << 16;

204 
öaddr
 +
p
[14] << 8;

205 
öaddr
 +
p
[15];

207 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

208 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

211 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

212 
	`ngx_ødix128åì_föd
(
˘x
->
u
.
åìs
.
åì6
, 
p
);

219 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

220 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

222 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

223 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

228 
d⁄e
:

230 *
v
 = *
vv
;

232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

233 "hâ∞geo: %v", 
v
);

235  
NGX_OK
;

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_hâp_geo_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

241 
uöçå_t
 
d©a
)

243 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

245 
ö_addr_t
 
öaddr
;

246 
ngx_addr_t
 
addr
;

247 
ngx_uöt_t
 
n
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_hâp_geo_ønge_t
 *
ønge
;

250 #i‡(
NGX_HAVE_INET6
)

251 
u_ch¨
 *
p
;

252 
ö6_addr
 *
öaddr6
;

255 *
v
 = *
˘x
->
u
.
high
.
deÁu…_vÆue
;

257 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë=
NGX_OK
) {

259 
addr
.
sockaddr
->
ß_Ámûy
) {

261 #i‡(
NGX_HAVE_INET6
)

262 
AF_INET6
:

263 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

265 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

266 
p
 = 
öaddr6
->
s6_addr
;

268 
öaddr
 = 
p
[12] << 24;

269 
öaddr
 +
p
[13] << 16;

270 
öaddr
 +
p
[14] << 8;

271 
öaddr
 +
p
[15];

274 
öaddr
 = 
INADDR_NONE
;

281 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

282 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

287 
öaddr
 = 
INADDR_NONE
;

290 i‡(
˘x
->
u
.
high
.
low
) {

291 
ønge
 = 
˘x
->
u
.
high
.
low
[
öaddr
 >> 16];

293 i‡(
ønge
) {

294 
n
 = 
öaddr
 & 0xffff;

296 i‡(
n
 >(
ngx_uöt_t
Ë
ønge
->
°¨t


297 && 
n
 <(
ngx_uöt_t
Ë
ønge
->
íd
)

299 *
v
 = *
ønge
->
vÆue
;

302 } (++
ønge
)->
vÆue
);

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 "hâ∞geo: %v", 
v
);

309  
NGX_OK
;

310 
	}
}

313 
ngx_öt_t


314 
	$ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

315 
ngx_addr_t
 *
addr
)

317 
ngx_èbÀ_ñt_t
 *
xfwd
;

319 i‡(
	`ngx_hâp_geo_ªÆ_addr
(
r
, 
˘x
, 
addr
Ë!
NGX_OK
) {

320  
NGX_ERROR
;

323 
xfwd
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

325 i‡(
xfwd
 !
NULL
 && 
˘x
->
¥oxõs
 != NULL) {

326 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, 
addr
, 
xfwd
->
vÆue
.
d©a
,

327 
xfwd
->
vÆue
.
Àn
, 
˘x
->
¥oxõs
,

328 
˘x
->
¥oxy_ªcursive
);

331  
NGX_OK
;

332 
	}
}

335 
ngx_öt_t


336 
	$ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

337 
ngx_addr_t
 *
addr
)

339 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

341 i‡(
˘x
->
ödex
 == -1) {

342 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

343 "hâ∞geÿ°¨ãd: %V", &
r
->
c⁄√˘i⁄
->
addr_ãxt
);

345 
addr
->
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

346 
addr
->
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

349  
NGX_OK
;

352 
v
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
˘x
->
ödex
);

354 i‡(
v
 =
NULL
 || v->
nŸ_found
) {

355 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

358  
NGX_ERROR
;

361 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

362 "hâ∞geÿ°¨ãd: %v", 
v
);

364 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
v
->
d©a
, v->
Àn
Ë=
NGX_OK
) {

365  
NGX_OK
;

368  
NGX_ERROR
;

369 
	}
}

373 
	$ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

375 *
rv
;

376 
size_t
 
Àn
;

377 
ngx_°r_t
 *
vÆue
, 
«me
;

378 
ngx_uöt_t
 
i
;

379 
ngx_c⁄f_t
 
ßve
;

380 
ngx_poﬁ_t
 *
poﬁ
;

381 
ngx_¨øy_t
 *
a
;

382 
ngx_hâp_v¨übÀ_t
 *
v¨
;

383 
ngx_hâp_geo_˘x_t
 *
geo
;

384 
ngx_hâp_geo_c⁄f_˘x_t
 
˘x
;

385 #i‡(
NGX_HAVE_INET6
)

386 
ö6_addr
 
zîo
;

389 
vÆue
 = 
cf
->
¨gs
->
ñts
;

391 
geo
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_geo_˘x_t
));

392 i‡(
geo
 =
NULL
) {

393  
NGX_CONF_ERROR
;

396 
«me
 = 
vÆue
[1];

398 i‡(
«me
.
d©a
[0] != '$') {

399 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

400 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

401  
NGX_CONF_ERROR
;

404 
«me
.
Àn
--;

405 
«me
.
d©a
++;

407 i‡(
cf
->
¨gs
->
√…s
 == 3) {

409 
geo
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

410 i‡(
geo
->
ödex
 =
NGX_ERROR
) {

411  
NGX_CONF_ERROR
;

414 
«me
 = 
vÆue
[2];

416 i‡(
«me
.
d©a
[0] != '$') {

417 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

418 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

419  
NGX_CONF_ERROR
;

422 
«me
.
Àn
--;

423 
«me
.
d©a
++;

426 
geo
->
ödex
 = -1;

429 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

430 i‡(
v¨
 =
NULL
) {

431  
NGX_CONF_ERROR
;

434 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

435 i‡(
poﬁ
 =
NULL
) {

436  
NGX_CONF_ERROR
;

439 
	`ngx_memzîo
(&
˘x
, (
ngx_hâp_geo_c⁄f_˘x_t
));

441 
˘x
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

442 i‡(
˘x
.
ãmp_poﬁ
 =
NULL
) {

443  
NGX_CONF_ERROR
;

446 
	`ngx_rbåì_öô
(&
˘x
.
rbåì
, &˘x.
£¡öñ
, 
ngx_°r_rbåì_ö£π_vÆue
);

448 
˘x
.
poﬁ
 = 
cf
->pool;

449 
˘x
.
d©a_size
 = (
ngx_hâp_geo_hódî_t
)

450 + (
ngx_hâp_v¨übÀ_vÆue_t
)

451 + 0x10000 * (
ngx_hâp_geo_ønge_t
 *);

452 
˘x
.
Ælow_bö¨y_ö˛ude
 = 1;

454 
ßve
 = *
cf
;

455 
cf
->
poﬁ
 =Öool;

456 
cf
->
˘x
 = &ctx;

457 
cf
->
h™dÀr
 = 
ngx_hâp_geo
;

458 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

460 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

462 *
cf
 = 
ßve
;

464 
geo
->
¥oxõs
 = 
˘x
.proxies;

465 
geo
->
¥oxy_ªcursive
 = 
˘x
.proxy_recursive;

467 i‡(
˘x
.
ønges
) {

469 i‡(
˘x
.
high
.
low
 && !˘x.
bö¨y_ö˛ude
) {

470 
i
 = 0; i < 0x10000; i++) {

471 
a
 = (
ngx_¨øy_t
 *Ë
˘x
.
high
.
low
[
i
];

473 i‡(
a
 =
NULL
 ||á->
√…s
 == 0) {

477 
Àn
 = 
a
->
√…s
 * (
ngx_hâp_geo_ønge_t
);

479 
˘x
.
high
.
low
[
i
] = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
Àn
 + (*));

480 i‡(
˘x
.
high
.
low
[
i
] =
NULL
) {

481  
NGX_CONF_ERROR
;

484 
	`ngx_mem˝y
(
˘x
.
high
.
low
[
i
], 
a
->
ñts
, 
Àn
);

485 
˘x
.
high
.
low
[
i
][
a
->
√…s
].
vÆue
 = 
NULL
;

486 
˘x
.
d©a_size
 +
Àn
 + (*);

489 i‡(
˘x
.
Ælow_bö¨y_ö˛ude


490 && !
˘x
.
outside_íåõs


491 && 
˘x
.
íåõs
 > 100000

492 && 
˘x
.
ö˛udes
 == 1)

494 
	`ngx_hâp_geo_¸óã_bö¨y_ba£
(&
˘x
);

498 i‡(
˘x
.
high
.
deÁu…_vÆue
 =
NULL
) {

499 
˘x
.
high
.
deÁu…_vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

502 
geo
->
u
.
high
 = 
˘x
.high;

504 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_ønge_v¨übÀ
;

505 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

507 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

508 
	`ngx_de°roy_poﬁ
(
poﬁ
);

511 i‡(
˘x
.
åì
 =
NULL
) {

512 
˘x
.
åì
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

513 i‡(
˘x
.
åì
 =
NULL
) {

514  
NGX_CONF_ERROR
;

518 
geo
->
u
.
åìs
.
åì
 = 
˘x
.tree;

520 #i‡(
NGX_HAVE_INET6
)

521 i‡(
˘x
.
åì6
 =
NULL
) {

522 
˘x
.
åì6
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

523 i‡(
˘x
.
åì6
 =
NULL
) {

524  
NGX_CONF_ERROR
;

528 
geo
->
u
.
åìs
.
åì6
 = 
˘x
.tree6;

531 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_cidr_v¨übÀ
;

532 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

534 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

535 
	`ngx_de°roy_poﬁ
(
poﬁ
);

537 i‡(
	`ngx_ødix32åì_ö£π
(
˘x
.
åì
, 0, 0,

538 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

539 =
NGX_ERROR
)

541  
NGX_CONF_ERROR
;

546 #i‡(
NGX_HAVE_INET6
)

547 i‡(
	`ngx_ødix128åì_ö£π
(
˘x
.
åì6
, 
zîo
.
s6_addr
, zero.s6_addr,

548 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

549 =
NGX_ERROR
)

551  
NGX_CONF_ERROR
;

556  
rv
;

557 
	}
}

561 
	$ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

563 *
rv
;

564 
ngx_°r_t
 *
vÆue
;

565 
ngx_cidr_t
 
cidr
;

566 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
;

568 
˘x
 = 
cf
->ctx;

570 
vÆue
 = 
cf
->
¨gs
->
ñts
;

572 i‡(
cf
->
¨gs
->
√…s
 == 1) {

574 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "ranges") == 0) {

576 i‡(
˘x
->
åì


577 #i‡(
NGX_HAVE_INET6
)

578 || 
˘x
->
åì6


582 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

585 
Áûed
;

588 
˘x
->
ønges
 = 1;

590 
rv
 = 
NGX_CONF_OK
;

592 
d⁄e
;

595 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy_recursive") == 0) {

596 
˘x
->
¥oxy_ªcursive
 = 1;

597 
rv
 = 
NGX_CONF_OK
;

598 
d⁄e
;

602 i‡(
cf
->
¨gs
->
√…s
 != 2) {

603 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

605 
Áûed
;

608 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

610 
rv
 = 
	`ngx_hâp_geo_ö˛ude
(
cf
, 
˘x
, &
vÆue
[1]);

612 
d⁄e
;

614 } i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy") == 0) {

616 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

617 
Áûed
;

620 
rv
 = 
	`ngx_hâp_geo_add_¥oxy
(
cf
, 
˘x
, &
cidr
);

622 
d⁄e
;

625 i‡(
˘x
->
ønges
) {

626 
rv
 = 
	`ngx_hâp_geo_ønge
(
cf
, 
˘x
, 
vÆue
);

629 
rv
 = 
	`ngx_hâp_geo_cidr
(
cf
, 
˘x
, 
vÆue
);

632 
d⁄e
:

634 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

636  
rv
;

638 
Áûed
:

640 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

642  
NGX_CONF_ERROR
;

643 
	}
}

647 
	$ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

648 
ngx_°r_t
 *
vÆue
)

650 
u_ch¨
 *
p
, *
œ°
;

651 
ö_addr_t
 
°¨t
, 
íd
;

652 
ngx_°r_t
 *
√t
;

653 
ngx_uöt_t
 
dñ
;

655 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

657 i‡(
˘x
->
high
.
deÁu…_vÆue
) {

658 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

660 &
vÆue
[1], 
˘x
->
high
.
deÁu…_vÆue
);

663 
˘x
->
high
.
deÁu…_vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &
vÆue
[1]);

664 i‡(
˘x
->
high
.
deÁu…_vÆue
 =
NULL
) {

665  
NGX_CONF_ERROR
;

668  
NGX_CONF_OK
;

671 i‡(
˘x
->
bö¨y_ö˛ude
) {

672 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

674 
˘x
->
ö˛ude_«me
.
d©a
);

675  
NGX_CONF_ERROR
;

678 i‡(
˘x
->
high
.
low
 =
NULL
) {

679 
˘x
->
high
.
low
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
,

680 0x10000 * (
ngx_hâp_geo_ønge_t
 *));

681 i‡(
˘x
->
high
.
low
 =
NULL
) {

682  
NGX_CONF_ERROR
;

686 
˘x
->
íåõs
++;

687 
˘x
->
outside_íåõs
 = 1;

689 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

690 
√t
 = &
vÆue
[1];

691 
dñ
 = 1;

694 
√t
 = &
vÆue
[0];

695 
dñ
 = 0;

698 
œ°
 = 
√t
->
d©a
 +Çë->
Àn
;

700 
p
 = 
	`ngx_°æchr
(
√t
->
d©a
, 
œ°
, '-');

702 i‡(
p
 =
NULL
) {

703 
övÆid
;

706 
°¨t
 = 
	`ngx_öë_addr
(
√t
->
d©a
, 
p
 -Çet->data);

708 i‡(
°¨t
 =
INADDR_NONE
) {

709 
övÆid
;

712 
°¨t
 = 
	`¡ohl
(start);

714 
p
++;

716 
íd
 = 
	`ngx_öë_addr
(
p
, 
œ°
 -Ö);

718 i‡(
íd
 =
INADDR_NONE
) {

719 
övÆid
;

722 
íd
 = 
	`¡ohl
(end);

724 i‡(
°¨t
 > 
íd
) {

725 
övÆid
;

728 i‡(
dñ
) {

729 i‡(
	`ngx_hâp_geo_dñëe_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
)) {

730 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

731 "nÿaddªs†øngê\"%V\"Åÿdñëe", 
√t
);

734  
NGX_CONF_OK
;

737 
˘x
->
vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &value[1]);

739 i‡(
˘x
->
vÆue
 =
NULL
) {

740  
NGX_CONF_ERROR
;

743 
˘x
->
√t
 =Çet;

745  
	`ngx_hâp_geo_add_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
);

747 
övÆid
:

749 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÑ™gê\"%V\"", 
√t
);

751  
NGX_CONF_ERROR
;

752 
	}
}

758 
	$ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

759 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

761 
ö_addr_t
 
n
;

762 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
;

763 
ngx_¨øy_t
 *
a
;

764 
ngx_hâp_geo_ønge_t
 *
ønge
;

766 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

768 
h
 = 
n
 >> 16;

770 i‡(
n
 =
°¨t
) {

771 
s
 = 
n
 & 0xffff;

773 
s
 = 0;

776 i‡((
n
 | 0xffffË> 
íd
) {

777 
e
 = 
íd
 & 0xffff;

780 
e
 = 0xffff;

783 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

785 i‡(
a
 =
NULL
) {

786 
a
 = 
	`ngx_¨øy_¸óã
(
˘x
->
ãmp_poﬁ
, 64,

787 (
ngx_hâp_geo_ønge_t
));

788 i‡(
a
 =
NULL
) {

789  
NGX_CONF_ERROR
;

792 
˘x
->
high
.
low
[
h
] = (
ngx_hâp_geo_ønge_t
 *Ë
a
;

795 
i
 = 
a
->
√…s
;

796 
ønge
 = 
a
->
ñts
;

798 
i
) {

800 
i
--;

802 i‡(
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
) {

806 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
íd
) {

810 
ønge
 = 
	`ngx_¨øy_push
(
a
);

811 i‡(
ønge
 =
NULL
) {

812  
NGX_CONF_ERROR
;

815 
ønge
 = 
a
->
ñts
;

817 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

818 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

820 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

821 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

822 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

824 
√xt
;

827 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


828 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

830 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

832 
˘x
->
√t
, ctx->
vÆue
, 
ønge
[
i
].value);

834 
ønge
[
i
].
vÆue
 = 
˘x
->value;

836 
√xt
;

839 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


840 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

844 
ønge
 = 
	`ngx_¨øy_push
(
a
);

845 i‡(
ønge
 =
NULL
) {

846  
NGX_CONF_ERROR
;

849 
ønge
 = 
	`ngx_¨øy_push
(
a
);

850 i‡(
ønge
 =
NULL
) {

851  
NGX_CONF_ERROR
;

854 
ønge
 = 
a
->
ñts
;

856 
	`ngx_memmove
(&
ønge
[
i
 + 3], &range[i + 1],

857 (
a
->
√…s
 - 3 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

859 
ønge
[
i
 + 2].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

860 
ønge
[
i
 + 2].
íd
 =Ñange[i].end;

861 
ønge
[
i
 + 2].
vÆue
 =Ñange[i].value;

863 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

864 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

865 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

867 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

869 
√xt
;

872 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


873 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

877 
ønge
 = 
	`ngx_¨øy_push
(
a
);

878 i‡(
ønge
 =
NULL
) {

879  
NGX_CONF_ERROR
;

882 
ønge
 = 
a
->
ñts
;

884 
	`ngx_memmove
(&
ønge
[
i
 + 1], &range[i],

885 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

887 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

889 
ønge
[
i
].
°¨t
 = (
u_sh‹t
Ë
s
;

890 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë
e
;

891 
ønge
[
i
].
vÆue
 = 
˘x
->value;

893 
√xt
;

896 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


897 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

901 
ønge
 = 
	`ngx_¨øy_push
(
a
);

902 i‡(
ønge
 =
NULL
) {

903  
NGX_CONF_ERROR
;

906 
ønge
 = 
a
->
ñts
;

908 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

909 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

911 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

912 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

913 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

915 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

917 
√xt
;

920 
s
 = (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
;

921 
e
 = (
ngx_uöt_t
Ë
ønge
[
i
].
íd
;

923 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

925 
˘x
->
√t
,

926 
h
 >> 8, h & 0xff, 
s
 >> 8, s & 0xff,

927 
h
 >> 8, h & 0xff, 
e
 >> 8,É & 0xff);

929  
NGX_CONF_ERROR
;

934 
ønge
 = 
	`ngx_¨øy_push
(
a
);

935 i‡(
ønge
 =
NULL
) {

936  
NGX_CONF_ERROR
;

939 
ønge
->
°¨t
 = (
u_sh‹t
Ë
s
;

940 
ønge
->
íd
 = (
u_sh‹t
Ë
e
;

941 
ønge
->
vÆue
 = 
˘x
->value;

943 
√xt
:

948  
NGX_CONF_OK
;

949 
	}
}

952 
ngx_uöt_t


953 
	$ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

954 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

956 
ö_addr_t
 
n
;

957 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
, 
w¨n
;

958 
ngx_¨øy_t
 *
a
;

959 
ngx_hâp_geo_ønge_t
 *
ønge
;

961 
w¨n
 = 0;

963 
n
 = 
°¨t
;Ç <
íd
;Ç += 0x10000) {

965 
h
 = 
n
 >> 16;

967 i‡(
n
 =
°¨t
) {

968 
s
 = 
n
 & 0xffff;

970 
s
 = 0;

973 i‡((
n
 | 0xffffË> 
íd
) {

974 
e
 = 
íd
 & 0xffff;

977 
e
 = 0xffff;

980 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

982 i‡(
a
 =
NULL
) {

983 
w¨n
 = 1;

987 
ønge
 = 
a
->
ñts
;

988 
i
 = 0; i < 
a
->
√…s
; i++) {

990 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


991 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

993 
	`ngx_memmove
(&
ønge
[
i
], &range[i + 1],

994 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

996 
a
->
√…s
--;

1001 i‡(
s
 !(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


1002 && 
e
 !(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

1007 
w¨n
 = 1;

1011  
w¨n
;

1012 
	}
}

1016 
	$ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1017 
ngx_°r_t
 *
vÆue
)

1019 *
rv
;

1020 
ngx_öt_t
 
rc
, 
dñ
;

1021 
ngx_°r_t
 *
√t
;

1022 
ngx_cidr_t
 
cidr
;

1024 i‡(
˘x
->
åì
 =
NULL
) {

1025 
˘x
->
åì
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1026 i‡(
˘x
->
åì
 =
NULL
) {

1027  
NGX_CONF_ERROR
;

1031 #i‡(
NGX_HAVE_INET6
)

1032 i‡(
˘x
->
åì6
 =
NULL
) {

1033 
˘x
->
åì6
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1034 i‡(
˘x
->
åì6
 =
NULL
) {

1035  
NGX_CONF_ERROR
;

1040 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

1041 
cidr
.
Ámûy
 = 
AF_INET
;

1042 
cidr
.
u
.
ö
.
addr
 = 0;

1043 
cidr
.
u
.
ö
.
mask
 = 0;

1045 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1047 i‡(
rv
 !
NGX_CONF_OK
) {

1048  
rv
;

1051 #i‡(
NGX_HAVE_INET6
)

1052 
cidr
.
Ámûy
 = 
AF_INET6
;

1053 
	`ngx_memzîo
(&
cidr
.
u
.
ö6
, (
ngx_ö6_cidr_t
));

1055 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1057 i‡(
rv
 !
NGX_CONF_OK
) {

1058  
rv
;

1062  
NGX_CONF_OK
;

1065 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

1066 
√t
 = &
vÆue
[1];

1067 
dñ
 = 1;

1070 
√t
 = &
vÆue
[0];

1071 
dñ
 = 0;

1074 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, 
√t
, &
cidr
Ë!
NGX_OK
) {

1075  
NGX_CONF_ERROR
;

1078 i‡(
cidr
.
Ámûy
 =
AF_INET
) {

1079 
cidr
.
u
.
ö
.
addr
 = 
	`¡ohl
(cidr.u.in.addr);

1080 
cidr
.
u
.
ö
.
mask
 = 
	`¡ohl
(cidr.u.in.mask);

1083 i‡(
dñ
) {

1084 
cidr
.
Ámûy
) {

1086 #i‡(
NGX_HAVE_INET6
)

1087 
AF_INET6
:

1088 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1089 
cidr
.
u
.
ö6
.
addr
.
s6_addr
,

1090 
cidr
.
u
.
ö6
.
mask
.
s6_addr
);

1095 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
,

1096 
cidr
.
u
.
ö
.
mask
);

1100 i‡(
rc
 !
NGX_OK
) {

1101 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1102 "nÿ√tw‹k \"%V\"Åÿdñëe", 
√t
);

1105  
NGX_CONF_OK
;

1108  
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], 
√t
);

1109 
	}
}

1113 
	$ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1114 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
)

1116 
ngx_öt_t
 
rc
;

1117 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ﬁd
;

1119 
vÆ
 = 
	`ngx_hâp_geo_vÆue
(
cf
, 
˘x
, 
vÆue
);

1121 i‡(
vÆ
 =
NULL
) {

1122  
NGX_CONF_ERROR
;

1125 
cidr
->
Ámûy
) {

1127 #i‡(
NGX_HAVE_INET6
)

1128 
AF_INET6
:

1129 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1130 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1131 (
uöçå_t
Ë
vÆ
);

1133 i‡(
rc
 =
NGX_OK
) {

1134  
NGX_CONF_OK
;

1137 i‡(
rc
 =
NGX_ERROR
) {

1138  
NGX_CONF_ERROR
;

1143 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1144 
	`ngx_ødix128åì_föd
(
˘x
->
åì6
,

1145 
cidr
->
u
.
ö6
.
addr
.
s6_addr
);

1147 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1149 
√t
, 
vÆ
, 
ﬁd
);

1151 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1152 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1153 
cidr
->
u
.
ö6
.
mask
.
s6_addr
);

1155 i‡(
rc
 =
NGX_ERROR
) {

1156 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1157  
NGX_CONF_ERROR
;

1160 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1161 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1162 (
uöçå_t
Ë
vÆ
);

1168 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1169 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1171 i‡(
rc
 =
NGX_OK
) {

1172  
NGX_CONF_OK
;

1175 i‡(
rc
 =
NGX_ERROR
) {

1176  
NGX_CONF_ERROR
;

1181 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1182 
	`ngx_ødix32åì_föd
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
);

1184 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1186 
√t
, 
vÆ
, 
ﬁd
);

1188 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
,

1189 
cidr
->
u
.
ö
.
addr
, cidr->u.ö.
mask
);

1191 i‡(
rc
 =
NGX_ERROR
) {

1192 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1193  
NGX_CONF_ERROR
;

1196 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1197 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1202 i‡(
rc
 =
NGX_OK
) {

1203  
NGX_CONF_OK
;

1206  
NGX_CONF_ERROR
;

1207 
	}
}

1210 
ngx_hâp_v¨übÀ_vÆue_t
 *

1211 
	$ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1212 
ngx_°r_t
 *
vÆue
)

1214 
uöt32_t
 
hash
;

1215 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
;

1216 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1218 
hash
 = 
	`ngx_¸c32_l⁄g
(
vÆue
->
d©a
, vÆue->
Àn
);

1220 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1221 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, 
vÆue
, 
hash
);

1223 i‡(
gvvn
) {

1224  
gvvn
->
vÆue
;

1227 
vÆ
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1228 i‡(
vÆ
 =
NULL
) {

1229  
NULL
;

1232 
vÆ
->
Àn
 = 
vÆue
->len;

1233 
vÆ
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
poﬁ
, 
vÆue
);

1234 i‡(
vÆ
->
d©a
 =
NULL
) {

1235  
NULL
;

1238 
vÆ
->
vÆid
 = 1;

1239 
vÆ
->
no_ˇchóbÀ
 = 0;

1240 
vÆ
->
nŸ_found
 = 0;

1242 
gvvn
 = 
	`ngx_∑Œoc
(
˘x
->
ãmp_poﬁ
,

1243 (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
));

1244 i‡(
gvvn
 =
NULL
) {

1245  
NULL
;

1248 
gvvn
->
¢
.
node
.
key
 = 
hash
;

1249 
gvvn
->
¢
.
°r
.
Àn
 = 
vÆ
->len;

1250 
gvvn
->
¢
.
°r
.
d©a
 = 
vÆ
->data;

1251 
gvvn
->
vÆue
 = 
vÆ
;

1252 
gvvn
->
off£t
 = 0;

1254 
	`ngx_rbåì_ö£π
(&
˘x
->
rbåì
, &
gvvn
->
¢
.
node
);

1256 
˘x
->
d©a_size
 +
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vÆue
->
Àn
,

1259  
vÆ
;

1260 
	}
}

1264 
	$ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1265 
ngx_cidr_t
 *
cidr
)

1267 
ngx_cidr_t
 *
c
;

1269 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1270 
˘x
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(˘x->
poﬁ
, 4, (
ngx_cidr_t
));

1271 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1272  
NGX_CONF_ERROR
;

1276 
c
 = 
	`ngx_¨øy_push
(
˘x
->
¥oxõs
);

1277 i‡(
c
 =
NULL
) {

1278  
NGX_CONF_ERROR
;

1281 *
c
 = *
cidr
;

1283  
NGX_CONF_OK
;

1284 
	}
}

1287 
ngx_öt_t


1288 
	$ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

1290 
ngx_öt_t
 
rc
;

1292 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

1293 
cidr
->
Ámûy
 = 
AF_INET
;

1294 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

1295 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

1297  
NGX_OK
;

1300 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

1302 i‡(
rc
 =
NGX_ERROR
) {

1303 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

1304  
NGX_ERROR
;

1307 i‡(
rc
 =
NGX_DONE
) {

1308 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1309 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

1312  
NGX_OK
;

1313 
	}
}

1317 
	$ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1318 
ngx_°r_t
 *
«me
)

1320 *
rv
;

1321 
ngx_°r_t
 
fûe
;

1323 
fûe
.
Àn
 = 
«me
->len + 4;

1324 
fûe
.
d©a
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, 
«me
->
Àn
 + 5);

1325 i‡(
fûe
.
d©a
 =
NULL
) {

1326  
NGX_CONF_ERROR
;

1329 
	`ngx_•rötf
(
fûe
.
d©a
, "%V.bö%Z", 
«me
);

1331 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

1332  
NGX_CONF_ERROR
;

1335 i‡(
˘x
->
ønges
) {

1336 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1338 
	`ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
cf
, 
˘x
, &
fûe
)) {

1339 
NGX_OK
:

1340  
NGX_CONF_OK
;

1341 
NGX_ERROR
:

1342  
NGX_CONF_ERROR
;

1348 
fûe
.
Àn
 -= 4;

1349 
fûe
.
d©a
[fûe.
Àn
] = '\0';

1351 
˘x
->
ö˛ude_«me
 = 
fûe
;

1353 i‡(
˘x
->
outside_íåõs
) {

1354 
˘x
->
Ælow_bö¨y_ö˛ude
 = 0;

1357 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1359 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

1361 
˘x
->
ö˛udes
++;

1362 
˘x
->
outside_íåõs
 = 0;

1364  
rv
;

1365 
	}
}

1368 
ngx_öt_t


1369 
	$ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1370 
ngx_°r_t
 *
«me
)

1372 
u_ch¨
 *
ba£
, 
ch
;

1373 
time_t
 
mtime
;

1374 
size_t
 
size
, 
Àn
;

1375 
ssize_t
 
n
;

1376 
uöt32_t
 
¸c32
;

1377 
ngx_îr_t
 
îr
;

1378 
ngx_öt_t
 
rc
;

1379 
ngx_uöt_t
 
i
;

1380 
ngx_fûe_t
 
fûe
;

1381 
ngx_fûe_öfo_t
 
fi
;

1382 
ngx_hâp_geo_ønge_t
 *
ønge
, **
ønges
;

1383 
ngx_hâp_geo_hódî_t
 *
hódî
;

1384 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1386 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1387 
fûe
.
«me
 = *name;

1388 
fûe
.
log
 = 
cf
->log;

1390 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
NGX_FILE_RDONLY
, 0, 0);

1391 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1392 
îr
 = 
ngx_î∫o
;

1393 i‡(
îr
 !
NGX_ENOENT
) {

1394 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
îr
,

1395 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1397  
NGX_DECLINED
;

1400 i‡(
˘x
->
outside_íåõs
) {

1401 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1403 
«me
->
d©a
);

1404 
rc
 = 
NGX_ERROR
;

1405 
d⁄e
;

1408 i‡(
˘x
->
bö¨y_ö˛ude
) {

1409 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1411 
«me
->
d©a
, 
˘x
->
ö˛ude_«me
.data);

1412 
rc
 = 
NGX_ERROR
;

1413 
d⁄e
;

1416 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1417 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1418 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1419 
Áûed
;

1422 
size
 = (
size_t
Ë
	`ngx_fûe_size
(&
fi
);

1423 
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

1425 
ch
 = 
«me
->
d©a
[«me->
Àn
 - 4];

1426 
«me
->
d©a
[«me->
Àn
 - 4] = '\0';

1428 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1429 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1430 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1431 
Áûed
;

1434 
«me
->
d©a
[«me->
Àn
 - 4] = 
ch
;

1436 i‡(
mtime
 < 
	`ngx_fûe_mtime
(&
fi
)) {

1437 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1438 "°Æêbö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1439 
Áûed
;

1442 
ba£
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

1443 i‡(
ba£
 =
NULL
) {

1444 
Áûed
;

1447 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
ba£
, 
size
, 0);

1449 i‡(
n
 =
NGX_ERROR
) {

1450 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1451 
ngx_ªad_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1452 
Áûed
;

1455 i‡((
size_t
Ë
n
 !
size
) {

1456 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

1457 
ngx_ªad_fûe_n
 " \"%s\"Ñeturned only %z bytes instead of %z",

1458 
«me
->
d©a
, 
n
, 
size
);

1459 
Áûed
;

1462 
hódî
 = (
ngx_hâp_geo_hódî_t
 *Ë
ba£
;

1464 i‡(
size
 < 16 || 
	`ngx_memcmp
(&
ngx_hâp_geo_hódî
, 
hódî
, 12) != 0) {

1465 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1466 "öcom∑tibÀ bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1467 
Áûed
;

1470 
	`ngx_¸c32_öô
(
¸c32
);

1472 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë(
ba£
 + (
ngx_hâp_geo_hódî_t
));

1474 
vv
->
d©a
) {

1475 
Àn
 = 
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vv
->len,

1477 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, 
Àn
);

1478 
vv
->
d©a
 +(
size_t
Ë
ba£
;

1479 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë((
u_ch¨
 *Ëvv + 
Àn
);

1481 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1482 
vv
++;

1484 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
vv
;

1486 
i
 = 0; i < 0x10000; i++) {

1487 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë&
ønges
[
i
], (*));

1488 i‡(
ønges
[
i
]) {

1489 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *)

1490 ((
u_ch¨
 *Ë
ønges
[
i
] + (
size_t
Ë
ba£
);

1494 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë&
ønges
[0x10000];

1496 (
u_ch¨
 *Ë
ønge
 < 
ba£
 + 
size
) {

1497 
ønge
->
vÆue
) {

1498 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
,

1499 (
ngx_hâp_geo_ønge_t
));

1500 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1501 ((
u_ch¨
 *Ë
ønge
->
vÆue
 + (
size_t
Ë
ba£
);

1502 
ønge
++;

1504 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
, (*));

1505 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë((
u_ch¨
 *)Ñange + (*));

1508 
	`ngx_¸c32_föÆ
(
¸c32
);

1510 i‡(
¸c32
 !
hódî
->crc32) {

1511 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1512 "CRC32 mism©ch i¿bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1513 
Áûed
;

1516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
, 0,

1517 "usög bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1519 
˘x
->
ö˛ude_«me
 = *
«me
;

1520 
˘x
->
bö¨y_ö˛ude
 = 1;

1521 
˘x
->
high
.
low
 = 
ønges
;

1522 
rc
 = 
NGX_OK
;

1524 
d⁄e
;

1526 
Áûed
:

1528 
rc
 = 
NGX_DECLINED
;

1530 
d⁄e
:

1532 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1533 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

1534 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1537  
rc
;

1538 
	}
}

1542 
	$ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
)

1544 
u_ch¨
 *
p
;

1545 
uöt32_t
 
hash
;

1546 
ngx_°r_t
 
s
;

1547 
ngx_uöt_t
 
i
;

1548 
ngx_fûe_m≠pög_t
 
fm
;

1549 
ngx_hâp_geo_ønge_t
 *
r
, *
ønge
, **
ønges
;

1550 
ngx_hâp_geo_hódî_t
 *
hódî
;

1551 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1553 
fm
.
«me
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, ctx->
ö˛ude_«me
.
Àn
 + 5);

1554 i‡(
fm
.
«me
 =
NULL
) {

1558 
	`ngx_•rötf
(
fm
.
«me
, "%V.bö%Z", &
˘x
->
ö˛ude_«me
);

1560 
fm
.
size
 = 
˘x
->
d©a_size
;

1561 
fm
.
log
 = 
˘x
->
poﬁ
->log;

1563 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
fm
.
log
, 0,

1564 "¸ótög bö¨y geÿøngêba£ \"%s\"", 
fm
.
«me
);

1566 i‡(
	`ngx_¸óã_fûe_m≠pög
(&
fm
Ë!
NGX_OK
) {

1570 
p
 = 
	`ngx_˝ymem
(
fm
.
addr
, &
ngx_hâp_geo_hódî
,

1571 (
ngx_hâp_geo_hódî_t
));

1573 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
fm
.
addr
,Ö, 
˘x
->
rbåì
.
roŸ
,

1574 
˘x
->
rbåì
.
£¡öñ
);

1576 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1578 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
p
;

1580 
p
 +0x10000 * (
ngx_hâp_geo_ønge_t
 *);

1582 
i
 = 0; i < 0x10000; i++) {

1583 
r
 = 
˘x
->
high
.
low
[
i
];

1584 i‡(
r
 =
NULL
) {

1588 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë
p
;

1589 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *Ë(
p
 - (
u_ch¨
 *Ë
fm
.
addr
);

1592 
s
.
Àn
 = 
r
->
vÆue
->len;

1593 
s
.
d©a
 = 
r
->
vÆue
->data;

1594 
hash
 = 
	`ngx_¸c32_l⁄g
(
s
.
d©a
, s.
Àn
);

1595 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1596 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, &
s
, 
hash
);

1598 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
gvvn
->
off£t
;

1599 
ønge
->
°¨t
 = 
r
->start;

1600 
ønge
->
íd
 = 
r
->end;

1601 
ønge
++;

1603 } (++
r
)->
vÆue
);

1605 
ønge
->
vÆue
 = 
NULL
;

1607 
p
 = (
u_ch¨
 *Ë
ønge
 + (*);

1610 
hódî
 = 
fm
.
addr
;

1611 
hódî
->
¸c32
 = 
	`ngx_¸c32_l⁄g
((
u_ch¨
 *Ë
fm
.
addr


1612 + (
ngx_hâp_geo_hódî_t
),

1613 
fm
.
size
 - (
ngx_hâp_geo_hódî_t
));

1615 
	`ngx_˛o£_fûe_m≠pög
(&
fm
);

1616 
	}
}

1619 
u_ch¨
 *

1620 
	$ngx_hâp_geo_c›y_vÆues
(
u_ch¨
 *
ba£
, u_ch¨ *
p
, 
ngx_rbåì_node_t
 *
node
,

1621 
ngx_rbåì_node_t
 *
£¡öñ
)

1623 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1624 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1626 i‡(
node
 =
£¡öñ
) {

1627  
p
;

1630 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *Ë
node
;

1631 
gvvn
->
off£t
 = 
p
 - 
ba£
;

1633 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
p
;

1634 *
vv
 = *
gvvn
->
vÆue
;

1635 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1636 
vv
->
d©a
 = (
u_ch¨
 *Ë(
p
 - 
ba£
);

1638 
p
 = 
	`ngx_˝ymem
’, 
gvvn
->
¢
.
°r
.
d©a
, gvvn->¢.°r.
Àn
);

1640 
p
 = 
	`ngx_Æign_±r
(p, (*));

1642 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
ba£
,Ö, 
node
->
À·
, 
£¡öñ
);

1644  
	`ngx_hâp_geo_c›y_vÆues
(
ba£
, 
p
, 
node
->
right
, 
£¡öñ
);

1645 
	}
}

	@src/http/modules/ngx_http_geoip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<GeoIP.h
>

13 
	~<GeoIPCôy.h
>

16 
	#NGX_GEOIP_COUNTRY_CODE
 0

	)

17 
	#NGX_GEOIP_COUNTRY_CODE3
 1

	)

18 
	#NGX_GEOIP_COUNTRY_NAME
 2

	)

22 
GeoIP
 *
	mcou¡ry
;

23 
GeoIP
 *
	m‹g
;

24 
GeoIP
 *
	mcôy
;

25 
ngx_¨øy_t
 *
	m¥oxõs
;

26 
ngx_Êag_t
 
	m¥oxy_ªcursive
;

27 #i‡(
NGX_HAVE_GEOIP_V6
)

28 
	mcou¡ry_v6
:1;

29 
	m‹g_v6
:1;

30 
	mcôy_v6
:1;

32 } 
	tngx_hâp_geoù_c⁄f_t
;

36 
ngx_°r_t
 *
	m«me
;

37 
uöçå_t
 
	md©a
;

38 } 
	tngx_hâp_geoù_v¨_t
;

41 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_±
)(
	tGeoIP
 *,

42 
	tu_l⁄g
 
	taddr
);

45 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
	gngx_hâp_geoù_cou¡ry_fun˘i⁄s
[] = {

46 
GeoIP_cou¡ry_code_by_ùnum
,

47 
GeoIP_cou¡ry_code3_by_ùnum
,

48 
GeoIP_cou¡ry_«me_by_ùnum
,

52 #i‡(
NGX_HAVE_GEOIP_V6
)

54 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
)(
	tGeoIP
 *,

55 
	tgeoùv6_t
 
	taddr
);

58 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
	gngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[] = {

59 
GeoIP_cou¡ry_code_by_ùnum_v6
,

60 
GeoIP_cou¡ry_code3_by_ùnum_v6
,

61 
GeoIP_cou¡ry_«me_by_ùnum_v6
,

67 
ngx_öt_t
 
ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
GeoIPRec‹d
 *
ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
);

81 
ngx_öt_t
 
ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

82 *
ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

83 *
ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

84 *
ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

86 *
ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

87 *
c⁄f
);

88 *
ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

89 *
c⁄f
);

90 *
ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

91 *
c⁄f
);

92 
ngx_öt_t
 
ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

93 
ngx_cidr_t
 *
cidr
);

94 
ngx_hâp_geoù_˛ónup
(*
d©a
);

97 
ngx_comm™d_t
 
	gngx_hâp_geoù_comm™ds
[] = {

99 { 
ngx_°rög
("geoip_country"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

101 
ngx_hâp_geoù_cou¡ry
,

102 
NGX_HTTP_MAIN_CONF_OFFSET
,

104 
NULL
 },

106 { 
ngx_°rög
("geoip_org"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

108 
ngx_hâp_geoù_‹g
,

109 
NGX_HTTP_MAIN_CONF_OFFSET
,

111 
NULL
 },

113 { 
ngx_°rög
("geoip_city"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

115 
ngx_hâp_geoù_côy
,

116 
NGX_HTTP_MAIN_CONF_OFFSET
,

118 
NULL
 },

120 { 
ngx_°rög
("geoip_proxy"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_geoù_¥oxy
,

123 
NGX_HTTP_MAIN_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("geoip_proxy_recursive"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_FLAG
,

129 
ngx_c⁄f_£t_Êag_¶Ÿ
,

130 
NGX_HTTP_MAIN_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_geoù_c⁄f_t
, 
¥oxy_ªcursive
),

132 
NULL
 },

134 
ngx_nuŒ_comm™d


138 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geoù_moduÀ_˘x
 = {

139 
ngx_hâp_geoù_add_v¨übÀs
,

140 
NULL
,

142 
ngx_hâp_geoù_¸óã_c⁄f
,

143 
ngx_hâp_geoù_öô_c⁄f
,

145 
NULL
,

146 
NULL
,

148 
NULL
,

149 
NULL


153 
ngx_moduÀ_t
 
	gngx_hâp_geoù_moduÀ
 = {

154 
NGX_MODULE_V1
,

155 &
ngx_hâp_geoù_moduÀ_˘x
,

156 
ngx_hâp_geoù_comm™ds
,

157 
NGX_HTTP_MODULE
,

158 
NULL
,

159 
NULL
,

160 
NULL
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NULL
,

165 
NGX_MODULE_V1_PADDING


169 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_geoù_v¨s
[] = {

171 { 
ngx_°rög
("geoù_cou¡ry_code"), 
NULL
,

172 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

173 
NGX_GEOIP_COUNTRY_CODE
, 0, 0 },

175 { 
ngx_°rög
("geoù_cou¡ry_code3"), 
NULL
,

176 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

177 
NGX_GEOIP_COUNTRY_CODE3
, 0, 0 },

179 { 
ngx_°rög
("geoù_cou¡ry_«me"), 
NULL
,

180 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

181 
NGX_GEOIP_COUNTRY_NAME
, 0, 0 },

183 { 
ngx_°rög
("geoù_‹g"), 
NULL
,

184 
ngx_hâp_geoù_‹g_v¨übÀ
,

187 { 
ngx_°rög
("geoù_côy_c⁄töít_code"), 
NULL
,

188 
ngx_hâp_geoù_côy_v¨übÀ
,

189 
off£tof
(
GeoIPRec‹d
, 
c⁄töít_code
), 0, 0 },

191 { 
ngx_°rög
("geoù_côy_cou¡ry_code"), 
NULL
,

192 
ngx_hâp_geoù_côy_v¨übÀ
,

193 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code
), 0, 0 },

195 { 
ngx_°rög
("geoù_côy_cou¡ry_code3"), 
NULL
,

196 
ngx_hâp_geoù_côy_v¨übÀ
,

197 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code3
), 0, 0 },

199 { 
ngx_°rög
("geoù_côy_cou¡ry_«me"), 
NULL
,

200 
ngx_hâp_geoù_côy_v¨übÀ
,

201 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_«me
), 0, 0 },

203 { 
ngx_°rög
("geoù_ªgi⁄"), 
NULL
,

204 
ngx_hâp_geoù_côy_v¨übÀ
,

205 
off£tof
(
GeoIPRec‹d
, 
ªgi⁄
), 0, 0 },

207 { 
ngx_°rög
("geoù_ªgi⁄_«me"), 
NULL
,

208 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
,

211 { 
ngx_°rög
("geoù_côy"), 
NULL
,

212 
ngx_hâp_geoù_côy_v¨übÀ
,

213 
off£tof
(
GeoIPRec‹d
, 
côy
), 0, 0 },

215 { 
ngx_°rög
("geoù_po°Æ_code"), 
NULL
,

216 
ngx_hâp_geoù_côy_v¨übÀ
,

217 
off£tof
(
GeoIPRec‹d
, 
po°Æ_code
), 0, 0 },

219 { 
ngx_°rög
("geoù_œtôude"), 
NULL
,

220 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

221 
off£tof
(
GeoIPRec‹d
, 
œtôude
), 0, 0 },

223 { 
ngx_°rög
("geoù_l⁄gôude"), 
NULL
,

224 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

225 
off£tof
(
GeoIPRec‹d
, 
l⁄gôude
), 0, 0 },

227 { 
ngx_°rög
("geoù_dma_code"), 
NULL
,

228 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

229 
off£tof
(
GeoIPRec‹d
, 
dma_code
), 0, 0 },

231 { 
ngx_°rög
("geoù_¨ó_code"), 
NULL
,

232 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

233 
off£tof
(
GeoIPRec‹d
, 
¨ó_code
), 0, 0 },

235 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

239 
u_l⁄g


240 
	$ngx_hâp_geoù_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

242 
ngx_addr_t
 
addr
;

243 
ngx_èbÀ_ñt_t
 *
xfwd
;

244 
sockaddr_ö
 *
sö
;

246 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

247 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

250 
xfwd
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

252 i‡(
xfwd
 !
NULL
 && 
gcf
->
¥oxõs
 != NULL) {

253 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
->
vÆue
.
d©a
,

254 
xfwd
->
vÆue
.
Àn
, 
gcf
->
¥oxõs
,

255 
gcf
->
¥oxy_ªcursive
);

258 #i‡(
NGX_HAVE_INET6
)

260 i‡(
addr
.
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

261 
u_ch¨
 *
p
;

262 
ö_addr_t
 
öaddr
;

263 
ö6_addr
 *
öaddr6
;

265 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

267 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

268 
p
 = 
öaddr6
->
s6_addr
;

270 
öaddr
 = 
p
[12] << 24;

271 
öaddr
 +
p
[13] << 16;

272 
öaddr
 +
p
[14] << 8;

273 
öaddr
 +
p
[15];

275  
öaddr
;

281 i‡(
addr
.
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

282  
INADDR_NONE
;

285 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

286  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

287 
	}
}

290 #i‡(
NGX_HAVE_GEOIP_V6
)

292 
geoùv6_t


293 
	$ngx_hâp_geoù_addr_v6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

295 
ngx_addr_t
 
addr
;

296 
ngx_èbÀ_ñt_t
 *
xfwd
;

297 
ö_addr_t
 
addr4
;

298 
ö6_addr
 
addr6
;

299 
sockaddr_ö
 *
sö
;

300 
sockaddr_ö6
 *
sö6
;

302 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

303 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

306 
xfwd
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

308 i‡(
xfwd
 !
NULL
 && 
gcf
->
¥oxõs
 != NULL) {

309 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
->
vÆue
.
d©a
,

310 
xfwd
->
vÆue
.
Àn
, 
gcf
->
¥oxõs
,

311 
gcf
->
¥oxy_ªcursive
);

314 
addr
.
sockaddr
->
ß_Ámûy
) {

316 
AF_INET
:

318 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

319 
addr4
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

321 
	`ngx_memzîo
(&
addr6
, (
ö6_addr
));

322 
addr6
.
s6_addr
[10] = 0xff;

323 
addr6
.
s6_addr
[11] = 0xff;

324 
addr6
.
s6_addr
[12] = 
addr4
 >> 24;

325 
addr6
.
s6_addr
[13] = 
addr4
 >> 16;

326 
addr6
.
s6_addr
[14] = 
addr4
 >> 8;

327 
addr6
.
s6_addr
[15] = 
addr4
;

328  
addr6
;

330 
AF_INET6
:

331 
sö6
 = (
sockaddr_ö6
 *Ë
addr
.
sockaddr
;

332  
sö6
->
sö6_addr
;

335  
ö6addr_™y
;

337 
	}
}

342 
ngx_öt_t


343 
	$ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

344 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

346 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

347 
ngx_hâp_geoù_cou¡ry_fun˘i⁄s
[
d©a
];

348 #i‡(
NGX_HAVE_GEOIP_V6
)

349 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
h™dÀr_v6
 =

350 
ngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[
d©a
];

353 c⁄° *
vÆ
;

354 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

356 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

358 i‡(
gcf
->
cou¡ry
 =
NULL
) {

359 
nŸ_found
;

362 #i‡(
NGX_HAVE_GEOIP_V6
)

363 
vÆ
 = 
gcf
->
cou¡ry_v6


364 ? 
	`h™dÀr_v6
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr_v6
(
r
, gcf))

365 : 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

367 
vÆ
 = 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

370 i‡(
vÆ
 =
NULL
) {

371 
nŸ_found
;

374 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

375 
v
->
vÆid
 = 1;

376 
v
->
no_ˇchóbÀ
 = 0;

377 
v
->
nŸ_found
 = 0;

378 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

380  
NGX_OK
;

382 
nŸ_found
:

384 
v
->
nŸ_found
 = 1;

386  
NGX_OK
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

392 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

394 
size_t
 
Àn
;

395 *
vÆ
;

396 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

398 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

400 i‡(
gcf
->
‹g
 =
NULL
) {

401 
nŸ_found
;

404 #i‡(
NGX_HAVE_GEOIP_V6
)

405 
vÆ
 = 
gcf
->
‹g_v6


406 ? 
	`GeoIP_«me_by_ùnum_v6
(
gcf
->
‹g
,

407 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

408 : 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
,

409 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

411 
vÆ
 = 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

414 i‡(
vÆ
 =
NULL
) {

415 
nŸ_found
;

418 
Àn
 = 
	`ngx_°æí
(
vÆ
);

419 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

420 i‡(
v
->
d©a
 =
NULL
) {

421 
	`ngx_‰ì
(
vÆ
);

422  
NGX_ERROR
;

425 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

427 
v
->
Àn
 =Üen;

428 
v
->
vÆid
 = 1;

429 
v
->
no_ˇchóbÀ
 = 0;

430 
v
->
nŸ_found
 = 0;

432 
	`ngx_‰ì
(
vÆ
);

434  
NGX_OK
;

436 
nŸ_found
:

438 
v
->
nŸ_found
 = 1;

440  
NGX_OK
;

441 
	}
}

444 
ngx_öt_t


445 
	$ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

446 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

448 *
vÆ
;

449 
size_t
 
Àn
;

450 
GeoIPRec‹d
 *
gr
;

452 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

453 i‡(
gr
 =
NULL
) {

454 
nŸ_found
;

457 
vÆ
 = *(**Ë((*Ë
gr
 + 
d©a
);

458 i‡(
vÆ
 =
NULL
) {

459 
no_vÆue
;

462 
Àn
 = 
	`ngx_°æí
(
vÆ
);

463 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

464 i‡(
v
->
d©a
 =
NULL
) {

465 
	`GeoIPRec‹d_dñëe
(
gr
);

466  
NGX_ERROR
;

469 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

471 
v
->
Àn
 =Üen;

472 
v
->
vÆid
 = 1;

473 
v
->
no_ˇchóbÀ
 = 0;

474 
v
->
nŸ_found
 = 0;

476 
	`GeoIPRec‹d_dñëe
(
gr
);

478  
NGX_OK
;

480 
no_vÆue
:

482 
	`GeoIPRec‹d_dñëe
(
gr
);

484 
nŸ_found
:

486 
v
->
nŸ_found
 = 1;

488  
NGX_OK
;

489 
	}
}

492 
ngx_öt_t


493 
	$ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

494 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

496 
size_t
 
Àn
;

497 c⁄° *
vÆ
;

498 
GeoIPRec‹d
 *
gr
;

500 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

501 i‡(
gr
 =
NULL
) {

502 
nŸ_found
;

505 
vÆ
 = 
	`GeoIP_ªgi⁄_«me_by_code
(
gr
->
cou¡ry_code
, gr->
ªgi⁄
);

507 
	`GeoIPRec‹d_dñëe
(
gr
);

509 i‡(
vÆ
 =
NULL
) {

510 
nŸ_found
;

513 
Àn
 = 
	`ngx_°æí
(
vÆ
);

514 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

515 i‡(
v
->
d©a
 =
NULL
) {

516  
NGX_ERROR
;

519 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

521 
v
->
Àn
 =Üen;

522 
v
->
vÆid
 = 1;

523 
v
->
no_ˇchóbÀ
 = 0;

524 
v
->
nŸ_found
 = 0;

526  
NGX_OK
;

528 
nŸ_found
:

530 
v
->
nŸ_found
 = 1;

532  
NGX_OK
;

533 
	}
}

536 
ngx_öt_t


537 
	$ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

538 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

540 
vÆ
;

541 
GeoIPRec‹d
 *
gr
;

543 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

544 i‡(
gr
 =
NULL
) {

545 
v
->
nŸ_found
 = 1;

546  
NGX_OK
;

549 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
 + 5);

550 i‡(
v
->
d©a
 =
NULL
) {

551 
	`GeoIPRec‹d_dñëe
(
gr
);

552  
NGX_ERROR
;

555 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

557 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%.4f", 
vÆ
) - v->data;

559 
	`GeoIPRec‹d_dñëe
(
gr
);

561  
NGX_OK
;

562 
	}
}

565 
ngx_öt_t


566 
	$ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

567 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

569 
vÆ
;

570 
GeoIPRec‹d
 *
gr
;

572 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

573 i‡(
gr
 =
NULL
) {

574 
v
->
nŸ_found
 = 1;

575  
NGX_OK
;

578 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

579 i‡(
v
->
d©a
 =
NULL
) {

580 
	`GeoIPRec‹d_dñëe
(
gr
);

581  
NGX_ERROR
;

584 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

586 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%d", 
vÆ
) - v->data;

588 
	`GeoIPRec‹d_dñëe
(
gr
);

590  
NGX_OK
;

591 
	}
}

594 
GeoIPRec‹d
 *

595 
	$ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
)

597 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

599 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

601 i‡(
gcf
->
côy
) {

602 #i‡(
NGX_HAVE_GEOIP_V6
)

603  
gcf
->
côy_v6


604 ? 
	`GeoIP_ªc‹d_by_ùnum_v6
(
gcf
->
côy
,

605 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

606 : 
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
,

607 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

609  
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

613  
NULL
;

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

620 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

622 
v
 = 
ngx_hâp_geoù_v¨s
; v->
«me
.
Àn
; v++) {

623 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

624 i‡(
v¨
 =
NULL
) {

625  
NGX_ERROR
;

628 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

629 
v¨
->
d©a
 = 
v
->data;

632  
NGX_OK
;

633 
	}
}

637 
	$ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

639 
ngx_poﬁ_˛ónup_t
 *
˛n
;

640 
ngx_hâp_geoù_c⁄f_t
 *
c⁄f
;

642 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_geoù_c⁄f_t
));

643 i‡(
c⁄f
 =
NULL
) {

644  
NULL
;

647 
c⁄f
->
¥oxy_ªcursive
 = 
NGX_CONF_UNSET
;

649 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

650 i‡(
˛n
 =
NULL
) {

651  
NULL
;

654 
˛n
->
h™dÀr
 = 
ngx_hâp_geoù_˛ónup
;

655 
˛n
->
d©a
 = 
c⁄f
;

657  
c⁄f
;

658 
	}
}

662 
	$ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

664 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

666 
	`ngx_c⁄f_öô_vÆue
(
gcf
->
¥oxy_ªcursive
, 0);

668  
NGX_CONF_OK
;

669 
	}
}

673 
	$ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

675 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

677 
ngx_°r_t
 *
vÆue
;

679 i‡(
gcf
->
cou¡ry
) {

683 
vÆue
 = 
cf
->
¨gs
->
ñts
;

685 
gcf
->
cou¡ry
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

687 i‡(
gcf
->
cou¡ry
 =
NULL
) {

688 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

689 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

691  
NGX_CONF_ERROR
;

694 i‡(
cf
->
¨gs
->
√…s
 == 3) {

695 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

696 
	`GeoIP_£t_ch¨£t
 (
gcf
->
cou¡ry
, 
GEOIP_CHARSET_UTF8
);

699 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

700 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

701  
NGX_CONF_ERROR
;

705 
gcf
->
cou¡ry
->
d©aba£Ty≥
) {

707 
GEOIP_COUNTRY_EDITION
:

709  
NGX_CONF_OK
;

711 #i‡(
NGX_HAVE_GEOIP_V6
)

712 
GEOIP_COUNTRY_EDITION_V6
:

714 
gcf
->
cou¡ry_v6
 = 1;

715  
NGX_CONF_OK
;

719 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

721 &
vÆue
[1], 
gcf
->
cou¡ry
->
d©aba£Ty≥
);

722  
NGX_CONF_ERROR
;

724 
	}
}

728 
	$ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

730 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

732 
ngx_°r_t
 *
vÆue
;

734 i‡(
gcf
->
‹g
) {

738 
vÆue
 = 
cf
->
¨gs
->
ñts
;

740 
gcf
->
‹g
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

742 i‡(
gcf
->
‹g
 =
NULL
) {

743 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

744 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

746  
NGX_CONF_ERROR
;

749 i‡(
cf
->
¨gs
->
√…s
 == 3) {

750 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

751 
	`GeoIP_£t_ch¨£t
 (
gcf
->
‹g
, 
GEOIP_CHARSET_UTF8
);

754 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

755 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

756  
NGX_CONF_ERROR
;

760 
gcf
->
‹g
->
d©aba£Ty≥
) {

762 
GEOIP_ISP_EDITION
:

763 
GEOIP_ORG_EDITION
:

764 
GEOIP_DOMAIN_EDITION
:

765 
GEOIP_ASNUM_EDITION
:

767  
NGX_CONF_OK
;

769 #i‡(
NGX_HAVE_GEOIP_V6
)

770 
GEOIP_ISP_EDITION_V6
:

771 
GEOIP_ORG_EDITION_V6
:

772 
GEOIP_DOMAIN_EDITION_V6
:

773 
GEOIP_ASNUM_EDITION_V6
:

775 
gcf
->
‹g_v6
 = 1;

776  
NGX_CONF_OK
;

780 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

782 &
vÆue
[1], 
gcf
->
‹g
->
d©aba£Ty≥
);

783  
NGX_CONF_ERROR
;

785 
	}
}

789 
	$ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

791 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

793 
ngx_°r_t
 *
vÆue
;

795 i‡(
gcf
->
côy
) {

799 
vÆue
 = 
cf
->
¨gs
->
ñts
;

801 
gcf
->
côy
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

803 i‡(
gcf
->
côy
 =
NULL
) {

804 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

805 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

807  
NGX_CONF_ERROR
;

810 i‡(
cf
->
¨gs
->
√…s
 == 3) {

811 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

812 
	`GeoIP_£t_ch¨£t
 (
gcf
->
côy
, 
GEOIP_CHARSET_UTF8
);

815 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

816 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

817  
NGX_CONF_ERROR
;

821 
gcf
->
côy
->
d©aba£Ty≥
) {

823 
GEOIP_CITY_EDITION_REV0
:

824 
GEOIP_CITY_EDITION_REV1
:

826  
NGX_CONF_OK
;

828 #i‡(
NGX_HAVE_GEOIP_V6
)

829 
GEOIP_CITY_EDITION_REV0_V6
:

830 
GEOIP_CITY_EDITION_REV1_V6
:

832 
gcf
->
côy_v6
 = 1;

833  
NGX_CONF_OK
;

837 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

839 &
vÆue
[1], 
gcf
->
côy
->
d©aba£Ty≥
);

840  
NGX_CONF_ERROR
;

842 
	}
}

846 
	$ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

848 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

850 
ngx_°r_t
 *
vÆue
;

851 
ngx_cidr_t
 
cidr
, *
c
;

853 
vÆue
 = 
cf
->
¨gs
->
ñts
;

855 i‡(
	`ngx_hâp_geoù_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

856  
NGX_CONF_ERROR
;

859 i‡(
gcf
->
¥oxõs
 =
NULL
) {

860 
gcf
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_cidr_t
));

861 i‡(
gcf
->
¥oxõs
 =
NULL
) {

862  
NGX_CONF_ERROR
;

866 
c
 = 
	`ngx_¨øy_push
(
gcf
->
¥oxõs
);

867 i‡(
c
 =
NULL
) {

868  
NGX_CONF_ERROR
;

871 *
c
 = 
cidr
;

873  
NGX_CONF_OK
;

874 
	}
}

876 
ngx_öt_t


877 
	$ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

879 
ngx_öt_t
 
rc
;

881 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

882 
cidr
->
Ámûy
 = 
AF_INET
;

883 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

884 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

886  
NGX_OK
;

889 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

891 i‡(
rc
 =
NGX_ERROR
) {

892 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

893  
NGX_ERROR
;

896 i‡(
rc
 =
NGX_DONE
) {

897 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

898 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

901  
NGX_OK
;

902 
	}
}

906 
	$ngx_hâp_geoù_˛ónup
(*
d©a
)

908 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
d©a
;

910 i‡(
gcf
->
cou¡ry
) {

911 
	`GeoIP_dñëe
(
gcf
->
cou¡ry
);

914 i‡(
gcf
->
‹g
) {

915 
	`GeoIP_dñëe
(
gcf
->
‹g
);

918 i‡(
gcf
->
côy
) {

919 
	`GeoIP_dñëe
(
gcf
->
côy
);

921 
	}
}

	@src/http/modules/ngx_http_gzip_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<zlib.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	mno_buf„r
;

19 
ngx_hash_t
 
	mty≥s
;

21 
ngx_bufs_t
 
	mbufs
;

23 
size_t
 
	mpo°p⁄e_gzùpög
;

24 
ngx_öt_t
 
	mÀvñ
;

25 
size_t
 
	mwbôs
;

26 
size_t
 
	mmemÀvñ
;

27 
ssize_t
 
	mmö_Àngth
;

29 
ngx_¨øy_t
 *
	mty≥s_keys
;

30 } 
	tngx_hâp_gzù_c⁄f_t
;

34 
ngx_chaö_t
 *
	mö
;

35 
ngx_chaö_t
 *
	m‰ì
;

36 
ngx_chaö_t
 *
	mbusy
;

37 
ngx_chaö_t
 *
	mout
;

38 
ngx_chaö_t
 **
	mœ°_out
;

40 
ngx_chaö_t
 *
	mc›õd
;

41 
ngx_chaö_t
 *
	mc›y_buf
;

43 
ngx_buf_t
 *
	mö_buf
;

44 
ngx_buf_t
 *
	mout_buf
;

45 
ngx_öt_t
 
	mbufs
;

47 *
	m¥óŒoˇãd
;

48 *
	m‰ì_mem
;

49 
ngx_uöt_t
 
	mÆloˇãd
;

51 
	mwbôs
;

52 
	mmemÀvñ
;

54 
	mÊush
:4;

55 
	mªdo
:1;

56 
	md⁄e
:1;

57 
	mnomem
:1;

58 
	mgzhódî
:1;

59 
	mbuf„rög
:1;

61 
size_t
 
	mzö
;

62 
size_t
 
	mzout
;

64 
uöt32_t
 
	m¸c32
;

65 
z_°ªam
 
	mz°ªam
;

66 
ngx_hâp_ªque°_t
 *
	mªque°
;

67 } 
	tngx_hâp_gzù_˘x_t
;

70 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

72 
	sgzåaûî
 {

73 
uöt32_t
 
	m¸c32
;

74 
uöt32_t
 
	mzÀn
;

79 
	sgzåaûî
 {

80 
u_ch¨
 
	m¸c32
[4];

81 
u_ch¨
 
	mzÀn
[4];

87 
ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_gzù_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
,

90 
ngx_chaö_t
 *
ö
);

91 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_gzù_˘x_t
 *
˘x
);

93 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_gzù_˘x_t
 *
˘x
);

95 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_gzù_˘x_t
 *
˘x
);

97 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_gzù_˘x_t
 *
˘x
);

99 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_gzù_˘x_t
 *
˘x
);

101 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_gzù_˘x_t
 *
˘x
);

104 *
ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

105 
u_öt
 
size
);

106 
ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
);

107 
ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_hâp_gzù_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

111 
ngx_öt_t
 
ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

114 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 *
ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

119 *
ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

122 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_gzù_comp_Àvñ_bounds
 = {

123 
ngx_c⁄f_check_num_bounds
, 1, 9

126 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_wödow_p
 = 
ngx_hâp_gzù_wödow
;

127 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_hash_p
 = 
ngx_hâp_gzù_hash
;

130 
ngx_comm™d_t
 
	gngx_hâp_gzù_fûãr_comm™ds
[] = {

132 { 
ngx_°rög
("gzip"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


134 |
NGX_CONF_FLAG
,

135 
ngx_c⁄f_£t_Êag_¶Ÿ
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
íabÀ
),

138 
NULL
 },

140 { 
ngx_°rög
("gzip_buffers"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

142 
ngx_c⁄f_£t_bufs_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
bufs
),

145 
NULL
 },

147 { 
ngx_°rög
("gzip_types"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

149 
ngx_hâp_ty≥s_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
ty≥s_keys
),

152 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

154 { 
ngx_°rög
("gzip_comp_level"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_num_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
Àvñ
),

159 &
ngx_hâp_gzù_comp_Àvñ_bounds
 },

161 { 
ngx_°rög
("gzip_window"),

162 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

163 
ngx_c⁄f_£t_size_¶Ÿ
,

164 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
wbôs
),

166 &
ngx_hâp_gzù_wödow_p
 },

168 { 
ngx_°rög
("gzip_hash"),

169 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

170 
ngx_c⁄f_£t_size_¶Ÿ
,

171 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
memÀvñ
),

173 &
ngx_hâp_gzù_hash_p
 },

175 { 
ngx_°rög
("postpone_gzipping"),

176 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

177 
ngx_c⁄f_£t_size_¶Ÿ
,

178 
NGX_HTTP_LOC_CONF_OFFSET
,

179 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
po°p⁄e_gzùpög
),

180 
NULL
 },

182 { 
ngx_°rög
("gzip_no_buffer"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

184 
ngx_c⁄f_£t_Êag_¶Ÿ
,

185 
NGX_HTTP_LOC_CONF_OFFSET
,

186 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
no_buf„r
),

187 
NULL
 },

189 { 
ngx_°rög
("gzip_min_length"),

190 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

191 
ngx_c⁄f_£t_size_¶Ÿ
,

192 
NGX_HTTP_LOC_CONF_OFFSET
,

193 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
mö_Àngth
),

194 
NULL
 },

196 
ngx_nuŒ_comm™d


200 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ_˘x
 = {

201 
ngx_hâp_gzù_add_v¨übÀs
,

202 
ngx_hâp_gzù_fûãr_öô
,

204 
NULL
,

205 
NULL
,

207 
NULL
,

208 
NULL
,

210 
ngx_hâp_gzù_¸óã_c⁄f
,

211 
ngx_hâp_gzù_mîge_c⁄f


215 
ngx_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ
 = {

216 
NGX_MODULE_V1
,

217 &
ngx_hâp_gzù_fûãr_moduÀ_˘x
,

218 
ngx_hâp_gzù_fûãr_comm™ds
,

219 
NGX_HTTP_MODULE
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NGX_MODULE_V1_PADDING


231 
ngx_°r_t
 
	gngx_hâp_gzù_øtio
 = 
ngx_°rög
("gzip_ratio");

233 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

234 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

237 
ngx_öt_t


238 
	$ngx_hâp_gzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

240 
ngx_èbÀ_ñt_t
 *
h
;

241 
ngx_hâp_gzù_˘x_t
 *
˘x
;

242 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

244 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

246 i‡(!
c⁄f
->
íabÀ


247 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


248 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_FORBIDDEN


249 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_FOUND
)

250 || (
r
->
hódîs_out
.
c⁄ã¡_ícodög


251 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

252 || (
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1

253 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < 
c⁄f
->
mö_Àngth
)

254 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL


255 || 
r
->
hódî_⁄ly
)

257  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

260 
r
->
gzù_v¨y
 = 1;

262 #i‡(
NGX_HTTP_DEGRADATION
)

264 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

266 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

268 i‡(
˛cf
->
gzù_dißbÀ_degød©i⁄
 && 
	`ngx_hâp_degøded
(
r
)) {

269  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

274 i‡(!
r
->
gzù_ã°ed
) {

275 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë!
NGX_OK
) {

276  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

279 } i‡(!
r
->
gzù_ok
) {

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

283 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gzù_˘x_t
));

284 i‡(
˘x
 =
NULL
) {

285  
NGX_ERROR
;

288 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gzù_fûãr_moduÀ
);

290 
˘x
->
ªque°
 = 
r
;

291 
˘x
->
buf„rög
 = (
c⁄f
->
po°p⁄e_gzùpög
 != 0);

293 
	`ngx_hâp_gzù_fûãr_mem‹y
(
r
, 
˘x
);

295 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

296 i‡(
h
 =
NULL
) {

297  
NGX_ERROR
;

300 
h
->
hash
 = 1;

301 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

302 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

303 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

305 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

307 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

308 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

310  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

311 
	}
}

314 
ngx_öt_t


315 
	$ngx_hâp_gzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

317 
rc
;

318 
ngx_chaö_t
 *
˛
;

319 
ngx_hâp_gzù_˘x_t
 *
˘x
;

321 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

323 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
 || 
r
->
hódî_⁄ly
) {

324  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

327 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

330 i‡(
˘x
->
buf„rög
) {

341 i‡(
ö
) {

342 
	`ngx_hâp_gzù_fûãr_buf„r
(
˘x
, 
ö
)) {

344 
NGX_OK
:

345  
NGX_OK
;

347 
NGX_DONE
:

348 
ö
 = 
NULL
;

352 
Áûed
;

356 
˘x
->
buf„rög
 = 0;

360 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

361 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

362 
Áûed
;

366 i‡(
ö
) {

367 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

368 
Áûed
;

372 i‡(
˘x
->
nomem
) {

376 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

377 
Áûed
;

380 
˛
 = 
NULL
;

382 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

383 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

384 
˘x
->
nomem
 = 0;

395 
rc
 = 
	`ngx_hâp_gzù_fûãr_add_d©a
(
r
, 
˘x
);

397 i‡(
rc
 =
NGX_DECLINED
) {

401 i‡(
rc
 =
NGX_AGAIN
) {

408 
rc
 = 
	`ngx_hâp_gzù_fûãr_gë_buf
(
r
, 
˘x
);

410 i‡(
rc
 =
NGX_DECLINED
) {

414 i‡(
rc
 =
NGX_ERROR
) {

415 
Áûed
;

419 
rc
 = 
	`ngx_hâp_gzù_fûãr_deÊ©e
(
r
, 
˘x
);

421 i‡(
rc
 =
NGX_OK
) {

425 i‡(
rc
 =
NGX_ERROR
) {

426 
Áûed
;

432 i‡(
˘x
->
out
 =
NULL
) {

433 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

435  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

438 i‡(!
˘x
->
gzhódî
) {

439 i‡(
	`ngx_hâp_gzù_fûãr_gzhódî
(
r
, 
˘x
Ë!
NGX_OK
) {

440 
Áûed
;

444 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

446 i‡(
rc
 =
NGX_ERROR
) {

447 
Áûed
;

450 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

452 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

453 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

454 
˘x
->
œ°_out
 = &˘x->
out
;

456 
˘x
->
nomem
 = 0;

458 i‡(
˘x
->
d⁄e
) {

459  
rc
;

465 
Áûed
:

467 
˘x
->
d⁄e
 = 1;

469 i‡(
˘x
->
¥óŒoˇãd
) {

470 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

472 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

475 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

477  
NGX_ERROR
;

478 
	}
}

482 
	$ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

484 
wbôs
, 
memÀvñ
;

485 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

487 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

489 
wbôs
 = 
c⁄f
->wbits;

490 
memÀvñ
 = 
c⁄f
->memlevel;

492 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 > 0) {

496 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < ((1 << (
wbôs
 - 1)) - 262)) {

497 
wbôs
--;

498 
memÀvñ
--;

501 i‡(
memÀvñ
 < 1) {

502 
memÀvñ
 = 1;

506 
˘x
->
wbôs
 = wbits;

507 
˘x
->
memÀvñ
 = memlevel;

521 
˘x
->
Æloˇãd
 = 8192 + (1 << (
wbôs
 + 2)Ë+ (1 << (
memÀvñ
 + 9));

522 
	}
}

525 
ngx_öt_t


526 
	$ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

528 
size_t
 
size
, 
buf„ªd
;

529 
ngx_buf_t
 *
b
, *
buf
;

530 
ngx_chaö_t
 *
˛
, **
Œ
;

531 
ngx_hâp_ªque°_t
 *
r
;

532 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

534 
r
 = 
˘x
->
ªque°
;

536 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

538 
buf„ªd
 = 0;

539 
Œ
 = &
˘x
->
ö
;

541 
˛
 = 
˘x
->
ö
; cl; c»˛->
√xt
) {

542 
buf„ªd
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

543 
Œ
 = &
˛
->
√xt
;

546 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

548 
ö
) {

549 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

550 i‡(
˛
 =
NULL
) {

551  
NGX_ERROR
;

554 
b
 = 
ö
->
buf
;

556 
size
 = 
b
->
œ°
 - b->
pos
;

557 
buf„ªd
 +
size
;

559 i‡(
b
->
Êush
 || b->
œ°_buf
 || 
buf„ªd
 > 
c⁄f
->
po°p⁄e_gzùpög
) {

560 
˘x
->
buf„rög
 = 0;

563 i‡(
˘x
->
buf„rög
 && 
size
) {

565 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

566 i‡(
buf
 =
NULL
) {

567  
NGX_ERROR
;

570 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->
pos
, 
b
->pos, 
size
);

571 
b
->
pos
 = b->
œ°
;

573 
buf
->
œ°_buf
 = 
b
->last_buf;

574 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

576 
˛
->
buf
 = buf;

579 
˛
->
buf
 = 
b
;

582 *
Œ
 = 
˛
;

583 
Œ
 = &
˛
->
√xt
;

584 
ö
 = in->
√xt
;

587 *
Œ
 = 
NULL
;

589  
˘x
->
buf„rög
 ? 
NGX_OK
 : 
NGX_DONE
;

590 
	}
}

593 
ngx_öt_t


594 
	$ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

595 
ngx_hâp_gzù_˘x_t
 *
˘x
)

597 
rc
;

598 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

600 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

602 
˘x
->
¥óŒoˇãd
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Æloˇãd
);

603 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

604  
NGX_ERROR
;

607 
˘x
->
‰ì_mem
 = ctx->
¥óŒoˇãd
;

609 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gzù_fûãr_Æloc
;

610 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gzù_fûãr_‰ì
;

611 
˘x
->
z°ªam
.
›aque
 = ctx;

613 
rc
 = 
	`deÊ©eInô2
(&
˘x
->
z°ªam
, (Ë
c⁄f
->
Àvñ
, 
Z_DEFLATED
,

614 - 
˘x
->
wbôs
, ctx->
memÀvñ
, 
Z_DEFAULT_STRATEGY
);

616 i‡(
rc
 !
Z_OK
) {

617 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

618 "deÊ©eInô2(ËÁûed: %d", 
rc
);

619  
NGX_ERROR
;

622 
˘x
->
œ°_out
 = &˘x->
out
;

623 
˘x
->
¸c32
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

624 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

626  
NGX_OK
;

627 
	}
}

630 
ngx_öt_t


631 
	$ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

633 
ngx_buf_t
 *
b
;

634 
ngx_chaö_t
 *
˛
;

635 
u_ch¨
 
gzhódî
[10] =

636 { 0x1f, 0x8b, 
Z_DEFLATED
, 0, 0, 0, 0, 0, 0, 3 };

638 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

639 i‡(
b
 =
NULL
) {

640  
NGX_ERROR
;

643 
b
->
mem‹y
 = 1;

644 
b
->
pos
 = 
gzhódî
;

645 
b
->
œ°
 = b->
pos
 + 10;

647 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

648 i‡(
˛
 =
NULL
) {

649  
NGX_ERROR
;

652 
˛
->
buf
 = 
b
;

653 
˛
->
√xt
 = 
˘x
->
out
;

654 
˘x
->
out
 = 
˛
;

656 
˘x
->
gzhódî
 = 1;

658  
NGX_OK
;

659 
	}
}

662 
ngx_öt_t


663 
	$ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

665 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

666  
NGX_OK
;

669 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

670 "gzù in: %p", 
˘x
->
ö
);

672 i‡(
˘x
->
ö
 =
NULL
) {

673  
NGX_DECLINED
;

676 i‡(
˘x
->
c›y_buf
) {

683 
˘x
->
c›y_buf
->
√xt
 = ctx->
c›õd
;

684 
˘x
->
c›õd
 = ctx->
c›y_buf
;

685 
˘x
->
c›y_buf
 = 
NULL
;

688 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

690 i‡(
˘x
->
ö_buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
) {

691 
˘x
->
c›y_buf
 = ctx->
ö
;

694 
˘x
->
ö
 = ctx->ö->
√xt
;

696 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

697 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

699 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

701 
˘x
->
ö_buf
,

702 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

704 i‡(
˘x
->
ö_buf
->
œ°_buf
) {

705 
˘x
->
Êush
 = 
Z_FINISH
;

707 } i‡(
˘x
->
ö_buf
->
Êush
) {

708 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

711 i‡(
˘x
->
z°ªam
.
avaû_ö
) {

713 
˘x
->
¸c32
 = 
	`¸c32
(˘x->¸c32, ctx->
z°ªam
.
√xt_ö
,

714 
˘x
->
z°ªam
.
avaû_ö
);

716 } i‡(
˘x
->
Êush
 =
Z_NO_FLUSH
) {

717  
NGX_AGAIN
;

720  
NGX_OK
;

721 
	}
}

724 
ngx_öt_t


725 
	$ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

727 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

729 i‡(
˘x
->
z°ªam
.
avaû_out
) {

730  
NGX_OK
;

733 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

735 i‡(
˘x
->
‰ì
) {

736 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

737 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

739 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

741 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

742 i‡(
˘x
->
out_buf
 =
NULL
) {

743  
NGX_ERROR
;

746 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

747 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

748 
˘x
->
bufs
++;

751 
˘x
->
nomem
 = 1;

752  
NGX_DECLINED
;

755 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

756 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

758  
NGX_OK
;

759 
	}
}

762 
ngx_öt_t


763 
	$ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

765 
rc
;

766 
ngx_buf_t
 *
b
;

767 
ngx_chaö_t
 *
˛
;

768 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

770 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

772 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

773 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

774 
˘x
->
Êush
, ctx->
ªdo
);

776 
rc
 = 
	`deÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

778 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

779 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

780 "deÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

781  
NGX_ERROR
;

784 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

786 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

787 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

788 
rc
);

790 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

792 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

794 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

795 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

797 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

798 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

802 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

804 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

808 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

809 i‡(
˛
 =
NULL
) {

810  
NGX_ERROR
;

813 
˛
->
buf
 = 
˘x
->
out_buf
;

814 
˛
->
√xt
 = 
NULL
;

815 *
˘x
->
œ°_out
 = 
˛
;

816 
˘x
->
œ°_out
 = &
˛
->
√xt
;

818 
˘x
->
ªdo
 = 1;

820  
NGX_AGAIN
;

823 
˘x
->
ªdo
 = 0;

825 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

827 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

829 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

830 i‡(
˛
 =
NULL
) {

831  
NGX_ERROR
;

834 
b
 = 
˘x
->
out_buf
;

836 i‡(
	`ngx_buf_size
(
b
) == 0) {

838 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

839 i‡(
b
 =
NULL
) {

840  
NGX_ERROR
;

844 
˘x
->
z°ªam
.
avaû_out
 = 0;

847 
b
->
Êush
 = 1;

849 
˛
->
buf
 = 
b
;

850 
˛
->
√xt
 = 
NULL
;

851 *
˘x
->
œ°_out
 = 
˛
;

852 
˘x
->
œ°_out
 = &
˛
->
√xt
;

854  
NGX_OK
;

857 i‡(
rc
 =
Z_STREAM_END
) {

859 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

860  
NGX_ERROR
;

863  
NGX_OK
;

866 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

868 i‡(
c⁄f
->
no_buf„r
 && 
˘x
->
ö
 =
NULL
) {

870 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

871 i‡(
˛
 =
NULL
) {

872  
NGX_ERROR
;

875 
˛
->
buf
 = 
˘x
->
out_buf
;

876 
˛
->
√xt
 = 
NULL
;

877 *
˘x
->
œ°_out
 = 
˛
;

878 
˘x
->
œ°_out
 = &
˛
->
√xt
;

880  
NGX_OK
;

883  
NGX_AGAIN
;

884 
	}
}

887 
ngx_öt_t


888 
	$ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

889 
ngx_hâp_gzù_˘x_t
 *
˘x
)

891 
rc
;

892 
ngx_buf_t
 *
b
;

893 
ngx_chaö_t
 *
˛
;

894 
gzåaûî
 *
åaûî
;

896 
˘x
->
zö
 = ctx->
z°ªam
.
tŸÆ_ö
;

897 
˘x
->
zout
 = 10 + ctx->
z°ªam
.
tŸÆ_out
 + 8;

899 
rc
 = 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

901 i‡(
rc
 !
Z_OK
) {

902 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

903 "deÊ©eEnd(ËÁûed: %d", 
rc
);

904  
NGX_ERROR
;

907 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

909 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

910 i‡(
˛
 =
NULL
) {

911  
NGX_ERROR
;

914 
˛
->
buf
 = 
˘x
->
out_buf
;

915 
˛
->
√xt
 = 
NULL
;

916 *
˘x
->
œ°_out
 = 
˛
;

917 
˘x
->
œ°_out
 = &
˛
->
√xt
;

919 i‡(
˘x
->
z°ªam
.
avaû_out
 >= 8) {

920 
åaûî
 = (
gzåaûî
 *Ë
˘x
->
out_buf
->
œ°
;

921 
˘x
->
out_buf
->
œ°
 += 8;

922 
˘x
->
out_buf
->
œ°_buf
 = 1;

925 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 8);

926 i‡(
b
 =
NULL
) {

927  
NGX_ERROR
;

930 
b
->
œ°_buf
 = 1;

932 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

933 i‡(
˛
 =
NULL
) {

934  
NGX_ERROR
;

937 
˛
->
buf
 = 
b
;

938 
˛
->
√xt
 = 
NULL
;

939 *
˘x
->
œ°_out
 = 
˛
;

940 
˘x
->
œ°_out
 = &
˛
->
√xt
;

941 
åaûî
 = (
gzåaûî
 *Ë
b
->
pos
;

942 
b
->
œ°
 += 8;

945 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

947 
åaûî
->
¸c32
 = 
˘x
->crc32;

948 
åaûî
->
zÀn
 = 
˘x
->
zö
;

952 
åaûî
->
¸c32
[0] = (
u_ch¨
Ë(
˘x
->crc32 & 0xff);

953 
åaûî
->
¸c32
[1] = (
u_ch¨
Ë((
˘x
->crc32 >> 8) & 0xff);

954 
åaûî
->
¸c32
[2] = (
u_ch¨
Ë((
˘x
->crc32 >> 16) & 0xff);

955 
åaûî
->
¸c32
[3] = (
u_ch¨
Ë((
˘x
->crc32 >> 24) & 0xff);

957 
åaûî
->
zÀn
[0] = (
u_ch¨
Ë(
˘x
->
zö
 & 0xff);

958 
åaûî
->
zÀn
[1] = (
u_ch¨
Ë((
˘x
->
zö
 >> 8) & 0xff);

959 
åaûî
->
zÀn
[2] = (
u_ch¨
Ë((
˘x
->
zö
 >> 16) & 0xff);

960 
åaûî
->
zÀn
[3] = (
u_ch¨
Ë((
˘x
->
zö
 >> 24) & 0xff);

964 
˘x
->
z°ªam
.
avaû_ö
 = 0;

965 
˘x
->
z°ªam
.
avaû_out
 = 0;

967 
˘x
->
d⁄e
 = 1;

969 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

971  
NGX_OK
;

972 
	}
}

976 
	$ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

978 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

980 *
p
;

981 
ngx_uöt_t
 
Æloc
;

983 
Æloc
 = 
ôems
 * 
size
;

985 i‡(
Æloc
 % 512 != 0 &&álloc < 8192) {

992 
Æloc
 = 8192;

995 i‡(
Æloc
 <
˘x
->
Æloˇãd
) {

996 
p
 = 
˘x
->
‰ì_mem
;

997 
˘x
->
‰ì_mem
 +
Æloc
;

998 
˘x
->
Æloˇãd
 -
Æloc
;

1000 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1002 
ôems
, 
size
, 
Æloc
, 
p
);

1004  
p
;

1007 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1009 
ôems
 * 
size
, 
˘x
->
Æloˇãd
);

1011 
p
 = 
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

1013  
p
;

1014 
	}
}

1018 
	$ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
)

1021 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

1023 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1024 "gzù fªe: %p", 
addªss
);

1026 
	}
}

1030 
	$ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

1031 
ngx_hâp_gzù_˘x_t
 *
˘x
)

1033 
ngx_chaö_t
 *
˛
;

1035 
˛
 = 
˘x
->
c›õd
; cl; c»˛->
√xt
) {

1036 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˛
->
buf
->
°¨t
);

1039 
˘x
->
c›õd
 = 
NULL
;

1040 
	}
}

1043 
ngx_öt_t


1044 
	$ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1046 
ngx_hâp_v¨übÀ_t
 *
v¨
;

1048 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_gzù_øtio
, 
NGX_HTTP_VAR_NOHASH
);

1049 i‡(
v¨
 =
NULL
) {

1050  
NGX_ERROR
;

1053 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_gzù_øtio_v¨übÀ
;

1055  
NGX_OK
;

1056 
	}
}

1059 
ngx_öt_t


1060 
	$ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1061 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1063 
ngx_uöt_t
 
zöt
, 
z‰ac
;

1064 
ngx_hâp_gzù_˘x_t
 *
˘x
;

1066 
v
->
vÆid
 = 1;

1067 
v
->
no_ˇchóbÀ
 = 0;

1068 
v
->
nŸ_found
 = 0;

1070 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

1072 i‡(
˘x
 =
NULL
 || ctx->
zout
 == 0) {

1073 
v
->
nŸ_found
 = 1;

1074  
NGX_OK
;

1077 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
 + 3);

1078 i‡(
v
->
d©a
 =
NULL
) {

1079  
NGX_ERROR
;

1082 
zöt
 = (
ngx_uöt_t
Ë(
˘x
->
zö
 / ctx->
zout
);

1083 
z‰ac
 = (
ngx_uöt_t
Ë((
˘x
->
zö
 * 100 / ctx->
zout
) % 100);

1085 i‡((
˘x
->
zö
 * 1000 / ctx->
zout
) % 10 > 4) {

1089 
z‰ac
++;

1091 i‡(
z‰ac
 > 99) {

1092 
zöt
++;

1093 
z‰ac
 = 0;

1097 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui.%02ui", 
zöt
, 
z‰ac
) - v->data;

1099  
NGX_OK
;

1100 
	}
}

1104 
	$ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1106 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

1108 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_c⁄f_t
));

1109 i‡(
c⁄f
 =
NULL
) {

1110  
NULL
;

1121 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1122 
c⁄f
->
no_buf„r
 = 
NGX_CONF_UNSET
;

1124 
c⁄f
->
po°p⁄e_gzùpög
 = 
NGX_CONF_UNSET_SIZE
;

1125 
c⁄f
->
Àvñ
 = 
NGX_CONF_UNSET
;

1126 
c⁄f
->
wbôs
 = 
NGX_CONF_UNSET_SIZE
;

1127 
c⁄f
->
memÀvñ
 = 
NGX_CONF_UNSET_SIZE
;

1128 
c⁄f
->
mö_Àngth
 = 
NGX_CONF_UNSET
;

1130  
c⁄f
;

1131 
	}
}

1135 
	$ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1137 
ngx_hâp_gzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1138 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

1140 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1141 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_buf„r
, 
¥ev
->no_buffer, 0);

1143 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

1144 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

1146 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_gzùpög
, 
¥ev
->postpone_gzipping,

1148 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
Àvñ
, 
¥ev
->level, 1);

1149 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
wbôs
, 
¥ev
->wbôs, 
MAX_WBITS
);

1150 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
memÀvñ
, 
¥ev
->memlevel,

1151 
MAX_MEM_LEVEL
 - 1);

1152 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mö_Àngth
, 
¥ev
->min_length, 20);

1154 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1155 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1156 
ngx_hâp_html_deÁu…_ty≥s
)

1157 !
NGX_OK
)

1159  
NGX_CONF_ERROR
;

1162  
NGX_CONF_OK
;

1163 
	}
}

1166 
ngx_öt_t


1167 
	$ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1169 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1170 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gzù_hódî_fûãr
;

1172 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1173 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gzù_body_fûãr
;

1175  
NGX_OK
;

1176 
	}
}

1180 
	$ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1182 
size_t
 *
≈
 = 
d©a
;

1184 
size_t
 
wbôs
, 
wsize
;

1186 
wbôs
 = 15;

1188 
wsize
 = 32 * 1024; wsize > 256; wsize >>= 1) {

1190 i‡(
wsize
 =*
≈
) {

1191 *
≈
 = 
wbôs
;

1193  
NGX_CONF_OK
;

1196 
wbôs
--;

1200 
	}
}

1204 
	$ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1206 
size_t
 *
≈
 = 
d©a
;

1208 
size_t
 
memÀvñ
, 
hsize
;

1210 
memÀvñ
 = 9;

1212 
hsize
 = 128 * 1024; hsize > 256; hsize >>= 1) {

1214 i‡(
hsize
 =*
≈
) {

1215 *
≈
 = 
memÀvñ
;

1217  
NGX_CONF_OK
;

1220 
memÀvñ
--;

1224 
	}
}

	@src/http/modules/ngx_http_gzip_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_gzù_°©ic_c⁄f_t
;

18 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

19 *
ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

20 *
ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

21 *
chûd
);

22 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

25 
ngx_comm™d_t
 
	gngx_hâp_gzù_°©ic_comm™ds
[] = {

27 { 
ngx_°rög
("gzip_static"),

28 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

29 
ngx_c⁄f_£t_Êag_¶Ÿ
,

30 
NGX_HTTP_LOC_CONF_OFFSET
,

31 
off£tof
(
ngx_hâp_gzù_°©ic_c⁄f_t
, 
íabÀ
),

32 
NULL
 },

34 
ngx_nuŒ_comm™d


38 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ_˘x
 = {

39 
NULL
,

40 
ngx_hâp_gzù_°©ic_öô
,

42 
NULL
,

43 
NULL
,

45 
NULL
,

46 
NULL
,

48 
ngx_hâp_gzù_°©ic_¸óã_c⁄f
,

49 
ngx_hâp_gzù_°©ic_mîge_c⁄f


53 
ngx_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ
 = {

54 
NGX_MODULE_V1
,

55 &
ngx_hâp_gzù_°©ic_moduÀ_˘x
,

56 
ngx_hâp_gzù_°©ic_comm™ds
,

57 
NGX_HTTP_MODULE
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NGX_MODULE_V1_PADDING


69 
ngx_öt_t


70 
	$ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

72 
u_ch¨
 *
p
;

73 
size_t
 
roŸ
;

74 
ngx_°r_t
 
∑th
;

75 
ngx_öt_t
 
rc
;

76 
ngx_uöt_t
 
Àvñ
;

77 
ngx_log_t
 *
log
;

78 
ngx_buf_t
 *
b
;

79 
ngx_chaö_t
 
out
;

80 
ngx_èbÀ_ñt_t
 *
h
;

81 
ngx_›í_fûe_öfo_t
 
of
;

82 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

83 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
gzcf
;

85 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

86  
NGX_DECLINED
;

89 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

90  
NGX_DECLINED
;

93 
gzcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_°©ic_moduÀ
);

95 i‡(!
gzcf
->
íabÀ
) {

96  
NGX_DECLINED
;

99 
rc
 = 
	`ngx_hâp_gzù_ok
(
r
);

101 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

103 i‡(!
˛cf
->
gzù_v¨y
 && 
rc
 !
NGX_OK
) {

104  
NGX_DECLINED
;

107 
log
 = 
r
->
c⁄√˘i⁄
->log;

109 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, (".gz") - 1);

110 i‡(
p
 =
NULL
) {

111  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

114 *
p
++ = '.';

115 *
p
++ = 'g';

116 *
p
++ = 'z';

117 *
p
 = '\0';

119 
∑th
.
Àn
 = 
p
 -Ö©h.
d©a
;

121 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

122 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

124 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

126 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

127 
of
.
dúe˘io
 = 
˛cf
->directio;

128 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

129 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

130 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

131 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

133 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

134  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

137 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

138 !
NGX_OK
)

140 
of
.
îr
) {

143  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

145 
NGX_ENOENT
:

146 
NGX_ENOTDIR
:

147 
NGX_ENAMETOOLONG
:

149  
NGX_DECLINED
;

151 
NGX_EACCES
:

152 #i‡(
NGX_HAVE_OPENAT
)

153 
NGX_EMLINK
:

154 
NGX_ELOOP
:

157 
Àvñ
 = 
NGX_LOG_ERR
;

162 
Àvñ
 = 
NGX_LOG_CRIT
;

166 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

167 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

169  
NGX_DECLINED
;

172 
r
->
gzù_v¨y
 = 1;

174 i‡(
rc
 !
NGX_OK
) {

175  
NGX_DECLINED
;

178 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

180 i‡(
of
.
is_dú
) {

181 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

182  
NGX_DECLINED
;

185 #i‡!(
NGX_WIN32
)

187 i‡(!
of
.
is_fûe
) {

188 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

189 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

191  
NGX_HTTP_NOT_FOUND
;

196 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

198 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

200 i‡(
rc
 !
NGX_OK
) {

201  
rc
;

204 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

206 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

207 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

208 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

210 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

211  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

214 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

215 i‡(
h
 =
NULL
) {

216  
NGX_ERROR
;

219 
h
->
hash
 = 1;

220 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

221 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

222 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

224 
r
->
ign‹e_c⁄ã¡_ícodög
 = 1;

228 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

229 i‡(
b
 =
NULL
) {

230  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

233 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

234 i‡(
b
->
fûe
 =
NULL
) {

235  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

238 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

240 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

241  
rc
;

244 
b
->
fûe_pos
 = 0;

245 
b
->
fûe_œ°
 = 
of
.
size
;

247 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

248 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

249 
b
->
œ°_ö_chaö
 = 1;

251 
b
->
fûe
->
fd
 = 
of
.fd;

252 
b
->
fûe
->
«me
 = 
∑th
;

253 
b
->
fûe
->
log
 =Üog;

254 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

256 
out
.
buf
 = 
b
;

257 
out
.
√xt
 = 
NULL
;

259  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

260 
	}
}

264 
	$ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

266 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
;

268 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_°©ic_c⁄f_t
));

269 i‡(
c⁄f
 =
NULL
) {

270  
NULL
;

273 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

275  
c⁄f
;

276 
	}
}

280 
	$ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

282 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

283 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
 = 
chûd
;

285 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

287  
NGX_CONF_OK
;

288 
	}
}

291 
ngx_öt_t


292 
	$ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

294 
ngx_hâp_h™dÀr_±
 *
h
;

295 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

297 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

299 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

300 i‡(
h
 =
NULL
) {

301  
NGX_ERROR
;

304 *
h
 = 
ngx_hâp_gzù_°©ic_h™dÀr
;

306  
NGX_OK
;

307 
	}
}

	@src/http/modules/ngx_http_headers_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_hódî_vÆ_s
 
	tngx_hâp_hódî_vÆ_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_£t_hódî_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_hâp_hódî_vÆ_t
 *
	thv
, 
	tngx_°r_t
 *
	tvÆue
);

20 
ngx_°r_t
 
«me
;

21 
ngx_uöt_t
 
off£t
;

22 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

23 } 
	tngx_hâp_£t_hódî_t
;

26 
	sngx_hâp_hódî_vÆ_s
 {

27 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

28 
ngx_°r_t
 
key
;

29 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

30 
ngx_uöt_t
 
off£t
;

35 
NGX_HTTP_EXPIRES_OFF
,

36 
NGX_HTTP_EXPIRES_EPOCH
,

37 
NGX_HTTP_EXPIRES_MAX
,

38 
NGX_HTTP_EXPIRES_ACCESS
,

39 
NGX_HTTP_EXPIRES_MODIFIED
,

40 
NGX_HTTP_EXPIRES_DAILY
,

41 
NGX_HTTP_EXPIRES_UNSET


42 } 
	tngx_hâp_expúes_t
;

46 
ngx_hâp_expúes_t
 
expúes
;

47 
time_t
 
expúes_time
;

48 
ngx_¨øy_t
 *
hódîs
;

49 } 
	tngx_hâp_hódîs_c⁄f_t
;

52 
ngx_öt_t
 
	`ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
);

54 
ngx_öt_t
 
	`ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

56 
ngx_öt_t
 
	`ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

58 
ngx_öt_t
 
	`ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

61 *
	`ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

62 *
	`ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

63 *
∑ª¡
, *
chûd
);

64 
ngx_öt_t
 
	`ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

65 *
	`ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 *
	`ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

71 
ngx_hâp_£t_hódî_t
 
ngx_hâp_£t_hódîs
[] = {

73 { 
	`ngx_°rög
("Cache-C⁄åﬁ"), 0, 
ngx_hâp_add_ˇche_c⁄åﬁ
 },

75 { 
	`ngx_°rög
("Last-Modified"),

76 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
),

77 
ngx_hâp_£t_œ°_modifõd
 },

79 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

80 
	}
};

83 
ngx_comm™d_t
 
	gngx_hâp_hódîs_fûãr_comm™ds
[] = {

85 { 
ngx_°rög
("expires"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


87 |
NGX_CONF_TAKE12
,

88 
ngx_hâp_hódîs_expúes
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

91 
NULL
},

93 { 
ngx_°rög
("add_header"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


95 |
NGX_CONF_TAKE2
,

96 
ngx_hâp_hódîs_add
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

99 
NULL
},

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_hódîs_fûãr_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_hódîs_¸óã_c⁄f
,

116 
ngx_hâp_hódîs_mîge_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_hódîs_fûãr_moduÀ_˘x
,

123 
ngx_hâp_hódîs_fûãr_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

139 
ngx_öt_t


140 
	$ngx_hâp_hódîs_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

142 
ngx_°r_t
 
vÆue
;

143 
ngx_uöt_t
 
i
;

144 
ngx_hâp_hódî_vÆ_t
 *
h
;

145 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

147 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_hódîs_fûãr_moduÀ
);

149 i‡((
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_OFF
 && c⁄f->
hódîs
 =
NULL
)

150 || 
r
 !r->
maö


151 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


152 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_CREATED


153 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NO_CONTENT


154 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


155 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_PERMANENTLY


156 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_TEMPORARILY


157 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_SEE_OTHER


158 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED


159 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_TEMPORARY_REDIRECT
))

161  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

164 i‡(
c⁄f
->
expúes
 !
NGX_HTTP_EXPIRES_OFF
) {

165 i‡(
	`ngx_hâp_£t_expúes
(
r
, 
c⁄f
Ë!
NGX_OK
) {

166  
NGX_ERROR
;

170 i‡(
c⁄f
->
hódîs
) {

171 
h
 = 
c⁄f
->
hódîs
->
ñts
;

172 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

174 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
h
[
i
].
vÆue
, &vÆueË!
NGX_OK
) {

175  
NGX_ERROR
;

178 i‡(
h
[
i
].
	`h™dÀr
(
r
, &h[i], &
vÆue
Ë!
NGX_OK
) {

179  
NGX_ERROR
;

184  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

185 
	}
}

188 
ngx_öt_t


189 
	$ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
)

191 
size_t
 
Àn
;

192 
time_t
 
now
, 
expúes_time
, 
max_age
;

193 
ngx_uöt_t
 
i
;

194 
ngx_èbÀ_ñt_t
 *
expúes
, *
cc
, **
c˝
;

196 
expúes
 = 
r
->
hódîs_out
.expires;

198 i‡(
expúes
 =
NULL
) {

200 
expúes
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

201 i‡(
expúes
 =
NULL
) {

202  
NGX_ERROR
;

205 
r
->
hódîs_out
.
expúes
 =Éxpires;

207 
expúes
->
hash
 = 1;

208 
	`ngx_°r_£t
(&
expúes
->
key
, "Expires");

211 
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT");

212 
expúes
->
vÆue
.
Àn
 =Üen - 1;

214 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

216 i‡(
c˝
 =
NULL
) {

218 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

219 1, (
ngx_èbÀ_ñt_t
 *))

220 !
NGX_OK
)

222  
NGX_ERROR
;

225 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

226 i‡(
c˝
 =
NULL
) {

227  
NGX_ERROR
;

230 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

231 i‡(
cc
 =
NULL
) {

232  
NGX_ERROR
;

235 
cc
->
hash
 = 1;

236 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

237 *
c˝
 = 
cc
;

240 
i
 = 1; i < 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
√…s
; i++) {

241 
c˝
[
i
]->
hash
 = 0;

244 
cc
 = 
c˝
[0];

247 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_EPOCH
) {

248 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 01 Jan 1970 00:00:01 GMT";

249 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

250  
NGX_OK
;

253 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_MAX
) {

254 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 31 Dec 2037 23:55:55 GMT";

256 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=315360000");

257  
NGX_OK
;

260 
expúes
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

261 i‡(
expúes
->
vÆue
.
d©a
 =
NULL
) {

262  
NGX_ERROR
;

265 i‡(
c⁄f
->
expúes_time
 =0 && c⁄f->
expúes
 !
NGX_HTTP_EXPIRES_DAILY
) {

266 
	`ngx_mem˝y
(
expúes
->
vÆue
.
d©a
, 
ngx_ˇched_hâp_time
.data,

267 
ngx_ˇched_hâp_time
.
Àn
 + 1);

268 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=0");

269  
NGX_OK
;

272 
now
 = 
	`ngx_time
();

274 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY
) {

275 
expúes_time
 = 
	`ngx_√xt_time
(
c⁄f
->expires_time);

276 
max_age
 = 
expúes_time
 - 
now
;

278 } i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_ACCESS


279 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

281 
expúes_time
 = 
now
 + 
c⁄f
->expires_time;

282 
max_age
 = 
c⁄f
->
expúes_time
;

285 
expúes_time
 = 
r
->
hódîs_out
.
œ°_modifõd_time
 + 
c⁄f
->expires_time;

286 
max_age
 = 
expúes_time
 - 
now
;

289 
	`ngx_hâp_time
(
expúes
->
vÆue
.
d©a
, 
expúes_time
);

291 i‡(
c⁄f
->
expúes_time
 < 0 || 
max_age
 < 0) {

292 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

293  
NGX_OK
;

296 
cc
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

297 ("max-age="Ë+ 
NGX_TIME_T_LEN
 + 1);

298 i‡(
cc
->
vÆue
.
d©a
 =
NULL
) {

299  
NGX_ERROR
;

302 
cc
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(cc->vÆue.
d©a
, "max-age=%T", 
max_age
)

303 - 
cc
->
vÆue
.
d©a
;

305  
NGX_OK
;

306 
	}
}

309 
ngx_öt_t


310 
	$ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

311 
ngx_°r_t
 *
vÆue
)

313 
ngx_èbÀ_ñt_t
 *
h
;

315 i‡(
vÆue
->
Àn
) {

316 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

317 i‡(
h
 =
NULL
) {

318  
NGX_ERROR
;

321 
h
->
hash
 = 1;

322 
h
->
key
 = 
hv
->key;

323 
h
->
vÆue
 = *value;

326  
NGX_OK
;

327 
	}
}

330 
ngx_öt_t


331 
	$ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

332 
ngx_°r_t
 *
vÆue
)

334 
ngx_èbÀ_ñt_t
 *
cc
, **
c˝
;

336 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

338 i‡(
c˝
 =
NULL
) {

340 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

341 1, (
ngx_èbÀ_ñt_t
 *))

342 !
NGX_OK
)

344  
NGX_ERROR
;

348 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

349 i‡(
c˝
 =
NULL
) {

350  
NGX_ERROR
;

353 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

354 i‡(
cc
 =
NULL
) {

355  
NGX_ERROR
;

358 
cc
->
hash
 = 1;

359 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

360 
cc
->
vÆue
 = *value;

362 *
c˝
 = 
cc
;

364  
NGX_OK
;

365 
	}
}

368 
ngx_öt_t


369 
	$ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

370 
ngx_°r_t
 *
vÆue
)

372 
ngx_èbÀ_ñt_t
 *
h
, **
ﬁd
;

374 
ﬁd
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
hv
->
off£t
);

376 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

378 i‡(*
ﬁd
 =
NULL
) {

380 i‡(
vÆue
->
Àn
 == 0) {

381  
NGX_OK
;

384 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

385 i‡(
h
 =
NULL
) {

386  
NGX_ERROR
;

389 *
ﬁd
 = 
h
;

392 
h
 = *
ﬁd
;

394 i‡(
vÆue
->
Àn
 == 0) {

395 
h
->
hash
 = 0;

396  
NGX_OK
;

400 
h
->
hash
 = 1;

401 
h
->
key
 = 
hv
->key;

402 
h
->
vÆue
 = *value;

404  
NGX_OK
;

405 
	}
}

409 
	$ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

411 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

413 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_hódîs_c⁄f_t
));

414 i‡(
c⁄f
 =
NULL
) {

415  
NULL
;

425 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_UNSET
;

427  
c⁄f
;

428 
	}
}

432 
	$ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

434 
ngx_hâp_hódîs_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

435 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
 = 
chûd
;

437 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

438 
c⁄f
->
expúes
 = 
¥ev
->expires;

439 
c⁄f
->
expúes_time
 = 
¥ev
->expires_time;

441 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

442 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

446 i‡(
c⁄f
->
hódîs
 =
NULL
) {

447 
c⁄f
->
hódîs
 = 
¥ev
->headers;

450  
NGX_CONF_OK
;

451 
	}
}

454 
ngx_öt_t


455 
	$ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

457 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

458 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódîs_fûãr
;

460  
NGX_OK
;

461 
	}
}

465 
	$ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

467 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

469 
ngx_uöt_t
 
möus
, 
n
;

470 
ngx_°r_t
 *
vÆue
;

472 i‡(
hcf
->
expúes
 !
NGX_HTTP_EXPIRES_UNSET
) {

476 
vÆue
 = 
cf
->
¨gs
->
ñts
;

478 i‡(
cf
->
¨gs
->
√…s
 == 2) {

480 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "epoch") == 0) {

481 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_EPOCH
;

482  
NGX_CONF_OK
;

485 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

486 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MAX
;

487  
NGX_CONF_OK
;

490 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

491 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

492  
NGX_CONF_OK
;

495 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_ACCESS
;

497 
n
 = 1;

501 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "modified") != 0) {

505 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MODIFIED
;

507 
n
 = 2;

510 i‡(
vÆue
[
n
].
d©a
[0] == '@') {

511 
vÆue
[
n
].
d©a
++;

512 
vÆue
[
n
].
Àn
--;

513 
möus
 = 0;

515 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_MODIFIED
) {

519 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_DAILY
;

521 } i‡(
vÆue
[
n
].
d©a
[0] == '+') {

522 
vÆue
[
n
].
d©a
++;

523 
vÆue
[
n
].
Àn
--;

524 
möus
 = 0;

526 } i‡(
vÆue
[
n
].
d©a
[0] == '-') {

527 
vÆue
[
n
].
d©a
++;

528 
vÆue
[
n
].
Àn
--;

529 
möus
 = 1;

532 
möus
 = 0;

535 
hcf
->
expúes_time
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

537 i‡(
hcf
->
expúes_time
 =(
time_t
Ë
NGX_ERROR
) {

541 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY


542 && 
hcf
->
expúes_time
 > 24 * 60 * 60)

547 i‡(
möus
) {

548 
hcf
->
expúes_time
 = - hcf->expires_time;

551  
NGX_CONF_OK
;

552 
	}
}

556 
	$ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

558 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

560 
ngx_°r_t
 *
vÆue
;

561 
ngx_uöt_t
 
i
;

562 
ngx_hâp_hódî_vÆ_t
 *
hv
;

563 
ngx_hâp_£t_hódî_t
 *
£t
;

564 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

566 
vÆue
 = 
cf
->
¨gs
->
ñts
;

568 i‡(
hcf
->
hódîs
 =
NULL
) {

569 
hcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

570 (
ngx_hâp_hódî_vÆ_t
));

571 i‡(
hcf
->
hódîs
 =
NULL
) {

572  
NGX_CONF_ERROR
;

576 
hv
 = 
	`ngx_¨øy_push
(
hcf
->
hódîs
);

577 i‡(
hv
 =
NULL
) {

578  
NGX_CONF_ERROR
;

581 
hv
->
key
 = 
vÆue
[1];

582 
hv
->
h™dÀr
 = 
ngx_hâp_add_hódî
;

583 
hv
->
off£t
 = 0;

585 
£t
 = 
ngx_hâp_£t_hódîs
;

586 
i
 = 0; 
£t
[i].
«me
.
Àn
; i++) {

587 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, 
£t
[
i
].
«me
.data) != 0) {

591 
hv
->
off£t
 = 
£t
[
i
].offset;

592 
hv
->
h™dÀr
 = 
£t
[
i
].handler;

597 i‡(
vÆue
[2].
Àn
 == 0) {

598 
	`ngx_memzîo
(&
hv
->
vÆue
, (
ngx_hâp_com∂ex_vÆue_t
));

599  
NGX_CONF_OK
;

602 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

604 
ccv
.
cf
 = cf;

605 
ccv
.
vÆue
 = &value[2];

606 
ccv
.
com∂ex_vÆue
 = &
hv
->
vÆue
;

608 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

609  
NGX_CONF_ERROR
;

612  
NGX_CONF_OK
;

613 
	}
}

	@src/http/modules/ngx_http_image_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<gd.h
>

15 
	#NGX_HTTP_IMAGE_OFF
 0

	)

16 
	#NGX_HTTP_IMAGE_TEST
 1

	)

17 
	#NGX_HTTP_IMAGE_SIZE
 2

	)

18 
	#NGX_HTTP_IMAGE_RESIZE
 3

	)

19 
	#NGX_HTTP_IMAGE_CROP
 4

	)

20 
	#NGX_HTTP_IMAGE_ROTATE
 5

	)

23 
	#NGX_HTTP_IMAGE_START
 0

	)

24 
	#NGX_HTTP_IMAGE_READ
 1

	)

25 
	#NGX_HTTP_IMAGE_PROCESS
 2

	)

26 
	#NGX_HTTP_IMAGE_PASS
 3

	)

27 
	#NGX_HTTP_IMAGE_DONE
 4

	)

30 
	#NGX_HTTP_IMAGE_NONE
 0

	)

31 
	#NGX_HTTP_IMAGE_JPEG
 1

	)

32 
	#NGX_HTTP_IMAGE_GIF
 2

	)

33 
	#NGX_HTTP_IMAGE_PNG
 3

	)

36 
	#NGX_HTTP_IMAGE_BUFFERED
 0x08

	)

40 
ngx_uöt_t
 
	mfûãr
;

41 
ngx_uöt_t
 
	mwidth
;

42 
ngx_uöt_t
 
	mheight
;

43 
ngx_uöt_t
 
	m™gÀ
;

44 
ngx_uöt_t
 
	mj≥g_quÆôy
;

45 
ngx_uöt_t
 
	msh¨≥n
;

47 
ngx_Êag_t
 
	må™•¨ícy
;

49 
ngx_hâp_com∂ex_vÆue_t
 *
	mwcv
;

50 
ngx_hâp_com∂ex_vÆue_t
 *
	mhcv
;

51 
ngx_hâp_com∂ex_vÆue_t
 *
	macv
;

52 
ngx_hâp_com∂ex_vÆue_t
 *
	mjqcv
;

53 
ngx_hâp_com∂ex_vÆue_t
 *
	mshcv
;

55 
size_t
 
	mbuf„r_size
;

56 } 
	tngx_hâp_image_fûãr_c⁄f_t
;

60 
u_ch¨
 *
	mimage
;

61 
u_ch¨
 *
	mœ°
;

63 
size_t
 
	mÀngth
;

65 
ngx_uöt_t
 
	mwidth
;

66 
ngx_uöt_t
 
	mheight
;

67 
ngx_uöt_t
 
	mmax_width
;

68 
ngx_uöt_t
 
	mmax_height
;

69 
ngx_uöt_t
 
	m™gÀ
;

71 
ngx_uöt_t
 
	mpha£
;

72 
ngx_uöt_t
 
	mty≥
;

73 
ngx_uöt_t
 
	mf‹˚
;

74 } 
	tngx_hâp_image_fûãr_˘x_t
;

77 
ngx_öt_t
 
ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

79 
ngx_uöt_t
 
ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

80 
ngx_öt_t
 
ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

81 
ngx_buf_t
 *
ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
);

82 
ngx_buf_t
 *
ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

84 
ngx_buf_t
 *
ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

86 
ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

87 
ngx_öt_t
 
ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

90 
ngx_buf_t
 *
ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

92 
gdImagePå
 
ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

94 
gdImagePå
 
ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
,

95 
cﬁ‹s
);

96 
u_ch¨
 *
ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
,

97 
gdImagePå
 
img
, *
size
);

98 
ngx_hâp_image_˛ónup
(*
d©a
);

99 
ngx_uöt_t
 
ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
);

101 
ngx_uöt_t
 
ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
);

104 *
ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

105 *
ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

106 *
chûd
);

107 *
ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

108 *
c⁄f
);

109 *
ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
,

110 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

111 *
ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

112 *
c⁄f
);

113 
ngx_öt_t
 
ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

116 
ngx_comm™d_t
 
	gngx_hâp_image_fûãr_comm™ds
[] = {

118 { 
ngx_°rög
("image_filter"),

119 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

120 
ngx_hâp_image_fûãr
,

121 
NGX_HTTP_LOC_CONF_OFFSET
,

123 
NULL
 },

125 { 
ngx_°rög
("image_filter_jpeg_quality"),

126 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

127 
ngx_hâp_image_fûãr_j≥g_quÆôy
,

128 
NGX_HTTP_LOC_CONF_OFFSET
,

130 
NULL
 },

132 { 
ngx_°rög
("image_filter_sharpen"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

134 
ngx_hâp_image_fûãr_sh¨≥n
,

135 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
NULL
 },

139 { 
ngx_°rög
("image_filter_transparency"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

141 
ngx_c⁄f_£t_Êag_¶Ÿ
,

142 
NGX_HTTP_LOC_CONF_OFFSET
,

143 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
å™•¨ícy
),

144 
NULL
 },

146 { 
ngx_°rög
("image_filter_buffer"),

147 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

148 
ngx_c⁄f_£t_size_¶Ÿ
,

149 
NGX_HTTP_LOC_CONF_OFFSET
,

150 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
buf„r_size
),

151 
NULL
 },

153 
ngx_nuŒ_comm™d


157 
ngx_hâp_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ_˘x
 = {

158 
NULL
,

159 
ngx_hâp_image_fûãr_öô
,

161 
NULL
,

162 
NULL
,

164 
NULL
,

165 
NULL
,

167 
ngx_hâp_image_fûãr_¸óã_c⁄f
,

168 
ngx_hâp_image_fûãr_mîge_c⁄f


172 
ngx_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ
 = {

173 
NGX_MODULE_V1
,

174 &
ngx_hâp_image_fûãr_moduÀ_˘x
,

175 
ngx_hâp_image_fûãr_comm™ds
,

176 
NGX_HTTP_MODULE
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NGX_MODULE_V1_PADDING


188 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

189 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

192 
ngx_°r_t
 
	gngx_hâp_image_ty≥s
[] = {

193 
ngx_°rög
("image/jpeg"),

194 
ngx_°rög
("image/gif"),

195 
ngx_°rög
("image/png")

199 
ngx_öt_t


200 
	$ngx_hâp_image_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

202 
off_t
 
Àn
;

203 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

204 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

206 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

207  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

210 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

212 i‡(
˘x
) {

213 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_image_fûãr_moduÀ
);

214  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

217 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

219 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_OFF
) {

220  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

223 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


225 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

226 (
u_ch¨
 *) "multipart/x-mixed-replace",

230 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

233  
NGX_ERROR
;

236 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_image_fûãr_˘x_t
));

237 i‡(
˘x
 =
NULL
) {

238  
NGX_ERROR
;

241 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_image_fûãr_moduÀ
);

243 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

245 i‡(
Àn
 !-1 &&Üí > (
off_t
Ë
c⁄f
->
buf„r_size
) {

246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

247 "imagêfûãr:ÅoÿbigÑe•⁄£: %O", 
Àn
);

249  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

252 i‡(
Àn
 == -1) {

253 
˘x
->
Àngth
 = 
c⁄f
->
buf„r_size
;

256 
˘x
->
Àngth
 = (
size_t
Ë
Àn
;

259 i‡(
r
->
hódîs_out
.
ª‰esh
) {

260 
r
->
hódîs_out
.
ª‰esh
->
hash
 = 0;

263 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

264 
r
->
Ælow_ønges
 = 0;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_image_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

273 
ngx_öt_t
 
rc
;

274 
ngx_°r_t
 *
˘
;

275 
ngx_chaö_t
 
out
;

276 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

277 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

279 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "image filter");

281 i‡(
ö
 =
NULL
) {

282  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

285 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

287 i‡(
˘x
 =
NULL
) {

288  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

291 
˘x
->
pha£
) {

293 
NGX_HTTP_IMAGE_START
:

295 
˘x
->
ty≥
 = 
	`ngx_hâp_image_ã°
(
r
, 
ö
);

297 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

299 i‡(
˘x
->
ty≥
 =
NGX_HTTP_IMAGE_NONE
) {

301 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

302 
out
.
buf
 = 
	`ngx_hâp_image_js⁄
(
r
, 
NULL
);

304 i‡(
out
.
buf
) {

305 
out
.
√xt
 = 
NULL
;

306 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_DONE
;

308  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

312  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

313 &
ngx_hâp_image_fûãr_moduÀ
,

314 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

319 
˘
 = &
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1];

320 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

321 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

322 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

324 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_TEST
) {

325 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

327  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, 
ö
);

330 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_READ
;

334 
NGX_HTTP_IMAGE_READ
:

336 
rc
 = 
	`ngx_hâp_image_ªad
(
r
, 
ö
);

338 i‡(
rc
 =
NGX_AGAIN
) {

339  
NGX_OK
;

342 i‡(
rc
 =
NGX_ERROR
) {

343  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

344 &
ngx_hâp_image_fûãr_moduÀ
,

345 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

350 
NGX_HTTP_IMAGE_PROCESS
:

352 
out
.
buf
 = 
	`ngx_hâp_image_¥o˚ss
(
r
);

354 i‡(
out
.
buf
 =
NULL
) {

355  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

356 &
ngx_hâp_image_fûãr_moduÀ
,

357 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

360 
out
.
√xt
 = 
NULL
;

361 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

363  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

365 
NGX_HTTP_IMAGE_PASS
:

367  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

371 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

374  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

376 
	}
}

379 
ngx_öt_t


380 
	$ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
,

381 
ngx_chaö_t
 *
ö
)

383 
ngx_öt_t
 
rc
;

385 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

387 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

388  
NGX_ERROR
;

391 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

393 i‡(
˘x
->
pha£
 =
NGX_HTTP_IMAGE_DONE
) {

395  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

398  
rc
;

399 
	}
}

402 
ngx_uöt_t


403 
	$ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

405 
u_ch¨
 *
p
;

407 
p
 = 
ö
->
buf
->
pos
;

409 i‡(
ö
->
buf
->
œ°
 - 
p
 < 16) {

410  
NGX_HTTP_IMAGE_NONE
;

413 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

414 "imagêfûãr: \"%c%c\"", 
p
[0],Ö[1]);

416 i‡(
p
[0] == 0xff &&Ö[1] == 0xd8) {

420  
NGX_HTTP_IMAGE_JPEG
;

422 } i‡(
p
[0] == 'G' &&Ö[1] == 'I' &&Ö[2] == 'F' &&Ö[3] == '8'

423 && 
p
[5] == 'a')

425 i‡(
p
[4] == '9' ||Ö[4] == '7') {

427  
NGX_HTTP_IMAGE_GIF
;

430 } i‡(
p
[0] == 0x89 &&Ö[1] == 'P' &&Ö[2] == 'N' &&Ö[3] == 'G'

431 && 
p
[4] == 0x0d &&Ö[5] == 0x0a &&Ö[6] == 0x1a &&Ö[7] == 0x0a)

435  
NGX_HTTP_IMAGE_PNG
;

438  
NGX_HTTP_IMAGE_NONE
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

445 
u_ch¨
 *
p
;

446 
size_t
 
size
, 
ª°
;

447 
ngx_buf_t
 *
b
;

448 
ngx_chaö_t
 *
˛
;

449 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

451 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

453 i‡(
˘x
->
image
 =
NULL
) {

454 
˘x
->
image
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Àngth
);

455 i‡(
˘x
->
image
 =
NULL
) {

456  
NGX_ERROR
;

459 
˘x
->
œ°
 = ctx->
image
;

462 
p
 = 
˘x
->
œ°
;

464 
˛
 = 
ö
; cl; c»˛->
√xt
) {

466 
b
 = 
˛
->
buf
;

467 
size
 = 
b
->
œ°
 - b->
pos
;

469 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

470 "imagêbuf: %uz", 
size
);

472 
ª°
 = 
˘x
->
image
 + ctx->
Àngth
 - 
p
;

473 
size
 = (
ª°
 < size) ?Ñest : size;

475 
p
 = 
	`ngx_˝ymem
’, 
b
->
pos
, 
size
);

476 
b
->
pos
 +
size
;

478 i‡(
b
->
œ°_buf
) {

479 
˘x
->
œ°
 = 
p
;

480  
NGX_OK
;

484 
˘x
->
œ°
 = 
p
;

485 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_IMAGE_BUFFERED
;

487  
NGX_AGAIN
;

488 
	}
}

491 
ngx_buf_t
 *

492 
	$ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
)

494 
ngx_öt_t
 
rc
;

495 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

496 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

498 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_IMAGE_BUFFERED
;

500 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

502 
rc
 = 
	`ngx_hâp_image_size
(
r
, 
˘x
);

504 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

506 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

507  
	`ngx_hâp_image_js⁄
(
r
, 
rc
 =
NGX_OK
 ? 
˘x
 : 
NULL
);

510 
˘x
->
™gÀ
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
acv
, conf->angle);

512 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

514 i‡(
˘x
->
™gÀ
 != 90 && ctx->angle != 180 && ctx->angle != 270) {

515  
NULL
;

518  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

521 
˘x
->
max_width
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
wcv
, c⁄f->
width
);

522 i‡(
˘x
->
max_width
 == 0) {

523  
NULL
;

526 
˘x
->
max_height
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
hcv
,

527 
c⁄f
->
height
);

528 i‡(
˘x
->
max_height
 == 0) {

529  
NULL
;

532 i‡(
rc
 =
NGX_OK


533 && 
˘x
->
width
 <˘x->
max_width


534 && 
˘x
->
height
 <˘x->
max_height


535 && 
˘x
->
™gÀ
 == 0

536 && !
˘x
->
f‹˚
)

538  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

541  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

542 
	}
}

545 
ngx_buf_t
 *

546 
	$ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

548 
size_t
 
Àn
;

549 
ngx_buf_t
 *
b
;

551 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

552 i‡(
b
 =
NULL
) {

553  
NULL
;

556 
b
->
mem‹y
 = 1;

557 
b
->
œ°_buf
 = 1;

559 
	`ngx_hâp_˛ón_hódî
(
r
);

561 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

562 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

563 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

565 i‡(
˘x
 =
NULL
) {

566 
b
->
pos
 = (
u_ch¨
 *Ë"{}" 
CRLF
;

567 
b
->
œ°
 = b->
pos
 + ("{}" 
CRLF
) - 1;

569 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

571  
b
;

574 
Àn
 = ("{ \"img\" : "

575 "{ \"width\": , \"height\": , \"ty≥\": \"j≥g\" } }" 
CRLF
) - 1

576 + 2 * 
NGX_SIZE_T_LEN
;

578 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

579 i‡(
b
->
pos
 =
NULL
) {

580  
NULL
;

583 
b
->
œ°
 = 
	`ngx_•rötf
(b->
pos
,

587 " \"ty≥\": \"%s\" } }" 
CRLF
,

588 
˘x
->
width
, ctx->
height
,

589 
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1].
d©a
 + 6);

591 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

593  
b
;

594 
	}
}

597 
ngx_buf_t
 *

598 
	$ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

600 
ngx_buf_t
 *
b
;

602 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

603 i‡(
b
 =
NULL
) {

604  
NULL
;

607 
b
->
pos
 = 
˘x
->
image
;

608 
b
->
œ°
 = 
˘x
->last;

609 
b
->
mem‹y
 = 1;

610 
b
->
œ°_buf
 = 1;

612 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

614  
b
;

615 
	}
}

619 
	$ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

621 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

623 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

624 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

627 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

628 
	}
}

631 
ngx_öt_t


632 
	$ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

634 
u_ch¨
 *
p
, *
œ°
;

635 
size_t
 
Àn
, 
≠p
;

636 
ngx_uöt_t
 
width
, 
height
;

638 
p
 = 
˘x
->
image
;

640 
˘x
->
ty≥
) {

642 
NGX_HTTP_IMAGE_JPEG
:

644 
p
 += 2;

645 
œ°
 = 
˘x
->
image
 + ctx->
Àngth
 - 10;

646 
width
 = 0;

647 
height
 = 0;

648 
≠p
 = 0;

650 
p
 < 
œ°
) {

652 i‡(
p
[0] == 0xff &&Ö[1] != 0xff) {

654 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

655 "JPEG: %02xd %02xd", 
p
[0],Ö[1]);

657 
p
++;

659 i‡((*
p
 == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3

660 || *
p
 == 0xc9 || *p == 0xca || *p == 0xcb)

661 && (
width
 =0 || 
height
 == 0))

663 
width
 = 
p
[6] * 256 +Ö[7];

664 
height
 = 
p
[4] * 256 +Ö[5];

667 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

668 "JPEG: %02xd %02xd", 
p
[1],Ö[2]);

670 
Àn
 = 
p
[1] * 256 +Ö[2];

672 i‡(*
p
 >= 0xe1 && *p <= 0xef) {

674 
≠p
 +
Àn
;

677 
p
 +
Àn
;

682 
p
++;

685 i‡(
width
 =0 || 
height
 == 0) {

686  
NGX_DECLINED
;

689 i‡(
˘x
->
Àngth
 / 20 < 
≠p
) {

691 
˘x
->
f‹˚
 = 1;

692 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

693 "≠∞d©®size: %uz", 
≠p
);

698 
NGX_HTTP_IMAGE_GIF
:

700 i‡(
˘x
->
Àngth
 < 10) {

701  
NGX_DECLINED
;

704 
width
 = 
p
[7] * 256 +Ö[6];

705 
height
 = 
p
[9] * 256 +Ö[8];

709 
NGX_HTTP_IMAGE_PNG
:

711 i‡(
˘x
->
Àngth
 < 24) {

712  
NGX_DECLINED
;

715 
width
 = 
p
[18] * 256 +Ö[19];

716 
height
 = 
p
[22] * 256 +Ö[23];

722  
NGX_DECLINED
;

725 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

726 "imagêsize: %d x %d", 
width
, 
height
);

728 
˘x
->
width
 = width;

729 
˘x
->
height
 = height;

731  
NGX_OK
;

732 
	}
}

735 
ngx_buf_t
 *

736 
	$ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

738 
sx
, 
sy
, 
dx
, 
dy
, 
ox
, 
oy
, 
ax
, 
ay
, 
size
,

739 
cﬁ‹s
, 
∑Àâe
, 
å™•¨ít
, 
sh¨≥n
,

740 
ªd
, 
gªí
, 
blue
, 
t
;

741 
u_ch¨
 *
out
;

742 
ngx_buf_t
 *
b
;

743 
ngx_uöt_t
 
ªsize
;

744 
gdImagePå
 
§c
, 
d°
;

745 
ngx_poﬁ_˛ónup_t
 *
˛n
;

746 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

748 
§c
 = 
	`ngx_hâp_image_sour˚
(
r
, 
˘x
);

750 i‡(
§c
 =
NULL
) {

751  
NULL
;

754 
sx
 = 
	`gdImageSX
(
§c
);

755 
sy
 = 
	`gdImageSY
(
§c
);

757 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

759 i‡(!
˘x
->
f‹˚


760 && 
˘x
->
™gÀ
 == 0

761 && (
ngx_uöt_t
Ë
sx
 <
˘x
->
max_width


762 && (
ngx_uöt_t
Ë
sy
 <
˘x
->
max_height
)

764 
	`gdImageDe°roy
(
§c
);

765  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

768 
cﬁ‹s
 = 
	`gdImageCﬁ‹sTŸÆ
(
§c
);

770 i‡(
cﬁ‹s
 && 
c⁄f
->
å™•¨ícy
) {

771 
å™•¨ít
 = 
	`gdImageGëTøn•¨ít
(
§c
);

773 i‡(
å™•¨ít
 != -1) {

774 
∑Àâe
 = 
cﬁ‹s
;

775 
ªd
 = 
	`gdImageRed
(
§c
, 
å™•¨ít
);

776 
gªí
 = 
	`gdImageGªí
(
§c
, 
å™•¨ít
);

777 
blue
 = 
	`gdImageBlue
(
§c
, 
å™•¨ít
);

779 
å™•¨ít
;

783 
∑Àâe
 = 0;

784 
å™•¨ít
 = -1;

785 
ªd
 = 0;

786 
gªí
 = 0;

787 
blue
 = 0;

789 
å™•¨ít
:

791 
	`gdImageCﬁ‹Tøn•¨ít
(
§c
, -1);

793 
dx
 = 
sx
;

794 
dy
 = 
sy
;

796 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_RESIZE
) {

798 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

799 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

800 
dy
 = dy ? dy : 1;

801 
dx
 = 
˘x
->
max_width
;

804 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

805 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

806 
dx
 = dx ? dx : 1;

807 
dy
 = 
˘x
->
max_height
;

810 
ªsize
 = 1;

812 } i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

814 
ªsize
 = 0;

818 
ªsize
 = 0;

820 i‡((Ë
dx
 / 
dy
 < (Ë
˘x
->
max_width
 / ctx->
max_height
) {

821 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

822 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

823 
dy
 = dy ? dy : 1;

824 
dx
 = 
˘x
->
max_width
;

825 
ªsize
 = 1;

829 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

830 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

831 
dx
 = dx ? dx : 1;

832 
dy
 = 
˘x
->
max_height
;

833 
ªsize
 = 1;

838 i‡(
ªsize
) {

839 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

840 i‡(
d°
 =
NULL
) {

841 
	`gdImageDe°roy
(
§c
);

842  
NULL
;

845 i‡(
cﬁ‹s
 == 0) {

846 
	`gdImageSaveAÕha
(
d°
, 1);

847 
	`gdImageAÕhaBÀndög
(
d°
, 0);

850 
	`gdImageC›yReßm∂ed
(
d°
, 
§c
, 0, 0, 0, 0, 
dx
, 
dy
, 
sx
, 
sy
);

852 i‡(
cﬁ‹s
) {

853 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

856 
	`gdImageDe°roy
(
§c
);

859 
d°
 = 
§c
;

862 i‡(
˘x
->
™gÀ
) {

863 
§c
 = 
d°
;

865 
ax
 = (
dx
 % 2 == 0) ? 1 : 0;

866 
ay
 = (
dy
 % 2 == 0) ? 1 : 0;

868 
˘x
->
™gÀ
) {

872 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dy
, 
dx
, 
∑Àâe
);

873 i‡(
d°
 =
NULL
) {

874 
	`gdImageDe°roy
(
§c
);

875  
NULL
;

877 i‡(
˘x
->
™gÀ
 == 90) {

878 
ox
 = 
dy
 / 2 + 
ay
;

879 
oy
 = 
dx
 / 2 - 
ax
;

882 
ox
 = 
dy
 / 2 - 
ay
;

883 
oy
 = 
dx
 / 2 + 
ax
;

886 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
ox
, 
oy
, 0, 0,

887 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

888 
	`gdImageDe°roy
(
§c
);

890 
t
 = 
dx
;

891 
dx
 = 
dy
;

892 
dy
 = 
t
;

896 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

897 i‡(
d°
 =
NULL
) {

898 
	`gdImageDe°roy
(
§c
);

899  
NULL
;

901 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
dx
 / 2 - 
ax
, 
dy
 / 2 - 
ay
, 0, 0,

902 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

903 
	`gdImageDe°roy
(
§c
);

908 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_CROP
) {

910 
§c
 = 
d°
;

912 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

913 
ox
 = 
dx
 - 
˘x
->
max_width
;

916 
ox
 = 0;

919 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

920 
oy
 = 
dy
 - 
˘x
->
max_height
;

923 
oy
 = 0;

926 i‡(
ox
 || 
oy
) {

928 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
 - 
ox
, 
dy
 - 
oy
, 
cﬁ‹s
);

930 i‡(
d°
 =
NULL
) {

931 
	`gdImageDe°roy
(
§c
);

932  
NULL
;

935 
ox
 /= 2;

936 
oy
 /= 2;

938 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

940 
dx
, 
dy
, 
ox
, 
oy
);

942 i‡(
cﬁ‹s
 == 0) {

943 
	`gdImageSaveAÕha
(
d°
, 1);

944 
	`gdImageAÕhaBÀndög
(
d°
, 0);

947 
	`gdImageC›y
(
d°
, 
§c
, 0, 0, 
ox
, 
oy
, 
dx
 - ox, 
dy
 - oy);

949 i‡(
cﬁ‹s
) {

950 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

953 
	`gdImageDe°roy
(
§c
);

957 i‡(
å™•¨ít
 !-1 && 
cﬁ‹s
) {

958 
	`gdImageCﬁ‹Tøn•¨ít
(
d°
, 
	`gdImageCﬁ‹Exa˘
(d°, 
ªd
, 
gªí
, 
blue
));

961 
sh¨≥n
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
shcv
, conf->sharpen);

962 i‡(
sh¨≥n
 > 0) {

963 
	`gdImageSh¨≥n
(
d°
, 
sh¨≥n
);

966 
out
 = 
	`ngx_hâp_image_out
(
r
, 
˘x
->
ty≥
, 
d°
, &
size
);

968 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

969 "image: %d x %d %d", 
sx
, 
sy
, 
cﬁ‹s
);

971 
	`gdImageDe°roy
(
d°
);

972 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
image
);

974 i‡(
out
 =
NULL
) {

975  
NULL
;

978 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

979 i‡(
˛n
 =
NULL
) {

980 
	`gdFªe
(
out
);

981  
NULL
;

984 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

985 i‡(
b
 =
NULL
) {

986 
	`gdFªe
(
out
);

987  
NULL
;

990 
˛n
->
h™dÀr
 = 
ngx_hâp_image_˛ónup
;

991 
˛n
->
d©a
 = 
out
;

993 
b
->
pos
 = 
out
;

994 
b
->
œ°
 = 
out
 + 
size
;

995 
b
->
mem‹y
 = 1;

996 
b
->
œ°_buf
 = 1;

998 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

1000  
b
;

1001 
	}
}

1004 
gdImagePå


1005 
	$ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

1007 *
Áûed
;

1008 
gdImagePå
 
img
;

1010 
img
 = 
NULL
;

1012 
˘x
->
ty≥
) {

1014 
NGX_HTTP_IMAGE_JPEG
:

1015 
img
 = 
	`gdImageCª©eFromJ≥gPå
(
˘x
->
Àngth
, ctx->
image
);

1016 
Áûed
 = "gdImageCreateFromJpegPtr() failed";

1019 
NGX_HTTP_IMAGE_GIF
:

1020 
img
 = 
	`gdImageCª©eFromGifPå
(
˘x
->
Àngth
, ctx->
image
);

1021 
Áûed
 = "gdImageCreateFromGifPtr() failed";

1024 
NGX_HTTP_IMAGE_PNG
:

1025 
img
 = 
	`gdImageCª©eFromPngPå
(
˘x
->
Àngth
, ctx->
image
);

1026 
Áûed
 = "gdImageCreateFromPngPtr() failed";

1030 
Áûed
 = "unknown imageÅype";

1034 i‡(
img
 =
NULL
) {

1035 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1038  
img
;

1039 
	}
}

1042 
gdImagePå


1043 
	$ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
, 
cﬁ‹s
)

1045 
gdImagePå
 
img
;

1047 i‡(
cﬁ‹s
 == 0) {

1048 
img
 = 
	`gdImageCª©eTrueCﬁ‹
(
w
, 
h
);

1050 i‡(
img
 =
NULL
) {

1051 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1053  
NULL
;

1057 
img
 = 
	`gdImageCª©e
(
w
, 
h
);

1059 i‡(
img
 =
NULL
) {

1060 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1062  
NULL
;

1066  
img
;

1067 
	}
}

1070 
u_ch¨
 *

1071 
	$ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
, 
gdImagePå
 
img
,

1072 *
size
)

1074 *
Áûed
;

1075 
u_ch¨
 *
out
;

1076 
ngx_öt_t
 
jq
;

1077 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1079 
out
 = 
NULL
;

1081 
ty≥
) {

1083 
NGX_HTTP_IMAGE_JPEG
:

1084 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

1086 
jq
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
jqcv
, c⁄f->
j≥g_quÆôy
);

1087 i‡(
jq
 <= 0) {

1088  
NULL
;

1091 
out
 = 
	`gdImageJ≥gPå
(
img
, 
size
, 
jq
);

1092 
Áûed
 = "gdImageJpegPtr() failed";

1095 
NGX_HTTP_IMAGE_GIF
:

1096 
out
 = 
	`gdImageGifPå
(
img
, 
size
);

1097 
Áûed
 = "gdImageGifPtr() failed";

1100 
NGX_HTTP_IMAGE_PNG
:

1101 
out
 = 
	`gdImagePngPå
(
img
, 
size
);

1102 
Áûed
 = "gdImagePngPtr() failed";

1106 
Áûed
 = "unknown imageÅype";

1110 i‡(
out
 =
NULL
) {

1111 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1114  
out
;

1115 
	}
}

1119 
	$ngx_hâp_image_˛ónup
(*
d©a
)

1121 
	`gdFªe
(
d©a
);

1122 
	}
}

1125 
ngx_uöt_t


1126 
	$ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

1127 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
)

1129 
ngx_°r_t
 
vÆ
;

1131 i‡(
cv
 =
NULL
) {

1132  
v
;

1135 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1139  
	`ngx_hâp_image_fûãr_vÆue
(&
vÆ
);

1140 
	}
}

1143 
ngx_uöt_t


1144 
	$ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
)

1146 
ngx_öt_t
 
n
;

1148 i‡(
vÆue
->
Àn
 =1 && vÆue->
d©a
[0] == '-') {

1149  (
ngx_uöt_t
) -1;

1152 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

1154 i‡(
n
 > 0) {

1155  (
ngx_uöt_t
Ë
n
;

1159 
	}
}

1163 
	$ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1165 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1167 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_image_fûãr_c⁄f_t
));

1168 i‡(
c⁄f
 =
NULL
) {

1169  
NULL
;

1185 
c⁄f
->
fûãr
 = 
NGX_CONF_UNSET_UINT
;

1186 
c⁄f
->
j≥g_quÆôy
 = 
NGX_CONF_UNSET_UINT
;

1187 
c⁄f
->
sh¨≥n
 = 
NGX_CONF_UNSET_UINT
;

1188 
c⁄f
->
å™•¨ícy
 = 
NGX_CONF_UNSET
;

1189 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1191  
c⁄f
;

1192 
	}
}

1196 
	$ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1198 
ngx_hâp_image_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1199 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

1201 i‡(
c⁄f
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1203 i‡(
¥ev
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1204 
c⁄f
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1207 
c⁄f
->
fûãr
 = 
¥ev
->filter;

1208 
c⁄f
->
width
 = 
¥ev
->width;

1209 
c⁄f
->
height
 = 
¥ev
->height;

1210 
c⁄f
->
™gÀ
 = 
¥ev
->angle;

1211 
c⁄f
->
wcv
 = 
¥ev
->wcv;

1212 
c⁄f
->
hcv
 = 
¥ev
->hcv;

1213 
c⁄f
->
acv
 = 
¥ev
->acv;

1217 i‡(
c⁄f
->
j≥g_quÆôy
 =
NGX_CONF_UNSET_UINT
) {

1220 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
j≥g_quÆôy
, 
¥ev
->jpeg_quality, 75);

1222 i‡(
c⁄f
->
jqcv
 =
NULL
) {

1223 
c⁄f
->
jqcv
 = 
¥ev
->jqcv;

1227 i‡(
c⁄f
->
sh¨≥n
 =
NGX_CONF_UNSET_UINT
) {

1228 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
sh¨≥n
, 
¥ev
->sharpen, 0);

1230 i‡(
c⁄f
->
shcv
 =
NULL
) {

1231 
c⁄f
->
shcv
 = 
¥ev
->shcv;

1235 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
å™•¨ícy
, 
¥ev
->transparency, 1);

1237 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1240  
NGX_CONF_OK
;

1241 
	}
}

1245 
	$ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1247 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1249 
ngx_°r_t
 *
vÆue
;

1250 
ngx_öt_t
 
n
;

1251 
ngx_uöt_t
 
i
;

1252 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1253 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1255 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1257 
i
 = 1;

1259 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1260 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1261 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1263 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "test") == 0) {

1264 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_TEST
;

1266 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "size") == 0) {

1267 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_SIZE
;

1270 
Áûed
;

1273  
NGX_CONF_OK
;

1275 } i‡(
cf
->
¨gs
->
√…s
 == 3) {

1277 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "rotate") == 0) {

1278 i‡(
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_RESIZE


1279 && 
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_CROP
)

1281 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_ROTATE
;

1284 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1286 
ccv
.
cf
 = cf;

1287 
ccv
.
vÆue
 = &vÆue[++
i
];

1288 
ccv
.
com∂ex_vÆue
 = &
cv
;

1290 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1291  
NGX_CONF_ERROR
;

1294 i‡(
cv
.
Àngths
 =
NULL
) {

1295 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1297 i‡(
n
 != 90 &&Ç != 180 &&Ç != 270) {

1298 
Áûed
;

1301 
imcf
->
™gÀ
 = (
ngx_uöt_t
Ë
n
;

1304 
imcf
->
acv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1305 (
ngx_hâp_com∂ex_vÆue_t
));

1306 i‡(
imcf
->
acv
 =
NULL
) {

1307  
NGX_CONF_ERROR
;

1310 *
imcf
->
acv
 = 
cv
;

1313  
NGX_CONF_OK
;

1316 
Áûed
;

1320 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "resize") == 0) {

1321 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_RESIZE
;

1323 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "crop") == 0) {

1324 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_CROP
;

1327 
Áûed
;

1330 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1332 
ccv
.
cf
 = cf;

1333 
ccv
.
vÆue
 = &vÆue[++
i
];

1334 
ccv
.
com∂ex_vÆue
 = &
cv
;

1336 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1337  
NGX_CONF_ERROR
;

1340 i‡(
cv
.
Àngths
 =
NULL
) {

1341 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1343 i‡(
n
 == 0) {

1344 
Áûed
;

1347 
imcf
->
width
 = (
ngx_uöt_t
Ë
n
;

1350 
imcf
->
wcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1351 i‡(
imcf
->
wcv
 =
NULL
) {

1352  
NGX_CONF_ERROR
;

1355 *
imcf
->
wcv
 = 
cv
;

1358 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1360 
ccv
.
cf
 = cf;

1361 
ccv
.
vÆue
 = &vÆue[++
i
];

1362 
ccv
.
com∂ex_vÆue
 = &
cv
;

1364 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1365  
NGX_CONF_ERROR
;

1368 i‡(
cv
.
Àngths
 =
NULL
) {

1369 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1371 i‡(
n
 == 0) {

1372 
Áûed
;

1375 
imcf
->
height
 = (
ngx_uöt_t
Ë
n
;

1378 
imcf
->
hcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1379 i‡(
imcf
->
hcv
 =
NULL
) {

1380  
NGX_CONF_ERROR
;

1383 *
imcf
->
hcv
 = 
cv
;

1386  
NGX_CONF_OK
;

1388 
Áûed
:

1390 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

1391 &
vÆue
[
i
]);

1393  
NGX_CONF_ERROR
;

1394 
	}
}

1398 
	$ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1399 *
c⁄f
)

1401 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1403 
ngx_°r_t
 *
vÆue
;

1404 
ngx_öt_t
 
n
;

1405 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1406 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1408 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1410 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1412 
ccv
.
cf
 = cf;

1413 
ccv
.
vÆue
 = &value[1];

1414 
ccv
.
com∂ex_vÆue
 = &
cv
;

1416 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1417  
NGX_CONF_ERROR
;

1420 i‡(
cv
.
Àngths
 =
NULL
) {

1421 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1423 i‡(
n
 <= 0) {

1424 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1425 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1426  
NGX_CONF_ERROR
;

1429 
imcf
->
j≥g_quÆôy
 = (
ngx_uöt_t
Ë
n
;

1432 
imcf
->
jqcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1433 i‡(
imcf
->
jqcv
 =
NULL
) {

1434  
NGX_CONF_ERROR
;

1437 *
imcf
->
jqcv
 = 
cv
;

1440  
NGX_CONF_OK
;

1441 
	}
}

1445 
	$ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1446 *
c⁄f
)

1448 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1450 
ngx_°r_t
 *
vÆue
;

1451 
ngx_öt_t
 
n
;

1452 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1453 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1455 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1457 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1459 
ccv
.
cf
 = cf;

1460 
ccv
.
vÆue
 = &value[1];

1461 
ccv
.
com∂ex_vÆue
 = &
cv
;

1463 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1464  
NGX_CONF_ERROR
;

1467 i‡(
cv
.
Àngths
 =
NULL
) {

1468 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1470 i‡(
n
 < 0) {

1471 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1472 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1473  
NGX_CONF_ERROR
;

1476 
imcf
->
sh¨≥n
 = (
ngx_uöt_t
Ë
n
;

1479 
imcf
->
shcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1480 i‡(
imcf
->
shcv
 =
NULL
) {

1481  
NGX_CONF_ERROR
;

1484 *
imcf
->
shcv
 = 
cv
;

1487  
NGX_CONF_OK
;

1488 
	}
}

1491 
ngx_öt_t


1492 
	$ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1494 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1495 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_image_hódî_fûãr
;

1497 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1498 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_image_body_fûãr
;

1500  
NGX_OK
;

1501 
	}
}

	@src/http/modules/ngx_http_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	m«me
;

15 
ngx_¨øy_t
 *
	mÀngths
;

16 
ngx_¨øy_t
 *
	mvÆues
;

17 } 
	tngx_hâp_ödex_t
;

21 
ngx_¨øy_t
 *
	mödi˚s
;

22 
size_t
 
	mmax_ödex_Àn
;

23 } 
	tngx_hâp_ödex_loc_c⁄f_t
;

26 
	#NGX_HTTP_DEFAULT_INDEX
 "ödex.html"

	)

29 
ngx_öt_t
 
ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
);

31 
ngx_öt_t
 
ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
);

34 
ngx_öt_t
 
ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_ödex_comm™ds
[] = {

44 { 
ngx_°rög
("index"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

46 
ngx_hâp_ödex_£t_ödex
,

47 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
NULL
 },

51 
ngx_nuŒ_comm™d


55 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ödex_moduÀ_˘x
 = {

56 
NULL
,

57 
ngx_hâp_ödex_öô
,

59 
NULL
,

60 
NULL
,

62 
NULL
,

63 
NULL
,

65 
ngx_hâp_ödex_¸óã_loc_c⁄f
,

66 
ngx_hâp_ödex_mîge_loc_c⁄f


70 
ngx_moduÀ_t
 
	gngx_hâp_ödex_moduÀ
 = {

71 
NGX_MODULE_V1
,

72 &
ngx_hâp_ödex_moduÀ_˘x
,

73 
ngx_hâp_ödex_comm™ds
,

74 
NGX_HTTP_MODULE
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NGX_MODULE_V1_PADDING


96 
ngx_öt_t


97 
	$ngx_hâp_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

99 
u_ch¨
 *
p
, *
«me
;

100 
size_t
 
Àn
, 
roŸ
, 
ª£rve
, 
Æloˇãd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_°r_t
 
∑th
, 
uri
;

103 
ngx_uöt_t
 
i
, 
dú_ã°ed
;

104 
ngx_hâp_ödex_t
 *
ödex
;

105 
ngx_›í_fûe_öfo_t
 
of
;

106 
ngx_hâp_s¸ùt_code_±
 
code
;

107 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

108 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

109 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
;

110 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

112 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

113  
NGX_DECLINED
;

116 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

117  
NGX_DECLINED
;

120 
ûcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ödex_moduÀ
);

121 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

123 
Æloˇãd
 = 0;

124 
roŸ
 = 0;

125 
dú_ã°ed
 = 0;

126 
«me
 = 
NULL
;

128 
∑th
.
d©a
 = 
NULL
;

130 
ödex
 = 
ûcf
->
ödi˚s
->
ñts
;

131 
i
 = 0; i < 
ûcf
->
ödi˚s
->
√…s
; i++) {

133 i‡(
ödex
[
i
].
Àngths
 =
NULL
) {

135 i‡(
ödex
[
i
].
«me
.
d©a
[0] == '/') {

136  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
ödex
[
i
].
«me
, &r->
¨gs
);

139 
ª£rve
 = 
ûcf
->
max_ödex_Àn
;

140 
Àn
 = 
ödex
[
i
].
«me
.len;

143 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

145 
e
.
ù
 = 
ödex
[
i
].
Àngths
->
ñts
;

146 
e
.
ªque°
 = 
r
;

147 
e
.
Êushed
 = 1;

150 
Àn
 = 1;

152 *(
uöçå_t
 *Ë
e
.
ù
) {

153 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

154 
Àn
 +
	`lcode
(&
e
);

159 
ª£rve
 = 
Àn
 + 16;

162 i‡(
ª£rve
 > 
Æloˇãd
) {

164 
«me
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
ª£rve
);

165 i‡(
«me
 =
NULL
) {

166  
NGX_ERROR
;

169 
Æloˇãd
 = 
∑th
.
d©a
 +Ö©h.
Àn
 - 
«me
;

172 i‡(
ödex
[
i
].
vÆues
 =
NULL
) {

176 
	`ngx_mem˝y
(
«me
, 
ödex
[
i
].«me.
d©a
, index[i].«me.
Àn
);

178 
∑th
.
Àn
 = (
«me
 + 
ödex
[
i
].«me.À¿- 1Ë-Ö©h.
d©a
;

181 
e
.
ù
 = 
ödex
[
i
].
vÆues
->
ñts
;

182 
e
.
pos
 = 
«me
;

184 *(
uöçå_t
 *Ë
e
.
ù
) {

185 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

186 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

189 i‡(*
«me
 == '/') {

190 
uri
.
Àn
 =Üen - 1;

191 
uri
.
d©a
 = 
«me
;

192  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

195 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

197 *
e
.
pos
 = '\0';

200 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 "›í index \"%V\"", &
∑th
);

203 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

205 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

206 
of
.
dúe˘io
 = 
˛cf
->directio;

207 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

208 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

209 
of
.
ã°_⁄ly
 = 1;

210 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

211 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

213 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

214  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

217 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

218 !
NGX_OK
)

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

221 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

223 i‡(
of
.
îr
 == 0) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 #i‡(
NGX_HAVE_OPENAT
)

228 i‡(
of
.
îr
 =
NGX_EMLINK


229 || 
of
.
îr
 =
NGX_ELOOP
)

231  
NGX_HTTP_FORBIDDEN
;

235 i‡(
of
.
îr
 =
NGX_ENOTDIR


236 || 
of
.
îr
 =
NGX_ENAMETOOLONG


237 || 
of
.
îr
 =
NGX_EACCES
)

239  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
∑th
.
d©a
, 
of
.
îr
);

242 i‡(!
dú_ã°ed
) {

243 
rc
 = 
	`ngx_hâp_ödex_ã°_dú
(
r
, 
˛cf
, 
∑th
.
d©a
, 
«me
 - 1);

245 i‡(
rc
 !
NGX_OK
) {

246  
rc
;

249 
dú_ã°ed
 = 1;

252 i‡(
of
.
îr
 =
NGX_ENOENT
) {

256 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

257 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

259  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

262 
uri
.
Àn
 = 
r
->uri.len +Üen - 1;

264 i‡(!
˛cf
->
Æüs
) {

265 
uri
.
d©a
 = 
∑th
.d©®+ 
roŸ
;

268 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

269 i‡(
uri
.
d©a
 =
NULL
) {

270  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

273 
p
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

274 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 - 1);

277  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

280  
NGX_DECLINED
;

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

286 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
)

288 
u_ch¨
 
c
;

289 
ngx_°r_t
 
dú
;

290 
ngx_›í_fûe_öfo_t
 
of
;

292 
c
 = *
œ°
;

293 i‡(
c
 !'/' || 
∑th
 =
œ°
) {

295 
c
 = *(++
œ°
);

297 *
œ°
 = '\0';

299 
dú
.
Àn
 = 
œ°
 - 
∑th
;

300 
dú
.
d©a
 = 
∑th
;

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

303 "hâ∞ödex check dú: \"%V\"", &
dú
);

305 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

307 
of
.
ã°_dú
 = 1;

308 
of
.
ã°_⁄ly
 = 1;

309 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

310 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

312 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
dú
, &
of
Ë!
NGX_OK
) {

313  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

316 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
dú
, &
of
, 
r
->
poﬁ
)

317 !
NGX_OK
)

319 i‡(
of
.
îr
) {

321 #i‡(
NGX_HAVE_OPENAT
)

322 i‡(
of
.
îr
 =
NGX_EMLINK


323 || 
of
.
îr
 =
NGX_ELOOP
)

325  
NGX_HTTP_FORBIDDEN
;

329 i‡(
of
.
îr
 =
NGX_ENOENT
) {

330 *
œ°
 = 
c
;

331  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
dú
.
d©a
, 
NGX_ENOENT
);

334 i‡(
of
.
îr
 =
NGX_EACCES
) {

336 *
œ°
 = 
c
;

344  
NGX_OK
;

347 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

348 "%†\"%s\" faûed", 
of
.
Áûed
, 
dú
.
d©a
);

351  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

354 *
œ°
 = 
c
;

356 i‡(
of
.
is_dú
) {

357  
NGX_OK
;

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "\"%s\" i†nŸá dúe˘‹y", 
dú
.
d©a
);

363  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

369 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
)

371 i‡(
îr
 =
NGX_EACCES
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

373 "\"%s\" i†f‹biddí", 
fûe
);

375  
NGX_HTTP_FORBIDDEN
;

378 i‡(
˛cf
->
log_nŸ_found
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

380 "\"%s\" i†nŸ found", 
fûe
);

383  
NGX_HTTP_NOT_FOUND
;

384 
	}
}

388 
	$ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

390 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
;

392 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_ödex_loc_c⁄f_t
));

393 i‡(
c⁄f
 =
NULL
) {

394  
NULL
;

397 
c⁄f
->
ödi˚s
 = 
NULL
;

398 
c⁄f
->
max_ödex_Àn
 = 0;

400  
c⁄f
;

401 
	}
}

405 
	$ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

407 
ngx_hâp_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

408 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

410 
ngx_hâp_ödex_t
 *
ödex
;

412 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

413 
c⁄f
->
ödi˚s
 = 
¥ev
->indices;

414 
c⁄f
->
max_ödex_Àn
 = 
¥ev
->max_index_len;

417 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

418 
c⁄f
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ödex_t
));

419 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

420  
NGX_CONF_ERROR
;

423 
ödex
 = 
	`ngx_¨øy_push
(
c⁄f
->
ödi˚s
);

424 i‡(
ödex
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
ödex
->
«me
.
Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

429 
ödex
->
«me
.
d©a
 = (
u_ch¨
 *Ë
NGX_HTTP_DEFAULT_INDEX
;

430 
ödex
->
Àngths
 = 
NULL
;

431 
ödex
->
vÆues
 = 
NULL
;

433 
c⁄f
->
max_ödex_Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

435  
NGX_CONF_OK
;

438  
NGX_CONF_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

445 
ngx_hâp_h™dÀr_±
 *
h
;

446 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

448 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

450 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

451 i‡(
h
 =
NULL
) {

452  
NGX_ERROR
;

455 *
h
 = 
ngx_hâp_ödex_h™dÀr
;

457  
NGX_OK
;

458 
	}
}

464 
	$ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

466 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
 = 
c⁄f
;

468 
ngx_°r_t
 *
vÆue
;

469 
ngx_uöt_t
 
i
, 
n
;

470 
ngx_hâp_ödex_t
 *
ödex
;

471 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

473 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

474 
ûcf
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_ödex_t
));

475 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

476  
NGX_CONF_ERROR
;

480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

482 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

484 i‡(
vÆue
[
i
].
d©a
[0] ='/' && i !
cf
->
¨gs
->
√…s
 - 1) {

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

490 i‡(
vÆue
[
i
].
Àn
 == 0) {

491 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

493 &
vÆue
[1]);

494  
NGX_CONF_ERROR
;

497 
ödex
 = 
	`ngx_¨øy_push
(
ûcf
->
ödi˚s
);

498 i‡(
ödex
 =
NULL
) {

499  
NGX_CONF_ERROR
;

502 
ödex
->
«me
.
Àn
 = 
vÆue
[
i
].len;

503 
ödex
->
«me
.
d©a
 = 
vÆue
[
i
].data;

504 
ödex
->
Àngths
 = 
NULL
;

505 
ödex
->
vÆues
 = 
NULL
;

507 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[
i
]);

509 i‡(
n
 == 0) {

510 i‡(
ûcf
->
max_ödex_Àn
 < 
ödex
->
«me
.
Àn
) {

511 
ûcf
->
max_ödex_Àn
 = 
ödex
->
«me
.
Àn
;

514 i‡(
ödex
->
«me
.
d©a
[0] == '/') {

519 
ödex
->
«me
.
Àn
++;

524 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

526 
sc
.
cf
 = cf;

527 
sc
.
sour˚
 = &
vÆue
[
i
];

528 
sc
.
Àngths
 = &
ödex
->lengths;

529 
sc
.
vÆues
 = &
ödex
->values;

530 
sc
.
v¨übÀs
 = 
n
;

531 
sc
.
com∂ëe_Àngths
 = 1;

532 
sc
.
com∂ëe_vÆues
 = 1;

534 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

535  
NGX_CONF_ERROR
;

539  
NGX_CONF_OK
;

540 
	}
}

	@src/http/modules/ngx_http_limit_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mÀn
;

16 
u_sh‹t
 
	mc⁄n
;

17 
u_ch¨
 
	md©a
[1];

18 } 
	tngx_hâp_limô_c⁄n_node_t
;

22 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

23 
ngx_rbåì_node_t
 *
	mnode
;

24 } 
	tngx_hâp_limô_c⁄n_˛ónup_t
;

28 
ngx_rbåì_t
 *
	mrbåì
;

29 
ngx_öt_t
 
	mödex
;

30 
ngx_°r_t
 
	mv¨
;

31 } 
	tngx_hâp_limô_c⁄n_˘x_t
;

35 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

36 
ngx_uöt_t
 
	mc⁄n
;

37 } 
	tngx_hâp_limô_c⁄n_limô_t
;

41 
ngx_¨øy_t
 
	mlimôs
;

42 
ngx_uöt_t
 
	mlog_Àvñ
;

43 } 
	tngx_hâp_limô_c⁄n_c⁄f_t
;

46 
ngx_rbåì_node_t
 *
ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
,

47 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
, 
uöt32_t
 
hash
);

48 
ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
);

49 
ngx_ölöe
 
ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
);

51 *
ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

52 *
ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

53 *
chûd
);

54 *
ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

55 *
c⁄f
);

56 *
ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

57 *
c⁄f
);

58 *
ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

59 *
c⁄f
);

60 
ngx_öt_t
 
ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
);

63 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_limô_z⁄e
 = {

64 
ngx_c⁄f_dïªˇãd
, "limit_zone", "limit_conn_zone"

68 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_c⁄n_log_Àvñs
[] = {

69 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

70 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

71 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

72 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

73 { 
ngx_nuŒ_°rög
, 0 }

77 
ngx_comm™d_t
 
	gngx_hâp_limô_c⁄n_comm™ds
[] = {

79 { 
ngx_°rög
("limit_conn_zone"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

81 
ngx_hâp_limô_c⁄n_z⁄e
,

84 
NULL
 },

86 { 
ngx_°rög
("limit_zone"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

88 
ngx_hâp_limô_z⁄e
,

91 
NULL
 },

93 { 
ngx_°rög
("limit_conn"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

95 
ngx_hâp_limô_c⁄n
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
NULL
 },

100 { 
ngx_°rög
("limit_conn_log_level"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

102 
ngx_c⁄f_£t_íum_¶Ÿ
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
log_Àvñ
),

105 &
ngx_hâp_limô_c⁄n_log_Àvñs
 },

107 
ngx_nuŒ_comm™d


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_limô_c⁄n_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
ngx_hâp_limô_c⁄n_¸óã_c⁄f
,

122 
ngx_hâp_limô_c⁄n_mîge_c⁄f


126 
ngx_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_limô_c⁄n_moduÀ_˘x
,

129 
ngx_hâp_limô_c⁄n_comm™ds
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_öt_t


143 
	$ngx_hâp_limô_c⁄n_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

145 
size_t
 
Àn
, 
n
;

146 
uöt32_t
 
hash
;

147 
ngx_uöt_t
 
i
;

148 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

149 
ngx_rbåì_node_t
 *
node
;

150 
ngx_poﬁ_˛ónup_t
 *
˛n
;

151 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

152 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

153 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

154 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
;

155 
ngx_hâp_limô_c⁄n_limô_t
 *
limôs
;

156 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
;

158 i‡(
r
->
maö
->
limô_c⁄n_£t
) {

159  
NGX_DECLINED
;

162 
lccf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_c⁄n_moduÀ
);

163 
limôs
 = 
lccf
->limôs.
ñts
;

165 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

166 
˘x
 = 
limôs
[
i
].
shm_z⁄e
->
d©a
;

168 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

170 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

174 
Àn
 = 
vv
->len;

176 i‡(
Àn
 == 0) {

180 i‡(
Àn
 > 255) {

181 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

184 &
˘x
->
v¨
, 
vv
);

188 
r
->
maö
->
limô_c⁄n_£t
 = 1;

190 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

192 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
limôs
[
i
].
shm_z⁄e
->
shm
.
addr
;

194 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

196 
node
 = 
	`ngx_hâp_limô_c⁄n_lookup
(
˘x
->
rbåì
, 
vv
, 
hash
);

198 i‡(
node
 =
NULL
) {

200 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

201 + 
	`off£tof
(
ngx_hâp_limô_c⁄n_node_t
, 
d©a
)

202 + 
Àn
;

204 
node
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
n
);

206 i‡(
node
 =
NULL
) {

207 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

208 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

209  
NGX_HTTP_SERVICE_UNAVAILABLE
;

212 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

214 
node
->
key
 = 
hash
;

215 
lc
->
Àn
 = (
u_ch¨
)Üen;

216 
lc
->
c⁄n
 = 1;

217 
	`ngx_mem˝y
(
lc
->
d©a
, 
vv
->d©a, 
Àn
);

219 
	`ngx_rbåì_ö£π
(
˘x
->
rbåì
, 
node
);

223 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

225 i‡((
ngx_uöt_t
Ë
lc
->
c⁄n
 >
limôs
[
i
].conn) {

227 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

229 
	`ngx_log_îr‹
(
lccf
->
log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

231 &
limôs
[
i
].
shm_z⁄e
->
shm
.
«me
);

233 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

234  
NGX_HTTP_SERVICE_UNAVAILABLE
;

237 
lc
->
c⁄n
++;

240 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241 "limô c⁄n: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

243 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

245 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
,

246 (
ngx_hâp_limô_c⁄n_˛ónup_t
));

247 i‡(
˛n
 =
NULL
) {

248  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

251 
˛n
->
h™dÀr
 = 
ngx_hâp_limô_c⁄n_˛ónup
;

252 
lc˛n
 = 
˛n
->
d©a
;

254 
lc˛n
->
shm_z⁄e
 = 
limôs
[
i
].shm_zone;

255 
lc˛n
->
node
 =Çode;

258  
NGX_DECLINED
;

259 
	}
}

263 
	$ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

264 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

266 
ngx_rbåì_node_t
 **
p
;

267 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
, *
l˙t
;

271 i‡(
node
->
key
 < 
ãmp
->key) {

273 
p
 = &
ãmp
->
À·
;

275 } i‡(
node
->
key
 > 
ãmp
->key) {

277 
p
 = &
ãmp
->
right
;

281 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

282 
l˙t
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
ãmp
->
cﬁ‹
;

284 
p
 = (
	`ngx_memn2cmp
(
l˙
->
d©a
, 
l˙t
->d©a,Ü˙->
Àn
,Ücnt->len) < 0)

285 ? &
ãmp
->
À·
 : &ãmp->
right
;

288 i‡(*
p
 =
£¡öñ
) {

292 
ãmp
 = *
p
;

295 *
p
 = 
node
;

296 
node
->
∑ª¡
 = 
ãmp
;

297 
node
->
À·
 = 
£¡öñ
;

298 
node
->
right
 = 
£¡öñ
;

299 
	`ngx_rbt_ªd
(
node
);

300 
	}
}

303 
ngx_rbåì_node_t
 *

304 
	$ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
,

305 
uöt32_t
 
hash
)

307 
ngx_öt_t
 
rc
;

308 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

309 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
;

311 
node
 = 
rbåì
->
roŸ
;

312 
£¡öñ
 = 
rbåì
->sentinel;

314 
node
 !
£¡öñ
) {

316 i‡(
hash
 < 
node
->
key
) {

317 
node
 =Çode->
À·
;

321 i‡(
hash
 > 
node
->
key
) {

322 
node
 =Çode->
right
;

328 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

330 
rc
 = 
	`ngx_memn2cmp
(
vv
->
d©a
, 
l˙
->data,

331 (
size_t
Ë
vv
->
Àn
, (size_tË
l˙
->len);

332 i‡(
rc
 == 0) {

333  
node
;

336 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

339  
NULL
;

340 
	}
}

344 
	$ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
)

346 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
 = 
d©a
;

348 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

349 
ngx_rbåì_node_t
 *
node
;

350 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

351 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

353 
˘x
 = 
lc˛n
->
shm_z⁄e
->
d©a
;

354 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lc˛n
->
shm_z⁄e
->
shm
.
addr
;

355 
node
 = 
lc˛n
->node;

356 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

358 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

360 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
lc˛n
->
shm_z⁄e
->
shm
.
log
, 0,

361 "limô c⁄¿˛ónup: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

363 
lc
->
c⁄n
--;

365 i‡(
lc
->
c⁄n
 == 0) {

366 
	`ngx_rbåì_dñëe
(
˘x
->
rbåì
, 
node
);

367 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
node
);

370 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

371 
	}
}

374 
ngx_ölöe
 

375 
	$ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
)

377 
ngx_poﬁ_˛ónup_t
 *
˛n
;

379 
˛n
 = 
poﬁ
->
˛ónup
;

381 
˛n
 && c ->
h™dÀr
 =
ngx_hâp_limô_c⁄n_˛ónup
) {

382 
	`ngx_hâp_limô_c⁄n_˛ónup
(
˛n
->
d©a
);

383 
˛n
 = c ->
√xt
;

386 
poﬁ
->
˛ónup
 = 
˛n
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_hâp_limô_c⁄n_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

393 
ngx_hâp_limô_c⁄n_˘x_t
 *
o˘x
 = 
d©a
;

395 
size_t
 
Àn
;

396 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

397 
ngx_rbåì_node_t
 *
£¡öñ
;

398 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

400 
˘x
 = 
shm_z⁄e
->
d©a
;

402 i‡(
o˘x
) {

403 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

404 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

407 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

408  
NGX_ERROR
;

411 
˘x
->
rbåì
 = 
o˘x
->rbtree;

413  
NGX_OK
;

416 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

418 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

419 
˘x
->
rbåì
 = 
shpoﬁ
->
d©a
;

421  
NGX_OK
;

424 
˘x
->
rbåì
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_t
));

425 i‡(
˘x
->
rbåì
 =
NULL
) {

426  
NGX_ERROR
;

429 
shpoﬁ
->
d©a
 = 
˘x
->
rbåì
;

431 
£¡öñ
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_node_t
));

432 i‡(
£¡öñ
 =
NULL
) {

433  
NGX_ERROR
;

436 
	`ngx_rbåì_öô
(
˘x
->
rbåì
, 
£¡öñ
,

437 
ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
);

439 
Àn
 = (" i¿limô_c⁄n_z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

441 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

442 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

443  
NGX_ERROR
;

446 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " inÜimit_conn_zone \"%V\"%Z",

447 &
shm_z⁄e
->
shm
.
«me
);

449  
NGX_OK
;

450 
	}
}

454 
	$ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

456 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
;

458 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_c⁄f_t
));

459 i‡(
c⁄f
 =
NULL
) {

460  
NULL
;

469 
c⁄f
->
log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

471  
c⁄f
;

472 
	}
}

476 
	$ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

478 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

479 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
 = 
chûd
;

481 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

482 
c⁄f
->
limôs
 = 
¥ev
->limits;

485 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
log_Àvñ
, 
¥ev
->log_Àvñ, 
NGX_LOG_ERR
);

487  
NGX_CONF_OK
;

488 
	}
}

492 
	$ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

494 
u_ch¨
 *
p
;

495 
ssize_t
 
size
;

496 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

497 
ngx_uöt_t
 
i
;

498 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

499 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

501 
vÆue
 = 
cf
->
¨gs
->
ñts
;

503 
˘x
 = 
NULL
;

504 
size
 = 0;

505 
«me
.
Àn
 = 0;

507 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

509 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

511 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

513 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

515 i‡(
p
 =
NULL
) {

516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

517 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

518  
NGX_CONF_ERROR
;

521 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

523 
s
.
d©a
 = 
p
 + 1;

524 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

526 
size
 = 
	`ngx_∑r£_size
(&
s
);

528 i‡(
size
 =
NGX_ERROR
) {

529 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

530 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

531  
NGX_CONF_ERROR
;

534 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

535 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

536 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

537  
NGX_CONF_ERROR
;

543 i‡(
vÆue
[
i
].
d©a
[0] == '$') {

545 
vÆue
[
i
].
Àn
--;

546 
vÆue
[
i
].
d©a
++;

548 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

549 i‡(
˘x
 =
NULL
) {

550  
NGX_CONF_ERROR
;

553 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[
i
]);

554 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

555  
NGX_CONF_ERROR
;

558 
˘x
->
v¨
 = 
vÆue
[
i
];

563 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

564 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

565  
NGX_CONF_ERROR
;

568 i‡(
«me
.
Àn
 == 0) {

569 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

571 &
cmd
->
«me
);

572  
NGX_CONF_ERROR
;

575 i‡(
˘x
 =
NULL
) {

576 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

578 &
cmd
->
«me
, &name);

579  
NGX_CONF_ERROR
;

582 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

583 &
ngx_hâp_limô_c⁄n_moduÀ
);

584 i‡(
shm_z⁄e
 =
NULL
) {

585  
NGX_CONF_ERROR
;

588 i‡(
shm_z⁄e
->
d©a
) {

589 
˘x
 = 
shm_z⁄e
->
d©a
;

591 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

593 &
cmd
->
«me
, &«me, &
˘x
->
v¨
);

594  
NGX_CONF_ERROR
;

597 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

598 
shm_z⁄e
->
d©a
 = 
˘x
;

600  
NGX_CONF_OK
;

601 
	}
}

605 
	$ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

607 
ssize_t
 
n
;

608 
ngx_°r_t
 *
vÆue
;

609 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

610 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

612 
	`ngx_c⁄f_dïªˇãd
(
cf
, &
ngx_c⁄f_dïªˇãd_limô_z⁄e
, 
NULL
);

614 
vÆue
 = 
cf
->
¨gs
->
ñts
;

616 i‡(
vÆue
[2].
d©a
[0] != '$') {

617 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

618 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[2]);

619  
NGX_CONF_ERROR
;

622 
vÆue
[2].
Àn
--;

623 
vÆue
[2].
d©a
++;

625 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

626 i‡(
˘x
 =
NULL
) {

627  
NGX_CONF_ERROR
;

630 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[2]);

631 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

632  
NGX_CONF_ERROR
;

635 
˘x
->
v¨
 = 
vÆue
[2];

637 
n
 = 
	`ngx_∑r£_size
(&
vÆue
[3]);

639 i‡(
n
 =
NGX_ERROR
) {

640 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

641 "övÆid sizêo‡limô_z⁄ê\"%V\"", &
vÆue
[3]);

642  
NGX_CONF_ERROR
;

645 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

646 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

647 "limô_z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[1]);

648  
NGX_CONF_ERROR
;

652 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 
n
,

653 &
ngx_hâp_limô_c⁄n_moduÀ
);

654 i‡(
shm_z⁄e
 =
NULL
) {

655  
NGX_CONF_ERROR
;

658 i‡(
shm_z⁄e
->
d©a
) {

659 
˘x
 = 
shm_z⁄e
->
d©a
;

661 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

663 &
vÆue
[1], &
˘x
->
v¨
);

664  
NGX_CONF_ERROR
;

667 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

668 
shm_z⁄e
->
d©a
 = 
˘x
;

670  
NGX_CONF_OK
;

671 
	}
}

675 
	$ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

677 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

678 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
 = 
c⁄f
;

679 
ngx_hâp_limô_c⁄n_limô_t
 *
limô
, *
limôs
;

681 
ngx_°r_t
 *
vÆue
;

682 
ngx_öt_t
 
n
;

683 
ngx_uöt_t
 
i
;

685 
vÆue
 = 
cf
->
¨gs
->
ñts
;

687 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

688 &
ngx_hâp_limô_c⁄n_moduÀ
);

689 i‡(
shm_z⁄e
 =
NULL
) {

690  
NGX_CONF_ERROR
;

693 
limôs
 = 
lccf
->limôs.
ñts
;

695 i‡(
limôs
 =
NULL
) {

696 i‡(
	`ngx_¨øy_öô
(&
lccf
->
limôs
, 
cf
->
poﬁ
, 1,

697 (
ngx_hâp_limô_c⁄n_limô_t
))

698 !
NGX_OK
)

700  
NGX_CONF_ERROR
;

704 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

705 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

710 
n
 = 
	`ngx_©oi
(
vÆue
[2].
d©a
, vÆue[2].
Àn
);

711 i‡(
n
 <= 0) {

712 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

713 "övÆidÇumbî o‡c⁄√˘i⁄†\"%V\"", &
vÆue
[2]);

714  
NGX_CONF_ERROR
;

717 i‡(
n
 > 65535) {

718 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

720  
NGX_CONF_ERROR
;

723 
limô
 = 
	`ngx_¨øy_push
(&
lccf
->
limôs
);

724 i‡(
limô
 =
NULL
) {

725  
NGX_CONF_ERROR
;

728 
limô
->
c⁄n
 = 
n
;

729 
limô
->
shm_z⁄e
 = shm_zone;

731  
NGX_CONF_OK
;

732 
	}
}

735 
ngx_öt_t


736 
	$ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
)

738 
ngx_hâp_h™dÀr_±
 *
h
;

739 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

741 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

743 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

744 i‡(
h
 =
NULL
) {

745  
NGX_ERROR
;

748 *
h
 = 
ngx_hâp_limô_c⁄n_h™dÀr
;

750  
NGX_OK
;

751 
	}
}

	@src/http/modules/ngx_http_limit_req_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mdummy
;

16 
u_sh‹t
 
	mÀn
;

17 
ngx_queue_t
 
	mqueue
;

18 
ngx_m£c_t
 
	mœ°
;

20 
ngx_uöt_t
 
	mex˚ss
;

21 
ngx_uöt_t
 
	mcou¡
;

22 
u_ch¨
 
	md©a
[1];

23 } 
	tngx_hâp_limô_ªq_node_t
;

27 
ngx_rbåì_t
 
	mrbåì
;

28 
ngx_rbåì_node_t
 
	m£¡öñ
;

29 
ngx_queue_t
 
	mqueue
;

30 } 
	tngx_hâp_limô_ªq_sh˘x_t
;

34 
ngx_hâp_limô_ªq_sh˘x_t
 *
	msh
;

35 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

37 
ngx_uöt_t
 
	møã
;

38 
ngx_öt_t
 
	mödex
;

39 
ngx_°r_t
 
	mv¨
;

40 
ngx_hâp_limô_ªq_node_t
 *
	mnode
;

41 } 
	tngx_hâp_limô_ªq_˘x_t
;

45 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

47 
ngx_uöt_t
 
	mbur°
;

48 
ngx_uöt_t
 
	mnodñay
;

49 } 
	tngx_hâp_limô_ªq_limô_t
;

53 
ngx_¨øy_t
 
	mlimôs
;

54 
ngx_uöt_t
 
	mlimô_log_Àvñ
;

55 
ngx_uöt_t
 
	mdñay_log_Àvñ
;

56 } 
	tngx_hâp_limô_ªq_c⁄f_t
;

59 
ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
);

60 
ngx_öt_t
 
ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
,

61 
ngx_uöt_t
 
hash
, 
u_ch¨
 *
d©a
, 
size_t
 
Àn
,Çgx_uöt_à*
ï
,

62 
ngx_uöt_t
 
accou¡
);

63 
ngx_m£c_t
 
ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
,

64 
ngx_uöt_t
 
n
,Çgx_uöt_à*
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
);

65 
ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
,

66 
ngx_uöt_t
 
n
);

68 *
ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

69 *
ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

70 *
chûd
);

71 *
ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

73 *
ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

74 *
c⁄f
);

75 
ngx_öt_t
 
ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
);

78 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_ªq_log_Àvñs
[] = {

79 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

80 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

81 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

82 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

83 { 
ngx_nuŒ_°rög
, 0 }

87 
ngx_comm™d_t
 
	gngx_hâp_limô_ªq_comm™ds
[] = {

89 { 
ngx_°rög
("limit_req_zone"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

91 
ngx_hâp_limô_ªq_z⁄e
,

94 
NULL
 },

96 { 
ngx_°rög
("limit_req"),

97 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

98 
ngx_hâp_limô_ªq
,

99 
NGX_HTTP_LOC_CONF_OFFSET
,

101 
NULL
 },

103 { 
ngx_°rög
("limit_req_log_level"),

104 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

105 
ngx_c⁄f_£t_íum_¶Ÿ
,

106 
NGX_HTTP_LOC_CONF_OFFSET
,

107 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
limô_log_Àvñ
),

108 &
ngx_hâp_limô_ªq_log_Àvñs
 },

110 
ngx_nuŒ_comm™d


114 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ_˘x
 = {

115 
NULL
,

116 
ngx_hâp_limô_ªq_öô
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL
,

124 
ngx_hâp_limô_ªq_¸óã_c⁄f
,

125 
ngx_hâp_limô_ªq_mîge_c⁄f


129 
ngx_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ
 = {

130 
NGX_MODULE_V1
,

131 &
ngx_hâp_limô_ªq_moduÀ_˘x
,

132 
ngx_hâp_limô_ªq_comm™ds
,

133 
NGX_HTTP_MODULE
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NGX_MODULE_V1_PADDING


145 
ngx_öt_t


146 
	$ngx_hâp_limô_ªq_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

148 
size_t
 
Àn
;

149 
uöt32_t
 
hash
;

150 
ngx_öt_t
 
rc
;

151 
ngx_uöt_t
 
n
, 
ex˚ss
;

152 
ngx_m£c_t
 
dñay
;

153 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

154 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

155 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
;

156 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

158 i‡(
r
->
maö
->
limô_ªq_£t
) {

159  
NGX_DECLINED
;

162 
Ãcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_ªq_moduÀ
);

163 
limôs
 = 
Ãcf
->limôs.
ñts
;

165 
ex˚ss
 = 0;

167 
rc
 = 
NGX_DECLINED
;

169 #i‡(
NGX_SUPPRESS_WARN
)

170 
limô
 = 
NULL
;

173 
n
 = 0;Ç < 
Ãcf
->
limôs
.
√…s
;Ç++) {

175 
limô
 = &
limôs
[
n
];

177 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

179 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

181 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

185 
Àn
 = 
vv
->len;

187 i‡(
Àn
 == 0) {

191 i‡(
Àn
 > 65535) {

192 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

195 &
˘x
->
v¨
, 
vv
);

199 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

201 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

203 
rc
 = 
	`ngx_hâp_limô_ªq_lookup
(
limô
, 
hash
, 
vv
->
d©a
, 
Àn
, &
ex˚ss
,

204 (
n
 =
Ãcf
->
limôs
.
√…s
 - 1));

206 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

208 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

210 
n
, 
rc
, 
ex˚ss
 / 1000,Éxcess % 1000);

212 i‡(
rc
 !
NGX_AGAIN
) {

217 i‡(
rc
 =
NGX_DECLINED
) {

218  
NGX_DECLINED
;

221 
r
->
maö
->
limô_ªq_£t
 = 1;

223 i‡(
rc
 =
NGX_BUSY
 ||Ñ¯=
NGX_ERROR
) {

225 i‡(
rc
 =
NGX_BUSY
) {

226 
	`ngx_log_îr‹
(
Ãcf
->
limô_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

228 
ex˚ss
 / 1000,Éxcess % 1000,

229 &
limô
->
shm_z⁄e
->
shm
.
«me
);

232 
n
--) {

233 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

235 i‡(
˘x
->
node
 =
NULL
) {

239 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

241 
˘x
->
node
->
cou¡
--;

243 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

245 
˘x
->
node
 = 
NULL
;

248  
NGX_HTTP_SERVICE_UNAVAILABLE
;

253 i‡(
rc
 =
NGX_AGAIN
) {

254 
ex˚ss
 = 0;

257 
dñay
 = 
	`ngx_hâp_limô_ªq_accou¡
(
limôs
, 
n
, &
ex˚ss
, &
limô
);

259 i‡(!
dñay
) {

260  
NGX_DECLINED
;

263 
	`ngx_log_îr‹
(
Ãcf
->
dñay_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

265 
ex˚ss
 / 1000,Éx˚s†% 1000, &
limô
->
shm_z⁄e
->
shm
.
«me
);

267 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

268  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

271 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

272 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_limô_ªq_dñay
;

273 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
wrôe
, 
dñay
);

275  
NGX_AGAIN
;

276 
	}
}

280 
	$ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
)

282 
ngx_evít_t
 *
wev
;

284 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

287 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

289 i‡(!
wev
->
timedout
) {

291 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

292 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

298 
wev
->
timedout
 = 0;

300 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

301 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

305 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

306 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

308 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

309 
	}
}

313 
	$ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

314 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

316 
ngx_rbåì_node_t
 **
p
;

317 
ngx_hâp_limô_ªq_node_t
 *
Ãn
, *
Ã¡
;

321 i‡(
node
->
key
 < 
ãmp
->key) {

323 
p
 = &
ãmp
->
À·
;

325 } i‡(
node
->
key
 > 
ãmp
->key) {

327 
p
 = &
ãmp
->
right
;

331 
Ãn
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

332 
Ã¡
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
ãmp
->
cﬁ‹
;

334 
p
 = (
	`ngx_memn2cmp
(
Ãn
->
d©a
, 
Ã¡
->d©a,Ü∫->
Àn
,Ürnt->len) < 0)

335 ? &
ãmp
->
À·
 : &ãmp->
right
;

338 i‡(*
p
 =
£¡öñ
) {

342 
ãmp
 = *
p
;

345 *
p
 = 
node
;

346 
node
->
∑ª¡
 = 
ãmp
;

347 
node
->
À·
 = 
£¡öñ
;

348 
node
->
right
 = 
£¡öñ
;

349 
	`ngx_rbt_ªd
(
node
);

350 
	}
}

353 
ngx_öt_t


354 
	$ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
, 
ngx_uöt_t
 
hash
,

355 
u_ch¨
 *
d©a
, 
size_t
 
Àn
, 
ngx_uöt_t
 *
ï
,Çgx_uöt_à
accou¡
)

357 
size_t
 
size
;

358 
ngx_öt_t
 
rc
, 
ex˚ss
;

359 
ngx_time_t
 *
ç
;

360 
ngx_m£c_t
 
now
;

361 
ngx_m£c_öt_t
 
ms
;

362 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

363 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

364 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

366 
ç
 = 
	`ngx_timeofday
();

367 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

369 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

371 
node
 = 
˘x
->
sh
->
rbåì
.
roŸ
;

372 
£¡öñ
 = 
˘x
->
sh
->
rbåì
.sentinel;

374 
node
 !
£¡öñ
) {

376 i‡(
hash
 < 
node
->
key
) {

377 
node
 =Çode->
À·
;

381 i‡(
hash
 > 
node
->
key
) {

382 
node
 =Çode->
right
;

388 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

390 
rc
 = 
	`ngx_memn2cmp
(
d©a
, 
Ã
->d©a, 
Àn
, (
size_t
)Ür->len);

392 i‡(
rc
 == 0) {

393 
	`ngx_queue_ªmove
(&
Ã
->
queue
);

394 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

396 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

398 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

400 i‡(
ex˚ss
 < 0) {

401 
ex˚ss
 = 0;

404 *
ï
 = 
ex˚ss
;

406 i‡((
ngx_uöt_t
Ë
ex˚ss
 > 
limô
->
bur°
) {

407  
NGX_BUSY
;

410 i‡(
accou¡
) {

411 
Ã
->
ex˚ss
 =Éxcess;

412 
Ã
->
œ°
 = 
now
;

413  
NGX_OK
;

416 
Ã
->
cou¡
++;

418 
˘x
->
node
 = 
Ã
;

420  
NGX_AGAIN
;

423 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

426 *
ï
 = 0;

428 
size
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

429 + 
	`off£tof
(
ngx_hâp_limô_ªq_node_t
, 
d©a
)

430 + 
Àn
;

432 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 1);

434 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

436 i‡(
node
 =
NULL
) {

437 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 0);

439 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

440 i‡(
node
 =
NULL
) {

441  
NGX_ERROR
;

445 
node
->
key
 = 
hash
;

447 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

449 
Ã
->
Àn
 = (
u_ch¨
)Üen;

450 
Ã
->
ex˚ss
 = 0;

452 
	`ngx_mem˝y
(
Ã
->
d©a
, d©a, 
Àn
);

454 
	`ngx_rbåì_ö£π
(&
˘x
->
sh
->
rbåì
, 
node
);

456 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

458 i‡(
accou¡
) {

459 
Ã
->
œ°
 = 
now
;

460 
Ã
->
cou¡
 = 0;

461  
NGX_OK
;

464 
Ã
->
œ°
 = 0;

465 
Ã
->
cou¡
 = 1;

467 
˘x
->
node
 = 
Ã
;

469  
NGX_AGAIN
;

470 
	}
}

473 
ngx_m£c_t


474 
	$ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
, 
ngx_uöt_t
 
n
,

475 
ngx_uöt_t
 *
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
)

477 
ngx_öt_t
 
ex˚ss
;

478 
ngx_time_t
 *
ç
;

479 
ngx_m£c_t
 
now
, 
dñay
, 
max_dñay
;

480 
ngx_m£c_öt_t
 
ms
;

481 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

482 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

484 
ex˚ss
 = *
ï
;

486 i‡(
ex˚ss
 =0 || (*
limô
)->
nodñay
) {

487 
max_dñay
 = 0;

490 
˘x
 = (*
limô
)->
shm_z⁄e
->
d©a
;

491 
max_dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

494 
n
--) {

495 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

496 
Ã
 = 
˘x
->
node
;

498 i‡(
Ã
 =
NULL
) {

502 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

504 
ç
 = 
	`ngx_timeofday
();

506 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

507 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

509 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

511 i‡(
ex˚ss
 < 0) {

512 
ex˚ss
 = 0;

515 
Ã
->
œ°
 = 
now
;

516 
Ã
->
ex˚ss
 =Éxcess;

517 
Ã
->
cou¡
--;

519 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

521 
˘x
->
node
 = 
NULL
;

523 i‡(
limôs
[
n
].
nodñay
) {

527 
dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

529 i‡(
dñay
 > 
max_dñay
) {

530 
max_dñay
 = 
dñay
;

531 *
ï
 = 
ex˚ss
;

532 *
limô
 = &
limôs
[
n
];

536  
max_dñay
;

537 
	}
}

541 
	$ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
, 
ngx_uöt_t
 
n
)

543 
ngx_öt_t
 
ex˚ss
;

544 
ngx_time_t
 *
ç
;

545 
ngx_m£c_t
 
now
;

546 
ngx_queue_t
 *
q
;

547 
ngx_m£c_öt_t
 
ms
;

548 
ngx_rbåì_node_t
 *
node
;

549 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

551 
ç
 = 
	`ngx_timeofday
();

553 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

561 
n
 < 3) {

563 i‡(
	`ngx_queue_em±y
(&
˘x
->
sh
->
queue
)) {

567 
q
 = 
	`ngx_queue_œ°
(&
˘x
->
sh
->
queue
);

569 
Ã
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_limô_ªq_node_t
, 
queue
);

571 i‡(
Ã
->
cou¡
) {

581 i‡(
n
++ != 0) {

583 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

584 
ms
 = 
	`ngx_abs
(ms);

586 i‡(
ms
 < 60000) {

590 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000;

592 i‡(
ex˚ss
 > 0) {

597 
	`ngx_queue_ªmove
(
q
);

599 
node
 = (
ngx_rbåì_node_t
 *)

600 ((
u_ch¨
 *Ë
Ã
 - 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
));

602 
	`ngx_rbåì_dñëe
(&
˘x
->
sh
->
rbåì
, 
node
);

604 
	`ngx_¶ab_‰ì_locked
(
˘x
->
shpoﬁ
, 
node
);

606 
	}
}

609 
ngx_öt_t


610 
	$ngx_hâp_limô_ªq_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

612 
ngx_hâp_limô_ªq_˘x_t
 *
o˘x
 = 
d©a
;

614 
size_t
 
Àn
;

615 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

617 
˘x
 = 
shm_z⁄e
->
d©a
;

619 i‡(
o˘x
) {

620 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

621 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

624 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

625  
NGX_ERROR
;

628 
˘x
->
sh
 = 
o˘x
->sh;

629 
˘x
->
shpoﬁ
 = 
o˘x
->shpool;

631  
NGX_OK
;

634 
˘x
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

636 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

637 
˘x
->
sh
 = ctx->
shpoﬁ
->
d©a
;

639  
NGX_OK
;

642 
˘x
->
sh
 = 
	`ngx_¶ab_Æloc
(˘x->
shpoﬁ
, (
ngx_hâp_limô_ªq_sh˘x_t
));

643 i‡(
˘x
->
sh
 =
NULL
) {

644  
NGX_ERROR
;

647 
˘x
->
shpoﬁ
->
d©a
 = ctx->
sh
;

649 
	`ngx_rbåì_öô
(&
˘x
->
sh
->
rbåì
, &˘x->sh->
£¡öñ
,

650 
ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
);

652 
	`ngx_queue_öô
(&
˘x
->
sh
->
queue
);

654 
Àn
 = (" i¿limô_ªq z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

656 
˘x
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(˘x->shpoﬁ, 
Àn
);

657 i‡(
˘x
->
shpoﬁ
->
log_˘x
 =
NULL
) {

658  
NGX_ERROR
;

661 
	`ngx_•rötf
(
˘x
->
shpoﬁ
->
log_˘x
, " inÜimit_req zone \"%V\"%Z",

662 &
shm_z⁄e
->
shm
.
«me
);

664  
NGX_OK
;

665 
	}
}

669 
	$ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

671 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
;

673 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_c⁄f_t
));

674 i‡(
c⁄f
 =
NULL
) {

675  
NULL
;

684 
c⁄f
->
limô_log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

686  
c⁄f
;

687 
	}
}

691 
	$ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

693 
ngx_hâp_limô_ªq_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

694 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
 = 
chûd
;

696 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

697 
c⁄f
->
limôs
 = 
¥ev
->limits;

700 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
limô_log_Àvñ
, 
¥ev
->limit_log_level,

701 
NGX_LOG_ERR
);

703 
c⁄f
->
dñay_log_Àvñ
 = (c⁄f->
limô_log_Àvñ
 =
NGX_LOG_INFO
) ?

704 
NGX_LOG_INFO
 : 
c⁄f
->
limô_log_Àvñ
 + 1;

706  
NGX_CONF_OK
;

707 
	}
}

711 
	$ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

713 
u_ch¨
 *
p
;

714 
size_t
 
Àn
;

715 
ssize_t
 
size
;

716 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

717 
ngx_öt_t
 
øã
, 
sˇÀ
;

718 
ngx_uöt_t
 
i
;

719 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

720 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

722 
vÆue
 = 
cf
->
¨gs
->
ñts
;

724 
˘x
 = 
NULL
;

725 
size
 = 0;

726 
øã
 = 1;

727 
sˇÀ
 = 1;

728 
«me
.
Àn
 = 0;

730 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

732 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

734 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

736 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

738 i‡(
p
 =
NULL
) {

739 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

740 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

741  
NGX_CONF_ERROR
;

744 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

746 
s
.
d©a
 = 
p
 + 1;

747 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

749 
size
 = 
	`ngx_∑r£_size
(&
s
);

751 i‡(
size
 =
NGX_ERROR
) {

752 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

753 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

754  
NGX_CONF_ERROR
;

757 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

758 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

759 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

760  
NGX_CONF_ERROR
;

766 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rate=", 5) == 0) {

768 
Àn
 = 
vÆue
[
i
].len;

769 
p
 = 
vÆue
[
i
].
d©a
 + 
Àn
 - 3;

771 i‡(
	`ngx_°∫cmp
(
p
, "r/s", 3) == 0) {

772 
sˇÀ
 = 1;

773 
Àn
 -= 3;

775 } i‡(
	`ngx_°∫cmp
(
p
, "r/m", 3) == 0) {

776 
sˇÀ
 = 60;

777 
Àn
 -= 3;

780 
øã
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 5, 
Àn
 - 5);

781 i‡(
øã
 <
NGX_ERROR
) {

782 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

783 "övÆidÑ©ê\"%V\"", &
vÆue
[
i
]);

784  
NGX_CONF_ERROR
;

790 i‡(
vÆue
[
i
].
d©a
[0] == '$') {

792 
vÆue
[
i
].
Àn
--;

793 
vÆue
[
i
].
d©a
++;

795 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_˘x_t
));

796 i‡(
˘x
 =
NULL
) {

797  
NGX_CONF_ERROR
;

800 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[
i
]);

801 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

802  
NGX_CONF_ERROR
;

805 
˘x
->
v¨
 = 
vÆue
[
i
];

810 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

811 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

812  
NGX_CONF_ERROR
;

815 i‡(
«me
.
Àn
 == 0) {

816 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

818 &
cmd
->
«me
);

819  
NGX_CONF_ERROR
;

822 i‡(
˘x
 =
NULL
) {

823 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

825 &
cmd
->
«me
, &name);

826  
NGX_CONF_ERROR
;

829 
˘x
->
øã
 =Ñ©ê* 1000 / 
sˇÀ
;

831 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

832 &
ngx_hâp_limô_ªq_moduÀ
);

833 i‡(
shm_z⁄e
 =
NULL
) {

834  
NGX_CONF_ERROR
;

837 i‡(
shm_z⁄e
->
d©a
) {

838 
˘x
 = 
shm_z⁄e
->
d©a
;

840 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

842 &
cmd
->
«me
, &«me, &
˘x
->
v¨
);

843  
NGX_CONF_ERROR
;

846 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_ªq_öô_z⁄e
;

847 
shm_z⁄e
->
d©a
 = 
˘x
;

849  
NGX_CONF_OK
;

850 
	}
}

854 
	$ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

856 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
 = 
c⁄f
;

858 
ngx_öt_t
 
bur°
;

859 
ngx_°r_t
 *
vÆue
, 
s
;

860 
ngx_uöt_t
 
i
, 
nodñay
;

861 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

862 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

864 
vÆue
 = 
cf
->
¨gs
->
ñts
;

866 
shm_z⁄e
 = 
NULL
;

867 
bur°
 = 0;

868 
nodñay
 = 0;

870 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

872 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

874 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

875 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

877 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
s
, 0,

878 &
ngx_hâp_limô_ªq_moduÀ
);

879 i‡(
shm_z⁄e
 =
NULL
) {

880  
NGX_CONF_ERROR
;

886 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "burst=", 6) == 0) {

888 
bur°
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 6, vÆue[i].
Àn
 - 6);

889 i‡(
bur°
 <= 0) {

890 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

891 "övÆid bur°Ñ©ê\"%V\"", &
vÆue
[
i
]);

892  
NGX_CONF_ERROR
;

898 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "nodelay", 7) == 0) {

899 
nodñay
 = 1;

903 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

904 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

905  
NGX_CONF_ERROR
;

908 i‡(
shm_z⁄e
 =
NULL
) {

909 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

911 &
cmd
->
«me
);

912  
NGX_CONF_ERROR
;

915 i‡(
shm_z⁄e
->
d©a
 =
NULL
) {

916 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

918 &
shm_z⁄e
->
shm
.
«me
);

919  
NGX_CONF_ERROR
;

922 
limôs
 = 
Ãcf
->limôs.
ñts
;

924 i‡(
limôs
 =
NULL
) {

925 i‡(
	`ngx_¨øy_öô
(&
Ãcf
->
limôs
, 
cf
->
poﬁ
, 1,

926 (
ngx_hâp_limô_ªq_limô_t
))

927 !
NGX_OK
)

929  
NGX_CONF_ERROR
;

933 
i
 = 0; i < 
Ãcf
->
limôs
.
√…s
; i++) {

934 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

939 
limô
 = 
	`ngx_¨øy_push
(&
Ãcf
->
limôs
);

940 i‡(
limô
 =
NULL
) {

941  
NGX_CONF_ERROR
;

944 
limô
->
shm_z⁄e
 = shm_zone;

945 
limô
->
bur°
 = burst * 1000;

946 
limô
->
nodñay
 =Çodelay;

948  
NGX_CONF_OK
;

949 
	}
}

952 
ngx_öt_t


953 
	$ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
)

955 
ngx_hâp_h™dÀr_±
 *
h
;

956 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

958 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

960 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

961 i‡(
h
 =
NULL
) {

962  
NGX_ERROR
;

965 *
h
 = 
ngx_hâp_limô_ªq_h™dÀr
;

967  
NGX_OK
;

968 
	}
}

	@src/http/modules/ngx_http_log_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 #i‡(
NGX_ZLIB
)

13 
	~<zlib.h
>

17 
ngx_hâp_log_›_s
 
	tngx_hâp_log_›_t
;

19 
	gu_ch¨
 *(*
	tngx_hâp_log_›_run_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
, 
	tu_ch¨
 *
	tbuf
,

20 
	tngx_hâp_log_›_t
 *
	t›
);

22 
	$size_t
 (*
	tngx_hâp_log_›_gëÀn_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tuöçå_t
 
	td©a
);

26 
	sngx_hâp_log_›_s
 {

27 
size_t
 
Àn
;

28 
ngx_hâp_log_›_gëÀn_±
 
gëÀn
;

29 
ngx_hâp_log_›_run_±
 
run
;

30 
uöçå_t
 
d©a
;

35 
ngx_°r_t
 
«me
;

36 
ngx_¨øy_t
 *
Êushes
;

37 
ngx_¨øy_t
 *
›s
;

38 } 
	tngx_hâp_log_fmt_t
;

42 
ngx_¨øy_t
 
f‹m©s
;

43 
ngx_uöt_t
 
comböed_u£d
;

44 } 
	tngx_hâp_log_maö_c⁄f_t
;

48 
u_ch¨
 *
°¨t
;

49 
u_ch¨
 *
pos
;

50 
u_ch¨
 *
œ°
;

52 
ngx_evít_t
 *
evít
;

53 
ngx_m£c_t
 
Êush
;

54 
ngx_öt_t
 
gzù
;

55 } 
	tngx_hâp_log_buf_t
;

59 
ngx_¨øy_t
 *
Àngths
;

60 
ngx_¨øy_t
 *
vÆues
;

61 } 
	tngx_hâp_log_s¸ùt_t
;

65 
ngx_›í_fûe_t
 *
fûe
;

66 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
;

67 
time_t
 
disk_fuŒ_time
;

68 
time_t
 
îr‹_log_time
;

69 
ngx_hâp_log_fmt_t
 *
f‹m©
;

70 } 
	tngx_hâp_log_t
;

74 
ngx_¨øy_t
 *
logs
;

76 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

77 
time_t
 
›í_fûe_ˇche_vÆid
;

78 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

80 
ngx_uöt_t
 
off
;

81 } 
	tngx_hâp_log_loc_c⁄f_t
;

85 
ngx_°r_t
 
«me
;

86 
size_t
 
Àn
;

87 
ngx_hâp_log_›_run_±
 
run
;

88 } 
	tngx_hâp_log_v¨_t
;

91 
	`ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
,

92 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

93 
ssize_t
 
	`ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
);

96 #i‡(
NGX_ZLIB
)

97 
ssize_t
 
	`ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
,

98 
ngx_öt_t
 
Àvñ
, 
ngx_log_t
 *
log
);

100 *
	`ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

101 
	`ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
);

104 
	`ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
);

105 
	`ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
);

107 
u_ch¨
 *
	`ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

108 
ngx_hâp_log_›_t
 *
›
);

109 
u_ch¨
 *
	`ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

110 
ngx_hâp_log_›_t
 *
›
);

111 
u_ch¨
 *
	`ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

112 
ngx_hâp_log_›_t
 *
›
);

113 
u_ch¨
 *
	`ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

114 
ngx_hâp_log_›_t
 *
›
);

115 
u_ch¨
 *
	`ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

116 
ngx_hâp_log_›_t
 *
›
);

117 
u_ch¨
 *
	`ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

118 
ngx_hâp_log_›_t
 *
›
);

119 
u_ch¨
 *
	`ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

120 
ngx_hâp_log_›_t
 *
›
);

121 
u_ch¨
 *
	`ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

122 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
);

123 
u_ch¨
 *
	`ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

124 
ngx_hâp_log_›_t
 *
›
);

126 
ngx_öt_t
 
	`ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
,

127 
ngx_hâp_log_›_t
 *
›
, 
ngx_°r_t
 *
vÆue
);

128 
size_t
 
	`ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

129 
uöçå_t
 
d©a
);

130 
u_ch¨
 *
	`ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

131 
ngx_hâp_log_›_t
 *
›
);

132 
uöçå_t
 
	`ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

135 *
	`ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

136 *
	`ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

137 *
	`ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

138 *
chûd
);

139 *
	`ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

140 *
c⁄f
);

141 *
	`ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

142 *
c⁄f
);

143 *
	`ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
,

144 
ngx_¨øy_t
 *
Êushes
,Çgx_¨øy_à*
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
);

145 *
	`ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

146 *
c⁄f
);

147 
ngx_öt_t
 
	`ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
);

150 
ngx_comm™d_t
 
ngx_hâp_log_comm™ds
[] = {

152 { 
	`ngx_°rög
("log_format"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

154 
ngx_hâp_log_£t_f‹m©
,

155 
NGX_HTTP_MAIN_CONF_OFFSET
,

157 
NULL
 },

159 { 
	`ngx_°rög
("access_log"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


161 |
NGX_HTTP_LMT_CONF
|
NGX_CONF_1MORE
,

162 
ngx_hâp_log_£t_log
,

163 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
NULL
 },

167 { 
	`ngx_°rög
("open_log_file_cache"),

168 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

169 
ngx_hâp_log_›í_fûe_ˇche
,

170 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
NULL
 },

174 
ngx_nuŒ_comm™d


175 
	}
};

178 
ngx_hâp_moduÀ_t
 
	gngx_hâp_log_moduÀ_˘x
 = {

179 
NULL
,

180 
ngx_hâp_log_öô
,

182 
ngx_hâp_log_¸óã_maö_c⁄f
,

183 
NULL
,

185 
NULL
,

186 
NULL
,

188 
ngx_hâp_log_¸óã_loc_c⁄f
,

189 
ngx_hâp_log_mîge_loc_c⁄f


193 
ngx_moduÀ_t
 
	gngx_hâp_log_moduÀ
 = {

194 
NGX_MODULE_V1
,

195 &
ngx_hâp_log_moduÀ_˘x
,

196 
ngx_hâp_log_comm™ds
,

197 
NGX_HTTP_MODULE
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NGX_MODULE_V1_PADDING


209 
ngx_°r_t
 
	gngx_hâp_ac˚ss_log
 = 
ngx_°rög
(
NGX_HTTP_LOG_PATH
);

212 
ngx_°r_t
 
	gngx_hâp_comböed_fmt
 =

213 
ngx_°rög
("$remote_addr - $remote_user [$time_local] "

218 
ngx_hâp_log_v¨_t
 
	gngx_hâp_log_v¨s
[] = {

219 { 
ngx_°rög
("pùe"), 1, 
ngx_hâp_log_pùe
 },

220 { 
ngx_°rög
("time_local"), ("28/Sep/1970:12:00:00 +0600") - 1,

221 
ngx_hâp_log_time
 },

222 { 
ngx_°rög
("time_iso8601"), ("1970-09-28T12:00:00+06:00") - 1,

223 
ngx_hâp_log_iso8601
 },

224 { 
ngx_°rög
("m£c"), 
NGX_TIME_T_LEN
 + 4, 
ngx_hâp_log_m£c
 },

225 { 
ngx_°rög
("ªque°_time"), 
NGX_TIME_T_LEN
 + 4,

226 
ngx_hâp_log_ªque°_time
 },

227 { 
ngx_°rög
("°©us"), 
NGX_INT_T_LEN
, 
ngx_hâp_log_°©us
 },

228 { 
ngx_°rög
("byãs_£¡"), 
NGX_OFF_T_LEN
, 
ngx_hâp_log_byãs_£¡
 },

229 { 
ngx_°rög
("body_byãs_£¡"), 
NGX_OFF_T_LEN
,

230 
ngx_hâp_log_body_byãs_£¡
 },

231 { 
ngx_°rög
("ªque°_Àngth"), 
NGX_SIZE_T_LEN
,

232 
ngx_hâp_log_ªque°_Àngth
 },

234 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

238 
ngx_öt_t


239 
	$ngx_hâp_log_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

241 
u_ch¨
 *
löe
, *
p
;

242 
size_t
 
Àn
;

243 
ngx_uöt_t
 
i
, 
l
;

244 
ngx_hâp_log_t
 *
log
;

245 
ngx_hâp_log_›_t
 *
›
;

246 
ngx_hâp_log_buf_t
 *
buf„r
;

247 
ngx_hâp_log_loc_c⁄f_t
 *
lcf
;

249 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

252 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

254 i‡(
lcf
->
off
) {

255  
NGX_OK
;

258 
log
 = 
lcf
->
logs
->
ñts
;

259 
l
 = 0;Ü < 
lcf
->
logs
->
√…s
;Ü++) {

261 i‡(
	`ngx_time
(Ë=
log
[
l
].
disk_fuŒ_time
) {

272 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
log
[
l
].
f‹m©
->
Êushes
);

274 
Àn
 = 0;

275 
›
 = 
log
[
l
].
f‹m©
->
›s
->
ñts
;

276 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

277 i‡(
›
[
i
].
Àn
 == 0) {

278 
Àn
 +
›
[
i
].
	`gëÀn
(
r
, op[i].
d©a
);

281 
Àn
 +
›
[
i
].len;

285 
Àn
 +
NGX_LINEFEED_SIZE
;

287 
buf„r
 = 
log
[
l
].
fûe
 ?Üog[l].fûe->
d©a
 : 
NULL
;

289 i‡(
buf„r
) {

291 i‡(
Àn
 > (
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

293 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
buf„r
->
°¨t
,

294 
buf„r
->
pos
 - buf„r->
°¨t
);

296 
buf„r
->
pos
 = buf„r->
°¨t
;

299 i‡(
Àn
 <(
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

301 
p
 = 
buf„r
->
pos
;

303 i‡(
buf„r
->
evít
 && 
p
 =buf„r->
°¨t
) {

304 
	`ngx_add_timî
(
buf„r
->
evít
, buf„r->
Êush
);

307 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

308 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

311 
	`ngx_löe„ed
(
p
);

313 
buf„r
->
pos
 = 
p
;

318 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

319 
	`ngx_dñ_timî
(
buf„r
->
evít
);

323 
löe
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

324 i‡(
löe
 =
NULL
) {

325  
NGX_ERROR
;

328 
p
 = 
löe
;

330 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

331 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

334 
	`ngx_löe„ed
(
p
);

336 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
löe
, 
p
 -Üine);

339  
NGX_OK
;

340 
	}
}

344 
	$ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
, 
u_ch¨
 *
buf
,

345 
size_t
 
Àn
)

347 
u_ch¨
 *
«me
;

348 
time_t
 
now
;

349 
ssize_t
 
n
;

350 
ngx_îr_t
 
îr
;

351 #i‡(
NGX_ZLIB
)

352 
ngx_hâp_log_buf_t
 *
buf„r
;

355 i‡(
log
->
s¸ùt
 =
NULL
) {

356 
«me
 = 
log
->
fûe
->«me.
d©a
;

358 #i‡(
NGX_ZLIB
)

359 
buf„r
 = 
log
->
fûe
->
d©a
;

361 i‡(
buf„r
 && buf„r->
gzù
) {

362 
n
 = 
	`ngx_hâp_log_gzù
(
log
->
fûe
->
fd
, 
buf
, 
Àn
, 
buf„r
->
gzù
,

363 
r
->
c⁄√˘i⁄
->
log
);

365 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

368 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

372 
«me
 = 
NULL
;

373 
n
 = 
	`ngx_hâp_log_s¸ùt_wrôe
(
r
, 
log
->
s¸ùt
, &
«me
, 
buf
, 
Àn
);

376 i‡(
n
 =(
ssize_t
Ë
Àn
) {

380 
now
 = 
	`ngx_time
();

382 i‡(
n
 == -1) {

383 
îr
 = 
ngx_î∫o
;

385 i‡(
îr
 =
NGX_ENOSPC
) {

386 
log
->
disk_fuŒ_time
 = 
now
;

389 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

390 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

391 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

393 
log
->
îr‹_log_time
 = 
now
;

399 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

400 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

401 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

402 
«me
, 
n
, 
Àn
);

404 
log
->
îr‹_log_time
 = 
now
;

406 
	}
}

409 
ssize_t


410 
	$ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
,

411 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
)

413 
size_t
 
roŸ
;

414 
ssize_t
 
n
;

415 
ngx_°r_t
 
log
, 
∑th
;

416 
ngx_›í_fûe_öfo_t
 
of
;

417 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
;

418 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

420 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

422 i‡(!
r
->
roŸ_ã°ed
) {

426 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

428  
Àn
;

431 
∑th
.
d©a
[
roŸ
] = '\0';

433 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

435 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

436 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

437 
of
.
ã°_dú
 = 1;

438 
of
.
ã°_⁄ly
 = 1;

439 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

440 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

442 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

444  
Àn
;

447 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

448 !
NGX_OK
)

450 i‡(
of
.
îr
 == 0) {

452  
Àn
;

455 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

456 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

459  
Àn
;

462 i‡(!
of
.
is_dú
) {

463 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ENOTDIR
,

464 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

467  
Àn
;

471 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
log
, 
s¸ùt
->
Àngths
->
ñts
, 1,

472 
s¸ùt
->
vÆues
->
ñts
)

473 =
NULL
)

476  
Àn
;

479 
log
.
d©a
[log.
Àn
 - 1] = '\0';

480 *
«me
 = 
log
.
d©a
;

482 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

483 "hâ∞log \"%s\"", 
log
.
d©a
);

485 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

487 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

489 
of
.
log
 = 1;

490 
of
.
vÆid
 = 
Œcf
->
›í_fûe_ˇche_vÆid
;

491 
of
.
mö_u£s
 = 
Œcf
->
›í_fûe_ˇche_mö_u£s
;

492 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

494 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
log
, &
of
Ë!
NGX_OK
) {

496  
Àn
;

499 i‡(
	`ngx_›í_ˇched_fûe
(
Œcf
->
›í_fûe_ˇche
, &
log
, &
of
, 
r
->
poﬁ
)

500 !
NGX_OK
)

502 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

503 "%†\"%s\" faûed", 
of
.
Áûed
, 
log
.
d©a
);

505  
Àn
;

508 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

509 "hâ∞log #%d", 
of
.
fd
);

511 
n
 = 
	`ngx_wrôe_fd
(
of
.
fd
, 
buf
, 
Àn
);

513  
n
;

514 
	}
}

517 #i‡(
NGX_ZLIB
)

519 
ssize_t


520 
	$ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
, 
ngx_öt_t
 
Àvñ
,

521 
ngx_log_t
 *
log
)

523 
rc
, 
wbôs
, 
memÀvñ
;

524 
u_ch¨
 *
out
;

525 
size_t
 
size
;

526 
ssize_t
 
n
;

527 
z_°ªam
 
z°ªam
;

528 
ngx_îr_t
 
îr
;

529 
ngx_poﬁ_t
 *
poﬁ
;

531 
wbôs
 = 
MAX_WBITS
;

532 
memÀvñ
 = 
MAX_MEM_LEVEL
 - 1;

534 (
ssize_t
Ë
Àn
 < ((1 << (
wbôs
 - 1)) - 262)) {

535 
wbôs
--;

536 
memÀvñ
--;

544 
size
 = 
Àn
 + ((len + 7) >> 3) + ((len + 63) >> 6) + 5 + 18;

546 
	`ngx_memzîo
(&
z°ªam
, (
z_°ªam
));

548 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(256, 
log
);

549 i‡(
poﬁ
 =
NULL
) {

551  
Àn
;

554 
poﬁ
->
log
 =Üog;

556 
z°ªam
.
zÆloc
 = 
ngx_hâp_log_gzù_Æloc
;

557 
z°ªam
.
z‰ì
 = 
ngx_hâp_log_gzù_‰ì
;

558 
z°ªam
.
›aque
 = 
poﬁ
;

560 
out
 = 
	`ngx_≤Æloc
(
poﬁ
, 
size
);

561 i‡(
out
 =
NULL
) {

562 
d⁄e
;

565 
z°ªam
.
√xt_ö
 = 
buf
;

566 
z°ªam
.
avaû_ö
 = 
Àn
;

567 
z°ªam
.
√xt_out
 = 
out
;

568 
z°ªam
.
avaû_out
 = 
size
;

570 
rc
 = 
	`deÊ©eInô2
(&
z°ªam
, (Ë
Àvñ
, 
Z_DEFLATED
, 
wbôs
 + 16, 
memÀvñ
,

571 
Z_DEFAULT_STRATEGY
);

573 i‡(
rc
 !
Z_OK
) {

574 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eInô2(ËÁûed: %d", 
rc
);

575 
d⁄e
;

578 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

580 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

581 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
);

583 
rc
 = 
	`deÊ©e
(&
z°ªam
, 
Z_FINISH
);

585 i‡(
rc
 !
Z_STREAM_END
) {

586 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

587 "deÊ©e(Z_FINISHËÁûed: %d", 
rc
);

588 
d⁄e
;

591 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

593 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

594 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
,

595 
rc
);

597 
size
 -
z°ªam
.
avaû_out
;

599 
rc
 = 
	`deÊ©eEnd
(&
z°ªam
);

601 i‡(
rc
 !
Z_OK
) {

602 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eEnd(ËÁûed: %d", 
rc
);

603 
d⁄e
;

606 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
out
, 
size
);

608 i‡(
n
 !(
ssize_t
Ë
size
) {

609 
îr
 = (
n
 =-1Ë? 
ngx_î∫o
 : 0;

611 
	`ngx_de°roy_poﬁ
(
poﬁ
);

613 
	`ngx_£t_î∫o
(
îr
);

617 
d⁄e
:

619 
	`ngx_de°roy_poﬁ
(
poﬁ
);

622  
Àn
;

623 
	}
}

627 
	$ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

629 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

631 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

632 "gzùáŒoc:Ç:%ud s:%ud", 
ôems
, 
size
);

634  
	`ngx_∑Œoc
(
poﬁ
, 
ôems
 * 
size
);

635 
	}
}

639 
	$ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
)

642 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

644 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0, "gzù fªe: %p", 
addªss
);

646 
	}
}

652 
	$ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
)

654 
size_t
 
Àn
;

655 
ssize_t
 
n
;

656 
ngx_hâp_log_buf_t
 *
buf„r
;

658 
buf„r
 = 
fûe
->
d©a
;

660 
Àn
 = 
buf„r
->
pos
 - buf„r->
°¨t
;

662 i‡(
Àn
 == 0) {

666 #i‡(
NGX_ZLIB
)

667 i‡(
buf„r
->
gzù
) {

668 
n
 = 
	`ngx_hâp_log_gzù
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
, buf„r->
gzù
, 
log
);

670 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

673 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

676 i‡(
n
 == -1) {

677 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

678 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

679 
fûe
->
«me
.
d©a
);

681 } i‡((
size_t
Ë
n
 !
Àn
) {

682 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

683 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

684 
fûe
->
«me
.
d©a
, 
n
, 
Àn
);

687 
buf„r
->
pos
 = buf„r->
°¨t
;

689 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

690 
	`ngx_dñ_timî
(
buf„r
->
evít
);

692 
	}
}

696 
	$ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
)

698 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

701 
	`ngx_hâp_log_Êush
(
ev
->
d©a
,Év->
log
);

702 
	}
}

705 
u_ch¨
 *

706 
	$ngx_hâp_log_c›y_sh‹t
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

707 
ngx_hâp_log_›_t
 *
›
)

709 
size_t
 
Àn
;

710 
uöçå_t
 
d©a
;

712 
Àn
 = 
›
->len;

713 
d©a
 = 
›
->data;

715 
Àn
--) {

716 *
buf
++ = (
u_ch¨
Ë(
d©a
 & 0xff);

717 
d©a
 >>= 8;

720  
buf
;

721 
	}
}

724 
u_ch¨
 *

725 
	$ngx_hâp_log_c›y_l⁄g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

726 
ngx_hâp_log_›_t
 *
›
)

728  
	`ngx_˝ymem
(
buf
, (
u_ch¨
 *Ë
›
->
d©a
, op->
Àn
);

729 
	}
}

732 
u_ch¨
 *

733 
	$ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

735 i‡(
r
->
pùñöe
) {

736 *
buf
 = 'p';

738 *
buf
 = '.';

741  
buf
 + 1;

742 
	}
}

745 
u_ch¨
 *

746 
	$ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

748  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_time
.
d©a
,

749 
ngx_ˇched_hâp_log_time
.
Àn
);

750 
	}
}

752 
u_ch¨
 *

753 
	$ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

755  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

756 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

757 
	}
}

759 
u_ch¨
 *

760 
	$ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

762 
ngx_time_t
 *
ç
;

764 
ç
 = 
	`ngx_timeofday
();

766  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
);

767 
	}
}

770 
u_ch¨
 *

771 
	$ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

772 
ngx_hâp_log_›_t
 *
›
)

774 
ngx_time_t
 *
ç
;

775 
ngx_m£c_öt_t
 
ms
;

777 
ç
 = 
	`ngx_timeofday
();

779 
ms
 = (
ngx_m£c_öt_t
)

780 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

781 
ms
 = 
	`ngx_max
(ms, 0);

783  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ms
 / 1000, ms % 1000);

784 
	}
}

787 
u_ch¨
 *

788 
	$ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

790 
ngx_uöt_t
 
°©us
;

792 i‡(
r
->
îr_°©us
) {

793 
°©us
 = 
r
->
îr_°©us
;

795 } i‡(
r
->
hódîs_out
.
°©us
) {

796 
°©us
 = 
r
->
hódîs_out
.status;

798 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

799 
°©us
 = 9;

802 
°©us
 = 0;

805  
	`ngx_•rötf
(
buf
, "%03ui", 
°©us
);

806 
	}
}

809 
u_ch¨
 *

810 
	$ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

811 
ngx_hâp_log_›_t
 *
›
)

813  
	`ngx_•rötf
(
buf
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
);

814 
	}
}

822 
u_ch¨
 *

823 
	$ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

824 
ngx_hâp_log_›_t
 *
›
)

826 
off_t
 
Àngth
;

828 
Àngth
 = 
r
->
c⁄√˘i⁄
->
£¡
 -Ñ->
hódî_size
;

830 i‡(
Àngth
 > 0) {

831  
	`ngx_•rötf
(
buf
, "%O", 
Àngth
);

834 *
buf
 = '0';

836  
buf
 + 1;

837 
	}
}

840 
u_ch¨
 *

841 
	$ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

842 
ngx_hâp_log_›_t
 *
›
)

844  
	`ngx_•rötf
(
buf
, "%O", 
r
->
ªque°_Àngth
);

845 
	}
}

848 
ngx_öt_t


849 
	$ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_log_›_t
 *
›
,

850 
ngx_°r_t
 *
vÆue
)

852 
ngx_öt_t
 
ödex
;

854 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

855 i‡(
ödex
 =
NGX_ERROR
) {

856  
NGX_ERROR
;

859 
›
->
Àn
 = 0;

860 
›
->
gëÀn
 = 
ngx_hâp_log_v¨übÀ_gëÀn
;

861 
›
->
run
 = 
ngx_hâp_log_v¨übÀ
;

862 
›
->
d©a
 = 
ödex
;

864  
NGX_OK
;

865 
	}
}

868 
size_t


869 
	$ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

871 
uöçå_t
 
Àn
;

872 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

874 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

876 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

880 
Àn
 = 
	`ngx_hâp_log_esˇ≥
(
NULL
, 
vÆue
->
d©a
, value->len);

882 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

884  
vÆue
->
Àn
 +Üen * 3;

885 
	}
}

888 
u_ch¨
 *

889 
	$ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

891 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

893 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

895 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

896 *
buf
 = '-';

897  
buf
 + 1;

900 i‡(
vÆue
->
esˇ≥
 == 0) {

901  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

904  (
u_ch¨
 *Ë
	`ngx_hâp_log_esˇ≥
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

906 
	}
}

909 
uöçå_t


910 
	$ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

912 
ngx_uöt_t
 
n
;

913 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

915 
uöt32_t
 
esˇ≥
[] = {

934 i‡(
d°
 =
NULL
) {

938 
n
 = 0;

940 
size
) {

941 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

942 
n
++;

944 
§c
++;

945 
size
--;

948  (
uöçå_t
Ë
n
;

951 
size
) {

952 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

953 *
d°
++ = '\\';

954 *
d°
++ = 'x';

955 *
d°
++ = 
hex
[*
§c
 >> 4];

956 *
d°
++ = 
hex
[*
§c
 & 0xf];

957 
§c
++;

960 *
d°
++ = *
§c
++;

962 
size
--;

965  (
uöçå_t
Ë
d°
;

966 
	}
}

970 
	$ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

972 
ngx_hâp_log_maö_c⁄f_t
 *
c⁄f
;

974 
ngx_hâp_log_fmt_t
 *
fmt
;

976 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_maö_c⁄f_t
));

977 i‡(
c⁄f
 =
NULL
) {

978  
NULL
;

981 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
f‹m©s
, 
cf
->
poﬁ
, 4, (
ngx_hâp_log_fmt_t
))

982 !
NGX_OK
)

984  
NULL
;

987 
fmt
 = 
	`ngx_¨øy_push
(&
c⁄f
->
f‹m©s
);

988 i‡(
fmt
 =
NULL
) {

989  
NULL
;

992 
	`ngx_°r_£t
(&
fmt
->
«me
, "combined");

994 
fmt
->
Êushes
 = 
NULL
;

996 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

997 i‡(
fmt
->
›s
 =
NULL
) {

998  
NULL
;

1001  
c⁄f
;

1002 
	}
}

1006 
	$ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1008 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
;

1010 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_loc_c⁄f_t
));

1011 i‡(
c⁄f
 =
NULL
) {

1012  
NULL
;

1015 
c⁄f
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1017  
c⁄f
;

1018 
	}
}

1022 
	$ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1024 
ngx_hâp_log_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1025 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1027 
ngx_hâp_log_t
 *
log
;

1028 
ngx_hâp_log_fmt_t
 *
fmt
;

1029 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1031 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1033 
c⁄f
->
›í_fûe_ˇche
 = 
¥ev
->open_file_cache;

1034 
c⁄f
->
›í_fûe_ˇche_vÆid
 = 
¥ev
->open_file_cache_valid;

1035 
c⁄f
->
›í_fûe_ˇche_mö_u£s
 = 
¥ev
->open_file_cache_min_uses;

1037 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1038 
c⁄f
->
›í_fûe_ˇche
 = 
NULL
;

1042 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1043  
NGX_CONF_OK
;

1046 
c⁄f
->
logs
 = 
¥ev
->logs;

1047 
c⁄f
->
off
 = 
¥ev
->off;

1049 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1050  
NGX_CONF_OK
;

1053 
c⁄f
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1054 i‡(
c⁄f
->
logs
 =
NULL
) {

1055  
NGX_CONF_ERROR
;

1058 
log
 = 
	`ngx_¨øy_push
(
c⁄f
->
logs
);

1059 i‡(
log
 =
NULL
) {

1060  
NGX_CONF_ERROR
;

1063 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
ngx_hâp_ac˚ss_log
);

1064 i‡(
log
->
fûe
 =
NULL
) {

1065  
NGX_CONF_ERROR
;

1068 
log
->
s¸ùt
 = 
NULL
;

1069 
log
->
disk_fuŒ_time
 = 0;

1070 
log
->
îr‹_log_time
 = 0;

1072 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1073 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1076 
log
->
f‹m©
 = &
fmt
[0];

1077 
lmcf
->
comböed_u£d
 = 1;

1079  
NGX_CONF_OK
;

1080 
	}
}

1084 
	$ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1086 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1088 
ssize_t
 
size
;

1089 
ngx_öt_t
 
gzù
;

1090 
ngx_uöt_t
 
i
, 
n
;

1091 
ngx_m£c_t
 
Êush
;

1092 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

1093 
ngx_hâp_log_t
 *
log
;

1094 
ngx_hâp_log_buf_t
 *
buf„r
;

1095 
ngx_hâp_log_fmt_t
 *
fmt
;

1096 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1097 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1099 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1101 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1102 
Œcf
->
off
 = 1;

1103 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1104  
NGX_CONF_OK
;

1107 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1108 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

1109  
NGX_CONF_ERROR
;

1112 i‡(
Œcf
->
logs
 =
NULL
) {

1113 
Œcf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1114 i‡(
Œcf
->
logs
 =
NULL
) {

1115  
NGX_CONF_ERROR
;

1119 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1121 
log
 = 
	`ngx_¨øy_push
(
Œcf
->
logs
);

1122 i‡(
log
 =
NULL
) {

1123  
NGX_CONF_ERROR
;

1126 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

1128 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1130 i‡(
n
 == 0) {

1131 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

1132 i‡(
log
->
fûe
 =
NULL
) {

1133  
NGX_CONF_ERROR
;

1137 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

1138  
NGX_CONF_ERROR
;

1141 
log
->
s¸ùt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_s¸ùt_t
));

1142 i‡(
log
->
s¸ùt
 =
NULL
) {

1143  
NGX_CONF_ERROR
;

1146 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1148 
sc
.
cf
 = cf;

1149 
sc
.
sour˚
 = &
vÆue
[1];

1150 
sc
.
Àngths
 = &
log
->
s¸ùt
->lengths;

1151 
sc
.
vÆues
 = &
log
->
s¸ùt
->values;

1152 
sc
.
v¨übÀs
 = 
n
;

1153 
sc
.
com∂ëe_Àngths
 = 1;

1154 
sc
.
com∂ëe_vÆues
 = 1;

1156 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1157  
NGX_CONF_ERROR
;

1161 i‡(
cf
->
¨gs
->
√…s
 >= 3) {

1162 
«me
 = 
vÆue
[2];

1164 i‡(
	`ngx_°rcmp
(
«me
.
d©a
, "combined") == 0) {

1165 
lmcf
->
comböed_u£d
 = 1;

1169 
	`ngx_°r_£t
(&
«me
, "combined");

1170 
lmcf
->
comböed_u£d
 = 1;

1173 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1174 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1175 i‡(
fmt
[
i
].
«me
.
Àn
 ==Çame.len

1176 && 
	`ngx_°rˇ£cmp
(
fmt
[
i
].
«me
.
d©a
,Çame.data) == 0)

1178 
log
->
f‹m©
 = &
fmt
[
i
];

1183 i‡(
log
->
f‹m©
 =
NULL
) {

1184 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1185 "unknow¿log f‹m© \"%V\"", &
«me
);

1186  
NGX_CONF_ERROR
;

1189 
size
 = 0;

1190 
Êush
 = 0;

1191 
gzù
 = 0;

1193 
i
 = 3; i < 
cf
->
¨gs
->
√…s
; i++) {

1195 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "buffer=", 7) == 0) {

1196 
s
.
Àn
 = 
vÆue
[
i
].len - 7;

1197 
s
.
d©a
 = 
vÆue
[
i
].data + 7;

1199 
size
 = 
	`ngx_∑r£_size
(&
s
);

1201 i‡(
size
 =
NGX_ERROR
 || size == 0) {

1202 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1203 "övÆid buf„∏sizê\"%V\"", &
s
);

1204  
NGX_CONF_ERROR
;

1210 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "flush=", 6) == 0) {

1211 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1212 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1214 
Êush
 = 
	`ngx_∑r£_time
(&
s
, 0);

1216 i‡(
Êush
 =(
ngx_m£c_t
Ë
NGX_ERROR
 || flush == 0) {

1217 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1218 "övÆid flushÅimê\"%V\"", &
s
);

1219  
NGX_CONF_ERROR
;

1225 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "gzip", 4) == 0

1226 && (
vÆue
[
i
].
Àn
 =4 || vÆue[i].
d©a
[4] == '='))

1228 #i‡(
NGX_ZLIB
)

1229 i‡(
size
 == 0) {

1230 
size
 = 64 * 1024;

1233 i‡(
vÆue
[
i
].
Àn
 == 4) {

1234 
gzù
 = 
Z_BEST_SPEED
;

1238 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

1239 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

1241 
gzù
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

1243 i‡(
gzù
 < 1 || gzip > 9) {

1244 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1245 "övÆid com¥essi⁄Üevñ \"%V\"", &
s
);

1246  
NGX_CONF_ERROR
;

1252 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1254  
NGX_CONF_ERROR
;

1258 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1259 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1260  
NGX_CONF_ERROR
;

1263 i‡(
Êush
 && 
size
 == 0) {

1264 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1266 &
vÆue
[1]);

1267  
NGX_CONF_ERROR
;

1270 i‡(
size
) {

1272 i‡(
log
->
s¸ùt
) {

1273 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1275  
NGX_CONF_ERROR
;

1278 i‡(
log
->
fûe
->
d©a
) {

1279 
buf„r
 = 
log
->
fûe
->
d©a
;

1281 i‡(
buf„r
->
œ°
 - buf„r->
°¨t
 !
size


1282 || 
buf„r
->
Êush
 != flush

1283 || 
buf„r
->
gzù
 != gzip)

1285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1288 &
vÆue
[1]);

1289  
NGX_CONF_ERROR
;

1292  
NGX_CONF_OK
;

1295 
buf„r
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_buf_t
));

1296 i‡(
buf„r
 =
NULL
) {

1297  
NGX_CONF_ERROR
;

1300 
buf„r
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

1301 i‡(
buf„r
->
°¨t
 =
NULL
) {

1302  
NGX_CONF_ERROR
;

1305 
buf„r
->
pos
 = buf„r->
°¨t
;

1306 
buf„r
->
œ°
 = buf„r->
°¨t
 + 
size
;

1308 i‡(
Êush
) {

1309 
buf„r
->
evít
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

1310 i‡(
buf„r
->
evít
 =
NULL
) {

1311  
NGX_CONF_ERROR
;

1314 
buf„r
->
evít
->
d©a
 = 
log
->
fûe
;

1315 
buf„r
->
evít
->
h™dÀr
 = 
ngx_hâp_log_Êush_h™dÀr
;

1316 
buf„r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

1318 
buf„r
->
Êush
 = flush;

1321 
buf„r
->
gzù
 = gzip;

1323 
log
->
fûe
->
Êush
 = 
ngx_hâp_log_Êush
;

1324 
log
->
fûe
->
d©a
 = 
buf„r
;

1327  
NGX_CONF_OK
;

1328 
	}
}

1332 
	$ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1334 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

1336 
ngx_°r_t
 *
vÆue
;

1337 
ngx_uöt_t
 
i
;

1338 
ngx_hâp_log_fmt_t
 *
fmt
;

1340 i‡(
cf
->
cmd_ty≥
 !
NGX_HTTP_MAIN_CONF
) {

1341 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1346 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1348 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1349 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1350 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len

1351 && 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

1353 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1355 &
vÆue
[1]);

1356  
NGX_CONF_ERROR
;

1360 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

1361 i‡(
fmt
 =
NULL
) {

1362  
NGX_CONF_ERROR
;

1365 
fmt
->
«me
 = 
vÆue
[1];

1367 
fmt
->
Êushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_öt_t
));

1368 i‡(
fmt
->
Êushes
 =
NULL
) {

1369  
NGX_CONF_ERROR
;

1372 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1373 i‡(
fmt
->
›s
 =
NULL
) {

1374  
NGX_CONF_ERROR
;

1377  
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
fmt
->
Êushes
, fmt->
›s
, cf->
¨gs
, 2);

1378 
	}
}

1382 
	$ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
Êushes
,

1383 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
)

1385 
u_ch¨
 *
d©a
, *
p
, 
ch
;

1386 
size_t
 
i
, 
Àn
;

1387 
ngx_°r_t
 *
vÆue
, 
v¨
;

1388 
ngx_öt_t
 *
Êush
;

1389 
ngx_uöt_t
 
bøckë
;

1390 
ngx_hâp_log_›_t
 *
›
;

1391 
ngx_hâp_log_v¨_t
 *
v
;

1393 
vÆue
 = 
¨gs
->
ñts
;

1395  ; 
s
 < 
¨gs
->
√…s
; s++) {

1397 
i
 = 0;

1399 
i
 < 
vÆue
[
s
].
Àn
) {

1401 
›
 = 
	`ngx_¨øy_push
(
›s
);

1402 i‡(
›
 =
NULL
) {

1403  
NGX_CONF_ERROR
;

1406 
d©a
 = &
vÆue
[
s
].d©a[
i
];

1408 i‡(
vÆue
[
s
].
d©a
[
i
] == '$') {

1410 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1411 
övÆid
;

1414 i‡(
vÆue
[
s
].
d©a
[
i
] == '{') {

1415 
bøckë
 = 1;

1417 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1418 
övÆid
;

1421 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1424 
bøckë
 = 0;

1425 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1428 
v¨
.
Àn
 = 0; 
i
 < 
vÆue
[
s
].len; i++, var.len++) {

1429 
ch
 = 
vÆue
[
s
].
d©a
[
i
];

1431 i‡(
ch
 ='}' && 
bøckë
) {

1432 
i
++;

1433 
bøckë
 = 0;

1437 i‡((
ch
 >= 'A' && ch <= 'Z')

1438 || (
ch
 >= 'a' && ch <= 'z')

1439 || (
ch
 >= '0' && ch <= '9')

1440 || 
ch
 == '_')

1448 i‡(
bøckë
) {

1449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1451 "v¨übÀ i†missög", &
v¨
);

1452  
NGX_CONF_ERROR
;

1455 i‡(
v¨
.
Àn
 == 0) {

1456 
övÆid
;

1459 
v
 = 
ngx_hâp_log_v¨s
; v->
«me
.
Àn
; v++) {

1461 i‡(
v
->
«me
.
Àn
 =
v¨
.len

1462 && 
	`ngx_°∫cmp
(
v
->
«me
.
d©a
, 
v¨
.d©a, v¨.
Àn
) == 0)

1464 
›
->
Àn
 = 
v
->len;

1465 
›
->
gëÀn
 = 
NULL
;

1466 
›
->
run
 = 
v
->run;

1467 
›
->
d©a
 = 0;

1469 
found
;

1473 i‡(
	`ngx_hâp_log_v¨übÀ_compûe
(
cf
, 
›
, &
v¨
Ë!
NGX_OK
) {

1474  
NGX_CONF_ERROR
;

1477 i‡(
Êushes
) {

1479 
Êush
 = 
	`ngx_¨øy_push
(
Êushes
);

1480 i‡(
Êush
 =
NULL
) {

1481  
NGX_CONF_ERROR
;

1484 *
Êush
 = 
›
->
d©a
;

1487 
found
:

1492 
i
++;

1494 
i
 < 
vÆue
[
s
].
Àn
 && vÆue[s].
d©a
[i] != '$') {

1495 
i
++;

1498 
Àn
 = &
vÆue
[
s
].
d©a
[
i
] - data;

1500 i‡(
Àn
) {

1502 
›
->
Àn
 =Üen;

1503 
›
->
gëÀn
 = 
NULL
;

1505 i‡(
Àn
 <(
uöçå_t
)) {

1506 
›
->
run
 = 
ngx_hâp_log_c›y_sh‹t
;

1507 
›
->
d©a
 = 0;

1509 
Àn
--) {

1510 
›
->
d©a
 <<= 8;

1511 
›
->
d©a
 |d©a[
Àn
];

1515 
›
->
run
 = 
ngx_hâp_log_c›y_l⁄g
;

1517 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1518 i‡(
p
 =
NULL
) {

1519  
NGX_CONF_ERROR
;

1522 
	`ngx_mem˝y
(
p
, 
d©a
, 
Àn
);

1523 
›
->
d©a
 = (
uöçå_t
Ë
p
;

1529  
NGX_CONF_OK
;

1531 
övÆid
:

1533 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

1535  
NGX_CONF_ERROR
;

1536 
	}
}

1540 
	$ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1542 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1544 
time_t
 
öa˘ive
, 
vÆid
;

1545 
ngx_°r_t
 *
vÆue
, 
s
;

1546 
ngx_öt_t
 
max
, 
mö_u£s
;

1547 
ngx_uöt_t
 
i
;

1549 i‡(
Œcf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

1553 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1555 
max
 = 0;

1556 
öa˘ive
 = 10;

1557 
vÆid
 = 60;

1558 
mö_u£s
 = 1;

1560 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1562 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

1564 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

1565 i‡(
max
 =
NGX_ERROR
) {

1566 
Áûed
;

1572 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1574 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1575 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1577 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1578 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1579 
Áûed
;

1585 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "min_uses=", 9) == 0) {

1587 
mö_u£s
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 9, vÆue[i].
Àn
 - 9);

1588 i‡(
mö_u£s
 =
NGX_ERROR
) {

1589 
Áûed
;

1595 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "valid=", 6) == 0) {

1597 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1598 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1600 
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

1601 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1602 
Áûed
;

1608 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1610 
Œcf
->
›í_fûe_ˇche
 = 
NULL
;

1615 
Áûed
:

1617 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1619 &
vÆue
[
i
]);

1620  
NGX_CONF_ERROR
;

1623 i‡(
Œcf
->
›í_fûe_ˇche
 =
NULL
) {

1624  
NGX_CONF_OK
;

1627 i‡(
max
 == 0) {

1628 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1630  
NGX_CONF_ERROR
;

1633 
Œcf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

1635 i‡(
Œcf
->
›í_fûe_ˇche
) {

1637 
Œcf
->
›í_fûe_ˇche_vÆid
 = 
vÆid
;

1638 
Œcf
->
›í_fûe_ˇche_mö_u£s
 = 
mö_u£s
;

1640  
NGX_CONF_OK
;

1643  
NGX_CONF_ERROR
;

1644 
	}
}

1647 
ngx_öt_t


1648 
	$ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
)

1650 
ngx_°r_t
 *
vÆue
;

1651 
ngx_¨øy_t
 
a
;

1652 
ngx_hâp_h™dÀr_±
 *
h
;

1653 
ngx_hâp_log_fmt_t
 *
fmt
;

1654 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1655 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1657 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1659 i‡(
lmcf
->
comböed_u£d
) {

1660 i‡(
	`ngx_¨øy_öô
(&
a
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

1661  
NGX_ERROR
;

1664 
vÆue
 = 
	`ngx_¨øy_push
(&
a
);

1665 i‡(
vÆue
 =
NULL
) {

1666  
NGX_ERROR
;

1669 *
vÆue
 = 
ngx_hâp_comböed_fmt
;

1670 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1672 i‡(
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
NULL
, 
fmt
->
›s
, &
a
, 0)

1673 !
NGX_CONF_OK
)

1675  
NGX_ERROR
;

1679 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1681 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
);

1682 i‡(
h
 =
NULL
) {

1683  
NGX_ERROR
;

1686 *
h
 = 
ngx_hâp_log_h™dÀr
;

1688  
NGX_OK
;

1689 
	}
}

	@src/http/modules/ngx_http_map_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mhash_max_size
;

15 
ngx_uöt_t
 
	mhash_buckë_size
;

16 } 
	tngx_hâp_m≠_c⁄f_t
;

20 
ngx_hash_keys_¨øys_t
 
	mkeys
;

22 
ngx_¨øy_t
 *
	mvÆues_hash
;

23 
ngx_¨øy_t
 
	mv¨_vÆues
;

24 #i‡(
NGX_PCRE
)

25 
ngx_¨øy_t
 
	mªgexes
;

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

29 
ngx_c⁄f_t
 *
	mcf
;

30 
ngx_uöt_t
 
	mho°«mes
;

31 } 
	tngx_hâp_m≠_c⁄f_˘x_t
;

35 
ngx_hâp_m≠_t
 
	mm≠
;

36 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

38 
ngx_uöt_t
 
	mho°«mes
;

39 } 
	tngx_hâp_m≠_˘x_t
;

42 
ngx_libc_cde˛
 
ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

43 c⁄° *
two
);

44 *
ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

46 *
ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

49 
ngx_comm™d_t
 
	gngx_hâp_m≠_comm™ds
[] = {

51 { 
ngx_°rög
("map"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

53 
ngx_hâp_m≠_block
,

54 
NGX_HTTP_MAIN_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("map_hash_max_size"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

61 
NGX_HTTP_MAIN_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_max_size
),

63 
NULL
 },

65 { 
ngx_°rög
("map_hash_bucket_size"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

68 
NGX_HTTP_MAIN_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_buckë_size
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_m≠_moduÀ_˘x
 = {

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_m≠_¸óã_c⁄f
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL


91 
ngx_moduÀ_t
 
	gngx_hâp_m≠_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_m≠_moduÀ_˘x
,

94 
ngx_hâp_m≠_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_m≠_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

109 
uöçå_t
 
d©a
)

111 
ngx_hâp_m≠_˘x_t
 *
m≠
 = (ngx_hâp_m≠_˘x_à*Ë
d©a
;

113 
ngx_°r_t
 
vÆ
;

114 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

119 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
m≠
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

120  
NGX_ERROR
;

123 i‡(
m≠
->
ho°«mes
 && 
vÆ
.
Àn
 > 0 && vÆ.
d©a
[val.len - 1] == '.') {

124 
vÆ
.
Àn
--;

127 
vÆue
 = 
	`ngx_hâp_m≠_föd
(
r
, &
m≠
->m≠, &
vÆ
);

129 i‡(
vÆue
 =
NULL
) {

130 
vÆue
 = 
m≠
->
deÁu…_vÆue
;

133 i‡(!
vÆue
->
vÆid
) {

134 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, (
ngx_uöt_t
ËvÆue->
d©a
);

136 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

137 
vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

141 *
v
 = *
vÆue
;

143 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

144 "hâ∞m≠: \"%v\" \"%v\"", &
vÆ
, 
v
);

146  
NGX_OK
;

147 
	}
}

151 
	$ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_hâp_m≠_c⁄f_t
 *
mcf
;

155 
mcf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_c⁄f_t
));

156 i‡(
mcf
 =
NULL
) {

157  
NULL
;

160 
mcf
->
hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

161 
mcf
->
hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

163  
mcf
;

164 
	}
}

168 
	$ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

170 
ngx_hâp_m≠_c⁄f_t
 *
mcf
 = 
c⁄f
;

172 *
rv
;

173 
ngx_°r_t
 *
vÆue
, 
«me
;

174 
ngx_c⁄f_t
 
ßve
;

175 
ngx_poﬁ_t
 *
poﬁ
;

176 
ngx_hash_öô_t
 
hash
;

177 
ngx_hâp_m≠_˘x_t
 *
m≠
;

178 
ngx_hâp_v¨übÀ_t
 *
v¨
;

179 
ngx_hâp_m≠_c⁄f_˘x_t
 
˘x
;

180 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

182 i‡(
mcf
->
hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

183 
mcf
->
hash_max_size
 = 2048;

186 i‡(
mcf
->
hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

187 
mcf
->
hash_buckë_size
 = 
ngx_ˇchñöe_size
;

190 
mcf
->
hash_buckë_size
 = 
	`ngx_Æign
(mcf->hash_bucket_size,

191 
ngx_ˇchñöe_size
);

194 
m≠
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_˘x_t
));

195 i‡(
m≠
 =
NULL
) {

196  
NGX_CONF_ERROR
;

199 
vÆue
 = 
cf
->
¨gs
->
ñts
;

201 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

203 
ccv
.
cf
 = cf;

204 
ccv
.
vÆue
 = &value[1];

205 
ccv
.
com∂ex_vÆue
 = &
m≠
->
vÆue
;

207 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

208  
NGX_CONF_ERROR
;

211 
«me
 = 
vÆue
[2];

213 i‡(
«me
.
d©a
[0] != '$') {

214 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

215 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

216  
NGX_CONF_ERROR
;

219 
«me
.
Àn
--;

220 
«me
.
d©a
++;

222 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

223 i‡(
v¨
 =
NULL
) {

224  
NGX_CONF_ERROR
;

227 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_m≠_v¨übÀ
;

228 
v¨
->
d©a
 = (
uöçå_t
Ë
m≠
;

230 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

231 i‡(
poﬁ
 =
NULL
) {

232  
NGX_CONF_ERROR
;

235 
˘x
.
keys
.
poﬁ
 = 
cf
->pool;

236 
˘x
.
keys
.
ãmp_poﬁ
 = 
poﬁ
;

238 i‡(
	`ngx_hash_keys_¨øy_öô
(&
˘x
.
keys
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

239 
	`ngx_de°roy_poﬁ
(
poﬁ
);

240  
NGX_CONF_ERROR
;

243 
˘x
.
vÆues_hash
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_¨øy_t
Ë* ctx.
keys
.
hsize
);

244 i‡(
˘x
.
vÆues_hash
 =
NULL
) {

245 
	`ngx_de°roy_poﬁ
(
poﬁ
);

246  
NGX_CONF_ERROR
;

249 i‡(
	`ngx_¨øy_öô
(&
˘x
.
v¨_vÆues
, 
cf
->
poﬁ
, 2,

250 (
ngx_hâp_v¨übÀ_vÆue_t
))

251 !
NGX_OK
)

253 
	`ngx_de°roy_poﬁ
(
poﬁ
);

254  
NGX_CONF_ERROR
;

257 #i‡(
NGX_PCRE
)

258 i‡(
	`ngx_¨øy_öô
(&
˘x
.
ªgexes
, 
cf
->
poﬁ
, 2, (
ngx_hâp_m≠_ªgex_t
))

259 !
NGX_OK
)

261 
	`ngx_de°roy_poﬁ
(
poﬁ
);

262  
NGX_CONF_ERROR
;

266 
˘x
.
deÁu…_vÆue
 = 
NULL
;

267 
˘x
.
cf
 = &
ßve
;

268 
˘x
.
ho°«mes
 = 0;

270 
ßve
 = *
cf
;

271 
cf
->
poﬁ
 =Öool;

272 
cf
->
˘x
 = &ctx;

273 
cf
->
h™dÀr
 = 
ngx_hâp_m≠
;

274 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
ßve
;

280 i‡(
rv
 !
NGX_CONF_OK
) {

281 
	`ngx_de°roy_poﬁ
(
poﬁ
);

282  
rv
;

285 
m≠
->
deÁu…_vÆue
 = 
˘x
.default_value ? ctx.default_value:

286 &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

288 
m≠
->
ho°«mes
 = 
˘x
.hostnames;

290 
hash
.
key
 = 
ngx_hash_key_lc
;

291 
hash
.
max_size
 = 
mcf
->
hash_max_size
;

292 
hash
.
buckë_size
 = 
mcf
->
hash_buckë_size
;

293 
hash
.
«me
 = "map_hash";

294 
hash
.
poﬁ
 = 
cf
->pool;

296 i‡(
˘x
.
keys
.keys.
√…s
) {

297 
hash
.hash = &
m≠
->map.hash.hash;

298 
hash
.
ãmp_poﬁ
 = 
NULL
;

300 i‡(
	`ngx_hash_öô
(&
hash
, 
˘x
.
keys
.keys.
ñts
, ctx.keys.keys.
√…s
)

301 !
NGX_OK
)

303 
	`ngx_de°roy_poﬁ
(
poﬁ
);

304  
NGX_CONF_ERROR
;

308 i‡(
˘x
.
keys
.
dns_wc_hód
.
√…s
) {

310 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_hód
.
ñts
,

311 (
size_t
Ë
˘x
.
keys
.
dns_wc_hód
.
√…s
,

312 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

314 
hash
.hash = 
NULL
;

315 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

317 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_hód
.
ñts
,

318 
˘x
.
keys
.
dns_wc_hód
.
√…s
)

319 !
NGX_OK
)

321 
	`ngx_de°roy_poﬁ
(
poﬁ
);

322  
NGX_CONF_ERROR
;

325 
m≠
->m≠.
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

328 i‡(
˘x
.
keys
.
dns_wc_èû
.
√…s
) {

330 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_èû
.
ñts
,

331 (
size_t
Ë
˘x
.
keys
.
dns_wc_èû
.
√…s
,

332 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

334 
hash
.hash = 
NULL
;

335 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

337 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_èû
.
ñts
,

338 
˘x
.
keys
.
dns_wc_èû
.
√…s
)

339 !
NGX_OK
)

341 
	`ngx_de°roy_poﬁ
(
poﬁ
);

342  
NGX_CONF_ERROR
;

345 
m≠
->m≠.
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

348 #i‡(
NGX_PCRE
)

350 i‡(
˘x
.
ªgexes
.
√…s
) {

351 
m≠
->m≠.
ªgex
 = 
˘x
.
ªgexes
.
ñts
;

352 
m≠
->m≠.
ƒegex
 = 
˘x
.
ªgexes
.
√…s
;

357 
	`ngx_de°roy_poﬁ
(
poﬁ
);

359  
rv
;

360 
	}
}

363 
ngx_libc_cde˛


364 
	$ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

366 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

368 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

369 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

371  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

372 
	}
}

376 
	$ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

378 
ngx_öt_t
 
rc
, 
ödex
;

379 
ngx_°r_t
 *
vÆue
, 
«me
;

380 
ngx_uöt_t
 
i
, 
key
;

381 
ngx_hâp_m≠_c⁄f_˘x_t
 *
˘x
;

382 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨
, **
vp
;

384 
˘x
 = 
cf
->ctx;

386 
vÆue
 = 
cf
->
¨gs
->
ñts
;

388 i‡(
cf
->
¨gs
->
√…s
 == 1

389 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "hostnames") == 0)

391 
˘x
->
ho°«mes
 = 1;

392  
NGX_CONF_OK
;

394 } i‡(
cf
->
¨gs
->
√…s
 != 2) {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

397  
NGX_CONF_ERROR
;

400 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

401  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

404 i‡(
vÆue
[1].
d©a
[0] == '$') {

405 
«me
 = 
vÆue
[1];

406 
«me
.
Àn
--;

407 
«me
.
d©a
++;

409 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
˘x
->
cf
, &
«me
);

410 i‡(
ödex
 =
NGX_ERROR
) {

411  
NGX_CONF_ERROR
;

414 
v¨
 = 
˘x
->
v¨_vÆues
.
ñts
;

416 
i
 = 0; i < 
˘x
->
v¨_vÆues
.
√…s
; i++) {

417 i‡(
ödex
 =(
ngx_öt_t
Ë
v¨
[
i
].
d©a
) {

418 
v¨
 = &v¨[
i
];

419 
found
;

423 
v¨
 = 
	`ngx_¨øy_push
(&
˘x
->
v¨_vÆues
);

424 i‡(
v¨
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
v¨
->
vÆid
 = 0;

429 
v¨
->
no_ˇchóbÀ
 = 0;

430 
v¨
->
nŸ_found
 = 0;

431 
v¨
->
Àn
 = 0;

432 
v¨
->
d©a
 = (
u_ch¨
 *Ë
ödex
;

434 
found
;

437 
key
 = 0;

439 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

440 
key
 = 
	`ngx_hash
(key, 
vÆue
[1].
d©a
[
i
]);

443 
key
 %
˘x
->
keys
.
hsize
;

445 
vp
 = 
˘x
->
vÆues_hash
[
key
].
ñts
;

447 i‡(
vp
) {

448 
i
 = 0; i < 
˘x
->
vÆues_hash
[
key
].
√…s
; i++) {

449 i‡(
vÆue
[1].
Àn
 !(
size_t
Ë
vp
[
i
]->len) {

453 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, 
vp
[
i
]->d©a, vÆue[1].
Àn
) == 0) {

454 
v¨
 = 
vp
[
i
];

455 
found
;

460 i‡(
	`ngx_¨øy_öô
(&
˘x
->
vÆues_hash
[
key
], 
cf
->
poﬁ
, 4,

461 (
ngx_hâp_v¨übÀ_vÆue_t
 *))

462 !
NGX_OK
)

464  
NGX_CONF_ERROR
;

468 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

469 i‡(
v¨
 =
NULL
) {

470  
NGX_CONF_ERROR
;

473 
v¨
->
Àn
 = 
vÆue
[1].len;

474 
v¨
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
keys
.
poﬁ
, &
vÆue
[1]);

475 i‡(
v¨
->
d©a
 =
NULL
) {

476  
NGX_CONF_ERROR
;

479 
v¨
->
vÆid
 = 1;

480 
v¨
->
no_ˇchóbÀ
 = 0;

481 
v¨
->
nŸ_found
 = 0;

483 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
vÆues_hash
[
key
]);

484 i‡(
vp
 =
NULL
) {

485  
NGX_CONF_ERROR
;

488 *
vp
 = 
v¨
;

490 
found
:

492 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

494 i‡(
˘x
->
deÁu…_vÆue
) {

495 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

497  
NGX_CONF_ERROR
;

500 
˘x
->
deÁu…_vÆue
 = 
v¨
;

502  
NGX_CONF_OK
;

505 #i‡(
NGX_PCRE
)

507 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '~') {

508 
ngx_ªgex_compûe_t
 
rc
;

509 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

510 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

512 
ªgex
 = 
	`ngx_¨øy_push
(&
˘x
->
ªgexes
);

513 i‡(
ªgex
 =
NULL
) {

514  
NGX_CONF_ERROR
;

517 
vÆue
[0].
Àn
--;

518 
vÆue
[0].
d©a
++;

520 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

522 i‡(
vÆue
[0].
d©a
[0] == '*') {

523 
vÆue
[0].
Àn
--;

524 
vÆue
[0].
d©a
++;

525 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

528 
rc
.
∑âîn
 = 
vÆue
[0];

529 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

530 
rc
.
îr
.
d©a
 = 
îr°r
;

532 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
˘x
->
cf
, &
rc
);

533 i‡(
ªgex
->ªgex =
NULL
) {

534  
NGX_CONF_ERROR
;

537 
ªgex
->
vÆue
 = 
v¨
;

539  
NGX_CONF_OK
;

544 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '\\') {

545 
vÆue
[0].
Àn
--;

546 
vÆue
[0].
d©a
++;

549 
rc
 = 
	`ngx_hash_add_key
(&
˘x
->
keys
, &
vÆue
[0], 
v¨
,

550 (
˘x
->
ho°«mes
Ë? 
NGX_HASH_WILDCARD_KEY
 : 0);

552 i‡(
rc
 =
NGX_OK
) {

553  
NGX_CONF_OK
;

556 i‡(
rc
 =
NGX_DECLINED
) {

557 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

558 "övÆid ho°«mê‹ wûdˇrd \"%V\"", &
vÆue
[0]);

561 i‡(
rc
 =
NGX_BUSY
) {

562 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

563 "c⁄Êi˘ögÖ¨amëî \"%V\"", &
vÆue
[0]);

566  
NGX_CONF_ERROR
;

567 
	}
}

	@src/http/modules/ngx_http_memcached_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

15 
ngx_öt_t
 
	mödex
;

16 } 
	tngx_hâp_memˇched_loc_c⁄f_t
;

20 
size_t
 
	mª°
;

21 
ngx_hâp_ªque°_t
 *
	mªque°
;

22 
ngx_°r_t
 
	mkey
;

23 } 
	tngx_hâp_memˇched_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

27 
ngx_öt_t
 
ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t
 
ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr_öô
(*
d©a
);

30 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
);

31 
ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

32 
ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_öt_t
 
rc
);

35 *
ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

39 *
ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
c⁄f
);

43 
ngx_c⁄f_bômask_t
 
	gngx_hâp_memˇched_√xt_up°ªam_masks
[] = {

44 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

45 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

46 { 
ngx_°rög
("övÆid_ª•⁄£"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

47 { 
ngx_°rög
("nŸ_found"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

48 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

49 { 
ngx_nuŒ_°rög
, 0 }

53 
ngx_comm™d_t
 
	gngx_hâp_memˇched_comm™ds
[] = {

55 { 
ngx_°rög
("memcached_pass"),

56 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

57 
ngx_hâp_memˇched_∑ss
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("memcached_bind"),

63 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

65 
NGX_HTTP_LOC_CONF_OFFSET
,

66 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

67 
NULL
 },

69 { 
ngx_°rög
("memcached_connect_timeout"),

70 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_m£c_¶Ÿ
,

72 
NGX_HTTP_LOC_CONF_OFFSET
,

73 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

74 
NULL
 },

76 { 
ngx_°rög
("memcached_send_timeout"),

77 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

78 
ngx_c⁄f_£t_m£c_¶Ÿ
,

79 
NGX_HTTP_LOC_CONF_OFFSET
,

80 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

81 
NULL
 },

83 { 
ngx_°rög
("memcached_buffer_size"),

84 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

85 
ngx_c⁄f_£t_size_¶Ÿ
,

86 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

88 
NULL
 },

90 { 
ngx_°rög
("memcached_read_timeout"),

91 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

92 
ngx_c⁄f_£t_m£c_¶Ÿ
,

93 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

95 
NULL
 },

97 { 
ngx_°rög
("memcached_next_upstream"),

98 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

99 
ngx_c⁄f_£t_bômask_¶Ÿ
,

100 
NGX_HTTP_LOC_CONF_OFFSET
,

101 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

102 &
ngx_hâp_memˇched_√xt_up°ªam_masks
 },

104 
ngx_nuŒ_comm™d


108 
ngx_hâp_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ_˘x
 = {

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
NULL
,

116 
NULL
,

118 
ngx_hâp_memˇched_¸óã_loc_c⁄f
,

119 
ngx_hâp_memˇched_mîge_loc_c⁄f


123 
ngx_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ
 = {

124 
NGX_MODULE_V1
,

125 &
ngx_hâp_memˇched_moduÀ_˘x
,

126 
ngx_hâp_memˇched_comm™ds
,

127 
NGX_HTTP_MODULE
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NGX_MODULE_V1_PADDING


139 
ngx_°r_t
 
	gngx_hâp_memˇched_key
 = 
ngx_°rög
("memcached_key");

142 
	#NGX_HTTP_MEMCACHED_END
 ((
ngx_hâp_memˇched_íd
Ë- 1)

	)

143 
u_ch¨
 
	gngx_hâp_memˇched_íd
[] = 
CRLF
 "END" CRLF;

146 
ngx_öt_t


147 
	$ngx_hâp_memˇched_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

149 
ngx_öt_t
 
rc
;

150 
ngx_hâp_up°ªam_t
 *
u
;

151 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

152 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

154 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

155  
NGX_HTTP_NOT_ALLOWED
;

158 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

160 i‡(
rc
 !
NGX_OK
) {

161  
rc
;

164 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

165  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

168 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
u
 = 
r
->
up°ªam
;

174 
	`ngx_°r_£t
(&
u
->
schema
, "memcached://");

175 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_memˇched_moduÀ
;

177 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

179 
u
->
c⁄f
 = &
mlcf
->
up°ªam
;

181 
u
->
¸óã_ªque°
 = 
ngx_hâp_memˇched_¸óã_ªque°
;

182 
u
->
ªöô_ªque°
 = 
ngx_hâp_memˇched_ªöô_ªque°
;

183 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_memˇched_¥o˚ss_hódî
;

184 
u
->
ab‹t_ªque°
 = 
ngx_hâp_memˇched_ab‹t_ªque°
;

185 
u
->
föÆize_ªque°
 = 
ngx_hâp_memˇched_föÆize_ªque°
;

187 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_memˇched_˘x_t
));

188 i‡(
˘x
 =
NULL
) {

189  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

192 
˘x
->
ª°
 = 
NGX_HTTP_MEMCACHED_END
;

193 
˘x
->
ªque°
 = 
r
;

195 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_memˇched_moduÀ
);

197 
u
->
öput_fûãr_öô
 = 
ngx_hâp_memˇched_fûãr_öô
;

198 
u
->
öput_fûãr
 = 
ngx_hâp_memˇched_fûãr
;

199 
u
->
öput_fûãr_˘x
 = 
˘x
;

201 
r
->
maö
->
cou¡
++;

203 
	`ngx_hâp_up°ªam_öô
(
r
);

205  
NGX_DONE
;

206 
	}
}

209 
ngx_öt_t


210 
	$ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

212 
size_t
 
Àn
;

213 
uöçå_t
 
esˇ≥
;

214 
ngx_buf_t
 *
b
;

215 
ngx_chaö_t
 *
˛
;

216 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

217 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

218 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

220 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

222 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
mlcf
->
ödex
);

224 i‡(
vv
 =
NULL
 || vv->
nŸ_found
 || vv->
Àn
 == 0) {

225 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

227  
NGX_ERROR
;

230 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vv
->
d©a
, vv->
Àn
, 
NGX_ESCAPE_MEMCACHED
);

232 
Àn
 = ("gë "Ë- 1 + 
vv
->À¿+ 
esˇ≥
 + (
CRLF
) - 1;

234 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

235 i‡(
b
 =
NULL
) {

236  
NGX_ERROR
;

239 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

240 i‡(
˛
 =
NULL
) {

241  
NGX_ERROR
;

244 
˛
->
buf
 = 
b
;

245 
˛
->
√xt
 = 
NULL
;

247 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

249 *
b
->
œ°
++ = 'g'; *b->last++ = 'e'; *b->last++ = 't'; *b->last++ = ' ';

251 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

253 
˘x
->
key
.
d©a
 = 
b
->
œ°
;

255 i‡(
esˇ≥
 == 0) {

256 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vv
->
d©a
, vv->
Àn
);

259 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
(b->œ°, 
vv
->
d©a
, vv->
Àn
,

260 
NGX_ESCAPE_MEMCACHED
);

263 
˘x
->
key
.
Àn
 = 
b
->
œ°
 - ctx->key.
d©a
;

265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

266 "hâ∞memˇchedÑeque°: \"%V\"", &
˘x
->
key
);

268 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

270  
NGX_OK
;

271 
	}
}

274 
ngx_öt_t


275 
	$ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

277  
NGX_OK
;

278 
	}
}

281 
ngx_öt_t


282 
	$ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

284 
u_ch¨
 *
p
, *
Àn
;

285 
ngx_°r_t
 
löe
;

286 
ngx_hâp_up°ªam_t
 *
u
;

287 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

289 
u
 = 
r
->
up°ªam
;

291 
p
 = 
u
->
buf„r
.
pos
;Ö < u->buf„r.
œ°
;Ö++) {

292 i‡(*
p
 =
LF
) {

293 
found
;

297  
NGX_AGAIN
;

299 
found
:

301 *
p
 = '\0';

303 
löe
.
Àn
 = 
p
 - 
u
->
buf„r
.
pos
 - 1;

304 
löe
.
d©a
 = 
u
->
buf„r
.
pos
;

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 "memˇched: \"%V\"", &
löe
);

309 
p
 = 
u
->
buf„r
.
pos
;

311 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

313 i‡(
	`ngx_°∫cmp
(
p
, "VALUE ", ("VALUE ") - 1) == 0) {

315 
p
 += ("VALUE ") - 1;

317 i‡(
	`ngx_°∫cmp
(
p
, 
˘x
->
key
.
d©a
, ctx->key.
Àn
) != 0) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

321 &
löe
, &
˘x
->
key
);

323  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

326 
p
 +
˘x
->
key
.
Àn
;

328 i‡(*
p
++ != ' ') {

329 
no_vÆid
;

334 *
p
) {

335 i‡(*
p
++ == ' ') {

336 
Àngth
;

340 
no_vÆid
;

342 
Àngth
:

344 
Àn
 = 
p
;

346 *
p
 && *p++ !
CR
) { }

348 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
Àn
, 
p
 -Üen - 1);

349 i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

350 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

353 &
löe
, &
˘x
->
key
);

354  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

357 
u
->
hódîs_ö
.
°©us_n
 = 200;

358 
u
->
°©e
->
°©us
 = 200;

359 
u
->
buf„r
.
pos
 = 
p
 + 1;

361  
NGX_OK
;

364 i‡(
	`ngx_°rcmp
(
p
, "END\x0d") == 0) {

365 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

366 "key: \"%V\" wa†nŸ found by memˇched", &
˘x
->
key
);

368 
u
->
hódîs_ö
.
°©us_n
 = 404;

369 
u
->
°©e
->
°©us
 = 404;

370 
u
->
kì∑live
 = 1;

372  
NGX_OK
;

375 
no_vÆid
:

377 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

378 "memˇched síàövÆidÑe•⁄£: \"%V\"", &
löe
);

380  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_hâp_memˇched_fûãr_öô
(*
d©a
)

387 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

389 
ngx_hâp_up°ªam_t
 *
u
;

391 
u
 = 
˘x
->
ªque°
->
up°ªam
;

393 
u
->
Àngth
 +
NGX_HTTP_MEMCACHED_END
;

395  
NGX_OK
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

402 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

404 
u_ch¨
 *
œ°
;

405 
ngx_buf_t
 *
b
;

406 
ngx_chaö_t
 *
˛
, **
Œ
;

407 
ngx_hâp_up°ªam_t
 *
u
;

409 
u
 = 
˘x
->
ªque°
->
up°ªam
;

410 
b
 = &
u
->
buf„r
;

412 i‡(
u
->
Àngth
 =(
ssize_t
Ë
˘x
->
ª°
) {

414 i‡(
	`ngx_°∫cmp
(
b
->
œ°
,

415 
ngx_hâp_memˇched_íd
 + 
NGX_HTTP_MEMCACHED_END
 - 
˘x
->
ª°
,

416 
byãs
)

419 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

422 
u
->
Àngth
 = 0;

423 
˘x
->
ª°
 = 0;

425  
NGX_OK
;

428 
u
->
Àngth
 -
byãs
;

429 
˘x
->
ª°
 -
byãs
;

431 i‡(
u
->
Àngth
 == 0) {

432 
u
->
kì∑live
 = 1;

435  
NGX_OK
;

438 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

439 
Œ
 = &
˛
->
√xt
;

442 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
˘x
->
ªque°
->
poﬁ
, &
u
->
‰ì_bufs
);

443 i‡(
˛
 =
NULL
) {

444  
NGX_ERROR
;

447 
˛
->
buf
->
Êush
 = 1;

448 
˛
->
buf
->
mem‹y
 = 1;

450 *
Œ
 = 
˛
;

452 
œ°
 = 
b
->last;

453 
˛
->
buf
->
pos
 = 
œ°
;

454 
b
->
œ°
 +
byãs
;

455 
˛
->
buf
->
œ°
 = 
b
->last;

456 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

458 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

460 
byãs
, 
b
->
œ°
 - b->
pos
, 
u
->
Àngth
, 
˘x
->
ª°
);

462 i‡(
byãs
 <(
ssize_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
)) {

463 
u
->
Àngth
 -
byãs
;

464  
NGX_OK
;

467 
œ°
 +
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
;

469 i‡(
	`ngx_°∫cmp
(
œ°
, 
ngx_hâp_memˇched_íd
, 
b
->last -Üast) != 0) {

470 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

473 
b
->
œ°
 =Üast;

474 
˛
->
buf
->
œ°
 =Üast;

475 
u
->
Àngth
 = 0;

476 
˘x
->
ª°
 = 0;

478  
NGX_OK
;

481 
˘x
->
ª°
 -
b
->
œ°
 -Üast;

482 
b
->
œ°
 =Üast;

483 
˛
->
buf
->
œ°
 =Üast;

484 
u
->
Àngth
 = 
˘x
->
ª°
;

486 i‡(
u
->
Àngth
 == 0) {

487 
u
->
kì∑live
 = 1;

490  
NGX_OK
;

491 
	}
}

495 
	$ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

497 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

500 
	}
}

504 
	$ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

506 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

509 
	}
}

513 
	$ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

515 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
;

517 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_memˇched_loc_c⁄f_t
));

518 i‡(
c⁄f
 =
NULL
) {

519  
NULL
;

532 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

533 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

534 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

536 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

539 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

540 
c⁄f
->
up°ªam
.
buf„rög
 = 0;

541 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 0;

542 
c⁄f
->
up°ªam
.
£nd_low©
 = 0;

543 
c⁄f
->
up°ªam
.
bufs
.
num
 = 0;

544 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 0;

545 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 0;

546 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 0;

547 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 1;

548 
c⁄f
->
up°ªam
.
öãr˚±_404
 = 1;

549 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 0;

550 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 0;

552 
c⁄f
->
ödex
 = 
NGX_CONF_UNSET
;

554  
c⁄f
;

555 
	}
}

559 
	$ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

561 
ngx_hâp_memˇched_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

562 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

564 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

565 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

567 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

568 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

570 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

571 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

573 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

574 
¥ev
->
up°ªam
.
buf„r_size
,

575 (
size_t
Ë
ngx_∑gesize
);

577 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

578 
¥ev
->
up°ªam
.
√xt_up°ªam
,

579 (
NGX_CONF_BITMASK_SET


580 |
NGX_HTTP_UPSTREAM_FT_ERROR


581 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

583 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

584 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


585 |
NGX_HTTP_UPSTREAM_FT_OFF
;

588 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

589 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

592 i‡(
c⁄f
->
ödex
 =
NGX_CONF_UNSET
) {

593 
c⁄f
->
ödex
 = 
¥ev
->index;

596  
NGX_CONF_OK
;

597 
	}
}

601 
	$ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

603 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
 = 
c⁄f
;

605 
ngx_°r_t
 *
vÆue
;

606 
ngx_uæ_t
 
u
;

607 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

609 i‡(
mlcf
->
up°ªam
.upstream) {

613 
vÆue
 = 
cf
->
¨gs
->
ñts
;

615 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

617 
u
.
uæ
 = 
vÆue
[1];

618 
u
.
no_ªsﬁve
 = 1;

620 
mlcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

621 i‡(
mlcf
->
up°ªam
.up°ªam =
NULL
) {

622  
NGX_CONF_ERROR
;

625 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

627 
˛cf
->
h™dÀr
 = 
ngx_hâp_memˇched_h™dÀr
;

629 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

630 
˛cf
->
auto_ªdúe˘
 = 1;

633 
mlcf
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_memˇched_key
);

635 i‡(
mlcf
->
ödex
 =
NGX_ERROR
) {

636  
NGX_CONF_ERROR
;

639  
NGX_CONF_OK
;

640 
	}
}

	@src/http/modules/ngx_http_mp4_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_MP4_TRAK_ATOM
 0

	)

13 
	#NGX_HTTP_MP4_TKHD_ATOM
 1

	)

14 
	#NGX_HTTP_MP4_MDIA_ATOM
 2

	)

15 
	#NGX_HTTP_MP4_MDHD_ATOM
 3

	)

16 
	#NGX_HTTP_MP4_HDLR_ATOM
 4

	)

17 
	#NGX_HTTP_MP4_MINF_ATOM
 5

	)

18 
	#NGX_HTTP_MP4_VMHD_ATOM
 6

	)

19 
	#NGX_HTTP_MP4_SMHD_ATOM
 7

	)

20 
	#NGX_HTTP_MP4_DINF_ATOM
 8

	)

21 
	#NGX_HTTP_MP4_STBL_ATOM
 9

	)

22 
	#NGX_HTTP_MP4_STSD_ATOM
 10

	)

23 
	#NGX_HTTP_MP4_STTS_ATOM
 11

	)

24 
	#NGX_HTTP_MP4_STTS_DATA
 12

	)

25 
	#NGX_HTTP_MP4_STSS_ATOM
 13

	)

26 
	#NGX_HTTP_MP4_STSS_DATA
 14

	)

27 
	#NGX_HTTP_MP4_CTTS_ATOM
 15

	)

28 
	#NGX_HTTP_MP4_CTTS_DATA
 16

	)

29 
	#NGX_HTTP_MP4_STSC_ATOM
 17

	)

30 
	#NGX_HTTP_MP4_STSC_CHUNK
 18

	)

31 
	#NGX_HTTP_MP4_STSC_DATA
 19

	)

32 
	#NGX_HTTP_MP4_STSZ_ATOM
 20

	)

33 
	#NGX_HTTP_MP4_STSZ_DATA
 21

	)

34 
	#NGX_HTTP_MP4_STCO_ATOM
 22

	)

35 
	#NGX_HTTP_MP4_STCO_DATA
 23

	)

36 
	#NGX_HTTP_MP4_CO64_ATOM
 24

	)

37 
	#NGX_HTTP_MP4_CO64_DATA
 25

	)

39 
	#NGX_HTTP_MP4_LAST_ATOM
 
NGX_HTTP_MP4_CO64_DATA


	)

43 
size_t
 
	mbuf„r_size
;

44 
size_t
 
	mmax_buf„r_size
;

45 } 
	tngx_hâp_mp4_c⁄f_t
;

49 
u_ch¨
 
	mchunk
[4];

50 
u_ch¨
 
	mßm∂es
[4];

51 
u_ch¨
 
	mid
[4];

52 } 
	tngx_mp4_°sc_íåy_t
;

56 
uöt32_t
 
	mtimesˇÀ
;

57 
uöt32_t
 
	mtime_to_ßm∂e_íåõs
;

58 
uöt32_t
 
	mßm∂e_to_chunk_íåõs
;

59 
uöt32_t
 
	msync_ßm∂es_íåõs
;

60 
uöt32_t
 
	mcomposôi⁄_off£t_íåõs
;

61 
uöt32_t
 
	mßm∂e_sizes_íåõs
;

62 
uöt32_t
 
	mchunks
;

64 
ngx_uöt_t
 
	m°¨t_ßm∂e
;

65 
ngx_uöt_t
 
	m°¨t_chunk
;

66 
ngx_uöt_t
 
	mchunk_ßm∂es
;

67 
uöt64_t
 
	mchunk_ßm∂es_size
;

68 
off_t
 
	m°¨t_off£t
;

70 
size_t
 
	mtkhd_size
;

71 
size_t
 
	mmdhd_size
;

72 
size_t
 
	mhdÃ_size
;

73 
size_t
 
	mvmhd_size
;

74 
size_t
 
	msmhd_size
;

75 
size_t
 
	mdöf_size
;

76 
size_t
 
	msize
;

78 
ngx_chaö_t
 
	mout
[
NGX_HTTP_MP4_LAST_ATOM
 + 1];

80 
ngx_buf_t
 
	måak_©om_buf
;

81 
ngx_buf_t
 
	mtkhd_©om_buf
;

82 
ngx_buf_t
 
	mmdü_©om_buf
;

83 
ngx_buf_t
 
	mmdhd_©om_buf
;

84 
ngx_buf_t
 
	mhdÃ_©om_buf
;

85 
ngx_buf_t
 
	mmöf_©om_buf
;

86 
ngx_buf_t
 
	mvmhd_©om_buf
;

87 
ngx_buf_t
 
	msmhd_©om_buf
;

88 
ngx_buf_t
 
	mdöf_©om_buf
;

89 
ngx_buf_t
 
	m°bl_©om_buf
;

90 
ngx_buf_t
 
	m°sd_©om_buf
;

91 
ngx_buf_t
 
	m°ts_©om_buf
;

92 
ngx_buf_t
 
	m°ts_d©a_buf
;

93 
ngx_buf_t
 
	m°ss_©om_buf
;

94 
ngx_buf_t
 
	m°ss_d©a_buf
;

95 
ngx_buf_t
 
	m˘ts_©om_buf
;

96 
ngx_buf_t
 
	m˘ts_d©a_buf
;

97 
ngx_buf_t
 
	m°sc_©om_buf
;

98 
ngx_buf_t
 
	m°sc_chunk_buf
;

99 
ngx_buf_t
 
	m°sc_d©a_buf
;

100 
ngx_buf_t
 
	m°sz_©om_buf
;

101 
ngx_buf_t
 
	m°sz_d©a_buf
;

102 
ngx_buf_t
 
	m°co_©om_buf
;

103 
ngx_buf_t
 
	m°co_d©a_buf
;

104 
ngx_buf_t
 
	mco64_©om_buf
;

105 
ngx_buf_t
 
	mco64_d©a_buf
;

107 
ngx_mp4_°sc_íåy_t
 
	m°sc_chunk_íåy
;

108 } 
	tngx_hâp_mp4_åak_t
;

112 
ngx_fûe_t
 
	mfûe
;

114 
u_ch¨
 *
	mbuf„r
;

115 
u_ch¨
 *
	mbuf„r_°¨t
;

116 
u_ch¨
 *
	mbuf„r_pos
;

117 
u_ch¨
 *
	mbuf„r_íd
;

118 
size_t
 
	mbuf„r_size
;

120 
off_t
 
	moff£t
;

121 
off_t
 
	míd
;

122 
off_t
 
	mc⁄ã¡_Àngth
;

123 
ngx_uöt_t
 
	m°¨t
;

124 
uöt32_t
 
	mtimesˇÀ
;

125 
ngx_hâp_ªque°_t
 *
	mªque°
;

126 
ngx_¨øy_t
 
	måak
;

127 
ngx_hâp_mp4_åak_t
 
	måaks
[2];

129 
size_t
 
	m·yp_size
;

130 
size_t
 
	mmoov_size
;

132 
ngx_chaö_t
 *
	mout
;

133 
ngx_chaö_t
 
	m·yp_©om
;

134 
ngx_chaö_t
 
	mmoov_©om
;

135 
ngx_chaö_t
 
	mmvhd_©om
;

136 
ngx_chaö_t
 
	mmd©_©om
;

137 
ngx_chaö_t
 
	mmd©_d©a
;

139 
ngx_buf_t
 
	m·yp_©om_buf
;

140 
ngx_buf_t
 
	mmoov_©om_buf
;

141 
ngx_buf_t
 
	mmvhd_©om_buf
;

142 
ngx_buf_t
 
	mmd©_©om_buf
;

143 
ngx_buf_t
 
	mmd©_d©a_buf
;

145 
u_ch¨
 
	mmoov_©om_hódî
[8];

146 
u_ch¨
 
	mmd©_©om_hódî
[16];

147 } 
	tngx_hâp_mp4_fûe_t
;

151 *
	m«me
;

152 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_mp4_fûe_t
 *
	mmp4
,

153 
uöt64_t
 
	m©om_d©a_size
);

154 } 
	tngx_hâp_mp4_©om_h™dÀr_t
;

157 
	#ngx_mp4_©om_hódî
(
mp4
Ë(mp4->
buf„r_pos
 - 8)

	)

158 
	#ngx_mp4_©om_d©a
(
mp4
Ëmp4->
buf„r_pos


	)

159 
	#ngx_mp4_©om_d©a_size
(
t
Ë(
uöt64_t
Ë(—Ë- 8)

	)

160 
	#ngx_mp4_©om_√xt
(
mp4
, 
n
Ëmp4->
buf„r_pos
 +n; mp4->
off£t
 +
	)
n

163 
	#ngx_mp4_£t_©om_«me
(
p
, 
n1
, 
n2
, 
n3
, 
n4
) \

164 ((
u_ch¨
 *Ë(
p
))[4] = 
n1
; \

165 ((
u_ch¨
 *Ë(
p
))[5] = 
n2
; \

166 ((
u_ch¨
 *Ë(
p
))[6] = 
n3
; \

167 ((
u_ch¨
 *Ë(
p
))[7] = 
n4


	)

169 
	#ngx_mp4_gë_32vÆue
(
p
) \

170 –((
uöt32_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 24) \

171 + ( ((
u_ch¨
 *Ë(
p
))[1] << 16) \

172 + ( ((
u_ch¨
 *Ë(
p
))[2] << 8) \

173 + ( ((
u_ch¨
 *Ë(
p
))[3]Ë)

	)

175 
	#ngx_mp4_£t_32vÆue
(
p
, 
n
) \

176 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
n
) >> 24); \

177 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
n
) >> 16); \

178 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
n
) >> 8); \

179 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë(
n
)

	)

181 
	#ngx_mp4_gë_64vÆue
(
p
) \

182 –((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 56) \

183 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[1] << 48) \

184 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[2] << 40) \

185 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[3] << 32) \

186 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[4] << 24) \

187 + ( ((
u_ch¨
 *Ë(
p
))[5] << 16) \

188 + ( ((
u_ch¨
 *Ë(
p
))[6] << 8) \

189 + ( ((
u_ch¨
 *Ë(
p
))[7]Ë)

	)

191 
	#ngx_mp4_£t_64vÆue
(
p
, 
n
) \

192 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 56); \

193 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 48); \

194 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 40); \

195 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 32); \

196 ((
u_ch¨
 *Ë(
p
))[4] = (u_ch¨Ë–(
n
) >> 24); \

197 ((
u_ch¨
 *Ë(
p
))[5] = (u_ch¨Ë–(
n
) >> 16); \

198 ((
u_ch¨
 *Ë(
p
))[6] = (u_ch¨Ë–(
n
) >> 8); \

199 ((
u_ch¨
 *Ë(
p
))[7] = (u_ch¨Ë(
n
)

	)

201 
	#ngx_mp4_œ°_åak
(
mp4
) \

202 &((
ngx_hâp_mp4_åak_t
 *Ë
mp4
->
åak
.
ñts
)[mp4->åak.
√…s
 - 1]

	)

205 
ngx_öt_t
 
ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
);

206 
ngx_öt_t
 
ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

207 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
);

208 
ngx_öt_t
 
ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
);

209 
ngx_öt_t
 
ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

210 
uöt64_t
 
©om_d©a_size
);

211 
ngx_öt_t
 
ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

212 
uöt64_t
 
©om_d©a_size
);

213 
ngx_öt_t
 
ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

214 
uöt64_t
 
©om_d©a_size
);

215 
size_t
 
ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

216 
off_t
 
°¨t_off£t
);

217 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

218 
uöt64_t
 
©om_d©a_size
);

219 
ngx_öt_t
 
ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

220 
uöt64_t
 
©om_d©a_size
);

221 
ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

222 
ngx_hâp_mp4_åak_t
 *
åak
);

223 
ngx_öt_t
 
ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

224 
uöt64_t
 
©om_d©a_size
);

225 
ngx_öt_t
 
ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

226 
uöt64_t
 
©om_d©a_size
);

227 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

228 
uöt64_t
 
©om_d©a_size
);

229 
ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

230 
ngx_hâp_mp4_åak_t
 *
åak
);

231 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

232 
uöt64_t
 
©om_d©a_size
);

233 
ngx_öt_t
 
ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

234 
uöt64_t
 
©om_d©a_size
);

235 
ngx_öt_t
 
ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

236 
uöt64_t
 
©om_d©a_size
);

237 
ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

238 
ngx_hâp_mp4_åak_t
 *
åak
);

239 
ngx_öt_t
 
ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

240 
uöt64_t
 
©om_d©a_size
);

241 
ngx_öt_t
 
ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

242 
uöt64_t
 
©om_d©a_size
);

243 
ngx_öt_t
 
ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

244 
uöt64_t
 
©om_d©a_size
);

245 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

246 
uöt64_t
 
©om_d©a_size
);

247 
ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

248 
ngx_hâp_mp4_åak_t
 *
åak
);

249 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

250 
uöt64_t
 
©om_d©a_size
);

251 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

252 
uöt64_t
 
©om_d©a_size
);

253 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

254 
ngx_hâp_mp4_åak_t
 *
åak
);

255 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

256 
uöt64_t
 
©om_d©a_size
);

257 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

258 
ngx_hâp_mp4_åak_t
 *
åak
);

259 
ngx_öt_t
 
ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

260 
uöt64_t
 
©om_d©a_size
);

261 
ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

262 
ngx_hâp_mp4_åak_t
 *
åak
);

263 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

264 
uöt64_t
 
©om_d©a_size
);

265 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

266 
ngx_hâp_mp4_åak_t
 *
åak
);

267 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

268 
uöt64_t
 
©om_d©a_size
);

269 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

270 
ngx_hâp_mp4_åak_t
 *
åak
);

271 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

272 
uöt64_t
 
©om_d©a_size
);

273 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

274 
ngx_hâp_mp4_åak_t
 *
åak
);

275 
ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

276 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
);

277 
ngx_öt_t
 
ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

278 
uöt64_t
 
©om_d©a_size
);

279 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

280 
ngx_hâp_mp4_åak_t
 *
åak
);

281 
ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

282 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
);

283 *
ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

284 *
ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

285 *
ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

287 
ngx_comm™d_t
 
	gngx_hâp_mp4_comm™ds
[] = {

289 { 
ngx_°rög
("mp4"),

290 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

291 
ngx_hâp_mp4
,

294 
NULL
 },

296 { 
ngx_°rög
("mp4_buffer_size"),

297 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

298 
ngx_c⁄f_£t_size_¶Ÿ
,

299 
NGX_HTTP_LOC_CONF_OFFSET
,

300 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
buf„r_size
),

301 
NULL
 },

303 { 
ngx_°rög
("mp4_max_buffer_size"),

304 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

305 
ngx_c⁄f_£t_size_¶Ÿ
,

306 
NGX_HTTP_LOC_CONF_OFFSET
,

307 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
max_buf„r_size
),

308 
NULL
 },

310 
ngx_nuŒ_comm™d


314 
ngx_hâp_moduÀ_t
 
	gngx_hâp_mp4_moduÀ_˘x
 = {

315 
NULL
,

316 
NULL
,

318 
NULL
,

319 
NULL
,

321 
NULL
,

322 
NULL
,

324 
ngx_hâp_mp4_¸óã_c⁄f
,

325 
ngx_hâp_mp4_mîge_c⁄f


329 
ngx_moduÀ_t
 
	gngx_hâp_mp4_moduÀ
 = {

330 
NGX_MODULE_V1
,

331 &
ngx_hâp_mp4_moduÀ_˘x
,

332 
ngx_hâp_mp4_comm™ds
,

333 
NGX_HTTP_MODULE
,

334 
NULL
,

335 
NULL
,

336 
NULL
,

337 
NULL
,

338 
NULL
,

339 
NULL
,

340 
NULL
,

341 
NGX_MODULE_V1_PADDING


345 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_©oms
[] = {

346 { "·yp", 
ngx_hâp_mp4_ªad_·yp_©om
 },

347 { "moov", 
ngx_hâp_mp4_ªad_moov_©om
 },

348 { "md©", 
ngx_hâp_mp4_ªad_md©_©om
 },

349 { 
NULL
, NULL }

352 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_moov_©oms
[] = {

353 { "mvhd", 
ngx_hâp_mp4_ªad_mvhd_©om
 },

354 { "åak", 
ngx_hâp_mp4_ªad_åak_©om
 },

355 { "cmov", 
ngx_hâp_mp4_ªad_cmov_©om
 },

356 { 
NULL
, NULL }

359 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_åak_©oms
[] = {

360 { "tkhd", 
ngx_hâp_mp4_ªad_tkhd_©om
 },

361 { "mdü", 
ngx_hâp_mp4_ªad_mdü_©om
 },

362 { 
NULL
, NULL }

365 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_mdü_©oms
[] = {

366 { "mdhd", 
ngx_hâp_mp4_ªad_mdhd_©om
 },

367 { "hdÃ", 
ngx_hâp_mp4_ªad_hdÃ_©om
 },

368 { "möf", 
ngx_hâp_mp4_ªad_möf_©om
 },

369 { 
NULL
, NULL }

372 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_möf_©oms
[] = {

373 { "vmhd", 
ngx_hâp_mp4_ªad_vmhd_©om
 },

374 { "smhd", 
ngx_hâp_mp4_ªad_smhd_©om
 },

375 { "döf", 
ngx_hâp_mp4_ªad_döf_©om
 },

376 { "°bl", 
ngx_hâp_mp4_ªad_°bl_©om
 },

377 { 
NULL
, NULL }

380 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_°bl_©oms
[] = {

381 { "°sd", 
ngx_hâp_mp4_ªad_°sd_©om
 },

382 { "°ts", 
ngx_hâp_mp4_ªad_°ts_©om
 },

383 { "°ss", 
ngx_hâp_mp4_ªad_°ss_©om
 },

384 { "˘ts", 
ngx_hâp_mp4_ªad_˘ts_©om
 },

385 { "°sc", 
ngx_hâp_mp4_ªad_°sc_©om
 },

386 { "°sz", 
ngx_hâp_mp4_ªad_°sz_©om
 },

387 { "°co", 
ngx_hâp_mp4_ªad_°co_©om
 },

388 { "co64", 
ngx_hâp_mp4_ªad_co64_©om
 },

389 { 
NULL
, NULL }

393 
ngx_öt_t


394 
	$ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

396 
u_ch¨
 *
œ°
;

397 
size_t
 
roŸ
;

398 
ngx_öt_t
 
rc
, 
°¨t
;

399 
ngx_uöt_t
 
Àvñ
;

400 
ngx_°r_t
 
∑th
, 
vÆue
;

401 
ngx_log_t
 *
log
;

402 
ngx_buf_t
 *
b
;

403 
ngx_chaö_t
 
out
;

404 
ngx_hâp_mp4_fûe_t
 *
mp4
;

405 
ngx_›í_fûe_öfo_t
 
of
;

406 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

408 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

409  
NGX_HTTP_NOT_ALLOWED
;

412 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

413  
NGX_DECLINED
;

416 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

418 i‡(
rc
 !
NGX_OK
) {

419  
rc
;

422 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

423 i‡(
œ°
 =
NULL
) {

424  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

427 
log
 = 
r
->
c⁄√˘i⁄
->log;

429 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

431 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

432 "hâ∞mp4 fûíame: \"%V\"", &
∑th
);

434 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

436 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

438 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

439 
of
.
dúe˘io
 = 
NGX_MAX_OFF_T_VALUE
;

440 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

441 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

442 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

443 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

445 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

446  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

449 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

450 !
NGX_OK
)

452 
of
.
îr
) {

455  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

457 
NGX_ENOENT
:

458 
NGX_ENOTDIR
:

459 
NGX_ENAMETOOLONG
:

461 
Àvñ
 = 
NGX_LOG_ERR
;

462 
rc
 = 
NGX_HTTP_NOT_FOUND
;

465 
NGX_EACCES
:

466 #i‡(
NGX_HAVE_OPENAT
)

467 
NGX_EMLINK
:

468 
NGX_ELOOP
:

471 
Àvñ
 = 
NGX_LOG_ERR
;

472 
rc
 = 
NGX_HTTP_FORBIDDEN
;

477 
Àvñ
 = 
NGX_LOG_CRIT
;

478 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

482 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

483 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

484 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

487  
rc
;

490 i‡(!
of
.
is_fûe
) {

492 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

493 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

494 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

497  
NGX_DECLINED
;

500 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

501 
r
->
Ælow_ønges
 = 1;

503 
°¨t
 = -1;

504 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

505 
mp4
 = 
NULL
;

506 
b
 = 
NULL
;

508 i‡(
r
->
¨gs
.
Àn
) {

510 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

518 
	`ngx_£t_î∫o
(0);

519 
°¨t
 = (Ë(
	`°πod
((*Ë
vÆue
.
d©a
, 
NULL
) * 1000);

521 i‡(
ngx_î∫o
 =0 && 
°¨t
 >= 0) {

522 
r
->
Ælow_ønges
 = 0;

524 
mp4
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_mp4_fûe_t
));

525 i‡(
mp4
 =
NULL
) {

526  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

529 
mp4
->
fûe
.
fd
 = 
of
.fd;

530 
mp4
->
fûe
.
«me
 = 
∑th
;

531 
mp4
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;;

532 
mp4
->
íd
 = 
of
.
size
;

533 
mp4
->
°¨t
 = (
ngx_uöt_t
) start;

534 
mp4
->
ªque°
 = 
r
;

536 
	`ngx_hâp_mp4_¥o˚ss
(
mp4
)) {

538 
NGX_DECLINED
:

539 i‡(
mp4
->
buf„r
) {

540 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

543 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

544 
mp4
 = 
NULL
;

548 
NGX_OK
:

549 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
mp4
->
c⁄ã¡_Àngth
;

553 i‡(
mp4
->
buf„r
) {

554 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

557 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

559  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

565 
log
->
a˘i⁄
 = "sending mp4Åo client";

567 i‡(
˛cf
->
dúe˘io
 <
of
.
size
) {

574 i‡(
	`ngx_dúe˘io_⁄
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

575 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

576 
ngx_dúe˘io_⁄_n
 " \"%s\" faûed", 
∑th
.
d©a
);

579 
of
.
is_dúe˘io
 = 1;

581 i‡(
mp4
) {

582 
mp4
->
fûe
.
dúe˘io
 = 1;

586 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

587 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

589 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

590  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

593 i‡(
mp4
 =
NULL
) {

594 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

595 i‡(
b
 =
NULL
) {

596  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

599 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

600 i‡(
b
->
fûe
 =
NULL
) {

601  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

605 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

607 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

608  
rc
;

611 i‡(
mp4
) {

612  
	`ngx_hâp_ouçut_fûãr
(
r
, 
mp4
->
out
);

615 
b
->
fûe_pos
 = 0;

616 
b
->
fûe_œ°
 = 
of
.
size
;

618 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

619 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

620 
b
->
œ°_ö_chaö
 = 1;

622 
b
->
fûe
->
fd
 = 
of
.fd;

623 
b
->
fûe
->
«me
 = 
∑th
;

624 
b
->
fûe
->
log
 =Üog;

625 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

627 
out
.
buf
 = 
b
;

628 
out
.
√xt
 = 
NULL
;

630  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

631 
	}
}

634 
ngx_öt_t


635 
	$ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
)

637 
off_t
 
°¨t_off£t
, 
adju°mít
;

638 
ngx_öt_t
 
rc
;

639 
ngx_uöt_t
 
i
, 
j
;

640 
ngx_chaö_t
 **
¥ev
;

641 
ngx_hâp_mp4_åak_t
 *
åak
;

642 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

644 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

645 "mp4 sèπ:%ui", 
mp4
->
°¨t
);

647 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

649 
mp4
->
buf„r_size
 = 
c⁄f
->buffer_size;

651 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_©oms
, mp4->
íd
);

652 i‡(
rc
 !
NGX_OK
) {

653  
rc
;

656 i‡(
mp4
->
åak
.
√…s
 == 0) {

657 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

659 
mp4
->
fûe
.
«me
.
d©a
);

660  
NGX_ERROR
;

663 i‡(
mp4
->
md©_©om
.
buf
 =
NULL
) {

664 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

666 
mp4
->
fûe
.
«me
.
d©a
);

667  
NGX_ERROR
;

670 
¥ev
 = &
mp4
->
out
;

672 i‡(
mp4
->
·yp_©om
.
buf
) {

673 *
¥ev
 = &
mp4
->
·yp_©om
;

674 
¥ev
 = &
mp4
->
·yp_©om
.
√xt
;

677 *
¥ev
 = &
mp4
->
moov_©om
;

678 
¥ev
 = &
mp4
->
moov_©om
.
√xt
;

680 i‡(
mp4
->
mvhd_©om
.
buf
) {

681 
mp4
->
moov_size
 +mp4->
mvhd_©om_buf
.
œ°
 - mp4->mvhd_©om_buf.
pos
;

682 *
¥ev
 = &
mp4
->
mvhd_©om
;

683 
¥ev
 = &
mp4
->
mvhd_©om
.
√xt
;

686 
°¨t_off£t
 = 
mp4
->
íd
;

687 
åak
 = 
mp4
->åak.
ñts
;

689 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

691 i‡(
	`ngx_hâp_mp4_upd©e_°ts_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

692  
NGX_ERROR
;

695 i‡(
	`ngx_hâp_mp4_upd©e_°ss_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

696  
NGX_ERROR
;

699 
	`ngx_hâp_mp4_upd©e_˘ts_©om
(
mp4
, &
åak
[
i
]);

701 i‡(
	`ngx_hâp_mp4_upd©e_°sc_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

702  
NGX_ERROR
;

705 i‡(
	`ngx_hâp_mp4_upd©e_°sz_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

706  
NGX_ERROR
;

709 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

710 i‡(
	`ngx_hâp_mp4_upd©e_co64_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

711  
NGX_ERROR
;

715 i‡(
	`ngx_hâp_mp4_upd©e_°co_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

716  
NGX_ERROR
;

720 
	`ngx_hâp_mp4_upd©e_°bl_©om
(
mp4
, &
åak
[
i
]);

721 
	`ngx_hâp_mp4_upd©e_möf_©om
(
mp4
, &
åak
[
i
]);

722 
åak
[
i
].
size
 +åak[i].
mdhd_size
;

723 
åak
[
i
].
size
 +åak[i].
hdÃ_size
;

724 
	`ngx_hâp_mp4_upd©e_mdü_©om
(
mp4
, &
åak
[
i
]);

725 
åak
[
i
].
size
 +åak[i].
tkhd_size
;

726 
	`ngx_hâp_mp4_upd©e_åak_©om
(
mp4
, &
åak
[
i
]);

728 
mp4
->
moov_size
 +
åak
[
i
].
size
;

730 i‡(
°¨t_off£t
 > 
åak
[
i
].start_offset) {

731 
°¨t_off£t
 = 
åak
[
i
].start_offset;

734 *
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
];

735 
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
√xt
;

737 
j
 = 0; j < 
NGX_HTTP_MP4_LAST_ATOM
 + 1; j++) {

738 i‡(
åak
[
i
].
out
[
j
].
buf
) {

739 *
¥ev
 = &
åak
[
i
].
out
[
j
];

740 
¥ev
 = &
åak
[
i
].
out
[
j
].
√xt
;

745 
mp4
->
moov_size
 += 8;

747 
	`ngx_mp4_£t_32vÆue
(
mp4
->
moov_©om_hódî
, mp4->
moov_size
);

748 
	`ngx_mp4_£t_©om_«me
(
mp4
->
moov_©om_hódî
, 'm', 'o', 'o', 'v');

749 
mp4
->
c⁄ã¡_Àngth
 +mp4->
moov_size
;

751 *
¥ev
 = &
mp4
->
md©_©om
;

753 i‡(
°¨t_off£t
 > 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
) {

754 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

756 
mp4
->
fûe
.
«me
.
d©a
);

757  
NGX_ERROR
;

760 
adju°mít
 = 
mp4
->
·yp_size
 + mp4->
moov_size


761 + 
	`ngx_hâp_mp4_upd©e_md©_©om
(
mp4
, 
°¨t_off£t
)

762 - 
°¨t_off£t
;

764 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

765 "mp4ádju°mít:%O", 
adju°mít
);

767 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

768 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

769 
	`ngx_hâp_mp4_adju°_co64_©om
(
mp4
, &
åak
[
i
], 
adju°mít
);

771 
	`ngx_hâp_mp4_adju°_°co_©om
(
mp4
, &
åak
[
i
], (
öt32_t
Ë
adju°mít
);

775  
NGX_OK
;

776 
	}
}

780 
u_ch¨
 
	msize
[4];

781 
u_ch¨
 
	m«me
[4];

782 } 
	tngx_mp4_©om_hódî_t
;

785 
u_ch¨
 
	msize
[4];

786 
u_ch¨
 
	m«me
[4];

787 
u_ch¨
 
	msize64
[8];

788 } 
	tngx_mp4_©om_hódî64_t
;

791 
ngx_öt_t


792 
	$ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

793 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
)

795 
off_t
 
íd
;

796 
size_t
 
©om_hódî_size
;

797 
u_ch¨
 *
©om_hódî
, *
©om_«me
;

798 
uöt64_t
 
©om_size
;

799 
ngx_öt_t
 
rc
;

800 
ngx_uöt_t
 
n
;

802 
íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

804 
mp4
->
off£t
 < 
íd
) {

806 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
uöt32_t
)Ë!
NGX_OK
) {

807  
NGX_ERROR
;

810 
©om_hódî
 = 
mp4
->
buf„r_pos
;

811 
©om_size
 = 
	`ngx_mp4_gë_32vÆue
(
©om_hódî
);

812 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

814 i‡(
©om_size
 == 0) {

815 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

817  
NGX_OK
;

820 i‡(
©om_size
 < (
ngx_mp4_©om_hódî_t
)) {

822 i‡(
©om_size
 == 1) {

824 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî64_t
))

825 !
NGX_OK
)

827  
NGX_ERROR
;

831 
©om_hódî
 = 
mp4
->
buf„r_pos
;

832 
©om_size
 = 
	`ngx_mp4_gë_64vÆue
(
©om_hódî
 + 8);

833 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

836 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

838 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

839  
NGX_ERROR
;

843 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî_t
)Ë!
NGX_OK
) {

844  
NGX_ERROR
;

847 
©om_hódî
 = 
mp4
->
buf„r_pos
;

848 
©om_«me
 = 
©om_hódî
 + (
uöt32_t
);

850 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

852 4, 
©om_«me
, 
mp4
->
off£t
, 
©om_size
);

854 i‡(
©om_size
 > (
uöt64_t
Ë(
NGX_MAX_OFF_T_VALUE
 - 
mp4
->
off£t
)

855 || 
mp4
->
off£t
 + (
off_t
Ë
©om_size
 > 
íd
)

857 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

859 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

860  
NGX_ERROR
;

863 
n
 = 0; 
©om
[n].
«me
;Ç++) {

865 i‡(
	`ngx_°∫cmp
(
©om_«me
, 
©om
[
n
].
«me
, 4) == 0) {

867 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_hódî_size
);

869 
rc
 = 
©om
[
n
].
	`h™dÀr
(
mp4
, 
©om_size
 - 
©om_hódî_size
);

870 i‡(
rc
 !
NGX_OK
) {

871  
rc
;

874 
√xt
;

878 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_size
);

880 
√xt
:

884  
NGX_OK
;

885 
	}
}

888 
ngx_öt_t


889 
	$ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
)

891 
ssize_t
 
n
;

893 i‡(
mp4
->
buf„r_pos
 + 
size
 <mp4->
buf„r_íd
) {

894  
NGX_OK
;

897 i‡(
mp4
->
off£t
 + (
off_t
Ëmp4->
buf„r_size
 > mp4->
íd
) {

898 
mp4
->
buf„r_size
 = (
size_t
Ë(mp4->
íd
 - mp4->
off£t
);

901 i‡(
mp4
->
buf„r_size
 < 
size
) {

902 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

903 "\"%s\" mp4 fûêåunˇãd", 
mp4
->
fûe
.
«me
.
d©a
);

904  
NGX_ERROR
;

907 i‡(
mp4
->
buf„r
 =
NULL
) {

908 
mp4
->
buf„r
 = 
	`ngx_∑Œoc
(mp4->
ªque°
->
poﬁ
, mp4->
buf„r_size
);

909 i‡(
mp4
->
buf„r
 =
NULL
) {

910  
NGX_ERROR
;

913 
mp4
->
buf„r_°¨t
 = mp4->
buf„r
;

916 
n
 = 
	`ngx_ªad_fûe
(&
mp4
->
fûe
, mp4->
buf„r_°¨t
, mp4->
buf„r_size
,

917 
mp4
->
off£t
);

919 i‡(
n
 =
NGX_ERROR
) {

920  
NGX_ERROR
;

923 i‡((
size_t
Ë
n
 !
mp4
->
buf„r_size
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
mp4
->
fûe
.
log
, 0,

925 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

926 
n
, 
mp4
->
buf„r_size
, mp4->
fûe
.
«me
.
d©a
);

927  
NGX_ERROR
;

930 
mp4
->
buf„r_pos
 = mp4->
buf„r_°¨t
;

931 
mp4
->
buf„r_íd
 = mp4->
buf„r_°¨t
 + mp4->
buf„r_size
;

933  
NGX_OK
;

934 
	}
}

937 
ngx_öt_t


938 
	$ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

940 
u_ch¨
 *
·yp_©om
;

941 
size_t
 
©om_size
;

942 
ngx_buf_t
 *
©om
;

944 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 ftypátom");

946 i‡(
©om_d©a_size
 > 1024

947 || 
	`ngx_mp4_©om_d©a
(
mp4
Ë+ 
©om_d©a_size
 > mp4->
buf„r_íd
)

949 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

951 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

952  
NGX_ERROR
;

955 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

957 
·yp_©om
 = 
	`ngx_∑Œoc
(
mp4
->
ªque°
->
poﬁ
, 
©om_size
);

958 i‡(
·yp_©om
 =
NULL
) {

959  
NGX_ERROR
;

962 
	`ngx_mp4_£t_32vÆue
(
·yp_©om
, 
©om_size
);

963 
	`ngx_mp4_£t_©om_«me
(
·yp_©om
, 'f', 't', 'y', 'p');

969 
	`ngx_mem˝y
(
·yp_©om
 + (
ngx_mp4_©om_hódî_t
),

970 
	`ngx_mp4_©om_d©a
(
mp4
), (
size_t
Ë
©om_d©a_size
);

972 
©om
 = &
mp4
->
·yp_©om_buf
;

973 
©om
->
ãmp‹¨y
 = 1;

974 
©om
->
pos
 = 
·yp_©om
;

975 
©om
->
œ°
 = 
·yp_©om
 + 
©om_size
;

977 
mp4
->
·yp_©om
.
buf
 = 
©om
;

978 
mp4
->
·yp_size
 = 
©om_size
;

979 
mp4
->
c⁄ã¡_Àngth
 = 
©om_size
;

981 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

983  
NGX_OK
;

984 
	}
}

991 
	#NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 (4 * 1024)

	)

993 
ngx_öt_t


994 
	$ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

996 
ngx_öt_t
 
rc
;

997 
ngx_uöt_t
 
no_md©
;

998 
ngx_buf_t
 *
©om
;

999 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

1001 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom");

1003 
no_md©
 = (
mp4
->
md©_©om
.
buf
 =
NULL
);

1005 i‡(
no_md©
 && 
mp4
->
°¨t
 == 0) {

1010  
NGX_DECLINED
;

1013 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

1015 i‡(
©om_d©a_size
 > 
mp4
->
buf„r_size
) {

1017 i‡(
©om_d©a_size
 > 
c⁄f
->
max_buf„r_size
) {

1018 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1021 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1022  
NGX_ERROR
;

1025 
	`ngx_p‰ì
(
mp4
->
ªque°
->
poﬁ
, mp4->
buf„r
);

1026 
mp4
->
buf„r
 = 
NULL
;

1027 
mp4
->
buf„r_pos
 = 
NULL
;

1028 
mp4
->
buf„r_íd
 = 
NULL
;

1030 
mp4
->
buf„r_size
 = (
size_t
Ë
©om_d©a_size


1031 + 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 * 
no_md©
;

1034 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
size_t
Ë
©om_d©a_size
Ë!
NGX_OK
) {

1035  
NGX_ERROR
;

1038 
mp4
->
åak
.
ñts
 = &mp4->
åaks
;

1039 
mp4
->
åak
.
size
 = (
ngx_hâp_mp4_åak_t
);

1040 
mp4
->
åak
.
«Œoc
 = 2;

1041 
mp4
->
åak
.
poﬁ
 = mp4->
ªque°
->pool;

1043 
©om
 = &
mp4
->
moov_©om_buf
;

1044 
©om
->
ãmp‹¨y
 = 1;

1045 
©om
->
pos
 = 
mp4
->
moov_©om_hódî
;

1046 
©om
->
œ°
 = 
mp4
->
moov_©om_hódî
 + 8;

1048 
mp4
->
moov_©om
.
buf
 = &mp4->
moov_©om_buf
;

1050 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_moov_©oms
, 
©om_d©a_size
);

1052 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom done");

1054 i‡(
no_md©
) {

1055 
mp4
->
buf„r_°¨t
 = mp4->
buf„r_pos
;

1056 
mp4
->
buf„r_size
 = 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
;

1058 i‡(
mp4
->
buf„r_°¨t
 + mp4->
buf„r_size
 > mp4->
buf„r_íd
) {

1059 
mp4
->
buf„r
 = 
NULL
;

1060 
mp4
->
buf„r_pos
 = 
NULL
;

1061 
mp4
->
buf„r_íd
 = 
NULL
;

1066 
mp4
->
off£t
 = mp4->
íd
;

1069  
rc
;

1070 
	}
}

1073 
ngx_öt_t


1074 
	$ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1076 
ngx_buf_t
 *
d©a
;

1078 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdatátom");

1080 
d©a
 = &
mp4
->
md©_d©a_buf
;

1081 
d©a
->
fûe
 = &
mp4
->file;

1082 
d©a
->
ö_fûe
 = 1;

1083 
d©a
->
œ°_buf
 = 1;

1084 
d©a
->
œ°_ö_chaö
 = 1;

1085 
d©a
->
fûe_œ°
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1087 
mp4
->
md©_©om
.
buf
 = &mp4->
md©_©om_buf
;

1088 
mp4
->
md©_©om
.
√xt
 = &mp4->
md©_d©a
;

1089 
mp4
->
md©_d©a
.
buf
 = 
d©a
;

1091 i‡(
mp4
->
åak
.
√…s
) {

1093 
mp4
->
off£t
 = mp4->
íd
;

1096 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1099  
NGX_OK
;

1100 
	}
}

1103 
size_t


1104 
	$ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
off_t
 
°¨t_off£t
)

1106 
off_t
 
©om_d©a_size
;

1107 
u_ch¨
 *
©om_hódî
;

1108 
uöt32_t
 
©om_hódî_size
;

1109 
uöt64_t
 
©om_size
;

1110 
ngx_buf_t
 *
©om
;

1112 
©om_d©a_size
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
 - 
°¨t_off£t
;

1113 
mp4
->
md©_d©a
.
buf
->
fûe_pos
 = 
°¨t_off£t
;

1115 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1116 "md©Çew off£à@%O:%O", 
°¨t_off£t
, 
©om_d©a_size
);

1118 
©om_hódî
 = 
mp4
->
md©_©om_hódî
;

1120 i‡((
uöt64_t
Ë
©om_d©a_size
 > 0xffffffff) {

1121 
©om_size
 = 1;

1122 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

1123 
	`ngx_mp4_£t_64vÆue
(
©om_hódî
 + (
ngx_mp4_©om_hódî_t
),

1124 (
ngx_mp4_©om_hódî64_t
Ë+ 
©om_d©a_size
);

1126 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ 
©om_d©a_size
;

1127 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

1130 
mp4
->
c⁄ã¡_Àngth
 +
©om_hódî_size
 + 
©om_d©a_size
;

1132 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1133 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'a', 't');

1135 
©om
 = &
mp4
->
md©_©om_buf
;

1136 
©om
->
ãmp‹¨y
 = 1;

1137 
©om
->
pos
 = 
©om_hódî
;

1138 
©om
->
œ°
 = 
©om_hódî
 + 
©om_hódî_size
;

1140  
©om_hódî_size
;

1141 
	}
}

1145 
u_ch¨
 
	msize
[4];

1146 
u_ch¨
 
	m«me
[4];

1147 
u_ch¨
 
	mvîsi⁄
[1];

1148 
u_ch¨
 
	mÊags
[3];

1149 
u_ch¨
 
	m¸óti⁄_time
[4];

1150 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1151 
u_ch¨
 
	mtimesˇÀ
[4];

1152 
u_ch¨
 
	mduøti⁄
[4];

1153 
u_ch¨
 
	møã
[4];

1154 
u_ch¨
 
	mvﬁume
[2];

1155 
u_ch¨
 
	mª£rved
[10];

1156 
u_ch¨
 
	mm©rix
[36];

1157 
u_ch¨
 
	m¥evõw_time
[4];

1158 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1159 
u_ch¨
 
	mpo°î_time
[4];

1160 
u_ch¨
 
	m£À˘i⁄_time
[4];

1161 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1162 
u_ch¨
 
	mcuºít_time
[4];

1163 
u_ch¨
 
	m√xt_åack_id
[4];

1164 } 
	tngx_mp4_mvhd_©om_t
;

1167 
u_ch¨
 
	msize
[4];

1168 
u_ch¨
 
	m«me
[4];

1169 
u_ch¨
 
	mvîsi⁄
[1];

1170 
u_ch¨
 
	mÊags
[3];

1171 
u_ch¨
 
	m¸óti⁄_time
[8];

1172 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1173 
u_ch¨
 
	mtimesˇÀ
[4];

1174 
u_ch¨
 
	mduøti⁄
[8];

1175 
u_ch¨
 
	møã
[4];

1176 
u_ch¨
 
	mvﬁume
[2];

1177 
u_ch¨
 
	mª£rved
[10];

1178 
u_ch¨
 
	mm©rix
[36];

1179 
u_ch¨
 
	m¥evõw_time
[4];

1180 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1181 
u_ch¨
 
	mpo°î_time
[4];

1182 
u_ch¨
 
	m£À˘i⁄_time
[4];

1183 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1184 
u_ch¨
 
	mcuºít_time
[4];

1185 
u_ch¨
 
	m√xt_åack_id
[4];

1186 } 
	tngx_mp4_mvhd64_©om_t
;

1189 
ngx_öt_t


1190 
	$ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1192 
u_ch¨
 *
©om_hódî
;

1193 
size_t
 
©om_size
;

1194 
uöt32_t
 
timesˇÀ
;

1195 
uöt64_t
 
duøti⁄
;

1196 
ngx_buf_t
 *
©om
;

1197 
ngx_mp4_mvhd_©om_t
 *
mvhd_©om
;

1198 
ngx_mp4_mvhd64_©om_t
 *
mvhd64_©om
;

1200 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mvhdátom");

1202 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1203 
mvhd_©om
 = (
ngx_mp4_mvhd_©om_t
 *Ë
©om_hódî
;

1204 
mvhd64_©om
 = (
ngx_mp4_mvhd64_©om_t
 *Ë
©om_hódî
;

1205 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'v', 'h', 'd');

1207 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd_©om_t
Ë> 
©om_d©a_size
) {

1208 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1209 "\"%s\" mp4 mvhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1210  
NGX_ERROR
;

1213 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1215 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->timescale);

1216 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->duration);

1221 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd64_©om_t
Ë> 
©om_d©a_size
) {

1222 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1224 
mp4
->
fûe
.
«me
.
d©a
);

1225  
NGX_ERROR
;

1228 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd64_©om
->timescale);

1229 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mvhd64_©om
->duration);

1232 
mp4
->
timesˇÀ
 =Åimescale;

1234 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1236 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1238 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1240 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1242 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1244 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1245 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
size
, 
©om_size
);

1247 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1248 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
duøti⁄
, duration);

1251 
	`ngx_mp4_£t_64vÆue
(
mvhd64_©om
->
duøti⁄
, duration);

1254 
©om
 = &
mp4
->
mvhd_©om_buf
;

1255 
©om
->
ãmp‹¨y
 = 1;

1256 
©om
->
pos
 = 
©om_hódî
;

1257 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1259 
mp4
->
mvhd_©om
.
buf
 = 
©om
;

1261 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1263  
NGX_OK
;

1264 
	}
}

1267 
ngx_öt_t


1268 
	$ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1270 
u_ch¨
 *
©om_hódî
, *
©om_íd
;

1271 
off_t
 
©om_fûe_íd
;

1272 
ngx_öt_t
 
rc
;

1273 
ngx_buf_t
 *
©om
;

1274 
ngx_hâp_mp4_åak_t
 *
åak
;

1276 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Årakátom");

1278 
åak
 = 
	`ngx_¨øy_push
(&
mp4
->trak);

1279 i‡(
åak
 =
NULL
) {

1280  
NGX_ERROR
;

1283 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1285 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1286 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 't', 'r', 'a', 'k');

1288 
©om
 = &
åak
->
åak_©om_buf
;

1289 
©om
->
ãmp‹¨y
 = 1;

1290 
©om
->
pos
 = 
©om_hódî
;

1291 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1293 
åak
->
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
buf
 = 
©om
;

1295 
©om_íd
 = 
mp4
->
buf„r_pos
 + 
©om_d©a_size
;

1296 
©om_fûe_íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1298 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_åak_©oms
, 
©om_d©a_size
);

1300 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1301 "mp4Åøkátom: %i", 
rc
);

1303 i‡(
rc
 =
NGX_DECLINED
) {

1305 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1306 
mp4
->
åak
.
√…s
--;

1307 
mp4
->
buf„r_pos
 = 
©om_íd
;

1308 
mp4
->
off£t
 = 
©om_fûe_íd
;

1309  
NGX_OK
;

1312  
rc
;

1313 
	}
}

1317 
	$ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1318 
ngx_hâp_mp4_åak_t
 *
åak
)

1320 
ngx_buf_t
 *
©om
;

1322 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1323 
©om
 = &
åak
->
åak_©om_buf
;

1324 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1325 
	}
}

1328 
ngx_öt_t


1329 
	$ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1331 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1333 
mp4
->
fûe
.
«me
.
d©a
);

1335  
NGX_ERROR
;

1336 
	}
}

1340 
u_ch¨
 
	msize
[4];

1341 
u_ch¨
 
	m«me
[4];

1342 
u_ch¨
 
	mvîsi⁄
[1];

1343 
u_ch¨
 
	mÊags
[3];

1344 
u_ch¨
 
	m¸óti⁄_time
[4];

1345 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1346 
u_ch¨
 
	måack_id
[4];

1347 
u_ch¨
 
	mª£rved1
[4];

1348 
u_ch¨
 
	mduøti⁄
[4];

1349 
u_ch¨
 
	mª£rved2
[8];

1350 
u_ch¨
 
	mœyî
[2];

1351 
u_ch¨
 
	mgroup
[2];

1352 
u_ch¨
 
	mvﬁume
[2];

1353 
u_ch¨
 
	mªvîved3
[2];

1354 
u_ch¨
 
	mm©rix
[36];

1355 
u_ch¨
 
	mwidth
[4];

1356 
u_ch¨
 
	mheigth
[4];

1357 } 
	tngx_mp4_tkhd_©om_t
;

1360 
u_ch¨
 
	msize
[4];

1361 
u_ch¨
 
	m«me
[4];

1362 
u_ch¨
 
	mvîsi⁄
[1];

1363 
u_ch¨
 
	mÊags
[3];

1364 
u_ch¨
 
	m¸óti⁄_time
[8];

1365 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1366 
u_ch¨
 
	måack_id
[4];

1367 
u_ch¨
 
	mª£rved1
[4];

1368 
u_ch¨
 
	mduøti⁄
[8];

1369 
u_ch¨
 
	mª£rved2
[8];

1370 
u_ch¨
 
	mœyî
[2];

1371 
u_ch¨
 
	mgroup
[2];

1372 
u_ch¨
 
	mvﬁume
[2];

1373 
u_ch¨
 
	mªvîved3
[2];

1374 
u_ch¨
 
	mm©rix
[36];

1375 
u_ch¨
 
	mwidth
[4];

1376 
u_ch¨
 
	mheigth
[4];

1377 } 
	tngx_mp4_tkhd64_©om_t
;

1380 
ngx_öt_t


1381 
	$ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1383 
u_ch¨
 *
©om_hódî
;

1384 
size_t
 
©om_size
;

1385 
uöt64_t
 
duøti⁄
;

1386 
ngx_buf_t
 *
©om
;

1387 
ngx_hâp_mp4_åak_t
 *
åak
;

1388 
ngx_mp4_tkhd_©om_t
 *
tkhd_©om
;

1389 
ngx_mp4_tkhd64_©om_t
 *
tkhd64_©om
;

1391 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Åkhdátom");

1393 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1394 
tkhd_©om
 = (
ngx_mp4_tkhd_©om_t
 *Ë
©om_hódî
;

1395 
tkhd64_©om
 = (
ngx_mp4_tkhd64_©om_t
 *Ë
©om_hódî
;

1396 
	`ngx_mp4_£t_©om_«me
(
tkhd_©om
, 't', 'k', 'h', 'd');

1398 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd_©om_t
Ë> 
©om_d©a_size
) {

1399 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1400 "\"%s\" mp4ÅkhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1401  
NGX_ERROR
;

1404 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1406 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
tkhd_©om
->duration);

1411 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd64_©om_t
Ë> 
©om_d©a_size
) {

1412 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1414 
mp4
->
fûe
.
«me
.
d©a
);

1415  
NGX_ERROR
;

1418 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
tkhd64_©om
->duration);

1421 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1423 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1425 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * mp4->
timesˇÀ
 / 1000;

1427 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1429 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1431 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1433 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1434 
åak
->
tkhd_size
 = 
©om_size
;

1436 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
size
, 
©om_size
);

1438 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1439 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
duøti⁄
, duration);

1442 
	`ngx_mp4_£t_64vÆue
(
tkhd64_©om
->
duøti⁄
, duration);

1445 
©om
 = &
åak
->
tkhd_©om_buf
;

1446 
©om
->
ãmp‹¨y
 = 1;

1447 
©om
->
pos
 = 
©om_hódî
;

1448 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1450 
åak
->
out
[
NGX_HTTP_MP4_TKHD_ATOM
].
buf
 = 
©om
;

1452 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1454  
NGX_OK
;

1455 
	}
}

1458 
ngx_öt_t


1459 
	$ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1461 
u_ch¨
 *
©om_hódî
;

1462 
ngx_buf_t
 *
©om
;

1463 
ngx_hâp_mp4_åak_t
 *
åak
;

1465 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process mdiaátom");

1467 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1468 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'i', 'a');

1470 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1472 
©om
 = &
åak
->
mdü_©om_buf
;

1473 
©om
->
ãmp‹¨y
 = 1;

1474 
©om
->
pos
 = 
©om_hódî
;

1475 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1477 
åak
->
out
[
NGX_HTTP_MP4_MDIA_ATOM
].
buf
 = 
©om
;

1479  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_mdü_©oms
, 
©om_d©a_size
);

1480 
	}
}

1484 
	$ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1485 
ngx_hâp_mp4_åak_t
 *
åak
)

1487 
ngx_buf_t
 *
©om
;

1489 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1490 
©om
 = &
åak
->
mdü_©om_buf
;

1491 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1492 
	}
}

1496 
u_ch¨
 
	msize
[4];

1497 
u_ch¨
 
	m«me
[4];

1498 
u_ch¨
 
	mvîsi⁄
[1];

1499 
u_ch¨
 
	mÊags
[3];

1500 
u_ch¨
 
	m¸óti⁄_time
[4];

1501 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1502 
u_ch¨
 
	mtimesˇÀ
[4];

1503 
u_ch¨
 
	mduøti⁄
[4];

1504 
u_ch¨
 
	mœnguage
[2];

1505 
u_ch¨
 
	mquÆôy
[2];

1506 } 
	tngx_mp4_mdhd_©om_t
;

1509 
u_ch¨
 
	msize
[4];

1510 
u_ch¨
 
	m«me
[4];

1511 
u_ch¨
 
	mvîsi⁄
[1];

1512 
u_ch¨
 
	mÊags
[3];

1513 
u_ch¨
 
	m¸óti⁄_time
[8];

1514 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1515 
u_ch¨
 
	mtimesˇÀ
[4];

1516 
u_ch¨
 
	mduøti⁄
[8];

1517 
u_ch¨
 
	mœnguage
[2];

1518 
u_ch¨
 
	mquÆôy
[2];

1519 } 
	tngx_mp4_mdhd64_©om_t
;

1522 
ngx_öt_t


1523 
	$ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1525 
u_ch¨
 *
©om_hódî
;

1526 
size_t
 
©om_size
;

1527 
uöt32_t
 
timesˇÀ
;

1528 
uöt64_t
 
duøti⁄
;

1529 
ngx_buf_t
 *
©om
;

1530 
ngx_hâp_mp4_åak_t
 *
åak
;

1531 
ngx_mp4_mdhd_©om_t
 *
mdhd_©om
;

1532 
ngx_mp4_mdhd64_©om_t
 *
mdhd64_©om
;

1534 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdhdátom");

1536 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1537 
mdhd_©om
 = (
ngx_mp4_mdhd_©om_t
 *Ë
©om_hódî
;

1538 
mdhd64_©om
 = (
ngx_mp4_mdhd64_©om_t
 *Ë
©om_hódî
;

1539 
	`ngx_mp4_£t_©om_«me
(
mdhd_©om
, 'm', 'd', 'h', 'd');

1541 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd_©om_t
Ë> 
©om_d©a_size
) {

1542 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1543 "\"%s\" mp4 mdhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1544  
NGX_ERROR
;

1547 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1549 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->timescale);

1550 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->duration);

1555 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd64_©om_t
Ë> 
©om_d©a_size
) {

1556 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1558 
mp4
->
fûe
.
«me
.
d©a
);

1559  
NGX_ERROR
;

1562 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd64_©om
->timescale);

1563 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mdhd64_©om
->duration);

1566 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1568 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1570 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1572 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1574 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1576 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1578 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1579 
åak
->
mdhd_size
 = 
©om_size
;

1580 
åak
->
timesˇÀ
 =Åimescale;

1582 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
size
, 
©om_size
);

1584 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1585 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
duøti⁄
, duration);

1588 
	`ngx_mp4_£t_64vÆue
(
mdhd64_©om
->
duøti⁄
, duration);

1591 
©om
 = &
åak
->
mdhd_©om_buf
;

1592 
©om
->
ãmp‹¨y
 = 1;

1593 
©om
->
pos
 = 
©om_hódî
;

1594 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1596 
åak
->
out
[
NGX_HTTP_MP4_MDHD_ATOM
].
buf
 = 
©om
;

1598 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1600  
NGX_OK
;

1601 
	}
}

1604 
ngx_öt_t


1605 
	$ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1607 
u_ch¨
 *
©om_hódî
;

1608 
size_t
 
©om_size
;

1609 
ngx_buf_t
 *
©om
;

1610 
ngx_hâp_mp4_åak_t
 *
åak
;

1612 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 hdlrátom");

1614 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1615 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1616 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1617 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'h', 'd', 'l', 'r');

1619 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1621 
©om
 = &
åak
->
hdÃ_©om_buf
;

1622 
©om
->
ãmp‹¨y
 = 1;

1623 
©om
->
pos
 = 
©om_hódî
;

1624 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1626 
åak
->
hdÃ_size
 = 
©om_size
;

1627 
åak
->
out
[
NGX_HTTP_MP4_HDLR_ATOM
].
buf
 = 
©om
;

1629 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1631  
NGX_OK
;

1632 
	}
}

1635 
ngx_öt_t


1636 
	$ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1638 
u_ch¨
 *
©om_hódî
;

1639 
ngx_buf_t
 *
©om
;

1640 
ngx_hâp_mp4_åak_t
 *
åak
;

1642 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process minfátom");

1644 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1645 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'i', 'n', 'f');

1647 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1649 
©om
 = &
åak
->
möf_©om_buf
;

1650 
©om
->
ãmp‹¨y
 = 1;

1651 
©om
->
pos
 = 
©om_hódî
;

1652 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1654 
åak
->
out
[
NGX_HTTP_MP4_MINF_ATOM
].
buf
 = 
©om
;

1656  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_möf_©oms
, 
©om_d©a_size
);

1657 
	}
}

1661 
	$ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1662 
ngx_hâp_mp4_åak_t
 *
åak
)

1664 
ngx_buf_t
 *
©om
;

1666 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
)

1667 + 
åak
->
vmhd_size


1668 + 
åak
->
smhd_size


1669 + 
åak
->
döf_size
;

1670 
©om
 = &
åak
->
möf_©om_buf
;

1671 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1672 
	}
}

1675 
ngx_öt_t


1676 
	$ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1678 
u_ch¨
 *
©om_hódî
;

1679 
size_t
 
©om_size
;

1680 
ngx_buf_t
 *
©om
;

1681 
ngx_hâp_mp4_åak_t
 *
åak
;

1683 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 vmhdátom");

1685 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1686 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1687 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1688 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'v', 'm', 'h', 'd');

1690 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1692 
©om
 = &
åak
->
vmhd_©om_buf
;

1693 
©om
->
ãmp‹¨y
 = 1;

1694 
©om
->
pos
 = 
©om_hódî
;

1695 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1697 
åak
->
vmhd_size
 +
©om_size
;

1698 
åak
->
out
[
NGX_HTTP_MP4_VMHD_ATOM
].
buf
 = 
©om
;

1700 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1702  
NGX_OK
;

1703 
	}
}

1706 
ngx_öt_t


1707 
	$ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1709 
u_ch¨
 *
©om_hódî
;

1710 
size_t
 
©om_size
;

1711 
ngx_buf_t
 *
©om
;

1712 
ngx_hâp_mp4_åak_t
 *
åak
;

1714 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 smhdátom");

1716 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1717 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1718 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1719 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 'm', 'h', 'd');

1721 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1723 
©om
 = &
åak
->
smhd_©om_buf
;

1724 
©om
->
ãmp‹¨y
 = 1;

1725 
©om
->
pos
 = 
©om_hódî
;

1726 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1728 
åak
->
vmhd_size
 +
©om_size
;

1729 
åak
->
out
[
NGX_HTTP_MP4_SMHD_ATOM
].
buf
 = 
©om
;

1731 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1733  
NGX_OK
;

1734 
	}
}

1737 
ngx_öt_t


1738 
	$ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1740 
u_ch¨
 *
©om_hódî
;

1741 
size_t
 
©om_size
;

1742 
ngx_buf_t
 *
©om
;

1743 
ngx_hâp_mp4_åak_t
 *
åak
;

1745 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 dinfátom");

1747 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1748 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1749 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1750 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'd', 'i', 'n', 'f');

1752 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1754 
©om
 = &
åak
->
döf_©om_buf
;

1755 
©om
->
ãmp‹¨y
 = 1;

1756 
©om
->
pos
 = 
©om_hódî
;

1757 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1759 
åak
->
döf_size
 +
©om_size
;

1760 
åak
->
out
[
NGX_HTTP_MP4_DINF_ATOM
].
buf
 = 
©om
;

1762 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1764  
NGX_OK
;

1765 
	}
}

1768 
ngx_öt_t


1769 
	$ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1771 
u_ch¨
 *
©om_hódî
;

1772 
ngx_buf_t
 *
©om
;

1773 
ngx_hâp_mp4_åak_t
 *
åak
;

1775 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process stblátom");

1777 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1778 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 't', 'b', 'l');

1780 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1782 
©om
 = &
åak
->
°bl_©om_buf
;

1783 
©om
->
ãmp‹¨y
 = 1;

1784 
©om
->
pos
 = 
©om_hódî
;

1785 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1787 
åak
->
out
[
NGX_HTTP_MP4_STBL_ATOM
].
buf
 = 
©om
;

1789  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_°bl_©oms
, 
©om_d©a_size
);

1790 
	}
}

1794 
	$ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1795 
ngx_hâp_mp4_åak_t
 *
åak
)

1797 
ngx_buf_t
 *
©om
;

1799 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1800 
©om
 = &
åak
->
°bl_©om_buf
;

1801 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1802 
	}
}

1806 
u_ch¨
 
	msize
[4];

1807 
u_ch¨
 
	m«me
[4];

1808 
u_ch¨
 
	mvîsi⁄
[1];

1809 
u_ch¨
 
	mÊags
[3];

1810 
u_ch¨
 
	míåõs
[4];

1812 
u_ch¨
 
	mmedü_size
[4];

1813 
u_ch¨
 
	mmedü_«me
[4];

1814 } 
	tngx_mp4_°sd_©om_t
;

1817 
ngx_öt_t


1818 
	$ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1820 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
;

1821 
size_t
 
©om_size
;

1822 
ngx_buf_t
 *
©om
;

1823 
ngx_mp4_°sd_©om_t
 *
°sd_©om
;

1824 
ngx_hâp_mp4_åak_t
 *
åak
;

1828 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stsdátom");

1830 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1831 
°sd_©om
 = (
ngx_mp4_°sd_©om_t
 *Ë
©om_hódî
;

1832 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1833 
©om_èbÀ
 = 
©om_hódî
 + 
©om_size
;

1834 
	`ngx_mp4_£t_32vÆue
(
°sd_©om
->
size
, 
©om_size
);

1835 
	`ngx_mp4_£t_©om_«me
(
°sd_©om
, 's', 't', 's', 'd');

1837 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sd_©om_t
Ë> 
©om_d©a_size
) {

1838 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1839 "\"%s\" mp4 stsdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1840  
NGX_ERROR
;

1843 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1845 
	`ngx_mp4_gë_32vÆue
(
°sd_©om
->
íåõs
),

1846 4, 
°sd_©om
->
medü_«me
);

1850 i‡(
	`ngx_°∫cmp
(
°sd_©om
->
medü_«me
, "avc1", 4) != 0

1851 && 
	`ngx_°∫cmp
(
°sd_©om
->
medü_«me
, "mp4a", 4) != 0)

1853  
NGX_DECLINED
;

1856 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1858 
©om
 = &
åak
->
°sd_©om_buf
;

1859 
©om
->
ãmp‹¨y
 = 1;

1860 
©om
->
pos
 = 
©om_hódî
;

1861 
©om
->
œ°
 = 
©om_èbÀ
;

1863 
åak
->
out
[
NGX_HTTP_MP4_STSD_ATOM
].
buf
 = 
©om
;

1864 
åak
->
size
 +
©om_size
;

1866 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1868  
NGX_OK
;

1869 
	}
}

1873 
u_ch¨
 
	msize
[4];

1874 
u_ch¨
 
	m«me
[4];

1875 
u_ch¨
 
	mvîsi⁄
[1];

1876 
u_ch¨
 
	mÊags
[3];

1877 
u_ch¨
 
	míåõs
[4];

1878 } 
	tngx_mp4_°ts_©om_t
;

1881 
u_ch¨
 
	mcou¡
[4];

1882 
u_ch¨
 
	mduøti⁄
[4];

1883 } 
	tngx_mp4_°ts_íåy_t
;

1886 
ngx_öt_t


1887 
	$ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1889 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

1890 
uöt32_t
 
íåõs
;

1891 
ngx_buf_t
 *
©om
, *
d©a
;

1892 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

1893 
ngx_hâp_mp4_åak_t
 *
åak
;

1897 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 sttsátom");

1899 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1900 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om_hódî
;

1901 
	`ngx_mp4_£t_©om_«me
(
°ts_©om
, 's', 't', 't', 's');

1903 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
Ë> 
©om_d©a_size
) {

1904 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1905 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1906  
NGX_ERROR
;

1909 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ts_©om
->entries);

1911 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1912 "mp4Åime-to-ßm∂êíåõs:%uD", 
íåõs
);

1914 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
)

1915 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
Ë> 
©om_d©a_size
)

1917 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1918 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1919  
NGX_ERROR
;

1922 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°ts_©om_t
);

1923 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
);

1925 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1926 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

1928 
©om
 = &
åak
->
°ts_©om_buf
;

1929 
©om
->
ãmp‹¨y
 = 1;

1930 
©om
->
pos
 = 
©om_hódî
;

1931 
©om
->
œ°
 = 
©om_èbÀ
;

1933 
d©a
 = &
åak
->
°ts_d©a_buf
;

1934 
d©a
->
ãmp‹¨y
 = 1;

1935 
d©a
->
pos
 = 
©om_èbÀ
;

1936 
d©a
->
œ°
 = 
©om_íd
;

1938 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
 = 
©om
;

1939 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
 = 
d©a
;

1941 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1943  
NGX_OK
;

1944 
	}
}

1947 
ngx_öt_t


1948 
	$ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1949 
ngx_hâp_mp4_åak_t
 *
åak
)

1951 
size_t
 
©om_size
;

1952 
uöt32_t
 
íåõs
, 
cou¡
, 
duøti⁄
;

1953 
uöt64_t
 
°¨t_time
;

1954 
ngx_buf_t
 *
©om
, *
d©a
;

1955 
ngx_uöt_t
 
°¨t_ßm∂e
;

1956 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

1957 
ngx_mp4_°ts_íåy_t
 *
íåy
, *
íd
;

1964 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1967 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

1969 i‡(
d©a
 =
NULL
) {

1970 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1972 
mp4
->
fûe
.
«me
.
d©a
);

1973  
NGX_ERROR
;

1976 
íåõs
 = 
åak
->
time_to_ßm∂e_íåõs
;

1977 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
åak
->
timesˇÀ
 / 1000;

1979 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1980 "time-to-ßm∂ê°¨t_time:%uL", 
°¨t_time
);

1982 
°¨t_ßm∂e
 = 0;

1983 
íåy
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
pos
;

1984 
íd
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
œ°
;

1986 
íåy
 < 
íd
) {

1987 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

1988 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->duration);

1990 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1991 "cou¡:%uD, duøti⁄:%uD", 
cou¡
, 
duøti⁄
);

1993 i‡(
°¨t_time
 < (
uöt64_t
Ë
cou¡
 * 
duøti⁄
) {

1994 
°¨t_ßm∂e
 +(
ngx_uöt_t
Ë(
°¨t_time
 / 
duøti⁄
);

1995 
cou¡
 -(
uöt32_t
Ë(
°¨t_time
 / 
duøti⁄
);

1996 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, count);

1997 
found
;

2000 
°¨t_ßm∂e
 +
cou¡
;

2001 
°¨t_time
 -
cou¡
 * 
duøti⁄
;

2002 
íåõs
--;

2003 
íåy
++;

2006 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2008 
mp4
->
fûe
.
«me
.
d©a
);

2010  
NGX_ERROR
;

2012 
found
:

2014 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2015 "°¨t_ßm∂e:%ui,Çew cou¡:%uD", 
°¨t_ßm∂e
, 
cou¡
);

2017 
åak
->
°¨t_ßm∂e
 = start_sample;

2019 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2020 
©om_size
 = (
ngx_mp4_°ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2021 
åak
->
size
 +
©om_size
;

2023 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
;

2024 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om
->
pos
;

2025 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
size
, 
©om_size
);

2026 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
íåõs
,Éntries);

2028  
NGX_OK
;

2029 
	}
}

2033 
u_ch¨
 
	msize
[4];

2034 
u_ch¨
 
	m«me
[4];

2035 
u_ch¨
 
	mvîsi⁄
[1];

2036 
u_ch¨
 
	mÊags
[3];

2037 
u_ch¨
 
	míåõs
[4];

2038 } 
	tngx_hâp_mp4_°ss_©om_t
;

2041 
ngx_öt_t


2042 
	$ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2044 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2045 
uöt32_t
 
íåõs
;

2046 
ngx_buf_t
 *
©om
, *
d©a
;

2047 
ngx_hâp_mp4_åak_t
 *
åak
;

2048 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2052 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stssátom");

2054 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2055 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om_hódî
;

2056 
	`ngx_mp4_£t_©om_«me
(
°ss_©om
, 's', 't', 's', 's');

2058 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
Ë> 
©om_d©a_size
) {

2059 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2060 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2061  
NGX_ERROR
;

2064 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ss_©om
->entries);

2066 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2067 "syn¯ßm∂êíåõs:%uD", 
íåõs
);

2069 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2070 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2072 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_hâp_mp4_°ss_©om_t
);

2074 
©om
 = &
åak
->
°ss_©om_buf
;

2075 
©om
->
ãmp‹¨y
 = 1;

2076 
©om
->
pos
 = 
©om_hódî
;

2077 
©om
->
œ°
 = 
©om_èbÀ
;

2079 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
)

2080 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2082 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2083 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2084  
NGX_ERROR
;

2087 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2089 
d©a
 = &
åak
->
°ss_d©a_buf
;

2090 
d©a
->
ãmp‹¨y
 = 1;

2091 
d©a
->
pos
 = 
©om_èbÀ
;

2092 
d©a
->
œ°
 = 
©om_íd
;

2094 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
 = 
©om
;

2095 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
d©a
;

2097 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2099  
NGX_OK
;

2100 
	}
}

2103 
ngx_öt_t


2104 
	$ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2105 
ngx_hâp_mp4_åak_t
 *
åak
)

2107 
size_t
 
©om_size
;

2108 
uöt32_t
 
íåõs
, 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2109 
ngx_buf_t
 *
©om
, *
d©a
;

2110 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2118 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2121 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2123 i‡(
d©a
 =
NULL
) {

2124  
NGX_OK
;

2128 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2129 
íåõs
 = 
åak
->
sync_ßm∂es_íåõs
;

2131 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2132 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2134 
íåy
 < 
íd
) {

2135 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2137 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2138 "°¨t:%uD, sync:%uD", 
°¨t_ßm∂e
, 
ßm∂e
);

2140 i‡(
ßm∂e
 >
°¨t_ßm∂e
) {

2141 
found
;

2144 
íåõs
--;

2145 
íåy
++;

2148 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2150 
mp4
->
fûe
.
«me
.
d©a
);

2152  
NGX_ERROR
;

2154 
found
:

2156 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2158 
°¨t_ßm∂e
 = 
åak
->start_sample;

2160 
íåy
 < 
íd
) {

2161 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2162 
ßm∂e
 -
°¨t_ßm∂e
;

2163 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
ßm∂e
);

2164 
íåy
++;

2167 
©om_size
 = (
ngx_hâp_mp4_°ss_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2168 
åak
->
size
 +
©om_size
;

2170 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
;

2171 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om
->
pos
;

2173 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
size
, 
©om_size
);

2174 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
íåõs
,Éntries);

2176  
NGX_OK
;

2177 
	}
}

2181 
u_ch¨
 
	msize
[4];

2182 
u_ch¨
 
	m«me
[4];

2183 
u_ch¨
 
	mvîsi⁄
[1];

2184 
u_ch¨
 
	mÊags
[3];

2185 
u_ch¨
 
	míåõs
[4];

2186 } 
	tngx_mp4_˘ts_©om_t
;

2189 
u_ch¨
 
	mcou¡
[4];

2190 
u_ch¨
 
	moff£t
[4];

2191 } 
	tngx_mp4_˘ts_íåy_t
;

2194 
ngx_öt_t


2195 
	$ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2197 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2198 
uöt32_t
 
íåõs
;

2199 
ngx_buf_t
 *
©om
, *
d©a
;

2200 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2201 
ngx_hâp_mp4_åak_t
 *
åak
;

2205 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 cttsátom");

2207 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2208 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om_hódî
;

2209 
	`ngx_mp4_£t_©om_«me
(
˘ts_©om
, 'c', 't', 't', 's');

2211 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
Ë> 
©om_d©a_size
) {

2212 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2213 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2214  
NGX_ERROR
;

2217 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
˘ts_©om
->entries);

2219 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2220 "composôi⁄ off£àíåõs:%uD", 
íåõs
);

2222 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2223 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2225 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_˘ts_©om_t
);

2227 
©om
 = &
åak
->
˘ts_©om_buf
;

2228 
©om
->
ãmp‹¨y
 = 1;

2229 
©om
->
pos
 = 
©om_hódî
;

2230 
©om
->
œ°
 = 
©om_èbÀ
;

2232 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
)

2233 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
Ë> 
©om_d©a_size
)

2235 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2236 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2237  
NGX_ERROR
;

2240 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
);

2242 
d©a
 = &
åak
->
˘ts_d©a_buf
;

2243 
d©a
->
ãmp‹¨y
 = 1;

2244 
d©a
->
pos
 = 
©om_èbÀ
;

2245 
d©a
->
œ°
 = 
©om_íd
;

2247 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
©om
;

2248 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
d©a
;

2250 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2252  
NGX_OK
;

2253 
	}
}

2257 
	$ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2258 
ngx_hâp_mp4_åak_t
 *
åak
)

2260 
size_t
 
©om_size
;

2261 
uöt32_t
 
íåõs
, 
cou¡
, 
°¨t_ßm∂e
;

2262 
ngx_buf_t
 *
©om
, *
d©a
;

2263 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2264 
ngx_mp4_˘ts_íåy_t
 *
íåy
, *
íd
;

2272 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2275 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2277 i‡(
d©a
 =
NULL
) {

2282 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2283 
íåõs
 = 
åak
->
composôi⁄_off£t_íåõs
;

2284 
íåy
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
pos
;

2285 
íd
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
œ°
;

2287 
íåy
 < 
íd
) {

2288 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2290 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2292 
°¨t_ßm∂e
, 
cou¡
, 
	`ngx_mp4_gë_32vÆue
(
íåy
->
off£t
));

2294 i‡(
°¨t_ßm∂e
 <
cou¡
) {

2295 
cou¡
 -(
°¨t_ßm∂e
 - 1);

2296 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, count);

2297 
found
;

2300 
°¨t_ßm∂e
 -
cou¡
;

2301 
íåõs
--;

2302 
íåy
++;

2305 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
NULL
;

2306 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
NULL
;

2310 
found
:

2312 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2313 
©om_size
 = (
ngx_mp4_˘ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2314 
åak
->
size
 +
©om_size
;

2316 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
;

2317 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om
->
pos
;

2319 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
size
, 
©om_size
);

2320 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
íåõs
,Éntries);

2323 
	}
}

2327 
u_ch¨
 
	msize
[4];

2328 
u_ch¨
 
	m«me
[4];

2329 
u_ch¨
 
	mvîsi⁄
[1];

2330 
u_ch¨
 
	mÊags
[3];

2331 
u_ch¨
 
	míåõs
[4];

2332 } 
	tngx_mp4_°sc_©om_t
;

2335 
ngx_öt_t


2336 
	$ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2338 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2339 
uöt32_t
 
íåõs
;

2340 
ngx_buf_t
 *
©om
, *
d©a
;

2341 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2342 
ngx_hâp_mp4_åak_t
 *
åak
;

2346 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stscátom");

2348 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2349 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om_hódî
;

2350 
	`ngx_mp4_£t_©om_«me
(
°sc_©om
, 's', 't', 's', 'c');

2352 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
Ë> 
©om_d©a_size
) {

2353 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2354 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2355  
NGX_ERROR
;

2358 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sc_©om
->entries);

2360 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2361 "ßm∂e-to-chunkÉ¡rõs:%uD", 
íåõs
);

2363 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
)

2364 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
Ë> 
©om_d©a_size
)

2366 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2367 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2368  
NGX_ERROR
;

2371 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sc_©om_t
);

2372 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2374 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2375 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2377 
©om
 = &
åak
->
°sc_©om_buf
;

2378 
©om
->
ãmp‹¨y
 = 1;

2379 
©om
->
pos
 = 
©om_hódî
;

2380 
©om
->
œ°
 = 
©om_èbÀ
;

2382 
d©a
 = &
åak
->
°sc_d©a_buf
;

2383 
d©a
->
ãmp‹¨y
 = 1;

2384 
d©a
->
pos
 = 
©om_èbÀ
;

2385 
d©a
->
œ°
 = 
©om_íd
;

2387 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
 = 
©om
;

2388 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
 = 
d©a
;

2390 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2392  
NGX_OK
;

2393 
	}
}

2396 
ngx_öt_t


2397 
	$ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2398 
ngx_hâp_mp4_åak_t
 *
åak
)

2400 
size_t
 
©om_size
;

2401 
uöt32_t
 
°¨t_ßm∂e
, 
íåõs
, 
chunk
, 
ßm∂es
, 
id
,

2402 
√xt_chunk
, 
n
;

2403 
ngx_buf_t
 *
©om
, *
d©a
, *
buf
;

2404 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2405 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
fú°
, *
íd
;

2413 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2416 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2418 i‡(
d©a
 =
NULL
) {

2419 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2421 
mp4
->
fûe
.
«me
.
d©a
);

2422  
NGX_ERROR
;

2425 i‡(
åak
->
ßm∂e_to_chunk_íåõs
 == 0) {

2426 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2428 
mp4
->
fûe
.
«me
.
d©a
);

2429  
NGX_ERROR
;

2432 
°¨t_ßm∂e
 = (
uöt32_t
Ë
åak
->start_sample;

2433 
íåõs
 = 
åak
->
ßm∂e_to_chunk_íåõs
 - 1;

2435 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2436 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2438 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2439 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2440 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2441 
íåy
++;

2443 
íåy
 < 
íd
) {

2445 
√xt_chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->
chunk
);

2447 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2450 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
, 
id
);

2452 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2454 i‡(
°¨t_ßm∂e
 <
n
) {

2455 
found
;

2458 
°¨t_ßm∂e
 -
n
;

2460 
chunk
 = 
√xt_chunk
;

2461 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2462 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2463 
íåõs
--;

2464 
íåy
++;

2467 
√xt_chunk
 = 
åak
->
chunks
;

2469 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2471 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
);

2473 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2475 i‡(
°¨t_ßm∂e
 > 
n
) {

2476 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2478 
mp4
->
fûe
.
«me
.
d©a
);

2479  
NGX_ERROR
;

2482 
found
:

2484 
íåõs
++;

2485 
íåy
--;

2487 i‡(
ßm∂es
 == 0) {

2488 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2490 
mp4
->
fûe
.
«me
.
d©a
);

2491  
NGX_ERROR
;

2494 
åak
->
°¨t_chunk
 = 
chunk
 - 1;

2496 
åak
->
°¨t_chunk
 +
°¨t_ßm∂e
 / 
ßm∂es
;

2497 
åak
->
chunk_ßm∂es
 = 
°¨t_ßm∂e
 % 
ßm∂es
;

2499 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2501 
åak
->
°¨t_chunk
,Åøk->
chunk_ßm∂es
);

2503 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2504 
©om_size
 = (
ngx_mp4_°sc_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2506 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 1);

2508 i‡(
åak
->
chunk_ßm∂es
 && 
√xt_chunk
 -Åøk->
°¨t_chunk
 == 2) {

2512 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, sam∂e†- 
åak
->
chunk_ßm∂es
);

2514 } i‡(
åak
->
chunk_ßm∂es
) {

2516 
fú°
 = &
åak
->
°sc_chunk_íåy
;

2517 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 1);

2518 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, sam∂e†- 
åak
->
chunk_ßm∂es
);

2519 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2521 
buf
 = &
åak
->
°sc_chunk_buf
;

2522 
buf
->
ãmp‹¨y
 = 1;

2523 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2524 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2526 
åak
->
out
[
NGX_HTTP_MP4_STSC_CHUNK
].
buf
 = buf;

2528 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 2);

2530 
íåõs
++;

2531 
©om_size
 +(
ngx_mp4_°sc_íåy_t
);

2534 ++
íåy
 < 
íd
) {

2535 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2536 
chunk
 -
åak
->
°¨t_chunk
;

2537 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, chunk);

2540 
åak
->
size
 +
©om_size
;

2542 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
;

2543 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om
->
pos
;

2545 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
size
, 
©om_size
);

2546 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
íåõs
,Éntries);

2548  
NGX_OK
;

2549 
	}
}

2553 
u_ch¨
 
	msize
[4];

2554 
u_ch¨
 
	m«me
[4];

2555 
u_ch¨
 
	mvîsi⁄
[1];

2556 
u_ch¨
 
	mÊags
[3];

2557 
u_ch¨
 
	munif‹m_size
[4];

2558 
u_ch¨
 
	míåõs
[4];

2559 } 
	tngx_mp4_°sz_©om_t
;

2562 
ngx_öt_t


2563 
	$ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2565 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2566 
size_t
 
©om_size
;

2567 
uöt32_t
 
íåõs
, 
size
;

2568 
ngx_buf_t
 *
©om
, *
d©a
;

2569 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2570 
ngx_hâp_mp4_åak_t
 *
åak
;

2574 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stszátom");

2576 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2577 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om_hódî
;

2578 
	`ngx_mp4_£t_©om_«me
(
°sz_©om
, 's', 't', 's', 'z');

2580 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
Ë> 
©om_d©a_size
) {

2581 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2582 "\"%s\" mp4 stszátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2583  
NGX_ERROR
;

2586 
size
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->
unif‹m_size
);

2587 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->entries);

2589 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2590 "ßm∂êunif‹m size:%uD,É¡rõs:%uD", 
size
, 
íåõs
);

2592 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2593 
åak
->
ßm∂e_sizes_íåõs
 = 
íåõs
;

2595 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sz_©om_t
);

2597 
©om
 = &
åak
->
°sz_©om_buf
;

2598 
©om
->
ãmp‹¨y
 = 1;

2599 
©om
->
pos
 = 
©om_hódî
;

2600 
©om
->
œ°
 = 
©om_èbÀ
;

2602 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
 = 
©om
;

2604 i‡(
size
 == 0) {

2605 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
)

2606 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2608 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2610 
mp4
->
fûe
.
«me
.
d©a
);

2611  
NGX_ERROR
;

2614 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2616 
d©a
 = &
åak
->
°sz_d©a_buf
;

2617 
d©a
->
ãmp‹¨y
 = 1;

2618 
d©a
->
pos
 = 
©om_èbÀ
;

2619 
d©a
->
œ°
 = 
©om_íd
;

2621 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
 = 
d©a
;

2626 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

2627 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

2628 
åak
->
size
 +
©om_size
;

2631 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2633  
NGX_OK
;

2634 
	}
}

2637 
ngx_öt_t


2638 
	$ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2639 
ngx_hâp_mp4_åak_t
 *
åak
)

2641 
size_t
 
©om_size
;

2642 
uöt32_t
 *
pos
, *
íd
;

2643 
ngx_buf_t
 *
©om
, *
d©a
;

2644 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2652 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2655 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
;

2657 i‡(
d©a
) {

2658 i‡(
åak
->
°¨t_ßm∂e
 >Åøk->
ßm∂e_sizes_íåõs
) {

2659 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2661 
mp4
->
fûe
.
«me
.
d©a
);

2662  
NGX_ERROR
;

2665 
d©a
->
pos
 +
åak
->
°¨t_ßm∂e
 * (
uöt32_t
);

2666 
íd
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2668 
pos
 = 
íd
 - 
åak
->
chunk_ßm∂es
;Öos <Énd;Öos++) {

2669 
åak
->
chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

2672 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2673 "chunk sam∂e†sizes:%uL", 
åak
->
chunk_ßm∂es_size
);

2675 
©om_size
 = (
ngx_mp4_°sz_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2676 
åak
->
size
 +
©om_size
;

2678 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
;

2679 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om
->
pos
;

2681 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
size
, 
©om_size
);

2682 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
íåõs
,

2683 
åak
->
ßm∂e_sizes_íåõs
 -Åøk->
°¨t_ßm∂e
);

2686  
NGX_OK
;

2687 
	}
}

2691 
u_ch¨
 
	msize
[4];

2692 
u_ch¨
 
	m«me
[4];

2693 
u_ch¨
 
	mvîsi⁄
[1];

2694 
u_ch¨
 
	mÊags
[3];

2695 
u_ch¨
 
	míåõs
[4];

2696 } 
	tngx_mp4_°co_©om_t
;

2699 
ngx_öt_t


2700 
	$ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2702 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2703 
uöt32_t
 
íåõs
;

2704 
ngx_buf_t
 *
©om
, *
d©a
;

2705 
ngx_mp4_°co_©om_t
 *
°co_©om
;

2706 
ngx_hâp_mp4_åak_t
 *
åak
;

2710 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stcoátom");

2712 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2713 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om_hódî
;

2714 
	`ngx_mp4_£t_©om_«me
(
°co_©om
, 's', 't', 'c', 'o');

2716 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
Ë> 
©om_d©a_size
) {

2717 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2718 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2719  
NGX_ERROR
;

2722 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°co_©om
->entries);

2724 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

2726 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
)

2727 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2729 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2730 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2731  
NGX_ERROR
;

2734 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°co_©om_t
);

2735 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2737 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2738 
åak
->
chunks
 = 
íåõs
;

2740 
©om
 = &
åak
->
°co_©om_buf
;

2741 
©om
->
ãmp‹¨y
 = 1;

2742 
©om
->
pos
 = 
©om_hódî
;

2743 
©om
->
œ°
 = 
©om_èbÀ
;

2745 
d©a
 = &
åak
->
°co_d©a_buf
;

2746 
d©a
->
ãmp‹¨y
 = 1;

2747 
d©a
->
pos
 = 
©om_èbÀ
;

2748 
d©a
->
œ°
 = 
©om_íd
;

2750 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
 = 
©om
;

2751 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
 = 
d©a
;

2753 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2755  
NGX_OK
;

2756 
	}
}

2759 
ngx_öt_t


2760 
	$ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2761 
ngx_hâp_mp4_åak_t
 *
åak
)

2763 
size_t
 
©om_size
;

2764 
ngx_buf_t
 *
©om
, *
d©a
;

2765 
ngx_mp4_°co_©om_t
 *
°co_©om
;

2773 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2776 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

2778 i‡(
d©a
 =
NULL
) {

2779 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2781 
mp4
->
fûe
.
«me
.
d©a
);

2782  
NGX_ERROR
;

2785 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

2786 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2788 
mp4
->
fûe
.
«me
.
d©a
);

2789  
NGX_ERROR
;

2792 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt32_t
);

2793 
©om_size
 = (
ngx_mp4_°co_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2794 
åak
->
size
 +
©om_size
;

2796 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_32vÆue
(
d©a
->
pos
);

2797 
åak
->
°¨t_off£t
 +åak->
chunk_ßm∂es_size
;

2798 
	`ngx_mp4_£t_32vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

2800 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2801 "°¨àchunk off£t:%uD", 
åak
->
°¨t_off£t
);

2803 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
;

2804 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om
->
pos
;

2806 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
size
, 
©om_size
);

2807 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
íåõs
, 
åak
->
chunks
 -Åøk->
°¨t_chunk
);

2809  
NGX_OK
;

2810 
	}
}

2814 
	$ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2815 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
)

2817 
uöt32_t
 
off£t
, *
íåy
, *
íd
;

2818 
ngx_buf_t
 *
d©a
;

2825 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2828 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

2829 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2830 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2832 
íåy
 < 
íd
) {

2833 
off£t
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2834 
off£t
 +
adju°mít
;

2835 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
off£t
);

2836 
íåy
++;

2838 
	}
}

2842 
u_ch¨
 
	msize
[4];

2843 
u_ch¨
 
	m«me
[4];

2844 
u_ch¨
 
	mvîsi⁄
[1];

2845 
u_ch¨
 
	mÊags
[3];

2846 
u_ch¨
 
	míåõs
[4];

2847 } 
	tngx_mp4_co64_©om_t
;

2850 
ngx_öt_t


2851 
	$ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2853 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2854 
uöt32_t
 
íåõs
;

2855 
ngx_buf_t
 *
©om
, *
d©a
;

2856 
ngx_mp4_co64_©om_t
 *
co64_©om
;

2857 
ngx_hâp_mp4_åak_t
 *
åak
;

2861 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 co64átom");

2863 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2864 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om_hódî
;

2865 
	`ngx_mp4_£t_©om_«me
(
co64_©om
, 'c', 'o', '6', '4');

2867 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
Ë> 
©om_d©a_size
) {

2868 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2869 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2870  
NGX_ERROR
;

2873 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
co64_©om
->entries);

2875 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

2877 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
)

2878 + 
íåõs
 * (
uöt64_t
Ë> 
©om_d©a_size
)

2880 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2881 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2882  
NGX_ERROR
;

2885 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_co64_©om_t
);

2886 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt64_t
);

2888 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2889 
åak
->
chunks
 = 
íåõs
;

2891 
©om
 = &
åak
->
co64_©om_buf
;

2892 
©om
->
ãmp‹¨y
 = 1;

2893 
©om
->
pos
 = 
©om_hódî
;

2894 
©om
->
œ°
 = 
©om_èbÀ
;

2896 
d©a
 = &
åak
->
co64_d©a_buf
;

2897 
d©a
->
ãmp‹¨y
 = 1;

2898 
d©a
->
pos
 = 
©om_èbÀ
;

2899 
d©a
->
œ°
 = 
©om_íd
;

2901 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
 = 
©om
;

2902 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
 = 
d©a
;

2904 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2906  
NGX_OK
;

2907 
	}
}

2910 
ngx_öt_t


2911 
	$ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2912 
ngx_hâp_mp4_åak_t
 *
åak
)

2914 
size_t
 
©om_size
;

2915 
ngx_buf_t
 *
©om
, *
d©a
;

2916 
ngx_mp4_co64_©om_t
 *
co64_©om
;

2924 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2927 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

2929 i‡(
d©a
 =
NULL
) {

2930 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2932 
mp4
->
fûe
.
«me
.
d©a
);

2933  
NGX_ERROR
;

2936 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

2937 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2939 
mp4
->
fûe
.
«me
.
d©a
);

2940  
NGX_ERROR
;

2943 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt64_t
);

2944 
©om_size
 = (
ngx_mp4_co64_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2945 
åak
->
size
 +
©om_size
;

2947 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_64vÆue
(
d©a
->
pos
);

2948 
åak
->
°¨t_off£t
 +åak->
chunk_ßm∂es_size
;

2949 
	`ngx_mp4_£t_64vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

2951 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2952 "°¨àchunk off£t:%uL", 
åak
->
°¨t_off£t
);

2954 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
;

2955 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om
->
pos
;

2957 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
size
, 
©om_size
);

2958 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
íåõs
, 
åak
->
chunks
 -Åøk->
°¨t_chunk
);

2960  
NGX_OK
;

2961 
	}
}

2965 
	$ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2966 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
)

2968 
uöt64_t
 
off£t
, *
íåy
, *
íd
;

2969 
ngx_buf_t
 *
d©a
;

2976 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2979 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

2980 
íåy
 = (
uöt64_t
 *Ë
d©a
->
pos
;

2981 
íd
 = (
uöt64_t
 *Ë
d©a
->
œ°
;

2983 
íåy
 < 
íd
) {

2984 
off£t
 = 
	`ngx_mp4_gë_64vÆue
(
íåy
);

2985 
off£t
 +
adju°mít
;

2986 
	`ngx_mp4_£t_64vÆue
(
íåy
, 
off£t
);

2987 
íåy
++;

2989 
	}
}

2993 
	$ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2995 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2997 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2998 
˛cf
->
h™dÀr
 = 
ngx_hâp_mp4_h™dÀr
;

3000  
NGX_CONF_OK
;

3001 
	}
}

3005 
	$ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3007 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

3009 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_mp4_c⁄f_t
));

3010 i‡(
c⁄f
 =
NULL
) {

3011  
NULL
;

3014 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3015 
c⁄f
->
max_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3017  
c⁄f
;

3018 
	}
}

3022 
	$ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3024 
ngx_hâp_mp4_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3025 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
 = 
chûd
;

3027 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size, 512 * 1024);

3028 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_buf„r_size
, 
¥ev
->max_buffer_size,

3031  
NGX_CONF_OK
;

3032 
	}
}

	@src/http/modules/ngx_http_not_modified_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_ã°_¥ec⁄dôi⁄
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_ã°_nŸ_modifõd
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_nŸ_modifõd_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL


33 
ngx_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

52 
ngx_öt_t


53 
	$ngx_hâp_nŸ_modifõd_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

55 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


56 || 
r
 !r->
maö


57 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

59  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

62 i‡(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
) {

63  
	`ngx_hâp_ã°_¥ec⁄dôi⁄
(
r
);

66 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚
) {

67  
	`ngx_hâp_ã°_nŸ_modifõd
(
r
);

70  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

71 
	}
}

74 
ngx_öt_t


75 
	$ngx_hâp_ã°_¥ec⁄dôi⁄
(
ngx_hâp_ªque°_t
 *
r
)

77 
time_t
 
iums
;

79 
iums
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
d©a
,

80 
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
Àn
);

82 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

83 "hâ∞iums:%dÜm:%d", 
iums
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

85 i‡(
iums
 >
r
->
hódîs_out
.
œ°_modifõd_time
) {

86  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

89  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

90 
NGX_HTTP_PRECONDITION_FAILED
);

91 
	}
}

94 
ngx_öt_t


95 
	$ngx_hâp_ã°_nŸ_modifõd
(
ngx_hâp_ªque°_t
 *
r
)

97 
time_t
 
ims
;

98 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

100 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

102 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_OFF
) {

103  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

106 
ims
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
d©a
,

107 
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
Àn
);

109 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

110 "hâ∞ims:%dÜm:%d", 
ims
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

112 i‡(
ims
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

114 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_EXACT


115 || 
ims
 < 
r
->
hódîs_out
.
œ°_modifõd_time
)

117  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

121 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_NOT_MODIFIED
;

122 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

123 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

124 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

125 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

127 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög
) {

128 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

129 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

132  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

133 
	}
}

136 
ngx_öt_t


137 
	$ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

139 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

140 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_nŸ_modifõd_hódî_fûãr
;

142  
NGX_OK
;

143 
	}
}

	@src/http/modules/ngx_http_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_¥oxy_ªwrôe_s
 
	tngx_hâp_¥oxy_ªwrôe_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_¥oxy_ªwrôe_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tsize_t
 
	t¥efix
, size_à
	tÀn
,

17 
	tngx_hâp_¥oxy_ªwrôe_t
 *
	t¥
);

19 
	sngx_hâp_¥oxy_ªwrôe_s
 {

20 
ngx_hâp_¥oxy_ªwrôe_±
 
h™dÀr
;

23 
ngx_hâp_com∂ex_vÆue_t
 
com∂ex
;

24 #i‡(
NGX_PCRE
)

25 
ngx_hâp_ªgex_t
 *
ªgex
;

27 } 
∑âîn
;

29 
ngx_hâp_com∂ex_vÆue_t
 
ª∂a˚mít
;

34 
ngx_°r_t
 
key_°¨t
;

35 
ngx_°r_t
 
schema
;

36 
ngx_°r_t
 
ho°_hódî
;

37 
ngx_°r_t
 
p‹t
;

38 
ngx_°r_t
 
uri
;

39 } 
	tngx_hâp_¥oxy_v¨s_t
;

43 
ngx_hâp_up°ªam_c⁄f_t
 
up°ªam
;

45 
ngx_¨øy_t
 *
Êushes
;

46 
ngx_¨øy_t
 *
body_£t_Àn
;

47 
ngx_¨øy_t
 *
body_£t
;

48 
ngx_¨øy_t
 *
hódîs_£t_Àn
;

49 
ngx_¨øy_t
 *
hódîs_£t
;

50 
ngx_hash_t
 
hódîs_£t_hash
;

52 
ngx_¨øy_t
 *
hódîs_sour˚
;

54 
ngx_¨øy_t
 *
¥oxy_Àngths
;

55 
ngx_¨øy_t
 *
¥oxy_vÆues
;

57 
ngx_¨øy_t
 *
ªdúe˘s
;

58 
ngx_¨øy_t
 *
cookõ_domaös
;

59 
ngx_¨øy_t
 *
cookõ_∑ths
;

61 
ngx_°r_t
 
body_sour˚
;

63 
ngx_°r_t
 
mëhod
;

64 
ngx_°r_t
 
loˇti⁄
;

65 
ngx_°r_t
 
uæ
;

67 #i‡(
NGX_HTTP_CACHE
)

68 
ngx_hâp_com∂ex_vÆue_t
 
ˇche_key
;

71 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

73 
ngx_Êag_t
 
ªdúe˘
;

75 
ngx_uöt_t
 
hâp_vîsi⁄
;

77 
ngx_uöt_t
 
hódîs_hash_max_size
;

78 
ngx_uöt_t
 
hódîs_hash_buckë_size
;

79 } 
	tngx_hâp_¥oxy_loc_c⁄f_t
;

83 
ngx_hâp_°©us_t
 
°©us
;

84 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

85 
size_t
 
öã∫Æ_body_Àngth
;

87 
ngx_uöt_t
 
°©e
;

88 
off_t
 
size
;

89 
off_t
 
Àngth
;

91 
ngx_uöt_t
 
hód
;

92 } 
	tngx_hâp_¥oxy_˘x_t
;

95 
ngx_öt_t
 
	`ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_¥oxy_˘x_t
 *
˘x
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

97 #i‡(
NGX_HTTP_CACHE
)

98 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

100 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

101 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

102 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

103 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

104 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
);

105 
ngx_öt_t
 
	`ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
,

106 
ngx_buf_t
 *
buf
);

107 
ngx_öt_t
 
	`ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
,

108 
ngx_buf_t
 *
buf
);

109 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
,

110 
ssize_t
 
byãs
);

111 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
,

112 
ssize_t
 
byãs
);

113 
	`ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

114 
	`ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

115 
ngx_öt_t
 
rc
);

117 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

119 
ngx_öt_t
 
	`ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

121 
ngx_öt_t


122 
	`ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

124 
ngx_öt_t


125 
	`ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

126 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

127 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

128 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

129 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

130 
ngx_èbÀ_ñt_t
 *
h
);

131 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

132 
ngx_èbÀ_ñt_t
 *
h
, 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
);

133 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
,

134 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
);

136 
ngx_öt_t
 
	`ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

137 *
	`ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

138 *
	`ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

139 *
∑ª¡
, *
chûd
);

140 
ngx_öt_t
 
	`ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
,

141 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_¥oxy_loc_c⁄f_à*
¥ev
);

143 *
	`ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

144 *
c⁄f
);

145 *
	`ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

146 *
c⁄f
);

147 *
	`ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

148 *
c⁄f
);

149 *
	`ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

150 *
c⁄f
);

151 *
	`ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

152 *
c⁄f
);

153 #i‡(
NGX_HTTP_CACHE
)

154 *
	`ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

155 *
c⁄f
);

156 *
	`ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

157 *
c⁄f
);

160 *
	`ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

162 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
,

163 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

165 #i‡(
NGX_HTTP_SSL
)

166 
ngx_öt_t
 
	`ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

167 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

169 
	`ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
);

172 
ngx_c⁄f_po°_t
 
ngx_hâp_¥oxy_low©_po°
 =

173 { 
ngx_hâp_¥oxy_low©_check
 
	}
};

176 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_√xt_up°ªam_masks
[] = {

177 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

178 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

179 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

180 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

181 { 
ngx_°rög
("hâp_502"), 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

182 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

183 { 
ngx_°rög
("hâp_504"), 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

184 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

185 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

186 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

187 { 
ngx_nuŒ_°rög
, 0 }

191 
ngx_c⁄f_íum_t
 
	gngx_hâp_¥oxy_hâp_vîsi⁄
[] = {

192 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

193 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

194 { 
ngx_nuŒ_°rög
, 0 }

198 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
;

201 
ngx_comm™d_t
 
	gngx_hâp_¥oxy_comm™ds
[] = {

203 { 
ngx_°rög
("proxy_pass"),

204 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

205 
ngx_hâp_¥oxy_∑ss
,

206 
NGX_HTTP_LOC_CONF_OFFSET
,

208 
NULL
 },

210 { 
ngx_°rög
("proxy_redirect"),

211 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

212 
ngx_hâp_¥oxy_ªdúe˘
,

213 
NGX_HTTP_LOC_CONF_OFFSET
,

215 
NULL
 },

217 { 
ngx_°rög
("proxy_cookie_domain"),

218 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

219 
ngx_hâp_¥oxy_cookõ_domaö
,

220 
NGX_HTTP_LOC_CONF_OFFSET
,

222 
NULL
 },

224 { 
ngx_°rög
("proxy_cookie_path"),

225 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

226 
ngx_hâp_¥oxy_cookõ_∑th
,

227 
NGX_HTTP_LOC_CONF_OFFSET
,

229 
NULL
 },

231 { 
ngx_°rög
("proxy_store"),

232 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

233 
ngx_hâp_¥oxy_°‹e
,

234 
NGX_HTTP_LOC_CONF_OFFSET
,

236 
NULL
 },

238 { 
ngx_°rög
("proxy_store_access"),

239 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

240 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

241 
NGX_HTTP_LOC_CONF_OFFSET
,

242 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

243 
NULL
 },

245 { 
ngx_°rög
("proxy_buffering"),

246 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

247 
ngx_c⁄f_£t_Êag_¶Ÿ
,

248 
NGX_HTTP_LOC_CONF_OFFSET
,

249 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

250 
NULL
 },

252 { 
ngx_°rög
("proxy_ignore_client_abort"),

253 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

254 
ngx_c⁄f_£t_Êag_¶Ÿ
,

255 
NGX_HTTP_LOC_CONF_OFFSET
,

256 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

257 
NULL
 },

259 { 
ngx_°rög
("proxy_bind"),

260 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

261 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

262 
NGX_HTTP_LOC_CONF_OFFSET
,

263 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

264 
NULL
 },

266 { 
ngx_°rög
("proxy_connect_timeout"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

268 
ngx_c⁄f_£t_m£c_¶Ÿ
,

269 
NGX_HTTP_LOC_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

271 
NULL
 },

273 { 
ngx_°rög
("proxy_send_timeout"),

274 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

275 
ngx_c⁄f_£t_m£c_¶Ÿ
,

276 
NGX_HTTP_LOC_CONF_OFFSET
,

277 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

278 
NULL
 },

280 { 
ngx_°rög
("proxy_send_lowat"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

282 
ngx_c⁄f_£t_size_¶Ÿ
,

283 
NGX_HTTP_LOC_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

285 &
ngx_hâp_¥oxy_low©_po°
 },

287 { 
ngx_°rög
("proxy_intercept_errors"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

289 
ngx_c⁄f_£t_Êag_¶Ÿ
,

290 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

292 
NULL
 },

294 { 
ngx_°rög
("proxy_set_header"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

296 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_sour˚
),

299 
NULL
 },

301 { 
ngx_°rög
("proxy_headers_hash_max_size"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

303 
ngx_c⁄f_£t_num_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_max_size
),

306 
NULL
 },

308 { 
ngx_°rög
("proxy_headers_hash_bucket_size"),

309 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

310 
ngx_c⁄f_£t_num_¶Ÿ
,

311 
NGX_HTTP_LOC_CONF_OFFSET
,

312 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_buckë_size
),

313 
NULL
 },

315 { 
ngx_°rög
("proxy_set_body"),

316 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

317 
ngx_c⁄f_£t_°r_¶Ÿ
,

318 
NGX_HTTP_LOC_CONF_OFFSET
,

319 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
body_sour˚
),

320 
NULL
 },

322 { 
ngx_°rög
("proxy_method"),

323 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

324 
ngx_c⁄f_£t_°r_¶Ÿ
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
mëhod
),

327 
NULL
 },

329 { 
ngx_°rög
("proxy_pass_request_headers"),

330 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

331 
ngx_c⁄f_£t_Êag_¶Ÿ
,

332 
NGX_HTTP_LOC_CONF_OFFSET
,

333 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

334 
NULL
 },

336 { 
ngx_°rög
("proxy_pass_request_body"),

337 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

338 
ngx_c⁄f_£t_Êag_¶Ÿ
,

339 
NGX_HTTP_LOC_CONF_OFFSET
,

340 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

341 
NULL
 },

343 { 
ngx_°rög
("proxy_buffer_size"),

344 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

345 
ngx_c⁄f_£t_size_¶Ÿ
,

346 
NGX_HTTP_LOC_CONF_OFFSET
,

347 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

348 
NULL
 },

350 { 
ngx_°rög
("proxy_read_timeout"),

351 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

352 
ngx_c⁄f_£t_m£c_¶Ÿ
,

353 
NGX_HTTP_LOC_CONF_OFFSET
,

354 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

355 
NULL
 },

357 { 
ngx_°rög
("proxy_buffers"),

358 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

359 
ngx_c⁄f_£t_bufs_¶Ÿ
,

360 
NGX_HTTP_LOC_CONF_OFFSET
,

361 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
bufs
),

362 
NULL
 },

364 { 
ngx_°rög
("proxy_busy_buffers_size"),

365 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

366 
ngx_c⁄f_£t_size_¶Ÿ
,

367 
NGX_HTTP_LOC_CONF_OFFSET
,

368 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

369 
NULL
 },

371 #i‡(
NGX_HTTP_CACHE
)

373 { 
ngx_°rög
("proxy_cache"),

374 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

375 
ngx_hâp_¥oxy_ˇche
,

376 
NGX_HTTP_LOC_CONF_OFFSET
,

378 
NULL
 },

380 { 
ngx_°rög
("proxy_cache_key"),

381 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

382 
ngx_hâp_¥oxy_ˇche_key
,

383 
NGX_HTTP_LOC_CONF_OFFSET
,

385 
NULL
 },

387 { 
ngx_°rög
("proxy_cache_path"),

388 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

389 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

392 &
ngx_hâp_¥oxy_moduÀ
 },

394 { 
ngx_°rög
("proxy_cache_bypass"),

395 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

396 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

397 
NGX_HTTP_LOC_CONF_OFFSET
,

398 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

399 
NULL
 },

401 { 
ngx_°rög
("proxy_no_cache"),

402 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

403 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

404 
NGX_HTTP_LOC_CONF_OFFSET
,

405 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

406 
NULL
 },

408 { 
ngx_°rög
("proxy_cache_valid"),

409 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

410 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

411 
NGX_HTTP_LOC_CONF_OFFSET
,

412 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

413 
NULL
 },

415 { 
ngx_°rög
("proxy_cache_min_uses"),

416 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

417 
ngx_c⁄f_£t_num_¶Ÿ
,

418 
NGX_HTTP_LOC_CONF_OFFSET
,

419 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

420 
NULL
 },

422 { 
ngx_°rög
("proxy_cache_use_stale"),

423 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

424 
ngx_c⁄f_£t_bômask_¶Ÿ
,

425 
NGX_HTTP_LOC_CONF_OFFSET
,

426 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

427 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

429 { 
ngx_°rög
("proxy_cache_methods"),

430 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

431 
ngx_c⁄f_£t_bômask_¶Ÿ
,

432 
NGX_HTTP_LOC_CONF_OFFSET
,

433 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

434 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

436 { 
ngx_°rög
("proxy_cache_lock"),

437 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

438 
ngx_c⁄f_£t_Êag_¶Ÿ
,

439 
NGX_HTTP_LOC_CONF_OFFSET
,

440 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

441 
NULL
 },

443 { 
ngx_°rög
("proxy_cache_lock_timeout"),

444 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

445 
ngx_c⁄f_£t_m£c_¶Ÿ
,

446 
NGX_HTTP_LOC_CONF_OFFSET
,

447 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

448 
NULL
 },

452 { 
ngx_°rög
("proxy_temp_path"),

453 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

454 
ngx_c⁄f_£t_∑th_¶Ÿ
,

455 
NGX_HTTP_LOC_CONF_OFFSET
,

456 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

457 
NULL
 },

459 { 
ngx_°rög
("proxy_max_temp_file_size"),

460 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

461 
ngx_c⁄f_£t_size_¶Ÿ
,

462 
NGX_HTTP_LOC_CONF_OFFSET
,

463 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

464 
NULL
 },

466 { 
ngx_°rög
("proxy_temp_file_write_size"),

467 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

468 
ngx_c⁄f_£t_size_¶Ÿ
,

469 
NGX_HTTP_LOC_CONF_OFFSET
,

470 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

471 
NULL
 },

473 { 
ngx_°rög
("proxy_next_upstream"),

474 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

475 
ngx_c⁄f_£t_bômask_¶Ÿ
,

476 
NGX_HTTP_LOC_CONF_OFFSET
,

477 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

478 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

480 { 
ngx_°rög
("proxy_pass_header"),

481 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

482 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

483 
NGX_HTTP_LOC_CONF_OFFSET
,

484 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

485 
NULL
 },

487 { 
ngx_°rög
("proxy_hide_header"),

488 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

489 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

490 
NGX_HTTP_LOC_CONF_OFFSET
,

491 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

492 
NULL
 },

494 { 
ngx_°rög
("proxy_ignore_headers"),

495 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

496 
ngx_c⁄f_£t_bômask_¶Ÿ
,

497 
NGX_HTTP_LOC_CONF_OFFSET
,

498 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

499 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

501 { 
ngx_°rög
("proxy_http_version"),

502 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

503 
ngx_c⁄f_£t_íum_¶Ÿ
,

504 
NGX_HTTP_LOC_CONF_OFFSET
,

505 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hâp_vîsi⁄
),

506 &
ngx_hâp_¥oxy_hâp_vîsi⁄
 },

508 #i‡(
NGX_HTTP_SSL
)

510 { 
ngx_°rög
("proxy_ssl_session_reuse"),

511 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

512 
ngx_c⁄f_£t_Êag_¶Ÿ
,

513 
NGX_HTTP_LOC_CONF_OFFSET
,

514 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

515 
NULL
 },

519 
ngx_nuŒ_comm™d


523 
ngx_hâp_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ_˘x
 = {

524 
ngx_hâp_¥oxy_add_v¨übÀs
,

525 
NULL
,

527 
NULL
,

528 
NULL
,

530 
NULL
,

531 
NULL
,

533 
ngx_hâp_¥oxy_¸óã_loc_c⁄f
,

534 
ngx_hâp_¥oxy_mîge_loc_c⁄f


538 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
 = {

539 
NGX_MODULE_V1
,

540 &
ngx_hâp_¥oxy_moduÀ_˘x
,

541 
ngx_hâp_¥oxy_comm™ds
,

542 
NGX_HTTP_MODULE
,

543 
NULL
,

544 
NULL
,

545 
NULL
,

546 
NULL
,

547 
NULL
,

548 
NULL
,

549 
NULL
,

550 
NGX_MODULE_V1_PADDING


554 
	gngx_hâp_¥oxy_vîsi⁄
[] = " HTTP/1.0" 
CRLF
;

555 
	gngx_hâp_¥oxy_vîsi⁄_11
[] = " HTTP/1.1" 
CRLF
;

558 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_hódîs
[] = {

559 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

560 { 
ngx_°rög
("Connection"),Çgx_string("close") },

561 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

562 { 
ngx_°rög
("Expect"),Çgx_string("") },

563 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

564 { 
ngx_nuŒ_°rög
,Çgx_null_string }

568 
ngx_°r_t
 
	gngx_hâp_¥oxy_hide_hódîs
[] = {

569 
ngx_°rög
("Date"),

570 
ngx_°rög
("Server"),

571 
ngx_°rög
("X-Pad"),

572 
ngx_°rög
("X-Accel-Expires"),

573 
ngx_°rög
("X-Accel-Redirect"),

574 
ngx_°rög
("X-Accel-Limit-Rate"),

575 
ngx_°rög
("X-Accel-Buffering"),

576 
ngx_°rög
("X-Accel-Charset"),

577 
ngx_nuŒ_°rög


581 #i‡(
NGX_HTTP_CACHE
)

583 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_ˇche_hódîs
[] = {

584 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

585 { 
ngx_°rög
("Connection"),Çgx_string("close") },

586 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

587 { 
ngx_°rög
("Expect"),Çgx_string("") },

588 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

589 { 
ngx_°rög
("If-Modified-Since"),Çgx_string("") },

590 { 
ngx_°rög
("If-Unmodified-Since"),Çgx_string("") },

591 { 
ngx_°rög
("If-None-Match"),Çgx_string("") },

592 { 
ngx_°rög
("If-Match"),Çgx_string("") },

593 { 
ngx_°rög
("Range"),Çgx_string("") },

594 { 
ngx_°rög
("If-Range"),Çgx_string("") },

595 { 
ngx_nuŒ_°rög
,Çgx_null_string }

601 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_¥oxy_v¨s
[] = {

603 { 
ngx_°rög
("¥oxy_ho°"), 
NULL
, 
ngx_hâp_¥oxy_ho°_v¨übÀ
, 0,

604 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

606 { 
ngx_°rög
("¥oxy_p‹t"), 
NULL
, 
ngx_hâp_¥oxy_p‹t_v¨übÀ
, 0,

607 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

609 { 
ngx_°rög
("¥oxy_add_x_f‹w¨ded_f‹"), 
NULL
,

610 
ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

613 { 
ngx_°rög
("¥oxy_add_vü"), 
NULL
, NULL, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

616 { 
ngx_°rög
("¥oxy_öã∫Æ_body_Àngth"), 
NULL
,

617 
ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

619 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

623 
ngx_∑th_öô_t
 
	gngx_hâp_¥oxy_ãmp_∑th
 = {

624 
ngx_°rög
(
NGX_HTTP_PROXY_TEMP_PATH
), { 1, 2, 0 }

628 
ngx_öt_t


629 
	$ngx_hâp_¥oxy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

631 
ngx_öt_t
 
rc
;

632 
ngx_hâp_up°ªam_t
 *
u
;

633 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

634 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

636 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

637  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

640 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_¥oxy_˘x_t
));

641 i‡(
˘x
 =
NULL
) {

642  
NGX_ERROR
;

645 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_¥oxy_moduÀ
);

647 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

649 
u
 = 
r
->
up°ªam
;

651 i‡(
∂cf
->
¥oxy_Àngths
 =
NULL
) {

652 
˘x
->
v¨s
 = 
∂cf
->vars;

653 
u
->
schema
 = 
∂cf
->
v¨s
.schema;

654 #i‡(
NGX_HTTP_SSL
)

655 
u
->
s¶
 = (
∂cf
->
up°ªam
.s¶ !
NULL
);

659 i‡(
	`ngx_hâp_¥oxy_evÆ
(
r
, 
˘x
, 
∂cf
Ë!
NGX_OK
) {

660  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

664 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_moduÀ
;

666 
u
->
c⁄f
 = &
∂cf
->
up°ªam
;

668 #i‡(
NGX_HTTP_CACHE
)

669 
u
->
¸óã_key
 = 
ngx_hâp_¥oxy_¸óã_key
;

671 
u
->
¸óã_ªque°
 = 
ngx_hâp_¥oxy_¸óã_ªque°
;

672 
u
->
ªöô_ªque°
 = 
ngx_hâp_¥oxy_ªöô_ªque°
;

673 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

674 
u
->
ab‹t_ªque°
 = 
ngx_hâp_¥oxy_ab‹t_ªque°
;

675 
u
->
föÆize_ªque°
 = 
ngx_hâp_¥oxy_föÆize_ªque°
;

676 
r
->
°©e
 = 0;

678 i‡(
∂cf
->
ªdúe˘s
) {

679 
u
->
ªwrôe_ªdúe˘
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘
;

682 i‡(
∂cf
->
cookõ_domaös
 ||Ölcf->
cookõ_∑ths
) {

683 
u
->
ªwrôe_cookõ
 = 
ngx_hâp_¥oxy_ªwrôe_cookõ
;

686 
u
->
buf„rög
 = 
∂cf
->
up°ªam
.buffering;

688 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

689 i‡(
u
->
pùe
 =
NULL
) {

690  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

693 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

694 
u
->
pùe
->
öput_˘x
 = 
r
;

696 
u
->
öput_fûãr_öô
 = 
ngx_hâp_¥oxy_öput_fûãr_öô
;

697 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

698 
u
->
öput_fûãr_˘x
 = 
r
;

700 
u
->
ac˚l
 = 1;

702 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

704 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

705  
rc
;

708  
NGX_DONE
;

709 
	}
}

712 
ngx_öt_t


713 
	$ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_¥oxy_˘x_t
 *
˘x
,

714 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

716 
u_ch¨
 *
p
;

717 
size_t
 
add
;

718 
u_sh‹t
 
p‹t
;

719 
ngx_°r_t
 
¥oxy
;

720 
ngx_uæ_t
 
uæ
;

721 
ngx_hâp_up°ªam_t
 *
u
;

723 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
¥oxy
, 
∂cf
->
¥oxy_Àngths
->
ñts
, 0,

724 
∂cf
->
¥oxy_vÆues
->
ñts
)

725 =
NULL
)

727  
NGX_ERROR
;

730 i‡(
¥oxy
.
Àn
 > 7

731 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

733 
add
 = 7;

734 
p‹t
 = 80;

736 #i‡(
NGX_HTTP_SSL
)

738 } i‡(
¥oxy
.
Àn
 > 8

739 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "https://", 8) == 0)

741 
add
 = 8;

742 
p‹t
 = 443;

743 
r
->
up°ªam
->
s¶
 = 1;

748 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

749 "övÆid URLÖªfix i¿\"%V\"", &
¥oxy
);

750  
NGX_ERROR
;

753 
u
 = 
r
->
up°ªam
;

755 
u
->
schema
.
Àn
 = 
add
;

756 
u
->
schema
.
d©a
 = 
¥oxy
.data;

758 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

760 
uæ
.uæ.
Àn
 = 
¥oxy
.À¿- 
add
;

761 
uæ
.uæ.
d©a
 = 
¥oxy
.d©®+ 
add
;

762 
uæ
.
deÁu…_p‹t
 = 
p‹t
;

763 
uæ
.
uri_∑π
 = 1;

764 
uæ
.
no_ªsﬁve
 = 1;

766 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

767 i‡(
uæ
.
îr
) {

768 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

769 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

772  
NGX_ERROR
;

775 i‡(
uæ
.
uri
.
Àn
) {

776 i‡(
uæ
.
uri
.
d©a
[0] == '?') {

777 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uæ
.
uri
.
Àn
 + 1);

778 i‡(
p
 =
NULL
) {

779  
NGX_ERROR
;

782 *
p
++ = '/';

783 
	`ngx_mem˝y
(
p
, 
uæ
.
uri
.
d©a
, uæ.uri.
Àn
);

785 
uæ
.
uri
.
Àn
++;

786 
uæ
.
uri
.
d©a
 = 
p
 - 1;

790 
˘x
->
v¨s
.
key_°¨t
 = 
u
->
schema
;

792 
	`ngx_hâp_¥oxy_£t_v¨s
(&
uæ
, &
˘x
->
v¨s
);

794 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

795 i‡(
u
->
ªsﬁved
 =
NULL
) {

796  
NGX_ERROR
;

799 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

800 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

801 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

802 
u
->
ªsﬁved
->
«ddrs
 = 1;

803 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

806 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

807 
u
->
ªsﬁved
->
p‹t
 = (
ö_p‹t_t
Ë(
uæ
.
no_p‹t
 ?Öort : url.port);

808 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

811  
NGX_OK
;

812 
	}
}

815 #i‡(
NGX_HTTP_CACHE
)

817 
ngx_öt_t


818 
	$ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

820 
size_t
 
Àn
, 
loc_Àn
;

821 
u_ch¨
 *
p
;

822 
uöçå_t
 
esˇ≥
;

823 
ngx_°r_t
 *
key
;

824 
ngx_hâp_up°ªam_t
 *
u
;

825 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

826 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

828 
u
 = 
r
->
up°ªam
;

830 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

832 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

834 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

835 i‡(
key
 =
NULL
) {

836  
NGX_ERROR
;

839 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

841 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∂cf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

842  
NGX_ERROR
;

845  
NGX_OK
;

848 *
key
 = 
˘x
->
v¨s
.
key_°¨t
;

850 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

851 i‡(
key
 =
NULL
) {

852  
NGX_ERROR
;

855 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

857 *
key
 = 
˘x
->
v¨s
.
uri
;

858 
u
->
uri
 = 
˘x
->
v¨s
.uri;

860  
NGX_OK
;

862 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

864 *
key
 = 
r
->
u≈¨£d_uri
;

865 
u
->
uri
 = 
r
->
u≈¨£d_uri
;

867  
NGX_OK
;

870 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
Ë? 
∂cf
->
loˇti⁄
.len : 0;

872 i‡(
r
->
quŸed_uri
 ||Ñ->
öã∫Æ
) {

873 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

874 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

876 
esˇ≥
 = 0;

879 
Àn
 = 
˘x
->
v¨s
.
uri
.À¿+ 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


880 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

882 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

883 i‡(
p
 =
NULL
) {

884  
NGX_ERROR
;

887 
key
->
d©a
 = 
p
;

889 i‡(
r
->
vÆid_loˇti⁄
) {

890 
p
 = 
	`ngx_c›y
’, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

893 i‡(
esˇ≥
) {

894 
	`ngx_esˇ≥_uri
(
p
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

895 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

896 
p
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

899 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
 + 
loc_Àn
,Ñ->uri.
Àn
 -Üoc_len);

902 i‡(
r
->
¨gs
.
Àn
 > 0) {

903 *
p
++ = '?';

904 
p
 = 
	`ngx_c›y
’, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

907 
key
->
Àn
 = 
p
 - key->
d©a
;

908 
u
->
uri
 = *
key
;

910  
NGX_OK
;

911 
	}
}

916 
ngx_öt_t


917 
	$ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

919 
size_t
 
Àn
, 
uri_Àn
, 
loc_Àn
, 
body_Àn
;

920 
uöçå_t
 
esˇ≥
;

921 
ngx_buf_t
 *
b
;

922 
ngx_°r_t
 
mëhod
;

923 
ngx_uöt_t
 
i
, 
u≈¨£d_uri
;

924 
ngx_chaö_t
 *
˛
, *
body
;

925 
ngx_li°_∑π_t
 *
∑π
;

926 
ngx_èbÀ_ñt_t
 *
hódî
;

927 
ngx_hâp_up°ªam_t
 *
u
;

928 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

929 
ngx_hâp_s¸ùt_code_±
 
code
;

930 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

931 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

932 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

934 
u
 = 
r
->
up°ªam
;

936 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

938 i‡(
u
->
mëhod
.
Àn
) {

940 
mëhod
 = 
u
->method;

941 
mëhod
.
Àn
++;

943 } i‡(
∂cf
->
mëhod
.
Àn
) {

944 
mëhod
 = 
∂cf
->method;

947 
mëhod
 = 
r
->
mëhod_«me
;

948 
mëhod
.
Àn
++;

951 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

953 i‡(
mëhod
.
Àn
 == 5

954 && 
	`ngx_°∫ˇ£cmp
(
mëhod
.
d©a
, (
u_ch¨
 *) "HEAD ", 5) == 0)

956 
˘x
->
hód
 = 1;

959 
Àn
 = 
mëhod
.À¿+ (
ngx_hâp_¥oxy_vîsi⁄
Ë- 1 + (
CRLF
) - 1;

961 
esˇ≥
 = 0;

962 
loc_Àn
 = 0;

963 
u≈¨£d_uri
 = 0;

965 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

966 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
;

968 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

970 
u≈¨£d_uri
 = 1;

971 
uri_Àn
 = 
r
->
u≈¨£d_uri
.
Àn
;

974 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
) ?

975 
∂cf
->
loˇti⁄
.
Àn
 : 0;

977 i‡(
r
->
quŸed_uri
 ||Ñ->
•a˚_ö_uri
 ||Ñ->
öã∫Æ
) {

978 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

979 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

982 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
 + 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


983 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

986 i‡(
uri_Àn
 == 0) {

987 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

989  
NGX_ERROR
;

992 
Àn
 +
uri_Àn
;

994 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∂cf
->
Êushes
);

996 i‡(
∂cf
->
body_£t_Àn
) {

997 
À
.
ù
 = 
∂cf
->
body_£t_Àn
->
ñts
;

998 
À
.
ªque°
 = 
r
;

999 
À
.
Êushed
 = 1;

1000 
body_Àn
 = 0;

1002 *(
uöçå_t
 *Ë
À
.
ù
) {

1003 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1004 
body_Àn
 +
	`lcode
(&
À
);

1007 
˘x
->
öã∫Æ_body_Àngth
 = 
body_Àn
;

1008 
Àn
 +
body_Àn
;

1011 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

1012 
À
.
ªque°
 = 
r
;

1013 
À
.
Êushed
 = 1;

1015 *(
uöçå_t
 *Ë
À
.
ù
) {

1016 *(
uöçå_t
 *Ë
À
.
ù
) {

1017 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1018 
Àn
 +
	`lcode
(&
À
);

1020 
À
.
ù
 +(
uöçå_t
);

1024 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1025 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1026 
hódî
 = 
∑π
->
ñts
;

1028 
i
 = 0; ; i++) {

1030 i‡(
i
 >
∑π
->
√…s
) {

1031 i‡(
∑π
->
√xt
 =
NULL
) {

1035 
∑π
 =Ö¨t->
√xt
;

1036 
hódî
 = 
∑π
->
ñts
;

1037 
i
 = 0;

1040 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

1041 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1046 
Àn
 +
hódî
[
i
].
key
.len + (": ") - 1

1047 + 
hódî
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

1052 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

1053 i‡(
b
 =
NULL
) {

1054  
NGX_ERROR
;

1057 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1058 i‡(
˛
 =
NULL
) {

1059  
NGX_ERROR
;

1062 
˛
->
buf
 = 
b
;

1067 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
mëhod
.
d©a
, mëhod.
Àn
);

1069 
u
->
uri
.
d©a
 = 
b
->
œ°
;

1071 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1072 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1074 } i‡(
u≈¨£d_uri
) {

1075 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

1078 i‡(
r
->
vÆid_loˇti⁄
) {

1079 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1082 i‡(
esˇ≥
) {

1083 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1084 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1085 
b
->
œ°
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1088 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1089 
r
->
uri
.
Àn
 - 
loc_Àn
);

1092 i‡(
r
->
¨gs
.
Àn
 > 0) {

1093 *
b
->
œ°
++ = '?';

1094 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1098 
u
->
uri
.
Àn
 = 
b
->
œ°
 - u->uri.
d©a
;

1100 i‡(
∂cf
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_11
) {

1101 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄_11
,

1102 (
ngx_hâp_¥oxy_vîsi⁄_11
) - 1);

1105 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄
,

1106 (
ngx_hâp_¥oxy_vîsi⁄
) - 1);

1109 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1111 
e
.
ù
 = 
∂cf
->
hódîs_£t
->
ñts
;

1112 
e
.
pos
 = 
b
->
œ°
;

1113 
e
.
ªque°
 = 
r
;

1114 
e
.
Êushed
 = 1;

1116 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

1118 *(
uöçå_t
 *Ë
À
.
ù
) {

1119 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1122 (Ë
	`lcode
(&
À
);

1124 i‡(*(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
) {

1126 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1127 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1130 
e
.
skù
 = (
Àn
 =(
CRLF
) - 1) ? 1 : 0;

1133 
e
.
skù
 = 0;

1136 
À
.
ù
 +(
uöçå_t
);

1138 *(
uöçå_t
 *Ë
e
.
ù
) {

1139 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1140 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1142 
e
.
ù
 +(
uöçå_t
);

1145 
b
->
œ°
 = 
e
.
pos
;

1148 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1149 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1150 
hódî
 = 
∑π
->
ñts
;

1152 
i
 = 0; ; i++) {

1154 i‡(
i
 >
∑π
->
√…s
) {

1155 i‡(
∑π
->
√xt
 =
NULL
) {

1159 
∑π
 =Ö¨t->
√xt
;

1160 
hódî
 = 
∑π
->
ñts
;

1161 
i
 = 0;

1164 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

1165 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1170 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1172 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

1174 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
,

1175 
hódî
[
i
].
vÆue
.
Àn
);

1177 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1179 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1181 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

1187 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1189 i‡(
∂cf
->
body_£t
) {

1190 
e
.
ù
 = 
∂cf
->
body_£t
->
ñts
;

1191 
e
.
pos
 = 
b
->
œ°
;

1193 *(
uöçå_t
 *Ë
e
.
ù
) {

1194 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1195 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1198 
b
->
œ°
 = 
e
.
pos
;

1201 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1203 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1205 i‡(
∂cf
->
body_£t
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body
) {

1207 
body
 = 
u
->
ªque°_bufs
;

1208 
u
->
ªque°_bufs
 = 
˛
;

1210 
body
) {

1211 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1212 i‡(
b
 =
NULL
) {

1213  
NGX_ERROR
;

1216 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1218 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1219 i‡(
˛
->
√xt
 =
NULL
) {

1220  
NGX_ERROR
;

1223 
˛
 = cl->
√xt
;

1224 
˛
->
buf
 = 
b
;

1226 
body
 = body->
√xt
;

1230 
u
->
ªque°_bufs
 = 
˛
;

1233 
b
->
Êush
 = 1;

1234 
˛
->
√xt
 = 
NULL
;

1236  
NGX_OK
;

1237 
	}
}

1240 
ngx_öt_t


1241 
	$ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1243 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1245 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1247 i‡(
˘x
 =
NULL
) {

1248  
NGX_OK
;

1251 
˘x
->
°©us
.
code
 = 0;

1252 
˘x
->
°©us
.
cou¡
 = 0;

1253 
˘x
->
°©us
.
°¨t
 = 
NULL
;

1254 
˘x
->
°©us
.
íd
 = 
NULL
;

1255 
˘x
->
°©e
 = 0;

1257 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

1258 
r
->
up°ªam
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

1259 
r
->
up°ªam
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

1260 
r
->
°©e
 = 0;

1262  
NGX_OK
;

1263 
	}
}

1266 
ngx_öt_t


1267 
	$ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1269 
size_t
 
Àn
;

1270 
ngx_öt_t
 
rc
;

1271 
ngx_hâp_up°ªam_t
 *
u
;

1272 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1274 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1276 i‡(
˘x
 =
NULL
) {

1277  
NGX_ERROR
;

1280 
u
 = 
r
->
up°ªam
;

1282 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, &
˘x
->
°©us
);

1284 i‡(
rc
 =
NGX_AGAIN
) {

1285  
rc
;

1288 i‡(
rc
 =
NGX_ERROR
) {

1290 #i‡(
NGX_HTTP_CACHE
)

1292 i‡(
r
->
ˇche
) {

1293 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1294  
NGX_OK
;

1299 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1303 i‡(
u
->
ac˚l
) {

1304  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1308 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1309 
u
->
°©e
->
°©us
 = 
NGX_HTTP_OK
;

1310 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1312  
NGX_OK
;

1315 i‡(
u
->
°©e
) {

1316 
u
->
°©e
->
°©us
 = 
˘x
->°©us.
code
;

1319 
u
->
hódîs_ö
.
°©us_n
 = 
˘x
->
°©us
.
code
;

1321 
Àn
 = 
˘x
->
°©us
.
íd
 - ctx->°©us.
°¨t
;

1322 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1324 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1325 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1326  
NGX_ERROR
;

1329 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
˘x
->
°©us
.
°¨t
, 
Àn
);

1331 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1333 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1335 i‡(
˘x
->
°©us
.
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

1336 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1339 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_hódî
;

1341  
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
r
);

1342 
	}
}

1345 
ngx_öt_t


1346 
	$ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1348 
ngx_öt_t
 
rc
;

1349 
ngx_èbÀ_ñt_t
 *
h
;

1350 
ngx_hâp_up°ªam_t
 *
u
;

1351 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1352 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1353 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1355 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1359 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1361 i‡(
rc
 =
NGX_OK
) {

1365 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1366 i‡(
h
 =
NULL
) {

1367  
NGX_ERROR
;

1370 
h
->
hash
 = 
r
->
hódî_hash
;

1372 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1373 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1375 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1376 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1 + h->key.len);

1377 i‡(
h
->
key
.
d©a
 =
NULL
) {

1378  
NGX_ERROR
;

1381 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1382 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1384 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1385 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1386 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1387 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1389 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1390 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1393 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1396 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1397 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1399 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1400  
NGX_ERROR
;

1403 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1405 &
h
->
key
, &h->
vÆue
);

1410 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1414 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1422 i‡(
r
->
up°ªam
->
hódîs_ö
.
£rvî
 =
NULL
) {

1423 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1424 i‡(
h
 =
NULL
) {

1425  
NGX_ERROR
;

1428 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash(ngx_hash(

1429 
	`ngx_hash
('s', 'e'), 'r'), 'v'), 'e'), 'r');

1431 
	`ngx_°r_£t
(&
h
->
key
, "Server");

1432 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1433 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "server";

1436 i‡(
r
->
up°ªam
->
hódîs_ö
.
d©e
 =
NULL
) {

1437 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1438 i‡(
h
 =
NULL
) {

1439  
NGX_ERROR
;

1442 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash('d', 'a'), 't'), 'e');

1444 
	`ngx_°r_£t
(&
h
->
key
, "Date");

1445 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1446 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "date";

1451 
u
 = 
r
->
up°ªam
;

1453 i‡(
u
->
hódîs_ö
.
chunked
) {

1454 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1462 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1464 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1465 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1466 || 
˘x
->
hód


1467 || (!
u
->
hódîs_ö
.
chunked


1468 && 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0))

1470 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1473  
NGX_OK
;

1476 i‡(
rc
 =
NGX_AGAIN
) {

1477  
NGX_AGAIN
;

1482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1485  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1487 
	}
}

1490 
ngx_öt_t


1491 
	$ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
)

1493 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1494 
ngx_hâp_up°ªam_t
 *
u
;

1495 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1497 
u
 = 
r
->
up°ªam
;

1498 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1500 i‡(
˘x
 =
NULL
) {

1501  
NGX_ERROR
;

1504 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1506 
u
->
hódîs_ö
.
°©us_n
, 
˘x
->
hód
, u->hódîs_ö.
chunked
,

1507 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1511 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1512 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1513 || 
˘x
->
hód
)

1518 
u
->
pùe
->
Àngth
 = 0;

1519 
u
->
Àngth
 = 0;

1520 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1522 } i‡(
u
->
hódîs_ö
.
chunked
) {

1525 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_chunked_fûãr
;

1526 
u
->
pùe
->
Àngth
 = 3;

1528 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
;

1529 
u
->
Àngth
 = -1;

1531 } i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

1534 
u
->
pùe
->
Àngth
 = 0;

1535 
u
->
Àngth
 = 0;

1536 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1541 
u
->
pùe
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1542 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1545  
NGX_OK
;

1546 
	}
}

1549 
ngx_öt_t


1550 
	$ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1552 
ngx_buf_t
 *
b
;

1553 
ngx_chaö_t
 *
˛
;

1554 
ngx_hâp_ªque°_t
 *
r
;

1556 i‡(
buf
->
pos
 =buf->
œ°
) {

1557  
NGX_OK
;

1560 i‡(
p
->
‰ì
) {

1561 
˛
 = 
p
->
‰ì
;

1562 
b
 = 
˛
->
buf
;

1563 
p
->
‰ì
 = 
˛
->
√xt
;

1564 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

1567 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

1568 i‡(
b
 =
NULL
) {

1569  
NGX_ERROR
;

1573 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

1574 
b
->
shadow
 = 
buf
;

1575 
b
->
èg
 = 
p
->tag;

1576 
b
->
œ°_shadow
 = 1;

1577 
b
->
ªcy˛ed
 = 1;

1578 
buf
->
shadow
 = 
b
;

1580 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1581 i‡(
˛
 =
NULL
) {

1582  
NGX_ERROR
;

1585 
˛
->
buf
 = 
b
;

1586 
˛
->
√xt
 = 
NULL
;

1588 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

1590 i‡(
p
->
ö
) {

1591 *
p
->
œ°_ö
 = 
˛
;

1593 
p
->
ö
 = 
˛
;

1595 
p
->
œ°_ö
 = &
˛
->
√xt
;

1597 i‡(
p
->
Àngth
 == -1) {

1598  
NGX_OK
;

1601 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

1603 i‡(
p
->
Àngth
 == 0) {

1604 
r
 = 
p
->
öput_˘x
;

1605 
p
->
up°ªam_d⁄e
 = 1;

1606 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1608 } i‡(
p
->
Àngth
 < 0) {

1609 
r
 = 
p
->
öput_˘x
;

1610 
p
->
up°ªam_d⁄e
 = 1;

1612 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1617  
NGX_OK
;

1618 
	}
}

1621 
ngx_ölöe
 
ngx_öt_t


1622 
	$ngx_hâp_¥oxy_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
buf
)

1624 
u_ch¨
 *
pos
, 
ch
, 
c
;

1625 
ngx_öt_t
 
rc
;

1626 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1628 
sw_chunk_°¨t
 = 0,

1629 
sw_chunk_size
,

1630 
sw_chunk_exãnsi⁄
,

1631 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
,

1632 
sw_chunk_d©a
,

1633 
sw_a·î_d©a
,

1634 
sw_a·î_d©a_Æmo°_d⁄e
,

1635 
sw_œ°_chunk_exãnsi⁄
,

1636 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
,

1637 
sw_åaûî
,

1638 
sw_åaûî_Æmo°_d⁄e
,

1639 
sw_åaûî_hódî
,

1640 
sw_åaûî_hódî_Æmo°_d⁄e


1641 } 
°©e
;

1643 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1645 i‡(
˘x
 =
NULL
) {

1646  
NGX_ERROR
;

1649 
°©e
 = 
˘x
->state;

1651 i‡(
°©e
 =
sw_chunk_d©a
 && 
˘x
->
size
 == 0) {

1652 
°©e
 = 
sw_a·î_d©a
;

1655 
rc
 = 
NGX_AGAIN
;

1657 
pos
 = 
buf
->pos;Öo†< buf->
œ°
;Öos++) {

1659 
ch
 = *
pos
;

1661 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1662 "hâ∞¥oxy chunked byã: %02Xd s:%d", 
ch
, 
°©e
);

1664 
°©e
) {

1666 
sw_chunk_°¨t
:

1667 i‡(
ch
 >= '0' && ch <= '9') {

1668 
°©e
 = 
sw_chunk_size
;

1669 
˘x
->
size
 = 
ch
 - '0';

1673 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1675 i‡(
c
 >= 'a' && c <= 'f') {

1676 
°©e
 = 
sw_chunk_size
;

1677 
˘x
->
size
 = 
c
 - 'a' + 10;

1681 
övÆid
;

1683 
sw_chunk_size
:

1684 i‡(
ch
 >= '0' && ch <= '9') {

1685 
˘x
->
size
 = ctx->sizê* 16 + (
ch
 - '0');

1689 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1691 i‡(
c
 >= 'a' && c <= 'f') {

1692 
˘x
->
size
 = ctx->sizê* 16 + (
c
 - 'a' + 10);

1696 i‡(
˘x
->
size
 == 0) {

1698 
ch
) {

1699 
CR
:

1700 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

1702 
LF
:

1703 
°©e
 = 
sw_åaûî
;

1708 
°©e
 = 
sw_œ°_chunk_exãnsi⁄
;

1711 
övÆid
;

1717 
ch
) {

1718 
CR
:

1719 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

1721 
LF
:

1722 
°©e
 = 
sw_chunk_d©a
;

1727 
°©e
 = 
sw_chunk_exãnsi⁄
;

1730 
övÆid
;

1735 
sw_chunk_exãnsi⁄
:

1736 
ch
) {

1737 
CR
:

1738 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

1740 
LF
:

1741 
°©e
 = 
sw_chunk_d©a
;

1745 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

1746 i‡(
ch
 =
LF
) {

1747 
°©e
 = 
sw_chunk_d©a
;

1750 
övÆid
;

1752 
sw_chunk_d©a
:

1753 
rc
 = 
NGX_OK
;

1754 
d©a
;

1756 
sw_a·î_d©a
:

1757 
ch
) {

1758 
CR
:

1759 
°©e
 = 
sw_a·î_d©a_Æmo°_d⁄e
;

1761 
LF
:

1762 
°©e
 = 
sw_chunk_°¨t
;

1766 
sw_a·î_d©a_Æmo°_d⁄e
:

1767 i‡(
ch
 =
LF
) {

1768 
°©e
 = 
sw_chunk_°¨t
;

1771 
övÆid
;

1773 
sw_œ°_chunk_exãnsi⁄
:

1774 
ch
) {

1775 
CR
:

1776 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

1778 
LF
:

1779 
°©e
 = 
sw_åaûî
;

1783 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

1784 i‡(
ch
 =
LF
) {

1785 
°©e
 = 
sw_åaûî
;

1788 
övÆid
;

1790 
sw_åaûî
:

1791 
ch
) {

1792 
CR
:

1793 
°©e
 = 
sw_åaûî_Æmo°_d⁄e
;

1795 
LF
:

1796 
d⁄e
;

1798 
°©e
 = 
sw_åaûî_hódî
;

1802 
sw_åaûî_Æmo°_d⁄e
:

1803 i‡(
ch
 =
LF
) {

1804 
d⁄e
;

1806 
övÆid
;

1808 
sw_åaûî_hódî
:

1809 
ch
) {

1810 
CR
:

1811 
°©e
 = 
sw_åaûî_hódî_Æmo°_d⁄e
;

1813 
LF
:

1814 
°©e
 = 
sw_åaûî
;

1818 
sw_åaûî_hódî_Æmo°_d⁄e
:

1819 i‡(
ch
 =
LF
) {

1820 
°©e
 = 
sw_åaûî
;

1823 
övÆid
;

1828 
d©a
:

1830 
˘x
->
°©e
 = state;

1831 
buf
->
pos
 =Öos;

1833 
°©e
) {

1835 
sw_chunk_°¨t
:

1836 
˘x
->
Àngth
 = 3 ;

1838 
sw_chunk_size
:

1839 
˘x
->
Àngth
 = 2

1840 + (
˘x
->
size
 ? ctx->size + 4 : 0);

1842 
sw_chunk_exãnsi⁄
:

1843 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

1844 
˘x
->
Àngth
 = 1 + ctx->
size
 + 4 ;

1846 
sw_chunk_d©a
:

1847 
˘x
->
Àngth
 = ctx->
size
 + 4 ;

1849 
sw_a·î_d©a
:

1850 
sw_a·î_d©a_Æmo°_d⁄e
:

1851 
˘x
->
Àngth
 = 4 ;

1853 
sw_œ°_chunk_exãnsi⁄
:

1854 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

1855 
˘x
->
Àngth
 = 2 ;

1857 
sw_åaûî
:

1858 
sw_åaûî_Æmo°_d⁄e
:

1859 
˘x
->
Àngth
 = 1 ;

1861 
sw_åaûî_hódî
:

1862 
sw_åaûî_hódî_Æmo°_d⁄e
:

1863 
˘x
->
Àngth
 = 2 ;

1868 i‡(
˘x
->
size
 < 0 || ctx->
Àngth
 < 0) {

1869 
övÆid
;

1872  
rc
;

1874 
d⁄e
:

1876  
NGX_DONE
;

1878 
övÆid
:

1880  
NGX_ERROR
;

1881 
	}
}

1884 
ngx_öt_t


1885 
	$ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1887 
ngx_öt_t
 
rc
;

1888 
ngx_buf_t
 *
b
, **
¥ev
;

1889 
ngx_chaö_t
 *
˛
;

1890 
ngx_hâp_ªque°_t
 *
r
;

1891 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1893 i‡(
buf
->
pos
 =buf->
œ°
) {

1894  
NGX_OK
;

1897 
r
 = 
p
->
öput_˘x
;

1898 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1900 i‡(
˘x
 =
NULL
) {

1901  
NGX_ERROR
;

1904 
b
 = 
NULL
;

1905 
¥ev
 = &
buf
->
shadow
;

1909 
rc
 = 
	`ngx_hâp_¥oxy_∑r£_chunked
(
r
, 
buf
);

1911 i‡(
rc
 =
NGX_OK
) {

1915 i‡(
p
->
‰ì
) {

1916 
˛
 = 
p
->
‰ì
;

1917 
b
 = 
˛
->
buf
;

1918 
p
->
‰ì
 = 
˛
->
√xt
;

1919 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

1922 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

1923 i‡(
b
 =
NULL
) {

1924  
NGX_ERROR
;

1928 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1930 
b
->
pos
 = 
buf
->pos;

1931 
b
->
°¨t
 = 
buf
->start;

1932 
b
->
íd
 = 
buf
->end;

1933 
b
->
èg
 = 
p
->tag;

1934 
b
->
ãmp‹¨y
 = 1;

1935 
b
->
ªcy˛ed
 = 1;

1937 *
¥ev
 = 
b
;

1938 
¥ev
 = &
b
->
shadow
;

1940 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1941 i‡(
˛
 =
NULL
) {

1942  
NGX_ERROR
;

1945 
˛
->
buf
 = 
b
;

1946 
˛
->
√xt
 = 
NULL
;

1948 i‡(
p
->
ö
) {

1949 *
p
->
œ°_ö
 = 
˛
;

1951 
p
->
ö
 = 
˛
;

1953 
p
->
œ°_ö
 = &
˛
->
√xt
;

1955  
b
->
num
 = 
buf
->num;

1957 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1958 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

1960 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
size
) {

1962 
buf
->
pos
 +
˘x
->
size
;

1963 
b
->
œ°
 = 
buf
->
pos
;

1964 
˘x
->
size
 = 0;

1969 
˘x
->
size
 -
buf
->
œ°
 - buf->
pos
;

1970 
buf
->
pos
 = buf->
œ°
;

1971 
b
->
œ°
 = 
buf
->last;

1976 i‡(
rc
 =
NGX_DONE
) {

1980 
p
->
up°ªam_d⁄e
 = 1;

1981 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1986 i‡(
rc
 =
NGX_AGAIN
) {

1990 
p
->
Àngth
 = 
˘x
->length;

1997 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2000  
NGX_ERROR
;

2003 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2005 
˘x
->
°©e
, 
p
->
Àngth
);

2007 i‡(
b
) {

2008 
b
->
shadow
 = 
buf
;

2009 
b
->
œ°_shadow
 = 1;

2011 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2012 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

2014  
NGX_OK
;

2019 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

2020  
NGX_ERROR
;

2023  
NGX_OK
;

2024 
	}
}

2027 
ngx_öt_t


2028 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2030 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2032 
ngx_buf_t
 *
b
;

2033 
ngx_chaö_t
 *
˛
, **
Œ
;

2034 
ngx_hâp_up°ªam_t
 *
u
;

2036 
u
 = 
r
->
up°ªam
;

2038 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2039 
Œ
 = &
˛
->
√xt
;

2042 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2043 i‡(
˛
 =
NULL
) {

2044  
NGX_ERROR
;

2047 *
Œ
 = 
˛
;

2049 
˛
->
buf
->
Êush
 = 1;

2050 
˛
->
buf
->
mem‹y
 = 1;

2052 
b
 = &
u
->
buf„r
;

2054 
˛
->
buf
->
pos
 = 
b
->
œ°
;

2055 
b
->
œ°
 +
byãs
;

2056 
˛
->
buf
->
œ°
 = 
b
->last;

2057 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

2059 i‡(
u
->
Àngth
 == -1) {

2060  
NGX_OK
;

2063 
u
->
Àngth
 -
byãs
;

2065 i‡(
u
->
Àngth
 == 0) {

2066 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2069  
NGX_OK
;

2070 
	}
}

2073 
ngx_öt_t


2074 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2076 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2078 
ngx_öt_t
 
rc
;

2079 
ngx_buf_t
 *
b
, *
buf
;

2080 
ngx_chaö_t
 *
˛
, **
Œ
;

2081 
ngx_hâp_up°ªam_t
 *
u
;

2082 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2084 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2086 i‡(
˘x
 =
NULL
) {

2087  
NGX_ERROR
;

2090 
u
 = 
r
->
up°ªam
;

2091 
buf
 = &
u
->
buf„r
;

2093 
buf
->
pos
 = buf->
œ°
;

2094 
buf
->
œ°
 +
byãs
;

2096 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2097 
Œ
 = &
˛
->
√xt
;

2102 
rc
 = 
	`ngx_hâp_¥oxy_∑r£_chunked
(
r
, 
buf
);

2104 i‡(
rc
 =
NGX_OK
) {

2108 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2109 i‡(
˛
 =
NULL
) {

2110  
NGX_ERROR
;

2113 *
Œ
 = 
˛
;

2114 
Œ
 = &
˛
->
√xt
;

2116 
b
 = 
˛
->
buf
;

2118 
b
->
Êush
 = 1;

2119 
b
->
mem‹y
 = 1;

2121 
b
->
pos
 = 
buf
->pos;

2122 
b
->
èg
 = 
u
->
ouçut
.tag;

2124 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
size
) {

2125 
buf
->
pos
 +
˘x
->
size
;

2126 
b
->
œ°
 = 
buf
->
pos
;

2127 
˘x
->
size
 = 0;

2130 
˘x
->
size
 -
buf
->
œ°
 - buf->
pos
;

2131 
buf
->
pos
 = buf->
œ°
;

2132 
b
->
œ°
 = 
buf
->last;

2135 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2137 
b
->
pos
, b->
œ°
 - b->pos);

2142 i‡(
rc
 =
NGX_DONE
) {

2146 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2147 
u
->
Àngth
 = 0;

2152 i‡(
rc
 =
NGX_AGAIN
) {

2158 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2161  
NGX_ERROR
;

2166 i‡(
r
->
subªque°_ö_mem‹y
) {

2168 
˛
 = 
u
->
out_bufs
;

2170 i‡(
˛
) {

2171 
buf
->
pos
 = 
˛
->buf->pos;

2174 
buf
->
œ°
 = buf->
pos
;

2176 
˛
 = 
u
->
out_bufs
; cl; c»˛->
√xt
) {

2177 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2179 
˛
->
buf
->
pos
, cl->buf->
œ°
, 
	`ngx_buf_size
(cl->buf));

2181 i‡(
buf
->
œ°
 =
˛
->buf->
pos
) {

2182 
buf
->
œ°
 = 
˛
->buf->last;

2186 
buf
->
œ°
 = 
	`ngx_movemem
(buf->œ°, 
˛
->buf->
pos
,

2187 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

2189 
˛
->
buf
->
pos
 = buf->
œ°
 - (cl->buf->last - cl->buf->pos);

2190 
˛
->
buf
->
œ°
 = buf->last;

2194  
NGX_OK
;

2195 
	}
}

2199 
	$ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2201 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2205 
	}
}

2209 
	$ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2211 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2215 
	}
}

2218 
ngx_öt_t


2219 
	$ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2220 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2222 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2224 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2226 i‡(
˘x
 =
NULL
) {

2227 
v
->
nŸ_found
 = 1;

2228  
NGX_OK
;

2231 
v
->
Àn
 = 
˘x
->
v¨s
.
ho°_hódî
.len;

2232 
v
->
vÆid
 = 1;

2233 
v
->
no_ˇchóbÀ
 = 0;

2234 
v
->
nŸ_found
 = 0;

2235 
v
->
d©a
 = 
˘x
->
v¨s
.
ho°_hódî
.data;

2237  
NGX_OK
;

2238 
	}
}

2241 
ngx_öt_t


2242 
	$ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2243 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2245 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2247 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2249 i‡(
˘x
 =
NULL
) {

2250 
v
->
nŸ_found
 = 1;

2251  
NGX_OK
;

2254 
v
->
Àn
 = 
˘x
->
v¨s
.
p‹t
.len;

2255 
v
->
vÆid
 = 1;

2256 
v
->
no_ˇchóbÀ
 = 0;

2257 
v
->
nŸ_found
 = 0;

2258 
v
->
d©a
 = 
˘x
->
v¨s
.
p‹t
.data;

2260  
NGX_OK
;

2261 
	}
}

2264 
ngx_öt_t


2265 
	$ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2266 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2268 
u_ch¨
 *
p
;

2270 
v
->
vÆid
 = 1;

2271 
v
->
no_ˇchóbÀ
 = 0;

2272 
v
->
nŸ_found
 = 0;

2274 i‡(
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
 =
NULL
) {

2275 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2276 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

2277  
NGX_OK
;

2280 
v
->
Àn
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.len

2281 + (", "Ë- 1 + 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
;

2283 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
v
->
Àn
);

2284 i‡(
p
 =
NULL
) {

2285  
NGX_ERROR
;

2288 
v
->
d©a
 = 
p
;

2290 
p
 = 
	`ngx_c›y
’, 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.
d©a
,

2291 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.
Àn
);

2293 *
p
++ = ','; *p++ = ' ';

2295 
	`ngx_mem˝y
(
p
, 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,Ñ->c⁄√˘i⁄->addr_ãxt.
Àn
);

2297  
NGX_OK
;

2298 
	}
}

2301 
ngx_öt_t


2302 
	$ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2303 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2305 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2307 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2309 i‡(
˘x
 =
NULL
) {

2310 
v
->
nŸ_found
 = 1;

2311  
NGX_OK
;

2314 
v
->
vÆid
 = 1;

2315 
v
->
no_ˇchóbÀ
 = 0;

2316 
v
->
nŸ_found
 = 0;

2318 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_SIZE_T_LEN
);

2320 i‡(
v
->
d©a
 =
NULL
) {

2321  
NGX_ERROR
;

2324 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", 
˘x
->
öã∫Æ_body_Àngth
) - v->data;

2326  
NGX_OK
;

2327 
	}
}

2330 
ngx_öt_t


2331 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2332 
size_t
 
¥efix
)

2334 
size_t
 
Àn
;

2335 
ngx_öt_t
 
rc
;

2336 
ngx_uöt_t
 
i
;

2337 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2338 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2340 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2342 
¥
 = 
∂cf
->
ªdúe˘s
->
ñts
;

2344 i‡(
¥
 =
NULL
) {

2345  
NGX_DECLINED
;

2348 
Àn
 = 
h
->
vÆue
.À¿- 
¥efix
;

2350 
i
 = 0; i < 
∂cf
->
ªdúe˘s
->
√…s
; i++) {

2351 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2353 i‡(
rc
 !
NGX_DECLINED
) {

2354  
rc
;

2358  
NGX_DECLINED
;

2359 
	}
}

2362 
ngx_öt_t


2363 
	$ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
)

2365 
size_t
 
¥efix
;

2366 
u_ch¨
 *
p
;

2367 
ngx_öt_t
 
rc
, 
rv
;

2368 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2370 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
h
->
vÆue
.
d©a
, ';');

2371 i‡(
p
 =
NULL
) {

2372  
NGX_DECLINED
;

2375 
¥efix
 = 
p
 + 1 - 
h
->
vÆue
.
d©a
;

2377 
rv
 = 
NGX_DECLINED
;

2379 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2381 i‡(
∂cf
->
cookõ_domaös
) {

2382 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "domain=", 7 - 1);

2384 i‡(
p
) {

2385 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 7,

2386 
∂cf
->
cookõ_domaös
);

2387 i‡(
rc
 =
NGX_ERROR
) {

2388  
NGX_ERROR
;

2391 i‡(
rc
 !
NGX_DECLINED
) {

2392 
rv
 = 
rc
;

2397 i‡(
∂cf
->
cookõ_∑ths
) {

2398 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "path=", 5 - 1);

2400 i‡(
p
) {

2401 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 5,

2402 
∂cf
->
cookõ_∑ths
);

2403 i‡(
rc
 =
NGX_ERROR
) {

2404  
NGX_ERROR
;

2407 i‡(
rc
 !
NGX_DECLINED
) {

2408 
rv
 = 
rc
;

2413  
rv
;

2414 
	}
}

2417 
ngx_öt_t


2418 
	$ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2419 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
)

2421 
size_t
 
Àn
, 
¥efix
;

2422 
u_ch¨
 *
p
;

2423 
ngx_öt_t
 
rc
;

2424 
ngx_uöt_t
 
i
;

2425 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2427 
¥efix
 = 
vÆue
 - 
h
->vÆue.
d©a
;

2429 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
, ';');

2431 
Àn
 = 
p
 ? (
size_t
Ë’ - 
vÆue
Ë: (
h
->vÆue.À¿- 
¥efix
);

2433 
¥
 = 
ªwrôes
->
ñts
;

2435 
i
 = 0; i < 
ªwrôes
->
√…s
; i++) {

2436 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2438 i‡(
rc
 !
NGX_DECLINED
) {

2439  
rc
;

2443  
NGX_DECLINED
;

2444 
	}
}

2447 
ngx_öt_t


2448 
	$ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2449 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2451 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2453 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2454  
NGX_ERROR
;

2457 i‡(
∑âîn
.
Àn
 >Üen

2458 || 
	`ngx_r°∫cmp
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
∑âîn
.data,

2459 
∑âîn
.
Àn
) != 0)

2461  
NGX_DECLINED
;

2464 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2465  
NGX_ERROR
;

2468  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
∑âîn
.
Àn
, &
ª∂a˚mít
);

2469 
	}
}

2472 #i‡(
NGX_PCRE
)

2474 
ngx_öt_t


2475 
	$ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2476 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2478 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2480 
∑âîn
.
Àn
 =Üen;

2481 
∑âîn
.
d©a
 = 
h
->
vÆue
.d©®+ 
¥efix
;

2483 i‡(
	`ngx_hâp_ªgex_exec
(
r
, 
¥
->
∑âîn
.
ªgex
, &∑âînË!
NGX_OK
) {

2484  
NGX_DECLINED
;

2487 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2488  
NGX_ERROR
;

2491 i‡(
¥efix
 =0 && 
h
->
vÆue
.
Àn
 ==Üen) {

2492 
h
->
vÆue
 = 
ª∂a˚mít
;

2493  
NGX_OK
;

2496  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2497 
	}
}

2502 
ngx_öt_t


2503 
	$ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2504 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2506 
u_ch¨
 *
p
;

2507 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2509 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2510  
NGX_ERROR
;

2513 
p
 = 
h
->
vÆue
.
d©a
 + 
¥efix
;

2515 i‡(
p
[0] == '.') {

2516 
p
++;

2517 
¥efix
++;

2518 
Àn
--;

2521 i‡(
∑âîn
.
Àn
 !À¿|| 
	`ngx_r°∫ˇ£cmp
’©ã∫.
d©a
, 
p
,Üen) != 0) {

2522  
NGX_DECLINED
;

2525 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2526  
NGX_ERROR
;

2529  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2530 
	}
}

2533 
ngx_öt_t


2534 
	$ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
,

2535 
size_t
 
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
)

2537 
u_ch¨
 *
p
, *
d©a
;

2538 
size_t
 
√w_Àn
;

2540 
√w_Àn
 = 
ª∂a˚mít
->
Àn
 + 
h
->
vÆue
.len -Üen;

2542 i‡(
ª∂a˚mít
->
Àn
 >Üen) {

2544 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
√w_Àn
);

2545 i‡(
d©a
 =
NULL
) {

2546  
NGX_ERROR
;

2549 
p
 = 
	`ngx_c›y
(
d©a
, 
h
->
vÆue
.d©a, 
¥efix
);

2550 
p
 = 
	`ngx_c›y
’, 
ª∂a˚mít
->
d©a
,Ñïœ˚mít->
Àn
);

2552 
	`ngx_mem˝y
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2553 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
);

2555 
h
->
vÆue
.
d©a
 = data;

2558 
p
 = 
	`ngx_c›y
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
ª∂a˚mít
->data,

2559 
ª∂a˚mít
->
Àn
);

2561 
	`ngx_memmove
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2562 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
);

2565 
h
->
vÆue
.
Àn
 = 
√w_Àn
;

2567  
NGX_OK
;

2568 
	}
}

2571 
ngx_öt_t


2572 
	$ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2574 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2576 
v
 = 
ngx_hâp_¥oxy_v¨s
; v->
«me
.
Àn
; v++) {

2577 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2578 i‡(
v¨
 =
NULL
) {

2579  
NGX_ERROR
;

2582 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2583 
v¨
->
d©a
 = 
v
->data;

2586  
NGX_OK
;

2587 
	}
}

2591 
	$ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2593 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
;

2595 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_loc_c⁄f_t
));

2596 i‡(
c⁄f
 =
NULL
) {

2597  
NULL
;

2626 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2627 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2628 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2629 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2631 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2632 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2633 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2635 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2636 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2638 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2639 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2640 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2642 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2643 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2645 #i‡(
NGX_HTTP_CACHE
)

2646 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

2647 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2648 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2649 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2650 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2651 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2652 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2655 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2656 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2658 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2659 #i‡(
NGX_HTTP_SSL
)

2660 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

2664 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2666 
c⁄f
->
ªdúe˘
 = 
NGX_CONF_UNSET
;

2667 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2669 
c⁄f
->
cookõ_domaös
 = 
NGX_CONF_UNSET_PTR
;

2670 
c⁄f
->
cookõ_∑ths
 = 
NGX_CONF_UNSET_PTR
;

2672 
c⁄f
->
hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

2674 
c⁄f
->
hódîs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

2675 
c⁄f
->
hódîs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

2677 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "proxy");

2679  
c⁄f
;

2680 
	}
}

2684 
	$ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2686 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2687 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2689 
u_ch¨
 *
p
;

2690 
size_t
 
size
;

2691 
ngx_hash_öô_t
 
hash
;

2692 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2693 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2694 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2696 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

2697 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2698 
¥ev
->
up°ªam
.
°‹e
, 0);

2700 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

2701 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2702 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2706 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2707 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2709 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2710 
¥ev
->
up°ªam
.
buf„rög
, 1);

2712 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2713 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2715 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2716 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2718 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2719 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2721 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2722 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2724 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2725 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2727 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2728 
¥ev
->
up°ªam
.
buf„r_size
,

2729 (
size_t
Ë
ngx_∑gesize
);

2731 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2732 8, 
ngx_∑gesize
);

2734 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2735 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2737  
NGX_CONF_ERROR
;

2741 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2742 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2743 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2747 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2748 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2749 
NGX_CONF_UNSET_SIZE
);

2751 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2752 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2754 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2755 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2758 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2759 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2764  
NGX_CONF_ERROR
;

2767 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2768 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2770 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2774  
NGX_CONF_ERROR
;

2778 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2779 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2780 
NGX_CONF_UNSET_SIZE
);

2782 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2783 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2785 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2786 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2789 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2790 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2795  
NGX_CONF_ERROR
;

2798 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2799 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2800 
NGX_CONF_UNSET_SIZE
);

2802 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2803 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2805 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2806 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2809 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2810 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2812 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2818  
NGX_CONF_ERROR
;

2822 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2823 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2824 
NGX_CONF_BITMASK_SET
);

2827 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2828 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2829 (
NGX_CONF_BITMASK_SET


2830 |
NGX_HTTP_UPSTREAM_FT_ERROR


2831 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2833 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2834 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2835 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2838 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2839 
¥ev
->
up°ªam
.
ãmp_∑th
,

2840 &
ngx_hâp_¥oxy_ãmp_∑th
)

2841 !
NGX_OK
)

2843  
NGX_CONF_ERROR
;

2847 #i‡(
NGX_HTTP_CACHE
)

2849 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2850 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

2852 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

2853 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2855 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

2857 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2859 &
shm_z⁄e
->
shm
.
«me
);

2861  
NGX_CONF_ERROR
;

2864 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2865 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2867 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2868 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2869 (
NGX_CONF_BITMASK_SET


2870 |
NGX_HTTP_UPSTREAM_FT_OFF
));

2872 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2873 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


2874 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2877 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2878 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

2881 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

2882 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

2885 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

2887 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

2888 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

2890 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

2891 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

2893 i‡(
c⁄f
->
up°ªam
.
no_ˇche
 && c⁄f->up°ªam.
ˇche_by∑ss
 =
NULL
) {

2894 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2899 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

2900 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

2902 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

2903 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

2906 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

2907 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

2909 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

2910 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

2914 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
mëhod
, 
¥ev
->method, "");

2916 i‡(
c⁄f
->
mëhod
.
Àn


2917 && 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
 - 1] != ' ')

2919 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
] = ' ';

2920 
c⁄f
->
mëhod
.
Àn
++;

2923 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

2924 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

2925 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

2926 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

2928 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

2929 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

2931 #i‡(
NGX_HTTP_SSL
)

2932 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

2933 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

2936 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªdúe˘
, 
¥ev
->redirect, 1);

2938 i‡(
c⁄f
->
ªdúe˘
) {

2940 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

2941 
c⁄f
->
ªdúe˘s
 = 
¥ev
->redirects;

2944 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
 && c⁄f->
uæ
.
d©a
) {

2946 
c⁄f
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

2947 (
ngx_hâp_¥oxy_ªwrôe_t
));

2948 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

2949  
NGX_CONF_ERROR
;

2952 
¥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ªdúe˘s
);

2953 i‡(
¥
 =
NULL
) {

2954  
NGX_CONF_ERROR
;

2957 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
,

2958 (
ngx_hâp_com∂ex_vÆue_t
));

2960 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

2962 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

2964 i‡(
c⁄f
->
v¨s
.
uri
.
Àn
) {

2965 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
c⁄f
->
uæ
;

2966 
¥
->
ª∂a˚mít
.
vÆue
 = 
c⁄f
->
loˇti⁄
;

2969 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
c⁄f
->
uæ
.len

2972 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

2973 i‡(
p
 =
NULL
) {

2974  
NGX_CONF_ERROR
;

2977 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

2979 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
uæ
.
d©a
, c⁄f->uæ.
Àn
);

2980 *
p
 = '/';

2982 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

2987 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_domaös
, 
¥ev
->cookõ_domaös, 
NULL
);

2989 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_∑ths
, 
¥ev
->cookõ_∑ths, 
NULL
);

2991 #i‡(
NGX_HTTP_SSL
)

2992 i‡(
c⁄f
->
up°ªam
.
s¶
 =
NULL
) {

2993 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

2997 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hâp_vîsi⁄
, 
¥ev
->http_version,

2998 
NGX_HTTP_VERSION_10
);

3000 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_max_size
,

3001 
¥ev
->
hódîs_hash_max_size
, 512);

3003 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_buckë_size
,

3004 
¥ev
->
hódîs_hash_buckë_size
, 64);

3006 
c⁄f
->
hódîs_hash_buckë_size
 = 
	`ngx_Æign
(conf->headers_hash_bucket_size,

3007 
ngx_ˇchñöe_size
);

3009 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3010 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3011 
hash
.
«me
 = "proxy_headers_hash";

3013 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

3014 &
¥ev
->
up°ªam
, 
ngx_hâp_¥oxy_hide_hódîs
, &
hash
)

3015 !
NGX_OK
)

3017  
NGX_CONF_ERROR
;

3020 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

3021 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

3022 
c⁄f
->
v¨s
 = 
¥ev
->vars;

3025 i‡(
c⁄f
->
¥oxy_Àngths
 =
NULL
) {

3026 
c⁄f
->
¥oxy_Àngths
 = 
¥ev
->proxy_lengths;

3027 
c⁄f
->
¥oxy_vÆues
 = 
¥ev
->proxy_values;

3030 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
¥oxy_Àngths
) {

3031 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3032 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

3033 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3034 
c⁄f
->
loˇti⁄
 = 
¥ev
->location;

3038 i‡(
c⁄f
->
body_sour˚
.
d©a
 =
NULL
) {

3039 
c⁄f
->
body_sour˚
 = 
¥ev
->body_source;

3040 
c⁄f
->
body_£t_Àn
 = 
¥ev
->body_set_len;

3041 
c⁄f
->
body_£t
 = 
¥ev
->body_set;

3044 i‡(
c⁄f
->
body_sour˚
.
d©a
 && c⁄f->
body_£t_Àn
 =
NULL
) {

3046 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3048 
sc
.
cf
 = cf;

3049 
sc
.
sour˚
 = &
c⁄f
->
body_sour˚
;

3050 
sc
.
Êushes
 = &
c⁄f
->flushes;

3051 
sc
.
Àngths
 = &
c⁄f
->
body_£t_Àn
;

3052 
sc
.
vÆues
 = &
c⁄f
->
body_£t
;

3053 
sc
.
com∂ëe_Àngths
 = 1;

3054 
sc
.
com∂ëe_vÆues
 = 1;

3056 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3057  
NGX_CONF_ERROR
;

3061 i‡(
	`ngx_hâp_¥oxy_mîge_hódîs
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

3062  
NGX_CONF_ERROR
;

3065  
NGX_CONF_OK
;

3066 
	}
}

3069 
ngx_öt_t


3070 
	$ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,

3071 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
)

3073 
u_ch¨
 *
p
;

3074 
size_t
 
size
;

3075 
uöçå_t
 *
code
;

3076 
ngx_uöt_t
 
i
;

3077 
ngx_¨øy_t
 
hódîs_«mes
, 
hódîs_mîged
;

3078 
ngx_keyvÆ_t
 *
§c
, *
s
, *
h
;

3079 
ngx_hash_key_t
 *
hk
;

3080 
ngx_hash_öô_t
 
hash
;

3081 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3082 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

3084 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

3085 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

3086 
c⁄f
->
hódîs_£t_Àn
 = 
¥ev
->headers_set_len;

3087 
c⁄f
->
hódîs_£t
 = 
¥ev
->headers_set;

3088 
c⁄f
->
hódîs_£t_hash
 = 
¥ev
->headers_set_hash;

3089 
c⁄f
->
hódîs_sour˚
 = 
¥ev
->headers_source;

3092 i‡(
c⁄f
->
hódîs_£t_hash
.
buckës


3093 && ((
c⁄f
->
body_sour˚
.
d©a
 =
NULL
)

3094 =(
¥ev
->
body_sour˚
.
d©a
 =
NULL
))

3095 #i‡(
NGX_HTTP_CACHE
)

3096 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
Ë=(
¥ev
->upstream.cache == NULL))

3100  
NGX_OK
;

3104 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

3105 !
NGX_OK
)

3107  
NGX_ERROR
;

3110 i‡(
	`ngx_¨øy_öô
(&
hódîs_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

3111 !
NGX_OK
)

3113  
NGX_ERROR
;

3116 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

3117 
c⁄f
->
hódîs_sour˚
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

3118 (
ngx_keyvÆ_t
));

3119 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

3120  
NGX_ERROR
;

3124 
c⁄f
->
hódîs_£t_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

3125 i‡(
c⁄f
->
hódîs_£t_Àn
 =
NULL
) {

3126  
NGX_ERROR
;

3129 
c⁄f
->
hódîs_£t
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

3130 i‡(
c⁄f
->
hódîs_£t
 =
NULL
) {

3131  
NGX_ERROR
;

3135 #i‡(
NGX_HTTP_CACHE
)

3137 
h
 = 
c⁄f
->
up°ªam
.
ˇche
 ? 
ngx_hâp_¥oxy_ˇche_hódîs
:

3138 
ngx_hâp_¥oxy_hódîs
;

3141 
h
 = 
ngx_hâp_¥oxy_hódîs
;

3145 
§c
 = 
c⁄f
->
hódîs_sour˚
->
ñts
;

3146 
i
 = 0; i < 
c⁄f
->
hódîs_sour˚
->
√…s
; i++) {

3148 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

3149 i‡(
s
 =
NULL
) {

3150  
NGX_ERROR
;

3153 *
s
 = 
§c
[
i
];

3156 
h
->
key
.
Àn
) {

3158 
§c
 = 
hódîs_mîged
.
ñts
;

3159 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

3160 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

3161 
√xt
;

3165 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

3166 i‡(
s
 =
NULL
) {

3167  
NGX_ERROR
;

3170 *
s
 = *
h
;

3172 
√xt
:

3174 
h
++;

3177 i‡(
c⁄f
->
body_sour˚
.
d©a
) {

3178 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

3179 i‡(
s
 =
NULL
) {

3180  
NGX_ERROR
;

3183 
	`ngx_°r_£t
(&
s
->
key
, "Content-Length");

3184 
	`ngx_°r_£t
(&
s
->
vÆue
, "$proxy_internal_body_length");

3188 
§c
 = 
hódîs_mîged
.
ñts
;

3189 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

3191 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

3192 i‡(
hk
 =
NULL
) {

3193  
NGX_ERROR
;

3196 
hk
->
key
 = 
§c
[
i
].key;

3197 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3198 
hk
->
vÆue
 = (*) 1;

3200 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

3204 i‡(
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
§c
[
i
].
vÆue
) == 0) {

3205 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

3206 (
ngx_hâp_s¸ùt_c›y_code_t
));

3207 i‡(
c›y
 =
NULL
) {

3208  
NGX_ERROR
;

3211 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3212 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3213 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

3214 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

3217 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3218 + 
§c
[
i
].
key
.
Àn
 + (": ") - 1

3219 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1

3220 + (
uöçå_t
) - 1)

3221 & ~((
uöçå_t
) - 1);

3223 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3224 i‡(
c›y
 =
NULL
) {

3225  
NGX_ERROR
;

3228 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3229 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

3230 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

3232 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3234 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3235 *
p
++ = ':'; *p++ = ' ';

3236 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
vÆue
.
d©a
, src[i].vÆue.
Àn
);

3237 *
p
++ = 
CR
; *∞
LF
;

3240 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

3241 (
ngx_hâp_s¸ùt_c›y_code_t
));

3242 i‡(
c›y
 =
NULL
) {

3243  
NGX_ERROR
;

3246 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3247 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3248 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3251 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3252 + 
§c
[
i
].
key
.
Àn
 + (": "Ë- 1 + (
uöçå_t
) - 1)

3253 & ~((
uöçå_t
) - 1);

3255 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3256 i‡(
c›y
 =
NULL
) {

3257  
NGX_ERROR
;

3260 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3261 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3263 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3264 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3265 *
p
++ = ':'; *p = ' ';

3268 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3270 
sc
.
cf
 = cf;

3271 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

3272 
sc
.
Êushes
 = &
c⁄f
->flushes;

3273 
sc
.
Àngths
 = &
c⁄f
->
hódîs_£t_Àn
;

3274 
sc
.
vÆues
 = &
c⁄f
->
hódîs_£t
;

3276 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3277  
NGX_ERROR
;

3281 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

3282 (
ngx_hâp_s¸ùt_c›y_code_t
));

3283 i‡(
c›y
 =
NULL
) {

3284  
NGX_ERROR
;

3287 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3288 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3289 
c›y
->
Àn
 = (
CRLF
) - 1;

3292 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3293 + (
CRLF
Ë- 1 + (
uöçå_t
) - 1)

3294 & ~((
uöçå_t
) - 1);

3296 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3297 i‡(
c›y
 =
NULL
) {

3298  
NGX_ERROR
;

3301 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3302 
c›y
->
Àn
 = (
CRLF
) - 1;

3304 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3305 *
p
++ = 
CR
; *∞
LF
;

3308 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

3309 i‡(
code
 =
NULL
) {

3310  
NGX_ERROR
;

3313 *
code
 = (
uöçå_t
Ë
NULL
;

3315 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, (
uöçå_t
));

3316 i‡(
code
 =
NULL
) {

3317  
NGX_ERROR
;

3320 *
code
 = (
uöçå_t
Ë
NULL
;

3323 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

3324 i‡(
code
 =
NULL
) {

3325  
NGX_ERROR
;

3328 *
code
 = (
uöçå_t
Ë
NULL
;

3331 
hash
.hash = &
c⁄f
->
hódîs_£t_hash
;

3332 
hash
.
key
 = 
ngx_hash_key_lc
;

3333 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3334 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3335 
hash
.
«me
 = "proxy_headers_hash";

3336 
hash
.
poﬁ
 = 
cf
->pool;

3337 
hash
.
ãmp_poﬁ
 = 
NULL
;

3339  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

3340 
	}
}

3344 
	$ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3346 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3348 
size_t
 
add
;

3349 
u_sh‹t
 
p‹t
;

3350 
ngx_°r_t
 *
vÆue
, *
uæ
;

3351 
ngx_uæ_t
 
u
;

3352 
ngx_uöt_t
 
n
;

3353 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3354 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3356 i‡(
∂cf
->
up°ªam
.up°ªam ||Ölcf->
¥oxy_Àngths
) {

3360 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3362 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3364 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

3365 
˛cf
->
auto_ªdúe˘
 = 1;

3368 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3370 
uæ
 = &
vÆue
[1];

3372 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3374 i‡(
n
) {

3376 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3378 
sc
.
cf
 = cf;

3379 
sc
.
sour˚
 = 
uæ
;

3380 
sc
.
Àngths
 = &
∂cf
->
¥oxy_Àngths
;

3381 
sc
.
vÆues
 = &
∂cf
->
¥oxy_vÆues
;

3382 
sc
.
v¨übÀs
 = 
n
;

3383 
sc
.
com∂ëe_Àngths
 = 1;

3384 
sc
.
com∂ëe_vÆues
 = 1;

3386 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3387  
NGX_CONF_ERROR
;

3390 #i‡(
NGX_HTTP_SSL
)

3391 i‡(
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, 
∂cf
Ë!
NGX_OK
) {

3392  
NGX_CONF_ERROR
;

3396  
NGX_CONF_OK
;

3399 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "http://", 7) == 0) {

3400 
add
 = 7;

3401 
p‹t
 = 80;

3403 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "https://", 8) == 0) {

3405 #i‡(
NGX_HTTP_SSL
)

3406 i‡(
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, 
∂cf
Ë!
NGX_OK
) {

3407  
NGX_CONF_ERROR
;

3410 
add
 = 8;

3411 
p‹t
 = 443;

3413 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3415  
NGX_CONF_ERROR
;

3419 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalid URLÖrefix");

3420  
NGX_CONF_ERROR
;

3423 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3425 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

3426 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

3427 
u
.
deÁu…_p‹t
 = 
p‹t
;

3428 
u
.
uri_∑π
 = 1;

3429 
u
.
no_ªsﬁve
 = 1;

3431 
∂cf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3432 i‡(
∂cf
->
up°ªam
.up°ªam =
NULL
) {

3433  
NGX_CONF_ERROR
;

3436 
∂cf
->
v¨s
.
schema
.
Àn
 = 
add
;

3437 
∂cf
->
v¨s
.
schema
.
d©a
 = 
uæ
->data;

3438 
∂cf
->
v¨s
.
key_°¨t
 =Ölcf->v¨s.
schema
;

3440 
	`ngx_hâp_¥oxy_£t_v¨s
(&
u
, &
∂cf
->
v¨s
);

3442 
∂cf
->
loˇti⁄
 = 
˛cf
->
«me
;

3444 i‡(
˛cf
->
«med


3445 #i‡(
NGX_PCRE
)

3446 || 
˛cf
->
ªgex


3448 || 
˛cf
->
n⁄ame
)

3450 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3451 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3457  
NGX_CONF_ERROR
;

3460 
∂cf
->
loˇti⁄
.
Àn
 = 0;

3463 
∂cf
->
uæ
 = *url;

3465  
NGX_CONF_OK
;

3466 
	}
}

3470 
	$ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3472 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3474 
u_ch¨
 *
p
;

3475 
ngx_°r_t
 *
vÆue
;

3476 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3477 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3479 i‡(
∂cf
->
ªdúe˘
 == 0) {

3480  
NGX_CONF_OK
;

3483 
∂cf
->
ªdúe˘
 = 1;

3485 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3487 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3488 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3489 
∂cf
->
ªdúe˘
 = 0;

3490 
∂cf
->
ªdúe˘s
 = 
NULL
;

3491  
NGX_CONF_OK
;

3494 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "false") == 0) {

3495 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

3497 
∂cf
->
ªdúe˘
 = 0;

3498 
∂cf
->
ªdúe˘s
 = 
NULL
;

3499  
NGX_CONF_OK
;

3502 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") != 0) {

3503 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3504 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3505  
NGX_CONF_ERROR
;

3509 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3510 
∂cf
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3511 (
ngx_hâp_¥oxy_ªwrôe_t
));

3512 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3513  
NGX_CONF_ERROR
;

3517 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
ªdúe˘s
);

3518 i‡(
¥
 =
NULL
) {

3519  
NGX_CONF_ERROR
;

3522 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") == 0) {

3523 i‡(
∂cf
->
¥oxy_Àngths
) {

3524 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3527  
NGX_CONF_ERROR
;

3530 i‡(
∂cf
->
uæ
.
d©a
 =
NULL
) {

3531 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3534  
NGX_CONF_ERROR
;

3537 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3539 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
, (
ngx_hâp_com∂ex_vÆue_t
));

3541 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

3543 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3544 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
∂cf
->
uæ
;

3545 
¥
->
ª∂a˚mít
.
vÆue
 = 
∂cf
->
loˇti⁄
;

3548 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
∂cf
->
uæ
.len + ("/") - 1;

3550 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

3551 i‡(
p
 =
NULL
) {

3552  
NGX_CONF_ERROR
;

3555 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

3557 
p
 = 
	`ngx_˝ymem
’, 
∂cf
->
uæ
.
d©a
,Ölcf->uæ.
Àn
);

3558 *
p
 = '/';

3560 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

3563  
NGX_CONF_OK
;

3567 i‡(
vÆue
[1].
d©a
[0] == '~') {

3568 
vÆue
[1].
Àn
--;

3569 
vÆue
[1].
d©a
++;

3571 i‡(
vÆue
[1].
d©a
[0] == '*') {

3572 
vÆue
[1].
Àn
--;

3573 
vÆue
[1].
d©a
++;

3575 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3576  
NGX_CONF_ERROR
;

3580 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3581  
NGX_CONF_ERROR
;

3587 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3589 
ccv
.
cf
 = cf;

3590 
ccv
.
vÆue
 = &value[1];

3591 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3593 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3594  
NGX_CONF_ERROR
;

3597 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3601 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3603 
ccv
.
cf
 = cf;

3604 
ccv
.
vÆue
 = &value[2];

3605 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3607 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3608  
NGX_CONF_ERROR
;

3611  
NGX_CONF_OK
;

3612 
	}
}

3616 
	$ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3618 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3620 
ngx_°r_t
 *
vÆue
;

3621 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3622 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3624 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3625  
NGX_CONF_OK
;

3628 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3630 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3632 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3633 
∂cf
->
cookõ_domaös
 = 
NULL
;

3634  
NGX_CONF_OK
;

3637 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3638 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3639  
NGX_CONF_ERROR
;

3642 i‡(
∂cf
->
cookõ_domaös
 =
NGX_CONF_UNSET_PTR
) {

3643 
∂cf
->
cookõ_domaös
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3644 (
ngx_hâp_¥oxy_ªwrôe_t
));

3645 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3646  
NGX_CONF_ERROR
;

3650 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_domaös
);

3651 i‡(
¥
 =
NULL
) {

3652  
NGX_CONF_ERROR
;

3655 i‡(
vÆue
[1].
d©a
[0] == '~') {

3656 
vÆue
[1].
Àn
--;

3657 
vÆue
[1].
d©a
++;

3659 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3660  
NGX_CONF_ERROR
;

3665 i‡(
vÆue
[1].
d©a
[0] == '.') {

3666 
vÆue
[1].
Àn
--;

3667 
vÆue
[1].
d©a
++;

3670 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3672 
ccv
.
cf
 = cf;

3673 
ccv
.
vÆue
 = &value[1];

3674 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3676 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3677  
NGX_CONF_ERROR
;

3680 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
;

3682 i‡(
vÆue
[2].
d©a
[0] == '.') {

3683 
vÆue
[2].
Àn
--;

3684 
vÆue
[2].
d©a
++;

3688 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3690 
ccv
.
cf
 = cf;

3691 
ccv
.
vÆue
 = &value[2];

3692 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3694 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3695  
NGX_CONF_ERROR
;

3698  
NGX_CONF_OK
;

3699 
	}
}

3703 
	$ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3705 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3707 
ngx_°r_t
 *
vÆue
;

3708 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3709 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3711 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3712  
NGX_CONF_OK
;

3715 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3717 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3719 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3720 
∂cf
->
cookõ_∑ths
 = 
NULL
;

3721  
NGX_CONF_OK
;

3724 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3725 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3726  
NGX_CONF_ERROR
;

3729 i‡(
∂cf
->
cookõ_∑ths
 =
NGX_CONF_UNSET_PTR
) {

3730 
∂cf
->
cookõ_∑ths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3731 (
ngx_hâp_¥oxy_ªwrôe_t
));

3732 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3733  
NGX_CONF_ERROR
;

3737 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_∑ths
);

3738 i‡(
¥
 =
NULL
) {

3739  
NGX_CONF_ERROR
;

3742 i‡(
vÆue
[1].
d©a
[0] == '~') {

3743 
vÆue
[1].
Àn
--;

3744 
vÆue
[1].
d©a
++;

3746 i‡(
vÆue
[1].
d©a
[0] == '*') {

3747 
vÆue
[1].
Àn
--;

3748 
vÆue
[1].
d©a
++;

3750 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3751  
NGX_CONF_ERROR
;

3755 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3756  
NGX_CONF_ERROR
;

3762 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3764 
ccv
.
cf
 = cf;

3765 
ccv
.
vÆue
 = &value[1];

3766 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3768 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3769  
NGX_CONF_ERROR
;

3772 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3775 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3777 
ccv
.
cf
 = cf;

3778 
ccv
.
vÆue
 = &value[2];

3779 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3781 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3782  
NGX_CONF_ERROR
;

3785  
NGX_CONF_OK
;

3786 
	}
}

3789 
ngx_öt_t


3790 
	$ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
,

3791 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3793 #i‡(
NGX_PCRE
)

3794 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3795 
ngx_ªgex_compûe_t
 
rc
;

3797 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3799 
rc
.
∑âîn
 = *
ªgex
;

3800 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3801 
rc
.
îr
.
d©a
 = 
îr°r
;

3803 i‡(
ˇ£Àss
) {

3804 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3807 
¥
->
∑âîn
.
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3808 i‡(
¥
->
∑âîn
.
ªgex
 =
NULL
) {

3809  
NGX_ERROR
;

3812 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
;

3814  
NGX_OK
;

3818 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3819 "usögÑegex \"%V\"Ñequúe†PCREÜibøry", 
ªgex
);

3820  
NGX_ERROR
;

3823 
	}
}

3827 
	$ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3829 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3831 
ngx_°r_t
 *
vÆue
;

3832 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3834 i‡(
∂cf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


3835 || 
∂cf
->
up°ªam
.
°‹e_Àngths
)

3840 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3842 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3843 
∂cf
->
up°ªam
.
°‹e
 = 0;

3844  
NGX_CONF_OK
;

3847 #i‡(
NGX_HTTP_CACHE
)

3849 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


3850 && 
∂cf
->
up°ªam
.
ˇche
 !
NULL
)

3857 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

3858 
∂cf
->
up°ªam
.
°‹e
 = 1;

3859  
NGX_CONF_OK
;

3863 
vÆue
[1].
Àn
++;

3865 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3867 
sc
.
cf
 = cf;

3868 
sc
.
sour˚
 = &
vÆue
[1];

3869 
sc
.
Àngths
 = &
∂cf
->
up°ªam
.
°‹e_Àngths
;

3870 
sc
.
vÆues
 = &
∂cf
->
up°ªam
.
°‹e_vÆues
;

3871 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

3872 
sc
.
com∂ëe_Àngths
 = 1;

3873 
sc
.
com∂ëe_vÆues
 = 1;

3875 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3876  
NGX_CONF_ERROR
;

3879  
NGX_CONF_OK
;

3880 
	}
}

3883 #i‡(
NGX_HTTP_CACHE
)

3886 
	$ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3888 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3890 
ngx_°r_t
 *
vÆue
;

3892 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3894 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

3898 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3899 
∂cf
->
up°ªam
.
ˇche
 = 
NULL
;

3900  
NGX_CONF_OK
;

3903 i‡(
∂cf
->
up°ªam
.
°‹e
 > 0 ||Ölcf->up°ªam.
°‹e_Àngths
) {

3907 
∂cf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

3908 &
ngx_hâp_¥oxy_moduÀ
);

3909 i‡(
∂cf
->
up°ªam
.
ˇche
 =
NULL
) {

3910  
NGX_CONF_ERROR
;

3913  
NGX_CONF_OK
;

3914 
	}
}

3918 
	$ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3920 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3922 
ngx_°r_t
 *
vÆue
;

3923 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3925 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3927 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

3931 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3933 
ccv
.
cf
 = cf;

3934 
ccv
.
vÆue
 = &value[1];

3935 
ccv
.
com∂ex_vÆue
 = &
∂cf
->
ˇche_key
;

3937 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3938  
NGX_CONF_ERROR
;

3941  
NGX_CONF_OK
;

3942 
	}
}

3948 
	$ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3950 #i‡(
NGX_FREEBSD
)

3951 
ssize_t
 *
≈
 = 
d©a
;

3953 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3954 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3957 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3959  
NGX_CONF_ERROR
;

3962 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3963 
ssize_t
 *
≈
 = 
d©a
;

3965 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3968 *
≈
 = 0;

3972  
NGX_CONF_OK
;

3973 
	}
}

3976 #i‡(
NGX_HTTP_SSL
)

3978 
ngx_öt_t


3979 
	$ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

3981 
ngx_poﬁ_˛ónup_t
 *
˛n
;

3983 
∂cf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

3984 i‡(
∂cf
->
up°ªam
.
s¶
 =
NULL
) {

3985  
NGX_ERROR
;

3988 
∂cf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

3990 i‡(
	`ngx_s¶_¸óã
(
∂cf
->
up°ªam
.
s¶
,

3991 
NGX_SSL_SSLv2
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


3992 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
,

3993 
NULL
)

3994 !
NGX_OK
)

3996  
NGX_ERROR
;

3999 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

4000 i‡(
˛n
 =
NULL
) {

4001  
NGX_ERROR
;

4004 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

4005 
˛n
->
d©a
 = 
∂cf
->
up°ªam
.
s¶
;

4007  
NGX_OK
;

4008 
	}
}

4014 
	$ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
)

4016 i‡(
u
->
Ámûy
 !
AF_UNIX
) {

4018 i‡(
u
->
no_p‹t
 || u->
p‹t
 =u->
deÁu…_p‹t
) {

4020 
v
->
ho°_hódî
 = 
u
->
ho°
;

4022 i‡(
u
->
deÁu…_p‹t
 == 80) {

4023 
	`ngx_°r_£t
(&
v
->
p‹t
, "80");

4026 
	`ngx_°r_£t
(&
v
->
p‹t
, "443");

4030 
v
->
ho°_hódî
.
Àn
 = 
u
->
ho°
.À¿+ 1 + u->
p‹t_ãxt
.len;

4031 
v
->
ho°_hódî
.
d©a
 = 
u
->
ho°
.data;

4032 
v
->
p‹t
 = 
u
->
p‹t_ãxt
;

4035 
v
->
key_°¨t
.
Àn
 +v->
ho°_hódî
.len;

4038 
	`ngx_°r_£t
(&
v
->
ho°_hódî
, "localhost");

4039 
	`ngx_°r_nuŒ
(&
v
->
p‹t
);

4040 
v
->
key_°¨t
.
Àn
 +("unix:"Ë- 1 + 
u
->
ho°
.len + 1;

4043 
v
->
uri
 = 
u
->uri;

4044 
	}
}

	@src/http/modules/ngx_http_random_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_øndom_ödex_loc_c⁄f_t
;

18 
	#NGX_HTTP_RANDOM_INDEX_PREALLOCATE
 50

	)

21 
ngx_öt_t
 
ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

23 
ngx_öt_t
 
ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

29 
ngx_comm™d_t
 
	gngx_hâp_øndom_ödex_comm™ds
[] = {

31 { 
ngx_°rög
("random_index"),

32 
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

33 
ngx_c⁄f_£t_Êag_¶Ÿ
,

34 
NGX_HTTP_LOC_CONF_OFFSET
,

35 
off£tof
(
ngx_hâp_øndom_ödex_loc_c⁄f_t
, 
íabÀ
),

36 
NULL
 },

38 
ngx_nuŒ_comm™d


42 
ngx_hâp_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ_˘x
 = {

43 
NULL
,

44 
ngx_hâp_øndom_ödex_öô
,

46 
NULL
,

47 
NULL
,

49 
NULL
,

50 
NULL
,

52 
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
,

53 
ngx_hâp_øndom_ödex_mîge_loc_c⁄f


57 
ngx_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_hâp_øndom_ödex_moduÀ_˘x
,

60 
ngx_hâp_øndom_ödex_comm™ds
,

61 
NGX_HTTP_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


73 
ngx_öt_t


74 
	$ngx_hâp_øndom_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

76 
u_ch¨
 *
œ°
, *
fûíame
;

77 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

78 
ngx_îr_t
 
îr
;

79 
ngx_öt_t
 
rc
;

80 
ngx_°r_t
 
∑th
, 
uri
, *
«me
;

81 
ngx_dú_t
 
dú
;

82 
ngx_uöt_t
 
n
, 
Àvñ
;

83 
ngx_¨øy_t
 
«mes
;

84 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
æcf
;

86 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

87  
NGX_DECLINED
;

90 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

91  
NGX_DECLINED
;

94 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_øndom_ödex_moduÀ
);

96 i‡(!
æcf
->
íabÀ
) {

97  
NGX_DECLINED
;

100 #i‡(
NGX_HAVE_D_TYPE
)

101 
Àn
 = 
NGX_DIR_MASK_LEN
;

103 
Àn
 = 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

106 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Àn
);

107 i‡(
œ°
 =
NULL
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

111 
Æloˇãd
 = 
∑th
.
Àn
;

113 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
 - 1;

114 
∑th
.
d©a
[∑th.
Àn
] = '\0';

116 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

117 "hâ∞øndom index: \"%s\"", 
∑th
.
d©a
);

119 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 =
NGX_ENOENT


123 || 
îr
 =
NGX_ENOTDIR


124 || 
îr
 =
NGX_ENAMETOOLONG
)

126 
Àvñ
 = 
NGX_LOG_ERR
;

127 
rc
 = 
NGX_HTTP_NOT_FOUND
;

129 } i‡(
îr
 =
NGX_EACCES
) {

130 
Àvñ
 = 
NGX_LOG_ERR
;

131 
rc
 = 
NGX_HTTP_FORBIDDEN
;

134 
Àvñ
 = 
NGX_LOG_CRIT
;

135 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

138 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

139 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

141  
rc
;

144 i‡(
	`ngx_¨øy_öô
(&
«mes
, 
r
->
poﬁ
, 32, (
ngx_°r_t
)Ë!
NGX_OK
) {

145  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

148 
fûíame
 = 
∑th
.
d©a
;

149 
fûíame
[
∑th
.
Àn
] = '/';

152 
	`ngx_£t_î∫o
(0);

154 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

155 
îr
 = 
ngx_î∫o
;

157 i‡(
îr
 !
NGX_ENOMOREFILES
) {

158 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

159 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

160  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

167 "hâ∞øndom index fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

169 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

173 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

175 i‡(
dú
.
ty≥
 =0 || 
	`ngx_de_is_lök
(&dir)) {

179 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

180 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

181 + 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

183 
fûíame
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

184 i‡(
fûíame
 =
NULL
) {

185  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

188 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

189 *
œ°
++ = '/';

192 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

194 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

195 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 !
NGX_ENOENT
) {

198 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

199 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

200  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

203 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

204 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

205 
ngx_de_lök_öfo_n
 " \"%s\" failed",

206 
fûíame
);

207  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

212 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

216 
«me
 = 
	`ngx_¨øy_push
(&
«mes
);

217 i‡(
«me
 =
NULL
) {

218  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

221 
«me
->
Àn
 =Üen;

223 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

224 i‡(
«me
->
d©a
 =
NULL
) {

225  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

228 
	`ngx_mem˝y
(
«me
->
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
);

231 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

232 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

233 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

236 
n
 = 
«mes
.
√…s
;

238 i‡(
n
 == 0) {

239  
NGX_DECLINED
;

242 
«me
 = 
«mes
.
ñts
;

244 
n
 = (
ngx_uöt_t
Ë(((
uöt64_t
Ë
	`ngx_øndom
() *Ç) / 0x80000000);

246 
uri
.
Àn
 = 
r
->uri.À¿+ 
«me
[
n
].len;

248 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

249 i‡(
uri
.
d©a
 =
NULL
) {

250  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

253 
œ°
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

254 
	`ngx_mem˝y
(
œ°
, 
«me
[
n
].
d©a
,Çame[n].
Àn
);

256  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
,

262 
ngx_°r_t
 *
«me
)

264 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

266 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

270 
	}
}

274 
	$ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

276 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
;

278 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_øndom_ödex_loc_c⁄f_t
));

279 i‡(
c⁄f
 =
NULL
) {

280  
NULL
;

283 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

285  
c⁄f
;

286 
	}
}

290 
	$ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

292 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

293 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

295 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

297  
NGX_CONF_OK
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

304 
ngx_hâp_h™dÀr_±
 *
h
;

305 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

307 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

309 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

310 i‡(
h
 =
NULL
) {

311  
NGX_ERROR
;

314 *
h
 = 
ngx_hâp_øndom_ödex_h™dÀr
;

316  
NGX_OK
;

317 
	}
}

	@src/http/modules/ngx_http_range_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

49 
off_t
 
	m°¨t
;

50 
off_t
 
	míd
;

51 
ngx_°r_t
 
	mc⁄ã¡_ønge
;

52 } 
	tngx_hâp_ønge_t
;

56 
off_t
 
	moff£t
;

57 
ngx_°r_t
 
	mbound¨y_hódî
;

58 
ngx_¨øy_t
 
	mønges
;

59 } 
	tngx_hâp_ønge_fûãr_˘x_t
;

62 
ngx_öt_t
 
ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_uöt_t
 
ønges
);

64 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

68 
ngx_öt_t
 
ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

71 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

73 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

76 
ngx_öt_t
 
ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_öt_t
 
ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

80 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
 = {

81 
NULL
,

82 
ngx_hâp_ønge_hódî_fûãr_öô
,

84 
NULL
,

85 
NULL
,

87 
NULL
,

88 
NULL
,

90 
NULL
,

91 
NULL
,

95 
ngx_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ
 = {

96 
NGX_MODULE_V1
,

97 &
ngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
,

98 
NULL
,

99 
NGX_HTTP_MODULE
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NGX_MODULE_V1_PADDING


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_ønge_body_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL
,

126 
ngx_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_ønge_body_fûãr_moduÀ_˘x
,

129 
NULL
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

143 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

146 
ngx_öt_t


147 
	$ngx_hâp_ønge_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

149 
time_t
 
if_ønge
;

150 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

151 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

153 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10


154 || 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


155 || 
r
 !r->
maö


156 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1

157 || !
r
->
Ælow_ønges
)

159  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

162 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

164 i‡(
˛cf
->
max_ønges
 == 0) {

165  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

168 i‡(
r
->
hódîs_ö
.
ønge
 =
NULL


169 || 
r
->
hódîs_ö
.
ønge
->
vÆue
.
Àn
 < 7

170 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
,

171 (
u_ch¨
 *) "bytes=", 6)

174 
√xt_fûãr
;

177 i‡(
r
->
hódîs_ö
.
if_ønge
 &&Ñ->
hódîs_out
.
œ°_modifõd_time
 != -1) {

179 
if_ønge
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.if_ønge->
vÆue
.
d©a
,

180 
r
->
hódîs_ö
.
if_ønge
->
vÆue
.
Àn
);

182 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

184 
if_ønge
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

186 i‡(
if_ønge
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

187 
√xt_fûãr
;

191 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ønge_fûãr_˘x_t
));

192 i‡(
˘x
 =
NULL
) {

193  
NGX_ERROR
;

196 i‡(
	`ngx_¨øy_öô
(&
˘x
->
ønges
, 
r
->
poﬁ
, 1, (
ngx_hâp_ønge_t
))

197 !
NGX_OK
)

199  
NGX_ERROR
;

202 
	`ngx_hâp_ønge_∑r£
(
r
, 
˘x
, 
˛cf
->
max_ønges
)) {

204 
NGX_OK
:

205 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

207 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_PARTIAL_CONTENT
;

208 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

210 i‡(
˘x
->
ønges
.
√…s
 == 1) {

211  
	`ngx_hâp_ønge_sögÀ∑π_hódî
(
r
, 
˘x
);

214  
	`ngx_hâp_ønge_mu…ù¨t_hódî
(
r
, 
˘x
);

216 
NGX_HTTP_RANGE_NOT_SATISFIABLE
:

217  
	`ngx_hâp_ønge_nŸ_ßtisfübÀ
(
r
);

219 
NGX_ERROR
:

220  
NGX_ERROR
;

226 
√xt_fûãr
:

228 
r
->
hódîs_out
.
ac˚±_ønges
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

229 i‡(
r
->
hódîs_out
.
ac˚±_ønges
 =
NULL
) {

230  
NGX_ERROR
;

233 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 1;

234 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
key
, "Accept-Ranges");

235 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
vÆue
, "bytes");

237  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
,

243 
ngx_uöt_t
 
ønges
)

245 
u_ch¨
 *
p
;

246 
off_t
 
°¨t
, 
íd
, 
size
, 
c⁄ã¡_Àngth
;

247 
ngx_uöt_t
 
suffix
;

248 
ngx_hâp_ønge_t
 *
ønge
;

250 
p
 = 
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
 + 6;

251 
size
 = 0;

252 
c⁄ã¡_Àngth
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

255 
°¨t
 = 0;

256 
íd
 = 0;

257 
suffix
 = 0;

259 *
p
 == ' ') {Ö++; }

261 i‡(*
p
 != '-') {

262 i‡(*
p
 < '0' || *p > '9') {

263  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

266 *
p
 >= '0' && *p <= '9') {

267 
°¨t
 = sèπ * 10 + *
p
++ - '0';

270 *
p
 == ' ') {Ö++; }

272 i‡(*
p
++ != '-') {

273  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

276 *
p
 == ' ') {Ö++; }

278 i‡(*
p
 == ',' || *p == '\0') {

279 
íd
 = 
c⁄ã¡_Àngth
;

280 
found
;

284 
suffix
 = 1;

285 
p
++;

288 i‡(*
p
 < '0' || *p > '9') {

289  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

292 *
p
 >= '0' && *p <= '9') {

293 
íd
 =Énd * 10 + *
p
++ - '0';

296 *
p
 == ' ') {Ö++; }

298 i‡(*
p
 != ',' && *p != '\0') {

299  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

302 i‡(
suffix
) {

303 
°¨t
 = 
c⁄ã¡_Àngth
 - 
íd
;

304 
íd
 = 
c⁄ã¡_Àngth
 - 1;

307 i‡(
íd
 >
c⁄ã¡_Àngth
) {

308 
íd
 = 
c⁄ã¡_Àngth
;

311 
íd
++;

314 
found
:

316 i‡(
°¨t
 < 
íd
) {

317 
ønge
 = 
	`ngx_¨øy_push
(&
˘x
->
ønges
);

318 i‡(
ønge
 =
NULL
) {

319  
NGX_ERROR
;

322 
ønge
->
°¨t
 = start;

323 
ønge
->
íd
 =Énd;

325 
size
 +
íd
 - 
°¨t
;

327 i‡(
ønges
-- == 0) {

328  
NGX_DECLINED
;

332 i‡(*
p
++ != ',') {

337 i‡(
˘x
->
ønges
.
√…s
 == 0) {

338  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

341 i‡(
size
 > 
c⁄ã¡_Àngth
) {

342  
NGX_DECLINED
;

345  
NGX_OK
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

351 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

353 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

354 
ngx_hâp_ønge_t
 *
ønge
;

356 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

357 i‡(
c⁄ã¡_ønge
 =
NULL
) {

358  
NGX_ERROR
;

361 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

363 
c⁄ã¡_ønge
->
hash
 = 1;

364 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

366 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

367 ("byã†-/"Ë- 1 + 3 * 
NGX_OFF_T_LEN
);

368 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

369  
NGX_ERROR
;

374 
ønge
 = 
˘x
->
ønges
.
ñts
;

376 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

378 
ønge
->
°¨t
,Ñ™ge->
íd
 - 1,

379 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

380 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

382 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ønge
->
íd
 -Ñ™ge->
°¨t
;

384 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

385 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

386 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

389  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

390 
	}
}

393 
ngx_öt_t


394 
	$ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

395 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

397 
size_t
 
Àn
;

398 
ngx_uöt_t
 
i
;

399 
ngx_hâp_ønge_t
 *
ønge
;

400 
ngx_©omic_uöt_t
 
bound¨y
;

402 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


403 + (
CRLF
 "Content-Type: ") - 1

404 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


405 + (
CRLF
 "Content-Range: bytes ") - 1;

407 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

408 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

411 
˘x
->
bound¨y_hódî
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

412 i‡(
˘x
->
bound¨y_hódî
.
d©a
 =
NULL
) {

413  
NGX_ERROR
;

416 
bound¨y
 = 
	`ngx_√xt_ãmp_numbî
(0);

426 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

427 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

428 
CRLF
 "--%0muA" CRLF

429 "C⁄ã¡-Ty≥: %V; ch¨£t=%V" 
CRLF


431 
bound¨y
,

432 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
,

433 &
r
->
hódîs_out
.
ch¨£t
)

434 - 
˘x
->
bound¨y_hódî
.
d©a
;

436 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

438 } i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

439 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

440 
CRLF
 "--%0muA" CRLF

441 "C⁄ã¡-Ty≥: %V" 
CRLF


443 
bound¨y
,

444 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
)

445 - 
˘x
->
bound¨y_hódî
.
d©a
;

448 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

449 
CRLF
 "--%0muA" CRLF

451 
bound¨y
)

452 - 
˘x
->
bound¨y_hódî
.
d©a
;

455 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =

456 
	`ngx_≤Æloc
(
r
->
poﬁ
,

458 + 
NGX_ATOMIC_T_LEN
);

460 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =
NULL
) {

461  
NGX_ERROR
;

464 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

468 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =

469 
	`ngx_•rötf
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

471 
bound¨y
)

472 - 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
;

474 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

478 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
 + ("--" CRLF) - 1;

480 
ønge
 = 
˘x
->
ønges
.
ñts
;

481 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

485 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =

486 
	`ngx_≤Æloc
(
r
->
poﬁ
, 3 * 
NGX_OFF_T_LEN
 + 2 + 4);

488 i‡(
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =
NULL
) {

489  
NGX_ERROR
;

492 
ønge
[
i
].
c⁄ã¡_ønge
.
Àn
 = 
	`ngx_•rötf
‘™ge[i].c⁄ã¡_ønge.
d©a
,

493 "%O-%O/%O" 
CRLF
 CRLF,

494 
ønge
[
i
].
°¨t
,Ñ™ge[i].
íd
 - 1,

495 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

496 - 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

498 
Àn
 +
˘x
->
bound¨y_hódî
.À¿+ 
ønge
[
i
].
c⁄ã¡_ønge
.len

499 + (
size_t
Ë(
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
);

502 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

504 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

505 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

506 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

509  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

510 
	}
}

513 
ngx_öt_t


514 
	$ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
)

516 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

518 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

520 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

521 i‡(
c⁄ã¡_ønge
 =
NULL
) {

522  
NGX_ERROR
;

525 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

527 
c⁄ã¡_ønge
->
hash
 = 1;

528 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

530 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

531 ("byã†*/"Ë- 1 + 
NGX_OFF_T_LEN
);

532 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

533  
NGX_ERROR
;

536 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

538 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

539 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

541 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

543  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

544 
	}
}

547 
ngx_öt_t


548 
	$ngx_hâp_ønge_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

550 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

552 i‡(
ö
 =
NULL
) {

553  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

556 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

558 i‡(
˘x
 =
NULL
) {

559  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

562 i‡(
˘x
->
ønges
.
√…s
 == 1) {

563  
	`ngx_hâp_ønge_sögÀ∑π_body
(
r
, 
˘x
, 
ö
);

570 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

571  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

574 i‡(
	`ngx_hâp_ønge_ã°_ovîœµed
(
r
, 
˘x
, 
ö
Ë!
NGX_OK
) {

575  
NGX_ERROR
;

578  
	`ngx_hâp_ønge_mu…ù¨t_body
(
r
, 
˘x
, 
ö
);

579 
	}
}

582 
ngx_öt_t


583 
	$ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

584 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

586 
off_t
 
°¨t
, 
œ°
;

587 
ngx_buf_t
 *
buf
;

588 
ngx_uöt_t
 
i
;

589 
ngx_hâp_ønge_t
 *
ønge
;

591 i‡(
˘x
->
off£t
) {

592 
ovîœµed
;

595 
buf
 = 
ö
->buf;

597 i‡(!
buf
->
œ°_buf
) {

598 
°¨t
 = 
˘x
->
off£t
;

599 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

601 
ønge
 = 
˘x
->
ønges
.
ñts
;

602 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

603 i‡(
°¨t
 > 
ønge
[
i
].°¨à|| 
œ°
 <Ñ™ge[i].
íd
) {

604 
ovîœµed
;

609 
˘x
->
off£t
 = 
	`ngx_buf_size
(
buf
);

611  
NGX_OK
;

613 
ovîœµed
:

615 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

618  
NGX_ERROR
;

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

624 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

626 
off_t
 
°¨t
, 
œ°
;

627 
ngx_buf_t
 *
buf
;

628 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

629 
ngx_hâp_ønge_t
 *
ønge
;

631 
out
 = 
NULL
;

632 
Œ
 = &
out
;

633 
ønge
 = 
˘x
->
ønges
.
ñts
;

635 
˛
 = 
ö
; cl; c»˛->
√xt
) {

637 
buf
 = 
˛
->buf;

639 
°¨t
 = 
˘x
->
off£t
;

640 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

642 
˘x
->
off£t
 = 
œ°
;

644 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

645 "hâ∞øngêbody buf: %O-%O", 
°¨t
, 
œ°
);

647 i‡(
	`ngx_buf_•ecül
(
buf
)) {

648 *
Œ
 = 
˛
;

649 
Œ
 = &
˛
->
√xt
;

653 i‡(
ønge
->
íd
 <
°¨t
 ||Ñ™ge->°¨à>
œ°
) {

655 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

658 i‡(
buf
->
ö_fûe
) {

659 
buf
->
fûe_pos
 = buf->
fûe_œ°
;

662 
buf
->
pos
 = buf->
œ°
;

663 
buf
->
sync
 = 1;

668 i‡(
ønge
->
°¨t
 > start) {

670 i‡(
buf
->
ö_fûe
) {

671 
buf
->
fûe_pos
 +
ønge
->
°¨t
 - start;

674 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

675 
buf
->
pos
 +(
size_t
Ë(
ønge
->
°¨t
 - start);

679 i‡(
ønge
->
íd
 <
œ°
) {

681 i‡(
buf
->
ö_fûe
) {

682 
buf
->
fûe_œ°
 -
œ°
 - 
ønge
->
íd
;

685 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

686 
buf
->
œ°
 -(
size_t
Ë÷a° - 
ønge
->
íd
);

689 
buf
->
œ°_buf
 = 1;

690 *
Œ
 = 
˛
;

691 
˛
->
√xt
 = 
NULL
;

696 *
Œ
 = 
˛
;

697 
Œ
 = &
˛
->
√xt
;

700 i‡(
out
 =
NULL
) {

701  
NGX_OK
;

704  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

705 
	}
}

708 
ngx_öt_t


709 
	$ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

710 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

712 
ngx_buf_t
 *
b
, *
buf
;

713 
ngx_uöt_t
 
i
;

714 
ngx_chaö_t
 *
out
, *
h˛
, *
r˛
, *
d˛
, **
Œ
;

715 
ngx_hâp_ønge_t
 *
ønge
;

717 
Œ
 = &
out
;

718 
buf
 = 
ö
->buf;

719 
ønge
 = 
˘x
->
ønges
.
ñts
;

721 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

731 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

732 i‡(
b
 =
NULL
) {

733  
NGX_ERROR
;

736 
b
->
mem‹y
 = 1;

737 
b
->
pos
 = 
˘x
->
bound¨y_hódî
.
d©a
;

738 
b
->
œ°
 = 
˘x
->
bound¨y_hódî
.
d©a
 + ctx->bound¨y_hódî.
Àn
;

740 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

741 i‡(
h˛
 =
NULL
) {

742  
NGX_ERROR
;

745 
h˛
->
buf
 = 
b
;

750 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

751 i‡(
b
 =
NULL
) {

752  
NGX_ERROR
;

755 
b
->
ãmp‹¨y
 = 1;

756 
b
->
pos
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

757 
b
->
œ°
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 +Ñ™ge[i].c⁄ã¡_ønge.
Àn
;

759 
r˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

760 i‡(
r˛
 =
NULL
) {

761  
NGX_ERROR
;

764 
r˛
->
buf
 = 
b
;

769 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

770 i‡(
b
 =
NULL
) {

771  
NGX_ERROR
;

774 
b
->
ö_fûe
 = 
buf
->in_file;

775 
b
->
ãmp‹¨y
 = 
buf
->temporary;

776 
b
->
mem‹y
 = 
buf
->memory;

777 
b
->
mm≠
 = 
buf
->mmap;

778 
b
->
fûe
 = 
buf
->file;

780 i‡(
buf
->
ö_fûe
) {

781 
b
->
fûe_pos
 = 
buf
->fûe_po†+ 
ønge
[
i
].
°¨t
;

782 
b
->
fûe_œ°
 = 
buf
->
fûe_pos
 + 
ønge
[
i
].
íd
;

785 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

786 
b
->
pos
 = 
buf
->po†+ (
size_t
Ë
ønge
[
i
].
°¨t
;

787 
b
->
œ°
 = 
buf
->
pos
 + (
size_t
Ë
ønge
[
i
].
íd
;

790 
d˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

791 i‡(
d˛
 =
NULL
) {

792  
NGX_ERROR
;

795 
d˛
->
buf
 = 
b
;

797 *
Œ
 = 
h˛
;

798 
h˛
->
√xt
 = 
r˛
;

799 
r˛
->
√xt
 = 
d˛
;

800 
Œ
 = &
d˛
->
√xt
;

805 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

806 i‡(
b
 =
NULL
) {

807  
NGX_ERROR
;

810 
b
->
ãmp‹¨y
 = 1;

811 
b
->
œ°_buf
 = 1;

813 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


814 + ("--" 
CRLF
) - 1);

815 i‡(
b
->
pos
 =
NULL
) {

816  
NGX_ERROR
;

819 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
bound¨y_hódî
.
d©a
,

820 (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
);

821 *
b
->
œ°
++ = '-'; *b->last++ = '-';

822 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

824 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

825 i‡(
h˛
 =
NULL
) {

826  
NGX_ERROR
;

829 
h˛
->
buf
 = 
b
;

830 
h˛
->
√xt
 = 
NULL
;

832 *
Œ
 = 
h˛
;

834  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

835 
	}
}

838 
ngx_öt_t


839 
	$ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

841 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

842 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ønge_hódî_fûãr
;

844  
NGX_OK
;

845 
	}
}

848 
ngx_öt_t


849 
	$ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

851 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

852 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ønge_body_fûãr
;

854  
NGX_OK
;

855 
	}
}

	@src/http/modules/ngx_http_realip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REALIP_XREALIP
 0

	)

14 
	#NGX_HTTP_REALIP_XFWD
 1

	)

15 
	#NGX_HTTP_REALIP_HEADER
 2

	)

19 
ngx_¨øy_t
 *
	m‰om
;

20 
ngx_uöt_t
 
	mty≥
;

21 
ngx_uöt_t
 
	mhash
;

22 
ngx_°r_t
 
	mhódî
;

23 
ngx_Êag_t
 
	mªcursive
;

24 } 
	tngx_hâp_ªÆù_loc_c⁄f_t
;

28 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

29 
sockaddr
 *
	msockaddr
;

30 
sockÀn_t
 
	msockÀn
;

31 
ngx_°r_t
 
	maddr_ãxt
;

32 } 
	tngx_hâp_ªÆù_˘x_t
;

35 
ngx_öt_t
 
ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

36 
ngx_öt_t
 
ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_addr_t
 *
addr
);

38 
ngx_hâp_ªÆù_˛ónup
(*
d©a
);

39 *
ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
c⁄f
);

41 *
ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

42 *
ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

43 *
ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

44 *
∑ª¡
, *
chûd
);

45 
ngx_öt_t
 
ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
);

48 
ngx_comm™d_t
 
	gngx_hâp_ªÆù_comm™ds
[] = {

50 { 
ngx_°rög
("set_real_ip_from"),

51 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

52 
ngx_hâp_ªÆù_‰om
,

53 
NGX_HTTP_LOC_CONF_OFFSET
,

55 
NULL
 },

57 { 
ngx_°rög
("real_ip_header"),

58 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

59 
ngx_hâp_ªÆù
,

60 
NGX_HTTP_LOC_CONF_OFFSET
,

62 
NULL
 },

64 { 
ngx_°rög
("real_ip_recursive"),

65 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

66 
ngx_c⁄f_£t_Êag_¶Ÿ
,

67 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
off£tof
(
ngx_hâp_ªÆù_loc_c⁄f_t
, 
ªcursive
),

69 
NULL
 },

71 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ_˘x
 = {

77 
NULL
,

78 
ngx_hâp_ªÆù_öô
,

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_hâp_ªÆù_¸óã_loc_c⁄f
,

87 
ngx_hâp_ªÆù_mîge_loc_c⁄f


91 
ngx_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_ªÆù_moduÀ_˘x
,

94 
ngx_hâp_ªÆù_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

110 
u_ch¨
 *
ù
, *
p
;

111 
size_t
 
Àn
;

112 
ngx_uöt_t
 
i
, 
hash
;

113 
ngx_addr_t
 
addr
;

114 
ngx_li°_∑π_t
 *
∑π
;

115 
ngx_èbÀ_ñt_t
 *
hódî
;

116 
ngx_c⁄√˘i⁄_t
 *
c
;

117 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

118 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
;

120 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

122 i‡(
˘x
) {

123  
NGX_DECLINED
;

126 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

128 i‡(
æcf
->
‰om
 =
NULL
) {

129  
NGX_DECLINED
;

132 
æcf
->
ty≥
) {

134 
NGX_HTTP_REALIP_XREALIP
:

136 i‡(
r
->
hódîs_ö
.
x_ªÆ_ù
 =
NULL
) {

137  
NGX_DECLINED
;

140 
Àn
 = 
r
->
hódîs_ö
.
x_ªÆ_ù
->
vÆue
.len;

141 
ù
 = 
r
->
hódîs_ö
.
x_ªÆ_ù
->
vÆue
.
d©a
;

145 
NGX_HTTP_REALIP_XFWD
:

147 i‡(
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
 =
NULL
) {

148  
NGX_DECLINED
;

151 
Àn
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.len;

152 
ù
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
->
vÆue
.
d©a
;

158 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

159 
hódî
 = 
∑π
->
ñts
;

161 
hash
 = 
æcf
->hash;

162 
Àn
 = 
æcf
->
hódî
.len;

163 
p
 = 
æcf
->
hódî
.
d©a
;

165 
i
 = 0; ; i++) {

167 i‡(
i
 >
∑π
->
√…s
) {

168 i‡(
∑π
->
√xt
 =
NULL
) {

172 
∑π
 =Ö¨t->
√xt
;

173 
hódî
 = 
∑π
->
ñts
;

174 
i
 = 0;

177 i‡(
hash
 =
hódî
[
i
].hash

178 && 
Àn
 =
hódî
[
i
].
key
.len

179 && 
	`ngx_°∫cmp
(
p
, 
hódî
[
i
].
lowˇ£_key
, 
Àn
) == 0)

181 
Àn
 = 
hódî
[
i
].
vÆue
.len;

182 
ù
 = 
hódî
[
i
].
vÆue
.
d©a
;

184 
found
;

188  
NGX_DECLINED
;

191 
found
:

193 
c
 = 
r
->
c⁄√˘i⁄
;

195 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "ªÆù: \"%s\"", 
ù
);

197 
addr
.
sockaddr
 = 
c
->sockaddr;

198 
addr
.
sockÀn
 = 
c
->socklen;

201 i‡(
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
ù
, 
Àn
, 
æcf
->
‰om
,

202 
æcf
->
ªcursive
)

203 =
NGX_OK
)

205  
	`ngx_hâp_ªÆù_£t_addr
(
r
, &
addr
);

208  
NGX_DECLINED
;

209 
	}
}

212 
ngx_öt_t


213 
	$ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
)

215 
size_t
 
Àn
;

216 
u_ch¨
 *
p
;

217 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

218 
ngx_c⁄√˘i⁄_t
 *
c
;

219 
ngx_poﬁ_˛ónup_t
 *
˛n
;

220 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

222 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, (
ngx_hâp_ªÆù_˘x_t
));

223 i‡(
˛n
 =
NULL
) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 
˘x
 = 
˛n
->
d©a
;

228 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ªÆù_moduÀ
);

230 
c
 = 
r
->
c⁄√˘i⁄
;

232 
Àn
 = 
	`ngx_sock_¡›
(
addr
->
sockaddr
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

233 i‡(
Àn
 == 0) {

234  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

237 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
);

238 i‡(
p
 =
NULL
) {

239  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

242 
	`ngx_mem˝y
(
p
, 
ãxt
, 
Àn
);

244 
˛n
->
h™dÀr
 = 
ngx_hâp_ªÆù_˛ónup
;

246 
˘x
->
c⁄√˘i⁄
 = 
c
;

247 
˘x
->
sockaddr
 = 
c
->sockaddr;

248 
˘x
->
sockÀn
 = 
c
->socklen;

249 
˘x
->
addr_ãxt
 = 
c
->addr_text;

251 
c
->
sockaddr
 = 
addr
->sockaddr;

252 
c
->
sockÀn
 = 
addr
->socklen;

253 
c
->
addr_ãxt
.
Àn
 =Üen;

254 
c
->
addr_ãxt
.
d©a
 = 
p
;

256  
NGX_DECLINED
;

257 
	}
}

261 
	$ngx_hâp_ªÆù_˛ónup
(*
d©a
)

263 
ngx_hâp_ªÆù_˘x_t
 *
˘x
 = 
d©a
;

265 
ngx_c⁄√˘i⁄_t
 *
c
;

267 
c
 = 
˘x
->
c⁄√˘i⁄
;

269 
c
->
sockaddr
 = 
˘x
->sockaddr;

270 
c
->
sockÀn
 = 
˘x
->socklen;

271 
c
->
addr_ãxt
 = 
˘x
->addr_text;

272 
	}
}

276 
	$ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

278 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

280 
ngx_öt_t
 
rc
;

281 
ngx_°r_t
 *
vÆue
;

282 
ngx_cidr_t
 *
cidr
;

284 
vÆue
 = 
cf
->
¨gs
->
ñts
;

286 i‡(
æcf
->
‰om
 =
NULL
) {

287 
æcf
->
‰om
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

288 (
ngx_cidr_t
));

289 i‡(
æcf
->
‰om
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
cidr
 = 
	`ngx_¨øy_push
(
æcf
->
‰om
);

295 i‡(
cidr
 =
NULL
) {

296  
NGX_CONF_ERROR
;

299 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

301 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

302 
cidr
->
Ámûy
 = 
AF_UNIX
;

303  
NGX_CONF_OK
;

308 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], 
cidr
);

310 i‡(
rc
 =
NGX_ERROR
) {

311 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

312 &
vÆue
[1]);

313  
NGX_CONF_ERROR
;

316 i‡(
rc
 =
NGX_DONE
) {

317 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

318 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

321  
NGX_CONF_OK
;

322 
	}
}

326 
	$ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

328 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

330 
ngx_°r_t
 *
vÆue
;

332 
vÆue
 = 
cf
->
¨gs
->
ñts
;

334 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Real-IP") == 0) {

335 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XREALIP
;

336  
NGX_CONF_OK
;

339 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Forwarded-For") == 0) {

340 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XFWD
;

341  
NGX_CONF_OK
;

344 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_HEADER
;

345 
æcf
->
hash
 = 
	`ngx_hash_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

346 
æcf
->
hódî
 = 
vÆue
[1];

348  
NGX_CONF_OK
;

349 
	}
}

353 
	$ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

355 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
;

357 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªÆù_loc_c⁄f_t
));

358 i‡(
c⁄f
 =
NULL
) {

359  
NULL
;

370 
c⁄f
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

371 
c⁄f
->
ªcursive
 = 
NGX_CONF_UNSET
;

373  
c⁄f
;

374 
	}
}

378 
	$ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

380 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

381 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

383 i‡(
c⁄f
->
‰om
 =
NULL
) {

384 
c⁄f
->
‰om
 = 
¥ev
->from;

387 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥
, 
¥ev
->ty≥, 
NGX_HTTP_REALIP_XREALIP
);

388 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive
, 
¥ev
->recursive, 0);

390 i‡(
c⁄f
->
hódî
.
Àn
 == 0) {

391 
c⁄f
->
hash
 = 
¥ev
->hash;

392 
c⁄f
->
hódî
 = 
¥ev
->header;

395  
NGX_CONF_OK
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
)

402 
ngx_hâp_h™dÀr_±
 *
h
;

403 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

405 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

407 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
);

408 i‡(
h
 =
NULL
) {

409  
NGX_ERROR
;

412 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

414 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

415 i‡(
h
 =
NULL
) {

416  
NGX_ERROR
;

419 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

421  
NGX_OK
;

422 
	}
}

	@src/http/modules/ngx_http_referer_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REFERER_NO_URI_PART
 ((*Ë4)

	)

15 #i‡!(
NGX_PCRE
)

17 
	#ngx_ªgex_t
 

	)

23 
ngx_hash_comböed_t
 
	mhash
;

25 #i‡(
NGX_PCRE
)

26 
ngx_¨øy_t
 *
	mªgex
;

29 
ngx_Êag_t
 
	mno_ª„ªr
;

30 
ngx_Êag_t
 
	mblocked_ª„ªr
;

32 
ngx_hash_keys_¨øys_t
 *
	mkeys
;

34 
ngx_uöt_t
 
	mª„ªr_hash_max_size
;

35 
ngx_uöt_t
 
	mª„ªr_hash_buckë_size
;

36 } 
	tngx_hâp_ª„ªr_c⁄f_t
;

39 * 
ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

40 * 
ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

41 *
chûd
);

42 *
ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

43 *
c⁄f
);

44 *
ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

45 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
);

46 *
ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_°r_t
 *
«me
, 
ngx_ªgex_t
 *
ªgex
);

48 
ngx_libc_cde˛
 
ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
,

49 c⁄° *
two
);

52 
ngx_comm™d_t
 
	gngx_hâp_ª„ªr_comm™ds
[] = {

54 { 
ngx_°rög
("valid_referers"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

56 
ngx_hâp_vÆid_ª„ªrs
,

57 
NGX_HTTP_LOC_CONF_OFFSET
,

59 
NULL
 },

61 { 
ngx_°rög
("referer_hash_max_size"),

62 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

64 
NGX_HTTP_LOC_CONF_OFFSET
,

65 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_max_size
),

66 
NULL
 },

68 { 
ngx_°rög
("referer_hash_bucket_size"),

69 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

71 
NGX_HTTP_LOC_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_buckë_size
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL
,

89 
ngx_hâp_ª„ªr_¸óã_c⁄f
,

90 
ngx_hâp_ª„ªr_mîge_c⁄f


94 
ngx_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_hâp_ª„ªr_moduÀ_˘x
,

97 
ngx_hâp_ª„ªr_comm™ds
,

98 
NGX_HTTP_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


110 
ngx_öt_t


111 
	$ngx_hâp_ª„ªr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

112 
uöçå_t
 
d©a
)

114 
u_ch¨
 *
p
, *
ªf
, *
œ°
;

115 
size_t
 
Àn
;

116 
ngx_°r_t
 *
uri
;

117 
ngx_uöt_t
 
i
, 
key
;

118 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
;

119 
u_ch¨
 
buf
[256];

121 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ª„ªr_moduÀ
);

123 i‡(
æcf
->
hash
.hash.
buckës
 =
NULL


124 && 
æcf
->
hash
.
wc_hód
 =
NULL


125 && 
æcf
->
hash
.
wc_èû
 =
NULL


126 #i‡(
NGX_PCRE
)

127 && 
æcf
->
ªgex
 =
NULL


131 
vÆid
;

134 i‡(
r
->
hódîs_ö
.
ª„ªr
 =
NULL
) {

135 i‡(
æcf
->
no_ª„ªr
) {

136 
vÆid
;

139 
övÆid
;

142 
Àn
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.len;

143 
ªf
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.
d©a
;

145 i‡(
Àn
 >= ("http://i.ru") - 1) {

146 
œ°
 = 
ªf
 + 
Àn
;

148 i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "http://", 7) == 0) {

149 
ªf
 += 7;

150 
vÆid_scheme
;

152 } i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "https://", 8) == 0) {

153 
ªf
 += 8;

154 
vÆid_scheme
;

158 i‡(
æcf
->
blocked_ª„ªr
) {

159 
vÆid
;

162 
övÆid
;

164 
vÆid_scheme
:

166 
i
 = 0;

167 
key
 = 0;

169 
p
 = 
ªf
;Ö < 
œ°
;Ö++) {

170 i‡(*
p
 == '/' || *p == ':') {

174 
buf
[
i
] = 
	`ngx_tﬁowî
(*
p
);

175 
key
 = 
	`ngx_hash
(key, 
buf
[
i
++]);

177 i‡(
i
 == 256) {

178 
övÆid
;

182 
uri
 = 
	`ngx_hash_föd_comböed
(&
æcf
->
hash
, 
key
, 
buf
, 
p
 - 
ªf
);

184 i‡(
uri
) {

185 
uri
;

188 #i‡(
NGX_PCRE
)

190 i‡(
æcf
->
ªgex
) {

191 
ngx_öt_t
 
rc
;

192 
ngx_°r_t
 
ª„ªr
;

194 
ª„ªr
.
Àn
 =Üen - 7;

195 
ª„ªr
.
d©a
 = 
ªf
;

197 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
ªgex
, &
ª„ªr
, 
r
->
c⁄√˘i⁄
->
log
);

199 i‡(
rc
 =
NGX_OK
) {

200 
vÆid
;

203 i‡(
rc
 =
NGX_ERROR
) {

204  
rc
;

212 
övÆid
:

214 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

216  
NGX_OK
;

218 
uri
:

220  ; 
p
 < 
œ°
;Ö++) {

221 i‡(*
p
 == '/') {

226 
Àn
 = 
œ°
 - 
p
;

228 i‡(
uri
 =
NGX_HTTP_REFERER_NO_URI_PART
) {

229 
vÆid
;

232 i‡(
Àn
 < 
uri
->À¿|| 
	`ngx_°∫cmp
(uri->
d©a
, 
p
, uri->len) != 0) {

233 
övÆid
;

236 
vÆid
:

238 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

240  
NGX_OK
;

241 
	}
}

245 
	$ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

247 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
;

249 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ª„ªr_c⁄f_t
));

250 i‡(
c⁄f
 =
NULL
) {

251  
NULL
;

254 #i‡(
NGX_PCRE
)

255 
c⁄f
->
ªgex
 = 
NGX_CONF_UNSET_PTR
;

258 
c⁄f
->
no_ª„ªr
 = 
NGX_CONF_UNSET
;

259 
c⁄f
->
blocked_ª„ªr
 = 
NGX_CONF_UNSET
;

260 
c⁄f
->
ª„ªr_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

261 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

263  
c⁄f
;

264 
	}
}

268 
	$ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

270 
ngx_hâp_ª„ªr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

271 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
 = 
chûd
;

273 
ngx_hash_öô_t
 
hash
;

275 i‡(
c⁄f
->
keys
 =
NULL
) {

276 
c⁄f
->
hash
 = 
¥ev
->hash;

278 #i‡(
NGX_PCRE
)

279 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

281 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_ª„ªr
, 
¥ev
->no_referer, 0);

282 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
blocked_ª„ªr
, 
¥ev
->blocked_referer, 0);

283 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

284 
¥ev
->
ª„ªr_hash_max_size
, 2048);

285 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

286 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

288  
NGX_CONF_OK
;

291 i‡((
c⁄f
->
no_ª„ªr
 =1 || c⁄f->
blocked_ª„ªr
 == 1)

292 && 
c⁄f
->
keys
->keys.
√…s
 == 0

293 && 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
 == 0

294 && 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
 == 0)

296 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

300  
NGX_CONF_ERROR
;

303 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

304 
¥ev
->
ª„ªr_hash_max_size
, 2048);

305 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

306 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

307 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
	`ngx_Æign
(conf->referer_hash_bucket_size,

308 
ngx_ˇchñöe_size
);

310 
hash
.
key
 = 
ngx_hash_key_lc
;

311 
hash
.
max_size
 = 
c⁄f
->
ª„ªr_hash_max_size
;

312 
hash
.
buckë_size
 = 
c⁄f
->
ª„ªr_hash_buckë_size
;

313 
hash
.
«me
 = "referer_hash";

314 
hash
.
poﬁ
 = 
cf
->pool;

316 i‡(
c⁄f
->
keys
->keys.
√…s
) {

317 
hash
.hash = &
c⁄f
->hash.hash;

318 
hash
.
ãmp_poﬁ
 = 
NULL
;

320 i‡(
	`ngx_hash_öô
(&
hash
, 
c⁄f
->
keys
->keys.
ñts
, c⁄f->keys->keys.
√…s
)

321 !
NGX_OK
)

323  
NGX_CONF_ERROR
;

327 i‡(
c⁄f
->
keys
->
dns_wc_hód
.
√…s
) {

329 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

330 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_hód
.
√…s
,

331 (
ngx_hash_key_t
),

332 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

334 
hash
.hash = 
NULL
;

335 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

337 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

338 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
)

339 !
NGX_OK
)

341  
NGX_CONF_ERROR
;

344 
c⁄f
->
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

347 i‡(
c⁄f
->
keys
->
dns_wc_èû
.
√…s
) {

349 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

350 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_èû
.
√…s
,

351 (
ngx_hash_key_t
),

352 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

354 
hash
.hash = 
NULL
;

355 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

357 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

358 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
)

359 !
NGX_OK
)

361  
NGX_CONF_ERROR
;

364 
c⁄f
->
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

367 #i‡(
NGX_PCRE
)

368 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

371 i‡(
c⁄f
->
no_ª„ªr
 =
NGX_CONF_UNSET
) {

372 
c⁄f
->
no_ª„ªr
 = 0;

375 i‡(
c⁄f
->
blocked_ª„ªr
 =
NGX_CONF_UNSET
) {

376 
c⁄f
->
blocked_ª„ªr
 = 0;

379 
c⁄f
->
keys
 = 
NULL
;

381  
NGX_CONF_OK
;

382 
	}
}

386 
	$ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

388 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
 = 
c⁄f
;

390 
u_ch¨
 *
p
;

391 
ngx_°r_t
 *
vÆue
, 
uri
, 
«me
;

392 
ngx_uöt_t
 
i
, 
n
;

393 
ngx_hâp_v¨übÀ_t
 *
v¨
;

394 
ngx_hâp_£rvî_«me_t
 *
¢
;

395 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

397 
	`ngx_°r_£t
(&
«me
, "invalid_referer");

399 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
,

400 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOHASH
);

401 i‡(
v¨
 =
NULL
) {

402  
NGX_CONF_ERROR
;

405 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_ª„ªr_v¨übÀ
;

407 i‡(
æcf
->
keys
 =
NULL
) {

408 
æcf
->
keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
, (
ngx_hash_keys_¨øys_t
));

409 i‡(
æcf
->
keys
 =
NULL
) {

410  
NGX_CONF_ERROR
;

413 
æcf
->
keys
->
poﬁ
 = 
cf
->pool;

414 
æcf
->
keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

416 i‡(
	`ngx_hash_keys_¨øy_öô
(
æcf
->
keys
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

417  
NGX_CONF_ERROR
;

421 
vÆue
 = 
cf
->
¨gs
->
ñts
;

423 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

424 i‡(
vÆue
[
i
].
Àn
 == 0) {

425 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

426 "övÆidÑe„ª∏\"%V\"", &
vÆue
[
i
]);

427  
NGX_CONF_ERROR
;

430 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

431 
æcf
->
no_ª„ªr
 = 1;

435 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "blocked") == 0) {

436 
æcf
->
blocked_ª„ªr
 = 1;

440 
	`ngx_°r_nuŒ
(&
uri
);

442 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "server_names") == 0) {

444 
cscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

446 
¢
 = 
cscf
->
£rvî_«mes
.
ñts
;

447 
n
 = 0;Ç < 
cscf
->
£rvî_«mes
.
√…s
;Ç++) {

449 #i‡(
NGX_PCRE
)

450 i‡(
¢
[
n
].
ªgex
) {

452 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
¢
[
n
].
«me
,

453 
¢
[
n
].
ªgex
->regex)

454 !
NGX_OK
)

456  
NGX_CONF_ERROR
;

463 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
¢
[
n
].
«me
, &
uri
)

464 !
NGX_OK
)

466  
NGX_CONF_ERROR
;

473 i‡(
vÆue
[
i
].
d©a
[0] == '~') {

474 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
vÆue
[
i
], 
NULL
Ë!
NGX_OK
)

476  
NGX_CONF_ERROR
;

482 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/');

484 i‡(
p
) {

485 
uri
.
Àn
 = (
vÆue
[
i
].
d©a
 + vÆue[i].ÀnË- 
p
;

486 
uri
.
d©a
 = 
p
;

487 
vÆue
[
i
].
Àn
 = 
p
 - vÆue[i].
d©a
;

490 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
vÆue
[
i
], &
uri
Ë!
NGX_OK
) {

491  
NGX_CONF_ERROR
;

495  
NGX_CONF_OK
;

496 
	}
}

500 
	$ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

501 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
)

503 
ngx_öt_t
 
rc
;

504 
ngx_°r_t
 *
u
;

506 i‡(
uri
->
Àn
 == 0) {

507 
u
 = 
NGX_HTTP_REFERER_NO_URI_PART
;

510 
u
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

511 i‡(
u
 =
NULL
) {

512  
NGX_CONF_ERROR
;

515 *
u
 = *
uri
;

518 
rc
 = 
	`ngx_hash_add_key
(
keys
, 
vÆue
, 
u
, 
NGX_HASH_WILDCARD_KEY
);

520 i‡(
rc
 =
NGX_OK
) {

521  
NGX_CONF_OK
;

524 i‡(
rc
 =
NGX_DECLINED
) {

525 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

526 "övÆid ho°«mê‹ wûdˇrd \"%V\"", 
vÆue
);

529 i‡(
rc
 =
NGX_BUSY
) {

530 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

531 "c⁄Êi˘ögÖ¨amëî \"%V\"", 
vÆue
);

534  
NGX_CONF_ERROR
;

535 
	}
}

539 
	$ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

540 
ngx_°r_t
 *
«me
, 
ngx_ªgex_t
 *
ªgex
)

542 #i‡(
NGX_PCRE
)

543 
ngx_ªgex_ñt_t
 *
ª
;

544 
ngx_ªgex_compûe_t
 
rc
;

545 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

547 i‡(
«me
->
Àn
 == 1) {

548 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "em±yÑegex i¿\"%V\"", 
«me
);

549  
NGX_CONF_ERROR
;

552 i‡(
æcf
->
ªgex
 =
NGX_CONF_UNSET_PTR
) {

553 
æcf
->
ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_ªgex_ñt_t
));

554 i‡(
æcf
->
ªgex
 =
NULL
) {

555  
NGX_CONF_ERROR
;

559 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
ªgex
);

560 i‡(
ª
 =
NULL
) {

561  
NGX_CONF_ERROR
;

564 i‡(
ªgex
) {

565 
ª
->
ªgex
 =Ñegex;

566 
ª
->
«me
 =Çame->
d©a
;

568  
NGX_CONF_OK
;

571 
«me
->
Àn
--;

572 
«me
->
d©a
++;

574 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

576 
rc
.
∑âîn
 = *
«me
;

577 
rc
.
poﬁ
 = 
cf
->pool;

578 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

579 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

580 
rc
.
îr
.
d©a
 = 
îr°r
;

582 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

584  
NGX_CONF_ERROR
;

587 
ª
->
ªgex
 = 
rc
.regex;

588 
ª
->
«me
 =Çame->
d©a
;

590  
NGX_CONF_OK
;

594 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

596 
«me
);

598  
NGX_CONF_ERROR
;

601 
	}
}

604 
ngx_libc_cde˛


605 
	$ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

607 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

609 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

610 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

612  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

613 
	}
}

	@src/http/modules/ngx_http_rewrite_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mcodes
;

16 
ngx_uöt_t
 
	m°ack_size
;

18 
ngx_Êag_t
 
	mlog
;

19 
ngx_Êag_t
 
	munöôülized_v¨übÀ_w¨n
;

20 } 
	tngx_hâp_ªwrôe_loc_c⁄f_t
;

23 *
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

25 *
∑ª¡
, *
chûd
);

26 
ngx_öt_t
 
ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

31 *
c⁄f
);

32 *
ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

34 * 
ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
,

35 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
);

36 *
ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

38 *
ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 * 
ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

44 
ngx_comm™d_t
 
	gngx_hâp_ªwrôe_comm™ds
[] = {

46 { 
ngx_°rög
("rewrite"),

47 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


48 |
NGX_CONF_TAKE23
,

49 
ngx_hâp_ªwrôe
,

50 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
NULL
 },

54 { 
ngx_°rög
("return"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


56 |
NGX_CONF_TAKE12
,

57 
ngx_hâp_ªwrôe_ªtu∫
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("break"),

63 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


64 |
NGX_CONF_NOARGS
,

65 
ngx_hâp_ªwrôe_bªak
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
NULL
 },

70 { 
ngx_°rög
("if"),

71 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

72 
ngx_hâp_ªwrôe_if
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

75 
NULL
 },

77 { 
ngx_°rög
("set"),

78 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


79 |
NGX_CONF_TAKE2
,

80 
ngx_hâp_ªwrôe_£t
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("rewrite_log"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


87 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
log
),

91 
NULL
 },

93 { 
ngx_°rög
("uninitialized_variable_warn"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


95 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

96 
ngx_c⁄f_£t_Êag_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
unöôülized_v¨übÀ_w¨n
),

99 
NULL
 },

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_ªwrôe_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
,

116 
ngx_hâp_ªwrôe_mîge_loc_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_ªwrôe_moduÀ_˘x
,

123 
ngx_hâp_ªwrôe_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_hâp_ªwrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

139 
ngx_öt_t
 
ödex
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

141 
ngx_hâp_s¸ùt_ígöe_t
 *
e
;

142 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

143 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

144 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

146 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

148 
ödex
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

150 i‡(
r
->
pha£_h™dÀr
 =
ödex
 &&Ñ->
loc_c⁄f
 =
cscf
->
˘x
->loc_conf) {

152  
NGX_DECLINED
;

155 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

157 i‡(
æcf
->
codes
 =
NULL
) {

158  
NGX_DECLINED
;

161 
e
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_s¸ùt_ígöe_t
));

162 i‡(
e
 =
NULL
) {

163  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

166 
e
->
•
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

167 
æcf
->
°ack_size
 * (
ngx_hâp_v¨übÀ_vÆue_t
));

168 i‡(
e
->
•
 =
NULL
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
e
->
ù
 = 
æcf
->
codes
->
ñts
;

173 
e
->
ªque°
 = 
r
;

174 
e
->
quŸe
 = 1;

175 
e
->
log
 = 
æcf
->log;

176 
e
->
°©us
 = 
NGX_DECLINED
;

178 *(
uöçå_t
 *Ë
e
->
ù
) {

179 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
->
ù
;

180 
	`code
(
e
);

183 i‡(
e
->
°©us
 < 
NGX_HTTP_BAD_REQUEST
) {

184  
e
->
°©us
;

187 i‡(
r
->
îr_°©us
 == 0) {

188  
e
->
°©us
;

191  
r
->
îr_°©us
;

192 
	}
}

195 
ngx_öt_t


196 
	$ngx_hâp_ªwrôe_v¨
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

197 
uöçå_t
 
d©a
)

199 
ngx_hâp_v¨übÀ_t
 *
v¨
;

200 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

201 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

203 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

205 i‡(
æcf
->
unöôülized_v¨übÀ_w¨n
 == 0) {

206 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

207  
NGX_OK
;

210 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

212 
v¨
 = 
cmcf
->
v¨übÀs
.
ñts
;

220 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

221 "usög unöôülized \"%V\" v¨übÀ", &
v¨
[
d©a
].
«me
);

223 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

225  
NGX_OK
;

226 
	}
}

230 
	$ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

232 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
;

234 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªwrôe_loc_c⁄f_t
));

235 i‡(
c⁄f
 =
NULL
) {

236  
NULL
;

239 
c⁄f
->
°ack_size
 = 
NGX_CONF_UNSET_UINT
;

240 
c⁄f
->
log
 = 
NGX_CONF_UNSET
;

241 
c⁄f
->
unöôülized_v¨übÀ_w¨n
 = 
NGX_CONF_UNSET
;

243  
c⁄f
;

244 
	}
}

248 
	$ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

250 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

251 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

253 
uöçå_t
 *
code
;

255 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log
, 
¥ev
->log, 0);

256 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
unöôülized_v¨übÀ_w¨n
,

257 
¥ev
->
unöôülized_v¨übÀ_w¨n
, 1);

258 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ack_size
, 
¥ev
->stack_size, 10);

260 i‡(
c⁄f
->
codes
 =
NULL
) {

261  
NGX_CONF_OK
;

264 i‡(
c⁄f
->
codes
 =
¥ev
->codes) {

265  
NGX_CONF_OK
;

268 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
codes
, (
uöçå_t
));

269 i‡(
code
 =
NULL
) {

270  
NGX_CONF_ERROR
;

273 *
code
 = (
uöçå_t
Ë
NULL
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_hâp_h™dÀr_±
 *
h
;

283 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

285 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

287 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
);

288 i‡(
h
 =
NULL
) {

289  
NGX_ERROR
;

292 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

294 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
);

295 i‡(
h
 =
NULL
) {

296  
NGX_ERROR
;

299 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

301  
NGX_OK
;

302 
	}
}

306 
	$ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

308 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

310 
ngx_°r_t
 *
vÆue
;

311 
ngx_uöt_t
 
œ°
;

312 
ngx_ªgex_compûe_t
 
rc
;

313 
ngx_hâp_s¸ùt_code_±
 *
code
;

314 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

315 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

316 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
ªgex_íd
;

317 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

319 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

320 (
ngx_hâp_s¸ùt_ªgex_code_t
));

321 i‡(
ªgex
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

327 
vÆue
 = 
cf
->
¨gs
->
ñts
;

329 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

331 
rc
.
∑âîn
 = 
vÆue
[1];

332 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

333 
rc
.
îr
.
d©a
 = 
îr°r
;

337 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

338 i‡(
ªgex
->ªgex =
NULL
) {

339  
NGX_CONF_ERROR
;

342 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

343 
ªgex
->
uri
 = 1;

344 
ªgex
->
«me
 = 
vÆue
[1];

346 i‡(
vÆue
[2].
d©a
[vÆue[2].
Àn
 - 1] == '?') {

349 
vÆue
[2].
Àn
--;

352 
ªgex
->
add_¨gs
 = 1;

355 
œ°
 = 0;

357 i‡(
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "http://", ("http://") - 1) == 0

358 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "https://", ("https://") - 1) == 0

359 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "$scheme", ("$scheme") - 1) == 0)

361 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

362 
ªgex
->
ªdúe˘
 = 1;

363 
œ°
 = 1;

366 i‡(
cf
->
¨gs
->
√…s
 == 4) {

367 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "last") == 0) {

368 
œ°
 = 1;

370 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "break") == 0) {

371 
ªgex
->
bªak_cy˛e
 = 1;

372 
œ°
 = 1;

374 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "redirect") == 0) {

375 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

376 
ªgex
->
ªdúe˘
 = 1;

377 
œ°
 = 1;

379 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "permanent") == 0) {

380 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_PERMANENTLY
;

381 
ªgex
->
ªdúe˘
 = 1;

382 
œ°
 = 1;

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

386 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

387  
NGX_CONF_ERROR
;

391 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

393 
sc
.
cf
 = cf;

394 
sc
.
sour˚
 = &
vÆue
[2];

395 
sc
.
Àngths
 = &
ªgex
->lengths;

396 
sc
.
vÆues
 = &
lcf
->
codes
;

397 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[2]);

398 
sc
.
maö
 = 
ªgex
;

399 
sc
.
com∂ëe_Àngths
 = 1;

400 
sc
.
compûe_¨gs
 = !
ªgex
->
ªdúe˘
;

402 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

403  
NGX_CONF_ERROR
;

406 
ªgex
 = 
sc
.
maö
;

408 
ªgex
->
size
 = 
sc
.size;

409 
ªgex
->
¨gs
 = 
sc
.args;

411 i‡(
sc
.
v¨übÀs
 =0 && !sc.
dup_ˇ±uª
) {

412 
ªgex
->
Àngths
 = 
NULL
;

415 
ªgex_íd
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
,

416 (
ngx_hâp_s¸ùt_ªgex_íd_code_t
),

417 &
ªgex
);

418 i‡(
ªgex_íd
 =
NULL
) {

419  
NGX_CONF_ERROR
;

422 
ªgex_íd
->
code
 = 
ngx_hâp_s¸ùt_ªgex_íd_code
;

423 
ªgex_íd
->
uri
 = 
ªgex
->uri;

424 
ªgex_íd
->
¨gs
 = 
ªgex
->args;

425 
ªgex_íd
->
add_¨gs
 = 
ªgex
->add_args;

426 
ªgex_íd
->
ªdúe˘
 = 
ªgex
->redirect;

428 i‡(
œ°
) {

429 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
, (
uöçå_t
), &
ªgex
);

430 i‡(
code
 =
NULL
) {

431  
NGX_CONF_ERROR
;

434 *
code
 = 
NULL
;

437 
ªgex
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


438 - (
u_ch¨
 *Ë
ªgex
;

440  
NGX_CONF_OK
;

441 
	}
}

445 
	$ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

447 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

449 
u_ch¨
 *
p
;

450 
ngx_°r_t
 *
vÆue
, *
v
;

451 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
ªt
;

452 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

454 
ªt
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

455 (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

456 i‡(
ªt
 =
NULL
) {

457  
NGX_CONF_ERROR
;

460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

462 
	`ngx_memzîo
(
ªt
, (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

464 
ªt
->
code
 = 
ngx_hâp_s¸ùt_ªtu∫_code
;

466 
p
 = 
vÆue
[1].
d©a
;

468 
ªt
->
°©us
 = 
	`ngx_©oi
(
p
, 
vÆue
[1].
Àn
);

470 i‡(
ªt
->
°©us
 =(
uöçå_t
Ë
NGX_ERROR
) {

472 i‡(
cf
->
¨gs
->
√…s
 == 2

473 && (
	`ngx_°∫cmp
(
p
, "http://", ("http://") - 1) == 0

474 || 
	`ngx_°∫cmp
(
p
, "https://", ("https://") - 1) == 0

475 || 
	`ngx_°∫cmp
(
p
, "$scheme", ("$scheme") - 1) == 0))

477 
ªt
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

478 
v
 = &
vÆue
[1];

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

482 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

483  
NGX_CONF_ERROR
;

488 i‡(
ªt
->
°©us
 > 999) {

489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

490 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

491  
NGX_CONF_ERROR
;

494 i‡(
cf
->
¨gs
->
√…s
 == 2) {

495  
NGX_CONF_OK
;

498 
v
 = &
vÆue
[2];

501 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

503 
ccv
.
cf
 = cf;

504 
ccv
.
vÆue
 = 
v
;

505 
ccv
.
com∂ex_vÆue
 = &
ªt
->
ãxt
;

507 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

508  
NGX_CONF_ERROR
;

511  
NGX_CONF_OK
;

512 
	}
}

516 
	$ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

518 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

520 
ngx_hâp_s¸ùt_code_±
 *
code
;

522 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
, (
uöçå_t
));

523 i‡(
code
 =
NULL
) {

524  
NGX_CONF_ERROR
;

527 *
code
 = 
ngx_hâp_s¸ùt_bªak_code
;

529  
NGX_CONF_OK
;

530 
	}
}

534 
	$ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

536 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

538 *
mc⁄f
;

539 *
rv
;

540 
u_ch¨
 *
ñts
;

541 
ngx_uöt_t
 
i
;

542 
ngx_c⁄f_t
 
ßve
;

543 
ngx_hâp_moduÀ_t
 *
moduÀ
;

544 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

546 
ngx_hâp_s¸ùt_if_code_t
 *
if_code
;

547 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
∆cf
;

549 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

550 i‡(
˘x
 =
NULL
) {

551  
NGX_CONF_ERROR
;

554 
p˘x
 = 
cf
->
˘x
;

555 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

556 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

558 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

559 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

560  
NGX_CONF_ERROR
;

563 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

564 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

568 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

570 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

572 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

573 i‡(
mc⁄f
 =
NULL
) {

574  
NGX_CONF_ERROR
;

577 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

581 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

583 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

584 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

585 
˛cf
->
«me
 = 
p˛cf
->name;

586 
˛cf
->
n⁄ame
 = 1;

588 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

589  
NGX_CONF_ERROR
;

592 i‡(
	`ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
cf
, 
lcf
Ë!
NGX_CONF_OK
) {

593  
NGX_CONF_ERROR
;

596 
if_code
 = 
	`ngx_¨øy_push_n
(
lcf
->
codes
, (
ngx_hâp_s¸ùt_if_code_t
));

597 i‡(
if_code
 =
NULL
) {

598  
NGX_CONF_ERROR
;

601 
if_code
->
code
 = 
ngx_hâp_s¸ùt_if_code
;

603 
ñts
 = 
lcf
->
codes
->elts;

608 
∆cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_ªwrôe_moduÀ
.
˘x_ödex
];

609 
∆cf
->
codes
 = 
lcf
->codes;

612 
ßve
 = *
cf
;

613 
cf
->
˘x
 = ctx;

615 i‡(
p˛cf
->
«me
.
Àn
 == 0) {

616 
if_code
->
loc_c⁄f
 = 
NULL
;

617 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SIF_CONF
;

620 
if_code
->
loc_c⁄f
 = 
˘x
->loc_conf;

621 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LIF_CONF
;

624 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

626 *
cf
 = 
ßve
;

628 i‡(
rv
 !
NGX_CONF_OK
) {

629  
rv
;

633 i‡(
ñts
 !
lcf
->
codes
->elts) {

634 
if_code
 = (
ngx_hâp_s¸ùt_if_code_t
 *)

635 ((
u_ch¨
 *Ë
if_code
 + ((u_ch¨ *Ë
lcf
->
codes
->
ñts
 -Élts));

638 
if_code
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


639 - (
u_ch¨
 *Ë
if_code
;

643 
∆cf
->
codes
 = 
NULL
;

645  
NGX_CONF_OK
;

646 
	}
}

650 
	$ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
)

652 
u_ch¨
 *
p
;

653 
size_t
 
Àn
;

654 
ngx_°r_t
 *
vÆue
;

655 
ngx_uöt_t
 
cur
, 
œ°
;

656 
ngx_ªgex_compûe_t
 
rc
;

657 
ngx_hâp_s¸ùt_code_±
 *
code
;

658 
ngx_hâp_s¸ùt_fûe_code_t
 *
f›
;

659 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

660 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

662 
vÆue
 = 
cf
->
¨gs
->
ñts
;

663 
œ°
 = 
cf
->
¨gs
->
√…s
 - 1;

665 i‡(
vÆue
[1].
Àn
 < 1 || vÆue[1].
d©a
[0] != '(') {

666 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

667 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[1]);

668  
NGX_CONF_ERROR
;

671 i‡(
vÆue
[1].
Àn
 == 1) {

672 
cur
 = 2;

675 
cur
 = 1;

676 
vÆue
[1].
Àn
--;

677 
vÆue
[1].
d©a
++;

680 i‡(
vÆue
[
œ°
].
Àn
 < 1 || vÆue[œ°].
d©a
[value[last].len - 1] != ')') {

681 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

682 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
œ°
]);

683  
NGX_CONF_ERROR
;

686 i‡(
vÆue
[
œ°
].
Àn
 == 1) {

687 
œ°
--;

690 
vÆue
[
œ°
].
Àn
--;

691 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

694 
Àn
 = 
vÆue
[
cur
].len;

695 
p
 = 
vÆue
[
cur
].
d©a
;

697 i‡(
Àn
 > 1 && 
p
[0] == '$') {

699 i‡(
cur
 !
œ°
 && cur + 2 !=Üast) {

700 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

701 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

702  
NGX_CONF_ERROR
;

705 i‡(
	`ngx_hâp_ªwrôe_v¨übÀ
(
cf
, 
lcf
, &
vÆue
[
cur
]Ë!
NGX_CONF_OK
) {

706  
NGX_CONF_ERROR
;

709 i‡(
cur
 =
œ°
) {

710  
NGX_CONF_OK
;

713 
cur
++;

715 
Àn
 = 
vÆue
[
cur
].len;

716 
p
 = 
vÆue
[
cur
].
d©a
;

718 i‡(
Àn
 =1 && 
p
[0] == '=') {

720 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

721  
NGX_CONF_ERROR
;

724 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

725 (
uöçå_t
));

726 i‡(
code
 =
NULL
) {

727  
NGX_CONF_ERROR
;

730 *
code
 = 
ngx_hâp_s¸ùt_equÆ_code
;

732  
NGX_CONF_OK
;

735 i‡(
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '=') {

737 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

738  
NGX_CONF_ERROR
;

741 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

742 (
uöçå_t
));

743 i‡(
code
 =
NULL
) {

744  
NGX_CONF_ERROR
;

747 *
code
 = 
ngx_hâp_s¸ùt_nŸ_equÆ_code
;

748  
NGX_CONF_OK
;

751 i‡((
Àn
 =1 && 
p
[0] == '~')

752 || (
Àn
 =2 && 
p
[0] == '~' &&Ö[1] == '*')

753 || (
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '~')

754 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '~' &&Ö[2] == '*'))

756 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

757 (
ngx_hâp_s¸ùt_ªgex_code_t
));

758 i‡(
ªgex
 =
NULL
) {

759  
NGX_CONF_ERROR
;

762 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

764 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

766 
rc
.
∑âîn
 = 
vÆue
[
œ°
];

767 
rc
.
›ti⁄s
 = (
p
[
Àn
 - 1] ='*'Ë? 
NGX_REGEX_CASELESS
 : 0;

768 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

769 
rc
.
îr
.
d©a
 = 
îr°r
;

771 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

772 i‡(
ªgex
->ªgex =
NULL
) {

773  
NGX_CONF_ERROR
;

776 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

777 
ªgex
->
√xt
 = (
ngx_hâp_s¸ùt_ªgex_code_t
);

778 
ªgex
->
ã°
 = 1;

779 i‡(
p
[0] == '!') {

780 
ªgex
->
√g©ive_ã°
 = 1;

782 
ªgex
->
«me
 = 
vÆue
[
œ°
];

784  
NGX_CONF_OK
;

787 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

788 "u√x≥˘ed \"%V\" i¿c⁄dôi⁄", &
vÆue
[
cur
]);

789  
NGX_CONF_ERROR
;

791 } i‡((
Àn
 =2 && 
p
[0] == '-')

792 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '-'))

794 i‡(
cur
 + 1 !
œ°
) {

795 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

796 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

797  
NGX_CONF_ERROR
;

800 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

801 
vÆue
[
œ°
].
Àn
++;

803 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

804  
NGX_CONF_ERROR
;

807 
f›
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

808 (
ngx_hâp_s¸ùt_fûe_code_t
));

809 i‡(
f›
 =
NULL
) {

810  
NGX_CONF_ERROR
;

813 
f›
->
code
 = 
ngx_hâp_s¸ùt_fûe_code
;

815 i‡(
p
[1] == 'f') {

816 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_∂aö
;

817  
NGX_CONF_OK
;

820 i‡(
p
[1] == 'd') {

821 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_dú
;

822  
NGX_CONF_OK
;

825 i‡(
p
[1] == 'e') {

826 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exi°s
;

827  
NGX_CONF_OK
;

830 i‡(
p
[1] == 'x') {

831 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exec
;

832  
NGX_CONF_OK
;

835 i‡(
p
[0] == '!') {

836 i‡(
p
[2] == 'f') {

837 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
;

838  
NGX_CONF_OK
;

841 i‡(
p
[2] == 'd') {

842 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_dú
;

843  
NGX_CONF_OK
;

846 i‡(
p
[2] == 'e') {

847 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
;

848  
NGX_CONF_OK
;

851 i‡(
p
[2] == 'x') {

852 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exec
;

853  
NGX_CONF_OK
;

857 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

858 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

859  
NGX_CONF_ERROR
;

862 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

863 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

865  
NGX_CONF_ERROR
;

866 
	}
}

870 
	$ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

871 
ngx_°r_t
 *
vÆue
)

873 
ngx_öt_t
 
ödex
;

874 
ngx_hâp_s¸ùt_v¨_code_t
 *
v¨_code
;

876 
vÆue
->
Àn
--;

877 
vÆue
->
d©a
++;

879 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

881 i‡(
ödex
 =
NGX_ERROR
) {

882  
NGX_CONF_ERROR
;

885 
v¨_code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

886 (
ngx_hâp_s¸ùt_v¨_code_t
));

887 i‡(
v¨_code
 =
NULL
) {

888  
NGX_CONF_ERROR
;

891 
v¨_code
->
code
 = 
ngx_hâp_s¸ùt_v¨_code
;

892 
v¨_code
->
ödex
 = index;

894  
NGX_CONF_OK
;

895 
	}
}

899 
	$ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

901 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

903 
ngx_öt_t
 
ödex
;

904 
ngx_°r_t
 *
vÆue
;

905 
ngx_hâp_v¨übÀ_t
 *
v
;

906 
ngx_hâp_s¸ùt_v¨_code_t
 *
vcode
;

907 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
vhcode
;

909 
vÆue
 = 
cf
->
¨gs
->
ñts
;

911 i‡(
vÆue
[1].
d©a
[0] != '$') {

912 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

913 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

914  
NGX_CONF_ERROR
;

917 
vÆue
[1].
Àn
--;

918 
vÆue
[1].
d©a
++;

920 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

921 i‡(
v
 =
NULL
) {

922  
NGX_CONF_ERROR
;

925 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

926 i‡(
ödex
 =
NGX_ERROR
) {

927  
NGX_CONF_ERROR
;

930 i‡(
v
->
gë_h™dÀr
 =
NULL


931 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "http_", 5) != 0

932 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "sent_http_", 10) != 0

933 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "upstream_http_", 14) != 0)

935 
v
->
gë_h™dÀr
 = 
ngx_hâp_ªwrôe_v¨
;

936 
v
->
d©a
 = 
ödex
;

939 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[2]Ë!
NGX_CONF_OK
) {

940  
NGX_CONF_ERROR
;

943 i‡(
v
->
£t_h™dÀr
) {

944 
vhcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

945 (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
));

946 i‡(
vhcode
 =
NULL
) {

947  
NGX_CONF_ERROR
;

950 
vhcode
->
code
 = 
ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
;

951 
vhcode
->
h™dÀr
 = 
v
->
£t_h™dÀr
;

952 
vhcode
->
d©a
 = 
v
->data;

954  
NGX_CONF_OK
;

957 
vcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

958 (
ngx_hâp_s¸ùt_v¨_code_t
));

959 i‡(
vcode
 =
NULL
) {

960  
NGX_CONF_ERROR
;

963 
vcode
->
code
 = 
ngx_hâp_s¸ùt_£t_v¨_code
;

964 
vcode
->
ödex
 = (
uöçå_t
) index;

966  
NGX_CONF_OK
;

967 
	}
}

971 
	$ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

972 
ngx_°r_t
 *
vÆue
)

974 
ngx_öt_t
 
n
;

975 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

976 
ngx_hâp_s¸ùt_vÆue_code_t
 *
vÆ
;

977 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
com∂ex
;

979 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
vÆue
);

981 i‡(
n
 == 0) {

982 
vÆ
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

983 (
ngx_hâp_s¸ùt_vÆue_code_t
));

984 i‡(
vÆ
 =
NULL
) {

985  
NGX_CONF_ERROR
;

988 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

990 i‡(
n
 =
NGX_ERROR
) {

991 
n
 = 0;

994 
vÆ
->
code
 = 
ngx_hâp_s¸ùt_vÆue_code
;

995 
vÆ
->
vÆue
 = (
uöçå_t
Ë
n
;

996 
vÆ
->
ãxt_Àn
 = (
uöçå_t
Ë
vÆue
->
Àn
;

997 
vÆ
->
ãxt_d©a
 = (
uöçå_t
Ë
vÆue
->
d©a
;

999  
NGX_CONF_OK
;

1002 
com∂ex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

1003 (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
));

1004 i‡(
com∂ex
 =
NULL
) {

1005  
NGX_CONF_ERROR
;

1008 
com∂ex
->
code
 = 
ngx_hâp_s¸ùt_com∂ex_vÆue_code
;

1009 
com∂ex
->
Àngths
 = 
NULL
;

1011 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1013 
sc
.
cf
 = cf;

1014 
sc
.
sour˚
 = 
vÆue
;

1015 
sc
.
Àngths
 = &
com∂ex
->lengths;

1016 
sc
.
vÆues
 = &
lcf
->
codes
;

1017 
sc
.
v¨übÀs
 = 
n
;

1018 
sc
.
com∂ëe_Àngths
 = 1;

1020 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1021  
NGX_CONF_ERROR
;

1024  
NGX_CONF_OK
;

1025 
	}
}

	@src/http/modules/ngx_http_scgi_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

17 
ngx_¨øy_t
 *
	mÊushes
;

18 
ngx_¨øy_t
 *
	m∑øms_Àn
;

19 
ngx_¨øy_t
 *
	m∑øms
;

20 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_hash_t
 
	mhódîs_hash
;

23 
ngx_uöt_t
 
	mhódî_∑øms
;

25 
ngx_¨øy_t
 *
	mscgi_Àngths
;

26 
ngx_¨øy_t
 *
	mscgi_vÆues
;

28 #i‡(
NGX_HTTP_CACHE
)

29 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

31 } 
	tngx_hâp_scgi_loc_c⁄f_t
;

34 
ngx_öt_t
 
ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
);

36 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

38 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

40 
ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

41 
ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 *
ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

45 *
chûd
);

46 
ngx_öt_t
 
ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_scgi_loc_c⁄f_à*
¥ev
);

49 *
ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

50 *
ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

53 #i‡(
NGX_HTTP_CACHE
)

54 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

55 *
ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

62 
ngx_c⁄f_bômask_t
 
	gngx_hâp_scgi_√xt_up°ªam_masks
[] = {

63 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

64 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

65 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

66 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

67 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

68 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

69 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

70 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

71 { 
ngx_nuŒ_°rög
, 0 }

75 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
;

78 
ngx_comm™d_t
 
	gngx_hâp_scgi_comm™ds
[] = {

80 { 
ngx_°rög
("scgi_pass"),

81 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_hâp_scgi_∑ss
,

83 
NGX_HTTP_LOC_CONF_OFFSET
,

85 
NULL
 },

87 { 
ngx_°rög
("scgi_store"),

88 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

89 
ngx_hâp_scgi_°‹e
,

90 
NGX_HTTP_LOC_CONF_OFFSET
,

92 
NULL
 },

94 { 
ngx_°rög
("scgi_store_access"),

95 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

96 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

99 
NULL
 },

101 { 
ngx_°rög
("scgi_buffering"),

102 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

103 
ngx_c⁄f_£t_Êag_¶Ÿ
,

104 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

106 
NULL
 },

108 { 
ngx_°rög
("scgi_ignore_client_abort"),

109 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

110 
ngx_c⁄f_£t_Êag_¶Ÿ
,

111 
NGX_HTTP_LOC_CONF_OFFSET
,

112 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

113 
NULL
 },

115 { 
ngx_°rög
("scgi_bind"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

117 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

118 
NGX_HTTP_LOC_CONF_OFFSET
,

119 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

120 
NULL
 },

122 { 
ngx_°rög
("scgi_connect_timeout"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

124 
ngx_c⁄f_£t_m£c_¶Ÿ
,

125 
NGX_HTTP_LOC_CONF_OFFSET
,

126 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

127 
NULL
 },

129 { 
ngx_°rög
("scgi_send_timeout"),

130 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

131 
ngx_c⁄f_£t_m£c_¶Ÿ
,

132 
NGX_HTTP_LOC_CONF_OFFSET
,

133 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

134 
NULL
 },

136 { 
ngx_°rög
("scgi_buffer_size"),

137 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

138 
ngx_c⁄f_£t_size_¶Ÿ
,

139 
NGX_HTTP_LOC_CONF_OFFSET
,

140 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

141 
NULL
 },

143 { 
ngx_°rög
("scgi_pass_request_headers"),

144 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

145 
ngx_c⁄f_£t_Êag_¶Ÿ
,

146 
NGX_HTTP_LOC_CONF_OFFSET
,

147 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

148 
NULL
 },

150 { 
ngx_°rög
("scgi_pass_request_body"),

151 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

152 
ngx_c⁄f_£t_Êag_¶Ÿ
,

153 
NGX_HTTP_LOC_CONF_OFFSET
,

154 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

155 
NULL
 },

157 { 
ngx_°rög
("scgi_intercept_errors"),

158 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

159 
ngx_c⁄f_£t_Êag_¶Ÿ
,

160 
NGX_HTTP_LOC_CONF_OFFSET
,

161 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

162 
NULL
 },

164 { 
ngx_°rög
("scgi_read_timeout"),

165 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

166 
ngx_c⁄f_£t_m£c_¶Ÿ
,

167 
NGX_HTTP_LOC_CONF_OFFSET
,

168 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

169 
NULL
 },

171 { 
ngx_°rög
("scgi_buffers"),

172 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

173 
ngx_c⁄f_£t_bufs_¶Ÿ
,

174 
NGX_HTTP_LOC_CONF_OFFSET
,

175 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

176 
NULL
 },

178 { 
ngx_°rög
("scgi_busy_buffers_size"),

179 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

180 
ngx_c⁄f_£t_size_¶Ÿ
,

181 
NGX_HTTP_LOC_CONF_OFFSET
,

182 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

183 
NULL
 },

185 #i‡(
NGX_HTTP_CACHE
)

187 { 
ngx_°rög
("scgi_cache"),

188 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

189 
ngx_hâp_scgi_ˇche
,

190 
NGX_HTTP_LOC_CONF_OFFSET
,

192 
NULL
 },

194 { 
ngx_°rög
("scgi_cache_key"),

195 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

196 
ngx_hâp_scgi_ˇche_key
,

197 
NGX_HTTP_LOC_CONF_OFFSET
,

199 
NULL
 },

201 { 
ngx_°rög
("scgi_cache_path"),

202 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

203 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

206 &
ngx_hâp_scgi_moduÀ
 },

208 { 
ngx_°rög
("scgi_cache_bypass"),

209 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

210 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

211 
NGX_HTTP_LOC_CONF_OFFSET
,

212 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

213 
NULL
 },

215 { 
ngx_°rög
("scgi_no_cache"),

216 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

217 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

218 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

220 
NULL
 },

222 { 
ngx_°rög
("scgi_cache_valid"),

223 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

224 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

225 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

227 
NULL
 },

229 { 
ngx_°rög
("scgi_cache_min_uses"),

230 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

231 
ngx_c⁄f_£t_num_¶Ÿ
,

232 
NGX_HTTP_LOC_CONF_OFFSET
,

233 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

234 
NULL
 },

236 { 
ngx_°rög
("scgi_cache_use_stale"),

237 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

238 
ngx_c⁄f_£t_bômask_¶Ÿ
,

239 
NGX_HTTP_LOC_CONF_OFFSET
,

240 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

241 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

243 { 
ngx_°rög
("scgi_cache_methods"),

244 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

245 
ngx_c⁄f_£t_bômask_¶Ÿ
,

246 
NGX_HTTP_LOC_CONF_OFFSET
,

247 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

248 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

250 { 
ngx_°rög
("scgi_cache_lock"),

251 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

252 
ngx_c⁄f_£t_Êag_¶Ÿ
,

253 
NGX_HTTP_LOC_CONF_OFFSET
,

254 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

255 
NULL
 },

257 { 
ngx_°rög
("scgi_cache_lock_timeout"),

258 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

259 
ngx_c⁄f_£t_m£c_¶Ÿ
,

260 
NGX_HTTP_LOC_CONF_OFFSET
,

261 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

262 
NULL
 },

266 { 
ngx_°rög
("scgi_temp_path"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

268 
ngx_c⁄f_£t_∑th_¶Ÿ
,

269 
NGX_HTTP_LOC_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

271 
NULL
 },

273 { 
ngx_°rög
("scgi_max_temp_file_size"),

274 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

275 
ngx_c⁄f_£t_size_¶Ÿ
,

276 
NGX_HTTP_LOC_CONF_OFFSET
,

277 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

278 
NULL
 },

280 { 
ngx_°rög
("scgi_temp_file_write_size"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

282 
ngx_c⁄f_£t_size_¶Ÿ
,

283 
NGX_HTTP_LOC_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

285 
NULL
 },

287 { 
ngx_°rög
("scgi_next_upstream"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

289 
ngx_c⁄f_£t_bômask_¶Ÿ
,

290 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

292 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

294 { 
ngx_°rög
("scgi_param"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

296 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
∑øms_sour˚
),

299 
NULL
 },

301 { 
ngx_°rög
("scgi_pass_header"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

303 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

306 
NULL
 },

308 { 
ngx_°rög
("scgi_hide_header"),

309 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

310 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

311 
NGX_HTTP_LOC_CONF_OFFSET
,

312 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

313 
NULL
 },

315 { 
ngx_°rög
("scgi_ignore_headers"),

316 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

317 
ngx_c⁄f_£t_bômask_¶Ÿ
,

318 
NGX_HTTP_LOC_CONF_OFFSET
,

319 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

320 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

322 
ngx_nuŒ_comm™d


326 
ngx_hâp_moduÀ_t
 
	gngx_hâp_scgi_moduÀ_˘x
 = {

327 
NULL
,

328 
NULL
,

330 
NULL
,

331 
NULL
,

333 
NULL
,

334 
NULL
,

336 
ngx_hâp_scgi_¸óã_loc_c⁄f
,

337 
ngx_hâp_scgi_mîge_loc_c⁄f


341 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
 = {

342 
NGX_MODULE_V1
,

343 &
ngx_hâp_scgi_moduÀ_˘x
,

344 
ngx_hâp_scgi_comm™ds
,

345 
NGX_HTTP_MODULE
,

346 
NULL
,

347 
NULL
,

348 
NULL
,

349 
NULL
,

350 
NULL
,

351 
NULL
,

352 
NULL
,

353 
NGX_MODULE_V1_PADDING


357 
ngx_°r_t
 
	gngx_hâp_scgi_hide_hódîs
[] = {

358 
ngx_°rög
("Status"),

359 
ngx_°rög
("X-Accel-Expires"),

360 
ngx_°rög
("X-Accel-Redirect"),

361 
ngx_°rög
("X-Accel-Limit-Rate"),

362 
ngx_°rög
("X-Accel-Buffering"),

363 
ngx_°rög
("X-Accel-Charset"),

364 
ngx_nuŒ_°rög


368 #i‡(
NGX_HTTP_CACHE
)

370 
ngx_keyvÆ_t
 
	gngx_hâp_scgi_ˇche_hódîs
[] = {

371 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

372 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

373 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

374 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

375 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

376 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

377 { 
ngx_nuŒ_°rög
,Çgx_null_string }

383 
ngx_∑th_öô_t
 
	gngx_hâp_scgi_ãmp_∑th
 = {

384 
ngx_°rög
(
NGX_HTTP_SCGI_TEMP_PATH
), { 1, 2, 0 }

388 
ngx_öt_t


389 
	$ngx_hâp_scgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

391 
ngx_öt_t
 
rc
;

392 
ngx_hâp_°©us_t
 *
°©us
;

393 
ngx_hâp_up°ªam_t
 *
u
;

394 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

396 i‡(
r
->
subªque°_ö_mem‹y
) {

397 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

400  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

403 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

404  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

407 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

408 i‡(
°©us
 =
NULL
) {

409  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

412 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_scgi_moduÀ
);

414 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

416 i‡(
scf
->
scgi_Àngths
) {

417 i‡(
	`ngx_hâp_scgi_evÆ
(
r
, 
scf
Ë!
NGX_OK
) {

418  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

422 
u
 = 
r
->
up°ªam
;

424 
	`ngx_°r_£t
(&
u
->
schema
, "scgi://");

425 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_scgi_moduÀ
;

427 
u
->
c⁄f
 = &
scf
->
up°ªam
;

429 #i‡(
NGX_HTTP_CACHE
)

430 
u
->
¸óã_key
 = 
ngx_hâp_scgi_¸óã_key
;

432 
u
->
¸óã_ªque°
 = 
ngx_hâp_scgi_¸óã_ªque°
;

433 
u
->
ªöô_ªque°
 = 
ngx_hâp_scgi_ªöô_ªque°
;

434 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

435 
u
->
ab‹t_ªque°
 = 
ngx_hâp_scgi_ab‹t_ªque°
;

436 
u
->
föÆize_ªque°
 = 
ngx_hâp_scgi_föÆize_ªque°
;

437 
r
->
°©e
 = 0;

439 
u
->
buf„rög
 = 
scf
->
up°ªam
.buffering;

441 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

442 i‡(
u
->
pùe
 =
NULL
) {

443  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

446 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

447 
u
->
pùe
->
öput_˘x
 = 
r
;

449 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

451 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

452  
rc
;

455  
NGX_DONE
;

456 
	}
}

459 
ngx_öt_t


460 
	$ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_scgi_loc_c⁄f_t
 * 
scf
)

462 
ngx_uæ_t
 
uæ
;

463 
ngx_hâp_up°ªam_t
 *
u
;

465 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

467 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
scf
->
scgi_Àngths
->
ñts
, 0,

468 
scf
->
scgi_vÆues
->
ñts
)

469 =
NULL
)

471  
NGX_ERROR
;

474 
uæ
.
no_ªsﬁve
 = 1;

476 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

477 i‡(
uæ
.
îr
) {

478 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

479 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

482  
NGX_ERROR
;

485 
u
 = 
r
->
up°ªam
;

487 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

488 i‡(
u
->
ªsﬁved
 =
NULL
) {

489  
NGX_ERROR
;

492 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

493 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

494 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

495 
u
->
ªsﬁved
->
«ddrs
 = 1;

496 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

499 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

500 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

501 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

504  
NGX_OK
;

505 
	}
}

508 #i‡(
NGX_HTTP_CACHE
)

510 
ngx_öt_t


511 
	$ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

513 
ngx_°r_t
 *
key
;

514 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

516 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

517 i‡(
key
 =
NULL
) {

518  
NGX_ERROR
;

521 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

523 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
scf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

524  
NGX_ERROR
;

527  
NGX_OK
;

528 
	}
}

533 
ngx_öt_t


534 
	$ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

536 
u_ch¨
 
ch
, *
key
, *
vÆ
, *
lowˇ£_key
;

537 
size_t
 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
Æloˇãd
;

538 
ngx_buf_t
 *
b
;

539 
ngx_°r_t
 *
c⁄ã¡_Àngth
;

540 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

541 
ngx_chaö_t
 *
˛
, *
body
;

542 
ngx_li°_∑π_t
 *
∑π
;

543 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

544 
ngx_hâp_s¸ùt_code_±
 
code
;

545 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

546 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

547 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

548 
ngx_°r_t
 
zîo
 = 
	`ngx_°rög
("0");

550 
c⁄ã¡_Àngth
 = 
r
->
hódîs_ö
.content_length ?

551 &
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
 : &
zîo
;

553 
Àn
 = ("CONTENT_LENGTH"Ë+ 
c⁄ã¡_Àngth
->len + 1;

555 
hódî_∑øms
 = 0;

556 
ign‹ed
 = 
NULL
;

558 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

560 i‡(
scf
->
∑øms_Àn
) {

561 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

563 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
scf
->
Êushes
);

564 
À
.
Êushed
 = 1;

566 
À
.
ù
 = 
scf
->
∑øms_Àn
->
ñts
;

567 
À
.
ªque°
 = 
r
;

569 *(
uöçå_t
 *Ë
À
.
ù
) {

571 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

572 
key_Àn
 = 
	`lcode
(&
À
);

574 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

575 
skù_em±y
 = 
	`lcode
(&
À
);

577 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

578 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

580 
À
.
ù
 +(
uöçå_t
);

582 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

586 
Àn
 +
key_Àn
 + 
vÆ_Àn
 + 1;

590 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

592 
Æloˇãd
 = 0;

593 
lowˇ£_key
 = 
NULL
;

595 i‡(
scf
->
hódî_∑øms
) {

596 
n
 = 0;

597 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

599 
∑π
) {

600 
n
 +
∑π
->
√…s
;

601 
∑π
 =Ö¨t->
√xt
;

604 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

605 i‡(
ign‹ed
 =
NULL
) {

606  
NGX_ERROR
;

610 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

611 
hódî
 = 
∑π
->
ñts
;

613 
i
 = 0; ; i++) {

615 i‡(
i
 >
∑π
->
√…s
) {

616 i‡(
∑π
->
√xt
 =
NULL
) {

620 
∑π
 =Ö¨t->
√xt
;

621 
hódî
 = 
∑π
->
ñts
;

622 
i
 = 0;

625 i‡(
scf
->
hódî_∑øms
) {

626 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

627 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

628 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

629 i‡(
lowˇ£_key
 =
NULL
) {

630  
NGX_ERROR
;

634 
hash
 = 0;

636 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

637 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

639 i‡(
ch
 >= 'A' && ch <= 'Z') {

640 
ch
 |= 0x20;

642 } i‡(
ch
 == '-') {

643 
ch
 = '_';

646 
hash
 = 
	`ngx_hash
(hash, 
ch
);

647 
lowˇ£_key
[
n
] = 
ch
;

650 i‡(
	`ngx_hash_föd
(&
scf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

651 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

656 
Àn
 +("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len + 1

657 + 
hódî
[
i
].
vÆue
.
Àn
 + 1;

663 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
 + 1 + 
Àn
 + 1);

664 i‡(
b
 =
NULL
) {

665  
NGX_ERROR
;

668 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

669 i‡(
˛
 =
NULL
) {

670  
NGX_ERROR
;

673 
˛
->
buf
 = 
b
;

675 
b
->
œ°
 = 
	`ngx_¢¥ötf
(b->last,

676 
NGX_SIZE_T_LEN
 + 1 + ("CONTENT_LENGTH")

677 + 
NGX_OFF_T_LEN
 + 1,

679 
Àn
, 
c⁄ã¡_Àngth
);

681 i‡(
scf
->
∑øms_Àn
) {

682 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

684 
e
.
ù
 = 
scf
->
∑øms
->
ñts
;

685 
e
.
pos
 = 
b
->
œ°
;

686 
e
.
ªque°
 = 
r
;

687 
e
.
Êushed
 = 1;

689 
À
.
ù
 = 
scf
->
∑øms_Àn
->
ñts
;

691 *(
uöçå_t
 *Ë
À
.
ù
) {

693 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

694 
	`lcode
(&
À
);

696 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

697 
skù_em±y
 = 
	`lcode
(&
À
);

699 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

700 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

702 
À
.
ù
 +(
uöçå_t
);

704 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

705 
e
.
skù
 = 1;

707 *(
uöçå_t
 *Ë
e
.
ù
) {

708 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

709 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

711 
e
.
ù
 +(
uöçå_t
);

713 
e
.
skù
 = 0;

718 #i‡(
NGX_DEBUG
)

719 
key
 = 
e
.
pos
;

721 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

722 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

724 #i‡(
NGX_DEBUG
)

725 
vÆ
 = 
e
.
pos
;

727 *(
uöçå_t
 *Ë
e
.
ù
) {

728 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

729 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

731 *
e
.
pos
++ = '\0';

732 
e
.
ù
 +(
uöçå_t
);

734 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

735 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

738 
b
->
œ°
 = 
e
.
pos
;

741 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

743 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

744 
hódî
 = 
∑π
->
ñts
;

746 
i
 = 0; ; i++) {

748 i‡(
i
 >
∑π
->
√…s
) {

749 i‡(
∑π
->
√xt
 =
NULL
) {

753 
∑π
 =Ö¨t->
√xt
;

754 
hódî
 = 
∑π
->
ñts
;

755 
i
 = 0;

758 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

759 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

760 
√xt
;

764 
key
 = 
b
->
œ°
;

765 
b
->
œ°
 = 
	`ngx_˝ymem
(
key
, "HTTP_", ("HTTP_") - 1);

767 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

768 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

770 i‡(
ch
 >= 'a' && ch <= 'z') {

771 
ch
 &= ~0x20;

773 } i‡(
ch
 == '-') {

774 
ch
 = '_';

777 *
b
->
œ°
++ = 
ch
;

780 *
b
->
œ°
++ = (
u_ch¨
) 0;

782 
vÆ
 = 
b
->
œ°
;

783 
b
->
œ°
 = 
	`ngx_c›y
(
vÆ
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

784 *
b
->
œ°
++ = (
u_ch¨
) 0;

786 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

787 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

789 
√xt
:

795 *
b
->
œ°
++ = (
u_ch¨
) ',';

797 i‡(
scf
->
up°ªam
.
∑ss_ªque°_body
) {

798 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

799 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

801 
body
) {

802 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

803 i‡(
b
 =
NULL
) {

804  
NGX_ERROR
;

807 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

809 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

810 i‡(
˛
->
√xt
 =
NULL
) {

811  
NGX_ERROR
;

814 
˛
 = cl->
√xt
;

815 
˛
->
buf
 = 
b
;

817 
body
 = body->
√xt
;

821 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

824 
˛
->
√xt
 = 
NULL
;

826  
NGX_OK
;

827 
	}
}

830 
ngx_öt_t


831 
	$ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

833 
ngx_hâp_°©us_t
 *
°©us
;

835 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

837 i‡(
°©us
 =
NULL
) {

838  
NGX_OK
;

841 
°©us
->
code
 = 0;

842 
°©us
->
cou¡
 = 0;

843 
°©us
->
°¨t
 = 
NULL
;

844 
°©us
->
íd
 = 
NULL
;

846 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

847 
r
->
°©e
 = 0;

849  
NGX_OK
;

850 
	}
}

853 
ngx_öt_t


854 
	$ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

856 
size_t
 
Àn
;

857 
ngx_öt_t
 
rc
;

858 
ngx_hâp_°©us_t
 *
°©us
;

859 
ngx_hâp_up°ªam_t
 *
u
;

861 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

863 i‡(
°©us
 =
NULL
) {

864  
NGX_ERROR
;

867 
u
 = 
r
->
up°ªam
;

869 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

871 i‡(
rc
 =
NGX_AGAIN
) {

872  
rc
;

875 i‡(
rc
 =
NGX_ERROR
) {

876 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

877  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

880 i‡(
u
->
°©e
) {

881 
u
->
°©e
->
°©us
 = sètus->
code
;

884 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

886 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

887 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

889 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

890 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

891  
NGX_ERROR
;

894 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

896 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

898 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

900 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

902  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

903 
	}
}

906 
ngx_öt_t


907 
	$ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

909 
ngx_°r_t
 *
°©us_löe
;

910 
ngx_öt_t
 
rc
, 
°©us
;

911 
ngx_èbÀ_ñt_t
 *
h
;

912 
ngx_hâp_up°ªam_t
 *
u
;

913 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

914 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

916 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

920 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

922 i‡(
rc
 =
NGX_OK
) {

926 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

927 i‡(
h
 =
NULL
) {

928  
NGX_ERROR
;

931 
h
->
hash
 = 
r
->
hódî_hash
;

933 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

934 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

936 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

937 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

938 + 
h
->
key
.
Àn
);

939 i‡(
h
->
key
.
d©a
 =
NULL
) {

940  
NGX_ERROR
;

943 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

944 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

946 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

947 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

948 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

949 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

951 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

952 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

955 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

958 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

959 
h
->
lowˇ£_key
, h->
key
.
Àn
);

961 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

962  
NGX_ERROR
;

965 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

966 "hâ∞scgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

971 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

975 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

978 
u
 = 
r
->
up°ªam
;

980 i‡(
u
->
hódîs_ö
.
°©us_n
) {

981  
NGX_OK
;

984 i‡(
u
->
hódîs_ö
.
°©us
) {

985 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

987 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

988 i‡(
°©us
 =
NGX_ERROR
) {

989 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

991 
°©us_löe
);

992  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

995 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

996 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

998 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

999 
u
->
hódîs_ö
.
°©us_n
 = 302;

1000 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1004 
u
->
hódîs_ö
.
°©us_n
 = 200;

1005 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1008 i‡(
u
->
°©e
) {

1009 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1012  
NGX_OK
;

1015 i‡(
rc
 =
NGX_AGAIN
) {

1016  
NGX_AGAIN
;

1021 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1024  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1026 
	}
}

1030 
	$ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1032 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1036 
	}
}

1040 
	$ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1042 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1046 
	}
}

1050 
	$ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1052 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
;

1054 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_loc_c⁄f_t
));

1055 i‡(
c⁄f
 =
NULL
) {

1056  
NULL
;

1059 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1060 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1061 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1062 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1064 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1065 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1066 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1068 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1069 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1071 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1072 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1073 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1075 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1076 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1078 #i‡(
NGX_HTTP_CACHE
)

1079 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1080 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1081 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1082 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1083 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1084 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1085 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1088 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1089 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1091 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1094 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1096 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1098 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "scgi");

1100  
c⁄f
;

1101 
	}
}

1105 
	$ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1107 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1108 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1110 
size_t
 
size
;

1111 
ngx_hash_öô_t
 
hash
;

1112 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1114 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1115 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1117 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1118 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1119 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1123 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1124 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1126 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1127 
¥ev
->
up°ªam
.
buf„rög
, 1);

1129 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1130 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1132 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1133 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1135 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1136 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1138 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1139 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1141 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1142 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1144 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1145 
¥ev
->
up°ªam
.
buf„r_size
,

1146 (
size_t
Ë
ngx_∑gesize
);

1149 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1150 8, 
ngx_∑gesize
);

1152 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1153 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1155  
NGX_CONF_ERROR
;

1159 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1160 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1161 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1165 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1166 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1167 
NGX_CONF_UNSET_SIZE
);

1169 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1170 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1172 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1173 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1176 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1177 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1182  
NGX_CONF_ERROR
;

1185 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1186 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1188 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1192  
NGX_CONF_ERROR
;

1196 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1197 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1198 
NGX_CONF_UNSET_SIZE
);

1200 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1201 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1203 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1204 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1207 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1208 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1213  
NGX_CONF_ERROR
;

1217 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1218 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1219 
NGX_CONF_UNSET_SIZE
);

1221 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1222 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1224 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1225 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1228 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1229 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1230 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1236  
NGX_CONF_ERROR
;

1240 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1241 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1242 
NGX_CONF_BITMASK_SET
);

1245 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1246 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1247 (
NGX_CONF_BITMASK_SET


1248 |
NGX_HTTP_UPSTREAM_FT_ERROR


1249 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1251 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1252 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1253 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1256 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1257 
¥ev
->
up°ªam
.
ãmp_∑th
,

1258 &
ngx_hâp_scgi_ãmp_∑th
)

1259 !
NGX_OK
)

1261  
NGX_CONF_ERROR
;

1264 #i‡(
NGX_HTTP_CACHE
)

1266 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1267 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1269 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1270 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1272 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1274 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1276 &
shm_z⁄e
->
shm
.
«me
);

1278  
NGX_CONF_ERROR
;

1281 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1282 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1284 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1285 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1286 (
NGX_CONF_BITMASK_SET


1287 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1289 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1290 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1291 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1294 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1295 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1298 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1299 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1302 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1304 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1305 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1307 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1308 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1310 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1311 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1313 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1314 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1317 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1318 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1320 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1321 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1325 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1326 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1327 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1328 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1330 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1331 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1333 
hash
.
max_size
 = 512;

1334 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1335 
hash
.
«me
 = "scgi_hide_headers_hash";

1337 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1338 &
¥ev
->
up°ªam
, 
ngx_hâp_scgi_hide_hódîs
, &
hash
)

1339 !
NGX_OK
)

1341  
NGX_CONF_ERROR
;

1344 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1345 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1348 i‡(
c⁄f
->
scgi_Àngths
 =
NULL
) {

1349 
c⁄f
->
scgi_Àngths
 = 
¥ev
->scgi_lengths;

1350 
c⁄f
->
scgi_vÆues
 = 
¥ev
->scgi_values;

1353 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
scgi_Àngths
) {

1354 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1355 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1356 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1360 i‡(
	`ngx_hâp_scgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1361  
NGX_CONF_ERROR
;

1364  
NGX_CONF_OK
;

1365 
	}
}

1368 
ngx_öt_t


1369 
	$ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,

1370 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
)

1372 
u_ch¨
 *
p
;

1373 
size_t
 
size
;

1374 
uöçå_t
 *
code
;

1375 
ngx_uöt_t
 
i
, 
n§c
;

1376 
ngx_¨øy_t
 
hódîs_«mes
;

1377 #i‡(
NGX_HTTP_CACHE
)

1378 
ngx_¨øy_t
 
∑øms_mîged
;

1380 
ngx_hash_key_t
 *
hk
;

1381 
ngx_hash_öô_t
 
hash
;

1382 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

1383 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1384 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1386 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1387 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1389 i‡(
¥ev
->
hódîs_hash
.
buckës


1390 #i‡(
NGX_HTTP_CACHE
)

1391 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1392 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

1396 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1397 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1398 
c⁄f
->
∑øms
 = 
¥ev
->params;

1399 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1400 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1402  
NGX_OK
;

1406 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1407 #i‡(
NGX_HTTP_CACHE
)

1408 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1412 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1413  
NGX_OK
;

1416 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1417 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1418  
NGX_ERROR
;

1421 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1422 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1423  
NGX_ERROR
;

1426 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1427 !
NGX_OK
)

1429  
NGX_ERROR
;

1432 i‡(
c⁄f
->
∑øms_sour˚
) {

1433 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1434 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1437 
§c
 = 
NULL
;

1438 
n§c
 = 0;

1441 #i‡(
NGX_HTTP_CACHE
)

1443 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1444 
ngx_keyvÆ_t
 *
h
;

1445 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

1447 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1448 (
ngx_hâp_up°ªam_∑øm_t
))

1449 !
NGX_OK
)

1451  
NGX_ERROR
;

1454 
i
 = 0; i < 
n§c
; i++) {

1456 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1457 i‡(
s
 =
NULL
) {

1458  
NGX_ERROR
;

1461 *
s
 = 
§c
[
i
];

1464 
h
 = 
ngx_hâp_scgi_ˇche_hódîs
;

1466 
h
->
key
.
Àn
) {

1468 
§c
 = 
∑øms_mîged
.
ñts
;

1469 
n§c
 = 
∑øms_mîged
.
√…s
;

1471 
i
 = 0; i < 
n§c
; i++) {

1472 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1473 
√xt
;

1477 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1478 i‡(
s
 =
NULL
) {

1479  
NGX_ERROR
;

1482 
s
->
key
 = 
h
->key;

1483 
s
->
vÆue
 = 
h
->value;

1484 
s
->
skù_em±y
 = 0;

1486 
√xt
:

1488 
h
++;

1491 
§c
 = 
∑øms_mîged
.
ñts
;

1492 
n§c
 = 
∑øms_mîged
.
√…s
;

1497 
i
 = 0; i < 
n§c
; i++) {

1499 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1500 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1502 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1503 i‡(
hk
 =
NULL
) {

1504  
NGX_ERROR
;

1507 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1508 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1509 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1510 
hk
->
vÆue
 = (*) 1;

1512 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1517 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1518 (
ngx_hâp_s¸ùt_c›y_code_t
));

1519 i‡(
c›y
 =
NULL
) {

1520  
NGX_ERROR
;

1523 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1524 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1526 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1527 (
ngx_hâp_s¸ùt_c›y_code_t
));

1528 i‡(
c›y
 =
NULL
) {

1529  
NGX_ERROR
;

1532 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1533 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1536 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1537 + 
§c
[
i
].
key
.
Àn
 + 1 + (
uöçå_t
) - 1)

1538 & ~((
uöçå_t
) - 1);

1540 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1541 i‡(
c›y
 =
NULL
) {

1542  
NGX_ERROR
;

1545 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1546 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1548 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1549 (Ë
	`ngx_˝y°∫
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
 + 1);

1552 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1554 
sc
.
cf
 = cf;

1555 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1556 
sc
.
Êushes
 = &
c⁄f
->flushes;

1557 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1558 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1560 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1561  
NGX_ERROR
;

1564 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1565 i‡(
code
 =
NULL
) {

1566  
NGX_ERROR
;

1569 *
code
 = (
uöçå_t
Ë
NULL
;

1572 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1573 i‡(
code
 =
NULL
) {

1574  
NGX_ERROR
;

1577 *
code
 = (
uöçå_t
Ë
NULL
;

1580 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1581 i‡(
code
 =
NULL
) {

1582  
NGX_ERROR
;

1585 *
code
 = (
uöçå_t
Ë
NULL
;

1587 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1588 i‡(
code
 =
NULL
) {

1589  
NGX_ERROR
;

1592 *
code
 = (
uöçå_t
Ë
NULL
;

1594 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1596 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1597 
hash
.
key
 = 
ngx_hash_key_lc
;

1598 
hash
.
max_size
 = 512;

1599 
hash
.
buckë_size
 = 64;

1600 
hash
.
«me
 = "scgi_params_hash";

1601 
hash
.
poﬁ
 = 
cf
->pool;

1602 
hash
.
ãmp_poﬁ
 = 
NULL
;

1604  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1605 
	}
}

1609 
	$ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1611 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1613 
ngx_uæ_t
 
u
;

1614 
ngx_°r_t
 *
vÆue
, *
uæ
;

1615 
ngx_uöt_t
 
n
;

1616 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1617 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1619 i‡(
scf
->
up°ªam
.up°ªam || scf->
scgi_Àngths
) {

1623 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1624 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1626 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1628 
uæ
 = &
vÆue
[1];

1630 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1632 i‡(
n
) {

1634 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1636 
sc
.
cf
 = cf;

1637 
sc
.
sour˚
 = 
uæ
;

1638 
sc
.
Àngths
 = &
scf
->
scgi_Àngths
;

1639 
sc
.
vÆues
 = &
scf
->
scgi_vÆues
;

1640 
sc
.
v¨übÀs
 = 
n
;

1641 
sc
.
com∂ëe_Àngths
 = 1;

1642 
sc
.
com∂ëe_vÆues
 = 1;

1644 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1645  
NGX_CONF_ERROR
;

1648  
NGX_CONF_OK
;

1651 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1653 
u
.
uæ
 = 
vÆue
[1];

1654 
u
.
no_ªsﬁve
 = 1;

1656 
scf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1657 i‡(
scf
->
up°ªam
.up°ªam =
NULL
) {

1658  
NGX_CONF_ERROR
;

1661 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1662 
˛cf
->
auto_ªdúe˘
 = 1;

1665  
NGX_CONF_OK
;

1666 
	}
}

1670 
	$ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1672 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1674 
ngx_°r_t
 *
vÆue
;

1675 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1677 i‡(
scf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || scf->up°ªam.
°‹e_Àngths
) {

1681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1683 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1684 
scf
->
up°ªam
.
°‹e
 = 0;

1685  
NGX_CONF_OK
;

1688 #i‡(
NGX_HTTP_CACHE
)

1690 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1691 && 
scf
->
up°ªam
.
ˇche
 !
NULL
)

1698 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1699 
scf
->
up°ªam
.
°‹e
 = 1;

1700  
NGX_CONF_OK
;

1704 
vÆue
[1].
Àn
++;

1706 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1708 
sc
.
cf
 = cf;

1709 
sc
.
sour˚
 = &
vÆue
[1];

1710 
sc
.
Àngths
 = &
scf
->
up°ªam
.
°‹e_Àngths
;

1711 
sc
.
vÆues
 = &
scf
->
up°ªam
.
°‹e_vÆues
;

1712 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);;

1713 
sc
.
com∂ëe_Àngths
 = 1;

1714 
sc
.
com∂ëe_vÆues
 = 1;

1716 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1717  
NGX_CONF_ERROR
;

1720  
NGX_CONF_OK
;

1721 
	}
}

1724 #i‡(
NGX_HTTP_CACHE
)

1727 
	$ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1729 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1731 
ngx_°r_t
 *
vÆue
;

1733 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1735 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1739 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1740 
scf
->
up°ªam
.
ˇche
 = 
NULL
;

1741  
NGX_CONF_OK
;

1744 i‡(
scf
->
up°ªam
.
°‹e
 > 0 || scf->up°ªam.
°‹e_Àngths
) {

1748 
scf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1749 &
ngx_hâp_scgi_moduÀ
);

1750 i‡(
scf
->
up°ªam
.
ˇche
 =
NULL
) {

1751  
NGX_CONF_ERROR
;

1754  
NGX_CONF_OK
;

1755 
	}
}

1759 
	$ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1761 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1763 
ngx_°r_t
 *
vÆue
;

1764 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1766 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1768 i‡(
scf
->
ˇche_key
.
vÆue
.
d©a
) {

1772 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1774 
ccv
.
cf
 = cf;

1775 
ccv
.
vÆue
 = &value[1];

1776 
ccv
.
com∂ex_vÆue
 = &
scf
->
ˇche_key
;

1778 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1779  
NGX_CONF_ERROR
;

1782  
NGX_CONF_OK
;

1783 
	}
}

	@src/http/modules/ngx_http_secure_link_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

15 
ngx_hâp_com∂ex_vÆue_t
 *
	mv¨übÀ
;

16 
ngx_hâp_com∂ex_vÆue_t
 *
	mmd5
;

17 
ngx_°r_t
 
	m£¸ë
;

18 } 
	tngx_hâp_£cuª_lök_c⁄f_t
;

22 
ngx_°r_t
 
	mexpúes
;

23 } 
	tngx_hâp_£cuª_lök_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

28 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 *
ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 
ngx_öt_t
 
ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

37 
ngx_comm™d_t
 
	gngx_hâp_£cuª_lök_comm™ds
[] = {

39 { 
ngx_°rög
("secure_link"),

40 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

41 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

42 
NGX_HTTP_LOC_CONF_OFFSET
,

43 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
v¨übÀ
),

44 
NULL
 },

46 { 
ngx_°rög
("secure_link_md5"),

47 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

48 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

49 
NGX_HTTP_LOC_CONF_OFFSET
,

50 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
md5
),

51 
NULL
 },

53 { 
ngx_°rög
("secure_link_secret"),

54 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_°r_¶Ÿ
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
£¸ë
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ_˘x
 = {

65 
ngx_hâp_£cuª_lök_add_v¨übÀs
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_£cuª_lök_¸óã_c⁄f
,

75 
ngx_hâp_£cuª_lök_mîge_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_£cuª_lök_moduÀ_˘x
,

82 
ngx_hâp_£cuª_lök_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_«me
 = 
ngx_°rög
("secure_link");

96 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_expúes_«me
 =

97 
ngx_°rög
("secure_link_expires");

100 
ngx_öt_t


101 
	$ngx_hâp_£cuª_lök_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

104 
u_ch¨
 *
p
, *
œ°
;

105 
ngx_°r_t
 
vÆ
, 
hash
;

106 
time_t
 
expúes
;

107 
ngx_md5_t
 
md5
;

108 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

109 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

110 
u_ch¨
 
hash_buf
[16], 
md5_buf
[16];

112 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

114 i‡(
c⁄f
->
£¸ë
.
d©a
) {

115  
	`ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
r
, 
c⁄f
, 
v
, 
d©a
);

118 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 || c⁄f->
md5
 == NULL) {

119 
nŸ_found
;

122 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
v¨übÀ
, &
vÆ
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 "£cuªÜök: \"%V\"", &
vÆ
);

129 
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

131 
p
 = 
	`ngx_°æchr
(
vÆ
.
d©a
, 
œ°
, ',');

132 
expúes
 = 0;

134 i‡(
p
) {

135 
vÆ
.
Àn
 = 
p
++ - vÆ.
d©a
;

137 
expúes
 = 
	`ngx_©Ÿm
(
p
, 
œ°
 -Ö);

138 i‡(
expúes
 <= 0) {

139 
nŸ_found
;

142 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_£cuª_lök_˘x_t
));

143 i‡(
˘x
 =
NULL
) {

144  
NGX_ERROR
;

147 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_£cuª_lök_moduÀ
);

149 
˘x
->
expúes
.
Àn
 = 
œ°
 - 
p
;

150 
˘x
->
expúes
.
d©a
 = 
p
;

153 i‡(
vÆ
.
Àn
 > 24) {

154 
nŸ_found
;

157 
hash
.
Àn
 = 16;

158 
hash
.
d©a
 = 
hash_buf
;

160 i‡(
	`ngx_decode_ba£64uæ
(&
hash
, &
vÆ
Ë!
NGX_OK
) {

161 
nŸ_found
;

164 i‡(
hash
.
Àn
 != 16) {

165 
nŸ_found
;

168 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
md5
, &
vÆ
Ë!
NGX_OK
) {

169  
NGX_ERROR
;

172 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

173 "£cuªÜök md5: \"%V\"", &
vÆ
);

175 
	`ngx_md5_öô
(&
md5
);

176 
	`ngx_md5_upd©e
(&
md5
, 
vÆ
.
d©a
, vÆ.
Àn
);

177 
	`ngx_md5_föÆ
(
md5_buf
, &
md5
);

179 i‡(
	`ngx_memcmp
(
hash_buf
, 
md5_buf
, 16) != 0) {

180 
nŸ_found
;

183 
v
->
d©a
 = (
u_ch¨
 *Ë((
expúes
 &&Éxpúe†< 
	`ngx_time
()) ? "0" : "1");

184 
v
->
Àn
 = 1;

185 
v
->
vÆid
 = 1;

186 
v
->
no_ˇchóbÀ
 = 0;

187 
v
->
nŸ_found
 = 0;

189  
NGX_OK
;

191 
nŸ_found
:

193 
v
->
nŸ_found
 = 1;

195  
NGX_OK
;

196 
	}
}

199 
ngx_öt_t


200 
	$ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

201 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

202 
uöçå_t
 
d©a
)

204 
u_ch¨
 *
p
, *
°¨t
, *
íd
, *
œ°
;

205 
size_t
 
Àn
;

206 
ngx_öt_t
 
n
;

207 
ngx_uöt_t
 
i
;

208 
ngx_md5_t
 
md5
;

209 
u_ch¨
 
hash
[16];

211 
p
 = &
r
->
u≈¨£d_uri
.
d©a
[1];

212 
œ°
 = 
r
->
u≈¨£d_uri
.
d©a
 +Ñ->u≈¨£d_uri.
Àn
;

214 
p
 < 
œ°
) {

215 i‡(*
p
++ == '/') {

216 
°¨t
 = 
p
;

217 
md5_°¨t
;

221 
nŸ_found
;

223 
md5_°¨t
:

225 
p
 < 
œ°
) {

226 i‡(*
p
++ == '/') {

227 
íd
 = 
p
 - 1;

228 
uæ_°¨t
;

232 
nŸ_found
;

234 
uæ_°¨t
:

236 
Àn
 = 
œ°
 - 
p
;

238 i‡(
íd
 - 
°¨t
 !32 || 
Àn
 == 0) {

239 
nŸ_found
;

242 
	`ngx_md5_öô
(&
md5
);

243 
	`ngx_md5_upd©e
(&
md5
, 
p
, 
Àn
);

244 
	`ngx_md5_upd©e
(&
md5
, 
c⁄f
->
£¸ë
.
d©a
, c⁄f->£¸ë.
Àn
);

245 
	`ngx_md5_föÆ
(
hash
, &
md5
);

247 
i
 = 0; i < 16; i++) {

248 
n
 = 
	`ngx_hextoi
(&
°¨t
[2 * 
i
], 2);

249 i‡(
n
 =
NGX_ERROR
 ||Ç !
hash
[
i
]) {

250 
nŸ_found
;

254 
v
->
Àn
 =Üen;

255 
v
->
vÆid
 = 1;

256 
v
->
no_ˇchóbÀ
 = 0;

257 
v
->
nŸ_found
 = 0;

258 
v
->
d©a
 = 
p
;

260  
NGX_OK
;

262 
nŸ_found
:

264 
v
->
nŸ_found
 = 1;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

272 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

274 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

276 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

278 i‡(
˘x
) {

279 
v
->
Àn
 = 
˘x
->
expúes
.len;

280 
v
->
vÆid
 = 1;

281 
v
->
no_ˇchóbÀ
 = 0;

282 
v
->
nŸ_found
 = 0;

283 
v
->
d©a
 = 
˘x
->
expúes
.data;

286 
v
->
nŸ_found
 = 1;

289  
NGX_OK
;

290 
	}
}

294 
	$ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

296 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

298 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_£cuª_lök_c⁄f_t
));

299 i‡(
c⁄f
 =
NULL
) {

300  
NULL
;

311  
c⁄f
;

312 
	}
}

316 
	$ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

318 
ngx_hâp_£cuª_lök_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

319 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
 = 
chûd
;

321 i‡(
c⁄f
->
£¸ë
.
d©a
) {

322 i‡(
c⁄f
->
v¨übÀ
 || c⁄f->
md5
) {

323 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

326  
NGX_CONF_ERROR
;

329  
NGX_CONF_OK
;

332 i‡(
c⁄f
->
v¨übÀ
 =
NULL
) {

333 
c⁄f
->
v¨übÀ
 = 
¥ev
->variable;

336 i‡(
c⁄f
->
md5
 =
NULL
) {

337 
c⁄f
->
md5
 = 
¥ev
->md5;

340 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 && c⁄f->
md5
 == NULL) {

341 
c⁄f
->
£¸ë
 = 
¥ev
->secret;

344  
NGX_CONF_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

351 
ngx_hâp_v¨übÀ_t
 *
v¨
;

353 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_«me
, 0);

354 i‡(
v¨
 =
NULL
) {

355  
NGX_ERROR
;

358 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_v¨übÀ
;

360 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_expúes_«me
, 0);

361 i‡(
v¨
 =
NULL
) {

362  
NGX_ERROR
;

365 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
;

367  
NGX_OK
;

368 
	}
}

	@src/http/modules/ngx_http_split_clients_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	m≥r˚¡
;

15 
ngx_hâp_v¨übÀ_vÆue_t
 
	mvÆue
;

16 } 
	tngx_hâp_•lô_˛õ¡s_∑π_t
;

20 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

21 
ngx_¨øy_t
 
	m∑πs
;

22 } 
	tngx_hâp_•lô_˛õ¡s_˘x_t
;

25 *
ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

28 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_hâp_•lô_˛õ¡s_comm™ds
[] = {

32 { 
ngx_°rög
("split_clients"),

33 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

34 
ngx_c⁄f_•lô_˛õ¡s_block
,

35 
NGX_HTTP_MAIN_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL


58 
ngx_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_hâp_•lô_˛õ¡s_moduÀ_˘x
,

61 
ngx_hâp_•lô_˛õ¡s_comm™ds
,

62 
NGX_HTTP_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_hâp_•lô_˛õ¡s_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

78 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
 = (ngx_hâp_•lô_˛õ¡s_˘x_à*Ë
d©a
;

80 
uöt32_t
 
hash
;

81 
ngx_°r_t
 
vÆ
;

82 
ngx_uöt_t
 
i
;

83 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

85 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

87 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

88  
NGX_OK
;

91 
hash
 = 
	`ngx_murmur_hash2
(
vÆ
.
d©a
, vÆ.
Àn
);

93 
∑π
 = 
˘x
->
∑πs
.
ñts
;

95 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

98 "hâ∞•lô: %uD %uD", 
hash
, 
∑π
[
i
].
≥r˚¡
);

100 i‡(
hash
 < 
∑π
[
i
].
≥r˚¡
 ||Öart[i].percent == 0) {

101 *
v
 = 
∑π
[
i
].
vÆue
;

102  
NGX_OK
;

106  
NGX_OK
;

107 
	}
}

111 
	$ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

113 *
rv
;

114 
uöt32_t
 
sum
, 
œ°
;

115 
ngx_°r_t
 *
vÆue
, 
«me
;

116 
ngx_uöt_t
 
i
;

117 
ngx_c⁄f_t
 
ßve
;

118 
ngx_hâp_v¨übÀ_t
 *
v¨
;

119 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

120 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

121 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

123 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•lô_˛õ¡s_˘x_t
));

124 i‡(
˘x
 =
NULL
) {

125  
NGX_CONF_ERROR
;

128 
vÆue
 = 
cf
->
¨gs
->
ñts
;

130 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

132 
ccv
.
cf
 = cf;

133 
ccv
.
vÆue
 = &value[1];

134 
ccv
.
com∂ex_vÆue
 = &
˘x
->
vÆue
;

136 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

137  
NGX_CONF_ERROR
;

140 
«me
 = 
vÆue
[2];

142 i‡(
«me
.
d©a
[0] != '$') {

143 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

144 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

145  
NGX_CONF_ERROR
;

148 
«me
.
Àn
--;

149 
«me
.
d©a
++;

151 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

152 i‡(
v¨
 =
NULL
) {

153  
NGX_CONF_ERROR
;

156 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s_v¨übÀ
;

157 
v¨
->
d©a
 = (
uöçå_t
Ë
˘x
;

159 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑πs
, 
cf
->
poﬁ
, 2,

160 (
ngx_hâp_•lô_˛õ¡s_∑π_t
))

161 !
NGX_OK
)

163  
NGX_CONF_ERROR
;

166 
ßve
 = *
cf
;

167 
cf
->
˘x
 = ctx;

168 
cf
->
h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s
;

169 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

171 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

173 *
cf
 = 
ßve
;

175 i‡(
rv
 !
NGX_CONF_OK
) {

176  
rv
;

179 
sum
 = 0;

180 
œ°
 = 0;

181 
∑π
 = 
˘x
->
∑πs
.
ñts
;

183 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

184 
sum
 = 
∑π
[
i
].
≥r˚¡
 ? sum +Öart[i].percent : 10000;

185 i‡(
sum
 > 10000) {

186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

188  
NGX_CONF_ERROR
;

191 i‡(
∑π
[
i
].
≥r˚¡
) {

192 
œ°
 +
∑π
[
i
].
≥r˚¡
 * (
uöt64_t
) 0xffffffff / 10000;

193 
∑π
[
i
].
≥r˚¡
 = 
œ°
;

197  
rv
;

198 
	}
}

202 
	$ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

204 
ngx_öt_t
 
n
;

205 
ngx_°r_t
 *
vÆue
;

206 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

207 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

209 
˘x
 = 
cf
->ctx;

210 
vÆue
 = 
cf
->
¨gs
->
ñts
;

212 
∑π
 = 
	`ngx_¨øy_push
(&
˘x
->
∑πs
);

213 i‡(
∑π
 =
NULL
) {

214  
NGX_CONF_ERROR
;

217 i‡(
vÆue
[0].
Àn
 =1 && vÆue[0].
d©a
[0] == '*') {

218 
∑π
->
≥r˚¡
 = 0;

221 i‡(
vÆue
[0].
Àn
 =0 || vÆue[0].
d©a
[value[0].len - 1] != '%') {

222 
övÆid
;

225 
n
 = 
	`ngx_©oÂ
(
vÆue
[0].
d©a
, vÆue[0].
Àn
 - 1, 2);

226 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

227 
övÆid
;

230 
∑π
->
≥r˚¡
 = (
uöt32_t
Ë
n
;

233 
∑π
->
vÆue
.
Àn
 = value[1].len;

234 
∑π
->
vÆue
.
vÆid
 = 1;

235 
∑π
->
vÆue
.
no_ˇchóbÀ
 = 0;

236 
∑π
->
vÆue
.
nŸ_found
 = 0;

237 
∑π
->
vÆue
.
d©a
 = value[1].data;

239  
NGX_CONF_OK
;

241 
övÆid
:

243 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

244 "övÆidÖî˚¡ vÆuê\"%V\"", &
vÆue
[0]);

245  
NGX_CONF_ERROR
;

246 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_SSI_ERROR
 1

	)

14 
	#NGX_HTTP_SSI_DATE_LEN
 2048

	)

16 
	#NGX_HTTP_SSI_ADD_PREFIX
 1

	)

17 
	#NGX_HTTP_SSI_ADD_ZERO
 2

	)

21 
ngx_Êag_t
 
	míabÀ
;

22 
ngx_Êag_t
 
	msûít_îr‹s
;

23 
ngx_Êag_t
 
	mign‹e_ªcy˛ed_buf„rs
;

25 
ngx_hash_t
 
	mty≥s
;

27 
size_t
 
	mmö_fûe_chunk
;

28 
size_t
 
	mvÆue_Àn
;

30 
ngx_¨øy_t
 *
	mty≥s_keys
;

31 } 
	tngx_hâp_ssi_loc_c⁄f_t
;

35 
ngx_°r_t
 
	m«me
;

36 
ngx_uöt_t
 
	mkey
;

37 
ngx_°r_t
 
	mvÆue
;

38 } 
	tngx_hâp_ssi_v¨_t
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_chaö_t
 *
	mbufs
;

44 
ngx_uöt_t
 
	mcou¡
;

45 } 
	tngx_hâp_ssi_block_t
;

49 
	mssi_°¨t_°©e
 = 0,

50 
	mssi_èg_°©e
,

51 
	mssi_commít0_°©e
,

52 
	mssi_commít1_°©e
,

53 
	mssi_sh¨p_°©e
,

54 
	mssi_¥ecomm™d_°©e
,

55 
	mssi_comm™d_°©e
,

56 
	mssi_¥ï¨am_°©e
,

57 
	mssi_∑øm_°©e
,

58 
	mssi_¥ìquÆ_°©e
,

59 
	mssi_¥evÆue_°©e
,

60 
	mssi_doubÀ_quŸed_vÆue_°©e
,

61 
	mssi_quŸed_vÆue_°©e
,

62 
	mssi_quŸed_symbﬁ_°©e
,

63 
	mssi_po°∑øm_°©e
,

64 
	mssi_commít_íd0_°©e
,

65 
	mssi_commít_íd1_°©e
,

66 
	mssi_îr‹_°©e
,

67 
	mssi_îr‹_íd0_°©e
,

68 
	mssi_îr‹_íd1_°©e


69 } 
	tngx_hâp_ssi_°©e_e
;

72 
ngx_öt_t
 
ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_ssi_˘x_t
 *
˘x
);

74 
ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_hâp_ssi_˘x_t
 *
˘x
);

76 
ngx_öt_t
 
ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_ssi_˘x_t
 *
˘x
);

78 
ngx_°r_t
 *
ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

80 
ngx_öt_t
 
ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
);

82 
ngx_öt_t
 
ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_°r_t
 *
∑âîn
,Çgx_°r_à*
°r
);

85 
ngx_öt_t
 
ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

87 
ngx_öt_t
 
ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

88 
ngx_öt_t
 
rc
);

89 
ngx_öt_t
 
ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

90 
ngx_öt_t
 
rc
);

91 
ngx_öt_t
 
ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

93 
ngx_öt_t
 
ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

95 
ngx_öt_t
 
ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

97 
ngx_öt_t
 
ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

99 
ngx_öt_t
 
ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

101 
ngx_öt_t
 
ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

103 
ngx_öt_t
 
ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

105 
ngx_öt_t
 
ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

108 
ngx_öt_t
 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
);

111 
ngx_öt_t
 
ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

112 *
ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

113 *
ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

114 *
ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

116 *
∑ª¡
, *
chûd
);

117 
ngx_öt_t
 
ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

120 
ngx_comm™d_t
 
	gngx_hâp_ssi_fûãr_comm™ds
[] = {

122 { 
ngx_°rög
("ssi"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


124 |
NGX_CONF_FLAG
,

125 
ngx_c⁄f_£t_Êag_¶Ÿ
,

126 
NGX_HTTP_LOC_CONF_OFFSET
,

127 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
íabÀ
),

128 
NULL
 },

130 { 
ngx_°rög
("ssi_silent_errors"),

131 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

132 
ngx_c⁄f_£t_Êag_¶Ÿ
,

133 
NGX_HTTP_LOC_CONF_OFFSET
,

134 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
sûít_îr‹s
),

135 
NULL
 },

137 { 
ngx_°rög
("ssi_ignore_recycled_buffers"),

138 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

139 
ngx_c⁄f_£t_Êag_¶Ÿ
,

140 
NGX_HTTP_LOC_CONF_OFFSET
,

141 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ign‹e_ªcy˛ed_buf„rs
),

142 
NULL
 },

144 { 
ngx_°rög
("ssi_min_file_chunk"),

145 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_size_¶Ÿ
,

147 
NGX_HTTP_LOC_CONF_OFFSET
,

148 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
mö_fûe_chunk
),

149 
NULL
 },

151 { 
ngx_°rög
("ssi_value_length"),

152 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_size_¶Ÿ
,

154 
NGX_HTTP_LOC_CONF_OFFSET
,

155 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
vÆue_Àn
),

156 
NULL
 },

158 { 
ngx_°rög
("ssi_types"),

159 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

160 
ngx_hâp_ty≥s_¶Ÿ
,

161 
NGX_HTTP_LOC_CONF_OFFSET
,

162 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ty≥s_keys
),

163 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

165 
ngx_nuŒ_comm™d


170 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ_˘x
 = {

171 
ngx_hâp_ssi_¥ec⁄figuøti⁄
,

172 
ngx_hâp_ssi_fûãr_öô
,

174 
ngx_hâp_ssi_¸óã_maö_c⁄f
,

175 
ngx_hâp_ssi_öô_maö_c⁄f
,

177 
NULL
,

178 
NULL
,

180 
ngx_hâp_ssi_¸óã_loc_c⁄f
,

181 
ngx_hâp_ssi_mîge_loc_c⁄f


185 
ngx_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ
 = {

186 
NGX_MODULE_V1
,

187 &
ngx_hâp_ssi_fûãr_moduÀ_˘x
,

188 
ngx_hâp_ssi_fûãr_comm™ds
,

189 
NGX_HTTP_MODULE
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NGX_MODULE_V1_PADDING


201 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

202 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

205 
u_ch¨
 
	gngx_hâp_ssi_°rög
[] = "<!--";

207 
ngx_°r_t
 
	gngx_hâp_ssi_n⁄e
 = 
ngx_°rög
("(none)");

208 
ngx_°r_t
 
	gngx_hâp_ssi_nuŒ_°rög
 = 
ngx_nuŒ_°rög
;

211 
	#NGX_HTTP_SSI_INCLUDE_VIRTUAL
 0

	)

212 
	#NGX_HTTP_SSI_INCLUDE_FILE
 1

	)

213 
	#NGX_HTTP_SSI_INCLUDE_WAIT
 2

	)

214 
	#NGX_HTTP_SSI_INCLUDE_SET
 3

	)

215 
	#NGX_HTTP_SSI_INCLUDE_STUB
 4

	)

217 
	#NGX_HTTP_SSI_ECHO_VAR
 0

	)

218 
	#NGX_HTTP_SSI_ECHO_DEFAULT
 1

	)

219 
	#NGX_HTTP_SSI_ECHO_ENCODING
 2

	)

221 
	#NGX_HTTP_SSI_CONFIG_ERRMSG
 0

	)

222 
	#NGX_HTTP_SSI_CONFIG_TIMEFMT
 1

	)

224 
	#NGX_HTTP_SSI_SET_VAR
 0

	)

225 
	#NGX_HTTP_SSI_SET_VALUE
 1

	)

227 
	#NGX_HTTP_SSI_IF_EXPR
 0

	)

229 
	#NGX_HTTP_SSI_BLOCK_NAME
 0

	)

232 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_ö˛ude_∑øms
[] = {

233 { 
ngx_°rög
("vútuÆ"), 
NGX_HTTP_SSI_INCLUDE_VIRTUAL
, 0, 0 },

234 { 
ngx_°rög
("fûe"), 
NGX_HTTP_SSI_INCLUDE_FILE
, 0, 0 },

235 { 
ngx_°rög
("waô"), 
NGX_HTTP_SSI_INCLUDE_WAIT
, 0, 0 },

236 { 
ngx_°rög
("£t"), 
NGX_HTTP_SSI_INCLUDE_SET
, 0, 0 },

237 { 
ngx_°rög
("°ub"), 
NGX_HTTP_SSI_INCLUDE_STUB
, 0, 0 },

238 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

242 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_echo_∑øms
[] = {

243 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_ECHO_VAR
, 1, 0 },

244 { 
ngx_°rög
("deÁu…"), 
NGX_HTTP_SSI_ECHO_DEFAULT
, 0, 0 },

245 { 
ngx_°rög
("ícodög"), 
NGX_HTTP_SSI_ECHO_ENCODING
, 0, 0 },

246 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

250 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_c⁄fig_∑øms
[] = {

251 { 
ngx_°rög
("îrmsg"), 
NGX_HTTP_SSI_CONFIG_ERRMSG
, 0, 0 },

252 { 
ngx_°rög
("timefmt"), 
NGX_HTTP_SSI_CONFIG_TIMEFMT
, 0, 0 },

253 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

257 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_£t_∑øms
[] = {

258 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_SET_VAR
, 1, 0 },

259 { 
ngx_°rög
("vÆue"), 
NGX_HTTP_SSI_SET_VALUE
, 1, 0 },

260 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

264 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_if_∑øms
[] = {

265 { 
ngx_°rög
("ex¥"), 
NGX_HTTP_SSI_IF_EXPR
, 1, 0 },

266 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

270 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_block_∑øms
[] = {

271 { 
ngx_°rög
("«me"), 
NGX_HTTP_SSI_BLOCK_NAME
, 1, 0 },

272 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

276 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_no_∑øms
[] = {

277 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

281 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_ssi_comm™ds
[] = {

282 { 
ngx_°rög
("ö˛ude"), 
ngx_hâp_ssi_ö˛ude
,

283 
ngx_hâp_ssi_ö˛ude_∑øms
, 0, 0, 1 },

284 { 
ngx_°rög
("echo"), 
ngx_hâp_ssi_echo
,

285 
ngx_hâp_ssi_echo_∑øms
, 0, 0, 0 },

286 { 
ngx_°rög
("c⁄fig"), 
ngx_hâp_ssi_c⁄fig
,

287 
ngx_hâp_ssi_c⁄fig_∑øms
, 0, 0, 0 },

288 { 
ngx_°rög
("£t"), 
ngx_hâp_ssi_£t
, 
ngx_hâp_ssi_£t_∑øms
, 0, 0, 0 },

290 { 
ngx_°rög
("if"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
, 0, 0, 0 },

291 { 
ngx_°rög
("ñif"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
,

292 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

293 { 
ngx_°rög
("ñ£"), 
ngx_hâp_ssi_ñ£
, 
ngx_hâp_ssi_no_∑øms
,

294 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

295 { 
ngx_°rög
("ídif"), 
ngx_hâp_ssi_ídif
, 
ngx_hâp_ssi_no_∑øms
,

296 
NGX_HTTP_SSI_COND_ELSE
, 0, 0 },

298 { 
ngx_°rög
("block"), 
ngx_hâp_ssi_block
,

299 
ngx_hâp_ssi_block_∑øms
, 0, 0, 0 },

300 { 
ngx_°rög
("ídblock"), 
ngx_hâp_ssi_ídblock
,

301 
ngx_hâp_ssi_no_∑øms
, 0, 1, 0 },

303 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

307 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_ssi_v¨s
[] = {

309 { 
ngx_°rög
("d©e_loˇl"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 0,

310 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

312 { 
ngx_°rög
("d©e_gmt"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 1,

313 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

315 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

320 
ngx_öt_t


321 
	$ngx_hâp_ssi_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

323 
ngx_hâp_ssi_˘x_t
 *
˘x
;

324 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

326 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

328 i‡(!
¶cf
->
íabÀ


329 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

330 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

332  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

335 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ssi_˘x_t
));

336 i‡(
˘x
 =
NULL
) {

337  
NGX_ERROR
;

340 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ssi_fûãr_moduÀ
);

343 
˘x
->
vÆue_Àn
 = 
¶cf
->value_len;

344 
˘x
->
œ°_out
 = &˘x->
out
;

346 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

347 
˘x
->
ouçut
 = 1;

349 
˘x
->
∑øms
.
ñts
 = ctx->
∑øms_¨øy
;

350 
˘x
->
∑øms
.
size
 = (
ngx_èbÀ_ñt_t
);

351 
˘x
->
∑øms
.
«Œoc
 = 
NGX_HTTP_SSI_PARAMS_N
;

352 
˘x
->
∑øms
.
poﬁ
 = 
r
->pool;

354 
	`ngx_°r_£t
(&
˘x
->
timefmt
, "%A, %d-%b-%Y %H:%M:%S %Z");

355 
	`ngx_°r_£t
(&
˘x
->
îrmsg
,

358 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

360 i‡(
r
 =r->
maö
) {

361 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

362 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

363 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

366  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_hâp_ssi_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

373 
size_t
 
Àn
;

374 
ngx_öt_t
 
rc
;

375 
ngx_buf_t
 *
b
;

376 
ngx_uöt_t
 
i
, 
ödex
;

377 
ngx_chaö_t
 *
˛
, **
Œ
;

378 
ngx_èbÀ_ñt_t
 *
∑øm
;

379 
ngx_hâp_ssi_˘x_t
 *
˘x
, *
m˘x
;

380 
ngx_hâp_ssi_block_t
 *
bl
;

381 
ngx_hâp_ssi_∑øm_t
 *
¥m
;

382 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

383 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

384 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

385 
ngx_°r_t
 *
∑øms
[
NGX_HTTP_SSI_MAX_PARAMS
 + 1];

387 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

389 i‡(
˘x
 =
NULL


390 || (
ö
 =
NULL


391 && 
˘x
->
buf
 =
NULL


392 && 
˘x
->
ö
 =
NULL


393 && 
˘x
->
busy
 =
NULL
))

395  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

400 i‡(
ö
) {

401 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

402  
NGX_ERROR
;

406 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

407 "hâ∞ssòfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

409 i‡(
˘x
->
waô
) {

411 i‡(
r
 !r->
c⁄√˘i⁄
->
d©a
) {

412 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

414 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

416  
NGX_AGAIN
;

419 i‡(
˘x
->
waô
->
d⁄e
) {

420 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

422 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

424 
˘x
->
waô
 = 
NULL
;

427 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

429 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

431  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

435 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

437 
˘x
->
ö
 || ctx->
buf
) {

439 i‡(
˘x
->
buf
 =
NULL
) {

440 
˘x
->
buf
 = ctx->
ö
->buf;

441 
˘x
->
ö
 = ctx->ö->
√xt
;

442 
˘x
->
pos
 = ctx->
buf
->pos;

445 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

446 
˘x
->
c›y_°¨t
 = ctx->
pos
;

447 
˘x
->
c›y_íd
 = ctx->
pos
;

450 
b
 = 
NULL
;

452 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

455 "ßved: %d sèã: %d", 
˘x
->
ßved
, ctx->
°©e
);

457 
rc
 = 
	`ngx_hâp_ssi_∑r£
(
r
, 
˘x
);

459 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

461 
rc
, 
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

463 i‡(
rc
 =
NGX_ERROR
) {

464  
rc
;

467 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

469 i‡(
˘x
->
ouçut
) {

471 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

472 "ßved: %d", 
˘x
->
ßved
);

474 i‡(
˘x
->
ßved
) {

476 i‡(
˘x
->
‰ì
) {

477 
˛
 = 
˘x
->
‰ì
;

478 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

479 
b
 = 
˛
->
buf
;

480 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

483 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

484 i‡(
b
 =
NULL
) {

485  
NGX_ERROR
;

488 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

489 i‡(
˛
 =
NULL
) {

490  
NGX_ERROR
;

493 
˛
->
buf
 = 
b
;

496 
b
->
mem‹y
 = 1;

497 
b
->
pos
 = 
ngx_hâp_ssi_°rög
;

498 
b
->
œ°
 = 
ngx_hâp_ssi_°rög
 + 
˘x
->
ßved
;

500 *
˘x
->
œ°_out
 = 
˛
;

501 
˘x
->
œ°_out
 = &
˛
->
√xt
;

503 
˘x
->
ßved
 = 0;

506 i‡(
˘x
->
‰ì
) {

507 
˛
 = 
˘x
->
‰ì
;

508 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

509 
b
 = 
˛
->
buf
;

512 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

513 i‡(
b
 =
NULL
) {

514  
NGX_ERROR
;

517 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

518 i‡(
˛
 =
NULL
) {

519  
NGX_ERROR
;

522 
˛
->
buf
 = 
b
;

525 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

527 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

528 
b
->
œ°
 = 
˘x
->
c›y_íd
;

529 
b
->
shadow
 = 
NULL
;

530 
b
->
œ°_buf
 = 0;

531 
b
->
ªcy˛ed
 = 0;

533 i‡(
b
->
ö_fûe
) {

534 i‡(
¶cf
->
mö_fûe_chunk
 < (
size_t
Ë(
b
->
œ°
 - b->
pos
))

536 
b
->
fûe_œ°
 = b->
fûe_pos


537 + (
b
->
œ°
 - 
˘x
->
buf
->
pos
);

538 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

541 
b
->
ö_fûe
 = 0;

545 
˛
->
√xt
 = 
NULL
;

546 *
˘x
->
œ°_out
 = 
˛
;

547 
˘x
->
œ°_out
 = &
˛
->
√xt
;

550 i‡(
˘x
->
block


551 && 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
))

553 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

554 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
));

556 i‡(
b
 =
NULL
) {

557  
NGX_ERROR
;

560 i‡(
˘x
->
ßved
) {

561 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
ngx_hâp_ssi_°rög
,

562 
˘x
->
ßved
);

565 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
c›y_°¨t
,

566 
˘x
->
c›y_íd
 - ctx->
c›y_°¨t
);

568 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

569 i‡(
˛
 =
NULL
) {

570  
NGX_ERROR
;

573 
˛
->
buf
 = 
b
;

574 
˛
->
√xt
 = 
NULL
;

576 
b
 = 
NULL
;

578 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

579 
ngx_hâp_ssi_fûãr_moduÀ
);

580 
bl
 = 
m˘x
->
blocks
->
ñts
;

581 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

582 *
Œ
;

583 
Œ
 = &(*Œ)->
√xt
)

588 *
Œ
 = 
˛
;

591 
˘x
->
ßved
 = 0;

595 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

596 
˘x
->
c›y_°¨t
 = ctx->
pos
;

597 
˘x
->
c›y_íd
 = ctx->
pos
;

600 
˘x
->
c›y_°¨t
 = 
NULL
;

601 
˘x
->
c›y_íd
 = 
NULL
;

604 i‡(
rc
 =
NGX_AGAIN
) {

609 
b
 = 
NULL
;

611 i‡(
rc
 =
NGX_OK
) {

613 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
,

614 
ngx_hâp_ssi_fûãr_moduÀ
);

616 
cmd
 = 
	`ngx_hash_föd
(&
smcf
->
hash
, 
˘x
->
key
, ctx->
comm™d
.
d©a
,

617 
˘x
->
comm™d
.
Àn
);

619 i‡(
cmd
 =
NULL
) {

620 i‡(
˘x
->
ouçut
) {

621 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

623 &
˘x
->
comm™d
);

624 
ssi_îr‹
;

630 i‡(!
˘x
->
ouçut
 && !
cmd
->
block
) {

632 i‡(
˘x
->
block
) {

636 
Àn
 = 5 + 
˘x
->
comm™d
.len + 4;

638 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

639 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

640 
Àn
 +1 + 
∑øm
[
i
].
key
.len + 2

641 + 
∑øm
[
i
].
vÆue
.
Àn
 + 1;

644 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

646 i‡(
b
 =
NULL
) {

647  
NGX_ERROR
;

650 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

651 i‡(
˛
 =
NULL
) {

652  
NGX_ERROR
;

655 
˛
->
buf
 = 
b
;

656 
˛
->
√xt
 = 
NULL
;

658 *
b
->
œ°
++ = '<';

659 *
b
->
œ°
++ = '!';

660 *
b
->
œ°
++ = '-';

661 *
b
->
œ°
++ = '-';

662 *
b
->
œ°
++ = '#';

664 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
comm™d
.
d©a
,

665 
˘x
->
comm™d
.
Àn
);

667 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

668 *
b
->
œ°
++ = ' ';

669 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
key
.
d©a
,

670 
∑øm
[
i
].
key
.
Àn
);

671 *
b
->
œ°
++ = '=';

672 *
b
->
œ°
++ = '"';

673 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
vÆue
.
d©a
,

674 
∑øm
[
i
].
vÆue
.
Àn
);

675 *
b
->
œ°
++ = '"';

678 *
b
->
œ°
++ = ' ';

679 *
b
->
œ°
++ = '-';

680 *
b
->
œ°
++ = '-';

681 *
b
->
œ°
++ = '>';

683 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

684 
ngx_hâp_ssi_fûãr_moduÀ
);

685 
bl
 = 
m˘x
->
blocks
->
ñts
;

686 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

687 *
Œ
;

688 
Œ
 = &(*Œ)->
√xt
)

693 *
Œ
 = 
˛
;

695 
b
 = 
NULL
;

700 i‡(
cmd
->
c⁄dôi⁄Æ
 == 0) {

705 i‡(
cmd
->
c⁄dôi⁄Æ


706 && (
˘x
->
c⁄dôi⁄Æ
 == 0

707 || 
˘x
->
c⁄dôi⁄Æ
 > 
cmd
->conditional))

709 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

711 &
˘x
->
comm™d
);

712 
ssi_îr‹
;

715 i‡(
˘x
->
∑øms
.
√…s
 > 
NGX_HTTP_SSI_MAX_PARAMS
) {

716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

718 &
˘x
->
comm™d
);

719 
ssi_îr‹
;

722 
	`ngx_memzîo
(
∑øms
,

723 (
NGX_HTTP_SSI_MAX_PARAMS
 + 1Ë* (
ngx_°r_t
 *));

725 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

727 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

729 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

731 i‡(
∑øm
[
i
].
key
.
Àn
 !
¥m
->
«me
.len

732 || 
	`ngx_°∫cmp
(
∑øm
[
i
].
key
.
d©a
, 
¥m
->
«me
.data,

733 
¥m
->
«me
.
Àn
) != 0)

738 i‡(!
¥m
->
mu…ùÀ
) {

739 i‡(
∑øms
[
¥m
->
ödex
]) {

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
,

741 
r
->
c⁄√˘i⁄
->
log
, 0,

744 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

746 
ssi_îr‹
;

749 
∑øms
[
¥m
->
ödex
] = &
∑øm
[
i
].
vÆue
;

754 
ödex
 = 
¥m
->ödex; 
∑øms
[index]; index++) {

758 
∑øms
[
ödex
] = &
∑øm
[
i
].
vÆue
;

763 i‡(
¥m
->
«me
.
Àn
 == 0) {

764 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

767 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

769 
ssi_îr‹
;

773 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

774 i‡(
¥m
->
m™d©‹y
 && 
∑øms
[¥m->
ödex
] == 0) {

775 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

778 &
¥m
->
«me
, &
˘x
->
comm™d
);

780 
ssi_îr‹
;

784 i‡(
cmd
->
Êush
 && 
˘x
->
out
) {

786 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

789 i‡(
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

790  
NGX_ERROR
;

794 
rc
 = 
cmd
->
	`h™dÀr
(
r
, 
˘x
, 
∑øms
);

796 i‡(
rc
 =
NGX_OK
) {

800 i‡(
rc
 =
NGX_DONE
 ||Ñ¯=
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

801 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

802  
rc
;

809 
ssi_îr‹
:

811 i‡(
¶cf
->
sûít_îr‹s
) {

815 i‡(
˘x
->
‰ì
) {

816 
˛
 = 
˘x
->
‰ì
;

817 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

818 
b
 = 
˛
->
buf
;

819 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

822 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

823 i‡(
b
 =
NULL
) {

824  
NGX_ERROR
;

827 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

828 i‡(
˛
 =
NULL
) {

829  
NGX_ERROR
;

832 
˛
->
buf
 = 
b
;

835 
b
->
mem‹y
 = 1;

836 
b
->
pos
 = 
˘x
->
îrmsg
.
d©a
;

837 
b
->
œ°
 = 
˘x
->
îrmsg
.
d©a
 + ctx->îrmsg.
Àn
;

839 
˛
->
√xt
 = 
NULL
;

840 *
˘x
->
œ°_out
 = 
˛
;

841 
˘x
->
œ°_out
 = &
˛
->
√xt
;

846 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

847 i‡(
b
 =
NULL
) {

848 i‡(
˘x
->
‰ì
) {

849 
˛
 = 
˘x
->
‰ì
;

850 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

851 
b
 = 
˛
->
buf
;

852 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

855 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

856 i‡(
b
 =
NULL
) {

857  
NGX_ERROR
;

860 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

861 i‡(
˛
 =
NULL
) {

862  
NGX_ERROR
;

865 
˛
->
buf
 = 
b
;

868 
b
->
sync
 = 1;

870 
˛
->
√xt
 = 
NULL
;

871 *
˘x
->
œ°_out
 = 
˛
;

872 
˘x
->
œ°_out
 = &
˛
->
√xt
;

875 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

876 
b
->
shadow
 = 
˘x
->
buf
;

878 i‡(
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 == 0) {

879 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

883 
˘x
->
buf
 = 
NULL
;

885 
˘x
->
ßved
 = ctx->
looked
;

888 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

889  
NGX_OK
;

892  
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
);

893 
	}
}

896 
ngx_öt_t


897 
	$ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

899 
ngx_öt_t
 
rc
;

900 
ngx_buf_t
 *
b
;

901 
ngx_chaö_t
 *
˛
;

904 
b
 = 
NULL
;

905 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

906 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

907 "ssòout: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

908 i‡(
˛
->
buf
 =
b
) {

909 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

911 
	`ngx_debug_poöt
();

912  
NGX_ERROR
;

914 
b
 = 
˛
->
buf
;

918 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

920 i‡(
˘x
->
busy
 =
NULL
) {

921 
˘x
->
busy
 = ctx->
out
;

924 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

925 
˛
->
√xt
 = 
˘x
->
out
;

928 
˘x
->
out
 = 
NULL
;

929 
˘x
->
œ°_out
 = &˘x->
out
;

931 
˘x
->
busy
) {

933 
˛
 = 
˘x
->
busy
;

934 
b
 = 
˛
->
buf
;

936 i‡(
	`ngx_buf_size
(
b
) != 0) {

940 i‡(
b
->
shadow
) {

941 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

944 
˘x
->
busy
 = 
˛
->
√xt
;

946 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

949 
˛
->
√xt
 = 
˘x
->
‰ì
;

950 
˘x
->
‰ì
 = 
˛
;

954 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

956  
rc
;

957 
	}
}

961 
	$ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

963 i‡(
˘x
->
ö
 || ctx->
buf
) {

964 
r
->
buf„ªd
 |
NGX_HTTP_SSI_BUFFERED
;

967 
r
->
buf„ªd
 &~
NGX_HTTP_SSI_BUFFERED
;

969 
	}
}

972 
ngx_öt_t


973 
	$ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

975 
u_ch¨
 *
p
, *
vÆue
, *
œ°
, *
c›y_íd
, 
ch
;

976 
size_t
 
looked
;

977 
ngx_hâp_ssi_°©e_e
 
°©e
;

979 
°©e
 = 
˘x
->state;

980 
looked
 = 
˘x
->looked;

981 
œ°
 = 
˘x
->
buf
->last;

982 
c›y_íd
 = 
˘x
->copy_end;

984 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

986 
ch
 = *
p
;

988 i‡(
°©e
 =
ssi_°¨t_°©e
) {

993 i‡(
ch
 == '<') {

994 
c›y_íd
 = 
p
;

995 
looked
 = 1;

996 
°©e
 = 
ssi_èg_°©e
;

998 
èg_°¨ãd
;

1001 i‡(++
p
 =
œ°
) {

1005 
ch
 = *
p
;

1008 
˘x
->
°©e
 = state;

1009 
˘x
->
pos
 = 
p
;

1010 
˘x
->
looked
 =Üooked;

1011 
˘x
->
c›y_íd
 = 
p
;

1013 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

1014 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1017  
NGX_AGAIN
;

1019 
èg_°¨ãd
:

1024 
°©e
) {

1026 
ssi_°¨t_°©e
:

1030 
ssi_èg_°©e
:

1031 
ch
) {

1033 
looked
 = 2;

1034 
°©e
 = 
ssi_commít0_°©e
;

1038 
c›y_íd
 = 
p
;

1042 
c›y_íd
 = 
p
;

1043 
looked
 = 0;

1044 
°©e
 = 
ssi_°¨t_°©e
;

1050 
ssi_commít0_°©e
:

1051 
ch
) {

1053 
looked
 = 3;

1054 
°©e
 = 
ssi_commít1_°©e
;

1058 
c›y_íd
 = 
p
;

1059 
looked
 = 1;

1060 
°©e
 = 
ssi_èg_°©e
;

1064 
c›y_íd
 = 
p
;

1065 
looked
 = 0;

1066 
°©e
 = 
ssi_°¨t_°©e
;

1072 
ssi_commít1_°©e
:

1073 
ch
) {

1075 
looked
 = 4;

1076 
°©e
 = 
ssi_sh¨p_°©e
;

1080 
c›y_íd
 = 
p
;

1081 
looked
 = 1;

1082 
°©e
 = 
ssi_èg_°©e
;

1086 
c›y_íd
 = 
p
;

1087 
looked
 = 0;

1088 
°©e
 = 
ssi_°¨t_°©e
;

1094 
ssi_sh¨p_°©e
:

1095 
ch
) {

1097 i‡(
p
 - 
˘x
->
pos
 < 4) {

1098 
˘x
->
ßved
 = 0;

1100 
looked
 = 0;

1101 
°©e
 = 
ssi_¥ecomm™d_°©e
;

1105 
c›y_íd
 = 
p
;

1106 
looked
 = 1;

1107 
°©e
 = 
ssi_èg_°©e
;

1111 
c›y_íd
 = 
p
;

1112 
looked
 = 0;

1113 
°©e
 = 
ssi_°¨t_°©e
;

1119 
ssi_¥ecomm™d_°©e
:

1120 
ch
) {

1122 
CR
:

1123 
LF
:

1128 
˘x
->
comm™d
.
Àn
 = 1;

1129 
˘x
->
comm™d
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1130 
NGX_HTTP_SSI_COMMAND_LEN
);

1131 i‡(
˘x
->
comm™d
.
d©a
 =
NULL
) {

1132  
NGX_ERROR
;

1135 
˘x
->
comm™d
.
d©a
[0] = 
ch
;

1137 
˘x
->
key
 = 0;

1138 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1140 
˘x
->
∑øms
.
√…s
 = 0;

1142 
°©e
 = 
ssi_comm™d_°©e
;

1148 
ssi_comm™d_°©e
:

1149 
ch
) {

1151 
CR
:

1152 
LF
:

1154 
°©e
 = 
ssi_¥ï¨am_°©e
;

1158 
°©e
 = 
ssi_commít_íd0_°©e
;

1162 i‡(
˘x
->
comm™d
.
Àn
 =
NGX_HTTP_SSI_COMMAND_LEN
) {

1163 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1165 &
˘x
->
comm™d
, 
ch
);

1167 
°©e
 = 
ssi_îr‹_°©e
;

1171 
˘x
->
comm™d
.
d©a
[˘x->comm™d.
Àn
++] = 
ch
;

1172 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1177 
ssi_¥ï¨am_°©e
:

1178 
ch
) {

1180 
CR
:

1181 
LF
:

1186 
°©e
 = 
ssi_commít_íd0_°©e
;

1190 
˘x
->
∑øm
 = 
	`ngx_¨øy_push
(&˘x->
∑øms
);

1191 i‡(
˘x
->
∑øm
 =
NULL
) {

1192  
NGX_ERROR
;

1195 
˘x
->
∑øm
->
key
.
Àn
 = 1;

1196 
˘x
->
∑øm
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1197 
NGX_HTTP_SSI_PARAM_LEN
);

1198 i‡(
˘x
->
∑øm
->
key
.
d©a
 =
NULL
) {

1199  
NGX_ERROR
;

1202 
˘x
->
∑øm
->
key
.
d©a
[0] = 
ch
;

1204 
˘x
->
∑øm
->
vÆue
.
Àn
 = 0;

1206 i‡(
˘x
->
vÆue_buf
 =
NULL
) {

1207 
˘x
->
∑øm
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1208 
˘x
->
vÆue_Àn
 + 1);

1209 i‡(
˘x
->
∑øm
->
vÆue
.
d©a
 =
NULL
) {

1210  
NGX_ERROR
;

1214 
˘x
->
∑øm
->
vÆue
.
d©a
 = ctx->
vÆue_buf
;

1217 
°©e
 = 
ssi_∑øm_°©e
;

1223 
ssi_∑øm_°©e
:

1224 
ch
) {

1226 
CR
:

1227 
LF
:

1229 
°©e
 = 
ssi_¥ìquÆ_°©e
;

1233 
°©e
 = 
ssi_¥evÆue_°©e
;

1237 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1239 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1240 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1242 &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1246 i‡(
˘x
->
∑øm
->
key
.
Àn
 =
NGX_HTTP_SSI_PARAM_LEN
) {

1247 
°©e
 = 
ssi_îr‹_°©e
;

1248 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1251 &
˘x
->
∑øm
->
key
, 
ch
, &˘x->
comm™d
);

1255 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1260 
ssi_¥ìquÆ_°©e
:

1261 
ch
) {

1263 
CR
:

1264 
LF
:

1269 
°©e
 = 
ssi_¥evÆue_°©e
;

1273 i‡(
ch
 == '-') {

1274 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1276 
°©e
 = 
ssi_îr‹_°©e
;

1279 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1282 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1288 
ssi_¥evÆue_°©e
:

1289 
ch
) {

1291 
CR
:

1292 
LF
:

1297 
°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1301 
°©e
 = 
ssi_quŸed_vÆue_°©e
;

1305 i‡(
ch
 == '-') {

1306 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1308 
°©e
 = 
ssi_îr‹_°©e
;

1311 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1314 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1320 
ssi_doubÀ_quŸed_vÆue_°©e
:

1321 
ch
) {

1323 
°©e
 = 
ssi_po°∑øm_°©e
;

1327 
˘x
->
ßved_°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1328 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1333 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1334 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1337 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1338 &
˘x
->
comm™d
);

1339 
°©e
 = 
ssi_îr‹_°©e
;

1343 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1348 
ssi_quŸed_vÆue_°©e
:

1349 
ch
) {

1351 
°©e
 = 
ssi_po°∑øm_°©e
;

1355 
˘x
->
ßved_°©e
 = 
ssi_quŸed_vÆue_°©e
;

1356 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1361 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1362 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1365 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1366 &
˘x
->
comm™d
);

1367 
°©e
 = 
ssi_îr‹_°©e
;

1371 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1376 
ssi_quŸed_symbﬁ_°©e
:

1377 
°©e
 = 
˘x
->
ßved_°©e
;

1379 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1380 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1383 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1384 &
˘x
->
comm™d
);

1385 
°©e
 = 
ssi_îr‹_°©e
;

1389 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1393 
ssi_po°∑øm_°©e
:

1395 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 + 1 < ctx->
vÆue_Àn
 / 2) {

1396 
vÆue
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
∑øm
->vÆue.
Àn
 + 1);

1397 i‡(
vÆue
 =
NULL
) {

1398  
NGX_ERROR
;

1401 
	`ngx_mem˝y
(
vÆue
, 
˘x
->
∑øm
->vÆue.
d©a
,

1402 
˘x
->
∑øm
->
vÆue
.
Àn
);

1404 
˘x
->
vÆue_buf
 = ctx->
∑øm
->
vÆue
.
d©a
;

1405 
˘x
->
∑øm
->
vÆue
.
d©a
 = value;

1408 
˘x
->
vÆue_buf
 = 
NULL
;

1411 
ch
) {

1413 
CR
:

1414 
LF
:

1416 
°©e
 = 
ssi_¥ï¨am_°©e
;

1420 
°©e
 = 
ssi_commít_íd0_°©e
;

1424 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1427 
ch
, &
˘x
->
∑øm
->
vÆue
, &˘x->∑øm->
key
,

1428 &
˘x
->
comm™d
);

1429 
°©e
 = 
ssi_îr‹_°©e
;

1435 
ssi_commít_íd0_°©e
:

1436 
ch
) {

1438 
°©e
 = 
ssi_commít_íd1_°©e
;

1442 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1444 
ch
, &
˘x
->
comm™d
);

1445 
°©e
 = 
ssi_îr‹_°©e
;

1451 
ssi_commít_íd1_°©e
:

1452 
ch
) {

1454 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1455 
˘x
->
pos
 = 
p
 + 1;

1456 
˘x
->
looked
 =Üooked;

1457 
˘x
->
c›y_íd
 = copy_end;

1459 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1460 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1463  
NGX_OK
;

1466 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1468 
ch
, &
˘x
->
comm™d
);

1469 
°©e
 = 
ssi_îr‹_°©e
;

1475 
ssi_îr‹_°©e
:

1476 
ch
) {

1478 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1487 
ssi_îr‹_íd0_°©e
:

1488 
ch
) {

1490 
°©e
 = 
ssi_îr‹_íd1_°©e
;

1494 
°©e
 = 
ssi_îr‹_°©e
;

1500 
ssi_îr‹_íd1_°©e
:

1501 
ch
) {

1503 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1504 
˘x
->
pos
 = 
p
 + 1;

1505 
˘x
->
looked
 =Üooked;

1506 
˘x
->
c›y_íd
 = copy_end;

1508 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1509 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1512  
NGX_HTTP_SSI_ERROR
;

1515 
°©e
 = 
ssi_îr‹_°©e
;

1523 
˘x
->
°©e
 = state;

1524 
˘x
->
pos
 = 
p
;

1525 
˘x
->
looked
 =Üooked;

1527 
˘x
->
c›y_íd
 = (
°©e
 =
ssi_°¨t_°©e
Ë? 
p
 : copy_end;

1529 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

1530 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1533  
NGX_AGAIN
;

1534 
	}
}

1537 
ngx_°r_t
 *

1538 
	$ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

1539 
ngx_uöt_t
 
key
)

1541 
ngx_uöt_t
 
i
;

1542 
ngx_li°_∑π_t
 *
∑π
;

1543 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1544 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1546 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1548 #i‡(
NGX_PCRE
)

1550 
ngx_°r_t
 *
vÆue
;

1552 i‡(
key
 >= '0' && key <= '9') {

1553 
i
 = 
key
 - '0';

1555 i‡(
i
 < 
˘x
->
nˇ±uªs
) {

1556 
vÆue
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_°r_t
));

1557 i‡(
vÆue
 =
NULL
) {

1558  
NULL
;

1561 
i
 *= 2;

1563 
vÆue
->
d©a
 = 
˘x
->
ˇ±uªs_d©a
 + ctx->
ˇ±uªs
[
i
];

1564 
vÆue
->
Àn
 = 
˘x
->
ˇ±uªs
[
i
 + 1] - ctx->captures[i];

1566  
vÆue
;

1572 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1573  
NULL
;

1576 
∑π
 = &
˘x
->
v¨übÀs
->part;

1577 
v¨
 = 
∑π
->
ñts
;

1579 
i
 = 0; ; i++) {

1581 i‡(
i
 >
∑π
->
√…s
) {

1582 i‡(
∑π
->
√xt
 =
NULL
) {

1586 
∑π
 =Ö¨t->
√xt
;

1587 
v¨
 = 
∑π
->
ñts
;

1588 
i
 = 0;

1591 i‡(
«me
->
Àn
 !
v¨
[
i
].name.len) {

1595 i‡(
key
 !
v¨
[
i
].key) {

1599 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
v¨
[
i
].«me.d©a,Çame->
Àn
) == 0) {

1600  &
v¨
[
i
].
vÆue
;

1604  
NULL
;

1605 
	}
}

1608 
ngx_öt_t


1609 
	$ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1610 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
)

1612 
u_ch¨
 
ch
, *
p
, **
vÆue
, *
d©a
, *
∑π_d©a
;

1613 
size_t
 *
size
, 
Àn
, 
¥efix
, 
∑π_Àn
;

1614 
ngx_°r_t
 
v¨
, *
vÆ
;

1615 
ngx_öt_t
 
key
;

1616 
ngx_uöt_t
 
i
, 
n
, 
bøckë
, 
quŸed
;

1617 
ngx_¨øy_t
 
Àngths
, 
vÆues
;

1618 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1620 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ãxt
);

1622 i‡(
n
 == 0) {

1624 
d©a
 = 
ãxt
->data;

1625 
p
 = 
d©a
;

1627 i‡((
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
Ë&& 
ãxt
->
d©a
[0] != '/') {

1629 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1630 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1635 i‡(
¥efix
) {

1636 
Àn
 = 
¥efix
 + 
ãxt
->len;

1638 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1639 i‡(
d©a
 =
NULL
) {

1640  
NGX_ERROR
;

1643 
p
 = 
	`ngx_c›y
(
d©a
, 
r
->
uri
.d©a, 
¥efix
);

1647 
quŸed
 = 0;

1649 
i
 = 0; i < 
ãxt
->
Àn
; i++) {

1650 
ch
 = 
ãxt
->
d©a
[
i
];

1652 i‡(!
quŸed
) {

1654 i‡(
ch
 == '\\') {

1655 
quŸed
 = 1;

1660 
quŸed
 = 0;

1662 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1663 *
p
++ = '\\';

1667 *
p
++ = 
ch
;

1670 
ãxt
->
Àn
 = 
p
 - 
d©a
;

1671 
ãxt
->
d©a
 = data;

1673  
NGX_OK
;

1676 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
r
->
poﬁ
, 8, (
size_t
 *)Ë!
NGX_OK
) {

1677  
NGX_ERROR
;

1680 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
r
->
poﬁ
, 8, (
u_ch¨
 *)Ë!
NGX_OK
) {

1681  
NGX_ERROR
;

1684 
Àn
 = 0;

1685 
i
 = 0;

1687 
i
 < 
ãxt
->
Àn
) {

1689 i‡(
ãxt
->
d©a
[
i
] == '$') {

1691 
v¨
.
Àn
 = 0;

1693 i‡(++
i
 =
ãxt
->
Àn
) {

1694 
övÆid_v¨übÀ
;

1697 i‡(
ãxt
->
d©a
[
i
] == '{') {

1698 
bøckë
 = 1;

1700 i‡(++
i
 =
ãxt
->
Àn
) {

1701 
övÆid_v¨übÀ
;

1704 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1707 
bøckë
 = 0;

1708 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1711  ; 
i
 < 
ãxt
->
Àn
; i++, 
v¨
.len++) {

1712 
ch
 = 
ãxt
->
d©a
[
i
];

1714 i‡(
ch
 ='}' && 
bøckë
) {

1715 
i
++;

1716 
bøckë
 = 0;

1720 i‡((
ch
 >= 'A' && ch <= 'Z')

1721 || (
ch
 >= 'a' && ch <= 'z')

1722 || (
ch
 >= '0' && ch <= '9')

1723 || 
ch
 == '_')

1731 i‡(
bøckë
) {

1732 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1734 "v¨übÀ i†missög", &
v¨
);

1735  
NGX_HTTP_SSI_ERROR
;

1738 i‡(
v¨
.
Àn
 == 0) {

1739 
övÆid_v¨übÀ
;

1742 
key
 = 
	`ngx_hash_°æow
(
v¨
.
d©a
, v¨.d©a, v¨.
Àn
);

1744 
vÆ
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1746 i‡(
vÆ
 =
NULL
) {

1747 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1748 i‡(
vv
 =
NULL
) {

1749  
NGX_ERROR
;

1752 i‡(
vv
->
nŸ_found
) {

1756 
∑π_d©a
 = 
vv
->
d©a
;

1757 
∑π_Àn
 = 
vv
->
Àn
;

1760 
∑π_d©a
 = 
vÆ
->
d©a
;

1761 
∑π_Àn
 = 
vÆ
->
Àn
;

1765 
∑π_d©a
 = &
ãxt
->
d©a
[
i
];

1766 
quŸed
 = 0;

1768 
p
 = 
∑π_d©a
; 
i
 < 
ãxt
->
Àn
; i++) {

1769 
ch
 = 
ãxt
->
d©a
[
i
];

1771 i‡(!
quŸed
) {

1773 i‡(
ch
 == '\\') {

1774 
quŸed
 = 1;

1778 i‡(
ch
 == '$') {

1783 
quŸed
 = 0;

1785 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1786 *
p
++ = '\\';

1790 *
p
++ = 
ch
;

1793 
∑π_Àn
 = 
p
 - 
∑π_d©a
;

1796 
Àn
 +
∑π_Àn
;

1798 
size
 = 
	`ngx_¨øy_push
(&
Àngths
);

1799 i‡(
size
 =
NULL
) {

1800  
NGX_ERROR
;

1803 *
size
 = 
∑π_Àn
;

1805 
vÆue
 = 
	`ngx_¨øy_push
(&
vÆues
);

1806 i‡(
vÆue
 =
NULL
) {

1807  
NGX_ERROR
;

1810 *
vÆue
 = 
∑π_d©a
;

1813 
¥efix
 = 0;

1815 
size
 = 
Àngths
.
ñts
;

1816 
vÆue
 = 
vÆues
.
ñts
;

1818 i‡(
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
) {

1819 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1820 i‡(
size
[
i
] != 0) {

1821 i‡(*
vÆue
[
i
] != '/') {

1822 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1823 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1824 
Àn
 +
¥efix
;

1835 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
 + ((
Êags
 & 
NGX_HTTP_SSI_ADD_ZERO
) ? 1 : 0));

1836 i‡(
p
 =
NULL
) {

1837  
NGX_ERROR
;

1840 
ãxt
->
Àn
 =Üen;

1841 
ãxt
->
d©a
 = 
p
;

1843 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
, 
¥efix
);

1845 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1846 
p
 = 
	`ngx_c›y
’, 
vÆue
[
i
], 
size
[i]);

1849  
NGX_OK
;

1851 
övÆid_v¨übÀ
:

1853 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1854 "övÆid v¨übÀÇamêö \"%V\"", 
ãxt
);

1856  
NGX_HTTP_SSI_ERROR
;

1857 
	}
}

1860 
ngx_öt_t


1861 
	$ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑âîn
,

1862 
ngx_°r_t
 *
°r
)

1864 #i‡(
NGX_PCRE
)

1865 
rc
, *
ˇ±uªs
;

1866 
u_ch¨
 *
p
, 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1867 
size_t
 
size
;

1868 
ngx_öt_t
 
key
;

1869 
ngx_°r_t
 *
vv
, 
«me
, 
vÆue
;

1870 
ngx_uöt_t
 
i
, 
n
;

1871 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1872 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1873 
ngx_ªgex_compûe_t
 
rgc
;

1875 
	`ngx_memzîo
(&
rgc
, (
ngx_ªgex_compûe_t
));

1877 
rgc
.
∑âîn
 = *pattern;

1878 
rgc
.
poﬁ
 = 
r
->pool;

1879 
rgc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

1880 
rgc
.
îr
.
d©a
 = 
îr°r
;

1882 i‡(
	`ngx_ªgex_compûe
(&
rgc
Ë!
NGX_OK
) {

1883 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "%V", &
rgc
.
îr
);

1884  
NGX_HTTP_SSI_ERROR
;

1887 
n
 = (
rgc
.
ˇ±uªs
 + 1) * 3;

1889 
ˇ±uªs
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * ());

1890 i‡(
ˇ±uªs
 =
NULL
) {

1891  
NGX_ERROR
;

1894 
rc
 = 
	`ngx_ªgex_exec
(
rgc
.
ªgex
, 
°r
, 
ˇ±uªs
, 
n
);

1896 i‡(
rc
 < 
NGX_REGEX_NO_MATCHED
) {

1897 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1898 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

1899 
rc
, 
°r
, 
∑âîn
);

1900  
NGX_HTTP_SSI_ERROR
;

1903 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1904  
NGX_DECLINED
;

1907 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1909 
˘x
->
nˇ±uªs
 = 
rc
;

1910 
˘x
->
ˇ±uªs
 = captures;

1911 
˘x
->
ˇ±uªs_d©a
 = 
°r
->
d©a
;

1913 i‡(
rgc
.
«med_ˇ±uªs
 > 0) {

1915 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1916 
˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

1917 (
ngx_hâp_ssi_v¨_t
));

1918 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1919  
NGX_ERROR
;

1923 
size
 = 
rgc
.
«me_size
;

1924 
p
 = 
rgc
.
«mes
;

1926 
i
 = 0; i < (
ngx_uöt_t
Ë
rgc
.
«med_ˇ±uªs
; i++, 
p
 +
size
) {

1928 
«me
.
d©a
 = &
p
[2];

1929 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1931 
n
 = 2 * ((
p
[0] << 8) +Ö[1]);

1933 
vÆue
.
d©a
 = &
°r
->d©a[
ˇ±uªs
[
n
]];

1934 
vÆue
.
Àn
 = 
ˇ±uªs
[
n
 + 1] - captures[n];

1936 
key
 = 
	`ngx_hash_°æow
(
«me
.
d©a
,Çame.d©a,Çame.
Àn
);

1938 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
«me
, 
key
);

1940 i‡(
vv
) {

1941 *
vv
 = 
vÆue
;

1945 
v¨
 = 
	`ngx_li°_push
(
˘x
->
v¨übÀs
);

1946 i‡(
v¨
 =
NULL
) {

1947  
NGX_ERROR
;

1950 
v¨
->
«me
 =Çame;

1951 
v¨
->
key
 = key;

1952 
v¨
->
vÆue
 = value;

1956  
NGX_OK
;

1960 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1962 
∑âîn
);

1963  
NGX_HTTP_SSI_ERROR
;

1966 
	}
}

1969 
ngx_öt_t


1970 
	$ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1971 
ngx_°r_t
 **
∑øms
)

1973 
u_ch¨
 *
d°
, *
§c
;

1974 
size_t
 
Àn
;

1975 
ngx_öt_t
 
rc
, 
key
;

1976 
ngx_°r_t
 *
uri
, *
fûe
, *
waô
, *
£t
, *
°ub
, 
¨gs
;

1977 
ngx_buf_t
 *
b
;

1978 
ngx_uöt_t
 
Êags
, 
i
;

1979 
ngx_chaö_t
 *
˛
, *
é
, **
Œ
, *
out
;

1980 
ngx_hâp_ªque°_t
 *
§
;

1981 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1982 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

1983 
ngx_hâp_ssi_block_t
 *
bl
;

1984 
ngx_hâp_po°_subªque°_t
 *
p§
;

1986 
uri
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_VIRTUAL
];

1987 
fûe
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_FILE
];

1988 
waô
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_WAIT
];

1989 
£t
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_SET
];

1990 
°ub
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_STUB
];

1992 i‡(
uri
 && 
fûe
) {

1993 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1995 
uri
, 
fûe
);

1996  
NGX_HTTP_SSI_ERROR
;

1999 i‡(
uri
 =
NULL
 && 
fûe
 == NULL) {

2000 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2002  
NGX_HTTP_SSI_ERROR
;

2005 i‡(
£t
 && 
°ub
) {

2006 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2009  
NGX_HTTP_SSI_ERROR
;

2012 i‡(
waô
) {

2013 i‡(
uri
 =
NULL
) {

2014 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2015 "\"waô\" c™nŸ bêu£d wôh fûe=\"%V\"", 
fûe
);

2016  
NGX_HTTP_SSI_ERROR
;

2019 i‡(
waô
->
Àn
 == 2

2020 && 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "no", 2) == 0)

2022 
waô
 = 
NULL
;

2024 } i‡(
waô
->
Àn
 != 3

2025 || 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "yes", 3) != 0)

2027 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2029 
waô
);

2030  
NGX_HTTP_SSI_ERROR
;

2034 i‡(
uri
 =
NULL
) {

2035 
uri
 = 
fûe
;

2036 
waô
 = (
ngx_°r_t
 *) -1;

2039 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
uri
, 
NGX_HTTP_SSI_ADD_PREFIX
);

2041 i‡(
rc
 !
NGX_OK
) {

2042  
rc
;

2045 
d°
 = 
uri
->
d©a
;

2046 
§c
 = 
uri
->
d©a
;

2048 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
uri
->
Àn
, 
NGX_UNESCAPE_URI
);

2050 
Àn
 = (
uri
->
d©a
 + uri->ÀnË- 
§c
;

2051 i‡(
Àn
) {

2052 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
Àn
);

2055 
uri
->
Àn
 = 
d°
 - uri->
d©a
;

2057 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2058 "ssòö˛ude: \"%V\"", 
uri
);

2060 
	`ngx_°r_nuŒ
(&
¨gs
);

2061 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2063 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2064  
NGX_HTTP_SSI_ERROR
;

2067 
p§
 = 
NULL
;

2069 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2071 i‡(
°ub
) {

2072 i‡(
m˘x
->
blocks
) {

2073 
bl
 = 
m˘x
->
blocks
->
ñts
;

2074 
i
 = 0; i < 
m˘x
->
blocks
->
√…s
; i++) {

2075 i‡(
°ub
->
Àn
 =
bl
[
i
].
«me
.len

2076 && 
	`ngx_°∫cmp
(
°ub
->
d©a
, 
bl
[
i
].
«me
.d©a, stub->
Àn
) == 0)

2078 
found
;

2083 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2084 "\"°ub\"=\"%V\" f‹ \"ö˛ude\"ÇŸ found", 
°ub
);

2085  
NGX_HTTP_SSI_ERROR
;

2087 
found
:

2089 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2090 i‡(
p§
 =
NULL
) {

2091  
NGX_ERROR
;

2094 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_°ub_ouçut
;

2096 i‡(
bl
[
i
].
cou¡
++) {

2098 
out
 = 
NULL
;

2099 
Œ
 = &
out
;

2101 
é
 = 
bl
[
i
].
bufs
;Ål;Å»é->
√xt
) {

2103 i‡(
˘x
->
‰ì
) {

2104 
˛
 = 
˘x
->
‰ì
;

2105 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

2106 
b
 = 
˛
->
buf
;

2109 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

2110 i‡(
b
 =
NULL
) {

2111  
NGX_ERROR
;

2114 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2115 i‡(
˛
 =
NULL
) {

2116  
NGX_ERROR
;

2119 
˛
->
buf
 = 
b
;

2122 
	`ngx_mem˝y
(
b
, 
é
->
buf
, (
ngx_buf_t
));

2124 
b
->
pos
 = b->
°¨t
;

2126 *
Œ
 = 
˛
;

2127 
˛
->
√xt
 = 
NULL
;

2128 
Œ
 = &
˛
->
√xt
;

2131 
p§
->
d©a
 = 
out
;

2134 
p§
->
d©a
 = 
bl
[
i
].
bufs
;

2138 i‡(
waô
) {

2139 
Êags
 |
NGX_HTTP_SUBREQUEST_WAITED
;

2142 i‡(
£t
) {

2143 
key
 = 
	`ngx_hash_°æow
(
£t
->
d©a
, së->d©a, së->
Àn
);

2145 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2146 i‡(
p§
 =
NULL
) {

2147  
NGX_ERROR
;

2150 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_£t_v¨übÀ
;

2151 
p§
->
d©a
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
£t
, 
key
);

2153 i‡(
p§
->
d©a
 =
NULL
) {

2155 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2156 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2157 (
ngx_hâp_ssi_v¨_t
));

2158 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2159  
NGX_ERROR
;

2163 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2164 i‡(
v¨
 =
NULL
) {

2165  
NGX_ERROR
;

2168 
v¨
->
«me
 = *
£t
;

2169 
v¨
->
key
 = key;

2170 
v¨
->
vÆue
 = 
ngx_hâp_ssi_nuŒ_°rög
;

2171 
p§
->
d©a
 = &
v¨
->
vÆue
;

2174 
Êags
 |
NGX_HTTP_SUBREQUEST_IN_MEMORY
|
NGX_HTTP_SUBREQUEST_WAITED
;

2177 i‡(
	`ngx_hâp_subªque°
(
r
, 
uri
, &
¨gs
, &
§
, 
p§
, 
Êags
Ë!
NGX_OK
) {

2178  
NGX_HTTP_SSI_ERROR
;

2181 i‡(
waô
 =
NULL
 && 
£t
 == NULL) {

2182  
NGX_OK
;

2185 i‡(
˘x
->
waô
 =
NULL
) {

2186 
˘x
->
waô
 = 
§
;

2188  
NGX_AGAIN
;

2191 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2195  
NGX_OK
;

2196 
	}
}

2199 
ngx_öt_t


2200 
	$ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2202 
ngx_chaö_t
 *
out
;

2204 i‡(
rc
 =
NGX_ERROR
 || 
r
->
c⁄√˘i⁄
->
îr‹
 ||Ñ->
ªque°_ouçut
) {

2205  
rc
;

2208 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2209 "ssò°ub ouçut: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2211 
out
 = 
d©a
;

2213 i‡(!
r
->
hódî_£¡
) {

2214 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =

2215 
r
->
∑ª¡
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

2216 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 =Ñ->
∑ª¡
->headers_out.content_type;

2218 i‡(
	`ngx_hâp_£nd_hódî
(
r
Ë=
NGX_ERROR
) {

2219  
NGX_ERROR
;

2223  
	`ngx_hâp_ouçut_fûãr
(
r
, 
out
);

2224 
	}
}

2227 
ngx_öt_t


2228 
	$ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2230 
ngx_°r_t
 *
vÆue
 = 
d©a
;

2232 i‡(
r
->
up°ªam
) {

2233 
vÆue
->
Àn
 = 
r
->
up°ªam
->
buf„r
.
œ°
 -Ñ->up°ªam->buf„r.
pos
;

2234 
vÆue
->
d©a
 = 
r
->
up°ªam
->
buf„r
.
pos
;

2237  
rc
;

2238 
	}
}

2241 
ngx_öt_t


2242 
	$ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2243 
ngx_°r_t
 **
∑øms
)

2245 
u_ch¨
 *
p
;

2246 
uöçå_t
 
Àn
;

2247 
ngx_öt_t
 
key
;

2248 
ngx_buf_t
 *
b
;

2249 
ngx_°r_t
 *
v¨
, *
vÆue
, *
íc
, 
ãxt
;

2250 
ngx_chaö_t
 *
˛
;

2251 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2253 
v¨
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_VAR
];

2255 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2256 "ssòechÿ\"%V\"", 
v¨
);

2258 
key
 = 
	`ngx_hash_°æow
(
v¨
->
d©a
, v¨->d©a, v¨->
Àn
);

2260 
vÆue
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2262 i‡(
vÆue
 =
NULL
) {

2263 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2265 i‡(
vv
 =
NULL
) {

2266  
NGX_HTTP_SSI_ERROR
;

2269 i‡(!
vv
->
nŸ_found
) {

2270 
ãxt
.
d©a
 = 
vv
->data;

2271 
ãxt
.
Àn
 = 
vv
->len;

2272 
vÆue
 = &
ãxt
;

2276 i‡(
vÆue
 =
NULL
) {

2277 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_DEFAULT
];

2279 i‡(
vÆue
 =
NULL
) {

2280 
vÆue
 = &
ngx_hâp_ssi_n⁄e
;

2282 } i‡(
vÆue
->
Àn
 == 0) {

2283  
NGX_OK
;

2287 i‡(
vÆue
->
Àn
 == 0) {

2288  
NGX_OK
;

2292 
íc
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_ENCODING
];

2294 i‡(
íc
) {

2295 i‡(
íc
->
Àn
 =4 && 
	`ngx_°∫cmp
”nc->
d©a
, "none", 4) == 0) {

2297 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_NO_ENCODING
;

2299 } i‡(
íc
->
Àn
 =3 && 
	`ngx_°∫cmp
”nc->
d©a
, "url", 3) == 0) {

2301 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_URL_ENCODING
;

2303 } i‡(
íc
->
Àn
 =6 && 
	`ngx_°∫cmp
”nc->
d©a
, "entity", 6) == 0) {

2305 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

2308 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2310 
íc
);

2314 
p
 = 
vÆue
->
d©a
;

2316 
˘x
->
ícodög
) {

2318 
NGX_HTTP_SSI_URL_ENCODING
:

2319 
Àn
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vÆue
->
d©a
, value->len,

2320 
NGX_ESCAPE_HTML
);

2322 i‡(
Àn
) {

2323 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2324 i‡(
p
 =
NULL
) {

2325  
NGX_HTTP_SSI_ERROR
;

2328 (Ë
	`ngx_esˇ≥_uri
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
, 
NGX_ESCAPE_HTML
);

2331 
Àn
 +
vÆue
->len;

2334 
NGX_HTTP_SSI_ENTITY_ENCODING
:

2335 
Àn
 = 
	`ngx_esˇ≥_html
(
NULL
, 
vÆue
->
d©a
, value->len);

2337 i‡(
Àn
) {

2338 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2339 i‡(
p
 =
NULL
) {

2340  
NGX_HTTP_SSI_ERROR
;

2343 (Ë
	`ngx_esˇ≥_html
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

2346 
Àn
 +
vÆue
->len;

2350 
Àn
 = 
vÆue
->len;

2354 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2355 i‡(
b
 =
NULL
) {

2356  
NGX_HTTP_SSI_ERROR
;

2359 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2360 i‡(
˛
 =
NULL
) {

2361  
NGX_HTTP_SSI_ERROR
;

2364 
b
->
mem‹y
 = 1;

2365 
b
->
pos
 = 
p
;

2366 
b
->
œ°
 = 
p
 + 
Àn
;

2368 
˛
->
buf
 = 
b
;

2369 
˛
->
√xt
 = 
NULL
;

2370 *
˘x
->
œ°_out
 = 
˛
;

2371 
˘x
->
œ°_out
 = &
˛
->
√xt
;

2373  
NGX_OK
;

2374 
	}
}

2377 
ngx_öt_t


2378 
	$ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2379 
ngx_°r_t
 **
∑øms
)

2381 
ngx_°r_t
 *
vÆue
;

2383 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_TIMEFMT
];

2385 i‡(
vÆue
) {

2386 
˘x
->
timefmt
.
Àn
 = 
vÆue
->len;

2387 
˘x
->
timefmt
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 + 1);

2388 i‡(
˘x
->
timefmt
.
d©a
 =
NULL
) {

2389  
NGX_HTTP_SSI_ERROR
;

2392 
	`ngx_˝y°∫
(
˘x
->
timefmt
.
d©a
, 
vÆue
->d©a, vÆue->
Àn
 + 1);

2395 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_ERRMSG
];

2397 i‡(
vÆue
) {

2398 
˘x
->
îrmsg
 = *
vÆue
;

2401  
NGX_OK
;

2402 
	}
}

2405 
ngx_öt_t


2406 
	$ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2407 
ngx_°r_t
 **
∑øms
)

2409 
ngx_öt_t
 
key
, 
rc
;

2410 
ngx_°r_t
 *
«me
, *
vÆue
, *
vv
;

2411 
ngx_hâp_ssi_v¨_t
 *
v¨
;

2412 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2414 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2416 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2417 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2418 (
ngx_hâp_ssi_v¨_t
));

2419 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2420  
NGX_ERROR
;

2424 
«me
 = 
∑øms
[
NGX_HTTP_SSI_SET_VAR
];

2425 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_SET_VALUE
];

2427 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2428 "ssò£à\"%V\" \"%V\"", 
«me
, 
vÆue
);

2430 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
vÆue
, 0);

2432 i‡(
rc
 !
NGX_OK
) {

2433  
rc
;

2436 
key
 = 
	`ngx_hash_°æow
(
«me
->
d©a
,Çame->d©a,Çame->
Àn
);

2438 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
«me
, 
key
);

2440 i‡(
vv
) {

2441 *
vv
 = *
vÆue
;

2442  
NGX_OK
;

2445 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2446 i‡(
v¨
 =
NULL
) {

2447  
NGX_ERROR
;

2450 
v¨
->
«me
 = *name;

2451 
v¨
->
key
 = key;

2452 
v¨
->
vÆue
 = *value;

2454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2455 "£t: \"%V\"=\"%V\"", 
«me
, 
vÆue
);

2457  
NGX_OK
;

2458 
	}
}

2461 
ngx_öt_t


2462 
	$ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2463 
ngx_°r_t
 **
∑øms
)

2465 
u_ch¨
 *
p
, *
œ°
;

2466 
ngx_°r_t
 *
ex¥
, 
À·
, 
right
;

2467 
ngx_öt_t
 
rc
;

2468 
ngx_uöt_t
 
√g©ive
, 
n‹egex
, 
Êags
;

2470 i‡(
˘x
->
comm™d
.
Àn
 == 2) {

2471 i‡(
˘x
->
c⁄dôi⁄Æ
) {

2472 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2474  
NGX_HTTP_SSI_ERROR
;

2478 i‡(
˘x
->
ouçut_cho£n
) {

2479 
˘x
->
ouçut
 = 0;

2480  
NGX_OK
;

2483 
ex¥
 = 
∑øms
[
NGX_HTTP_SSI_IF_EXPR
];

2485 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2486 "ssòi‡ex¥=\"%V\"", 
ex¥
);

2488 
À·
.
d©a
 = 
ex¥
->data;

2489 
œ°
 = 
ex¥
->
d©a
 +Éx¥->
Àn
;

2491 
p
 = 
À·
.
d©a
;Ö < 
œ°
;Ö++) {

2492 i‡(*
p
 >= 'A' && *p <= 'Z') {

2493 *
p
 |= 0x20;

2497 i‡((*
p
 >= 'a' && *p <= 'z')

2498 || (*
p
 >= '0' && *p <= '9')

2499 || *
p
 == '$' || *p == '{' || *p == '}' || *p == '_'

2500 || *
p
 == '"' || *p == '\'')

2508 
À·
.
Àn
 = 
p
 -Üe·.
d©a
;

2510 
p
 < 
œ°
 && *p == ' ') {

2511 
p
++;

2514 
Êags
 = 0;

2516 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2517 "À·: \"%V\"", &
À·
);

2519 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
À·
, 
Êags
);

2521 i‡(
rc
 !
NGX_OK
) {

2522  
rc
;

2525 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2526 "evÆuãdÜe·: \"%V\"", &
À·
);

2528 i‡(
p
 =
œ°
) {

2529 i‡(
À·
.
Àn
) {

2530 
˘x
->
ouçut
 = 1;

2531 
˘x
->
ouçut_cho£n
 = 1;

2534 
˘x
->
ouçut
 = 0;

2537 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2539  
NGX_OK
;

2542 i‡(
p
 < 
œ°
 && *p == '=') {

2543 
√g©ive
 = 0;

2544 
p
++;

2546 } i‡(
p
 + 1 < 
œ°
 && *p == '!' && *(p + 1) == '=') {

2547 
√g©ive
 = 1;

2548 
p
 += 2;

2551 
övÆid_ex¥essi⁄
;

2554 
p
 < 
œ°
 && *p == ' ') {

2555 
p
++;

2558 i‡(
p
 < 
œ°
 - 1 && *p == '/') {

2559 i‡(*(
œ°
 - 1) != '/') {

2560 
övÆid_ex¥essi⁄
;

2563 
n‹egex
 = 0;

2564 
Êags
 = 
NGX_HTTP_SSI_ADD_ZERO
;

2565 
œ°
--;

2566 
p
++;

2569 
n‹egex
 = 1;

2570 
Êags
 = 0;

2572 i‡(
p
 < 
œ°
 - 1 &&Ö[0] == '\\' &&Ö[1] == '/') {

2573 
p
++;

2577 
right
.
Àn
 = 
œ°
 - 
p
;

2578 
right
.
d©a
 = 
p
;

2580 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2581 "right: \"%V\"", &
right
);

2583 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
right
, 
Êags
);

2585 i‡(
rc
 !
NGX_OK
) {

2586  
rc
;

2589 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2590 "evÆuãdÑight: \"%V\"", &
right
);

2592 i‡(
n‹egex
) {

2593 i‡(
À·
.
Àn
 !
right
.len) {

2594 
rc
 = -1;

2597 
rc
 = 
	`ngx_°∫cmp
(
À·
.
d©a
, 
right
.d©a,Ñight.
Àn
);

2601 
right
.
d©a
[right.
Àn
] = '\0';

2603 
rc
 = 
	`ngx_hâp_ssi_ªgex_m©ch
(
r
, &
right
, &
À·
);

2605 i‡(
rc
 =
NGX_OK
) {

2606 
rc
 = 0;

2607 } i‡(
rc
 =
NGX_DECLINED
) {

2608 
rc
 = -1;

2610  
rc
;

2614 i‡((
rc
 =0 && !
√g©ive
) || (rc != 0 &&Çegative)) {

2615 
˘x
->
ouçut
 = 1;

2616 
˘x
->
ouçut_cho£n
 = 1;

2619 
˘x
->
ouçut
 = 0;

2622 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2624  
NGX_OK
;

2626 
övÆid_ex¥essi⁄
:

2628 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2629 "övÆidÉx¥essi⁄ i¿\"%V\"", 
ex¥
);

2631  
NGX_HTTP_SSI_ERROR
;

2632 
	}
}

2635 
ngx_öt_t


2636 
	$ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2637 
ngx_°r_t
 **
∑øms
)

2639 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2642 i‡(
˘x
->
ouçut_cho£n
) {

2643 
˘x
->
ouçut
 = 0;

2645 
˘x
->
ouçut
 = 1;

2648 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_ELSE
;

2650  
NGX_OK
;

2651 
	}
}

2654 
ngx_öt_t


2655 
	$ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2656 
ngx_°r_t
 **
∑øms
)

2658 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2661 
˘x
->
ouçut
 = 1;

2662 
˘x
->
ouçut_cho£n
 = 0;

2663 
˘x
->
c⁄dôi⁄Æ
 = 0;

2665  
NGX_OK
;

2666 
	}
}

2669 
ngx_öt_t


2670 
	$ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2671 
ngx_°r_t
 **
∑øms
)

2673 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2674 
ngx_hâp_ssi_block_t
 *
bl
;

2676 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2679 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2681 i‡(
m˘x
->
blocks
 =
NULL
) {

2682 
m˘x
->
blocks
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 4,

2683 (
ngx_hâp_ssi_block_t
));

2684 i‡(
m˘x
->
blocks
 =
NULL
) {

2685  
NGX_HTTP_SSI_ERROR
;

2689 
bl
 = 
	`ngx_¨øy_push
(
m˘x
->
blocks
);

2690 i‡(
bl
 =
NULL
) {

2691  
NGX_HTTP_SSI_ERROR
;

2694 
bl
->
«me
 = *
∑øms
[
NGX_HTTP_SSI_BLOCK_NAME
];

2695 
bl
->
bufs
 = 
NULL
;

2696 
bl
->
cou¡
 = 0;

2698 
˘x
->
ouçut
 = 0;

2699 
˘x
->
block
 = 1;

2701  
NGX_OK
;

2702 
	}
}

2705 
ngx_öt_t


2706 
	$ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2707 
ngx_°r_t
 **
∑øms
)

2709 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2712 
˘x
->
ouçut
 = 1;

2713 
˘x
->
block
 = 0;

2715  
NGX_OK
;

2716 
	}
}

2719 
ngx_öt_t


2720 
	$ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2721 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
)

2723 
ngx_hâp_ssi_˘x_t
 *
˘x
;

2724 
ngx_time_t
 *
ç
;

2725 
tm
Åm;

2726 
buf
[
NGX_HTTP_SSI_DATE_LEN
];

2728 
v
->
vÆid
 = 1;

2729 
v
->
no_ˇchóbÀ
 = 0;

2730 
v
->
nŸ_found
 = 0;

2732 
ç
 = 
	`ngx_timeofday
();

2734 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2736 i‡(
˘x
 =
NULL


2737 || (
˘x
->
timefmt
.
Àn
 == ("%s") - 1

2738 && 
˘x
->
timefmt
.
d©a
[0] == '%' && ctx->timefmt.data[1] == 's'))

2740 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
);

2741 i‡(
v
->
d©a
 =
NULL
) {

2742  
NGX_ERROR
;

2745 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%T", 
ç
->
£c
) - v->data;

2747  
NGX_OK
;

2750 i‡(
gmt
) {

2751 
	`ngx_libc_gmtime
(
ç
->
£c
, &
tm
);

2753 
	`ngx_libc_loˇ…ime
(
ç
->
£c
, &
tm
);

2756 
v
->
Àn
 = 
	`°r·ime
(
buf
, 
NGX_HTTP_SSI_DATE_LEN
,

2757 (*Ë
˘x
->
timefmt
.
d©a
, &
tm
);

2758 i‡(
v
->
Àn
 == 0) {

2759  
NGX_ERROR
;

2762 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2763 i‡(
v
->
d©a
 =
NULL
) {

2764  
NGX_ERROR
;

2767 
	`ngx_mem˝y
(
v
->
d©a
, 
buf
, v->
Àn
);

2769  
NGX_OK
;

2770 
	}
}

2773 
ngx_öt_t


2774 
	$ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2776 
ngx_öt_t
 
rc
;

2777 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2778 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

2779 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2781 
v
 = 
ngx_hâp_ssi_v¨s
; v->
«me
.
Àn
; v++) {

2782 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2783 i‡(
v¨
 =
NULL
) {

2784  
NGX_ERROR
;

2787 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2788 
v¨
->
d©a
 = 
v
->data;

2791 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2793 
cmd
 = 
ngx_hâp_ssi_comm™ds
; cmd->
«me
.
Àn
; cmd++) {

2794 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
cmd
->
«me
, cmd,

2795 
NGX_HASH_READONLY_KEY
);

2797 i‡(
rc
 =
NGX_OK
) {

2801 i‡(
rc
 =
NGX_BUSY
) {

2802 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2803 "c⁄Êi˘ög SSI comm™d \"%V\"", &
cmd
->
«me
);

2806  
NGX_ERROR
;

2809  
NGX_OK
;

2810 
	}
}

2814 
	$ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2816 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2818 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_maö_c⁄f_t
));

2819 i‡(
smcf
 =
NULL
) {

2820  
NULL
;

2823 
smcf
->
comm™ds
.
poﬁ
 = 
cf
->pool;

2824 
smcf
->
comm™ds
.
ãmp_poﬁ
 = 
cf
->temp_pool;

2826 i‡(
	`ngx_hash_keys_¨øy_öô
(&
smcf
->
comm™ds
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

2827  
NULL
;

2830  
smcf
;

2831 
	}
}

2835 
	$ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

2837 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

2839 
ngx_hash_öô_t
 
hash
;

2841 
hash
.hash = &
smcf
->hash;

2842 
hash
.
key
 = 
ngx_hash_key
;

2843 
hash
.
max_size
 = 1024;

2844 
hash
.
buckë_size
 = 
ngx_ˇchñöe_size
;

2845 
hash
.
«me
 = "ssi_command_hash";

2846 
hash
.
poﬁ
 = 
cf
->pool;

2847 
hash
.
ãmp_poﬁ
 = 
NULL
;

2849 i‡(
	`ngx_hash_öô
(&
hash
, 
smcf
->
comm™ds
.
keys
.
ñts
,

2850 
smcf
->
comm™ds
.
keys
.
√…s
)

2851 !
NGX_OK
)

2853  
NGX_CONF_ERROR
;

2856  
NGX_CONF_OK
;

2857 
	}
}

2861 
	$ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2863 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

2865 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_loc_c⁄f_t
));

2866 i‡(
¶cf
 =
NULL
) {

2867  
NULL
;

2877 
¶cf
->
íabÀ
 = 
NGX_CONF_UNSET
;

2878 
¶cf
->
sûít_îr‹s
 = 
NGX_CONF_UNSET
;

2879 
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 = 
NGX_CONF_UNSET
;

2881 
¶cf
->
mö_fûe_chunk
 = 
NGX_CONF_UNSET_SIZE
;

2882 
¶cf
->
vÆue_Àn
 = 
NGX_CONF_UNSET_SIZE
;

2884  
¶cf
;

2885 
	}
}

2889 
	$ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2891 
ngx_hâp_ssi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2892 
ngx_hâp_ssi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2894 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

2895 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sûít_îr‹s
, 
¥ev
->silent_errors, 0);

2896 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_ªcy˛ed_buf„rs
,

2897 
¥ev
->
ign‹e_ªcy˛ed_buf„rs
, 0);

2899 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
mö_fûe_chunk
, 
¥ev
->min_file_chunk, 1024);

2900 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
vÆue_Àn
, 
¥ev
->value_len, 255);

2902 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

2903 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

2904 
ngx_hâp_html_deÁu…_ty≥s
)

2905 !
NGX_OK
)

2907  
NGX_CONF_ERROR
;

2910  
NGX_CONF_OK
;

2911 
	}
}

2914 
ngx_öt_t


2915 
	$ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

2917 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

2918 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ssi_hódî_fûãr
;

2920 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

2921 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ssi_body_fûãr
;

2923  
NGX_OK
;

2924 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.h

8 #i‚de‡
_NGX_HTTP_SSI_FILTER_H_INCLUDED_


9 
	#_NGX_HTTP_SSI_FILTER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_SSI_MAX_PARAMS
 16

	)

19 
	#NGX_HTTP_SSI_COMMAND_LEN
 32

	)

20 
	#NGX_HTTP_SSI_PARAM_LEN
 32

	)

21 
	#NGX_HTTP_SSI_PARAMS_N
 4

	)

24 
	#NGX_HTTP_SSI_COND_IF
 1

	)

25 
	#NGX_HTTP_SSI_COND_ELSE
 2

	)

28 
	#NGX_HTTP_SSI_NO_ENCODING
 0

	)

29 
	#NGX_HTTP_SSI_URL_ENCODING
 1

	)

30 
	#NGX_HTTP_SSI_ENTITY_ENCODING
 2

	)

34 
ngx_hash_t
 
	mhash
;

35 
ngx_hash_keys_¨øys_t
 
	mcomm™ds
;

36 } 
	tngx_hâp_ssi_maö_c⁄f_t
;

40 
ngx_buf_t
 *
	mbuf
;

42 
u_ch¨
 *
	mpos
;

43 
u_ch¨
 *
	mc›y_°¨t
;

44 
u_ch¨
 *
	mc›y_íd
;

46 
ngx_uöt_t
 
	mkey
;

47 
ngx_°r_t
 
	mcomm™d
;

48 
ngx_¨øy_t
 
	m∑øms
;

49 
ngx_èbÀ_ñt_t
 *
	m∑øm
;

50 
ngx_èbÀ_ñt_t
 
	m∑øms_¨øy
[
NGX_HTTP_SSI_PARAMS_N
];

52 
ngx_chaö_t
 *
	mö
;

53 
ngx_chaö_t
 *
	mout
;

54 
ngx_chaö_t
 **
	mœ°_out
;

55 
ngx_chaö_t
 *
	mbusy
;

56 
ngx_chaö_t
 *
	m‰ì
;

58 
ngx_uöt_t
 
	m°©e
;

59 
ngx_uöt_t
 
	mßved_°©e
;

60 
size_t
 
	mßved
;

61 
size_t
 
	mlooked
;

63 
size_t
 
	mvÆue_Àn
;

65 
ngx_li°_t
 *
	mv¨übÀs
;

66 
ngx_¨øy_t
 *
	mblocks
;

68 #i‡(
NGX_PCRE
)

69 
ngx_uöt_t
 
	mnˇ±uªs
;

70 *
	mˇ±uªs
;

71 
u_ch¨
 *
	mˇ±uªs_d©a
;

74 
	mc⁄dôi⁄Æ
:2;

75 
	mícodög
:2;

76 
	mblock
:1;

77 
	mouçut
:1;

78 
	mouçut_cho£n
:1;

80 
ngx_hâp_ªque°_t
 *
	mwaô
;

81 *
	mvÆue_buf
;

82 
ngx_°r_t
 
	mtimefmt
;

83 
ngx_°r_t
 
	mîrmsg
;

84 } 
	tngx_hâp_ssi_˘x_t
;

87 
	$ngx_öt_t
 (*
	tngx_hâp_ssi_comm™d_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

88 
	tngx_hâp_ssi_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 **);

92 
ngx_°r_t
 
«me
;

93 
ngx_uöt_t
 
ödex
;

95 
m™d©‹y
:1;

96 
mu…ùÀ
:1;

97 } 
	tngx_hâp_ssi_∑øm_t
;

101 
ngx_°r_t
 
«me
;

102 
ngx_hâp_ssi_comm™d_±
 
h™dÀr
;

103 
ngx_hâp_ssi_∑øm_t
 *
∑øms
;

105 
c⁄dôi⁄Æ
:2;

106 
block
:1;

107 
Êush
:1;

108 } 
	tngx_hâp_ssi_comm™d_t
;

111 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

	@src/http/modules/ngx_http_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	$ngx_öt_t
 (*
	tngx_s¶_v¨übÀ_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
,

14 
	tngx_poﬁ_t
 *
	tpoﬁ
, 
	tngx_°r_t
 *
	ts
);

17 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

18 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

21 
ngx_öt_t
 
	`ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

23 
ngx_öt_t
 
	`ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

26 
ngx_öt_t
 
	`ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

27 *
	`ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
	`ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

29 *
∑ª¡
, *
chûd
);

31 *
	`ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

32 *
c⁄f
);

33 *
	`ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

34 *
c⁄f
);

37 
ngx_c⁄f_bômask_t
 
ngx_hâp_s¶_¥Ÿocﬁs
[] = {

38 { 
	`ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

39 { 
	`ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

40 { 
	`ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

41 { 
	`ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

42 { 
	`ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

43 { 
ngx_nuŒ_°rög
, 0 }

44 
	}
};

47 
ngx_c⁄f_íum_t
 
	gngx_hâp_s¶_vîify
[] = {

48 { 
ngx_°rög
("off"), 0 },

49 { 
ngx_°rög
("on"), 1 },

50 { 
ngx_°rög
("optional"), 2 },

51 { 
ngx_°rög
("optional_no_ca"), 3 },

52 { 
ngx_nuŒ_°rög
, 0 }

56 
ngx_comm™d_t
 
	gngx_hâp_s¶_comm™ds
[] = {

58 { 
ngx_°rög
("ssl"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

60 
ngx_hâp_s¶_íabÀ
,

61 
NGX_HTTP_SRV_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
íabÀ
),

63 
NULL
 },

65 { 
ngx_°rög
("ssl_certificate"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_°r_¶Ÿ
,

68 
NGX_HTTP_SRV_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã
),

70 
NULL
 },

72 { 
ngx_°rög
("ssl_certificate_key"),

73 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_c⁄f_£t_°r_¶Ÿ
,

75 
NGX_HTTP_SRV_CONF_OFFSET
,

76 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã_key
),

77 
NULL
 },

79 { 
ngx_°rög
("ssl_dhparam"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_°r_¶Ÿ
,

82 
NGX_HTTP_SRV_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
dh∑øm
),

84 
NULL
 },

86 { 
ngx_°rög
("ssl_ecdh_curve"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

88 
ngx_c⁄f_£t_°r_¶Ÿ
,

89 
NGX_HTTP_SRV_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
ecdh_curve
),

91 
NULL
 },

93 { 
ngx_°rög
("ssl_protocols"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

95 
ngx_c⁄f_£t_bômask_¶Ÿ
,

96 
NGX_HTTP_SRV_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥Ÿocﬁs
),

98 &
ngx_hâp_s¶_¥Ÿocﬁs
 },

100 { 
ngx_°rög
("ssl_ciphers"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

102 
ngx_c⁄f_£t_°r_¶Ÿ
,

103 
NGX_HTTP_SRV_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
cùhîs
),

105 
NULL
 },

107 { 
ngx_°rög
("ssl_verify_client"),

108 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_íum_¶Ÿ
,

110 
NGX_HTTP_SRV_CONF_OFFSET
,

111 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify
),

112 &
ngx_hâp_s¶_vîify
 },

114 { 
ngx_°rög
("ssl_verify_depth"),

115 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

116 
ngx_c⁄f_£t_num_¶Ÿ
,

117 
NGX_HTTP_SRV_CONF_OFFSET
,

118 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify_dïth
),

119 
NULL
 },

121 { 
ngx_°rög
("ssl_client_certificate"),

122 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

123 
ngx_c⁄f_£t_°r_¶Ÿ
,

124 
NGX_HTTP_SRV_CONF_OFFSET
,

125 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

126 
NULL
 },

128 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

129 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

130 
ngx_c⁄f_£t_Êag_¶Ÿ
,

131 
NGX_HTTP_SRV_CONF_OFFSET
,

132 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

133 
NULL
 },

135 { 
ngx_°rög
("ssl_session_cache"),

136 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE12
,

137 
ngx_hâp_s¶_£ssi⁄_ˇche
,

138 
NGX_HTTP_SRV_CONF_OFFSET
,

140 
NULL
 },

142 { 
ngx_°rög
("ssl_session_timeout"),

143 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

144 
ngx_c⁄f_£t_£c_¶Ÿ
,

145 
NGX_HTTP_SRV_CONF_OFFSET
,

146 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_timeout
),

147 
NULL
 },

149 { 
ngx_°rög
("ssl_crl"),

150 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

151 
ngx_c⁄f_£t_°r_¶Ÿ
,

152 
NGX_HTTP_SRV_CONF_OFFSET
,

153 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¸l
),

154 
NULL
 },

156 
ngx_nuŒ_comm™d


160 
ngx_hâp_moduÀ_t
 
	gngx_hâp_s¶_moduÀ_˘x
 = {

161 
ngx_hâp_s¶_add_v¨übÀs
,

162 
NULL
,

164 
NULL
,

165 
NULL
,

167 
ngx_hâp_s¶_¸óã_§v_c⁄f
,

168 
ngx_hâp_s¶_mîge_§v_c⁄f
,

170 
NULL
,

171 
NULL


175 
ngx_moduÀ_t
 
	gngx_hâp_s¶_moduÀ
 = {

176 
NGX_MODULE_V1
,

177 &
ngx_hâp_s¶_moduÀ_˘x
,

178 
ngx_hâp_s¶_comm™ds
,

179 
NGX_HTTP_MODULE
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NULL
,

187 
NGX_MODULE_V1_PADDING


191 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_s¶_v¨s
[] = {

193 { 
ngx_°rög
("s¶_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

194 (
uöçå_t
Ë
ngx_s¶_gë_¥Ÿocﬁ
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

196 { 
ngx_°rög
("s¶_cùhî"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

197 (
uöçå_t
Ë
ngx_s¶_gë_cùhî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

199 { 
ngx_°rög
("s¶_£ssi⁄_id"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

200 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_id
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

202 { 
ngx_°rög
("s¶_˛õ¡_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

203 (
uöçå_t
Ë
ngx_s¶_gë_˚πifiˇã
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

205 { 
ngx_°rög
("s¶_˛õ¡_øw_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

206 (
uöçå_t
Ë
ngx_s¶_gë_øw_˚πifiˇã
,

207 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

209 { 
ngx_°rög
("s¶_˛õ¡_s_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

210 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

212 { 
ngx_°rög
("s¶_˛õ¡_i_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

213 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

215 { 
ngx_°rög
("s¶_˛õ¡_£rül"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

216 (
uöçå_t
Ë
ngx_s¶_gë_£rül_numbî
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

218 { 
ngx_°rög
("s¶_˛õ¡_vîify"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

219 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_vîify
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

221 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

225 
ngx_°r_t
 
	gngx_hâp_s¶_£ss_id_˘x
 = 
ngx_°rög
("HTTP");

228 
ngx_öt_t


229 
	$ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

230 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

232 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

234 
size_t
 
Àn
;

235 
ngx_°r_t
 
s
;

237 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

239 (Ë
	`h™dÀr
(
r
->
c⁄√˘i⁄
, 
NULL
, &
s
);

241 
v
->
d©a
 = 
s
.data;

243 
Àn
 = 0; 
v
->
d©a
[len];Üen++) { }

245 
v
->
Àn
 =Üen;

246 
v
->
vÆid
 = 1;

247 
v
->
no_ˇchóbÀ
 = 0;

248 
v
->
nŸ_found
 = 0;

250  
NGX_OK
;

253 
v
->
nŸ_found
 = 1;

255  
NGX_OK
;

256 
	}
}

259 
ngx_öt_t


260 
	$ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

261 
uöçå_t
 
d©a
)

263 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

265 
ngx_°r_t
 
s
;

267 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

269 i‡(
	`h™dÀr
(
r
->
c⁄√˘i⁄
,Ñ->
poﬁ
, &
s
Ë!
NGX_OK
) {

270  
NGX_ERROR
;

273 
v
->
Àn
 = 
s
.len;

274 
v
->
d©a
 = 
s
.data;

276 i‡(
v
->
Àn
) {

277 
v
->
vÆid
 = 1;

278 
v
->
no_ˇchóbÀ
 = 0;

279 
v
->
nŸ_found
 = 0;

281  
NGX_OK
;

285 
v
->
nŸ_found
 = 1;

287  
NGX_OK
;

288 
	}
}

291 
ngx_öt_t


292 
	$ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

294 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

296 
v
 = 
ngx_hâp_s¶_v¨s
; v->
«me
.
Àn
; v++) {

297 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

298 i‡(
v¨
 =
NULL
) {

299  
NGX_ERROR
;

302 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

303 
v¨
->
d©a
 = 
v
->data;

306  
NGX_OK
;

307 
	}
}

311 
	$ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

313 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

315 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_s¶_§v_c⁄f_t
));

316 i‡(
sscf
 =
NULL
) {

317  
NULL
;

334 
sscf
->
íabÀ
 = 
NGX_CONF_UNSET
;

335 
sscf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

336 
sscf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

337 
sscf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

338 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

339 
sscf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

341  
sscf
;

342 
	}
}

346 
	$ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

348 
ngx_hâp_s¶_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

349 
ngx_hâp_s¶_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

351 
ngx_poﬁ_˛ónup_t
 *
˛n
;

353 i‡(
c⁄f
->
íabÀ
 =
NGX_CONF_UNSET
) {

354 i‡(
¥ev
->
íabÀ
 =
NGX_CONF_UNSET
) {

355 
c⁄f
->
íabÀ
 = 0;

358 
c⁄f
->
íabÀ
 = 
¥ev
->enable;

359 
c⁄f
->
fûe
 = 
¥ev
->file;

360 
c⁄f
->
löe
 = 
¥ev
->line;

364 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

365 
¥ev
->
£ssi⁄_timeout
, 300);

367 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

368 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

370 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

371 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


372 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

374 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

375 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

377 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

378 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

380 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

382 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
, 
¥ev
->client_certificate,

384 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

386 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

387 
NGX_DEFAULT_ECDH_CURVE
);

389 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

392 
c⁄f
->
s¶
.
log
 = 
cf
->log;

394 i‡(
c⁄f
->
íabÀ
) {

396 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

397 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

400 
c⁄f
->
fûe
, c⁄f->
löe
);

401  
NGX_CONF_ERROR
;

404 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

405 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

408 
c⁄f
->
fûe
, c⁄f->
löe
);

409  
NGX_CONF_ERROR
;

414 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

415  
NGX_CONF_OK
;

418 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

419 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

421 "f‹ cîtifiˇã \"%V\"", &
c⁄f
->
˚πifiˇã
);

422  
NGX_CONF_ERROR
;

426 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, c⁄fË!
NGX_OK
) {

427  
NGX_CONF_ERROR
;

430 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


432 i‡(
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
c⁄f
->
s¶
.
˘x
,

433 
ngx_hâp_s¶_£rvî«me
)

436 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

444 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

445 i‡(
˛n
 =
NULL
) {

446  
NGX_CONF_ERROR
;

449 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

450 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

452 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

453 &
c⁄f
->
˚πifiˇã_key
)

454 !
NGX_OK
)

456  
NGX_CONF_ERROR
;

459 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

460 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

463 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

465 &
c⁄f
->
cùhîs
);

468 i‡(
c⁄f
->
vîify
) {

470 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

471 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

473  
NGX_CONF_ERROR
;

476 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

477 &
c⁄f
->
˛õ¡_˚πifiˇã
,

478 
c⁄f
->
vîify_dïth
)

479 !
NGX_OK
)

481  
NGX_CONF_ERROR
;

484 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

485  
NGX_CONF_ERROR
;

489 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

490 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

494 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

496 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

497  
NGX_CONF_ERROR
;

500 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

501  
NGX_CONF_ERROR
;

504 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

505 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

507 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

508 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

511 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_hâp_s¶_£ss_id_˘x
,

512 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

513 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

514 !
NGX_OK
)

516  
NGX_CONF_ERROR
;

519  
NGX_CONF_OK
;

520 
	}
}

524 
	$ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

526 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

528 *
rv
;

530 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

532 i‡(
rv
 !
NGX_CONF_OK
) {

533  
rv
;

536 
sscf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

537 
sscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

539  
NGX_CONF_OK
;

540 
	}
}

544 
	$ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

546 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

548 
size_t
 
Àn
;

549 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

550 
ngx_öt_t
 
n
;

551 
ngx_uöt_t
 
i
, 
j
;

553 
vÆue
 = 
cf
->
¨gs
->
ñts
;

555 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

557 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

558 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

562 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

563 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

567 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

568 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

572 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

573 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

576 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

577 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

579 i‡(
n
 =
NGX_ERROR
) {

580 
övÆid
;

583 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

588 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

589 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

592 
Àn
 = 0;

594 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

595 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

599 
Àn
++;

602 i‡(
Àn
 == 0) {

603 
övÆid
;

606 
«me
.
Àn
 =Üen;

607 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

609 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

610 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

612 
n
 = 
	`ngx_∑r£_size
(&
size
);

614 i‡(
n
 =
NGX_ERROR
) {

615 
övÆid
;

618 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

619 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

621 &
vÆue
[
i
]);

623  
NGX_CONF_ERROR
;

626 
sscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

627 &
ngx_hâp_s¶_moduÀ
);

628 i‡(
sscf
->
shm_z⁄e
 =
NULL
) {

629  
NGX_CONF_ERROR
;

632 
sscf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

637 
övÆid
;

640 i‡(
sscf
->
shm_z⁄e
 && sscf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

641 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

644  
NGX_CONF_OK
;

646 
övÆid
:

648 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

649 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

651  
NGX_CONF_ERROR
;

652 
	}
}

	@src/http/modules/ngx_http_ssl_module.h

8 #i‚de‡
_NGX_HTTP_SSL_H_INCLUDED_


9 
	#_NGX_HTTP_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
ngx_Êag_t
 
	míabÀ
;

20 
ngx_s¶_t
 
	ms¶
;

22 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

24 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

26 
ngx_uöt_t
 
	mvîify
;

27 
ngx_uöt_t
 
	mvîify_dïth
;

29 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

31 
time_t
 
	m£ssi⁄_timeout
;

33 
ngx_°r_t
 
	m˚πifiˇã
;

34 
ngx_°r_t
 
	m˚πifiˇã_key
;

35 
ngx_°r_t
 
	mdh∑øm
;

36 
ngx_°r_t
 
	mecdh_curve
;

37 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

38 
ngx_°r_t
 
	m¸l
;

40 
ngx_°r_t
 
	mcùhîs
;

42 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

44 
u_ch¨
 *
	mfûe
;

45 
ngx_uöt_t
 
	mlöe
;

46 } 
	tngx_hâp_s¶_§v_c⁄f_t
;

49 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

	@src/http/modules/ngx_http_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

17 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ_˘x
 = {

18 
NULL
,

19 
ngx_hâp_°©ic_öô
,

21 
NULL
,

22 
NULL
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL


32 
ngx_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 &
ngx_hâp_°©ic_moduÀ_˘x
,

35 
NULL
,

36 
NGX_HTTP_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


48 
ngx_öt_t


49 
	$ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

51 
u_ch¨
 *
œ°
, *
loˇti⁄
;

52 
size_t
 
roŸ
, 
Àn
;

53 
ngx_°r_t
 
∑th
;

54 
ngx_öt_t
 
rc
;

55 
ngx_uöt_t
 
Àvñ
;

56 
ngx_log_t
 *
log
;

57 
ngx_buf_t
 *
b
;

58 
ngx_chaö_t
 
out
;

59 
ngx_›í_fûe_öfo_t
 
of
;

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

62 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

63  
NGX_HTTP_NOT_ALLOWED
;

66 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

67  
NGX_DECLINED
;

70 
log
 = 
r
->
c⁄√˘i⁄
->log;

77 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

78 i‡(
œ°
 =
NULL
) {

79  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

82 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

84 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

85 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

87 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

89 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

91 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

92 
of
.
dúe˘io
 = 
˛cf
->directio;

93 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

94 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

95 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

96 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

98 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

99  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

102 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

103 !
NGX_OK
)

105 
of
.
îr
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

110 
NGX_ENOENT
:

111 
NGX_ENOTDIR
:

112 
NGX_ENAMETOOLONG
:

114 
Àvñ
 = 
NGX_LOG_ERR
;

115 
rc
 = 
NGX_HTTP_NOT_FOUND
;

118 
NGX_EACCES
:

119 #i‡(
NGX_HAVE_OPENAT
)

120 
NGX_EMLINK
:

121 
NGX_ELOOP
:

124 
Àvñ
 = 
NGX_LOG_ERR
;

125 
rc
 = 
NGX_HTTP_FORBIDDEN
;

130 
Àvñ
 = 
NGX_LOG_CRIT
;

131 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

135 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

136 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

137 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

140  
rc
;

143 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

145 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

147 i‡(
of
.
is_dú
) {

149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

151 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

153 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

154 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

155  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

158 
Àn
 = 
r
->
uri
.len + 1;

160 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
 && 
r
->
¨gs
.
Àn
 == 0) {

161 
loˇti⁄
 = 
∑th
.
d©a
 + 
˛cf
->
roŸ
.
Àn
;

163 *
œ°
 = '/';

166 i‡(
r
->
¨gs
.
Àn
) {

167 
Àn
 +
r
->
¨gs
.len + 1;

170 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

171 i‡(
loˇti⁄
 =
NULL
) {

172  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

175 
œ°
 = 
	`ngx_c›y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

177 *
œ°
 = '/';

179 i‡(
r
->
¨gs
.
Àn
) {

180 *++
œ°
 = '?';

181 
	`ngx_mem˝y
(++
œ°
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

190 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

191 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

193  
NGX_HTTP_MOVED_PERMANENTLY
;

196 #i‡!(
NGX_WIN32
)

198 i‡(!
of
.
is_fûe
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

200 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

202  
NGX_HTTP_NOT_FOUND
;

207 i‡(
r
->
mëhod
 & 
NGX_HTTP_POST
) {

208  
NGX_HTTP_NOT_ALLOWED
;

211 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

213 i‡(
rc
 !
NGX_OK
) {

214  
rc
;

217 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

219 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

220 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

221 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

223 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 i‡(
r
 !r->
maö
 && 
of
.
size
 == 0) {

228  
	`ngx_hâp_£nd_hódî
(
r
);

231 
r
->
Ælow_ønges
 = 1;

235 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

236 i‡(
b
 =
NULL
) {

237  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

240 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

241 i‡(
b
->
fûe
 =
NULL
) {

242  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

245 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

247 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

248  
rc
;

251 
b
->
fûe_pos
 = 0;

252 
b
->
fûe_œ°
 = 
of
.
size
;

254 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

255 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

256 
b
->
œ°_ö_chaö
 = 1;

258 
b
->
fûe
->
fd
 = 
of
.fd;

259 
b
->
fûe
->
«me
 = 
∑th
;

260 
b
->
fûe
->
log
 =Üog;

261 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

263 
out
.
buf
 = 
b
;

264 
out
.
√xt
 = 
NULL
;

266  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

273 
ngx_hâp_h™dÀr_±
 *
h
;

274 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

276 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

278 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

279 i‡(
h
 =
NULL
) {

280  
NGX_ERROR
;

283 *
h
 = 
ngx_hâp_°©ic_h™dÀr
;

285  
NGX_OK
;

286 
	}
}

	@src/http/modules/ngx_http_stub_status_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

14 *
c⁄f
);

16 
ngx_comm™d_t
 
	gngx_hâp_°©us_comm™ds
[] = {

18 { 
ngx_°rög
("stub_status"),

19 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

20 
ngx_hâp_£t_°©us
,

23 
NULL
 },

25 
ngx_nuŒ_comm™d


30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_°ub_°©us_moduÀ_˘x
,

48 
ngx_hâp_°©us_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t
 
	$ngx_hâp_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

63 
size_t
 
size
;

64 
ngx_öt_t
 
rc
;

65 
ngx_buf_t
 *
b
;

66 
ngx_chaö_t
 
out
;

67 
ngx_©omic_öt_t
 
≠
, 
hn
, 
ac
, 
rq
, 
rd
, 
wr
;

69 i‡(
r
->
mëhod
 !
NGX_HTTP_GET
 &&Ñ->mëhod !
NGX_HTTP_HEAD
) {

70  
NGX_HTTP_NOT_ALLOWED
;

73 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

75 i‡(
rc
 !
NGX_OK
) {

76  
rc
;

79 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

81 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

82 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

84 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

86 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

87  
rc
;

91 
size
 = ("A˘ivêc⁄√˘i⁄s: \n"Ë+ 
NGX_ATOMIC_T_LEN


93 + 6 + 3 * 
NGX_ATOMIC_T_LEN


94 + ("Ródög: Wrôög: Waôög: \n"Ë+ 3 * 
NGX_ATOMIC_T_LEN
;

96 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

97 i‡(
b
 =
NULL
) {

98  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

101 
out
.
buf
 = 
b
;

102 
out
.
√xt
 = 
NULL
;

104 
≠
 = *
ngx_°©_ac˚±ed
;

105 
hn
 = *
ngx_°©_h™dÀd
;

106 
ac
 = *
ngx_°©_a˘ive
;

107 
rq
 = *
ngx_°©_ªque°s
;

108 
rd
 = *
ngx_°©_ªadög
;

109 
wr
 = *
ngx_°©_wrôög
;

111 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "A˘ivêc⁄√˘i⁄s: %uA \n", 
ac
);

113 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "serveráccepts handledÑequests\n",

116 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %uA %uA %uA \n", 
≠
, 
hn
, 
rq
);

118 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "Reading: %uA Writing: %uA Waiting: %uA \n",

119 
rd
, 
wr
, 
ac
 - (rd + wr));

121 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

122 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

124 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

126 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

128 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

129  
rc
;

132  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

133 
	}
}

136 *
	$ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

138 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

140 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

141 
˛cf
->
h™dÀr
 = 
ngx_hâp_°©us_h™dÀr
;

143  
NGX_CONF_OK
;

144 
	}
}

	@src/http/modules/ngx_http_sub_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mm©ch
;

15 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

17 
ngx_hash_t
 
	mty≥s
;

19 
ngx_Êag_t
 
	m⁄˚
;

21 
ngx_¨øy_t
 *
	mty≥s_keys
;

22 } 
	tngx_hâp_sub_loc_c⁄f_t
;

26 
	msub_°¨t_°©e
 = 0,

27 
	msub_m©ch_°©e
,

28 } 
	tngx_hâp_sub_°©e_e
;

32 
ngx_°r_t
 
	mm©ch
;

33 
ngx_°r_t
 
	mßved
;

34 
ngx_°r_t
 
	mlooked
;

36 
ngx_uöt_t
 
	m⁄˚
;

38 
ngx_buf_t
 *
	mbuf
;

40 
u_ch¨
 *
	mpos
;

41 
u_ch¨
 *
	mc›y_°¨t
;

42 
u_ch¨
 *
	mc›y_íd
;

44 
ngx_chaö_t
 *
	mö
;

45 
ngx_chaö_t
 *
	mout
;

46 
ngx_chaö_t
 **
	mœ°_out
;

47 
ngx_chaö_t
 *
	mbusy
;

48 
ngx_chaö_t
 *
	m‰ì
;

50 
ngx_°r_t
 
	msub
;

52 
ngx_uöt_t
 
	m°©e
;

53 } 
	tngx_hâp_sub_˘x_t
;

56 
ngx_öt_t
 
ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_sub_˘x_t
 *
˘x
);

58 
ngx_öt_t
 
ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_sub_˘x_t
 *
˘x
);

61 * 
ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

64 *
ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

65 *
∑ª¡
, *
chûd
);

66 
ngx_öt_t
 
ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

69 
ngx_comm™d_t
 
	gngx_hâp_sub_fûãr_comm™ds
[] = {

71 { 
ngx_°rög
("sub_filter"),

72 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

73 
ngx_hâp_sub_fûãr
,

74 
NGX_HTTP_LOC_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("sub_filter_types"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

80 
ngx_hâp_ty≥s_¶Ÿ
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

82 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
ty≥s_keys
),

83 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

85 { 
ngx_°rög
("sub_filter_once"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

87 
ngx_c⁄f_£t_Êag_¶Ÿ
,

88 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
⁄˚
),

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_hâp_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ_˘x
 = {

97 
NULL
,

98 
ngx_hâp_sub_fûãr_öô
,

100 
NULL
,

101 
NULL
,

103 
NULL
,

104 
NULL
,

106 
ngx_hâp_sub_¸óã_c⁄f
,

107 
ngx_hâp_sub_mîge_c⁄f


111 
ngx_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ
 = {

112 
NGX_MODULE_V1
,

113 &
ngx_hâp_sub_fûãr_moduÀ_˘x
,

114 
ngx_hâp_sub_fûãr_comm™ds
,

115 
NGX_HTTP_MODULE
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NULL
,

120 
NULL
,

121 
NULL
,

122 
NULL
,

123 
NGX_MODULE_V1_PADDING


127 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

128 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

131 
ngx_öt_t


132 
	$ngx_hâp_sub_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

134 
ngx_hâp_sub_˘x_t
 *
˘x
;

135 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

137 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

139 i‡(
¶cf
->
m©ch
.
Àn
 == 0

140 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

141 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

143  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

146 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_sub_˘x_t
));

147 i‡(
˘x
 =
NULL
) {

148  
NGX_ERROR
;

151 
˘x
->
ßved
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

152 i‡(
˘x
->
ßved
.
d©a
 =
NULL
) {

153  
NGX_ERROR
;

156 
˘x
->
looked
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

157 i‡(
˘x
->
looked
.
d©a
 =
NULL
) {

158  
NGX_ERROR
;

161 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_sub_fûãr_moduÀ
);

163 
˘x
->
m©ch
 = 
¶cf
->match;

164 
˘x
->
œ°_out
 = &˘x->
out
;

166 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

168 i‡(
r
 =r->
maö
) {

169 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

170 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

173  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

174 
	}
}

177 
ngx_öt_t


178 
	$ngx_hâp_sub_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

180 
ngx_öt_t
 
rc
;

181 
ngx_buf_t
 *
b
;

182 
ngx_chaö_t
 *
˛
;

183 
ngx_hâp_sub_˘x_t
 *
˘x
;

184 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

186 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

188 i‡(
˘x
 =
NULL
) {

189  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

192 i‡((
ö
 =
NULL


193 && 
˘x
->
buf
 =
NULL


194 && 
˘x
->
ö
 =
NULL


195 && 
˘x
->
busy
 =
NULL
))

197  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

200 i‡(
˘x
->
⁄˚
 && (˘x->
buf
 =
NULL
 || ctx->
ö
 == NULL)) {

202 i‡(
˘x
->
busy
) {

203 i‡(
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

204  
NGX_ERROR
;

208  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

213 i‡(
ö
) {

214 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

215  
NGX_ERROR
;

219 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

220 "hâ∞sub fûã∏\"%V\"", &
r
->
uri
);

222 
˘x
->
ö
 || ctx->
buf
) {

224 i‡(
˘x
->
buf
 =
NULL
) {

225 
˘x
->
buf
 = ctx->
ö
->buf;

226 
˘x
->
ö
 = ctx->ö->
√xt
;

227 
˘x
->
pos
 = ctx->
buf
->pos;

230 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

231 
˘x
->
c›y_°¨t
 = ctx->
pos
;

232 
˘x
->
c›y_íd
 = ctx->
pos
;

235 
b
 = 
NULL
;

237 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

239 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

240 "ßved: \"%V\" sèã: %d", &
˘x
->
ßved
, ctx->
°©e
);

242 
rc
 = 
	`ngx_hâp_sub_∑r£
(
r
, 
˘x
);

244 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

246 
rc
, &
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

248 i‡(
rc
 =
NGX_ERROR
) {

249  
rc
;

252 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

255 "ßved: \"%V\"", &
˘x
->
ßved
);

257 i‡(
˘x
->
ßved
.
Àn
) {

259 i‡(
˘x
->
‰ì
) {

260 
˛
 = 
˘x
->
‰ì
;

261 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

262 
b
 = 
˛
->
buf
;

263 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

266 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

267 i‡(
b
 =
NULL
) {

268  
NGX_ERROR
;

271 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

272 i‡(
˛
 =
NULL
) {

273  
NGX_ERROR
;

276 
˛
->
buf
 = 
b
;

279 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
ßved
.
Àn
);

280 i‡(
b
->
pos
 =
NULL
) {

281  
NGX_ERROR
;

284 
	`ngx_mem˝y
(
b
->
pos
, 
˘x
->
ßved
.
d©a
, ctx->ßved.
Àn
);

285 
b
->
œ°
 = b->
pos
 + 
˘x
->
ßved
.
Àn
;

286 
b
->
mem‹y
 = 1;

288 *
˘x
->
œ°_out
 = 
˛
;

289 
˘x
->
œ°_out
 = &
˛
->
√xt
;

291 
˘x
->
ßved
.
Àn
 = 0;

294 i‡(
˘x
->
‰ì
) {

295 
˛
 = 
˘x
->
‰ì
;

296 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

297 
b
 = 
˛
->
buf
;

300 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

301 i‡(
b
 =
NULL
) {

302  
NGX_ERROR
;

305 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

306 i‡(
˛
 =
NULL
) {

307  
NGX_ERROR
;

310 
˛
->
buf
 = 
b
;

313 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

315 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

316 
b
->
œ°
 = 
˘x
->
c›y_íd
;

317 
b
->
shadow
 = 
NULL
;

318 
b
->
œ°_buf
 = 0;

319 
b
->
ªcy˛ed
 = 0;

321 i‡(
b
->
ö_fûe
) {

322 
b
->
fûe_œ°
 = b->
fûe_pos
 + (b->
œ°
 - 
˘x
->
buf
->
pos
);

323 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

326 
˛
->
√xt
 = 
NULL
;

327 *
˘x
->
œ°_out
 = 
˛
;

328 
˘x
->
œ°_out
 = &
˛
->
√xt
;

331 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

332 
˘x
->
c›y_°¨t
 = ctx->
pos
;

333 
˘x
->
c›y_íd
 = ctx->
pos
;

336 
˘x
->
c›y_°¨t
 = 
NULL
;

337 
˘x
->
c›y_íd
 = 
NULL
;

340 i‡(
rc
 =
NGX_AGAIN
) {

347 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

348 i‡(
b
 =
NULL
) {

349  
NGX_ERROR
;

352 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

353 i‡(
˛
 =
NULL
) {

354  
NGX_ERROR
;

357 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

359 i‡(
˘x
->
sub
.
d©a
 =
NULL
) {

361 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¶cf
->
vÆue
, &
˘x
->
sub
)

362 !
NGX_OK
)

364  
NGX_ERROR
;

368 i‡(
˘x
->
sub
.
Àn
) {

369 
b
->
mem‹y
 = 1;

370 
b
->
pos
 = 
˘x
->
sub
.
d©a
;

371 
b
->
œ°
 = 
˘x
->
sub
.
d©a
 + ctx->sub.
Àn
;

374 
b
->
sync
 = 1;

377 
˛
->
buf
 = 
b
;

378 
˛
->
√xt
 = 
NULL
;

379 *
˘x
->
œ°_out
 = 
˛
;

380 
˘x
->
œ°_out
 = &
˛
->
√xt
;

382 
˘x
->
⁄˚
 = 
¶cf
->once;

387 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

388 i‡(
b
 =
NULL
) {

389 i‡(
˘x
->
‰ì
) {

390 
˛
 = 
˘x
->
‰ì
;

391 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

392 
b
 = 
˛
->
buf
;

393 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

396 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

397 i‡(
b
 =
NULL
) {

398  
NGX_ERROR
;

401 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

402 i‡(
˛
 =
NULL
) {

403  
NGX_ERROR
;

406 
˛
->
buf
 = 
b
;

409 
b
->
sync
 = 1;

411 
˛
->
√xt
 = 
NULL
;

412 *
˘x
->
œ°_out
 = 
˛
;

413 
˘x
->
œ°_out
 = &
˛
->
√xt
;

416 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

417 
b
->
shadow
 = 
˘x
->
buf
;

419 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

422 
˘x
->
buf
 = 
NULL
;

424 
˘x
->
ßved
.
Àn
 = ctx->
looked
.len;

425 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->looked.
Àn
);

428 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

429  
NGX_OK
;

432  
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
);

433 
	}
}

436 
ngx_öt_t


437 
	$ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

439 
ngx_öt_t
 
rc
;

440 
ngx_buf_t
 *
b
;

441 
ngx_chaö_t
 *
˛
;

444 
b
 = 
NULL
;

445 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

446 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

447 "sub out: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

448 i‡(
˛
->
buf
 =
b
) {

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

451 
	`ngx_debug_poöt
();

452  
NGX_ERROR
;

454 
b
 = 
˛
->
buf
;

458 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

460 i‡(
˘x
->
busy
 =
NULL
) {

461 
˘x
->
busy
 = ctx->
out
;

464 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

465 
˛
->
√xt
 = 
˘x
->
out
;

468 
˘x
->
out
 = 
NULL
;

469 
˘x
->
œ°_out
 = &˘x->
out
;

471 
˘x
->
busy
) {

473 
˛
 = 
˘x
->
busy
;

474 
b
 = 
˛
->
buf
;

476 i‡(
	`ngx_buf_size
(
b
) != 0) {

480 i‡(
b
->
shadow
) {

481 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

484 
˘x
->
busy
 = 
˛
->
√xt
;

486 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

489 
˛
->
√xt
 = 
˘x
->
‰ì
;

490 
˘x
->
‰ì
 = 
˛
;

494 i‡(
˘x
->
ö
 || ctx->
buf
) {

495 
r
->
buf„ªd
 |
NGX_HTTP_SUB_BUFFERED
;

498 
r
->
buf„ªd
 &~
NGX_HTTP_SUB_BUFFERED
;

501  
rc
;

502 
	}
}

505 
ngx_öt_t


506 
	$ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

508 
u_ch¨
 *
p
, *
œ°
, *
c›y_íd
, 
ch
, 
m©ch
;

509 
size_t
 
looked
;

510 
ngx_hâp_sub_°©e_e
 
°©e
;

512 i‡(
˘x
->
⁄˚
) {

513 
˘x
->
c›y_°¨t
 = ctx->
pos
;

514 
˘x
->
c›y_íd
 = ctx->
buf
->
œ°
;

515 
˘x
->
pos
 = ctx->
buf
->
œ°
;

516 
˘x
->
looked
.
Àn
 = 0;

518 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "once");

520  
NGX_AGAIN
;

523 
°©e
 = 
˘x
->state;

524 
looked
 = 
˘x
->looked.
Àn
;

525 
œ°
 = 
˘x
->
buf
->last;

526 
c›y_íd
 = 
˘x
->copy_end;

528 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

530 
ch
 = *
p
;

531 
ch
 = 
	`ngx_tﬁowî
(ch);

533 i‡(
°©e
 =
sub_°¨t_°©e
) {

537 
m©ch
 = 
˘x
->m©ch.
d©a
[0];

540 i‡(
ch
 =
m©ch
) {

541 
c›y_íd
 = 
p
;

542 
˘x
->
looked
.
d©a
[0] = *
p
;

543 
looked
 = 1;

544 
°©e
 = 
sub_m©ch_°©e
;

546 
m©ch_°¨ãd
;

549 i‡(++
p
 =
œ°
) {

553 
ch
 = *
p
;

554 
ch
 = 
	`ngx_tﬁowî
(ch);

557 
˘x
->
°©e
 = state;

558 
˘x
->
pos
 = 
p
;

559 
˘x
->
looked
.
Àn
 =Üooked;

560 
˘x
->
c›y_íd
 = 
p
;

562 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

563 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

566  
NGX_AGAIN
;

568 
m©ch_°¨ãd
:

575 i‡(
ch
 =
˘x
->
m©ch
.
d©a
[
looked
]) {

576 
˘x
->
looked
.
d©a
[looked] = *
p
;

577 
looked
++;

579 i‡(
looked
 =
˘x
->
m©ch
.
Àn
) {

580 i‡((
size_t
Ë(
p
 - 
˘x
->
pos
Ë< 
looked
) {

581 
˘x
->
ßved
.
Àn
 = 0;

584 
˘x
->
°©e
 = 
sub_°¨t_°©e
;

585 
˘x
->
pos
 = 
p
 + 1;

586 
˘x
->
looked
.
Àn
 = 0;

587 
˘x
->
c›y_íd
 = copy_end;

589 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

590 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

593  
NGX_OK
;

596 } i‡(
ch
 =
˘x
->
m©ch
.
d©a
[0]) {

597 
c›y_íd
 = 
p
;

598 
˘x
->
looked
.
d©a
[0] = *
p
;

599 
looked
 = 1;

602 
c›y_íd
 = 
p
;

603 
looked
 = 0;

604 
°©e
 = 
sub_°¨t_°©e
;

608 
˘x
->
°©e
 = state;

609 
˘x
->
pos
 = 
p
;

610 
˘x
->
looked
.
Àn
 =Üooked;

612 
˘x
->
c›y_íd
 = (
°©e
 =
sub_°¨t_°©e
Ë? 
p
 : copy_end;

614 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

615 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

618  
NGX_AGAIN
;

619 
	}
}

623 
	$ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

625 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
 = 
c⁄f
;

627 
ngx_°r_t
 *
vÆue
;

628 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

630 i‡(
¶cf
->
m©ch
.
d©a
) {

634 
vÆue
 = 
cf
->
¨gs
->
ñts
;

636 
	`ngx_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

638 
¶cf
->
m©ch
 = 
vÆue
[1];

640 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

642 
ccv
.
cf
 = cf;

643 
ccv
.
vÆue
 = &value[2];

644 
ccv
.
com∂ex_vÆue
 = &
¶cf
->
vÆue
;

646 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

647  
NGX_CONF_ERROR
;

650  
NGX_CONF_OK
;

651 
	}
}

655 
	$ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

657 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

659 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_loc_c⁄f_t
));

660 i‡(
¶cf
 =
NULL
) {

661  
NULL
;

675 
¶cf
->
⁄˚
 = 
NGX_CONF_UNSET
;

677  
¶cf
;

678 
	}
}

682 
	$ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

684 
ngx_hâp_sub_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

685 
ngx_hâp_sub_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

687 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
⁄˚
, 
¥ev
->once, 1);

688 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
m©ch
, 
¥ev
->match, "");

690 i‡(
c⁄f
->
vÆue
.vÆue.
d©a
 =
NULL
) {

691 
c⁄f
->
vÆue
 = 
¥ev
->value;

694 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

695 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

696 
ngx_hâp_html_deÁu…_ty≥s
)

697 !
NGX_OK
)

699  
NGX_CONF_ERROR
;

702  
NGX_CONF_OK
;

703 
	}
}

706 
ngx_öt_t


707 
	$ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

709 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

710 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_sub_hódî_fûãr
;

712 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

713 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_sub_body_fûãr
;

715  
NGX_OK
;

716 
	}
}

	@src/http/modules/ngx_http_upstream_ip_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

17 
ngx_uöt_t
 
	mhash
;

19 
u_ch¨
 
	maddæí
;

20 
u_ch¨
 *
	maddr
;

22 
u_ch¨
 
	måõs
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 } 
	tngx_hâp_up°ªam_ù_hash_≥î_d©a_t
;

28 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

31 *
d©a
);

32 *
ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

36 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_ù_hash_comm™ds
[] = {

38 { 
ngx_°rög
("ip_hash"),

39 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

40 
ngx_hâp_up°ªam_ù_hash
,

43 
NULL
 },

45 
ngx_nuŒ_comm™d


49 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ_˘x
 = {

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
NULL
,

57 
NULL
,

59 
NULL
,

60 
NULL


64 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ
 = {

65 
NGX_MODULE_V1
,

66 &
ngx_hâp_up°ªam_ù_hash_moduÀ_˘x
,

67 
ngx_hâp_up°ªam_ù_hash_comm™ds
,

68 
NGX_HTTP_MODULE
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NGX_MODULE_V1_PADDING


80 
u_ch¨
 
	gngx_hâp_up°ªam_ù_hash_p£udo_addr
[3];

83 
ngx_öt_t


84 
	$ngx_hâp_up°ªam_öô_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

86 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

87  
NGX_ERROR
;

90 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_ù_hash_≥î
;

92  
NGX_OK
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

100 
sockaddr_ö
 *
sö
;

101 #i‡(
NGX_HAVE_INET6
)

102 
sockaddr_ö6
 *
sö6
;

104 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
;

106 
ùhp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
));

107 i‡(
ùhp
 =
NULL
) {

108  
NGX_ERROR
;

111 
r
->
up°ªam
->
≥î
.
d©a
 = &
ùhp
->
ºp
;

113 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

114  
NGX_ERROR
;

117 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_ù_hash_≥î
;

119 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

121 
AF_INET
:

122 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

123 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
.
s_addr
;

124 
ùhp
->
addæí
 = 3;

127 #i‡(
NGX_HAVE_INET6
)

128 
AF_INET6
:

129 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

130 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö6
->
sö6_addr
.
s6_addr
;

131 
ùhp
->
addæí
 = 16;

136 
ùhp
->
addr
 = 
ngx_hâp_up°ªam_ù_hash_p£udo_addr
;

137 
ùhp
->
addæí
 = 3;

140 
ùhp
->
hash
 = 89;

141 
ùhp
->
åõs
 = 0;

142 
ùhp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

144  
NGX_OK
;

145 
	}
}

148 
ngx_öt_t


149 
	$ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

151 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
 = 
d©a
;

153 
time_t
 
now
;

154 
ngx_öt_t
 
w
;

155 
uöçå_t
 
m
;

156 
ngx_uöt_t
 
i
, 
n
, 
p
, 
hash
;

157 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

159 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

160 "gë i∞hashÖìr,Åry: %ui", 
pc
->
åõs
);

164 i‡(
ùhp
->
åõs
 > 20 || iphp->
ºp
.
≥îs
->
sögÀ
) {

165  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

168 
now
 = 
	`ngx_time
();

170 
pc
->
ˇched
 = 0;

171 
pc
->
c⁄√˘i⁄
 = 
NULL
;

173 
hash
 = 
ùhp
->hash;

177 
i
 = 0; i < 
ùhp
->
addæí
; i++) {

178 
hash
 = (hash * 113 + 
ùhp
->
addr
[
i
]) % 6271;

181 i‡(!
ùhp
->
ºp
.
≥îs
->
weighãd
) {

182 
p
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
numbî
;

185 
w
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
tŸÆ_weight
;

187 
i
 = 0; i < 
ùhp
->
ºp
.
≥îs
->
numbî
; i++) {

188 
w
 -
ùhp
->
ºp
.
≥îs
->
≥î
[
i
].
weight
;

189 i‡(
w
 < 0) {

194 
p
 = 
i
;

197 
n
 = 
p
 / (8 * (
uöçå_t
));

198 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

200 i‡(!(
ùhp
->
ºp
.
åõd
[
n
] & 
m
)) {

202 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

203 "gë i∞hashÖìr, hash: %uò%04XA", 
p
, 
m
);

205 
≥î
 = &
ùhp
->
ºp
.
≥îs
->≥î[
p
];

209 i‡(!
≥î
->
down
) {

211 i‡(
≥î
->
max_Áûs
 =0 ||Öìr->
Áûs
 <Öeer->max_fails) {

215 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

216 
≥î
->
checked
 = 
now
;

221 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

225 
pc
->
åõs
--;

228 i‡(++
ùhp
->
åõs
 >= 20) {

229  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

233 
ùhp
->
ºp
.
cuºít
 = 
p
;

235 
pc
->
sockaddr
 = 
≥î
->sockaddr;

236 
pc
->
sockÀn
 = 
≥î
->socklen;

237 
pc
->
«me
 = &
≥î
->name;

241 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

242 
ùhp
->
hash
 = hash;

244  
NGX_OK
;

245 
	}
}

249 
	$ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

251 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

253 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

255 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_ù_hash
;

257 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


258 |
NGX_HTTP_UPSTREAM_WEIGHT


259 |
NGX_HTTP_UPSTREAM_MAX_FAILS


260 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


261 |
NGX_HTTP_UPSTREAM_DOWN
;

263  
NGX_CONF_OK
;

264 
	}
}

	@src/http/modules/ngx_http_upstream_keepalive_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mmax_ˇched
;

16 
ngx_queue_t
 
	mˇche
;

17 
ngx_queue_t
 
	m‰ì
;

19 
ngx_hâp_up°ªam_öô_±
 
	m‹igöÆ_öô_up°ªam
;

20 
ngx_hâp_up°ªam_öô_≥î_±
 
	m‹igöÆ_öô_≥î
;

22 } 
	tngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
;

26 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

28 
ngx_hâp_up°ªam_t
 *
	mup°ªam
;

30 *
	md©a
;

32 
ngx_evít_gë_≥î_±
 
	m‹igöÆ_gë_≥î
;

33 
ngx_evít_‰ì_≥î_±
 
	m‹igöÆ_‰ì_≥î
;

35 #i‡(
NGX_HTTP_SSL
)

36 
ngx_evít_£t_≥î_£ssi⁄_±
 
	m‹igöÆ_£t_£ssi⁄
;

37 
ngx_evít_ßve_≥î_£ssi⁄_±
 
	m‹igöÆ_ßve_£ssi⁄
;

40 } 
	tngx_hâp_up°ªam_kì∑live_≥î_d©a_t
;

44 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

46 
ngx_queue_t
 
	mqueue
;

47 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

49 
sockÀn_t
 
	msockÀn
;

50 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

52 } 
	tngx_hâp_up°ªam_kì∑live_ˇche_t
;

55 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

57 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

58 *
d©a
);

59 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

60 *
d©a
, 
ngx_uöt_t
 
°©e
);

62 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

63 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

64 
ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 #i‡(
NGX_HTTP_SSL
)

68 
ngx_öt_t
 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(

69 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

70 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

71 *
d©a
);

74 *
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

75 *
ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

76 *
c⁄f
);

79 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_kì∑live_comm™ds
[] = {

81 { 
ngx_°rög
("keepalive"),

82 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE12
,

83 
ngx_hâp_up°ªam_kì∑live
,

86 
NULL
 },

88 
ngx_nuŒ_comm™d


92 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ_˘x
 = {

93 
NULL
,

94 
NULL
,

96 
NULL
,

97 
NULL
,

99 
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
,

100 
NULL
,

102 
NULL
,

103 
NULL


107 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_hâp_up°ªam_kì∑live_moduÀ_˘x
,

110 
ngx_hâp_up°ªam_kì∑live_comm™ds
,

111 
NGX_HTTP_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


123 
ngx_öt_t


124 
	$ngx_hâp_up°ªam_öô_kì∑live
(
ngx_c⁄f_t
 *
cf
,

125 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

127 
ngx_uöt_t
 
i
;

128 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

129 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ˇched
;

131 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

134 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

135 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

137 i‡(
kcf
->
	`‹igöÆ_öô_up°ªam
(
cf
, 
us
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

141 
kcf
->
‹igöÆ_öô_≥î
 = 
us
->
≥î
.
öô
;

143 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_kì∑live_≥î
;

147 
ˇched
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

148 (
ngx_hâp_up°ªam_kì∑live_ˇche_t
Ë* 
kcf
->
max_ˇched
);

149 i‡(
ˇched
 =
NULL
) {

150  
NGX_ERROR
;

153 
	`ngx_queue_öô
(&
kcf
->
ˇche
);

154 
	`ngx_queue_öô
(&
kcf
->
‰ì
);

156 
i
 = 0; i < 
kcf
->
max_ˇched
; i++) {

157 
	`ngx_queue_ö£π_hód
(&
kcf
->
‰ì
, &
ˇched
[
i
].
queue
);

158 
ˇched
[
i
].
c⁄f
 = 
kcf
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

167 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

169 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
;

170 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

172 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

175 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

176 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

178 
kp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
));

179 i‡(
kp
 =
NULL
) {

180  
NGX_ERROR
;

183 i‡(
kcf
->
	`‹igöÆ_öô_≥î
(
r
, 
us
Ë!
NGX_OK
) {

184  
NGX_ERROR
;

187 
kp
->
c⁄f
 = 
kcf
;

188 
kp
->
up°ªam
 = 
r
->upstream;

189 
kp
->
d©a
 = 
r
->
up°ªam
->
≥î
.data;

190 
kp
->
‹igöÆ_gë_≥î
 = 
r
->
up°ªam
->
≥î
.
gë
;

191 
kp
->
‹igöÆ_‰ì_≥î
 = 
r
->
up°ªam
->
≥î
.
‰ì
;

193 
r
->
up°ªam
->
≥î
.
d©a
 = 
kp
;

194 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_kì∑live_≥î
;

195 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
;

197 #i‡(
NGX_HTTP_SSL
)

198 
kp
->
‹igöÆ_£t_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
;

199 
kp
->
‹igöÆ_ßve_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
;

200 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
;

201 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
;

204  
NGX_OK
;

205 
	}
}

208 
ngx_öt_t


209 
	$ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

211 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

212 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

214 
ngx_öt_t
 
rc
;

215 
ngx_queue_t
 *
q
, *
ˇche
;

216 
ngx_c⁄√˘i⁄_t
 *
c
;

218 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

223 
rc
 = 
kp
->
	`‹igöÆ_gë_≥î
(
pc
, kp->
d©a
);

225 i‡(
rc
 !
NGX_OK
) {

226  
rc
;

231 
ˇche
 = &
kp
->
c⁄f
->cache;

233 
q
 = 
	`ngx_queue_hód
(
ˇche
);

234 
q
 !
	`ngx_queue_£¡öñ
(
ˇche
);

235 
q
 = 
	`ngx_queue_√xt
(q))

237 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

238 
c
 = 
ôem
->
c⁄√˘i⁄
;

240 i‡(
	`ngx_memn2cmp
((
u_ch¨
 *Ë&
ôem
->
sockaddr
, (u_ch¨ *Ë
pc
->sockaddr,

241 
ôem
->
sockÀn
, 
pc
->socklen)

244 
	`ngx_queue_ªmove
(
q
);

245 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
‰ì
, 
q
);

247 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

248 "gë kì∑livê≥î: usög c⁄√˘i⁄ %p", 
c
);

250 
c
->
idÀ
 = 0;

251 
c
->
log
 = 
pc
->log;

252 
c
->
ªad
->
log
 = 
pc
->log;

253 
c
->
wrôe
->
log
 = 
pc
->log;

254 
c
->
poﬁ
->
log
 = 
pc
->log;

256 
pc
->
c⁄√˘i⁄
 = 
c
;

257 
pc
->
ˇched
 = 1;

259  
NGX_DONE
;

263  
NGX_OK
;

264 
	}
}

268 
	$ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

269 
ngx_uöt_t
 
°©e
)

271 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

272 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

274 
ngx_queue_t
 *
q
;

275 
ngx_c⁄√˘i⁄_t
 *
c
;

276 
ngx_hâp_up°ªam_t
 *
u
;

278 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

283 
u
 = 
kp
->
up°ªam
;

284 
c
 = 
pc
->
c⁄√˘i⁄
;

286 i‡(
°©e
 & 
NGX_PEER_FAILED


287 || 
c
 =
NULL


288 || 
c
->
ªad
->
eof


289 || 
c
->
ªad
->
îr‹


290 || 
c
->
ªad
->
timedout


291 || 
c
->
wrôe
->
îr‹


292 || 
c
->
wrôe
->
timedout
)

294 
övÆid
;

297 i‡(!
u
->
kì∑live
) {

298 
övÆid
;

301 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

302 
övÆid
;

305 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

306 "‰ì kì∑livê≥î: savög c⁄√˘i⁄ %p", 
c
);

308 i‡(
	`ngx_queue_em±y
(&
kp
->
c⁄f
->
‰ì
)) {

310 
q
 = 
	`ngx_queue_œ°
(&
kp
->
c⁄f
->
ˇche
);

311 
	`ngx_queue_ªmove
(
q
);

313 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

315 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
ôem
->
c⁄√˘i⁄
);

318 
q
 = 
	`ngx_queue_hód
(&
kp
->
c⁄f
->
‰ì
);

319 
	`ngx_queue_ªmove
(
q
);

321 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

324 
ôem
->
c⁄√˘i⁄
 = 
c
;

325 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
ˇche
, 
q
);

327 
pc
->
c⁄√˘i⁄
 = 
NULL
;

329 i‡(
c
->
ªad
->
timî_£t
) {

330 
	`ngx_dñ_timî
(
c
->
ªad
);

332 i‡(
c
->
wrôe
->
timî_£t
) {

333 
	`ngx_dñ_timî
(
c
->
wrôe
);

336 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
;

337 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
;

339 
c
->
d©a
 = 
ôem
;

340 
c
->
idÀ
 = 1;

341 
c
->
log
 = 
ngx_cy˛e
->log;

342 
c
->
ªad
->
log
 = 
ngx_cy˛e
->log;

343 
c
->
wrôe
->
log
 = 
ngx_cy˛e
->log;

344 
c
->
poﬁ
->
log
 = 
ngx_cy˛e
->log;

346 
ôem
->
sockÀn
 = 
pc
->socklen;

347 
	`ngx_mem˝y
(&
ôem
->
sockaddr
, 
pc
->sockaddr,Öc->
sockÀn
);

349 i‡(
c
->
ªad
->
ªady
) {

350 
	`ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
c
->
ªad
);

353 
övÆid
:

355 
kp
->
	`‹igöÆ_‰ì_≥î
(
pc
, kp->
d©a
, 
°©e
);

356 
	}
}

360 
	$ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

362 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

364 
	}
}

368 
	$ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
)

370 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

371 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

373 
n
;

374 
buf
[1];

375 
ngx_c⁄√˘i⁄_t
 *
c
;

377 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

380 
c
 = 
ev
->
d©a
;

382 i‡(
c
->
˛o£
) {

383 
˛o£
;

386 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

388 i‡(
n
 =-1 && 
ngx_sockë_î∫o
 =
NGX_EAGAIN
) {

391 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

392 
˛o£
;

398 
˛o£
:

400 
ôem
 = 
c
->
d©a
;

401 
c⁄f
 = 
ôem
->conf;

403 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
c
);

405 
	`ngx_queue_ªmove
(&
ôem
->
queue
);

406 
	`ngx_queue_ö£π_hód
(&
c⁄f
->
‰ì
, &
ôem
->
queue
);

407 
	}
}

411 
	$ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
)

414 #i‡(
NGX_HTTP_SSL
)

416 i‡(
c
->
s¶
) {

417 
c
->
s¶
->
no_waô_shutdown
 = 1;

418 
c
->
s¶
->
no_£nd_shutdown
 = 1;

420 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

421 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£
;

428 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

429 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

430 
	}
}

433 #i‡(
NGX_HTTP_SSL
)

435 
ngx_öt_t


436 
	$ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

438 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

440  
kp
->
	`‹igöÆ_£t_£ssi⁄
(
pc
, kp->
d©a
);

441 
	}
}

445 
	$ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

447 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

449 
kp
->
	`‹igöÆ_ßve_£ssi⁄
(
pc
, kp->
d©a
);

451 
	}
}

457 
	$ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

459 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

461 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

462 (
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
));

463 i‡(
c⁄f
 =
NULL
) {

464  
NULL
;

474 
c⁄f
->
max_ˇched
 = 1;

476  
c⁄f
;

477 
	}
}

481 
	$ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

483 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

484 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

486 
ngx_öt_t
 
n
;

487 
ngx_°r_t
 *
vÆue
;

488 
ngx_uöt_t
 
i
;

490 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

492 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
,

493 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

495 i‡(
kcf
->
‹igöÆ_öô_up°ªam
) {

499 
kcf
->
‹igöÆ_öô_up°ªam
 = 
uscf
->
≥î
.
öô_up°ªam


500 ? 
uscf
->
≥î
.
öô_up°ªam


501 : 
ngx_hâp_up°ªam_öô_round_robö
;

503 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_kì∑live
;

507 
vÆue
 = 
cf
->
¨gs
->
ñts
;

509 
n
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

511 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

512 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

514 &
vÆue
[1], &
cmd
->
«me
);

515  
NGX_CONF_ERROR
;

518 
kcf
->
max_ˇched
 = 
n
;

520 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

522 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "single") == 0) {

523 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

528 
övÆid
;

531  
NGX_CONF_OK
;

533 
övÆid
:

535 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

536 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

538  
NGX_CONF_ERROR
;

539 
	}
}

	@src/http/modules/ngx_http_upstream_least_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 *
	mc⁄ns
;

15 } 
	tngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
;

20 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

22 
ngx_uöt_t
 *
	mc⁄ns
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 
ngx_evít_‰ì_≥î_±
 
	m‰ì_º_≥î
;

26 } 
	tngx_hâp_up°ªam_lc_≥î_d©a_t
;

29 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

31 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(

32 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

33 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

34 *
d©a
, 
ngx_uöt_t
 
°©e
);

35 *
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

37 *
c⁄f
);

40 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
[] = {

42 { 
ngx_°rög
("least_conn"),

43 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

44 
ngx_hâp_up°ªam_Àa°_c⁄n
,

47 
NULL
 },

49 
ngx_nuŒ_comm™d


53 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
 = {

54 
NULL
,

55 
NULL
,

57 
NULL
,

58 
NULL
,

60 
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
,

61 
NULL
,

63 
NULL
,

64 
NULL


68 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
 = {

69 
NGX_MODULE_V1
,

70 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
,

71 
ngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
,

72 
NGX_HTTP_MODULE
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NGX_MODULE_V1_PADDING


84 
ngx_öt_t


85 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
,

86 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

88 
ngx_uöt_t
 
n
;

89 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

90 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

92 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

95 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

96  
NGX_ERROR
;

99 
≥îs
 = 
us
->
≥î
.
d©a
;

101 
n
 = 
≥îs
->
numbî
;

103 i‡(
≥îs
->
√xt
) {

104 
n
 +
≥îs
->
√xt
->
numbî
;

107 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

108 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

110 
lcf
->
c⁄ns
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_uöt_t
Ë* 
n
);

111 i‡(
lcf
->
c⁄ns
 =
NULL
) {

112  
NGX_ERROR
;

115 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
;

117  
NGX_OK
;

118 
	}
}

121 
ngx_öt_t


122 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

125 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
;

126 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

131 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

132 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

134 
l˝
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_lc_≥î_d©a_t
));

135 i‡(
l˝
 =
NULL
) {

136  
NGX_ERROR
;

139 
l˝
->
c⁄ns
 = 
lcf
->conns;

141 
r
->
up°ªam
->
≥î
.
d©a
 = &
l˝
->
ºp
;

143 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

144  
NGX_ERROR
;

147 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
;

148 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
;

150 
l˝
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

151 
l˝
->
‰ì_º_≥î
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

153  
NGX_OK
;

154 
	}
}

157 
ngx_öt_t


158 
	$ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

160 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

162 
time_t
 
now
;

163 
uöçå_t
 
m
;

164 
ngx_öt_t
 
rc
, 
tŸÆ
;

165 
ngx_uöt_t
 
i
, 
n
, 
p
, 
m™y
;

166 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

167 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

169 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

170 "gëÜó° c⁄¿≥î,Åry: %ui", 
pc
->
åõs
);

172 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

173  
l˝
->
	`gë_º_≥î
(
pc
, &l˝->
ºp
);

176 
pc
->
ˇched
 = 0;

177 
pc
->
c⁄√˘i⁄
 = 
NULL
;

179 
now
 = 
	`ngx_time
();

181 
≥îs
 = 
l˝
->
ºp
.peers;

183 
be°
 = 
NULL
;

184 
tŸÆ
 = 0;

186 #i‡(
NGX_SUPPRESS_WARN
)

187 
m™y
 = 0;

188 
p
 = 0;

191 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

193 
n
 = 
i
 / (8 * (
uöçå_t
));

194 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

196 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

200 
≥î
 = &
≥îs
->≥î[
i
];

202 i‡(
≥î
->
down
) {

206 i‡(
≥î
->
max_Áûs


207 && 
≥î
->
Áûs
 >≥î->
max_Áûs


208 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

219 i‡(
be°
 =
NULL


220 || 
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 <Ü˝->c⁄ns[
p
] * 
≥î
->weight)

222 
be°
 = 
≥î
;

223 
m™y
 = 0;

224 
p
 = 
i
;

226 } i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight


227 =
l˝
->
c⁄ns
[
p
] * 
≥î
->
weight
)

229 
m™y
 = 1;

233 i‡(
be°
 =
NULL
) {

234 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

237 
Áûed
;

240 i‡(
m™y
) {

241 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

244 
i
 = 
p
; i < 
≥îs
->
numbî
; i++) {

246 
n
 = 
i
 / (8 * (
uöçå_t
));

247 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

249 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

253 
≥î
 = &
≥îs
->≥î[
i
];

255 i‡(
≥î
->
down
) {

259 i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 !l˝->c⁄ns[
p
] * 
≥î
->weight) {

263 i‡(
≥î
->
max_Áûs


264 && 
≥î
->
Áûs
 >≥î->
max_Áûs


265 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

270 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

271 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

273 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

274 
≥î
->
ef„˘ive_weight
++;

277 i‡(
≥î
->
cuºít_weight
 > 
be°
->current_weight) {

278 
be°
 = 
≥î
;

279 
p
 = 
i
;

284 
be°
->
cuºít_weight
 -
tŸÆ
;

285 
be°
->
checked
 = 
now
;

287 
pc
->
sockaddr
 = 
be°
->sockaddr;

288 
pc
->
sockÀn
 = 
be°
->socklen;

289 
pc
->
«me
 = &
be°
->name;

291 
l˝
->
ºp
.
cuºít
 = 
p
;

293 
n
 = 
p
 / (8 * (
uöçå_t
));

294 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

296 
l˝
->
ºp
.
åõd
[
n
] |
m
;

297 
l˝
->
c⁄ns
[
p
]++;

299 i‡(
pc
->
åõs
 =1 && 
≥îs
->
√xt
) {

300 
pc
->
åõs
 +
≥îs
->
√xt
->
numbî
;

303  
NGX_OK
;

305 
Áûed
:

307 i‡(
≥îs
->
√xt
) {

308 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

311 
l˝
->
c⁄ns
 +
≥îs
->
numbî
;

313 
l˝
->
ºp
.
≥îs
 =Öìrs->
√xt
;

314 
pc
->
åõs
 = 
l˝
->
ºp
.
≥îs
->
numbî
;

316 
n
 = (
l˝
->
ºp
.
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

317 / (8 * (
uöçå_t
));

319 
i
 = 0; i < 
n
; i++) {

320 
l˝
->
ºp
.
åõd
[
i
] = 0;

323 
rc
 = 
	`ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
pc
, 
l˝
);

325 i‡(
rc
 !
NGX_BUSY
) {

326  
rc
;

332 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

333 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

336 
pc
->
«me
 = 
≥îs
->name;

338  
NGX_BUSY
;

339 
	}
}

343 
	$ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

344 *
d©a
, 
ngx_uöt_t
 
°©e
)

346 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

348 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

349 "‰ìÜó° c⁄¿≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

351 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

352 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

356 
l˝
->
c⁄ns
[l˝->
ºp
.
cuºít
]--;

358 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

359 
	}
}

363 
	$ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

365 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
c⁄f
;

367 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

368 (
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
));

369 i‡(
c⁄f
 =
NULL
) {

370  
NULL
;

379  
c⁄f
;

380 
	}
}

384 
	$ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

386 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

388 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

390 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n
;

392 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


393 |
NGX_HTTP_UPSTREAM_WEIGHT


394 |
NGX_HTTP_UPSTREAM_MAX_FAILS


395 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


396 |
NGX_HTTP_UPSTREAM_DOWN


397 |
NGX_HTTP_UPSTREAM_BACKUP
;

399  
NGX_CONF_OK
;

400 
	}
}

	@src/http/modules/ngx_http_userid_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_USERID_OFF
 0

	)

14 
	#NGX_HTTP_USERID_LOG
 1

	)

15 
	#NGX_HTTP_USERID_V1
 2

	)

16 
	#NGX_HTTP_USERID_ON
 3

	)

19 
	#NGX_HTTP_USERID_MAX_EXPIRES
 2145916555

	)

23 
ngx_uöt_t
 
	míabÀ
;

25 
ngx_öt_t
 
	m£rvi˚
;

27 
ngx_°r_t
 
	m«me
;

28 
ngx_°r_t
 
	mdomaö
;

29 
ngx_°r_t
 
	m∑th
;

30 
ngx_°r_t
 
	mp3p
;

32 
time_t
 
	mexpúes
;

34 
u_ch¨
 
	mm¨k
;

35 } 
	tngx_hâp_u£rid_c⁄f_t
;

39 
uöt32_t
 
	muid_gŸ
[4];

40 
uöt32_t
 
	muid_£t
[4];

41 
ngx_°r_t
 
	mcookõ
;

42 
ngx_uöt_t
 
	mª£t
;

43 } 
	tngx_hâp_u£rid_˘x_t
;

46 
ngx_hâp_u£rid_˘x_t
 *
ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

48 
ngx_öt_t
 
ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
);

50 
ngx_öt_t
 
ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

52 
ngx_öt_t
 
ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

55 
ngx_öt_t
 
ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

56 
ngx_öt_t
 
ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

58 *
ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

59 *
chûd
);

60 *
ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

61 *
ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

62 *
ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

65 *
ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 
ngx_öt_t
 
ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

71 
uöt32_t
 
	g°¨t_vÆue
;

72 
uöt32_t
 
	g£quí˚r_v1
 = 1;

73 
uöt32_t
 
	g£quí˚r_v2
 = 0x03030302;

76 
u_ch¨
 
	gexpúes
[] = ";Éxpires=Thu, 31-Dec-37 23:55:55 GMT";

79 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

82 
ngx_c⁄f_íum_t
 
	gngx_hâp_u£rid_°©e
[] = {

83 { 
ngx_°rög
("off"), 
NGX_HTTP_USERID_OFF
 },

84 { 
ngx_°rög
("log"), 
NGX_HTTP_USERID_LOG
 },

85 { 
ngx_°rög
("v1"), 
NGX_HTTP_USERID_V1
 },

86 { 
ngx_°rög
("⁄"), 
NGX_HTTP_USERID_ON
 },

87 { 
ngx_nuŒ_°rög
, 0 }

91 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_domaö_p
 =

92 
ngx_hâp_u£rid_domaö
;

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_∑th_p
 = 
ngx_hâp_u£rid_∑th
;

94 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_p3p_p
 = 
ngx_hâp_u£rid_p3p
;

97 
ngx_comm™d_t
 
	gngx_hâp_u£rid_comm™ds
[] = {

99 { 
ngx_°rög
("userid"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_íum_¶Ÿ
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
íabÀ
),

104 
ngx_hâp_u£rid_°©e
 },

106 { 
ngx_°rög
("userid_service"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_num_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
£rvi˚
),

111 
NULL
 },

113 { 
ngx_°rög
("userid_name"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_°r_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
«me
),

118 
NULL
 },

120 { 
ngx_°rög
("userid_domain"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_°r_¶Ÿ
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
domaö
),

125 &
ngx_hâp_u£rid_domaö_p
 },

127 { 
ngx_°rög
("userid_path"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_°r_¶Ÿ
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
∑th
),

132 &
ngx_hâp_u£rid_∑th_p
 },

134 { 
ngx_°rög
("userid_expires"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_hâp_u£rid_expúes
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("userid_p3p"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_°r_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
p3p
),

146 &
ngx_hâp_u£rid_p3p_p
 },

148 { 
ngx_°rög
("userid_mark"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_u£rid_m¨k
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_hâp_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ_˘x
 = {

160 
ngx_hâp_u£rid_add_v¨übÀs
,

161 
ngx_hâp_u£rid_öô
,

163 
NULL
,

164 
NULL
,

166 
NULL
,

167 
NULL
,

169 
ngx_hâp_u£rid_¸óã_c⁄f
,

170 
ngx_hâp_u£rid_mîge_c⁄f


174 
ngx_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_hâp_u£rid_fûãr_moduÀ_˘x
,

177 
ngx_hâp_u£rid_comm™ds
,

178 
NGX_HTTP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
ngx_hâp_u£rid_öô_w‹kî
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 
ngx_°r_t
 
	gngx_hâp_u£rid_gŸ
 = 
ngx_°rög
("uid_got");

191 
ngx_°r_t
 
	gngx_hâp_u£rid_£t
 = 
ngx_°rög
("uid_set");

192 
ngx_°r_t
 
	gngx_hâp_u£rid_ª£t
 = 
ngx_°rög
("uid_reset");

193 
ngx_uöt_t
 
	gngx_hâp_u£rid_ª£t_ödex
;

196 
ngx_öt_t


197 
	$ngx_hâp_u£rid_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

199 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

200 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

202 i‡(
r
 !r->
maö
) {

203  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

206 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

208 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

209  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

212 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
, 
c⁄f
);

214 i‡(
˘x
 =
NULL
) {

215  
NGX_ERROR
;

218 i‡(
	`ngx_hâp_u£rid_£t_uid
(
r
, 
˘x
, 
c⁄f
Ë=
NGX_OK
) {

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222  
NGX_ERROR
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_u£rid_gŸ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

228 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

230 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

231 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

233 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

235 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_OFF
) {

236 
v
->
nŸ_found
 = 1;

237  
NGX_OK
;

240 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

242 i‡(
˘x
 =
NULL
) {

243  
NGX_ERROR
;

246 i‡(
˘x
->
uid_gŸ
[3] != 0) {

247  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
);

250 
v
->
nŸ_found
 = 1;

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_hâp_u£rid_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

258 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

260 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

261 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

263 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

265 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

266 
v
->
nŸ_found
 = 1;

267  
NGX_OK
;

270 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

272 i‡(
˘x
 =
NULL
) {

273  
NGX_ERROR
;

276 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
->
maö
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

277  
NGX_ERROR
;

280 i‡(
˘x
->
uid_£t
[3] == 0) {

281 
v
->
nŸ_found
 = 1;

282  
NGX_OK
;

285  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_£t
);

286 
	}
}

289 
ngx_hâp_u£rid_˘x_t
 *

290 
	$ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

292 
ngx_öt_t
 
n
;

293 
ngx_°r_t
 
§c
, 
d°
;

294 
ngx_èbÀ_ñt_t
 **
cookõs
;

295 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

297 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

299 i‡(
˘x
) {

300  
˘x
;

303 i‡(
˘x
 =
NULL
) {

304 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_u£rid_˘x_t
));

305 i‡(
˘x
 =
NULL
) {

306  
NULL
;

309 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

312 
n
 = 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
c⁄f
->
«me
,

313 &
˘x
->
cookõ
);

314 i‡(
n
 =
NGX_DECLINED
) {

315  
˘x
;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "uid cookõ: \"%V\"", &
˘x
->
cookõ
);

321 i‡(
˘x
->
cookõ
.
Àn
 < 22) {

322 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

323 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

325 &
cookõs
[
n
]->
vÆue
);

326  
˘x
;

329 
§c
 = 
˘x
->
cookõ
;

338 
§c
.
Àn
 = 22;

340 
d°
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_gŸ
;

342 i‡(
	`ngx_decode_ba£64
(&
d°
, &
§c
Ë=
NGX_ERROR
) {

343 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

344 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

346 &
cookõs
[
n
]->
vÆue
);

347  
˘x
;

350 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

353 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

355  
˘x
;

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

361 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

363 
u_ch¨
 *
cookõ
, *
p
;

364 
size_t
 
Àn
;

365 
ngx_°r_t
 
§c
, 
d°
;

366 
ngx_èbÀ_ñt_t
 *
£t_cookõ
, *
p3p
;

368 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

369  
NGX_ERROR
;

372 i‡(
˘x
->
uid_£t
[3] == 0) {

373  
NGX_OK
;

376 
Àn
 = 
c⁄f
->
«me
.À¿+ 1 + 
	`ngx_ba£64_ícoded_Àngth
(16Ë+ c⁄f->
∑th
.len;

378 i‡(
c⁄f
->
expúes
) {

379 
Àn
 +(
expúes
) - 1 + 2;

382 i‡(
c⁄f
->
domaö
.
Àn
) {

383 
Àn
 +
c⁄f
->
domaö
.len;

386 
cookõ
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

387 i‡(
cookõ
 =
NULL
) {

388  
NGX_ERROR
;

391 
p
 = 
	`ngx_c›y
(
cookõ
, 
c⁄f
->
«me
.
d©a
, c⁄f->«me.
Àn
);

392 *
p
++ = '=';

394 i‡(
˘x
->
uid_gŸ
[3] =0 || ctx->
ª£t
) {

395 
§c
.
Àn
 = 16;

396 
§c
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_£t
;

397 
d°
.
d©a
 = 
p
;

399 
	`ngx_ícode_ba£64
(&
d°
, &
§c
);

401 
p
 +
d°
.
Àn
;

403 i‡(
c⁄f
->
m¨k
) {

404 *(
p
 - 2Ë
c⁄f
->
m¨k
;

408 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
cookõ
.
d©a
, 22);

409 *
p
++ = 
c⁄f
->
m¨k
;

410 *
p
++ = '=';

413 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_USERID_MAX_EXPIRES
) {

414 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (expires) - 1);

416 } i‡(
c⁄f
->
expúes
) {

417 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (";Éxpires=") - 1);

418 
p
 = 
	`ngx_hâp_cookõ_time
’, 
	`ngx_time
(Ë+ 
c⁄f
->
expúes
);

421 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
domaö
.
d©a
, c⁄f->domaö.
Àn
);

423 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
∑th
.
d©a
, c⁄f->∑th.
Àn
);

425 
£t_cookõ
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

426 i‡(
£t_cookõ
 =
NULL
) {

427  
NGX_ERROR
;

430 
£t_cookõ
->
hash
 = 1;

431 
	`ngx_°r_£t
(&
£t_cookõ
->
key
, "Set-Cookie");

432 
£t_cookõ
->
vÆue
.
Àn
 = 
p
 - 
cookõ
;

433 
£t_cookõ
->
vÆue
.
d©a
 = 
cookõ
;

435 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

436 "uid cookõ: \"%V\"", &
£t_cookõ
->
vÆue
);

438 i‡(
c⁄f
->
p3p
.
Àn
 == 0) {

439  
NGX_OK
;

442 
p3p
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

443 i‡(
p3p
 =
NULL
) {

444  
NGX_ERROR
;

447 
p3p
->
hash
 = 1;

448 
	`ngx_°r_£t
(&
p3p
->
key
, "P3P");

449 
p3p
->
vÆue
 = 
c⁄f
->p3p;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

457 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

459 
ngx_c⁄√˘i⁄_t
 *
c
;

460 
sockaddr_ö
 *
sö
;

461 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

462 #i‡(
NGX_HAVE_INET6
)

463 
u_ch¨
 *
p
;

464 
sockaddr_ö6
 *
sö6
;

467 i‡(
˘x
->
uid_£t
[3] != 0) {

468  
NGX_OK
;

471 i‡(
˘x
->
uid_gŸ
[3] != 0) {

473 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ngx_hâp_u£rid_ª£t_ödex
);

475 i‡(
vv
->
Àn
 =0 || (vv->À¿=1 && vv->
d©a
[0] == '0')) {

477 i‡(
c⁄f
->
m¨k
 == '\0'

478 || (
˘x
->
cookõ
.
Àn
 > 23

479 && 
˘x
->
cookõ
.
d©a
[22] =
c⁄f
->
m¨k


480 && 
˘x
->
cookõ
.
d©a
[23] == '='))

482  
NGX_OK
;

485 
˘x
->
uid_£t
[0] = ctx->
uid_gŸ
[0];

486 
˘x
->
uid_£t
[1] = ctx->
uid_gŸ
[1];

487 
˘x
->
uid_£t
[2] = ctx->
uid_gŸ
[2];

488 
˘x
->
uid_£t
[3] = ctx->
uid_gŸ
[3];

490  
NGX_OK
;

493 
˘x
->
ª£t
 = 1;

495 i‡(
vv
->
Àn
 =3 && 
	`ngx_°∫cmp
(vv->
d©a
, "log", 3) == 0) {

496 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

499 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

509 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_V1
) {

510 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

511 
˘x
->
uid_£t
[0] = 0;

513 
˘x
->
uid_£t
[0] = 
c⁄f
->
£rvi˚
;

515 
˘x
->
uid_£t
[1] = (
uöt32_t
Ë
	`ngx_time
();

516 
˘x
->
uid_£t
[2] = 
°¨t_vÆue
;

517 
˘x
->
uid_£t
[3] = 
£quí˚r_v1
;

518 
£quí˚r_v1
 += 0x100;

521 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

523 
c
 = 
r
->
c⁄√˘i⁄
;

525 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

526  
NGX_ERROR
;

529 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

531 #i‡(
NGX_HAVE_INET6
)

532 
AF_INET6
:

533 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

535 
p
 = (
u_ch¨
 *Ë&
˘x
->
uid_£t
[0];

537 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[12];

538 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[13];

539 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[14];

540 *
p
 = 
sö6
->
sö6_addr
.
s6_addr
[15];

545 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

546 
˘x
->
uid_£t
[0] = 
sö
->
sö_addr
.
s_addr
;

551 
˘x
->
uid_£t
[0] = 
	`ht⁄l
(
c⁄f
->
£rvi˚
);

554 
˘x
->
uid_£t
[1] = 
	`ht⁄l
((
uöt32_t
Ë
	`ngx_time
());

555 
˘x
->
uid_£t
[2] = 
	`ht⁄l
(
°¨t_vÆue
);

556 
˘x
->
uid_£t
[3] = 
	`ht⁄l
(
£quí˚r_v2
);

557 
£quí˚r_v2
 += 0x100;

558 i‡(
£quí˚r_v2
 < 0x03030302) {

559 
£quí˚r_v2
 = 0x03030302;

563  
NGX_OK
;

564 
	}
}

567 
ngx_öt_t


568 
	$ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

569 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
)

571 
v
->
Àn
 = 
«me
->len + ("=00001111222233334444555566667777") - 1;

572 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

573 i‡(
v
->
d©a
 =
NULL
) {

574  
NGX_ERROR
;

577 
v
->
vÆid
 = 1;

578 
v
->
no_ˇchóbÀ
 = 0;

579 
v
->
nŸ_found
 = 0;

581 
	`ngx_•rötf
(
v
->
d©a
, "%V=%08XD%08XD%08XD%08XD",

582 
«me
, 
uid
[0], uid[1], uid[2], uid[3]);

584  
NGX_OK
;

585 
	}
}

588 
ngx_öt_t


589 
	$ngx_hâp_u£rid_ª£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

590 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

592 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

594  
NGX_OK
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

601 
ngx_öt_t
 
n
;

602 
ngx_hâp_v¨übÀ_t
 *
v¨
;

604 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_gŸ
, 0);

605 i‡(
v¨
 =
NULL
) {

606  
NGX_ERROR
;

609 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_gŸ_v¨übÀ
;

611 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_£t
, 0);

612 i‡(
v¨
 =
NULL
) {

613  
NGX_ERROR
;

616 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_£t_v¨übÀ
;

618 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_ª£t
,

619 
NGX_HTTP_VAR_CHANGEABLE
);

620 i‡(
v¨
 =
NULL
) {

621  
NGX_ERROR
;

624 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_ª£t_v¨übÀ
;

626 
n
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_u£rid_ª£t
);

627 i‡(
n
 =
NGX_ERROR
) {

628  
NGX_ERROR
;

631 
ngx_hâp_u£rid_ª£t_ödex
 = 
n
;

633  
NGX_OK
;

634 
	}
}

638 
	$ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

640 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

642 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_u£rid_c⁄f_t
));

643 i‡(
c⁄f
 =
NULL
) {

644  
NULL
;

656 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

657 
c⁄f
->
£rvi˚
 = 
NGX_CONF_UNSET
;

658 
c⁄f
->
expúes
 = 
NGX_CONF_UNSET
;

659 
c⁄f
->
m¨k
 = (
u_ch¨
) '\xFF';

661  
c⁄f
;

662 
	}
}

666 
	$ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

668 
ngx_hâp_u£rid_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

669 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
 = 
chûd
;

671 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

672 
NGX_HTTP_USERID_OFF
);

674 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
«me
, 
¥ev
->name, "uid");

675 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
domaö
, 
¥ev
->domain, "");

676 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, ";Öath=/");

677 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
p3p
, 
¥ev
->p3p, "");

679 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvi˚
, 
¥ev
->£rvi˚, 
NGX_CONF_UNSET
);

680 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
expúes
, 
¥ev
->expires, 0);

682 i‡(
c⁄f
->
m¨k
 =(
u_ch¨
) '\xFF') {

683 i‡(
¥ev
->
m¨k
 =(
u_ch¨
) '\xFF') {

684 
c⁄f
->
m¨k
 = '\0';

686 
c⁄f
->
m¨k
 = 
¥ev
->mark;

690  
NGX_CONF_OK
;

691 
	}
}

694 
ngx_öt_t


695 
	$ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
)

697 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

698 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_u£rid_fûãr
;

700  
NGX_OK
;

701 
	}
}

705 
	$ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

707 
ngx_°r_t
 *
domaö
 = 
d©a
;

709 
u_ch¨
 *
p
, *
√w
;

711 i‡(
	`ngx_°rcmp
(
domaö
->
d©a
, "none") == 0) {

712 
	`ngx_°r_£t
(
domaö
, "");

713  
NGX_CONF_OK
;

716 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, ("; domaö="Ë- 1 + 
domaö
->
Àn
);

717 i‡(
√w
 =
NULL
) {

718  
NGX_CONF_ERROR
;

721 
p
 = 
	`ngx_˝ymem
(
√w
, "; domain=", ("; domain=") - 1);

722 
	`ngx_mem˝y
(
p
, 
domaö
->
d©a
, domaö->
Àn
);

724 
domaö
->
Àn
 += ("; domain=") - 1;

725 
domaö
->
d©a
 = 
√w
;

727  
NGX_CONF_OK
;

728 
	}
}

732 
	$ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

734 
ngx_°r_t
 *
∑th
 = 
d©a
;

736 
u_ch¨
 *
p
, *
√w
;

738 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, (";Ö©h="Ë- 1 + 
∑th
->
Àn
);

739 i‡(
√w
 =
NULL
) {

740  
NGX_CONF_ERROR
;

743 
p
 = 
	`ngx_˝ymem
(
√w
, ";Öath=", (";Öath=") - 1);

744 
	`ngx_mem˝y
(
p
, 
∑th
->
d©a
,Ö©h->
Àn
);

746 
∑th
->
Àn
 += (";Öath=") - 1;

747 
∑th
->
d©a
 = 
√w
;

749  
NGX_CONF_OK
;

750 
	}
}

754 
	$ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

756 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

758 
ngx_°r_t
 *
vÆue
;

760 i‡(
ucf
->
expúes
 !
NGX_CONF_UNSET
) {

764 
vÆue
 = 
cf
->
¨gs
->
ñts
;

766 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

767 
ucf
->
expúes
 = 
NGX_HTTP_USERID_MAX_EXPIRES
;

768  
NGX_CONF_OK
;

771 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

772 
ucf
->
expúes
 = 0;

773  
NGX_CONF_OK
;

776 
ucf
->
expúes
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

777 i‡(
ucf
->
expúes
 =(
time_t
Ë
NGX_ERROR
) {

781  
NGX_CONF_OK
;

782 
	}
}

786 
	$ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

788 
ngx_°r_t
 *
p3p
 = 
d©a
;

790 i‡(
	`ngx_°rcmp
(
p3p
->
d©a
, "none") == 0) {

791 
	`ngx_°r_£t
(
p3p
, "");

794  
NGX_CONF_OK
;

795 
	}
}

799 
	$ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

801 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

803 
ngx_°r_t
 *
vÆue
;

805 i‡(
ucf
->
m¨k
 !(
u_ch¨
) '\xFF') {

809 
vÆue
 = 
cf
->
¨gs
->
ñts
;

811 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

812 
ucf
->
m¨k
 = '\0';

813  
NGX_CONF_OK
;

816 i‡(
vÆue
[1].
Àn
 != 1

817 || !((
vÆue
[1].
d©a
[0] >= '0' && value[1].data[0] <= '9')

818 || (
vÆue
[1].
d©a
[0] >= 'A' && value[1].data[0] <= 'Z')

819 || (
vÆue
[1].
d©a
[0] >= 'a' && value[1].data[0] <= 'z')

820 || 
vÆue
[1].
d©a
[0] == '='))

825 
ucf
->
m¨k
 = 
vÆue
[1].
d©a
[0];

827  
NGX_CONF_OK
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

834 
timevÆ
 
ç
;

836 
	`ngx_gëtimeofday
(&
ç
);

839 
°¨t_vÆue
 = ((
ç
.
tv_u£c
 / 20Ë<< 16Ë| 
ngx_pid
;

841  
NGX_OK
;

842 
	}
}

	@src/http/modules/ngx_http_uwsgi_module.c

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~<ngx_hâp.h
>

16 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

23 
ngx_hash_t
 
	mhódîs_hash
;

24 
ngx_uöt_t
 
	mhódî_∑øms
;

26 
ngx_¨øy_t
 *
	muwsgi_Àngths
;

27 
ngx_¨øy_t
 *
	muwsgi_vÆues
;

29 #i‡(
NGX_HTTP_CACHE
)

30 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

33 
ngx_°r_t
 
	muwsgi_°rög
;

35 
ngx_uöt_t
 
	mmodifõr1
;

36 
ngx_uöt_t
 
	mmodifõr2
;

37 } 
	tngx_hâp_uwsgi_loc_c⁄f_t
;

40 
ngx_öt_t
 
ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

42 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

43 
ngx_öt_t
 
ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

47 
ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_öt_t
 
rc
);

50 *
ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

52 *
chûd
);

53 
ngx_öt_t
 
ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

54 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_uwsgi_loc_c⁄f_à*
¥ev
);

56 *
ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

57 *
c⁄f
);

58 *
ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

59 *
c⁄f
);

61 #i‡(
NGX_HTTP_CACHE
)

62 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

63 *
ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

64 *
c⁄f
);

65 *
ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

70 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_uwsgi_modifõr_bounds
 = {

71 
ngx_c⁄f_check_num_bounds
, 0, 255

75 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_√xt_up°ªam_masks
[] = {

76 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

77 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

78 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

79 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

80 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

81 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

82 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

83 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

84 { 
ngx_nuŒ_°rög
, 0 }

88 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
;

91 
ngx_comm™d_t
 
	gngx_hâp_uwsgi_comm™ds
[] = {

93 { 
ngx_°rög
("uwsgi_pass"),

94 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_hâp_uwsgi_∑ss
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
NULL
 },

100 { 
ngx_°rög
("uwsgi_modifier1"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

102 
ngx_c⁄f_£t_num_¶Ÿ
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr1
),

105 &
ngx_hâp_uwsgi_modifõr_bounds
 },

107 { 
ngx_°rög
("uwsgi_modifier2"),

108 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_num_¶Ÿ
,

110 
NGX_HTTP_LOC_CONF_OFFSET
,

111 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr2
),

112 &
ngx_hâp_uwsgi_modifõr_bounds
 },

114 { 
ngx_°rög
("uwsgi_store"),

115 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_hâp_uwsgi_°‹e
,

117 
NGX_HTTP_LOC_CONF_OFFSET
,

119 
NULL
 },

121 { 
ngx_°rög
("uwsgi_store_access"),

122 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

123 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

124 
NGX_HTTP_LOC_CONF_OFFSET
,

125 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

126 
NULL
 },

128 { 
ngx_°rög
("uwsgi_buffering"),

129 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

130 
ngx_c⁄f_£t_Êag_¶Ÿ
,

131 
NGX_HTTP_LOC_CONF_OFFSET
,

132 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

133 
NULL
 },

135 { 
ngx_°rög
("uwsgi_ignore_client_abort"),

136 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

137 
ngx_c⁄f_£t_Êag_¶Ÿ
,

138 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

140 
NULL
 },

142 { 
ngx_°rög
("uwsgi_bind"),

143 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

144 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

145 
NGX_HTTP_LOC_CONF_OFFSET
,

146 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

147 
NULL
 },

149 { 
ngx_°rög
("uwsgi_connect_timeout"),

150 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

151 
ngx_c⁄f_£t_m£c_¶Ÿ
,

152 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

154 
NULL
 },

156 { 
ngx_°rög
("uwsgi_send_timeout"),

157 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

158 
ngx_c⁄f_£t_m£c_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

161 
NULL
 },

163 { 
ngx_°rög
("uwsgi_buffer_size"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

165 
ngx_c⁄f_£t_size_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

168 
NULL
 },

170 { 
ngx_°rög
("uwsgi_pass_request_headers"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

172 
ngx_c⁄f_£t_Êag_¶Ÿ
,

173 
NGX_HTTP_LOC_CONF_OFFSET
,

174 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

175 
NULL
 },

177 { 
ngx_°rög
("uwsgi_pass_request_body"),

178 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

179 
ngx_c⁄f_£t_Êag_¶Ÿ
,

180 
NGX_HTTP_LOC_CONF_OFFSET
,

181 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

182 
NULL
 },

184 { 
ngx_°rög
("uwsgi_intercept_errors"),

185 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

186 
ngx_c⁄f_£t_Êag_¶Ÿ
,

187 
NGX_HTTP_LOC_CONF_OFFSET
,

188 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

189 
NULL
 },

191 { 
ngx_°rög
("uwsgi_read_timeout"),

192 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

193 
ngx_c⁄f_£t_m£c_¶Ÿ
,

194 
NGX_HTTP_LOC_CONF_OFFSET
,

195 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

196 
NULL
 },

198 { 
ngx_°rög
("uwsgi_buffers"),

199 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

200 
ngx_c⁄f_£t_bufs_¶Ÿ
,

201 
NGX_HTTP_LOC_CONF_OFFSET
,

202 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

203 
NULL
 },

205 { 
ngx_°rög
("uwsgi_busy_buffers_size"),

206 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

207 
ngx_c⁄f_£t_size_¶Ÿ
,

208 
NGX_HTTP_LOC_CONF_OFFSET
,

209 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

210 
NULL
 },

212 #i‡(
NGX_HTTP_CACHE
)

214 { 
ngx_°rög
("uwsgi_cache"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

216 
ngx_hâp_uwsgi_ˇche
,

217 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
NULL
 },

221 { 
ngx_°rög
("uwsgi_cache_key"),

222 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

223 
ngx_hâp_uwsgi_ˇche_key
,

224 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
NULL
 },

228 { 
ngx_°rög
("uwsgi_cache_path"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

230 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

233 &
ngx_hâp_uwsgi_moduÀ
 },

235 { 
ngx_°rög
("uwsgi_cache_bypass"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

237 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

239 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

240 
NULL
 },

242 { 
ngx_°rög
("uwsgi_no_cache"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

244 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

246 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

247 
NULL
 },

249 { 
ngx_°rög
("uwsgi_cache_valid"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

251 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

253 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

254 
NULL
 },

256 { 
ngx_°rög
("uwsgi_cache_min_uses"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

258 
ngx_c⁄f_£t_num_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

261 
NULL
 },

263 { 
ngx_°rög
("uwsgi_cache_use_stale"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

265 
ngx_c⁄f_£t_bômask_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

268 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

270 { 
ngx_°rög
("uwsgi_cache_methods"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

272 
ngx_c⁄f_£t_bômask_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

275 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

277 { 
ngx_°rög
("uwsgi_cache_lock"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

279 
ngx_c⁄f_£t_Êag_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

282 
NULL
 },

284 { 
ngx_°rög
("uwsgi_cache_lock_timeout"),

285 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

286 
ngx_c⁄f_£t_m£c_¶Ÿ
,

287 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

289 
NULL
 },

293 { 
ngx_°rög
("uwsgi_temp_path"),

294 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

295 
ngx_c⁄f_£t_∑th_¶Ÿ
,

296 
NGX_HTTP_LOC_CONF_OFFSET
,

297 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

298 
NULL
 },

300 { 
ngx_°rög
("uwsgi_max_temp_file_size"),

301 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

302 
ngx_c⁄f_£t_size_¶Ÿ
,

303 
NGX_HTTP_LOC_CONF_OFFSET
,

304 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

305 
NULL
 },

307 { 
ngx_°rög
("uwsgi_temp_file_write_size"),

308 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

309 
ngx_c⁄f_£t_size_¶Ÿ
,

310 
NGX_HTTP_LOC_CONF_OFFSET
,

311 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

312 
NULL
 },

314 { 
ngx_°rög
("uwsgi_next_upstream"),

315 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

316 
ngx_c⁄f_£t_bômask_¶Ÿ
,

317 
NGX_HTTP_LOC_CONF_OFFSET
,

318 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

319 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

321 { 
ngx_°rög
("uwsgi_param"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

323 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

324 
NGX_HTTP_LOC_CONF_OFFSET
,

325 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
∑øms_sour˚
),

326 
NULL
 },

328 { 
ngx_°rög
("uwsgi_string"),

329 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

330 
ngx_c⁄f_£t_°r_¶Ÿ
,

331 
NGX_HTTP_LOC_CONF_OFFSET
,

332 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
uwsgi_°rög
),

333 
NULL
 },

335 { 
ngx_°rög
("uwsgi_pass_header"),

336 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

337 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

338 
NGX_HTTP_LOC_CONF_OFFSET
,

339 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

340 
NULL
 },

342 { 
ngx_°rög
("uwsgi_hide_header"),

343 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

344 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

345 
NGX_HTTP_LOC_CONF_OFFSET
,

346 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

347 
NULL
 },

349 { 
ngx_°rög
("uwsgi_ignore_headers"),

350 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

351 
ngx_c⁄f_£t_bômask_¶Ÿ
,

352 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

354 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

356 
ngx_nuŒ_comm™d


360 
ngx_hâp_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ_˘x
 = {

361 
NULL
,

362 
NULL
,

364 
NULL
,

365 
NULL
,

367 
NULL
,

368 
NULL
,

370 
ngx_hâp_uwsgi_¸óã_loc_c⁄f
,

371 
ngx_hâp_uwsgi_mîge_loc_c⁄f


375 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
 = {

376 
NGX_MODULE_V1
,

377 &
ngx_hâp_uwsgi_moduÀ_˘x
,

378 
ngx_hâp_uwsgi_comm™ds
,

379 
NGX_HTTP_MODULE
,

380 
NULL
,

381 
NULL
,

382 
NULL
,

383 
NULL
,

384 
NULL
,

385 
NULL
,

386 
NULL
,

387 
NGX_MODULE_V1_PADDING


391 
ngx_°r_t
 
	gngx_hâp_uwsgi_hide_hódîs
[] = {

392 
ngx_°rög
("X-Accel-Expires"),

393 
ngx_°rög
("X-Accel-Redirect"),

394 
ngx_°rög
("X-Accel-Limit-Rate"),

395 
ngx_°rög
("X-Accel-Buffering"),

396 
ngx_°rög
("X-Accel-Charset"),

397 
ngx_nuŒ_°rög


401 #i‡(
NGX_HTTP_CACHE
)

403 
ngx_keyvÆ_t
 
	gngx_hâp_uwsgi_ˇche_hódîs
[] = {

404 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

405 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

406 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

407 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

408 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

409 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

410 { 
ngx_nuŒ_°rög
,Çgx_null_string }

416 
ngx_∑th_öô_t
 
	gngx_hâp_uwsgi_ãmp_∑th
 = {

417 
ngx_°rög
(
NGX_HTTP_UWSGI_TEMP_PATH
), { 1, 2, 0 }

421 
ngx_öt_t


422 
	$ngx_hâp_uwsgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

424 
ngx_öt_t
 
rc
;

425 
ngx_hâp_°©us_t
 *
°©us
;

426 
ngx_hâp_up°ªam_t
 *
u
;

427 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

429 i‡(
r
->
subªque°_ö_mem‹y
) {

430 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

433  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

436 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

437  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

440 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

441 i‡(
°©us
 =
NULL
) {

442  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

445 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_uwsgi_moduÀ
);

447 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

449 i‡(
uwcf
->
uwsgi_Àngths
) {

450 i‡(
	`ngx_hâp_uwsgi_evÆ
(
r
, 
uwcf
Ë!
NGX_OK
) {

451  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

455 
u
 = 
r
->
up°ªam
;

457 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

458 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_uwsgi_moduÀ
;

460 
u
->
c⁄f
 = &
uwcf
->
up°ªam
;

462 #i‡(
NGX_HTTP_CACHE
)

463 
u
->
¸óã_key
 = 
ngx_hâp_uwsgi_¸óã_key
;

465 
u
->
¸óã_ªque°
 = 
ngx_hâp_uwsgi_¸óã_ªque°
;

466 
u
->
ªöô_ªque°
 = 
ngx_hâp_uwsgi_ªöô_ªque°
;

467 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

468 
u
->
ab‹t_ªque°
 = 
ngx_hâp_uwsgi_ab‹t_ªque°
;

469 
u
->
föÆize_ªque°
 = 
ngx_hâp_uwsgi_föÆize_ªque°
;

470 
r
->
°©e
 = 0;

472 
u
->
buf„rög
 = 
uwcf
->
up°ªam
.buffering;

474 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

475 i‡(
u
->
pùe
 =
NULL
) {

476  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

479 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

480 
u
->
pùe
->
öput_˘x
 = 
r
;

482 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

484 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

485  
rc
;

488  
NGX_DONE
;

489 
	}
}

492 
ngx_öt_t


493 
	$ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 * 
uwcf
)

495 
ngx_uæ_t
 
uæ
;

496 
ngx_hâp_up°ªam_t
 *
u
;

498 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

500 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
uwcf
->
uwsgi_Àngths
->
ñts
, 0,

501 
uwcf
->
uwsgi_vÆues
->
ñts
)

502 =
NULL
)

504  
NGX_ERROR
;

507 
uæ
.
no_ªsﬁve
 = 1;

509 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

510 i‡(
uæ
.
îr
) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

512 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

515  
NGX_ERROR
;

518 
u
 = 
r
->
up°ªam
;

520 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

521 i‡(
u
->
ªsﬁved
 =
NULL
) {

522  
NGX_ERROR
;

525 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

526 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

527 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

528 
u
->
ªsﬁved
->
«ddrs
 = 1;

529 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

532 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

533 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

534 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

537  
NGX_OK
;

538 
	}
}

541 #i‡(
NGX_HTTP_CACHE
)

543 
ngx_öt_t


544 
	$ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

546 
ngx_°r_t
 *
key
;

547 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

549 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

550 i‡(
key
 =
NULL
) {

551  
NGX_ERROR
;

554 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

556 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
uwcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

557  
NGX_ERROR
;

560  
NGX_OK
;

561 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

569 
u_ch¨
 
ch
, *
lowˇ£_key
;

570 
size_t
 
key_Àn
, 
vÆ_Àn
, 
Àn
, 
Æloˇãd
;

571 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

572 
ngx_buf_t
 *
b
;

573 
ngx_chaö_t
 *
˛
, *
body
;

574 
ngx_li°_∑π_t
 *
∑π
;

575 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

576 
ngx_hâp_s¸ùt_code_±
 
code
;

577 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

578 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

579 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

581 
Àn
 = 0;

582 
hódî_∑øms
 = 0;

583 
ign‹ed
 = 
NULL
;

585 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

587 i‡(
uwcf
->
∑øms_Àn
) {

588 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

590 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
uwcf
->
Êushes
);

591 
À
.
Êushed
 = 1;

593 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

594 
À
.
ªque°
 = 
r
;

596 *(
uöçå_t
 *Ë
À
.
ù
) {

598 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

599 
key_Àn
 = 
	`lcode
(&
À
);

601 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

602 
skù_em±y
 = 
	`lcode
(&
À
);

604 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
 (&le)) {

605 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

607 
À
.
ù
 +(
uöçå_t
);

609 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

613 
Àn
 +2 + 
key_Àn
 + 2 + 
vÆ_Àn
;

617 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

619 
Æloˇãd
 = 0;

620 
lowˇ£_key
 = 
NULL
;

622 i‡(
uwcf
->
hódî_∑øms
) {

623 
n
 = 0;

624 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

626 
∑π
) {

627 
n
 +
∑π
->
√…s
;

628 
∑π
 =Ö¨t->
√xt
;

631 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

632 i‡(
ign‹ed
 =
NULL
) {

633  
NGX_ERROR
;

637 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

638 
hódî
 = 
∑π
->
ñts
;

640 
i
 = 0; ; i++) {

642 i‡(
i
 >
∑π
->
√…s
) {

643 i‡(
∑π
->
√xt
 =
NULL
) {

647 
∑π
 =Ö¨t->
√xt
;

648 
hódî
 = 
∑π
->
ñts
;

649 
i
 = 0;

652 i‡(
uwcf
->
hódî_∑øms
) {

653 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

654 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

655 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

656 i‡(
lowˇ£_key
 =
NULL
) {

657  
NGX_ERROR
;

661 
hash
 = 0;

663 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

664 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

666 i‡(
ch
 >= 'A' && ch <= 'Z') {

667 
ch
 |= 0x20;

669 } i‡(
ch
 == '-') {

670 
ch
 = '_';

673 
hash
 = 
	`ngx_hash
(hash, 
ch
);

674 
lowˇ£_key
[
n
] = 
ch
;

677 i‡(
	`ngx_hash_föd
(&
uwcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

678 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

683 
Àn
 +2 + ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len

684 + 2 + 
hódî
[
i
].
vÆue
.
Àn
;

688 
Àn
 +
uwcf
->
uwsgi_°rög
.len;

692 i‡(
Àn
 > 0 &&Üen < 2) {

693 
	`ngx_log_îr‹
 (
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

694 "uwsgòªque° i†toÿlôée: %uz", 
Àn
);

695  
NGX_ERROR
;

699 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
 + 4);

700 i‡(
b
 =
NULL
) {

701  
NGX_ERROR
;

704 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

705 i‡(
˛
 =
NULL
) {

706  
NGX_ERROR
;

709 
˛
->
buf
 = 
b
;

711 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr1
;

712 *
b
->
œ°
++ = (
u_ch¨
Ë(
Àn
 & 0xff);

713 *
b
->
œ°
++ = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

714 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr2
;

716 i‡(
uwcf
->
∑øms_Àn
) {

717 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

719 
e
.
ù
 = 
uwcf
->
∑øms
->
ñts
;

720 
e
.
pos
 = 
b
->
œ°
;

721 
e
.
ªque°
 = 
r
;

722 
e
.
Êushed
 = 1;

724 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

726 *(
uöçå_t
 *Ë
À
.
ù
) {

728 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

729 
key_Àn
 = (
u_ch¨
Ë
	`lcode
 (&
À
);

731 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

732 
skù_em±y
 = 
	`lcode
(&
À
);

734 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

735 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

737 
À
.
ù
 +(
uöçå_t
);

739 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

740 
e
.
skù
 = 1;

742 *(
uöçå_t
 *Ë
e
.
ù
) {

743 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

744 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

746 
e
.
ù
 +(
uöçå_t
);

748 
e
.
skù
 = 0;

753 *
e
.
pos
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

754 *
e
.
pos
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

756 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

757 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

759 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

760 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

762 *(
uöçå_t
 *Ë
e
.
ù
) {

763 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

764 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

767 
e
.
ù
 +(
uöçå_t
);

769 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

771 
key_Àn
, 
e
.
pos
 - (key_À¿+ 2 + 
vÆ_Àn
),

772 
vÆ_Àn
, 
e
.
pos
 - val_len);

775 
b
->
œ°
 = 
e
.
pos
;

778 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

780 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

781 
hódî
 = 
∑π
->
ñts
;

783 
i
 = 0; ; i++) {

785 i‡(
i
 >
∑π
->
√…s
) {

786 i‡(
∑π
->
√xt
 =
NULL
) {

790 
∑π
 =Ö¨t->
√xt
;

791 
hódî
 = 
∑π
->
ñts
;

792 
i
 = 0;

795 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

796 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

797 
√xt
;

801 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

802 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

803 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

805 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

806 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

807 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

809 i‡(
ch
 >= 'a' && ch <= 'z') {

810 
ch
 &= ~0x20;

812 } i‡(
ch
 == '-') {

813 
ch
 = '_';

816 *
b
->
œ°
++ = 
ch
;

819 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

820 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

821 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

822 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

824 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

826 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 2 + 
vÆ_Àn
),

827 
vÆ_Àn
, 
b
->
œ°
 - val_len);

828 
√xt
:

834 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
uwcf
->
uwsgi_°rög
.
d©a
,

835 
uwcf
->
uwsgi_°rög
.
Àn
);

837 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_body
) {

838 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

839 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

841 
body
) {

842 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

843 i‡(
b
 =
NULL
) {

844  
NGX_ERROR
;

847 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

849 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

850 i‡(
˛
->
√xt
 =
NULL
) {

851  
NGX_ERROR
;

854 
˛
 = cl->
√xt
;

855 
˛
->
buf
 = 
b
;

857 
body
 = body->
√xt
;

861 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

864 
˛
->
√xt
 = 
NULL
;

866  
NGX_OK
;

867 
	}
}

870 
ngx_öt_t


871 
	$ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

873 
ngx_hâp_°©us_t
 *
°©us
;

875 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

877 i‡(
°©us
 =
NULL
) {

878  
NGX_OK
;

881 
°©us
->
code
 = 0;

882 
°©us
->
cou¡
 = 0;

883 
°©us
->
°¨t
 = 
NULL
;

884 
°©us
->
íd
 = 
NULL
;

886 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

887 
r
->
°©e
 = 0;

889  
NGX_OK
;

890 
	}
}

893 
ngx_öt_t


894 
	$ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

896 
size_t
 
Àn
;

897 
ngx_öt_t
 
rc
;

898 
ngx_hâp_°©us_t
 *
°©us
;

899 
ngx_hâp_up°ªam_t
 *
u
;

901 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

903 i‡(
°©us
 =
NULL
) {

904  
NGX_ERROR
;

907 
u
 = 
r
->
up°ªam
;

909 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

911 i‡(
rc
 =
NGX_AGAIN
) {

912  
rc
;

915 i‡(
rc
 =
NGX_ERROR
) {

916 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

917  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

920 i‡(
u
->
°©e
) {

921 
u
->
°©e
->
°©us
 = sètus->
code
;

924 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

926 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

927 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

929 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

930 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

931  
NGX_ERROR
;

934 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

936 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

938 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

940 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

942  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

943 
	}
}

946 
ngx_öt_t


947 
	$ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

949 
ngx_°r_t
 *
°©us_löe
;

950 
ngx_öt_t
 
rc
, 
°©us
;

951 
ngx_èbÀ_ñt_t
 *
h
;

952 
ngx_hâp_up°ªam_t
 *
u
;

953 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

954 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

956 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

960 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

962 i‡(
rc
 =
NGX_OK
) {

966 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

967 i‡(
h
 =
NULL
) {

968  
NGX_ERROR
;

971 
h
->
hash
 = 
r
->
hódî_hash
;

973 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

974 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

976 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

977 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

978 + 
h
->
key
.
Àn
);

979 i‡(
h
->
key
.
d©a
 =
NULL
) {

980  
NGX_ERROR
;

983 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

984 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

986 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

987 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

988 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

989 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

991 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

992 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

995 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

998 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

999 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1001 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1002  
NGX_ERROR
;

1005 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1006 "hâ∞uwsgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

1011 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1015 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1018 
u
 = 
r
->
up°ªam
;

1020 i‡(
u
->
hódîs_ö
.
°©us_n
) {

1021  
NGX_OK
;

1024 i‡(
u
->
hódîs_ö
.
°©us
) {

1025 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1027 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1028 i‡(
°©us
 =
NGX_ERROR
) {

1029 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1031 
°©us_löe
);

1032  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1035 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1036 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1038 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1039 
u
->
hódîs_ö
.
°©us_n
 = 302;

1040 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1044 
u
->
hódîs_ö
.
°©us_n
 = 200;

1045 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1048 i‡(
u
->
°©e
) {

1049 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1052  
NGX_OK
;

1055 i‡(
rc
 =
NGX_AGAIN
) {

1056  
NGX_AGAIN
;

1061 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1064  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1066 
	}
}

1070 
	$ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1072 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1076 
	}
}

1080 
	$ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1082 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1086 
	}
}

1090 
	$ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1092 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
;

1094 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_loc_c⁄f_t
));

1095 i‡(
c⁄f
 =
NULL
) {

1096  
NULL
;

1099 
c⁄f
->
modifõr1
 = 
NGX_CONF_UNSET_UINT
;

1100 
c⁄f
->
modifõr2
 = 
NGX_CONF_UNSET_UINT
;

1102 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1103 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1104 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1105 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1107 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1108 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1109 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1111 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1112 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1114 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1115 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1116 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1118 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1119 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1121 #i‡(
NGX_HTTP_CACHE
)

1122 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1123 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1124 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1125 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1126 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1127 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1128 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1131 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1132 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1134 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1137 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1139 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1141 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "uwsgi");

1143  
c⁄f
;

1144 
	}
}

1148 
	$ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1150 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1151 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1153 
size_t
 
size
;

1154 
ngx_hash_öô_t
 
hash
;

1155 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1157 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1158 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1160 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1161 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1162 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1166 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1167 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1169 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1170 
¥ev
->
up°ªam
.
buf„rög
, 1);

1172 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1173 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1175 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1176 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1178 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1179 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1181 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1182 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1184 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1185 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1187 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1188 
¥ev
->
up°ªam
.
buf„r_size
,

1189 (
size_t
Ë
ngx_∑gesize
);

1192 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1193 8, 
ngx_∑gesize
);

1195 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1196 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1198  
NGX_CONF_ERROR
;

1202 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1203 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1204 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1208 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1209 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1210 
NGX_CONF_UNSET_SIZE
);

1212 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1213 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1215 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1216 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1219 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1225  
NGX_CONF_ERROR
;

1228 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1229 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1231 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1235  
NGX_CONF_ERROR
;

1239 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1240 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1241 
NGX_CONF_UNSET_SIZE
);

1243 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1244 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1246 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1247 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1250 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1251 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1256  
NGX_CONF_ERROR
;

1260 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1261 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1262 
NGX_CONF_UNSET_SIZE
);

1264 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1265 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1267 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1268 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1271 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1272 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1273 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1279  
NGX_CONF_ERROR
;

1283 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1284 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1285 
NGX_CONF_BITMASK_SET
);

1288 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1289 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1290 (
NGX_CONF_BITMASK_SET


1291 |
NGX_HTTP_UPSTREAM_FT_ERROR


1292 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1294 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1295 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1296 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1299 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1300 
¥ev
->
up°ªam
.
ãmp_∑th
,

1301 &
ngx_hâp_uwsgi_ãmp_∑th
)

1302 !
NGX_OK
)

1304  
NGX_CONF_ERROR
;

1307 #i‡(
NGX_HTTP_CACHE
)

1309 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1310 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1312 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1313 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1315 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1317 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1319 &
shm_z⁄e
->
shm
.
«me
);

1321  
NGX_CONF_ERROR
;

1324 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1325 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1327 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1328 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1329 (
NGX_CONF_BITMASK_SET


1330 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1332 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1333 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1334 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1337 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1338 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1341 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1342 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1345 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1347 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1348 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1350 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1351 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1353 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1354 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1356 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1357 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1360 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1361 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1363 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1364 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1368 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1369 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1370 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1371 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1373 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1374 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1376 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uwsgi_°rög
, 
¥ev
->uwsgi_string, "");

1378 
hash
.
max_size
 = 512;

1379 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1380 
hash
.
«me
 = "uwsgi_hide_headers_hash";

1382 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1383 &
¥ev
->
up°ªam
, 
ngx_hâp_uwsgi_hide_hódîs
, &
hash
)

1384 !
NGX_OK
)

1386  
NGX_CONF_ERROR
;

1389 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1390 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1393 i‡(
c⁄f
->
uwsgi_Àngths
 =
NULL
) {

1394 
c⁄f
->
uwsgi_Àngths
 = 
¥ev
->uwsgi_lengths;

1395 
c⁄f
->
uwsgi_vÆues
 = 
¥ev
->uwsgi_values;

1398 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
uwsgi_Àngths
) {

1399 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1400 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1401 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1405 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr1
, 
¥ev
->modifier1, 0);

1406 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr2
, 
¥ev
->modifier2, 0);

1408 i‡(
	`ngx_hâp_uwsgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1409  
NGX_CONF_ERROR
;

1412  
NGX_CONF_OK
;

1413 
	}
}

1416 
ngx_öt_t


1417 
	$ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,

1418 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
)

1420 
u_ch¨
 *
p
;

1421 
size_t
 
size
;

1422 
uöçå_t
 *
code
;

1423 
ngx_uöt_t
 
i
, 
n§c
;

1424 
ngx_¨øy_t
 
hódîs_«mes
;

1425 #i‡(
NGX_HTTP_CACHE
)

1426 
ngx_¨øy_t
 
∑øms_mîged
;

1428 
ngx_hash_key_t
 *
hk
;

1429 
ngx_hash_öô_t
 
hash
;

1430 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

1431 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1432 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1434 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1435 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1437 i‡(
¥ev
->
hódîs_hash
.
buckës


1438 #i‡(
NGX_HTTP_CACHE
)

1439 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1440 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

1444 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1445 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1446 
c⁄f
->
∑øms
 = 
¥ev
->params;

1447 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1448 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1450  
NGX_OK
;

1454 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1455 #i‡(
NGX_HTTP_CACHE
)

1456 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1460 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1461  
NGX_OK
;

1464 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1465 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1466  
NGX_ERROR
;

1469 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1470 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1471  
NGX_ERROR
;

1474 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1475 !
NGX_OK
)

1477  
NGX_ERROR
;

1480 i‡(
c⁄f
->
∑øms_sour˚
) {

1481 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1482 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1485 
§c
 = 
NULL
;

1486 
n§c
 = 0;

1489 #i‡(
NGX_HTTP_CACHE
)

1491 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1492 
ngx_keyvÆ_t
 *
h
;

1493 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

1495 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1496 (
ngx_hâp_up°ªam_∑øm_t
))

1497 !
NGX_OK
)

1499  
NGX_ERROR
;

1502 
i
 = 0; i < 
n§c
; i++) {

1504 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1505 i‡(
s
 =
NULL
) {

1506  
NGX_ERROR
;

1509 *
s
 = 
§c
[
i
];

1512 
h
 = 
ngx_hâp_uwsgi_ˇche_hódîs
;

1514 
h
->
key
.
Àn
) {

1516 
§c
 = 
∑øms_mîged
.
ñts
;

1517 
n§c
 = 
∑øms_mîged
.
√…s
;

1519 
i
 = 0; i < 
n§c
; i++) {

1520 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1521 
√xt
;

1525 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1526 i‡(
s
 =
NULL
) {

1527  
NGX_ERROR
;

1530 
s
->
key
 = 
h
->key;

1531 
s
->
vÆue
 = 
h
->value;

1532 
s
->
skù_em±y
 = 0;

1534 
√xt
:

1536 
h
++;

1539 
§c
 = 
∑øms_mîged
.
ñts
;

1540 
n§c
 = 
∑øms_mîged
.
√…s
;

1545 
i
 = 0; i < 
n§c
; i++) {

1547 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1548 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1550 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1551 i‡(
hk
 =
NULL
) {

1552  
NGX_ERROR
;

1555 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1556 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1557 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1558 
hk
->
vÆue
 = (*) 1;

1560 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1565 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1566 (
ngx_hâp_s¸ùt_c›y_code_t
));

1567 i‡(
c›y
 =
NULL
) {

1568  
NGX_ERROR
;

1571 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1572 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1574 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1575 (
ngx_hâp_s¸ùt_c›y_code_t
));

1576 i‡(
c›y
 =
NULL
) {

1577  
NGX_ERROR
;

1580 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1581 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1584 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1585 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

1586 & ~((
uöçå_t
) - 1);

1588 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1589 i‡(
c›y
 =
NULL
) {

1590  
NGX_ERROR
;

1593 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1594 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1596 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1597 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

1600 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1602 
sc
.
cf
 = cf;

1603 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1604 
sc
.
Êushes
 = &
c⁄f
->flushes;

1605 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1606 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1608 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1609  
NGX_ERROR
;

1612 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1613 i‡(
code
 =
NULL
) {

1614  
NGX_ERROR
;

1617 *
code
 = (
uöçå_t
Ë
NULL
;

1620 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1621 i‡(
code
 =
NULL
) {

1622  
NGX_ERROR
;

1625 *
code
 = (
uöçå_t
Ë
NULL
;

1628 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1629 i‡(
code
 =
NULL
) {

1630  
NGX_ERROR
;

1633 *
code
 = (
uöçå_t
Ë
NULL
;

1635 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1637 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1638 
hash
.
key
 = 
ngx_hash_key_lc
;

1639 
hash
.
max_size
 = 512;

1640 
hash
.
buckë_size
 = 64;

1641 
hash
.
«me
 = "uwsgi_params_hash";

1642 
hash
.
poﬁ
 = 
cf
->pool;

1643 
hash
.
ãmp_poﬁ
 = 
NULL
;

1645  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1646 
	}
}

1650 
	$ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1652 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1654 
ngx_uæ_t
 
u
;

1655 
ngx_°r_t
 *
vÆue
, *
uæ
;

1656 
ngx_uöt_t
 
n
;

1657 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1658 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1660 i‡(
uwcf
->
up°ªam
.up°ªam || uwcf->
uwsgi_Àngths
) {

1664 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1665 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1667 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1669 
uæ
 = &
vÆue
[1];

1671 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1673 i‡(
n
) {

1675 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1677 
sc
.
cf
 = cf;

1678 
sc
.
sour˚
 = 
uæ
;

1679 
sc
.
Àngths
 = &
uwcf
->
uwsgi_Àngths
;

1680 
sc
.
vÆues
 = &
uwcf
->
uwsgi_vÆues
;

1681 
sc
.
v¨übÀs
 = 
n
;

1682 
sc
.
com∂ëe_Àngths
 = 1;

1683 
sc
.
com∂ëe_vÆues
 = 1;

1685 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1686  
NGX_CONF_ERROR
;

1689  
NGX_CONF_OK
;

1692 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1694 
u
.
uæ
 = 
vÆue
[1];

1695 
u
.
no_ªsﬁve
 = 1;

1697 
uwcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1698 i‡(
uwcf
->
up°ªam
.up°ªam =
NULL
) {

1699  
NGX_CONF_ERROR
;

1702 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1703 
˛cf
->
auto_ªdúe˘
 = 1;

1706  
NGX_CONF_OK
;

1707 
	}
}

1711 
	$ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1713 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1715 
ngx_°r_t
 *
vÆue
;

1716 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1718 i‡(
uwcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || uwcf->up°ªam.
°‹e_Àngths
)

1723 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1725 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1726 
uwcf
->
up°ªam
.
°‹e
 = 0;

1727  
NGX_CONF_OK
;

1730 #i‡(
NGX_HTTP_CACHE
)

1732 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1733 && 
uwcf
->
up°ªam
.
ˇche
 !
NULL
)

1740 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1741 
uwcf
->
up°ªam
.
°‹e
 = 1;

1742  
NGX_CONF_OK
;

1746 
vÆue
[1].
Àn
++;

1748 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1750 
sc
.
cf
 = cf;

1751 
sc
.
sour˚
 = &
vÆue
[1];

1752 
sc
.
Àngths
 = &
uwcf
->
up°ªam
.
°‹e_Àngths
;

1753 
sc
.
vÆues
 = &
uwcf
->
up°ªam
.
°‹e_vÆues
;

1754 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);;

1755 
sc
.
com∂ëe_Àngths
 = 1;

1756 
sc
.
com∂ëe_vÆues
 = 1;

1758 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1759  
NGX_CONF_ERROR
;

1762  
NGX_CONF_OK
;

1763 
	}
}

1766 #i‡(
NGX_HTTP_CACHE
)

1769 
	$ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1771 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1773 
ngx_°r_t
 *
vÆue
;

1775 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1777 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1781 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1782 
uwcf
->
up°ªam
.
ˇche
 = 
NULL
;

1783  
NGX_CONF_OK
;

1786 i‡(
uwcf
->
up°ªam
.
°‹e
 > 0 || uwcf->up°ªam.
°‹e_Àngths
) {

1790 
uwcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1791 &
ngx_hâp_uwsgi_moduÀ
);

1792 i‡(
uwcf
->
up°ªam
.
ˇche
 =
NULL
) {

1793  
NGX_CONF_ERROR
;

1796  
NGX_CONF_OK
;

1797 
	}
}

1801 
	$ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1803 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1805 
ngx_°r_t
 *
vÆue
;

1806 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1808 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1810 i‡(
uwcf
->
ˇche_key
.
vÆue
.
d©a
) {

1814 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1816 
ccv
.
cf
 = cf;

1817 
ccv
.
vÆue
 = &value[1];

1818 
ccv
.
com∂ex_vÆue
 = &
uwcf
->
ˇche_key
;

1820 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1821  
NGX_CONF_ERROR
;

1824  
NGX_CONF_OK
;

1825 
	}
}

	@src/http/modules/ngx_http_xslt_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<libxml/∑r£r.h
>

13 
	~<libxml/åì.h
>

14 
	~<libx¶t/x¶t.h
>

15 
	~<libx¶t/x¶tI¡î«ls.h
>

16 
	~<libx¶t/å™sf‹m.h
>

17 
	~<libx¶t/v¨übÀs.h
>

18 
	~<libx¶t/x¶tutûs.h
>

20 #i‡(
NGX_HAVE_EXSLT
)

21 
	~<libex¶t/ex¶t.h
>

25 #i‚de‡
NGX_HTTP_XSLT_REUSE_DTD


26 
	#NGX_HTTP_XSLT_REUSE_DTD
 1

	)

31 
u_ch¨
 *
	m«me
;

32 *
	md©a
;

33 } 
	tngx_hâp_x¶t_fûe_t
;

37 
ngx_¨øy_t
 
	mdtd_fûes
;

38 
ngx_¨øy_t
 
	mshìt_fûes
;

39 } 
	tngx_hâp_x¶t_fûãr_maö_c⁄f_t
;

43 
u_ch¨
 *
	m«me
;

44 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

45 
ngx_uöt_t
 
	mquŸe
;

46 } 
	tngx_hâp_x¶t_∑øm_t
;

50 
x¶tStyÀshìtPå
 
	m°yÀshìt
;

51 
ngx_¨øy_t
 
	m∑øms
;

52 } 
	tngx_hâp_x¶t_shìt_t
;

56 
xmlDtdPå
 
	mdtd
;

57 
ngx_¨øy_t
 
	mshìts
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 
ngx_¨øy_t
 *
	m∑øms
;

61 } 
	tngx_hâp_x¶t_fûãr_loc_c⁄f_t
;

65 
xmlDocPå
 
	mdoc
;

66 
xmlP¨£rCtxtPå
 
	m˘xt
;

67 
x¶tTønsf‹mC⁄ãxtPå
 
	må™sf‹m
;

68 
ngx_hâp_ªque°_t
 *
	mªque°
;

69 
ngx_¨øy_t
 
	m∑øms
;

71 
ngx_uöt_t
 
	md⁄e
;

72 } 
	tngx_hâp_x¶t_fûãr_˘x_t
;

75 
ngx_öt_t
 
ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

77 
ngx_öt_t
 
ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

81 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

82 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
);

83 
ngx_cde˛
 
ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...);

86 
ngx_buf_t
 *
ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
);

88 
ngx_öt_t
 
ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
);

90 
u_ch¨
 *
ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
);

91 
u_ch¨
 *
ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
);

92 
ngx_hâp_x¶t_˛ónup
(*
d©a
);

94 *
ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

95 *
c⁄f
);

96 *
ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

97 *
c⁄f
);

98 *
ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

99 *
c⁄f
);

100 
ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
);

101 
ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
);

102 *
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

103 *
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

104 *
ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

105 *
chûd
);

106 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

107 
ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
);

110 
ngx_°r_t
 
	gngx_hâp_x¶t_deÁu…_ty≥s
[] = {

111 
ngx_°rög
("text/xml"),

112 
ngx_nuŒ_°rög


116 
ngx_comm™d_t
 
	gngx_hâp_x¶t_fûãr_comm™ds
[] = {

118 { 
ngx_°rög
("xml_entities"),

119 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

120 
ngx_hâp_x¶t_ítôõs
,

121 
NGX_HTTP_LOC_CONF_OFFSET
,

123 
NULL
 },

125 { 
ngx_°rög
("xslt_stylesheet"),

126 
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

127 
ngx_hâp_x¶t_°yÀshìt
,

128 
NGX_HTTP_LOC_CONF_OFFSET
,

130 
NULL
 },

132 { 
ngx_°rög
("xslt_param"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

134 
ngx_hâp_x¶t_∑øm
,

135 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
NULL
 },

139 { 
ngx_°rög
("xslt_string_param"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

141 
ngx_hâp_x¶t_∑øm
,

142 
NGX_HTTP_LOC_CONF_OFFSET
,

146 { 
ngx_°rög
("xslt_types"),

147 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

148 
ngx_hâp_ty≥s_¶Ÿ
,

149 
NGX_HTTP_LOC_CONF_OFFSET
,

150 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
ty≥s_keys
),

151 &
ngx_hâp_x¶t_deÁu…_ty≥s
[0] },

153 
ngx_nuŒ_comm™d


157 
ngx_hâp_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ_˘x
 = {

158 
NULL
,

159 
ngx_hâp_x¶t_fûãr_öô
,

161 
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
,

162 
NULL
,

164 
NULL
,

165 
NULL
,

167 
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
,

168 
ngx_hâp_x¶t_fûãr_mîge_c⁄f


172 
ngx_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ
 = {

173 
NGX_MODULE_V1
,

174 &
ngx_hâp_x¶t_fûãr_moduÀ_˘x
,

175 
ngx_hâp_x¶t_fûãr_comm™ds
,

176 
NGX_HTTP_MODULE
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
ngx_hâp_x¶t_fûãr_exô
,

183 
ngx_hâp_x¶t_fûãr_exô
,

184 
NGX_MODULE_V1_PADDING


188 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

189 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

192 
ngx_öt_t


193 
	$ngx_hâp_x¶t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

195 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

196 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

198 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

202  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

205 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

207 i‡(
c⁄f
->
shìts
.
√…s
 == 0

208 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
)

210  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

213 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

215 i‡(
˘x
) {

216  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

219 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_˘x_t
));

220 i‡(
˘x
 =
NULL
) {

221  
NGX_ERROR
;

224 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

226 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

228  
NGX_OK
;

229 
	}
}

232 
ngx_öt_t


233 
	$ngx_hâp_x¶t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

235 
wñlF‹med
;

236 
ngx_chaö_t
 *
˛
;

237 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

239 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

242 i‡(
ö
 =
NULL
) {

243  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

246 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

248 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

249  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

252 
˛
 = 
ö
; cl; c»˛->
√xt
) {

254 i‡(
	`ngx_hâp_x¶t_add_chunk
(
r
, 
˘x
, 
˛
->
buf
Ë!
NGX_OK
) {

256 i‡(
˘x
->
˘xt
->
myDoc
) {

258 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

259 
˘x
->
˘xt
->
myDoc
->
extSub£t
 = 
NULL
;

261 
	`xmlFªeDoc
(
˘x
->
˘xt
->
myDoc
);

264 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

266  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

269 i‡(
˛
->
buf
->
œ°_buf
 || cl->buf->
œ°_ö_chaö
) {

271 
˘x
->
doc
 = ctx->
˘xt
->
myDoc
;

273 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

274 
˘x
->
doc
->
extSub£t
 = 
NULL
;

277 
wñlF‹med
 = 
˘x
->
˘xt
->wellFormed;

279 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

281 i‡(
wñlF‹med
) {

282  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
,

283 
	`ngx_hâp_x¶t_≠∂y_°yÀshìt
(
r
, 
˘x
));

286 
	`xmlFªeDoc
(
˘x
->
doc
);

288 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

291  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

295  
NGX_OK
;

296 
	}
}

299 
ngx_öt_t


300 
	$ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

301 
ngx_buf_t
 *
b
)

303 
ngx_öt_t
 
rc
;

304 
ngx_chaö_t
 
out
;

305 
ngx_poﬁ_˛ónup_t
 *
˛n
;

307 
˘x
->
d⁄e
 = 1;

309 i‡(
b
 =
NULL
) {

310  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

311 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

314 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

316 i‡(
˛n
 =
NULL
) {

317 
	`ngx_‰ì
(
b
->
pos
);

318  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

319 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

322 i‡(
r
 =r->
maö
) {

323 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

325 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

326 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

327 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

330 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

333 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

335 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

336 
	`ngx_‰ì
(
b
->
pos
);

337  
rc
;

340 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup
;

341 
˛n
->
d©a
 = 
b
->
pos
;

343 
out
.
buf
 = 
b
;

344 
out
.
√xt
 = 
NULL
;

346  
	`ngx_hâp_√xt_body_fûãr
(
r
, &
out
);

347 
	}
}

350 
ngx_öt_t


351 
	$ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

352 
ngx_buf_t
 *
b
)

354 
îr
;

355 
xmlP¨£rCtxtPå
 
˘xt
;

357 i‡(
˘x
->
˘xt
 =
NULL
) {

359 
˘xt
 = 
	`xmlCª©ePushP¨£rCtxt
(
NULL
, NULL, NULL, 0, NULL);

360 i‡(
˘xt
 =
NULL
) {

361 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

363  
NGX_ERROR
;

365 
	`xmlCtxtU£O±i⁄s
(
˘xt
, 
XML_PARSE_NOENT
|
XML_PARSE_DTDLOAD


366 |
XML_PARSE_NOWARNING
);

368 
˘xt
->
ßx
->
exã∫ÆSub£t
 = 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
;

369 
˘xt
->
ßx
->
£tDocumítLoˇt‹
 = 
NULL
;

370 
˘xt
->
ßx
->
îr‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

371 
˘xt
->
ßx
->
ÁèlEº‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

372 
˘xt
->
ßx
->
_¥iv©e
 = 
˘x
;

374 
˘x
->
˘xt
 = ctxt;

375 
˘x
->
ªque°
 = 
r
;

378 
îr
 = 
	`xmlP¨£Chunk
(
˘x
->
˘xt
, (*Ë
b
->
pos
, (Ë(b->
œ°
 - b->pos),

379 (
b
->
œ°_buf
Ë|| (b->
œ°_ö_chaö
));

381 i‡(
îr
 == 0) {

382 
b
->
pos
 = b->
œ°
;

383  
NGX_OK
;

386 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

387 "xmlP¨£Chunk(ËÁûed,Éº‹:%d", 
îr
);

389  
NGX_ERROR
;

390 
	}
}

394 
	$ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

395 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
)

397 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

399 
xmlDocPå
 
doc
;

400 
xmlDtdPå
 
dtd
;

401 
ngx_hâp_ªque°_t
 *
r
;

402 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

403 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

405 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

406 
r
 = 
˘x
->
ªque°
;

408 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

410 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

412 
«me
 ?Çamê: (
xmlCh¨
 *) "",

413 
exã∫ÆId
 ?Éxã∫ÆId : (
xmlCh¨
 *) "",

414 
sy°emId
 ? sy°emId : (
xmlCh¨
 *) "");

416 
doc
 = 
˘xt
->
myDoc
;

418 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

420 
dtd
 = 
c⁄f
->dtd;

424 
dtd
 = 
	`xmlC›yDtd
(
c⁄f
->dtd);

425 i‡(
dtd
 =
NULL
) {

426 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

431 i‡(
doc
->
chûdªn
 =
NULL
) {

432 
	`xmlAddChûd
((
xmlNodePå
Ë
doc
, (xmlNodePåË
dtd
);

435 
	`xmlAddPªvSiblög
(
doc
->
chûdªn
, (
xmlNodePå
Ë
dtd
);

440 
doc
->
extSub£t
 = 
dtd
;

441 
	}
}

444 
ngx_cde˛


445 
	$ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...)

447 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

449 
size_t
 
n
;

450 
va_li°
 
¨gs
;

451 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

452 
u_ch¨
 
buf
[
NGX_MAX_ERROR_STR
];

454 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

456 
buf
[0] = '\0';

458 
	`va_°¨t
(
¨gs
, 
msg
);

459 
n
 = (
size_t
Ë
	`v¢¥ötf
((*Ë
buf
, 
NGX_MAX_ERROR_STR
, 
msg
, 
¨gs
);

460 
	`va_íd
(
¨gs
);

462 --
n
 && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

464 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

465 "libxml2Éº‹: \"%*s\"", 
n
 + 1, 
buf
);

466 
	}
}

469 
ngx_buf_t
 *

470 
	$ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

471 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
)

473 
Àn
, 
rc
, 
doc_ty≥
;

474 
u_ch¨
 *
ty≥
, *
ícodög
;

475 
ngx_buf_t
 *
b
;

476 
ngx_uöt_t
 
i
;

477 
xmlCh¨
 *
buf
;

478 
xmlDocPå
 
doc
, 
ªs
;

479 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

480 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

482 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

483 
shìt
 = 
c⁄f
->
shìts
.
ñts
;

484 
doc
 = 
˘x
->doc;

488 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑øms
, 
r
->
poﬁ
, 4 * 2 + 1, (*))

489 !
NGX_OK
)

491 
	`xmlFªeDoc
(
doc
);

492  
NULL
;

495 
i
 = 0; i < 
c⁄f
->
shìts
.
√…s
; i++) {

497 
˘x
->
å™sf‹m
 = 
	`x¶tNewTønsf‹mC⁄ãxt
(
shìt
[
i
].
°yÀshìt
, 
doc
);

498 i‡(
˘x
->
å™sf‹m
 =
NULL
) {

499 
	`xmlFªeDoc
(
doc
);

500  
NULL
;

503 i‡(
c⁄f
->
∑øms


504 && 
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, 
c⁄f
->
∑øms
, 0Ë!
NGX_OK
)

506 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

507 
	`xmlFªeDoc
(
doc
);

508  
NULL
;

511 i‡(
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, &
shìt
[
i
].
∑øms
, 1Ë!
NGX_OK
) {

512 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

513 
	`xmlFªeDoc
(
doc
);

514  
NULL
;

517 
ªs
 = 
	`x¶tAµlyStyÀshìtU£r
(
shìt
[
i
].
°yÀshìt
, 
doc
,

518 
˘x
->
∑øms
.
ñts
, 
NULL
, NULL,

519 
˘x
->
å™sf‹m
);

521 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

522 
	`xmlFªeDoc
(
doc
);

524 i‡(
ªs
 =
NULL
) {

525 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

527  
NULL
;

530 
doc
 = 
ªs
;

533 
˘x
->
∑øms
.
√…s
 = 0;

538 i‡(
r
 =r->
maö
) {

539 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
shìt
[
i
 - 1].
°yÀshìt
);

542 
ty≥
 = 
NULL
;

545 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
shìt
[
i
 - 1].
°yÀshìt
);

546 
doc_ty≥
 = 
doc
->
ty≥
;

548 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

550 
doc_ty≥
, 
ty≥
 ?Åy≥ : (
u_ch¨
 *) "(null)",

551 
ícodög
 ?Éncodög : (
u_ch¨
 *) "(null)");

553 
rc
 = 
	`x¶tSaveResu…ToSåög
(&
buf
, &
Àn
, 
doc
, 
shìt
[
i
 - 1].
°yÀshìt
);

555 
	`xmlFªeDoc
(
doc
);

557 i‡(
rc
 != 0) {

558 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

560  
NULL
;

563 i‡(
Àn
 == 0) {

564 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

566  
NULL
;

569 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

570 i‡(
b
 =
NULL
) {

571 
	`ngx_‰ì
(
buf
);

572  
NULL
;

575 
b
->
pos
 = 
buf
;

576 
b
->
œ°
 = 
buf
 + 
Àn
;

577 
b
->
mem‹y
 = 1;

579 i‡(
ícodög
) {

580 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
	`ngx_°æí
(
ícodög
);

581 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
ícodög
;

584 i‡(
r
 !r->
maö
) {

585  
b
;

588 
b
->
œ°_buf
 = 1;

590 i‡(
ty≥
) {

591 
Àn
 = 
	`ngx_°æí
(
ty≥
);

593 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
Àn
;

594 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Üen;

595 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
ty≥
;

597 } i‡(
doc_ty≥
 =
XML_HTML_DOCUMENT_NODE
) {

599 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

600 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

603 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

605  
b
;

606 
	}
}

609 
ngx_öt_t


610 
	$ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

611 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
)

613 
u_ch¨
 *
p
, *
œ°
, *
vÆue
, *
d°
, *
§c
, **
s
;

614 
size_t
 
Àn
;

615 
ngx_uöt_t
 
i
;

616 
ngx_°r_t
 
°rög
;

617 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

619 
∑øm
 = 
∑øms
->
ñts
;

621 
i
 = 0; i < 
∑øms
->
√…s
; i++) {

623 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∑øm
[
i
].
vÆue
, &
°rög
Ë!
NGX_OK
) {

624  
NGX_ERROR
;

627 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

628 "x¶àfûã∏∑øm: \"%s\"", 
°rög
.
d©a
);

630 i‡(
∑øm
[
i
].
«me
) {

632 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

633 "x¶àfûã∏∑ømÇame: \"%s\"", 
∑øm
[
i
].
«me
);

635 i‡(
∑øm
[
i
].
quŸe
) {

636 i‡(
	`x¶tQuŸeO√U£rP¨am
(
˘x
->
å™sf‹m
, 
∑øm
[
i
].
«me
,

637 
°rög
.
d©a
)

640 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

642 
∑øm
[
i
].
«me
, 
°rög
.
d©a
);

643  
NGX_ERROR
;

649 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

650 i‡(
s
 =
NULL
) {

651  
NGX_ERROR
;

654 *
s
 = 
∑øm
[
i
].
«me
;

656 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

657 i‡(
s
 =
NULL
) {

658  
NGX_ERROR
;

661 *
s
 = 
°rög
.
d©a
;

671 
p
 = 
°rög
.
d©a
;

672 
œ°
 = 
°rög
.
d©a
 + såög.
Àn
;

674 
p
 && *p) {

676 
vÆue
 = 
p
;

677 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, '=');

678 i‡(
p
 =
NULL
) {

679 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

680 "övÆidÜibx¶à∑ømëî \"%s\"", 
vÆue
);

681  
NGX_ERROR
;

683 *
p
++ = '\0';

685 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

686 "x¶àfûã∏∑ømÇame: \"%s\"", 
vÆue
);

688 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

689 i‡(
s
 =
NULL
) {

690  
NGX_ERROR
;

693 *
s
 = 
vÆue
;

695 
vÆue
 = 
p
;

696 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, ':');

698 i‡(
p
) {

699 
Àn
 = 
p
 - 
vÆue
;

700 *
p
++ = '\0';

703 
Àn
 = 
œ°
 - 
vÆue
;

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

707 "x¶àfûã∏∑øm vÆue: \"%s\"", 
vÆue
);

709 
d°
 = 
vÆue
;

710 
§c
 = 
vÆue
;

712 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
Àn
, 0);

714 *
d°
 = '\0';

716 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

717 "x¶àfûã∏∑øm u√sˇ≥d: \"%s\"", 
vÆue
);

719 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

720 i‡(
s
 =
NULL
) {

721  
NGX_ERROR
;

724 *
s
 = 
vÆue
;

728 i‡(
föÆ
) {

729 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

730 i‡(
s
 =
NULL
) {

731  
NGX_ERROR
;

734 *
s
 = 
NULL
;

737  
NGX_OK
;

738 
	}
}

741 
u_ch¨
 *

742 
	$ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
)

744 
u_ch¨
 *
ty≥
;

746 i‡(
s
->
medüTy≥
) {

747  
s
->
medüTy≥
;

750 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

752 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
s
);

754 i‡(
ty≥
) {

755  
ty≥
;

759  
NULL
;

760 
	}
}

763 
u_ch¨
 *

764 
	$ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
)

766 
u_ch¨
 *
ícodög
;

768 i‡(
s
->
ícodög
) {

769  
s
->
ícodög
;

772 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

774 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
s
);

776 i‡(
ícodög
) {

777  
ícodög
;

781  
NULL
;

782 
	}
}

786 
	$ngx_hâp_x¶t_˛ónup
(*
d©a
)

788 
	`ngx_‰ì
(
d©a
);

789 
	}
}

793 
	$ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

795 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

797 
ngx_°r_t
 *
vÆue
;

798 
ngx_uöt_t
 
i
;

799 
ngx_poﬁ_˛ónup_t
 *
˛n
;

800 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

801 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

803 i‡(
xlcf
->
dtd
) {

807 
vÆue
 = 
cf
->
¨gs
->
ñts
;

809 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

811 
fûe
 = 
xmcf
->
dtd_fûes
.
ñts
;

812 
i
 = 0; i < 
xmcf
->
dtd_fûes
.
√…s
; i++) {

813 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

814 
xlcf
->
dtd
 = 
fûe
[
i
].
d©a
;

815  
NGX_CONF_OK
;

819 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

820 i‡(
˛n
 =
NULL
) {

821  
NGX_CONF_ERROR
;

824 
xlcf
->
dtd
 = 
	`xmlP¨£DTD
(
NULL
, (
xmlCh¨
 *Ë
vÆue
[1].
d©a
);

826 i‡(
xlcf
->
dtd
 =
NULL
) {

827 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0, "xmlParseDTD() failed");

828  
NGX_CONF_ERROR
;

831 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_dtd
;

832 
˛n
->
d©a
 = 
xlcf
->
dtd
;

834 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
dtd_fûes
);

835 i‡(
fûe
 =
NULL
) {

836  
NGX_CONF_ERROR
;

839 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

840 
fûe
->
d©a
 = 
xlcf
->
dtd
;

842  
NGX_CONF_OK
;

843 
	}
}

848 
	$ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

850 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

852 
ngx_°r_t
 *
vÆue
;

853 
ngx_uöt_t
 
i
, 
n
;

854 
ngx_poﬁ_˛ónup_t
 *
˛n
;

855 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

856 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

857 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

858 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

859 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

861 
vÆue
 = 
cf
->
¨gs
->
ñts
;

863 i‡(
xlcf
->
shìts
.
ñts
 =
NULL
) {

864 i‡(
	`ngx_¨øy_öô
(&
xlcf
->
shìts
, 
cf
->
poﬁ
, 1,

865 (
ngx_hâp_x¶t_shìt_t
))

866 !
NGX_OK
)

868  
NGX_CONF_ERROR
;

872 
shìt
 = 
	`ngx_¨øy_push
(&
xlcf
->
shìts
);

873 i‡(
shìt
 =
NULL
) {

874  
NGX_CONF_ERROR
;

877 
	`ngx_memzîo
(
shìt
, (
ngx_hâp_x¶t_shìt_t
));

879 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

880  
NGX_CONF_ERROR
;

883 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

885 
fûe
 = 
xmcf
->
shìt_fûes
.
ñts
;

886 
i
 = 0; i < 
xmcf
->
shìt_fûes
.
√…s
; i++) {

887 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

888 
shìt
->
°yÀshìt
 = 
fûe
[
i
].
d©a
;

889 
found
;

893 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

894 i‡(
˛n
 =
NULL
) {

895  
NGX_CONF_ERROR
;

898 
shìt
->
°yÀshìt
 = 
	`x¶tP¨£StyÀshìtFûe
(
vÆue
[1].
d©a
);

899 i‡(
shìt
->
°yÀshìt
 =
NULL
) {

900 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

902 
vÆue
[1].
d©a
);

903  
NGX_CONF_ERROR
;

906 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_°yÀshìt
;

907 
˛n
->
d©a
 = 
shìt
->
°yÀshìt
;

909 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
shìt_fûes
);

910 i‡(
fûe
 =
NULL
) {

911  
NGX_CONF_ERROR
;

914 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

915 
fûe
->
d©a
 = 
shìt
->
°yÀshìt
;

917 
found
:

919 
n
 = 
cf
->
¨gs
->
√…s
;

921 i‡(
n
 == 2) {

922  
NGX_CONF_OK
;

925 i‡(
	`ngx_¨øy_öô
(&
shìt
->
∑øms
, 
cf
->
poﬁ
, 
n
 - 2,

926 (
ngx_hâp_x¶t_∑øm_t
))

927 !
NGX_OK
)

929  
NGX_CONF_ERROR
;

932 
i
 = 2; i < 
n
; i++) {

934 
∑øm
 = 
	`ngx_¨øy_push
(&
shìt
->
∑øms
);

935 i‡(
∑øm
 =
NULL
) {

936  
NGX_CONF_ERROR
;

939 
	`ngx_memzîo
(
∑øm
, (
ngx_hâp_x¶t_∑øm_t
));

940 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

942 
ccv
.
cf
 = cf;

943 
ccv
.
vÆue
 = &vÆue[
i
];

944 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

945 
ccv
.
zîo
 = 1;

947 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

948  
NGX_CONF_ERROR
;

952  
NGX_CONF_OK
;

953 
	}
}

957 
	$ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

959 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

961 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

962 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

963 
ngx_°r_t
 *
vÆue
;

965 
vÆue
 = 
cf
->
¨gs
->
ñts
;

967 i‡(
xlcf
->
∑øms
 =
NULL
) {

968 
xlcf
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

969 (
ngx_hâp_x¶t_∑øm_t
));

970 i‡(
xlcf
->
∑øms
 =
NULL
) {

971  
NGX_CONF_ERROR
;

975 
∑øm
 = 
	`ngx_¨øy_push
(
xlcf
->
∑øms
);

976 i‡(
∑øm
 =
NULL
) {

977  
NGX_CONF_ERROR
;

980 
∑øm
->
«me
 = 
vÆue
[1].
d©a
;

981 
∑øm
->
quŸe
 = (
cmd
->
po°
 =
NULL
) ? 0 : 1;

983 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

985 
ccv
.
cf
 = cf;

986 
ccv
.
vÆue
 = &value[2];

987 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

988 
ccv
.
zîo
 = 1;

990 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

991  
NGX_CONF_ERROR
;

994  
NGX_CONF_OK
;

995 
	}
}

999 
	$ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
)

1001 
	`xmlFªeDtd
(
d©a
);

1002 
	}
}

1006 
	$ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
)

1008 
	`x¶tFªeStyÀshìt
(
d©a
);

1009 
	}
}

1013 
	$ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1015 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
c⁄f
;

1017 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
));

1018 i‡(
c⁄f
 =
NULL
) {

1019  
NULL
;

1022 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
dtd_fûes
, 
cf
->
poﬁ
, 1,

1023 (
ngx_hâp_x¶t_fûe_t
))

1024 !
NGX_OK
)

1026  
NULL
;

1029 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
shìt_fûes
, 
cf
->
poﬁ
, 1,

1030 (
ngx_hâp_x¶t_fûe_t
))

1031 !
NGX_OK
)

1033  
NULL
;

1036  
c⁄f
;

1037 
	}
}

1041 
	$ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1043 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

1045 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
));

1046 i‡(
c⁄f
 =
NULL
) {

1047  
NULL
;

1060  
c⁄f
;

1061 
	}
}

1065 
	$ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1067 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1068 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1070 i‡(
c⁄f
->
dtd
 =
NULL
) {

1071 
c⁄f
->
dtd
 = 
¥ev
->dtd;

1074 i‡(
c⁄f
->
shìts
.
√…s
 == 0) {

1075 
c⁄f
->
shìts
 = 
¥ev
->sheets;

1078 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1079 
c⁄f
->
∑øms
 = 
¥ev
->params;

1082 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1083 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1084 
ngx_hâp_x¶t_deÁu…_ty≥s
)

1085 !
NGX_OK
)

1087  
NGX_CONF_ERROR
;

1090  
NGX_CONF_OK
;

1091 
	}
}

1094 
ngx_öt_t


1095 
	$ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1097 
	`xmlInôP¨£r
();

1099 #i‡(
NGX_HAVE_EXSLT
)

1100 
	`ex¶tRegi°îAŒ
();

1103 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1104 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_x¶t_hódî_fûãr
;

1106 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1107 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_x¶t_body_fûãr
;

1109  
NGX_OK
;

1110 
	}
}

1114 
	$ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1116 
	`x¶tCÀ™upGlobÆs
();

1117 
	`xmlCÀ™upP¨£r
();

1118 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_≥æ_moduÀ.h
>

15 
PîlI¡î¥ëî
 *
	m≥æ
;

16 
HV
 *
	mngöx
;

17 
ngx_¨øy_t
 *
	mmoduÀs
;

18 
ngx_¨øy_t
 *
	mªquúes
;

19 } 
	tngx_hâp_≥æ_maö_c⁄f_t
;

23 
SV
 *
	msub
;

24 
ngx_°r_t
 
	mh™dÀr
;

25 } 
	tngx_hâp_≥æ_loc_c⁄f_t
;

29 
SV
 *
	msub
;

30 
ngx_°r_t
 
	mh™dÀr
;

31 } 
	tngx_hâp_≥æ_v¨übÀ_t
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_öt_t
 
ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
, 
ngx_°r_t
 **
∑øms
);

39 *
ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

40 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

41 
PîlI¡î¥ëî
 *
ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

43 
ngx_öt_t
 
ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
,

44 
ngx_log_t
 *
log
);

45 
ngx_öt_t
 
ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
,

46 
HV
 *
ngöx
, 
SV
 *
sub
, SV **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
);

47 
ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
);

49 
ngx_öt_t
 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

50 *
ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

52 *
ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

58 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

59 
ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
);

62 
ngx_öt_t
 
ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
);

66 
ngx_comm™d_t
 
	gngx_hâp_≥æ_comm™ds
[] = {

68 { 
ngx_°rög
("perl_modules"),

69 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

71 
NGX_HTTP_MAIN_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
moduÀs
),

73 
NULL
 },

75 { 
ngx_°rög
("perl_require"),

76 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

77 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

78 
NGX_HTTP_MAIN_CONF_OFFSET
,

79 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
ªquúes
),

80 
NULL
 },

82 { 
ngx_°rög
("perl"),

83 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_hâp_≥æ
,

85 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
NULL
 },

89 { 
ngx_°rög
("perl_set"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

91 
ngx_hâp_≥æ_£t
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
NULL
 },

96 
ngx_nuŒ_comm™d


100 
ngx_hâp_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ_˘x
 = {

101 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
,

102 
NULL
,

104 
ngx_hâp_≥æ_¸óã_maö_c⁄f
,

105 
ngx_hâp_≥æ_öô_maö_c⁄f
,

107 
NULL
,

108 
NULL
,

110 
ngx_hâp_≥æ_¸óã_loc_c⁄f
,

111 
ngx_hâp_≥æ_mîge_loc_c⁄f


115 
ngx_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ
 = {

116 
NGX_MODULE_V1
,

117 &
ngx_hâp_≥æ_moduÀ_˘x
,

118 
ngx_hâp_≥æ_comm™ds
,

119 
NGX_HTTP_MODULE
,

120 
NULL
,

121 
NULL
,

122 
ngx_hâp_≥æ_öô_w‹kî
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
ngx_hâp_≥æ_exô
,

127 
NGX_MODULE_V1_PADDING


131 #i‡(
NGX_HTTP_SSI
)

133 
	#NGX_HTTP_PERL_SSI_SUB
 0

	)

134 
	#NGX_HTTP_PERL_SSI_ARG
 1

	)

137 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_≥æ_ssi_∑øms
[] = {

138 { 
ngx_°rög
("sub"), 
NGX_HTTP_PERL_SSI_SUB
, 1, 0 },

139 { 
ngx_°rög
("¨g"), 
NGX_HTTP_PERL_SSI_ARG
, 0, 1 },

140 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

143 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_≥æ_ssi_comm™d
 = {

144 
ngx_°rög
("≥æ"), 
ngx_hâp_≥æ_ssi
, 
ngx_hâp_≥æ_ssi_∑øms
, 0, 0, 1

150 
ngx_°r_t
 
	gngx_nuŒ_«me
 = 
ngx_nuŒ_°rög
;

151 
HV
 *
	gngöx_°ash
;

153 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

154 
ngx_uöt_t
 
	gngx_≥æ_ãrm
;

156 
PîlI¡î¥ëî
 *
	g≥æ
;

161 
	$ngx_hâp_≥æ_xs_öô
(
pTHX
)

163 
	`√wXS
("Dy«Lﬂdî::boŸ_Dy«Lﬂdî", 
boŸ_Dy«Lﬂdî
, 
__FILE__
);

165 
ngöx_°ash
 = 
	`gv_°ashpv
("ngöx", 
TRUE
);

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_≥æ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

172 
r
->
maö
->
cou¡
++;

174 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

176  
NGX_DONE
;

177 
	}
}

181 
	$ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

183 
SV
 *
sub
;

184 
ngx_öt_t
 
rc
;

185 
ngx_°r_t
 
uri
, 
¨gs
, *
h™dÀr
;

186 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

187 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

188 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl handler");

192 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

194 i‡(
˘x
 =
NULL
) {

195 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

201 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

204 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

208 
	`dTHXa
(
pmcf
->
≥æ
);

209 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

211 i‡(
˘x
->
√xt
 =
NULL
) {

212 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

213 
sub
 = 
∂cf
->sub;

214 
h™dÀr
 = &
∂cf
->handler;

217 
sub
 = 
˘x
->
√xt
;

218 
h™dÀr
 = &
ngx_nuŒ_«me
;

219 
˘x
->
√xt
 = 
NULL
;

222 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sub
, 
NULL
, 
h™dÀr
,

223 
NULL
);

227 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

228 "≥æ h™dÀ∏d⁄e: %i", 
rc
);

230 i‡(
rc
 =
NGX_DONE
) {

231 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

235 i‡(
rc
 > 600) {

236 
rc
 = 
NGX_OK
;

239 i‡(
˘x
->
ªdúe˘_uri
.
Àn
) {

240 
uri
 = 
˘x
->
ªdúe˘_uri
;

241 
¨gs
 = 
˘x
->
ªdúe˘_¨gs
;

244 
uri
.
Àn
 = 0;

247 
˘x
->
fûíame
.
d©a
 = 
NULL
;

248 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

250 i‡(
˘x
->
d⁄e
 || ctx->
√xt
) {

251 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

255 i‡(
uri
.
Àn
) {

256 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

257 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

261 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_HTTP_OK
) {

262 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

263 
˘x
->
d⁄e
 = 1;

266 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

267 
	}
}

271 
	$ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

273 
ngx_evít_t
 *
wev
;

275 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

280 i‡(
wev
->
timedout
) {

281 
wev
->
timedout
 = 0;

282 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

286 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

287 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

289 
	}
}

292 
ngx_öt_t


293 
	$ngx_hâp_≥æ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

294 
uöçå_t
 
d©a
)

296 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
 = (ngx_hâp_≥æ_v¨übÀ_à*Ë
d©a
;

298 
ngx_öt_t
 
rc
;

299 
ngx_°r_t
 
vÆue
;

300 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

301 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

303 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

306 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

308 i‡(
˘x
 =
NULL
) {

309 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

310 i‡(
˘x
 =
NULL
) {

311  
NGX_ERROR
;

314 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

317 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

319 
vÆue
.
d©a
 = 
NULL
;

323 
	`dTHXa
(
pmcf
->
≥æ
);

324 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

326 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
pv
->
sub
, 
NULL
,

327 &
pv
->
h™dÀr
, &
vÆue
);

331 i‡(
vÆue
.
d©a
) {

332 
v
->
Àn
 = 
vÆue
.len;

333 
v
->
vÆid
 = 1;

334 
v
->
no_ˇchóbÀ
 = 0;

335 
v
->
nŸ_found
 = 0;

336 
v
->
d©a
 = 
vÆue
.data;

339 
v
->
nŸ_found
 = 1;

342 
˘x
->
fûíame
.
d©a
 = 
NULL
;

343 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

345 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

348  
rc
;

349 
	}
}

352 #i‡(
NGX_HTTP_SSI
)

354 
ngx_öt_t


355 
	$ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
,

356 
ngx_°r_t
 **
∑øms
)

358 
SV
 *
sv
, **
asv
;

359 
ngx_öt_t
 
rc
;

360 
ngx_°r_t
 *
h™dÀr
, **
¨gs
;

361 
ngx_uöt_t
 
i
;

362 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

363 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

368 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

370 i‡(
˘x
 =
NULL
) {

371 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

372 i‡(
˘x
 =
NULL
) {

373  
NGX_ERROR
;

376 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

379 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

381 
˘x
->
ssi
 = 
ssi_˘x
;

383 
h™dÀr
 = 
∑øms
[
NGX_HTTP_PERL_SSI_SUB
];

384 
h™dÀr
->
d©a
[h™dÀr->
Àn
] = '\0';

388 
	`dTHXa
(
pmcf
->
≥æ
);

389 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

395 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 
h™dÀr
, &
sv
);

397 i‡(
sv
 =&
PL_sv_undef
) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

399 "evÆ_pv(\"%V\"ËÁûed", 
h™dÀr
);

400  
NGX_ERROR
;

403 i‡(
sv
 =
NULL
) {

404 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

409 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

411 
¨gs
 = &
∑øms
[
NGX_HTTP_PERL_SSI_ARG
];

413 i‡(
¨gs
) {

415 
i
 = 0; 
¨gs
[i]; i++) { }

417 
asv
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
i
 + 1Ë* (
SV
 *));

419 i‡(
asv
 =
NULL
) {

420 
	`SvREFCNT_dec
(
sv
);

421  
NGX_ERROR
;

424 
asv
[0] = (
SV
 *Ë
i
;

426 
i
 = 0; 
¨gs
[i]; i++) {

427 
asv
[
i
 + 1] = 
	`√wSVpvn
((*Ë
¨gs
[i]->
d©a
,árgs[i]->
Àn
);

431 
asv
 = 
NULL
;

434 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sv
, 
asv
, 
h™dÀr
,

435 
NULL
);

437 
	`SvREFCNT_dec
(
sv
);

441 
˘x
->
fûíame
.
d©a
 = 
NULL
;

442 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

443 
˘x
->
ssi
 = 
NULL
;

445 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl ssi done");

447  
rc
;

448 
	}
}

454 
	$ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

456 
ngx_°r_t
 *
m
;

457 
ngx_uöt_t
 
i
;

458 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

459 
ngx_poﬁ_˛ónup_t
 *
˛n
;

461 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

462 i‡(
˛n
 =
NULL
) {

463  
NGX_CONF_ERROR
;

468 #ifde‡
NGX_PERL_MODULES


469 i‡(
pmcf
->
moduÀs
 =
NGX_CONF_UNSET_PTR
) {

471 
pmcf
->
moduÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_°r_t
));

472 i‡(
pmcf
->
moduÀs
 =
NULL
) {

473  
NGX_CONF_ERROR
;

476 
m
 = 
	`ngx_¨øy_push
(
pmcf
->
moduÀs
);

477 i‡(
m
 =
NULL
) {

478  
NGX_CONF_ERROR
;

481 
	`ngx_°r_£t
(
m
, 
NGX_PERL_MODULES
);

485 i‡(
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
) {

486 
m
 = 
pmcf
->
moduÀs
->
ñts
;

487 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

488 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
m
[
i
], 0Ë!
NGX_OK
) {

489  
NGX_CONF_ERROR
;

494 #i‡!(
NGX_HAVE_PERL_MULTIPLICITY
)

496 i‡(
≥æ
) {

498 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

499  
NGX_CONF_ERROR
;

502 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
)

503 !
NGX_OK
)

505  
NGX_CONF_ERROR
;

508 
pmcf
->
≥æ
 =Öerl;

509 
pmcf
->
ngöx
 = 
ngöx_°ash
;

511  
NGX_CONF_OK
;

516 i‡(
ngöx_°ash
 =
NULL
) {

517 
	`PERL_SYS_INIT
(&
ngx_¨gc
, &
ngx_¨gv
);

520 
pmcf
->
≥æ
 = 
	`ngx_hâp_≥æ_¸óã_öãΩªãr
(
cf
,Ömcf);

522 i‡(
pmcf
->
≥æ
 =
NULL
) {

523  
NGX_CONF_ERROR
;

526 
pmcf
->
ngöx
 = 
ngöx_°ash
;

528 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

530 
˛n
->
h™dÀr
 = 
ngx_hâp_≥æ_˛ónup_≥æ
;

531 
˛n
->
d©a
 = 
pmcf
->
≥æ
;

535 
≥æ
 = 
pmcf
->perl;

539  
NGX_CONF_OK
;

540 
	}
}

543 
PîlI¡î¥ëî
 *

544 
	$ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

545 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

547 
n
;

548 
STRLEN
 
Àn
;

549 
SV
 *
sv
;

550 *
vî
, **
embeddög
;

551 
ngx_°r_t
 *
m
;

552 
ngx_uöt_t
 
i
;

553 
PîlI¡î¥ëî
 *
≥æ
;

555 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0, "createÖerl interpreter");

557 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

558  
NULL
;

561 
≥æ
 = 
	`≥æ_Æloc
();

562 i‡(
≥æ
 =
NULL
) {

563 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "perl_alloc() failed");

564  
NULL
;

569 
	`dTHXa
(
≥æ
);

570 
	`PERL_SET_CONTEXT
(
≥æ
);

572 
	`≥æ_c⁄°ru˘
(
≥æ
);

574 #ifde‡
PERL_EXIT_DESTRUCT_END


575 
PL_exô_Êags
 |
PERL_EXIT_DESTRUCT_END
;

578 
n
 = (
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
Ë?Ömcf->moduÀs->
√…s
 * 2 : 0;

580 
embeddög
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (4 + 
n
) * (*));

581 i‡(
embeddög
 =
NULL
) {

582 
Áû
;

585 
embeddög
[0] = "";

587 i‡(
n
++) {

588 
m
 = 
pmcf
->
moduÀs
->
ñts
;

589 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

590 
embeddög
[2 * 
i
 + 1] = "-I";

591 
embeddög
[2 * 
i
 + 2] = (*Ë
m
[i].
d©a
;

595 
embeddög
[
n
++] = "-Mnginx";

596 
embeddög
[
n
++] = "-e";

597 
embeddög
[
n
++] = "0";

599 
n
 = 
	`≥æ_∑r£
(
≥æ
, 
ngx_hâp_≥æ_xs_öô
,Ç, 
embeddög
, 
NULL
);

601 i‡(
n
 != 0) {

602 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "≥æ_∑r£(ËÁûed: %d", 
n
);

603 
Áû
;

606 
sv
 = 
	`gë_sv
("ngöx::VERSION", 
FALSE
);

607 
vî
 = 
	`SvPV
(
sv
, 
Àn
);

609 i‡(
	`ngx_°rcmp
(
vî
, 
NGINX_VERSION
) != 0) {

610 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

611 "vîsi⁄ " 
NGINX_VERSION
 " ofÇginx.pm isÑequired, "

612 "buà%†wa†found", 
vî
);

613 
Áû
;

616 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
Ë!
NGX_OK
) {

617 
Áû
;

622  
≥æ
;

624 
Áû
:

626 (Ë
	`≥æ_de°ru˘
(
≥æ
);

628 
	`≥æ_‰ì
(
≥æ
);

630  
NULL
;

631 
	}
}

634 
ngx_öt_t


635 
	$ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
, 
ngx_log_t
 *
log
)

637 
u_ch¨
 *
îr
;

638 
STRLEN
 
Àn
;

639 
ngx_°r_t
 *
s¸ùt
;

640 
ngx_uöt_t
 
i
;

642 i‡(
ªquúes
 =
NGX_CONF_UNSET_PTR
) {

643  
NGX_OK
;

646 
s¸ùt
 = 
ªquúes
->
ñts
;

647 
i
 = 0; i < 
ªquúes
->
√…s
; i++) {

649 
	`ªquúe_pv
((*Ë
s¸ùt
[
i
].
d©a
);

651 i‡(
	`SvTRUE
(
ERRSV
)) {

653 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

654 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

656 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

658 
s¸ùt
[
i
].
d©a
, 
Àn
 + 1, 
îr
);

660  
NGX_ERROR
;

664  
NGX_OK
;

665 
	}
}

668 
ngx_öt_t


669 
	$ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
, 
HV
 *
ngöx
, 
SV
 *
sub
,

670 
SV
 **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
)

672 
SV
 *
sv
;

673 
n
, 
°©us
;

674 *
löe
;

675 
u_ch¨
 *
îr
;

676 
STRLEN
 
Àn
, 
n_a
;

677 
ngx_uöt_t
 
i
;

678 
ngx_c⁄√˘i⁄_t
 *
c
;

680 
dSP
;

682 
°©us
 = 0;

684 
ENTER
;

685 
SAVETMPS
;

687 
	`PUSHMARK
(
•
);

689 
sv
 = 
	`sv_2m‹èl
(
	`sv_bÀss
(
	`√wRV_noöc
(
	`√wSViv
(
	`PTR2IV
(
r
))), 
ngöx
));

690 
	`XPUSHs
(
sv
);

692 i‡(
¨gs
) {

693 
	`EXTEND
(
•
, (
öçå_t
Ë
¨gs
[0]);

695 
i
 = 1; i <(
ngx_uöt_t
Ë
¨gs
[0]; i++) {

696 
	`PUSHs
(
	`sv_2m‹èl
(
¨gs
[
i
]));

700 
PUTBACK
;

702 
c
 = 
r
->
c⁄√˘i⁄
;

704 
n
 = 
	`ˇŒ_sv
(
sub
, 
G_EVAL
);

706 
SPAGAIN
;

708 i‡(
n
) {

709 i‡(
rv
 =
NULL
) {

710 
°©us
 = 
POPi
;

712 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

713 "ˇŒ_sv: %d", 
°©us
);

716 
löe
 = 
	`SvPVx
(
POPs
, 
n_a
);

717 
rv
->
Àn
 = 
n_a
;

719 
rv
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
n_a
);

720 i‡(
rv
->
d©a
 =
NULL
) {

721  
NGX_ERROR
;

724 
	`ngx_mem˝y
(
rv
->
d©a
, 
löe
, 
n_a
);

728 
PUTBACK
;

730 
FREETMPS
;

731 
LEAVE
;

735 i‡(
	`SvTRUE
(
ERRSV
)) {

737 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

738 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

741 "ˇŒ_sv(\"%V\"ËÁûed: \"%*s\"", 
h™dÀr
, 
Àn
 + 1, 
îr
);

743 i‡(
rv
) {

744  
NGX_ERROR
;

747  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

750 i‡(
n
 != 1) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

752 "ˇŒ_sv(\"%V\"Ëªtu∫ed %dÑesu…s", 
h™dÀr
, 
n
);

753 
°©us
 = 
NGX_OK
;

756 i‡(
rv
) {

757  
NGX_OK
;

760  (
ngx_öt_t
Ë
°©us
;

761 
	}
}

765 
	$ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
)

767 
u_ch¨
 *
p
;

769 
p
 = 
h™dÀr
->
d©a
; *p;Ö++) {

770 i‡(*
p
 !' ' && *∞!'\t' && *∞!
CR
 && *∞!
LF
) {

775 i‡(
	`ngx_°∫cmp
(
p
, "sub ", 4) == 0

776 || 
	`ngx_°∫cmp
(
p
, "sub{", 4) == 0

777 || 
	`ngx_°∫cmp
(
p
, "use ", 4) == 0)

779 *
sv
 = 
	`evÆ_pv
((*Ë
p
, 
FALSE
);

786 *
sv
 = 
NULL
;

787 
	}
}

791 
	$ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

793 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

795 
pmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_maö_c⁄f_t
));

796 i‡(
pmcf
 =
NULL
) {

797  
NULL
;

800 
pmcf
->
moduÀs
 = 
NGX_CONF_UNSET_PTR
;

801 
pmcf
->
ªquúes
 = 
NGX_CONF_UNSET_PTR
;

803  
pmcf
;

804 
	}
}

808 
	$ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

810 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
 = 
c⁄f
;

812 i‡(
pmcf
->
≥æ
 =
NULL
) {

813 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

814  
NGX_CONF_ERROR
;

818  
NGX_CONF_OK
;

819 
	}
}

822 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

825 
	$ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
)

827 
PîlI¡î¥ëî
 *
≥æ
 = 
d©a
;

829 
	`PERL_SET_CONTEXT
(
≥æ
);

831 (Ë
	`≥æ_de°ru˘
(
≥æ
);

833 
	`≥æ_‰ì
(
≥æ
);

835 i‡(
ngx_≥æ_ãrm
) {

836 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0, "perlÅerm");

838 
	`PERL_SYS_TERM
();

840 
	}
}

845 
ngx_öt_t


846 
	$ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

848 #i‡(
NGX_HTTP_SSI
)

849 
ngx_öt_t
 
rc
;

850 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

852 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

854 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
ngx_hâp_≥æ_ssi_comm™d
.
«me
,

855 &
ngx_hâp_≥æ_ssi_comm™d
, 
NGX_HASH_READONLY_KEY
);

857 i‡(
rc
 !
NGX_OK
) {

858 i‡(
rc
 =
NGX_BUSY
) {

859 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

861 &
ngx_hâp_≥æ_ssi_comm™d
.
«me
);

864  
NGX_ERROR
;

868  
NGX_OK
;

869 
	}
}

873 
	$ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

875 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

877 
∂cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_loc_c⁄f_t
));

878 i‡(
∂cf
 =
NULL
) {

879  
NULL
;

888  
∂cf
;

889 
	}
}

893 
	$ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

895 
ngx_hâp_≥æ_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

896 
ngx_hâp_≥æ_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

898 i‡(
c⁄f
->
sub
 =
NULL
) {

899 
c⁄f
->
sub
 = 
¥ev
->sub;

900 
c⁄f
->
h™dÀr
 = 
¥ev
->handler;

903  
NGX_CONF_OK
;

904 
	}
}

908 
	$ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

910 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

912 
ngx_°r_t
 *
vÆue
;

913 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

914 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

916 
vÆue
 = 
cf
->
¨gs
->
ñts
;

918 i‡(
∂cf
->
h™dÀr
.
d©a
) {

919 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

920 "du∂iˇãÖî»h™dÀ∏\"%V\"", &
vÆue
[1]);

921  
NGX_CONF_ERROR
;

924 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

926 i‡(
pmcf
->
≥æ
 =
NULL
) {

927 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

928  
NGX_CONF_ERROR
;

932 
∂cf
->
h™dÀr
 = 
vÆue
[1];

936 
	`dTHXa
(
pmcf
->
≥æ
);

937 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

939 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[1], &
∂cf
->
sub
);

941 i‡(
∂cf
->
sub
 =&
PL_sv_undef
) {

942 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

943 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[1]);

944  
NGX_CONF_ERROR
;

947 i‡(
∂cf
->
sub
 =
NULL
) {

948 
∂cf
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[1].
d©a
, vÆue[1].
Àn
);

953 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

954 
˛cf
->
h™dÀr
 = 
ngx_hâp_≥æ_h™dÀr
;

956  
NGX_CONF_OK
;

957 
	}
}

961 
	$ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

963 
ngx_öt_t
 
ödex
;

964 
ngx_°r_t
 *
vÆue
;

965 
ngx_hâp_v¨übÀ_t
 *
v
;

966 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
;

967 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

969 
vÆue
 = 
cf
->
¨gs
->
ñts
;

971 i‡(
vÆue
[1].
d©a
[0] != '$') {

972 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

973 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

974  
NGX_CONF_ERROR
;

977 
vÆue
[1].
Àn
--;

978 
vÆue
[1].
d©a
++;

980 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

981 i‡(
v
 =
NULL
) {

982  
NGX_CONF_ERROR
;

985 
pv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_v¨übÀ_t
));

986 i‡(
pv
 =
NULL
) {

987  
NGX_CONF_ERROR
;

990 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

991 i‡(
ödex
 =
NGX_ERROR
) {

992  
NGX_CONF_ERROR
;

995 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

997 i‡(
pmcf
->
≥æ
 =
NULL
) {

998 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

999  
NGX_CONF_ERROR
;

1003 
pv
->
h™dÀr
 = 
vÆue
[2];

1007 
	`dTHXa
(
pmcf
->
≥æ
);

1008 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1010 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[2], &
pv
->
sub
);

1012 i‡(
pv
->
sub
 =&
PL_sv_undef
) {

1013 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

1014 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[2]);

1015  
NGX_CONF_ERROR
;

1018 i‡(
pv
->
sub
 =
NULL
) {

1019 
pv
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[2].
d©a
, vÆue[2].
Àn
);

1024 
v
->
gë_h™dÀr
 = 
ngx_hâp_≥æ_v¨übÀ
;

1025 
v
->
d©a
 = (
uöçå_t
Ë
pv
;

1027  
NGX_CONF_OK
;

1028 
	}
}

1031 
ngx_öt_t


1032 
	$ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

1034 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

1036 
pmcf
 = 
	`ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
ngx_hâp_≥æ_moduÀ
);

1038 i‡(
pmcf
) {

1039 
	`dTHXa
(
pmcf
->
≥æ
);

1040 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1044 
	`sv_£tiv
(
	`GvSV
(
	`gv_„tchpv
("$", 
TRUE
, 
SVt_PV
)), (
I32
Ë
ngx_pid
);

1047  
NGX_OK
;

1048 
	}
}

1052 
	$ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1054 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

1061 
ngx_≥æ_ãrm
 = 1;

1065 i‡(
ngöx_°ash
) {

1066 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cy˛e
->
log
, 0, "perlÅerm");

1068 (Ë
	`≥æ_de°ru˘
(
≥æ
);

1070 
	`≥æ_‰ì
(
≥æ
);

1072 
	`PERL_SYS_TERM
();

1076 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.h

8 #i‚de‡
_NGX_HTTP_PERL_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_PERL_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

15 
	~<ngöx.h
>

17 
	~<EXTERN.h
>

18 
	~<≥æ.h
>

21 
ngx_hâp_ªque°_t
 *
	tngöx
;

24 
ngx_°r_t
 
	mfûíame
;

25 
ngx_°r_t
 
	mªdúe˘_uri
;

26 
ngx_°r_t
 
	mªdúe˘_¨gs
;

28 
SV
 *
	m√xt
;

30 
ngx_uöt_t
 
	md⁄e
;

32 
ngx_¨øy_t
 *
	mv¨übÀs
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_hâp_ssi_˘x_t
 *
	mssi
;

37 } 
	tngx_hâp_≥æ_˘x_t
;

41 
ngx_uöt_t
 
	mhash
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_°r_t
 
	mvÆue
;

44 } 
	tngx_hâp_≥æ_v¨_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_≥æ_moduÀ
;

54 #i‚de‡
PERL_IMPLICIT_CONTEXT


55 #unde‡
dTHXa


56 
	#dTHXa
(
a
)

	)

60 
boŸ_Dy«Lﬂdî
(
pTHX_
 
CV
* 
cv
);

63 
ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

	@src/http/ngx_http.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

13 
ngx_öt_t
 
ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
,

14 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

15 
ngx_öt_t
 
ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
,

16 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

17 
ngx_öt_t
 
ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

18 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

20 
ngx_öt_t
 
ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
,

21 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

22 
ngx_hâp_li°í_›t_t
 *
ls›t
);

23 
ngx_öt_t
 
ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
,

24 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

25 
ngx_hâp_li°í_›t_t
 *
ls›t
);

26 
ngx_öt_t
 
ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
,

27 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

29 *
ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
,

30 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

31 
ngx_uöt_t
 
˘x_ödex
);

32 *
ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

33 
ngx_queue_t
 *
loˇti⁄s
, **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

34 
ngx_uöt_t
 
˘x_ödex
);

35 
ngx_öt_t
 
ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

36 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

37 
ngx_öt_t
 
ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

38 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

39 
ngx_öt_t
 
ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
,

40 c⁄° 
ngx_queue_t
 *
two
);

41 
ngx_öt_t
 
ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_queue_t
 *
loˇti⁄s
);

43 
ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,

44 
ngx_queue_t
 *
q
);

45 
ngx_hâp_loˇti⁄_åì_node_t
 *

46 
ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

47 
size_t
 
¥efix
);

49 
ngx_öt_t
 
ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
,

50 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_¨øy_t
 *
p‹ts
);

51 
ngx_öt_t
 
ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
,

52 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

53 
ngx_öt_t
 
ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

54 
ngx_libc_cde˛
 
ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

55 c⁄° *
two
);

57 
ngx_öt_t
 
ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
,

58 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
);

59 
ngx_li°íög_t
 *
ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
,

60 
ngx_hâp_c⁄f_addr_t
 *
addr
);

61 
ngx_öt_t
 
ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

62 
ngx_hâp_c⁄f_addr_t
 *
addr
);

63 #i‡(
NGX_HAVE_INET6
)

64 
ngx_öt_t
 
ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

65 
ngx_hâp_c⁄f_addr_t
 *
addr
);

67 #i‡(
NGX_HAVE_SERVAL
)

68 
ngx_öt_t
 
ngx_hâp_add_£rvi˚id
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

69 
ngx_hâp_c⁄f_addr_t
 *
addr
);

72 
ngx_uöt_t
 
	gngx_hâp_max_moduÀ
;

75 
	$ngx_öt_t
 (*
ngx_hâp_t›_hódî_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
);

76 
	$ngx_öt_t
 (*
ngx_hâp_t›_body_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ch
);

79 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[] = {

80 
	`ngx_°rög
("text/html"),

81 
ngx_nuŒ_°rög


82 
	}
};

85 
ngx_comm™d_t
 
	gngx_hâp_comm™ds
[] = {

87 { 
ngx_°rög
("http"),

88 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

89 
ngx_hâp_block
,

92 
NULL
 },

94 
ngx_nuŒ_comm™d


98 
ngx_c‹e_moduÀ_t
 
	gngx_hâp_moduÀ_˘x
 = {

99 
ngx_°rög
("http"),

100 
NULL
,

101 
NULL


105 
ngx_moduÀ_t
 
	gngx_hâp_moduÀ
 = {

106 
NGX_MODULE_V1
,

107 &
ngx_hâp_moduÀ_˘x
,

108 
ngx_hâp_comm™ds
,

109 
NGX_CORE_MODULE
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NGX_MODULE_V1_PADDING


122 
	$ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

124 *
rv
;

125 
ngx_uöt_t
 
mi
, 
m
, 
s
;

126 
ngx_c⁄f_t
 
pcf
;

127 
ngx_hâp_moduÀ_t
 *
moduÀ
;

128 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

129 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

130 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

131 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

135 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

136 i‡(
˘x
 =
NULL
) {

137  
NGX_CONF_ERROR
;

140 *(
ngx_hâp_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

145 
ngx_hâp_max_moduÀ
 = 0;

146 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

147 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

151 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_hâp_max_moduÀ
++;

157 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

158 (*Ë* 
ngx_hâp_max_moduÀ
);

159 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

160  
NGX_CONF_ERROR
;

169 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

170 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

171  
NGX_CONF_ERROR
;

180 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

181 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

182  
NGX_CONF_ERROR
;

191 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

192 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

196 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

197 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

199 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

200 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

201 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

202  
NGX_CONF_ERROR
;

206 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

207 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

208 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

209  
NGX_CONF_ERROR
;

213 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

214 
˘x
->
loc_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

215 i‡(
˘x
->
loc_c⁄f
[
mi
] =
NULL
) {

216  
NGX_CONF_ERROR
;

221 
pcf
 = *
cf
;

222 
cf
->
˘x
 = ctx;

224 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

225 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

229 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

231 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

232 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

233  
NGX_CONF_ERROR
;

240 
cf
->
moduÀ_ty≥
 = 
NGX_HTTP_MODULE
;

241 
cf
->
cmd_ty≥
 = 
NGX_HTTP_MAIN_CONF
;

242 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

244 i‡(
rv
 !
NGX_CONF_OK
) {

245 
Áûed
;

253 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

254 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

256 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

257 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

261 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

262 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

266 i‡(
moduÀ
->
öô_maö_c⁄f
) {

267 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

268 i‡(
rv
 !
NGX_CONF_OK
) {

269 
Áûed
;

273 
rv
 = 
	`ngx_hâp_mîge_£rvîs
(
cf
, 
cmcf
, 
moduÀ
, 
mi
);

274 i‡(
rv
 !
NGX_CONF_OK
) {

275 
Áûed
;

282 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

284 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

286 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
cscÂ
[
s
], 
˛cf
Ë!
NGX_OK
) {

287  
NGX_CONF_ERROR
;

290 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

291  
NGX_CONF_ERROR
;

296 i‡(
	`ngx_hâp_öô_pha£s
(
cf
, 
cmcf
Ë!
NGX_OK
) {

297  
NGX_CONF_ERROR
;

300 i‡(
	`ngx_hâp_öô_hódîs_ö_hash
(
cf
, 
cmcf
Ë!
NGX_OK
) {

301  
NGX_CONF_ERROR
;

305 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

306 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

310 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

312 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

313 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

314  
NGX_CONF_ERROR
;

319 i‡(
	`ngx_hâp_v¨übÀs_öô_v¨s
(
cf
Ë!
NGX_OK
) {

320  
NGX_CONF_ERROR
;

328 *
cf
 = 
pcf
;

331 i‡(
	`ngx_hâp_öô_pha£_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

332  
NGX_CONF_ERROR
;

338 i‡(
	`ngx_hâp_›timize_£rvîs
(
cf
, 
cmcf
, cmcf->
p‹ts
Ë!
NGX_OK
) {

339  
NGX_CONF_ERROR
;

342  
NGX_CONF_OK
;

344 
Áûed
:

346 *
cf
 = 
pcf
;

348  
rv
;

349 
	}
}

352 
ngx_öt_t


353 
	$ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

355 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
,

356 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

357 !
NGX_OK
)

359  
NGX_ERROR
;

362 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
,

363 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

364 !
NGX_OK
)

366  
NGX_ERROR
;

369 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
,

370 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

371 !
NGX_OK
)

373  
NGX_ERROR
;

376 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
,

377 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

378 !
NGX_OK
)

380  
NGX_ERROR
;

383 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
,

384 
cf
->
poﬁ
, 2, (
ngx_hâp_h™dÀr_±
))

385 !
NGX_OK
)

387  
NGX_ERROR
;

390 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
,

391 
cf
->
poﬁ
, 4, (
ngx_hâp_h™dÀr_±
))

392 !
NGX_OK
)

394  
NGX_ERROR
;

397 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
,

398 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

399 !
NGX_OK
)

401  
NGX_ERROR
;

404  
NGX_OK
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

411 
ngx_¨øy_t
 
hódîs_ö
;

412 
ngx_hash_key_t
 *
hk
;

413 
ngx_hash_öô_t
 
hash
;

414 
ngx_hâp_hódî_t
 *
hódî
;

416 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

417 !
NGX_OK
)

419  
NGX_ERROR
;

422 
hódî
 = 
ngx_hâp_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

423 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

424 i‡(
hk
 =
NULL
) {

425  
NGX_ERROR
;

428 
hk
->
key
 = 
hódî
->
«me
;

429 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

430 
hk
->
vÆue
 = 
hódî
;

433 
hash
.hash = &
cmcf
->
hódîs_ö_hash
;

434 
hash
.
key
 = 
ngx_hash_key_lc
;

435 
hash
.
max_size
 = 512;

436 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

437 
hash
.
«me
 = "headers_in_hash";

438 
hash
.
poﬁ
 = 
cf
->pool;

439 
hash
.
ãmp_poﬁ
 = 
NULL
;

441 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

442  
NGX_ERROR
;

445  
NGX_OK
;

446 
	}
}

449 
ngx_öt_t


450 
	$ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

452 
ngx_öt_t
 
j
;

453 
ngx_uöt_t
 
i
, 
n
;

454 
ngx_uöt_t
 
föd_c⁄fig_ödex
, 
u£_ªwrôe
, 
u£_ac˚ss
;

455 
ngx_hâp_h™dÀr_±
 *
h
;

456 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

457 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

459 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

460 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

461 
föd_c⁄fig_ödex
 = 0;

462 
u£_ªwrôe
 = 
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

463 
u£_ac˚ss
 = 
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

465 
n
 = 
u£_ªwrôe
 + 
u£_ac˚ss
 + 
cmcf
->
åy_fûes
 + 1 ;

467 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

468 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

471 
ph
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

472 
n
 * (
ngx_hâp_pha£_h™dÀr_t
) + (*));

473 i‡(
ph
 =
NULL
) {

474  
NGX_ERROR
;

477 
cmcf
->
pha£_ígöe
.
h™dÀrs
 = 
ph
;

478 
n
 = 0;

480 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

481 
h
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
ñts
;

483 
i
) {

485 
NGX_HTTP_SERVER_REWRITE_PHASE
:

486 i‡(
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

487 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = 
n
;

489 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

493 
NGX_HTTP_FIND_CONFIG_PHASE
:

494 
föd_c⁄fig_ödex
 = 
n
;

496 
ph
->
checkî
 = 
ngx_hâp_c‹e_föd_c⁄fig_pha£
;

497 
n
++;

498 
ph
++;

502 
NGX_HTTP_REWRITE_PHASE
:

503 i‡(
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

504 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = 
n
;

506 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

510 
NGX_HTTP_POST_REWRITE_PHASE
:

511 i‡(
u£_ªwrôe
) {

512 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ªwrôe_pha£
;

513 
ph
->
√xt
 = 
föd_c⁄fig_ödex
;

514 
n
++;

515 
ph
++;

520 
NGX_HTTP_ACCESS_PHASE
:

521 
checkî
 = 
ngx_hâp_c‹e_ac˚ss_pha£
;

522 
n
++;

525 
NGX_HTTP_POST_ACCESS_PHASE
:

526 i‡(
u£_ac˚ss
) {

527 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ac˚ss_pha£
;

528 
ph
->
√xt
 = 
n
;

529 
ph
++;

534 
NGX_HTTP_TRY_FILES_PHASE
:

535 i‡(
cmcf
->
åy_fûes
) {

536 
ph
->
checkî
 = 
ngx_hâp_c‹e_åy_fûes_pha£
;

537 
n
++;

538 
ph
++;

543 
NGX_HTTP_CONTENT_PHASE
:

544 
checkî
 = 
ngx_hâp_c‹e_c⁄ã¡_pha£
;

548 
checkî
 = 
ngx_hâp_c‹e_gíîic_pha£
;

551 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

553 
j
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
 - 1; j >=0; j--) {

554 
ph
->
checkî
 = checker;

555 
ph
->
h™dÀr
 = 
h
[
j
];

556 
ph
->
√xt
 = 
n
;

557 
ph
++;

561  
NGX_OK
;

562 
	}
}

566 
	$ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

567 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

569 *
rv
;

570 
ngx_uöt_t
 
s
;

571 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

572 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

573 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

575 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

576 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

577 
ßved
 = *
˘x
;

578 
rv
 = 
NGX_CONF_OK
;

580 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

584 
˘x
->
§v_c⁄f
 = 
cscÂ
[
s
]->ctx->srv_conf;

586 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

587 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
, 
ßved
.
§v_c⁄f
[
˘x_ödex
],

588 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
˘x_ödex
]);

589 i‡(
rv
 !
NGX_CONF_OK
) {

590 
Áûed
;

594 i‡(
moduÀ
->
mîge_loc_c⁄f
) {

598 
˘x
->
loc_c⁄f
 = 
cscÂ
[
s
]->ctx->loc_conf;

600 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
ßved
.
loc_c⁄f
[
˘x_ödex
],

601 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
˘x_ödex
]);

602 i‡(
rv
 !
NGX_CONF_OK
) {

603 
Áûed
;

608 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

610 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
,

611 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
,

612 
moduÀ
, 
˘x_ödex
);

613 i‡(
rv
 !
NGX_CONF_OK
) {

614 
Áûed
;

619 
Áûed
:

621 *
˘x
 = 
ßved
;

623  
rv
;

624 
	}
}

628 
	$ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

629 **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

631 *
rv
;

632 
ngx_queue_t
 *
q
;

633 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

634 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

635 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

637 i‡(
loˇti⁄s
 =
NULL
) {

638  
NGX_CONF_OK
;

641 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

642 
ßved
 = *
˘x
;

644 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

645 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

646 
q
 = 
	`ngx_queue_√xt
(q))

648 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

650 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

651 
˘x
->
loc_c⁄f
 = 
˛cf
->loc_conf;

653 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
loc_c⁄f
[
˘x_ödex
],

654 
˛cf
->
loc_c⁄f
[
˘x_ödex
]);

655 i‡(
rv
 !
NGX_CONF_OK
) {

656  
rv
;

659 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
, clcf->
loc_c⁄f
,

660 
moduÀ
, 
˘x_ödex
);

661 i‡(
rv
 !
NGX_CONF_OK
) {

662  
rv
;

666 *
˘x
 = 
ßved
;

668  
NGX_CONF_OK
;

669 
	}
}

672 
ngx_öt_t


673 
	$ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

674 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

676 
ngx_uöt_t
 
n
;

677 
ngx_queue_t
 *
q
, *
loˇti⁄s
, *
«med
, 
èû
;

678 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

679 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

680 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

681 #i‡(
NGX_PCRE
)

682 
ngx_uöt_t
 
r
;

683 
ngx_queue_t
 *
ªgex
;

686 
loˇti⁄s
 = 
p˛cf
->locations;

688 i‡(
loˇti⁄s
 =
NULL
) {

689  
NGX_OK
;

692 
	`ngx_queue_s‹t
(
loˇti⁄s
, 
ngx_hâp_cmp_loˇti⁄s
);

694 
«med
 = 
NULL
;

695 
n
 = 0;

696 #i‡(
NGX_PCRE
)

697 
ªgex
 = 
NULL
;

698 
r
 = 0;

701 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

702 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

703 
q
 = 
	`ngx_queue_√xt
(q))

705 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

707 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

709 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
NULL
, 
˛cf
Ë!
NGX_OK
) {

710  
NGX_ERROR
;

713 #i‡(
NGX_PCRE
)

715 i‡(
˛cf
->
ªgex
) {

716 
r
++;

718 i‡(
ªgex
 =
NULL
) {

719 
ªgex
 = 
q
;

727 i‡(
˛cf
->
«med
) {

728 
n
++;

730 i‡(
«med
 =
NULL
) {

731 
«med
 = 
q
;

737 i‡(
˛cf
->
n⁄ame
) {

742 i‡(
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

743 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

746 i‡(
«med
) {

747 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

748 (
n
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

749 i‡(
˛cÂ
 =
NULL
) {

750  
NGX_ERROR
;

753 
cscf
->
«med_loˇti⁄s
 = 
˛cÂ
;

755 
q
 = 
«med
;

756 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

757 
q
 = 
	`ngx_queue_√xt
(q))

759 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

761 *(
˛cÂ
++Ë
lq
->
exa˘
;

764 *
˛cÂ
 = 
NULL
;

766 
	`ngx_queue_•lô
(
loˇti⁄s
, 
«med
, &
èû
);

769 #i‡(
NGX_PCRE
)

771 i‡(
ªgex
) {

773 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

774 (
r
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

775 i‡(
˛cÂ
 =
NULL
) {

776  
NGX_ERROR
;

779 
p˛cf
->
ªgex_loˇti⁄s
 = 
˛cÂ
;

781 
q
 = 
ªgex
;

782 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

783 
q
 = 
	`ngx_queue_√xt
(q))

785 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

787 *(
˛cÂ
++Ë
lq
->
exa˘
;

790 *
˛cÂ
 = 
NULL
;

792 
	`ngx_queue_•lô
(
loˇti⁄s
, 
ªgex
, &
èû
);

797  
NGX_OK
;

798 
	}
}

801 
ngx_öt_t


802 
	$ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

803 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

805 
ngx_queue_t
 *
q
, *
loˇti⁄s
;

806 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

807 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

809 
loˇti⁄s
 = 
p˛cf
->locations;

811 i‡(
loˇti⁄s
 =
NULL
) {

812  
NGX_OK
;

815 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

816  
NGX_OK
;

819 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

820 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

821 
q
 = 
	`ngx_queue_√xt
(q))

823 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

825 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

827 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

828  
NGX_ERROR
;

832 i‡(
	`ngx_hâp_joö_exa˘_loˇti⁄s
(
cf
, 
loˇti⁄s
Ë!
NGX_OK
) {

833  
NGX_ERROR
;

836 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_hód
(locations));

838 
p˛cf
->
°©ic_loˇti⁄s
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 0);

839 i‡(
p˛cf
->
°©ic_loˇti⁄s
 =
NULL
) {

840  
NGX_ERROR
;

843  
NGX_OK
;

844 
	}
}

847 
ngx_öt_t


848 
	$ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

849 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
)

851 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

853 i‡(*
loˇti⁄s
 =
NULL
) {

854 *
loˇti⁄s
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
,

855 (
ngx_hâp_loˇti⁄_queue_t
));

856 i‡(*
loˇti⁄s
 =
NULL
) {

857  
NGX_ERROR
;

860 
	`ngx_queue_öô
(*
loˇti⁄s
);

863 
lq
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
, (
ngx_hâp_loˇti⁄_queue_t
));

864 i‡(
lq
 =
NULL
) {

865  
NGX_ERROR
;

868 i‡(
˛cf
->
exa˘_m©ch


869 #i‡(
NGX_PCRE
)

870 || 
˛cf
->
ªgex


872 || 
˛cf
->
«med
 || clcf->
n⁄ame
)

874 
lq
->
exa˘
 = 
˛cf
;

875 
lq
->
ö˛usive
 = 
NULL
;

878 
lq
->
exa˘
 = 
NULL
;

879 
lq
->
ö˛usive
 = 
˛cf
;

882 
lq
->
«me
 = &
˛cf
->name;

883 
lq
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

884 
lq
->
löe
 = 
cf
->
c⁄f_fûe
->line;

886 
	`ngx_queue_öô
(&
lq
->
li°
);

888 
	`ngx_queue_ö£π_èû
(*
loˇti⁄s
, &
lq
->
queue
);

890  
NGX_OK
;

891 
	}
}

894 
ngx_öt_t


895 
	$ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
, c⁄°Çgx_queue_à*
two
)

897 
ngx_öt_t
 
rc
;

898 
ngx_hâp_c‹e_loc_c⁄f_t
 *
fú°
, *
£c⁄d
;

899 
ngx_hâp_loˇti⁄_queue_t
 *
lq1
, *
lq2
;

901 
lq1
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
⁄e
;

902 
lq2
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
two
;

904 
fú°
 = 
lq1
->
exa˘
 ?Üq1->exa˘ :Üq1->
ö˛usive
;

905 
£c⁄d
 = 
lq2
->
exa˘
 ?Üq2->exa˘ :Üq2->
ö˛usive
;

907 i‡(
fú°
->
n⁄ame
 && !
£c⁄d
->noname) {

912 i‡(!
fú°
->
n⁄ame
 && 
£c⁄d
->noname) {

917 i‡(
fú°
->
n⁄ame
 || 
£c⁄d
->noname) {

922 i‡(
fú°
->
«med
 && !
£c⁄d
->named) {

927 i‡(!
fú°
->
«med
 && 
£c⁄d
->named) {

932 i‡(
fú°
->
«med
 && 
£c⁄d
->named) {

933  
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

936 #i‡(
NGX_PCRE
)

938 i‡(
fú°
->
ªgex
 && !
£c⁄d
->regex) {

943 i‡(!
fú°
->
ªgex
 && 
£c⁄d
->regex) {

948 i‡(
fú°
->
ªgex
 || 
£c⁄d
->regex) {

955 
rc
 = 
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

957 i‡(
rc
 =0 && !
fú°
->
exa˘_m©ch
 && 
£c⁄d
->exact_match) {

962  
rc
;

963 
	}
}

966 
ngx_öt_t


967 
	$ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
)

969 
ngx_queue_t
 *
q
, *
x
;

970 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

972 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

974 
q
 !
	`ngx_queue_œ°
(
loˇti⁄s
)) {

976 
x
 = 
	`ngx_queue_√xt
(
q
);

978 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

979 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

981 i‡(
	`ngx_°rcmp
(
lq
->
«me
->
d©a
, 
lx
->name->data) == 0) {

983 i‡((
lq
->
exa˘
 && 
lx
->exa˘Ë|| (lq->
ö˛usive
 &&Üx->inclusive)) {

984 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

986 
lx
->
«me
,Üx->
fûe_«me
,Üx->
löe
);

988  
NGX_ERROR
;

991 
lq
->
ö˛usive
 = 
lx
->inclusive;

993 
	`ngx_queue_ªmove
(
x
);

998 
q
 = 
	`ngx_queue_√xt
(q);

1001  
NGX_OK
;

1002 
	}
}

1006 
	$ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,Çgx_queue_à*
q
)

1008 
u_ch¨
 *
«me
;

1009 
size_t
 
Àn
;

1010 
ngx_queue_t
 *
x
, 
èû
;

1011 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

1013 i‡(
q
 =
	`ngx_queue_œ°
(
loˇti⁄s
)) {

1017 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1019 i‡(
lq
->
ö˛usive
 =
NULL
) {

1020 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_√xt
(
q
));

1024 
Àn
 = 
lq
->
«me
->len;

1025 
«me
 = 
lq
->«me->
d©a
;

1027 
x
 = 
	`ngx_queue_√xt
(
q
);

1028 
x
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

1029 
x
 = 
	`ngx_queue_√xt
(x))

1031 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

1033 i‡(
Àn
 > 
lx
->
«me
->len

1034 || (
	`ngx_°∫cmp
(
«me
, 
lx
->«me->
d©a
, 
Àn
) != 0))

1040 
q
 = 
	`ngx_queue_√xt
(q);

1042 i‡(
q
 =
x
) {

1043 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1047 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1048 
	`ngx_queue_add
(&
lq
->
li°
, &
èû
);

1050 i‡(
x
 =
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

1051 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1055 
	`ngx_queue_•lô
(&
lq
->
li°
, 
x
, &
èû
);

1056 
	`ngx_queue_add
(
loˇti⁄s
, &
èû
);

1058 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1060 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1061 
	}
}

1069 
ngx_hâp_loˇti⁄_åì_node_t
 *

1070 
	$ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

1071 
size_t
 
¥efix
)

1073 
size_t
 
Àn
;

1074 
ngx_queue_t
 *
q
, 
èû
;

1075 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

1076 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
;

1078 
q
 = 
	`ngx_queue_middÀ
(
loˇti⁄s
);

1080 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1081 
Àn
 = 
lq
->
«me
->À¿- 
¥efix
;

1083 
node
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1084 
	`off£tof
(
ngx_hâp_loˇti⁄_åì_node_t
, 
«me
Ë+ 
Àn
);

1085 i‡(
node
 =
NULL
) {

1086  
NULL
;

1089 
node
->
À·
 = 
NULL
;

1090 
node
->
right
 = 
NULL
;

1091 
node
->
åì
 = 
NULL
;

1092 
node
->
exa˘
 = 
lq
->exact;

1093 
node
->
ö˛usive
 = 
lq
->inclusive;

1095 
node
->
auto_ªdúe˘
 = (
u_ch¨
Ë((
lq
->
exa˘
 &&Üq->exact->auto_redirect)

1096 || (
lq
->
ö˛usive
 &&Üq->ö˛usive->
auto_ªdúe˘
));

1098 
node
->
Àn
 = (
u_ch¨
)Üen;

1099 
	`ngx_mem˝y
(
node
->
«me
, &
lq
->«me->
d©a
[
¥efix
], 
Àn
);

1101 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1103 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

1108 
ö˛usive
;

1111 
node
->
À·
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 
¥efix
);

1112 i‡(
node
->
À·
 =
NULL
) {

1113  
NULL
;

1116 
	`ngx_queue_ªmove
(
q
);

1118 i‡(
	`ngx_queue_em±y
(&
èû
)) {

1119 
ö˛usive
;

1122 
node
->
right
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
èû
, 
¥efix
);

1123 i‡(
node
->
right
 =
NULL
) {

1124  
NULL
;

1127 
ö˛usive
:

1129 i‡(
	`ngx_queue_em±y
(&
lq
->
li°
)) {

1130  
node
;

1133 
node
->
åì
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
lq
->
li°
, 
¥efix
 + 
Àn
);

1134 i‡(
node
->
åì
 =
NULL
) {

1135  
NULL
;

1138  
node
;

1139 
	}
}

1142 
ngx_öt_t


1143 
	$ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1144 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1146 
ö_p‹t_t
 
p
;

1147 
ngx_uöt_t
 
i
;

1148 
sockaddr
 *
ß
;

1149 
sockaddr_ö
 *
sö
;

1150 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1151 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1152 #i‡(
NGX_HAVE_INET6
)

1153 
sockaddr_ö6
 *
sö6
;

1156 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1158 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1159 
cmcf
->
p‹ts
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 2,

1160 (
ngx_hâp_c⁄f_p‹t_t
));

1161 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1162  
NGX_ERROR
;

1166 
ß
 = &
ls›t
->
u
.
sockaddr
;

1168 
ß
->
ß_Ámûy
) {

1170 #i‡(
NGX_HAVE_INET6
)

1171 
AF_INET6
:

1172 
sö6
 = &
ls›t
->
u
.
sockaddr_ö6
;

1173 
p
 = 
sö6
->
sö6_p‹t
;

1177 #i‡(
NGX_HAVE_SERVAL
)

1178 
AF_SERVAL
:

1179 
p
 = 0;

1183 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1184 
AF_UNIX
:

1185 
p
 = 0;

1190 
sö
 = &
ls›t
->
u
.
sockaddr_ö
;

1191 
p
 = 
sö
->
sö_p‹t
;

1195 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
->
log
, 0, "serval httpáddÜisten");

1197 
p‹t
 = 
cmcf
->
p‹ts
->
ñts
;

1198 
i
 = 0; i < 
cmcf
->
p‹ts
->
√…s
; i++) {

1200 i‡(
p
 !
p‹t
[
i
].p‹à|| 
ß
->
ß_Ámûy
 !p‹t[i].
Ámûy
) {

1206  
	`ngx_hâp_add_addªs£s
(
cf
, 
cscf
, &
p‹t
[
i
], 
ls›t
);

1211 
p‹t
 = 
	`ngx_¨øy_push
(
cmcf
->
p‹ts
);

1212 i‡(
p‹t
 =
NULL
) {

1213  
NGX_ERROR
;

1216 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

1217 
p‹t
->p‹à
p
;

1218 
p‹t
->
addrs
.
ñts
 = 
NULL
;

1220  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1221 
	}
}

1224 
ngx_öt_t


1225 
	$ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1226 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1228 
u_ch¨
 *
p
;

1229 
size_t
 
Àn
, 
off
;

1230 
ngx_uöt_t
 
i
, 
deÁu…_£rvî
;

1231 
sockaddr
 *
ß
;

1232 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1233 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1234 
sockaddr_un
 *
ßun
;

1236 #i‡(
NGX_HTTP_SSL
)

1237 
ngx_uöt_t
 
s¶
;

1245 
ß
 = &
ls›t
->
u
.
sockaddr
;

1247 
ß
->
ß_Ámûy
) {

1249 #i‡(
NGX_HAVE_INET6
)

1250 
AF_INET6
:

1251 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

1252 
Àn
 = 16;

1256 #i‡(
NGX_HAVE_SERVAL
)

1257 
AF_SERVAL
:

1258 
off
 = 
	`off£tof
(
sockaddr_sv
, 
sv_§vid
);

1259 
Àn
 = 32;

1263 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1264 
AF_UNIX
:

1265 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

1266 
Àn
 = (
ßun
->
sun_∑th
);

1271 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

1272 
Àn
 = 4;

1276 
p
 = 
ls›t
->
u
.
sockaddr_d©a
 + 
off
;

1278 
addr
 = 
p‹t
->
addrs
.
ñts
;

1279 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
->
log
, 0, "serval httpáddáddress");

1281 
i
 = 0; i < 
p‹t
->
addrs
.
√…s
; i++) {

1283 i‡(
	`ngx_memcmp
(
p
, 
addr
[
i
].
›t
.
u
.
sockaddr_d©a
 + 
off
, 
Àn
) != 0) {

1289 i‡(
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, &
addr
[
i
]Ë!
NGX_OK
) {

1290  
NGX_ERROR
;

1294 
deÁu…_£rvî
 = 
addr
[
i
].
›t
.default_server;

1296 #i‡(
NGX_HTTP_SSL
)

1297 
s¶
 = 
ls›t
->s¶ || 
addr
[
i
].
›t
.ssl;

1300 i‡(
ls›t
->
£t
) {

1302 i‡(
addr
[
i
].
›t
.
£t
) {

1303 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1304 "du∂iˇãÜi°í o±i⁄†f‹ %s", 
addr
[
i
].
›t
.addr);

1305  
NGX_ERROR
;

1308 
addr
[
i
].
›t
 = *
ls›t
;

1313 i‡(
ls›t
->
deÁu…_£rvî
) {

1315 i‡(
deÁu…_£rvî
) {

1316 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1317 "®du∂iˇã deÁu… sîvî f‹ %s", 
addr
[
i
].
›t
.addr);

1318  
NGX_ERROR
;

1321 
deÁu…_£rvî
 = 1;

1322 
addr
[
i
].
deÁu…_£rvî
 = 
cscf
;

1325 
addr
[
i
].
›t
.
deÁu…_£rvî
 = default_server;

1326 #i‡(
NGX_HTTP_SSL
)

1327 
addr
[
i
].
›t
.
s¶
 = ssl;

1330  
NGX_OK
;

1335  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1336 
	}
}

1344 
ngx_öt_t


1345 
	$ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1346 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1348 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1350 i‡(
p‹t
->
addrs
.
ñts
 =
NULL
) {

1351 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 4,

1352 (
ngx_hâp_c⁄f_addr_t
))

1353 !
NGX_OK
)

1355  
NGX_ERROR
;

1359 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

1360 i‡(
addr
 =
NULL
) {

1361  
NGX_ERROR
;

1364 
addr
->
›t
 = *
ls›t
;

1365 
addr
->
hash
.
buckës
 = 
NULL
;

1366 
addr
->
hash
.
size
 = 0;

1367 
addr
->
wc_hód
 = 
NULL
;

1368 
addr
->
wc_èû
 = 
NULL
;

1369 #i‡(
NGX_PCRE
)

1370 
addr
->
ƒegex
 = 0;

1371 
addr
->
ªgex
 = 
NULL
;

1373 
addr
->
deÁu…_£rvî
 = 
cscf
;

1374 
addr
->
£rvîs
.
ñts
 = 
NULL
;

1376  
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, 
addr
);

1377 
	}
}

1382 
ngx_öt_t


1383 
	$ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1384 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1386 
ngx_uöt_t
 
i
;

1387 
ngx_hâp_c‹e_§v_c⁄f_t
 **
£rvî
;

1389 i‡(
addr
->
£rvîs
.
ñts
 =
NULL
) {

1390 i‡(
	`ngx_¨øy_öô
(&
addr
->
£rvîs
, 
cf
->
ãmp_poﬁ
, 4,

1391 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

1392 !
NGX_OK
)

1394  
NGX_ERROR
;

1398 
£rvî
 = 
addr
->
£rvîs
.
ñts
;

1399 
i
 = 0; i < 
addr
->
£rvîs
.
√…s
; i++) {

1400 i‡(
£rvî
[
i
] =
cscf
) {

1401 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1402 "®du∂iˇãÜi°í %s", 
addr
->
›t
.addr);

1403  
NGX_ERROR
;

1408 
£rvî
 = 
	`ngx_¨øy_push
(&
addr
->
£rvîs
);

1409 i‡(
£rvî
 =
NULL
) {

1410  
NGX_ERROR
;

1413 *
£rvî
 = 
cscf
;

1415  
NGX_OK
;

1416 
	}
}

1419 
ngx_öt_t


1420 
	$ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1421 
ngx_¨øy_t
 *
p‹ts
)

1423 
ngx_uöt_t
 
p
, 
a
;

1424 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1425 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1427 i‡(
p‹ts
 =
NULL
) {

1428  
NGX_OK
;

1431 
p‹t
 = 
p‹ts
->
ñts
;

1432 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

1434 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

1435 (
ngx_hâp_c⁄f_addr_t
), 
ngx_hâp_cmp_c⁄f_addrs
);

1442 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

1443 
a
 = 0;á < 
p‹t
[
p
].
addrs
.
√…s
;á++) {

1445 i‡(
addr
[
a
].
£rvîs
.
√…s
 > 1

1446 #i‡(
NGX_PCRE
)

1447 || 
addr
[
a
].
deÁu…_£rvî
->
ˇ±uªs


1451 i‡(
	`ngx_hâp_£rvî_«mes
(
cf
, 
cmcf
, &
addr
[
a
]Ë!
NGX_OK
) {

1452  
NGX_ERROR
;

1457 i‡(
	`ngx_hâp_öô_li°íög
(
cf
, &
p‹t
[
p
]Ë!
NGX_OK
) {

1458  
NGX_ERROR
;

1462  
NGX_OK
;

1463 
	}
}

1466 
ngx_öt_t


1467 
	$ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1468 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1470 
ngx_öt_t
 
rc
;

1471 
ngx_uöt_t
 
n
, 
s
;

1472 
ngx_hash_öô_t
 
hash
;

1473 
ngx_hash_keys_¨øys_t
 
ha
;

1474 
ngx_hâp_£rvî_«me_t
 *
«me
;

1475 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

1476 #i‡(
NGX_PCRE
)

1477 
ngx_uöt_t
 
ªgex
, 
i
;

1479 
ªgex
 = 0;

1482 
	`ngx_memzîo
(&
ha
, (
ngx_hash_keys_¨øys_t
));

1484 
ha
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(16384, 
cf
->
log
);

1485 i‡(
ha
.
ãmp_poﬁ
 =
NULL
) {

1486  
NGX_ERROR
;

1489 
ha
.
poﬁ
 = 
cf
->pool;

1491 i‡(
	`ngx_hash_keys_¨øy_öô
(&
ha
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

1492 
Áûed
;

1495 
cscÂ
 = 
addr
->
£rvîs
.
ñts
;

1497 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1499 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1501 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1503 #i‡(
NGX_PCRE
)

1504 i‡(
«me
[
n
].
ªgex
) {

1505 
ªgex
++;

1510 
rc
 = 
	`ngx_hash_add_key
(&
ha
, &
«me
[
n
].«me,Çame[n].
£rvî
,

1511 
NGX_HASH_WILDCARD_KEY
);

1513 i‡(
rc
 =
NGX_ERROR
) {

1514  
NGX_ERROR
;

1517 i‡(
rc
 =
NGX_DECLINED
) {

1518 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1520 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1521  
NGX_ERROR
;

1524 i‡(
rc
 =
NGX_BUSY
) {

1525 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

1527 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1532 
hash
.
key
 = 
ngx_hash_key_lc
;

1533 
hash
.
max_size
 = 
cmcf
->
£rvî_«mes_hash_max_size
;

1534 
hash
.
buckë_size
 = 
cmcf
->
£rvî_«mes_hash_buckë_size
;

1535 
hash
.
«me
 = "server_names_hash";

1536 
hash
.
poﬁ
 = 
cf
->pool;

1538 i‡(
ha
.
keys
.
√…s
) {

1539 
hash
.hash = &
addr
->hash;

1540 
hash
.
ãmp_poﬁ
 = 
NULL
;

1542 i‡(
	`ngx_hash_öô
(&
hash
, 
ha
.
keys
.
ñts
, ha.keys.
√…s
Ë!
NGX_OK
) {

1543 
Áûed
;

1547 i‡(
ha
.
dns_wc_hód
.
√…s
) {

1549 
	`ngx_qs‹t
(
ha
.
dns_wc_hód
.
ñts
, (
size_t
Ëha.dns_wc_hód.
√…s
,

1550 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1552 
hash
.hash = 
NULL
;

1553 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1555 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_hód
.
ñts
,

1556 
ha
.
dns_wc_hód
.
√…s
)

1557 !
NGX_OK
)

1559 
Áûed
;

1562 
addr
->
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1565 i‡(
ha
.
dns_wc_èû
.
√…s
) {

1567 
	`ngx_qs‹t
(
ha
.
dns_wc_èû
.
ñts
, (
size_t
Ëha.dns_wc_èû.
√…s
,

1568 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1570 
hash
.hash = 
NULL
;

1571 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1573 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_èû
.
ñts
,

1574 
ha
.
dns_wc_èû
.
√…s
)

1575 !
NGX_OK
)

1577 
Áûed
;

1580 
addr
->
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1583 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1585 #i‡(
NGX_PCRE
)

1587 i‡(
ªgex
 == 0) {

1588  
NGX_OK
;

1591 
addr
->
ƒegex
 = 
ªgex
;

1592 
addr
->
ªgex
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñegex * (
ngx_hâp_£rvî_«me_t
));

1593 i‡(
addr
->
ªgex
 =
NULL
) {

1594  
NGX_ERROR
;

1597 
i
 = 0;

1599 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1601 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1603 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1604 i‡(
«me
[
n
].
ªgex
) {

1605 
addr
->
ªgex
[
i
++] = 
«me
[
n
];

1612  
NGX_OK
;

1614 
Áûed
:

1616 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1618  
NGX_ERROR
;

1619 
	}
}

1622 
ngx_öt_t


1623 
	$ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

1625 
ngx_hâp_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

1627 
fú°
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
⁄e
;

1628 
£c⁄d
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
two
;

1630 i‡(
fú°
->
›t
.
wûdˇrd
) {

1635 i‡(
£c⁄d
->
›t
.
wûdˇrd
) {

1640 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

1645 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

1653 
	}
}

1656 
ngx_libc_cde˛


1657 
	$ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

1659 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

1661 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

1662 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

1664  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

1665 
	}
}

1668 
ngx_öt_t


1669 
	$ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
)

1671 
ngx_uöt_t
 
i
, 
œ°
, 
böd_wûdˇrd
;

1672 
ngx_li°íög_t
 *
ls
;

1673 
ngx_hâp_p‹t_t
 *
hp‹t
;

1674 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1676 
addr
 = 
p‹t
->
addrs
.
ñts
;

1677 
œ°
 = 
p‹t
->
addrs
.
√…s
;

1686 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

1687 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

1688 
böd_wûdˇrd
 = 1;

1691 
böd_wûdˇrd
 = 0;

1694 
i
 = 0;

1696 
i
 < 
œ°
) {

1698 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

1699 
i
++;

1703 
ls
 = 
	`ngx_hâp_add_li°íög
(
cf
, &
addr
[
i
]);

1704 i‡(
ls
 =
NULL
) {

1705  
NGX_ERROR
;

1708 
hp‹t
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_p‹t_t
));

1709 i‡(
hp‹t
 =
NULL
) {

1710  
NGX_ERROR
;

1713 
ls
->
£rvîs
 = 
hp‹t
;

1715 i‡(
i
 =
œ°
 - 1) {

1716 
hp‹t
->
«ddrs
 = 
œ°
;

1719 
hp‹t
->
«ddrs
 = 1;

1720 
i
 = 0;

1723 
ls
->
sockaddr
->
ß_Ámûy
) {

1725 #i‡(
NGX_HAVE_INET6
)

1726 
AF_INET6
:

1727 i‡(
	`ngx_hâp_add_addrs6
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1728  
NGX_ERROR
;

1733 #i‡(
NGX_HAVE_SERVAL
)

1734 
AF_SERVAL
:

1735 i‡(
	`ngx_hâp_add_£rvi˚id
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1736 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
->
log
, 0, "servaládd service id failed");

1737  
NGX_ERROR
;

1742 i‡(
	`ngx_hâp_add_addrs
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1743  
NGX_ERROR
;

1748 
addr
++;

1749 
œ°
--;

1752  
NGX_OK
;

1753 
	}
}

1756 
ngx_li°íög_t
 *

1757 
	$ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1759 
ngx_li°íög_t
 *
ls
;

1760 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1761 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1763 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
->
›t
.
u
.
sockaddr
,áddr->›t.
sockÀn
);

1764 i‡(
ls
 =
NULL
) {

1765  
NULL
;

1768 
ls
->
addr_¡›
 = 1;

1770 
ls
->
h™dÀr
 = 
ngx_hâp_öô_c⁄√˘i⁄
;

1772 
cscf
 = 
addr
->
deÁu…_£rvî
;

1773 
ls
->
poﬁ_size
 = 
cscf
->
c⁄√˘i⁄_poﬁ_size
;

1774 
ls
->
po°_ac˚±_timeout
 = 
cscf
->
˛õ¡_hódî_timeout
;

1776 
˛cf
 = 
cscf
->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

1778 
ls
->
logp
 = 
˛cf
->
îr‹_log
;

1779 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

1780 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

1782 #i‡(
NGX_WIN32
)

1784 
ngx_io˝_c⁄f_t
 *
io˝cf
 = 
NULL
;

1786 i‡(
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
)) {

1787 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

1789 i‡(
io˝cf
 && io˝cf->
ac˚±ex_ªad
) {

1790 
ls
->
po°_ac˚±_buf„r_size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

1795 
ls
->
backlog
 = 
addr
->
›t
.backlog;

1796 
ls
->
rcvbuf
 = 
addr
->
›t
.rcvbuf;

1797 
ls
->
¢dbuf
 = 
addr
->
›t
.sndbuf;

1799 
ls
->
kì∑live
 = 
addr
->
›t
.
so_kì∑live
;

1800 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

1801 
ls
->
kìpidÀ
 = 
addr
->
›t
.
t˝_kìpidÀ
;

1802 
ls
->
kìpötvl
 = 
addr
->
›t
.
t˝_kìpötvl
;

1803 
ls
->
kìp˙t
 = 
addr
->
›t
.
t˝_kìp˙t
;

1806 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

1807 
ls
->
ac˚±_fûãr
 = 
addr
->
›t
.accept_filter;

1810 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

1811 
ls
->
de„ºed_ac˚±
 = 
addr
->
›t
.deferred_accept;

1814 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

1815 
ls
->
ùv6⁄ly
 = 
addr
->
›t
.ipv6only;

1818 #i‡(
NGX_HAVE_SETFIB
)

1819 
ls
->
£tfib
 = 
addr
->
›t
.setfib;

1822  
ls
;

1823 
	}
}

1826 
ngx_öt_t


1827 
	$ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1828 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1830 
ngx_uöt_t
 
i
;

1831 
ngx_hâp_ö_addr_t
 *
addrs
;

1832 
sockaddr_ö
 *
sö
;

1833 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1835 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1836 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö_addr_t
));

1837 i‡(
hp‹t
->
addrs
 =
NULL
) {

1838  
NGX_ERROR
;

1841 
addrs
 = 
hp‹t
->addrs;

1843 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1845 
sö
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö
;

1846 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

1847 
addrs
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1848 #i‡(
NGX_HTTP_SSL
)

1849 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1852 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1853 && (
addr
[
i
].
wc_hód
 =
NULL


1854 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1855 && (
addr
[
i
].
wc_èû
 =
NULL


1856 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1857 #i‡(
NGX_PCRE
)

1858 && 
addr
[
i
].
ƒegex
 == 0

1865 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1866 i‡(
vn
 =
NULL
) {

1867  
NGX_ERROR
;

1870 
addrs
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1872 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1873 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1874 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1875 #i‡(
NGX_PCRE
)

1876 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1877 
vn
->
ªgex
 = 
addr
[
i
].regex;

1881  
NGX_OK
;

1882 
	}
}

1885 #i‡(
NGX_HAVE_INET6
)

1887 
ngx_öt_t


1888 
	$ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1889 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1891 
ngx_uöt_t
 
i
;

1892 
ngx_hâp_ö6_addr_t
 *
addrs6
;

1893 
sockaddr_ö6
 *
sö6
;

1894 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1896 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1897 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö6_addr_t
));

1898 i‡(
hp‹t
->
addrs
 =
NULL
) {

1899  
NGX_ERROR
;

1902 
addrs6
 = 
hp‹t
->
addrs
;

1904 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1906 
sö6
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö6
;

1907 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

1908 
addrs6
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1909 #i‡(
NGX_HTTP_SSL
)

1910 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1913 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1914 && (
addr
[
i
].
wc_hód
 =
NULL


1915 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1916 && (
addr
[
i
].
wc_èû
 =
NULL


1917 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1918 #i‡(
NGX_PCRE
)

1919 && 
addr
[
i
].
ƒegex
 == 0

1926 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1927 i‡(
vn
 =
NULL
) {

1928  
NGX_ERROR
;

1931 
addrs6
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1933 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1934 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1935 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1936 #i‡(
NGX_PCRE
)

1937 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1938 
vn
->
ªgex
 = 
addr
[
i
].regex;

1942  
NGX_OK
;

1943 
	}
}

1947 #i‡(
NGX_HAVE_SERVAL
)

1949 
ngx_öt_t


1950 
	$ngx_hâp_add_£rvi˚id
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1951 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1953 
ngx_uöt_t
 
i
;

1954 
ngx_hâp_£rvÆ_addr_t
 *
sids
;

1955 
sockaddr_sv
 *
ssv
;

1956 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1958 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1959 
hp‹t
->
«ddrs
 * (
ngx_hâp_£rvÆ_addr_t
));

1960 i‡(
hp‹t
->
addrs
 =
NULL
) {

1961  
NGX_ERROR
;

1964 
sids
 = 
hp‹t
->
addrs
;

1966 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1968 
ssv
 = &
addr
[
i
].
›t
.
u
.
sockaddr_sv
;

1969 
	`mem˝y
(&
sids
[
i
].
§vid
, &
ssv
->
sv_§vid
, (ssv->sv_srvid));

1971 
sids
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1972 #i‡(
NGX_HTTP_SSL
)

1973 
sids
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1976 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1977 && (
addr
[
i
].
wc_hód
 =
NULL


1978 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1979 && (
addr
[
i
].
wc_èû
 =
NULL


1980 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1981 #i‡(
NGX_PCRE
)

1982 && 
addr
[
i
].
ƒegex
 == 0

1989 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1990 i‡(
vn
 =
NULL
) {

1991  
NGX_ERROR
;

1994 
sids
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1996 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1997 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1998 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1999 #i‡(
NGX_PCRE
)

2000 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

2001 
vn
->
ªgex
 = 
addr
[
i
].regex;

2005  
NGX_OK
;

2006 
	}
}

2012 
	$ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2014 *
p
 = 
c⁄f
;

2016 
ngx_¨øy_t
 **
ty≥s
;

2017 
ngx_°r_t
 *
vÆue
, *
deÁu…_ty≥
;

2018 
ngx_uöt_t
 
i
, 
n
, 
hash
;

2019 
ngx_hash_key_t
 *
ty≥
;

2021 
ty≥s
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

2023 i‡(*
ty≥s
 == (*) -1) {

2024  
NGX_CONF_OK
;

2027 
deÁu…_ty≥
 = 
cmd
->
po°
;

2029 i‡(*
ty≥s
 =
NULL
) {

2030 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

2031 i‡(*
ty≥s
 =
NULL
) {

2032  
NGX_CONF_ERROR
;

2035 i‡(
deÁu…_ty≥
) {

2036 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2037 i‡(
ty≥
 =
NULL
) {

2038  
NGX_CONF_ERROR
;

2041 
ty≥
->
key
 = *
deÁu…_ty≥
;

2042 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

2043 
deÁu…_ty≥
->
Àn
);

2044 
ty≥
->
vÆue
 = (*) 4;

2048 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2050 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

2052 i‡(
vÆue
[
i
].
Àn
 =1 && vÆue[i].
d©a
[0] == '*') {

2053 *
ty≥s
 = (*) -1;

2054  
NGX_CONF_OK
;

2057 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

2058 
vÆue
[
i
].
d©a
[vÆue[i].
Àn
] = '\0';

2060 
ty≥
 = (*
ty≥s
)->
ñts
;

2061 
n
 = 0;Ç < (*
ty≥s
)->
√…s
;Ç++) {

2063 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

2064 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

2065 "du∂iˇã MIMEÅy≥ \"%V\"", &
vÆue
[
i
]);

2070 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2071 i‡(
ty≥
 =
NULL
) {

2072  
NGX_CONF_ERROR
;

2075 
ty≥
->
key
 = 
vÆue
[
i
];

2076 
ty≥
->
key_hash
 = 
hash
;

2077 
ty≥
->
vÆue
 = (*) 4;

2080  
NGX_CONF_OK
;

2081 
	}
}

2085 
	$ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
, 
ngx_hash_t
 *
ty≥s_hash
,

2086 
ngx_¨øy_t
 **
¥ev_keys
, 
ngx_hash_t
 *
¥ev_ty≥s_hash
,

2087 
ngx_°r_t
 *
deÁu…_ty≥s
)

2089 
ngx_hash_öô_t
 
hash
;

2091 i‡(*
keys
) {

2093 i‡(*
keys
 == (*) -1) {

2094  
NGX_CONF_OK
;

2097 
hash
.hash = 
ty≥s_hash
;

2098 
hash
.
key
 = 
NULL
;

2099 
hash
.
max_size
 = 2048;

2100 
hash
.
buckë_size
 = 64;

2101 
hash
.
«me
 = "test_types_hash";

2102 
hash
.
poﬁ
 = 
cf
->pool;

2103 
hash
.
ãmp_poﬁ
 = 
NULL
;

2105 i‡(
	`ngx_hash_öô
(&
hash
, (*
keys
)->
ñts
, (*keys)->
√…s
Ë!
NGX_OK
) {

2106  
NGX_CONF_ERROR
;

2109  
NGX_CONF_OK
;

2112 i‡(
¥ev_ty≥s_hash
->
buckës
 =
NULL
) {

2114 i‡(*
¥ev_keys
 =
NULL
) {

2116 i‡(
	`ngx_hâp_£t_deÁu…_ty≥s
(
cf
, 
¥ev_keys
, 
deÁu…_ty≥s
)

2117 !
NGX_OK
)

2119  
NGX_CONF_ERROR
;

2122 } i‡(*
¥ev_keys
 == (*) -1) {

2123 *
keys
 = *
¥ev_keys
;

2124  
NGX_CONF_OK
;

2127 
hash
.hash = 
¥ev_ty≥s_hash
;

2128 
hash
.
key
 = 
NULL
;

2129 
hash
.
max_size
 = 2048;

2130 
hash
.
buckë_size
 = 64;

2131 
hash
.
«me
 = "test_types_hash";

2132 
hash
.
poﬁ
 = 
cf
->pool;

2133 
hash
.
ãmp_poﬁ
 = 
NULL
;

2135 i‡(
	`ngx_hash_öô
(&
hash
, (*
¥ev_keys
)->
ñts
, (*¥ev_keys)->
√…s
)

2136 !
NGX_OK
)

2138  
NGX_CONF_ERROR
;

2142 *
ty≥s_hash
 = *
¥ev_ty≥s_hash
;

2144  
NGX_CONF_OK
;

2146 
	}
}

2149 
ngx_öt_t


2150 
	$ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

2151 
ngx_°r_t
 *
deÁu…_ty≥
)

2153 
ngx_hash_key_t
 *
ty≥
;

2155 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

2156 i‡(*
ty≥s
 =
NULL
) {

2157  
NGX_ERROR
;

2160 
deÁu…_ty≥
->
Àn
) {

2162 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2163 i‡(
ty≥
 =
NULL
) {

2164  
NGX_ERROR
;

2167 
ty≥
->
key
 = *
deÁu…_ty≥
;

2168 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

2169 
deÁu…_ty≥
->
Àn
);

2170 
ty≥
->
vÆue
 = (*) 4;

2172 
deÁu…_ty≥
++;

2175  
NGX_OK
;

2176 
	}
}

	@src/http/ngx_http.h

8 #i‚de‡
_NGX_HTTP_H_INCLUDED_


9 
	#_NGX_HTTP_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_hâp_ªque°_s
 
	tngx_hâp_ªque°_t
;

17 
ngx_hâp_up°ªam_s
 
	tngx_hâp_up°ªam_t
;

18 
ngx_hâp_ˇche_s
 
	tngx_hâp_ˇche_t
;

19 
ngx_hâp_fûe_ˇche_s
 
	tngx_hâp_fûe_ˇche_t
;

20 
ngx_hâp_log_˘x_s
 
	tngx_hâp_log_˘x_t
;

22 
	$ngx_öt_t
 (*
	tngx_hâp_hódî_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tngx_uöt_t
 
	toff£t
);

24 
u_ch¨
 *(*
	tngx_hâp_log_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

25 
	tngx_hâp_ªque°_t
 *
	t§
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

28 
	~<ngx_hâp_v¨übÀs.h
>

29 
	~<ngx_hâp_ªque°.h
>

30 
	~<ngx_hâp_up°ªam.h
>

31 
	~<ngx_hâp_up°ªam_round_robö.h
>

32 
	~<ngx_hâp_c⁄fig.h
>

33 
	~<ngx_hâp_busy_lock.h
>

34 
	~<ngx_hâp_s¸ùt.h
>

35 
	~<ngx_hâp_c‹e_moduÀ.h
>

37 #i‡(
NGX_HTTP_CACHE
)

38 
	~<ngx_hâp_ˇche.h
>

40 #i‡(
NGX_HTTP_SSI
)

41 
	~<ngx_hâp_ssi_fûãr_moduÀ.h
>

43 #i‡(
NGX_HTTP_SSL
)

44 
	~<ngx_hâp_s¶_moduÀ.h
>

48 
	sngx_hâp_log_˘x_s
 {

49 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

50 
ngx_hâp_ªque°_t
 *
ªque°
;

51 
ngx_hâp_ªque°_t
 *
cuºít_ªque°
;

56 
ngx_uöt_t
 
hâp_vîsi⁄
;

57 
ngx_uöt_t
 
code
;

58 
ngx_uöt_t
 
cou¡
;

59 
u_ch¨
 *
°¨t
;

60 
u_ch¨
 *
íd
;

61 } 
	tngx_hâp_°©us_t
;

64 
	#ngx_hâp_gë_moduÀ_˘x
(
r
, 
moduÀ
Ë‘)->
˘x
[moduÀ.
˘x_ödex
]

	)

65 
	#ngx_hâp_£t_˘x
(
r
, 
c
, 
moduÀ
Ër->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

68 
ngx_öt_t
 
	`ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

69 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
);

70 
ngx_öt_t
 
	`ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

71 
ngx_hâp_li°í_›t_t
 *
ls›t
);

74 
	`ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

76 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


77 
	`ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
);

80 
ngx_öt_t
 
	`ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

81 
ngx_öt_t
 
	`ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_uöt_t
 
mîge_¶ashes
);

83 
ngx_öt_t
 
	`ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

84 
ngx_hâp_°©us_t
 *
°©us
);

85 
ngx_öt_t
 
	`ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

86 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
);

87 
ngx_öt_t
 
	`ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

88 
ngx_uöt_t
 
Ælow_undîsc‹es
);

89 
ngx_öt_t
 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
,

90 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

91 
ngx_öt_t
 
	`ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,

92 
ngx_°r_t
 *
vÆue
);

93 
	`ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

94 
ngx_°r_t
 *
¨gs
);

97 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
);

98 
	`ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

99 
	`ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
);

100 
ngx_öt_t
 
	`ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_po°ed_ªque°_t
 *
¥
);

102 
	`ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

104 
	`ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
);

105 
	`ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

108 
	#ngx_hâp_ïhemîÆ
(
r
Ë(*Ë(&r->
uri_°¨t
)

	)

111 
	#NGX_HTTP_LAST
 1

	)

112 
	#NGX_HTTP_FLUSH
 2

	)

114 
ngx_öt_t
 
	`ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
);

117 
ngx_öt_t
 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

120 
ngx_öt_t
 
	`ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
);

121 
ngx_öt_t
 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_öt_t
 
îr‹
);

123 
ngx_öt_t
 
	`ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

124 
ngx_moduÀ_t
 *
m
, 
ngx_öt_t
 
îr‹
);

125 
	`ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
);

128 
time_t
 
	`ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
);

129 
size_t
 
	`ngx_hâp_gë_time
(*
buf
, 
time_t
 
t
);

133 
ngx_öt_t
 
	`ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

134 
	`ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

135 
	`ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

136 
	`ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

139 *
	`ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

140 *
	`ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
,

141 
ngx_hash_t
 *
ty≥s_hash
, 
ngx_¨øy_t
 **
¥ev_keys
,

142 
ngx_hash_t
 *
¥ev_ty≥s_hash
, 
ngx_°r_t
 *
deÁu…_ty≥s
);

143 
ngx_öt_t
 
	`ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

144 
ngx_°r_t
 *
deÁu…_ty≥
);

146 #i‡(
NGX_HTTP_DEGRADATION
)

147 
ngx_uöt_t
 
	`ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *);

151 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

153 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[];

156 
ngx_hâp_ouçut_hódî_fûãr_±
 
ngx_hâp_t›_hódî_fûãr
;

157 
ngx_hâp_ouçut_body_fûãr_±
 
ngx_hâp_t›_body_fûãr
;

	@src/http/ngx_http_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

15 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

16 
lock
);

19 
	$ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

21 i‡(
bl
->
busy
 < bl->
max_busy
) {

22 
bl
->
busy
++;

24 i‡(
bc
->
time
) {

25 
bc
->
time
 = 0;

26 
bl
->
waôög
--;

29  
NGX_OK
;

32 i‡(
bc
->
time
) {

33 i‡(
bc
->
time
 < 
bl
->
timeout
) {

34 
	`ngx_add_timî
(
bc
->
evít
, 1000);

35  
NGX_AGAIN
;

38 
bl
->
waôög
--;

39  
NGX_DONE
;

43 i‡(
bl
->
timeout
 == 0) {

44  
NGX_DONE
;

47 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

48 
bl
->
waôög
++;

51 
	`ngx_add_timî
(
bc
->
evít
, 1000);

52 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

57  
NGX_AGAIN
;

60  
NGX_ERROR
;

61 
	}
}

64 
	$ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

65 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
)

67 
rc
;

69 
rc
 = 
	`ngx_hâp_busy_lock_look_ˇchóbÀ
(
bl
, 
bc
, 
lock
);

71 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
bc
->
evít
->
log
, 0,

73 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

75 i‡(
rc
 =
NGX_OK
) {

76  
NGX_OK
;

79 i‡(
rc
 =
NGX_ERROR
 && !
lock
) {

80  
NGX_OK
;

85 i‡(
bc
->
time
) {

86 i‡(
bc
->
time
 < 
bl
->
timeout
) {

87 
	`ngx_add_timî
(
bc
->
evít
, 1000);

88  
NGX_AGAIN
;

91 
bl
->
waôög
--;

92  
NGX_DONE
;

96 i‡(
bl
->
timeout
 == 0) {

97  
NGX_DONE
;

100 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

102 
bl
->
waôög
++;

103 
	`ngx_add_timî
(
bc
->
evít
, 1000);

104 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

109  
NGX_AGAIN
;

112  
NGX_ERROR
;

113 
	}
}

116 
	$ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

117 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

119 i‡(
bl
 =
NULL
) {

123 i‡(
bl
->
md5
) {

124 
bl
->
md5_mask
[
bc
->
¶Ÿ
 / 8] &= ~(1 << (bc->slot & 7));

125 
bl
->
ˇchóbÀ
--;

128 
bl
->
busy
--;

129 
	}
}

132 
	$ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

133 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

134 
lock
)

136 
i
, 
b
, 
ˇchóbÀ
, 
‰ì
;

137 
u_öt
 
mask
;

139 
b
 = 0;

140 
ˇchóbÀ
 = 0;

141 
‰ì
 = -1;

143 #i‡(
NGX_SUPPRESS_WARN
)

144 
mask
 = 0;

147 
i
 = 0; i < 
bl
->
max_busy
; i++) {

149 i‡((
b
 & 7) == 0) {

150 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

153 i‡(
mask
 & 1) {

154 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
bc
->md5, 16) == 0) {

155  
NGX_AGAIN
;

157 
ˇchóbÀ
++;

159 } i‡(
‰ì
 == -1) {

160 
‰ì
 = 
i
;

164 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

165 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

166 
‰ì
 = 
i
 + 1;

173 
mask
 >>= 1;

174 
b
++;

177 i‡(
‰ì
 == -1) {

178  
NGX_ERROR
;

181 i‡(
lock
) {

182 i‡(
bl
->
busy
 =bl->
max_busy
) {

183  
NGX_ERROR
;

186 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
bc
->md5, 16);

187 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

188 
bc
->
¶Ÿ
 = 
‰ì
;

190 
bl
->
ˇchóbÀ
++;

191 
bl
->
busy
++;

194  
NGX_OK
;

195 
	}
}

198 *
	$ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

199 *
c⁄f
)

201 *
p
 = 
c⁄f
;

203 
ngx_uöt_t
 
i
, 
dup
, 
övÆid
;

204 
ngx_°r_t
 *
vÆue
, 
löe
;

205 
ngx_hâp_busy_lock_t
 *
bl
, **
bÕ
;

207 
bÕ
 = (
ngx_hâp_busy_lock_t
 **Ë(
p
 + 
cmd
->
off£t
);

208 i‡(*
bÕ
) {

213 
bl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_busy_lock_t
));

214 i‡(
bl
 =
NULL
) {

215  
NGX_CONF_ERROR
;

217 *
bÕ
 = 
bl
;

220 
bl
->
muãx
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_muãx_t
));

221 i‡(
bl
->
muãx
 =
NULL
) {

222  
NGX_CONF_ERROR
;

225 
dup
 = 0;

226 
övÆid
 = 0;

227 
vÆue
 = 
cf
->
¨gs
->
ñts
;

229 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

231 i‡(
vÆue
[
i
].
d©a
[1] != '=') {

232 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

233 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

234  
NGX_CONF_ERROR
;

237 
vÆue
[
i
].
d©a
[0]) {

240 i‡(
bl
->
max_busy
) {

241 
dup
 = 1;

245 
bl
->
max_busy
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

246 i‡(
bl
->
max_busy
 =
NGX_ERROR
) {

247 
övÆid
 = 1;

254 i‡(
bl
->
max_waôög
) {

255 
dup
 = 1;

259 
bl
->
max_waôög
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

260 i‡(
bl
->
max_waôög
 =
NGX_ERROR
) {

261 
övÆid
 = 1;

268 i‡(
bl
->
timeout
) {

269 
dup
 = 1;

273 
löe
.
Àn
 = 
vÆue
[
i
].len - 2;

274 
löe
.
d©a
 = 
vÆue
[
i
].data + 2;

276 
bl
->
timeout
 = 
	`ngx_∑r£_time
(&
löe
, 1);

277 i‡(
bl
->
timeout
 =(
time_t
Ë
NGX_ERROR
) {

278 
övÆid
 = 1;

285 
övÆid
 = 1;

288 i‡(
dup
) {

289 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

290 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

291  
NGX_CONF_ERROR
;

294 i‡(
övÆid
) {

295 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

296 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

297  
NGX_CONF_ERROR
;

301 i‡(
bl
->
timeout
 =0 && bl->
max_waôög
) {

302 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

306  
NGX_CONF_OK
;

307 
	}
}

	@src/http/ngx_http_busy_lock.h

8 #i‚de‡
_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_hâp.h
>

19 
u_ch¨
 *
	mmd5_mask
;

20 *
	mmd5
;

21 
	mˇchóbÀ
;

23 
	mbusy
;

24 
	mmax_busy
;

26 
	mwaôög
;

27 
	mmax_waôög
;

29 
time_t
 
	mtimeout
;

31 
ngx_evít_muãx_t
 *
	mmuãx
;

32 } 
	tngx_hâp_busy_lock_t
;

36 
time_t
 
	mtime
;

37 
ngx_evít_t
 *
	mevít
;

38 (*
	mevít_h™dÀr
)(
ngx_evít_t
 *
	mev
);

39 
u_ch¨
 *
	mmd5
;

40 
	m¶Ÿ
;

41 } 
	tngx_hâp_busy_lock_˘x_t
;

44 
ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

45 
ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

46 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
);

47 
ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

48 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

50 *
ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

	@src/http/ngx_http_cache.h

8 #i‚de‡
_NGX_HTTP_CACHE_H_INCLUDED_


9 
	#_NGX_HTTP_CACHE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_CACHE_MISS
 1

	)

18 
	#NGX_HTTP_CACHE_BYPASS
 2

	)

19 
	#NGX_HTTP_CACHE_EXPIRED
 3

	)

20 
	#NGX_HTTP_CACHE_STALE
 4

	)

21 
	#NGX_HTTP_CACHE_UPDATING
 5

	)

22 
	#NGX_HTTP_CACHE_HIT
 6

	)

23 
	#NGX_HTTP_CACHE_SCARCE
 7

	)

25 
	#NGX_HTTP_CACHE_KEY_LEN
 16

	)

29 
ngx_uöt_t
 
	m°©us
;

30 
time_t
 
	mvÆid
;

31 } 
	tngx_hâp_ˇche_vÆid_t
;

35 
ngx_rbåì_node_t
 
	mnode
;

36 
ngx_queue_t
 
	mqueue
;

38 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN


39 - (
ngx_rbåì_key_t
)];

41 
	mcou¡
:20;

42 
	mu£s
:10;

43 
	mvÆid_m£c
:10;

44 
	mîr‹
:10;

45 
	mexi°s
:1;

46 
	mupd©ög
:1;

47 
	mdñëög
:1;

50 
ngx_fûe_uniq_t
 
	muniq
;

51 
time_t
 
	mexpúe
;

52 
time_t
 
	mvÆid_£c
;

53 
size_t
 
	mbody_°¨t
;

54 
off_t
 
	mfs_size
;

55 } 
	tngx_hâp_fûe_ˇche_node_t
;

58 
	sngx_hâp_ˇche_s
 {

59 
ngx_fûe_t
 
	mfûe
;

60 
ngx_¨øy_t
 
	mkeys
;

61 
uöt32_t
 
	m¸c32
;

62 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN
];

64 
ngx_fûe_uniq_t
 
	muniq
;

65 
time_t
 
	mvÆid_£c
;

66 
time_t
 
	mœ°_modifõd
;

67 
time_t
 
	md©e
;

69 
size_t
 
	mhódî_°¨t
;

70 
size_t
 
	mbody_°¨t
;

71 
off_t
 
	mÀngth
;

72 
off_t
 
	mfs_size
;

74 
ngx_uöt_t
 
	mmö_u£s
;

75 
ngx_uöt_t
 
	mîr‹
;

76 
ngx_uöt_t
 
	mvÆid_m£c
;

78 
ngx_buf_t
 *
	mbuf
;

80 
ngx_hâp_fûe_ˇche_t
 *
	mfûe_ˇche
;

81 
ngx_hâp_fûe_ˇche_node_t
 *
	mnode
;

83 
ngx_m£c_t
 
	mlock_timeout
;

84 
ngx_m£c_t
 
	mwaô_time
;

86 
ngx_evít_t
 
	mwaô_evít
;

88 
	mlock
:1;

89 
	mwaôög
:1;

91 
	mupd©ed
:1;

92 
	mupd©ög
:1;

93 
	mexi°s
:1;

94 
	mãmp_fûe
:1;

99 
time_t
 
	mvÆid_£c
;

100 
time_t
 
	mœ°_modifõd
;

101 
time_t
 
	md©e
;

102 
uöt32_t
 
	m¸c32
;

103 
u_sh‹t
 
	mvÆid_m£c
;

104 
u_sh‹t
 
	mhódî_°¨t
;

105 
u_sh‹t
 
	mbody_°¨t
;

106 } 
	tngx_hâp_fûe_ˇche_hódî_t
;

110 
ngx_rbåì_t
 
	mrbåì
;

111 
ngx_rbåì_node_t
 
	m£¡öñ
;

112 
ngx_queue_t
 
	mqueue
;

113 
ngx_©omic_t
 
	mcﬁd
;

114 
ngx_©omic_t
 
	mlﬂdög
;

115 
off_t
 
	msize
;

116 } 
	tngx_hâp_fûe_ˇche_sh_t
;

119 
	sngx_hâp_fûe_ˇche_s
 {

120 
ngx_hâp_fûe_ˇche_sh_t
 *
	msh
;

121 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

123 
ngx_∑th_t
 *
	m∑th
;

125 
off_t
 
	mmax_size
;

126 
size_t
 
	mbsize
;

128 
time_t
 
	möa˘ive
;

130 
ngx_uöt_t
 
	mfûes
;

131 
ngx_uöt_t
 
	mlﬂdî_fûes
;

132 
ngx_m£c_t
 
	mœ°
;

133 
ngx_m£c_t
 
	mlﬂdî_¶ìp
;

134 
ngx_m£c_t
 
	mlﬂdî_thªshﬁd
;

136 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

140 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
);

141 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

142 
ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

143 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
);

144 
ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
);

145 
ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
);

146 
ngx_öt_t
 
ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *);

147 
ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
);

148 
time_t
 
ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
);

150 *
ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

151 *
c⁄f
);

152 *
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

153 *
c⁄f
);

156 
ngx_°r_t
 
ngx_hâp_ˇche_°©us
[];

	@src/http/ngx_http_config.h

8 #i‚de‡
_NGX_HTTP_CONFIG_H_INCLUDED_


9 
	#_NGX_HTTP_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 **
	mmaö_c⁄f
;

19 **
	m§v_c⁄f
;

20 **
	mloc_c⁄f
;

21 } 
	tngx_hâp_c⁄f_˘x_t
;

25 
ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

26 
ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

28 *(*
	m¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

29 *(*
	möô_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	mc⁄f
);

31 *(*
	m¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

32 *(*
	mmîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

34 *(*
	m¸óã_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

35 *(*
	mmîge_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

36 } 
	tngx_hâp_moduÀ_t
;

39 
	#NGX_HTTP_MODULE
 0x50545448

	)

41 
	#NGX_HTTP_MAIN_CONF
 0x02000000

	)

42 
	#NGX_HTTP_SRV_CONF
 0x04000000

	)

43 
	#NGX_HTTP_LOC_CONF
 0x08000000

	)

44 
	#NGX_HTTP_UPS_CONF
 0x10000000

	)

45 
	#NGX_HTTP_SIF_CONF
 0x20000000

	)

46 
	#NGX_HTTP_LIF_CONF
 0x40000000

	)

47 
	#NGX_HTTP_LMT_CONF
 0x80000000

	)

50 
	#NGX_HTTP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

51 
	#NGX_HTTP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

52 
	#NGX_HTTP_LOC_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
loc_c⁄f
)

	)

55 
	#ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
moduÀ
) \

56 (
r
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

57 
	#ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
moduÀ
Ë‘)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

58 
	#ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
moduÀ
Ë‘)->
loc_c⁄f
[moduÀ.
˘x_ödex
]

	)

61 
	#ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

62 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

63 
	#ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

64 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

65 
	#ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
moduÀ
) \

66 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
loc_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

68 
	#ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

69 (
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
] ? \

70 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
]) \

71 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

72 
NULL
)

	)

	@src/http/ngx_http_copy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_bufs_t
 
	mbufs
;

15 } 
	tngx_hâp_c›y_fûãr_c⁄f_t
;

18 #i‡(
NGX_HAVE_FILE_AIO
)

19 
ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

20 
ngx_fûe_t
 *
fûe
);

21 
ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

22 #i‡(
NGX_HAVE_AIO_SENDFILE
)

23 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

27 *
ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

29 *
∑ª¡
, *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_c›y_fûãr_comm™ds
[] = {

35 { 
ngx_°rög
("output_buffers"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

37 
ngx_c⁄f_£t_bufs_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_c›y_fûãr_c⁄f_t
, 
bufs
),

40 
NULL
 },

42 
ngx_nuŒ_comm™d


46 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ_˘x
 = {

47 
NULL
,

48 
ngx_hâp_c›y_fûãr_öô
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
ngx_hâp_c›y_fûãr_¸óã_c⁄f
,

57 
ngx_hâp_c›y_fûãr_mîge_c⁄f


61 
ngx_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ
 = {

62 
NGX_MODULE_V1
,

63 &
ngx_hâp_c›y_fûãr_moduÀ_˘x
,

64 
ngx_hâp_c›y_fûãr_comm™ds
,

65 
NGX_HTTP_MODULE
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NGX_MODULE_V1_PADDING


77 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

80 
ngx_öt_t


81 
	$ngx_hâp_c›y_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

83 
ngx_öt_t
 
rc
;

84 
ngx_c⁄√˘i⁄_t
 *
c
;

85 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

86 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

87 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

89 
c
 = 
r
->
c⁄√˘i⁄
;

91 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

92 "hâ∞c›y fûãr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

94 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

96 i‡(
˘x
 =
NULL
) {

97 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ouçut_chaö_˘x_t
));

98 i‡(
˘x
 =
NULL
) {

99  
NGX_ERROR
;

102 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_c›y_fûãr_moduÀ
);

104 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

105 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

107 
˘x
->
£ndfûe
 = 
c
->sendfile;

108 
˘x
->
√ed_ö_mem‹y
 = 
r
->
maö_fûãr_√ed_ö_mem‹y


109 || 
r
->
fûãr_√ed_ö_mem‹y
;

110 
˘x
->
√ed_ö_ãmp
 = 
r
->
fûãr_√ed_ãmp‹¨y
;

112 
˘x
->
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

114 
˘x
->
poﬁ
 = 
r
->pool;

115 
˘x
->
bufs
 = 
c⁄f
->bufs;

116 
˘x
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_c›y_fûãr_moduÀ
;

118 
˘x
->
ouçut_fûãr
 = (
ngx_ouçut_chaö_fûãr_±
)

119 
ngx_hâp_√xt_body_fûãr
;

120 
˘x
->
fûãr_˘x
 = 
r
;

122 #i‡(
NGX_HAVE_FILE_AIO
)

123 i‡(
ngx_fûe_aio
) {

124 i‡(
˛cf
->
aio
) {

125 
˘x
->
aio_h™dÀr
 = 
ngx_hâp_c›y_aio_h™dÀr
;

127 #i‡(
NGX_HAVE_AIO_SENDFILE
)

128 
c
->
aio_£ndfûe
 = (
˛cf
->
aio
 =
NGX_HTTP_AIO_SENDFILE
);

133 i‡(
ö
 && in->
buf
 && 
	`ngx_buf_size
(in->buf)) {

134 
r
->
ªque°_ouçut
 = 1;

138 #i‡(
NGX_HAVE_FILE_AIO
)

139 
˘x
->
aio
 = 
r
->aio;

143 
rc
 = 
	`ngx_ouçut_chaö
(
˘x
, 
ö
);

145 i‡(
˘x
->
ö
 =
NULL
) {

146 
r
->
buf„ªd
 &~
NGX_HTTP_COPY_BUFFERED
;

149 
r
->
buf„ªd
 |
NGX_HTTP_COPY_BUFFERED
;

152 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

153 "hâ∞c›y fûãr: %ò\"%V?%V\"", 
rc
, &
r
->
uri
, &r->
¨gs
);

155 #i‡(
NGX_HAVE_FILE_AIO
 && 
NGX_HAVE_AIO_SENDFILE
)

157 i‡(
c
->
busy_£ndfûe
) {

158 
ssize_t
 
n
;

159 
off_t
 
off£t
;

160 
ngx_fûe_t
 *
fûe
;

161 
ngx_hâp_ïhemîÆ_t
 *
e
;

163 i‡(
r
->
aio
) {

164 
c
->
busy_£ndfûe
 = 
NULL
;

165  
rc
;

168 
fûe
 = 
c
->
busy_£ndfûe
->file;

169 
off£t
 = 
c
->
busy_£ndfûe
->
fûe_pos
;

171 i‡(
fûe
->
aio
) {

172 
c
->
aio_£ndfûe
 = (
off£t
 !
fûe
->
aio
->
œ°_off£t
);

173 
fûe
->
aio
->
œ°_off£t
 = 
off£t
;

175 i‡(
c
->
aio_£ndfûe
 == 0) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

178 &
fûe
->
«me
);

182 
c
->
busy_£ndfûe
 = 
NULL
;

183 
e
 = (
ngx_hâp_ïhemîÆ_t
 *Ë&
r
->
uri_°¨t
;

185 
n
 = 
	`ngx_fûe_aio_ªad
(
fûe
, &
e
->
aio_¥ñﬂd
, 1, 
off£t
, 
r
->
poﬁ
);

187 i‡(
n
 > 0) {

188 
ö
 = 
NULL
;

192 
rc
 = 
n
;

194 i‡(
rc
 =
NGX_AGAIN
) {

195 
fûe
->
aio
->
d©a
 = 
r
;

196 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
;

198 
r
->
maö
->
blocked
++;

199 
r
->
aio
 = 1;

204  
rc
;

206 
	}
}

209 #i‡(
NGX_HAVE_FILE_AIO
)

212 
	$ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

214 
ngx_hâp_ªque°_t
 *
r
;

216 
r
 = 
˘x
->
fûãr_˘x
;

218 
fûe
->
aio
->
d©a
 = 
r
;

219 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_evít_h™dÀr
;

221 
r
->
maö
->
blocked
++;

222 
r
->
aio
 = 1;

223 
˘x
->
aio
 = 1;

224 
	}
}

228 
	$ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

230 
ngx_evít_aio_t
 *
aio
;

231 
ngx_hâp_ªque°_t
 *
r
;

233 
aio
 = 
ev
->
d©a
;

234 
r
 = 
aio
->
d©a
;

236 
r
->
maö
->
blocked
--;

237 
r
->
aio
 = 0;

239 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

240 
	}
}

243 #i‡(
NGX_HAVE_AIO_SENDFILE
)

246 
	$ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

248 
ngx_evít_aio_t
 *
aio
;

249 
ngx_hâp_ªque°_t
 *
r
;

251 
aio
 = 
ev
->
d©a
;

252 
r
 = 
aio
->
d©a
;

254 
r
->
maö
->
blocked
--;

255 
r
->
aio
 = 0;

256 
ev
->
com∂ëe
 = 0;

258 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

259 
	}
}

266 
	$ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

268 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

270 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_c›y_fûãr_c⁄f_t
));

271 i‡(
c⁄f
 =
NULL
) {

272  
NULL
;

275 
c⁄f
->
bufs
.
num
 = 0;

277  
c⁄f
;

278 
	}
}

282 
	$ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

284 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

285 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

287 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs, 1, 32768);

289  
NULL
;

290 
	}
}

293 
ngx_öt_t


294 
	$ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

296 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

297 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_c›y_fûãr
;

299  
NGX_OK
;

300 
	}
}

	@src/http/ngx_http_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 *
	m«me
;

15 
uöt32_t
 
	mmëhod
;

16 } 
	tngx_hâp_mëhod_«me_t
;

19 
	#NGX_HTTP_REQUEST_BODY_FILE_OFF
 0

	)

20 
	#NGX_HTTP_REQUEST_BODY_FILE_ON
 1

	)

21 
	#NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 2

	)

24 
ngx_öt_t
 
ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_öt_t
 
ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
);

28 
ngx_öt_t
 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

29 *
ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

30 *
ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

31 *
ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

33 *
∑ª¡
, *
chûd
);

34 *
ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
dummy
);

40 *
ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
dummy
);

42 
ngx_öt_t
 
ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

45 *
ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

48 *
c⁄f
);

50 *
ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

52 *
ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

53 *
c⁄f
);

54 *
ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

55 *
ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

59 *
ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

60 *
c⁄f
);

61 *
ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

64 *
c⁄f
);

65 *
ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 *
ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

69 *
ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

73 #i‡(
NGX_HTTP_GZIP
)

74 
ngx_öt_t
 
ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
);

75 
ngx_uöt_t
 
ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
);

76 *
ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

79 #i‡(
NGX_HAVE_OPENAT
)

80 *
ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

81 *
c⁄f
);

84 *
ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

85 *
ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

87 
ngx_c⁄f_po°_t
 
	gngx_hâp_c‹e_low©_po°
 =

88 { 
ngx_hâp_c‹e_low©_check
 };

90 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_c‹e_poﬁ_size_p
 =

91 
ngx_hâp_c‹e_poﬁ_size
;

93 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 = {

94 
ngx_c⁄f_dïªˇãd
, "optimize_server_names", "server_name_in_redirect"

97 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 = {

98 
ngx_c⁄f_dïªˇãd
, "open_file_cache_retest", "open_file_cache_valid"

101 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_ßtisfy_™y
 = {

102 
ngx_c⁄f_dïªˇãd
, "satisfy_any", "satisfy"

106 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ªque°_body_ö_fûe
[] = {

107 { 
ngx_°rög
("off"), 
NGX_HTTP_REQUEST_BODY_FILE_OFF
 },

108 { 
ngx_°rög
("⁄"), 
NGX_HTTP_REQUEST_BODY_FILE_ON
 },

109 { 
ngx_°rög
("˛ón"), 
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 },

110 { 
ngx_nuŒ_°rög
, 0 }

114 #i‡(
NGX_HAVE_FILE_AIO
)

116 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_aio
[] = {

117 { 
ngx_°rög
("off"), 
NGX_HTTP_AIO_OFF
 },

118 { 
ngx_°rög
("⁄"), 
NGX_HTTP_AIO_ON
 },

119 #i‡(
NGX_HAVE_AIO_SENDFILE
)

120 { 
ngx_°rög
("£ndfûe"), 
NGX_HTTP_AIO_SENDFILE
 },

122 { 
ngx_nuŒ_°rög
, 0 }

128 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ßtisfy
[] = {

129 { 
ngx_°rög
("Æl"), 
NGX_HTTP_SATISFY_ALL
 },

130 { 
ngx_°rög
("™y"), 
NGX_HTTP_SATISFY_ANY
 },

131 { 
ngx_nuŒ_°rög
, 0 }

135 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_lögîög_˛o£
[] = {

136 { 
ngx_°rög
("off"), 
NGX_HTTP_LINGERING_OFF
 },

137 { 
ngx_°rög
("⁄"), 
NGX_HTTP_LINGERING_ON
 },

138 { 
ngx_°rög
("Æways"), 
NGX_HTTP_LINGERING_ALWAYS
 },

139 { 
ngx_nuŒ_°rög
, 0 }

143 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_if_modifõd_sö˚
[] = {

144 { 
ngx_°rög
("off"), 
NGX_HTTP_IMS_OFF
 },

145 { 
ngx_°rög
("exa˘"), 
NGX_HTTP_IMS_EXACT
 },

146 { 
ngx_°rög
("bef‹e"), 
NGX_HTTP_IMS_BEFORE
 },

147 { 
ngx_nuŒ_°rög
, 0 }

151 
ngx_c⁄f_bômask_t
 
	gngx_hâp_c‹e_kì∑live_dißbÀ
[] = {

152 { 
ngx_°rög
("n⁄e"), 
NGX_HTTP_KEEPALIVE_DISABLE_NONE
 },

153 { 
ngx_°rög
("msõ6"), 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 },

154 { 
ngx_°rög
("ßÁri"), 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 },

155 { 
ngx_nuŒ_°rög
, 0 }

159 
ngx_∑th_öô_t
 
	gngx_hâp_˛õ¡_ãmp_∑th
 = {

160 
ngx_°rög
(
NGX_HTTP_CLIENT_TEMP_PATH
), { 0, 0, 0 }

164 #i‡(
NGX_HTTP_GZIP
)

166 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_hâp_vîsi⁄
[] = {

167 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

168 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

169 { 
ngx_nuŒ_°rög
, 0 }

173 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gzù_¥oxõd_mask
[] = {

174 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_PROXIED_OFF
 },

175 { 
ngx_°rög
("expúed"), 
NGX_HTTP_GZIP_PROXIED_EXPIRED
 },

176 { 
ngx_°rög
("no-ˇche"), 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
 },

177 { 
ngx_°rög
("no-°‹e"), 
NGX_HTTP_GZIP_PROXIED_NO_STORE
 },

178 { 
ngx_°rög
("¥iv©e"), 
NGX_HTTP_GZIP_PROXIED_PRIVATE
 },

179 { 
ngx_°rög
("no_œ°_modifõd"), 
NGX_HTTP_GZIP_PROXIED_NO_LM
 },

180 { 
ngx_°rög
("no_ëag"), 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
 },

181 { 
ngx_°rög
("auth"), 
NGX_HTTP_GZIP_PROXIED_AUTH
 },

182 { 
ngx_°rög
("™y"), 
NGX_HTTP_GZIP_PROXIED_ANY
 },

183 { 
ngx_nuŒ_°rög
, 0 }

187 
ngx_°r_t
 
	gngx_hâp_gzù_no_ˇche
 = 
ngx_°rög
("no-cache");

188 
ngx_°r_t
 
	gngx_hâp_gzù_no_°‹e
 = 
ngx_°rög
("no-store");

189 
ngx_°r_t
 
	gngx_hâp_gzù_¥iv©e
 = 
ngx_°rög
("private");

194 
ngx_comm™d_t
 
	gngx_hâp_c‹e_comm™ds
[] = {

196 { 
ngx_°rög
("variables_hash_max_size"),

197 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

198 
ngx_c⁄f_£t_num_¶Ÿ
,

199 
NGX_HTTP_MAIN_CONF_OFFSET
,

200 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_max_size
),

201 
NULL
 },

203 { 
ngx_°rög
("variables_hash_bucket_size"),

204 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

205 
ngx_c⁄f_£t_num_¶Ÿ
,

206 
NGX_HTTP_MAIN_CONF_OFFSET
,

207 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_buckë_size
),

208 
NULL
 },

210 { 
ngx_°rög
("server_names_hash_max_size"),

211 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

212 
ngx_c⁄f_£t_num_¶Ÿ
,

213 
NGX_HTTP_MAIN_CONF_OFFSET
,

214 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_max_size
),

215 
NULL
 },

217 { 
ngx_°rög
("server_names_hash_bucket_size"),

218 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

219 
ngx_c⁄f_£t_num_¶Ÿ
,

220 
NGX_HTTP_MAIN_CONF_OFFSET
,

221 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_buckë_size
),

222 
NULL
 },

224 { 
ngx_°rög
("server"),

225 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

226 
ngx_hâp_c‹e_£rvî
,

229 
NULL
 },

231 { 
ngx_°rög
("connection_pool_size"),

232 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

233 
ngx_c⁄f_£t_size_¶Ÿ
,

234 
NGX_HTTP_SRV_CONF_OFFSET
,

235 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
c⁄√˘i⁄_poﬁ_size
),

236 &
ngx_hâp_c‹e_poﬁ_size_p
 },

238 { 
ngx_°rög
("request_pool_size"),

239 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

240 
ngx_c⁄f_£t_size_¶Ÿ
,

241 
NGX_HTTP_SRV_CONF_OFFSET
,

242 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ªque°_poﬁ_size
),

243 &
ngx_hâp_c‹e_poﬁ_size_p
 },

245 { 
ngx_°rög
("client_header_timeout"),

246 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

247 
ngx_c⁄f_£t_m£c_¶Ÿ
,

248 
NGX_HTTP_SRV_CONF_OFFSET
,

249 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_timeout
),

250 
NULL
 },

252 { 
ngx_°rög
("client_header_buffer_size"),

253 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

254 
ngx_c⁄f_£t_size_¶Ÿ
,

255 
NGX_HTTP_SRV_CONF_OFFSET
,

256 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_buf„r_size
),

257 
NULL
 },

259 { 
ngx_°rög
("large_client_header_buffers"),

260 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE2
,

261 
ngx_c⁄f_£t_bufs_¶Ÿ
,

262 
NGX_HTTP_SRV_CONF_OFFSET
,

263 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
œrge_˛õ¡_hódî_buf„rs
),

264 
NULL
 },

266 { 
ngx_°rög
("optimize_server_names"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

268 
ngx_c⁄f_£t_Êag_¶Ÿ
,

269 
NGX_HTTP_LOC_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

271 &
ngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 },

273 { 
ngx_°rög
("ignore_invalid_headers"),

274 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

275 
ngx_c⁄f_£t_Êag_¶Ÿ
,

276 
NGX_HTTP_SRV_CONF_OFFSET
,

277 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ign‹e_övÆid_hódîs
),

278 
NULL
 },

280 { 
ngx_°rög
("merge_slashes"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

282 
ngx_c⁄f_£t_Êag_¶Ÿ
,

283 
NGX_HTTP_SRV_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
mîge_¶ashes
),

285 
NULL
 },

287 { 
ngx_°rög
("underscores_in_headers"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

289 
ngx_c⁄f_£t_Êag_¶Ÿ
,

290 
NGX_HTTP_SRV_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
undîsc‹es_ö_hódîs
),

292 
NULL
 },

294 { 
ngx_°rög
("location"),

295 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

296 
ngx_hâp_c‹e_loˇti⁄
,

297 
NGX_HTTP_SRV_CONF_OFFSET
,

299 
NULL
 },

301 { 
ngx_°rög
("listen"),

302 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

303 
ngx_hâp_c‹e_li°í
,

304 
NGX_HTTP_SRV_CONF_OFFSET
,

306 
NULL
 },

308 { 
ngx_°rög
("server_name"),

309 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

310 
ngx_hâp_c‹e_£rvî_«me
,

311 
NGX_HTTP_SRV_CONF_OFFSET
,

313 
NULL
 },

315 { 
ngx_°rög
("types_hash_max_size"),

316 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

317 
ngx_c⁄f_£t_num_¶Ÿ
,

318 
NGX_HTTP_LOC_CONF_OFFSET
,

319 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_max_size
),

320 
NULL
 },

322 { 
ngx_°rög
("types_hash_bucket_size"),

323 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

324 
ngx_c⁄f_£t_num_¶Ÿ
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_buckë_size
),

327 
NULL
 },

329 { 
ngx_°rög
("types"),

330 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


331 |
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

332 
ngx_hâp_c‹e_ty≥s
,

333 
NGX_HTTP_LOC_CONF_OFFSET
,

335 
NULL
 },

337 { 
ngx_°rög
("default_type"),

338 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

339 
ngx_c⁄f_£t_°r_¶Ÿ
,

340 
NGX_HTTP_LOC_CONF_OFFSET
,

341 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
deÁu…_ty≥
),

342 
NULL
 },

344 { 
ngx_°rög
("root"),

345 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


346 |
NGX_CONF_TAKE1
,

347 
ngx_hâp_c‹e_roŸ
,

348 
NGX_HTTP_LOC_CONF_OFFSET
,

350 
NULL
 },

352 { 
ngx_°rög
("alias"),

353 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

354 
ngx_hâp_c‹e_roŸ
,

355 
NGX_HTTP_LOC_CONF_OFFSET
,

357 
NULL
 },

359 { 
ngx_°rög
("limit_except"),

360 
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

361 
ngx_hâp_c‹e_limô_ex˚±
,

362 
NGX_HTTP_LOC_CONF_OFFSET
,

364 
NULL
 },

366 { 
ngx_°rög
("client_max_body_size"),

367 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

368 
ngx_c⁄f_£t_off_¶Ÿ
,

369 
NGX_HTTP_LOC_CONF_OFFSET
,

370 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_max_body_size
),

371 
NULL
 },

373 { 
ngx_°rög
("client_body_buffer_size"),

374 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

375 
ngx_c⁄f_£t_size_¶Ÿ
,

376 
NGX_HTTP_LOC_CONF_OFFSET
,

377 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_buf„r_size
),

378 
NULL
 },

380 { 
ngx_°rög
("client_body_timeout"),

381 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

382 
ngx_c⁄f_£t_m£c_¶Ÿ
,

383 
NGX_HTTP_LOC_CONF_OFFSET
,

384 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_timeout
),

385 
NULL
 },

387 { 
ngx_°rög
("client_body_temp_path"),

388 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

389 
ngx_c⁄f_£t_∑th_¶Ÿ
,

390 
NGX_HTTP_LOC_CONF_OFFSET
,

391 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ãmp_∑th
),

392 
NULL
 },

394 { 
ngx_°rög
("client_body_in_file_only"),

395 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

396 
ngx_c⁄f_£t_íum_¶Ÿ
,

397 
NGX_HTTP_LOC_CONF_OFFSET
,

398 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_fûe_⁄ly
),

399 &
ngx_hâp_c‹e_ªque°_body_ö_fûe
 },

401 { 
ngx_°rög
("client_body_in_single_buffer"),

402 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

403 
ngx_c⁄f_£t_Êag_¶Ÿ
,

404 
NGX_HTTP_LOC_CONF_OFFSET
,

405 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_sögÀ_buf„r
),

406 
NULL
 },

408 { 
ngx_°rög
("sendfile"),

409 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


410 |
NGX_CONF_FLAG
,

411 
ngx_c⁄f_£t_Êag_¶Ÿ
,

412 
NGX_HTTP_LOC_CONF_OFFSET
,

413 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe
),

414 
NULL
 },

416 { 
ngx_°rög
("sendfile_max_chunk"),

417 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

418 
ngx_c⁄f_£t_size_¶Ÿ
,

419 
NGX_HTTP_LOC_CONF_OFFSET
,

420 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe_max_chunk
),

421 
NULL
 },

423 #i‡(
NGX_HAVE_FILE_AIO
)

425 { 
ngx_°rög
("aio"),

426 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

427 
ngx_c⁄f_£t_íum_¶Ÿ
,

428 
NGX_HTTP_LOC_CONF_OFFSET
,

429 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
aio
),

430 &
ngx_hâp_c‹e_aio
 },

434 { 
ngx_°rög
("read_ahead"),

435 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

436 
ngx_c⁄f_£t_size_¶Ÿ
,

437 
NGX_HTTP_LOC_CONF_OFFSET
,

438 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªad_ahód
),

439 
NULL
 },

441 { 
ngx_°rög
("directio"),

442 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

443 
ngx_hâp_c‹e_dúe˘io
,

444 
NGX_HTTP_LOC_CONF_OFFSET
,

446 
NULL
 },

448 { 
ngx_°rög
("directio_alignment"),

449 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

450 
ngx_c⁄f_£t_off_¶Ÿ
,

451 
NGX_HTTP_LOC_CONF_OFFSET
,

452 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
dúe˘io_Æignmít
),

453 
NULL
 },

455 { 
ngx_°rög
("tcp_nopush"),

456 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

457 
ngx_c⁄f_£t_Êag_¶Ÿ
,

458 
NGX_HTTP_LOC_CONF_OFFSET
,

459 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_n›ush
),

460 
NULL
 },

462 { 
ngx_°rög
("tcp_nodelay"),

463 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

464 
ngx_c⁄f_£t_Êag_¶Ÿ
,

465 
NGX_HTTP_LOC_CONF_OFFSET
,

466 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_nodñay
),

467 
NULL
 },

469 { 
ngx_°rög
("send_timeout"),

470 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

471 
ngx_c⁄f_£t_m£c_¶Ÿ
,

472 
NGX_HTTP_LOC_CONF_OFFSET
,

473 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_timeout
),

474 
NULL
 },

476 { 
ngx_°rög
("send_lowat"),

477 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

478 
ngx_c⁄f_£t_size_¶Ÿ
,

479 
NGX_HTTP_LOC_CONF_OFFSET
,

480 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_low©
),

481 &
ngx_hâp_c‹e_low©_po°
 },

483 { 
ngx_°rög
("postpone_output"),

484 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

485 
ngx_c⁄f_£t_size_¶Ÿ
,

486 
NGX_HTTP_LOC_CONF_OFFSET
,

487 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°p⁄e_ouçut
),

488 
NULL
 },

490 { 
ngx_°rög
("limit_rate"),

491 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


492 |
NGX_CONF_TAKE1
,

493 
ngx_c⁄f_£t_size_¶Ÿ
,

494 
NGX_HTTP_LOC_CONF_OFFSET
,

495 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã
),

496 
NULL
 },

498 { 
ngx_°rög
("limit_rate_after"),

499 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


500 |
NGX_CONF_TAKE1
,

501 
ngx_c⁄f_£t_size_¶Ÿ
,

502 
NGX_HTTP_LOC_CONF_OFFSET
,

503 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã_a·î
),

504 
NULL
 },

506 { 
ngx_°rög
("keepalive_timeout"),

507 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

508 
ngx_hâp_c‹e_kì∑live
,

509 
NGX_HTTP_LOC_CONF_OFFSET
,

511 
NULL
 },

513 { 
ngx_°rög
("keepalive_requests"),

514 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

515 
ngx_c⁄f_£t_num_¶Ÿ
,

516 
NGX_HTTP_LOC_CONF_OFFSET
,

517 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_ªque°s
),

518 
NULL
 },

520 { 
ngx_°rög
("keepalive_disable"),

521 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

522 
ngx_c⁄f_£t_bômask_¶Ÿ
,

523 
NGX_HTTP_LOC_CONF_OFFSET
,

524 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_dißbÀ
),

525 &
ngx_hâp_c‹e_kì∑live_dißbÀ
 },

527 { 
ngx_°rög
("satisfy"),

528 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

529 
ngx_c⁄f_£t_íum_¶Ÿ
,

530 
NGX_HTTP_LOC_CONF_OFFSET
,

531 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

532 &
ngx_hâp_c‹e_ßtisfy
 },

534 { 
ngx_°rög
("satisfy_any"),

535 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

536 
ngx_c⁄f_£t_Êag_¶Ÿ
,

537 
NGX_HTTP_LOC_CONF_OFFSET
,

538 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

539 &
ngx_c⁄f_dïªˇãd_ßtisfy_™y
 },

541 { 
ngx_°rög
("internal"),

542 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

543 
ngx_hâp_c‹e_öã∫Æ
,

544 
NGX_HTTP_LOC_CONF_OFFSET
,

546 
NULL
 },

548 { 
ngx_°rög
("lingering_close"),

549 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

550 
ngx_c⁄f_£t_íum_¶Ÿ
,

551 
NGX_HTTP_LOC_CONF_OFFSET
,

552 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_˛o£
),

553 &
ngx_hâp_c‹e_lögîög_˛o£
 },

555 { 
ngx_°rög
("lingering_time"),

556 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

557 
ngx_c⁄f_£t_m£c_¶Ÿ
,

558 
NGX_HTTP_LOC_CONF_OFFSET
,

559 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_time
),

560 
NULL
 },

562 { 
ngx_°rög
("lingering_timeout"),

563 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

564 
ngx_c⁄f_£t_m£c_¶Ÿ
,

565 
NGX_HTTP_LOC_CONF_OFFSET
,

566 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_timeout
),

567 
NULL
 },

569 { 
ngx_°rög
("reset_timedout_connection"),

570 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

571 
ngx_c⁄f_£t_Êag_¶Ÿ
,

572 
NGX_HTTP_LOC_CONF_OFFSET
,

573 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ª£t_timedout_c⁄√˘i⁄
),

574 
NULL
 },

576 { 
ngx_°rög
("server_name_in_redirect"),

577 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

578 
ngx_c⁄f_£t_Êag_¶Ÿ
,

579 
NGX_HTTP_LOC_CONF_OFFSET
,

580 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

581 
NULL
 },

583 { 
ngx_°rög
("port_in_redirect"),

584 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

585 
ngx_c⁄f_£t_Êag_¶Ÿ
,

586 
NGX_HTTP_LOC_CONF_OFFSET
,

587 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
p‹t_ö_ªdúe˘
),

588 
NULL
 },

590 { 
ngx_°rög
("msie_padding"),

591 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

592 
ngx_c⁄f_£t_Êag_¶Ÿ
,

593 
NGX_HTTP_LOC_CONF_OFFSET
,

594 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_∑ddög
),

595 
NULL
 },

597 { 
ngx_°rög
("msie_refresh"),

598 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

599 
ngx_c⁄f_£t_Êag_¶Ÿ
,

600 
NGX_HTTP_LOC_CONF_OFFSET
,

601 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_ª‰esh
),

602 
NULL
 },

604 { 
ngx_°rög
("log_not_found"),

605 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

606 
ngx_c⁄f_£t_Êag_¶Ÿ
,

607 
NGX_HTTP_LOC_CONF_OFFSET
,

608 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_nŸ_found
),

609 
NULL
 },

611 { 
ngx_°rög
("log_subrequest"),

612 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

613 
ngx_c⁄f_£t_Êag_¶Ÿ
,

614 
NGX_HTTP_LOC_CONF_OFFSET
,

615 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_subªque°
),

616 
NULL
 },

618 { 
ngx_°rög
("recursive_error_pages"),

619 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

620 
ngx_c⁄f_£t_Êag_¶Ÿ
,

621 
NGX_HTTP_LOC_CONF_OFFSET
,

622 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªcursive_îr‹_∑ges
),

623 
NULL
 },

625 { 
ngx_°rög
("server_tokens"),

626 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

627 
ngx_c⁄f_£t_Êag_¶Ÿ
,

628 
NGX_HTTP_LOC_CONF_OFFSET
,

629 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_tokís
),

630 
NULL
 },

632 { 
ngx_°rög
("if_modified_since"),

633 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

634 
ngx_c⁄f_£t_íum_¶Ÿ
,

635 
NGX_HTTP_LOC_CONF_OFFSET
,

636 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
if_modifõd_sö˚
),

637 &
ngx_hâp_c‹e_if_modifõd_sö˚
 },

639 { 
ngx_°rög
("max_ranges"),

640 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

641 
ngx_c⁄f_£t_num_¶Ÿ
,

642 
NGX_HTTP_LOC_CONF_OFFSET
,

643 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
max_ønges
),

644 
NULL
 },

646 { 
ngx_°rög
("chunked_transfer_encoding"),

647 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

648 
ngx_c⁄f_£t_Êag_¶Ÿ
,

649 
NGX_HTTP_LOC_CONF_OFFSET
,

650 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
chunked_å™s„r_ícodög
),

651 
NULL
 },

653 { 
ngx_°rög
("error_page"),

654 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


655 |
NGX_CONF_2MORE
,

656 
ngx_hâp_c‹e_îr‹_∑ge
,

657 
NGX_HTTP_LOC_CONF_OFFSET
,

659 
NULL
 },

661 { 
ngx_°rög
("try_files"),

662 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

663 
ngx_hâp_c‹e_åy_fûes
,

664 
NGX_HTTP_LOC_CONF_OFFSET
,

666 
NULL
 },

668 { 
ngx_°rög
("post_action"),

669 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


670 |
NGX_CONF_TAKE1
,

671 
ngx_c⁄f_£t_°r_¶Ÿ
,

672 
NGX_HTTP_LOC_CONF_OFFSET
,

673 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°_a˘i⁄
),

674 
NULL
 },

676 { 
ngx_°rög
("error_log"),

677 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

678 
ngx_hâp_c‹e_îr‹_log
,

679 
NGX_HTTP_LOC_CONF_OFFSET
,

681 
NULL
 },

683 { 
ngx_°rög
("open_file_cache"),

684 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

685 
ngx_hâp_c‹e_›í_fûe_ˇche
,

686 
NGX_HTTP_LOC_CONF_OFFSET
,

687 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche
),

688 
NULL
 },

690 { 
ngx_°rög
("open_file_cache_valid"),

691 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

692 
ngx_c⁄f_£t_£c_¶Ÿ
,

693 
NGX_HTTP_LOC_CONF_OFFSET
,

694 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

695 
NULL
 },

697 { 
ngx_°rög
("open_file_cache_retest"),

698 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

699 
ngx_c⁄f_£t_£c_¶Ÿ
,

700 
NGX_HTTP_LOC_CONF_OFFSET
,

701 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

702 &
ngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 },

704 { 
ngx_°rög
("open_file_cache_min_uses"),

705 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

706 
ngx_c⁄f_£t_num_¶Ÿ
,

707 
NGX_HTTP_LOC_CONF_OFFSET
,

708 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_mö_u£s
),

709 
NULL
 },

711 { 
ngx_°rög
("open_file_cache_errors"),

712 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

713 
ngx_c⁄f_£t_Êag_¶Ÿ
,

714 
NGX_HTTP_LOC_CONF_OFFSET
,

715 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_îr‹s
),

716 
NULL
 },

718 { 
ngx_°rög
("open_file_cache_events"),

719 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

720 
ngx_c⁄f_£t_Êag_¶Ÿ
,

721 
NGX_HTTP_LOC_CONF_OFFSET
,

722 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_evíts
),

723 
NULL
 },

725 { 
ngx_°rög
("resolver"),

726 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

727 
ngx_hâp_c‹e_ªsﬁvî
,

728 
NGX_HTTP_LOC_CONF_OFFSET
,

730 
NULL
 },

732 { 
ngx_°rög
("resolver_timeout"),

733 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

734 
ngx_c⁄f_£t_m£c_¶Ÿ
,

735 
NGX_HTTP_LOC_CONF_OFFSET
,

736 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªsﬁvî_timeout
),

737 
NULL
 },

739 #i‡(
NGX_HTTP_GZIP
)

741 { 
ngx_°rög
("gzip_vary"),

742 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

743 
ngx_c⁄f_£t_Êag_¶Ÿ
,

744 
NGX_HTTP_LOC_CONF_OFFSET
,

745 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_v¨y
),

746 
NULL
 },

748 { 
ngx_°rög
("gzip_http_version"),

749 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

750 
ngx_c⁄f_£t_íum_¶Ÿ
,

751 
NGX_HTTP_LOC_CONF_OFFSET
,

752 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_hâp_vîsi⁄
),

753 &
ngx_hâp_gzù_hâp_vîsi⁄
 },

755 { 
ngx_°rög
("gzip_proxied"),

756 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

757 
ngx_c⁄f_£t_bômask_¶Ÿ
,

758 
NGX_HTTP_LOC_CONF_OFFSET
,

759 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_¥oxõd
),

760 &
ngx_hâp_gzù_¥oxõd_mask
 },

762 { 
ngx_°rög
("gzip_disable"),

763 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

764 
ngx_hâp_gzù_dißbÀ
,

765 
NGX_HTTP_LOC_CONF_OFFSET
,

767 
NULL
 },

771 #i‡(
NGX_HAVE_OPENAT
)

773 { 
ngx_°rög
("disable_symlinks"),

774 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

775 
ngx_hâp_dißbÀ_symlöks
,

776 
NGX_HTTP_LOC_CONF_OFFSET
,

778 
NULL
 },

782 
ngx_nuŒ_comm™d


786 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ_˘x
 = {

787 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
,

788 
NULL
,

790 
ngx_hâp_c‹e_¸óã_maö_c⁄f
,

791 
ngx_hâp_c‹e_öô_maö_c⁄f
,

793 
ngx_hâp_c‹e_¸óã_§v_c⁄f
,

794 
ngx_hâp_c‹e_mîge_§v_c⁄f
,

796 
ngx_hâp_c‹e_¸óã_loc_c⁄f
,

797 
ngx_hâp_c‹e_mîge_loc_c⁄f


801 
ngx_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ
 = {

802 
NGX_MODULE_V1
,

803 &
ngx_hâp_c‹e_moduÀ_˘x
,

804 
ngx_hâp_c‹e_comm™ds
,

805 
NGX_HTTP_MODULE
,

806 
NULL
,

807 
NULL
,

808 
NULL
,

809 
NULL
,

810 
NULL
,

811 
NULL
,

812 
NULL
,

813 
NGX_MODULE_V1_PADDING


817 
ngx_°r_t
 
	gngx_hâp_c‹e_gë_mëhod
 = { 3, (
u_ch¨
 *) "GET " };

821 
	$ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

823 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

825 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = 
NULL
;

827 
r
->
c⁄√˘i⁄
->
u√x≥˘ed_eof
 = 0;

829 i‡(!
r
->
öã∫Æ
) {

830 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
) {

832 
r
->
kì∑live
 = (r->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
);

835 
NGX_HTTP_CONNECTION_CLOSE
:

836 
r
->
kì∑live
 = 0;

839 
NGX_HTTP_CONNECTION_KEEP_ALIVE
:

840 
r
->
kì∑live
 = 1;

844 
r
->
lögîög_˛o£
 = (r->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0);

845 
r
->
pha£_h™dÀr
 = 0;

848 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

849 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
;

852 
r
->
vÆid_loˇti⁄
 = 1;

853 #i‡(
NGX_HTTP_GZIP
)

854 
r
->
gzù_ã°ed
 = 0;

855 
r
->
gzù_ok
 = 0;

856 
r
->
gzù_v¨y
 = 0;

859 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

860 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

861 
	}
}

865 
	$ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
)

867 
ngx_öt_t
 
rc
;

868 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

869 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

871 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

873 
ph
 = 
cmcf
->
pha£_ígöe
.
h™dÀrs
;

875 
ph
[
r
->
pha£_h™dÀr
].
checkî
) {

877 
rc
 = 
ph
[
r
->
pha£_h™dÀr
].
	`checkî
(r, &ph[r->phase_handler]);

879 i‡(
rc
 =
NGX_OK
) {

883 
	}
}

886 
ngx_öt_t


887 
	$ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

889 
ngx_öt_t
 
rc
;

896 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

897 "gíîi¯pha£: %ui", 
r
->
pha£_h™dÀr
);

899 
rc
 = 
ph
->
	`h™dÀr
(
r
);

901 i‡(
rc
 =
NGX_OK
) {

902 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

903  
NGX_AGAIN
;

906 i‡(
rc
 =
NGX_DECLINED
) {

907 
r
->
pha£_h™dÀr
++;

908  
NGX_AGAIN
;

911 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

912  
NGX_OK
;

917 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

919  
NGX_OK
;

920 
	}
}

923 
ngx_öt_t


924 
	$ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

926 
ngx_öt_t
 
rc
;

928 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

929 "ªwrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

931 
rc
 = 
ph
->
	`h™dÀr
(
r
);

933 i‡(
rc
 =
NGX_DECLINED
) {

934 
r
->
pha£_h™dÀr
++;

935  
NGX_AGAIN
;

938 i‡(
rc
 =
NGX_DONE
) {

939  
NGX_OK
;

944 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

946  
NGX_OK
;

947 
	}
}

950 
ngx_öt_t


951 
	$ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

952 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

954 
u_ch¨
 *
p
;

955 
size_t
 
Àn
;

956 
ngx_öt_t
 
rc
;

957 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

959 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

960 
r
->
uri_ch™ged
 = 0;

962 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

964 i‡(
rc
 =
NGX_ERROR
) {

965 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

966  
NGX_OK
;

969 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

971 i‡(!
r
->
öã∫Æ
 && 
˛cf
->internal) {

972 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

973  
NGX_OK
;

976 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

978 (
˛cf
->
n⁄ame
 ? "*" : (˛cf->
exa˘_m©ch
 ? "=" : "")),

979 &
˛cf
->
«me
);

981 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

983 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

985 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
, 
˛cf
->
˛õ¡_max_body_size
);

987 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

988 && !
r
->
disˇrd_body


989 && 
˛cf
->
˛õ¡_max_body_size


990 && 
˛cf
->
˛õ¡_max_body_size
 < 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
)

992 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

994 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

996 
r
->
ex≥˘_ã°ed
 = 1;

997 (Ë
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

998 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
);

999  
NGX_OK
;

1002 i‡(
rc
 =
NGX_DONE
) {

1003 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1005 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1006 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1007 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1008  
NGX_OK
;

1016 i‡(
r
->
¨gs
.
Àn
 == 0) {

1017 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
˛cf
->
«me
;

1020 
Àn
 = 
˛cf
->
«me
.À¿+ 1 + 
r
->
¨gs
.len;

1021 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1023 i‡(
p
 =
NULL
) {

1024 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1025  
NGX_OK
;

1028 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

1029 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

1031 
p
 = 
	`ngx_˝ymem
’, 
˛cf
->
«me
.
d©a
, clcf->«me.
Àn
);

1032 *
p
++ = '?';

1033 
	`ngx_mem˝y
(
p
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1036 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_MOVED_PERMANENTLY
);

1037  
NGX_OK
;

1040 
r
->
pha£_h™dÀr
++;

1041  
NGX_AGAIN
;

1042 
	}
}

1045 
ngx_öt_t


1046 
	$ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1047 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1049 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1051 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1052 "po°Ñewrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

1054 i‡(!
r
->
uri_ch™ged
) {

1055 
r
->
pha£_h™dÀr
++;

1056  
NGX_AGAIN
;

1059 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1060 "uròch™ges: %d", 
r
->
uri_ch™ges
);

1069 
r
->
uri_ch™ges
--;

1071 i‡(
r
->
uri_ch™ges
 == 0) {

1072 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1074 "whûê¥o˚ssög \"%V\"", &
r
->
uri
);

1076 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1077  
NGX_OK
;

1080 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1082 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1083 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1085  
NGX_AGAIN
;

1086 
	}
}

1089 
ngx_öt_t


1090 
	$ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1092 
ngx_öt_t
 
rc
;

1093 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1095 i‡(
r
 !r->
maö
) {

1096 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1097  
NGX_AGAIN
;

1100 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1101 "ac˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1103 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1105 i‡(
rc
 =
NGX_DECLINED
) {

1106 
r
->
pha£_h™dÀr
++;

1107  
NGX_AGAIN
;

1110 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

1111  
NGX_OK
;

1114 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1116 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

1118 i‡(
rc
 =
NGX_OK
) {

1119 
r
->
pha£_h™dÀr
++;

1120  
NGX_AGAIN
;

1124 i‡(
rc
 =
NGX_OK
) {

1125 
r
->
ac˚ss_code
 = 0;

1127 i‡(
r
->
hódîs_out
.
www_authítiˇã
) {

1128 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 0;

1131 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1132  
NGX_AGAIN
;

1135 i‡(
rc
 =
NGX_HTTP_FORBIDDEN
 ||Ñ¯=
NGX_HTTP_UNAUTHORIZED
) {

1136 
r
->
ac˚ss_code
 = 
rc
;

1138 
r
->
pha£_h™dÀr
++;

1139  
NGX_AGAIN
;

1145 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1146  
NGX_OK
;

1147 
	}
}

1150 
ngx_öt_t


1151 
	$ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1152 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1154 
ngx_öt_t
 
ac˚ss_code
;

1156 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1157 "po°ác˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1159 
ac˚ss_code
 = 
r
->access_code;

1161 i‡(
ac˚ss_code
) {

1162 i‡(
ac˚ss_code
 =
NGX_HTTP_FORBIDDEN
) {

1163 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1167 
r
->
ac˚ss_code
 = 0;

1168 
	`ngx_hâp_föÆize_ªque°
(
r
, 
ac˚ss_code
);

1169  
NGX_OK
;

1172 
r
->
pha£_h™dÀr
++;

1173  
NGX_AGAIN
;

1174 
	}
}

1177 
ngx_öt_t


1178 
	$ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1179 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1181 
size_t
 
Àn
, 
roŸ
, 
Æüs
, 
ª£rve
, 
Æloˇãd
;

1182 
u_ch¨
 *
p
, *
«me
;

1183 
ngx_°r_t
 
∑th
, 
¨gs
;

1184 
ngx_uöt_t
 
ã°_dú
;

1185 
ngx_hâp_åy_fûe_t
 *
tf
;

1186 
ngx_›í_fûe_öfo_t
 
of
;

1187 
ngx_hâp_s¸ùt_code_±
 
code
;

1188 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

1189 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1190 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1192 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1193 "åy fûe†pha£: %ui", 
r
->
pha£_h™dÀr
);

1195 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1197 i‡(
˛cf
->
åy_fûes
 =
NULL
) {

1198 
r
->
pha£_h™dÀr
++;

1199  
NGX_AGAIN
;

1202 
Æloˇãd
 = 0;

1203 
roŸ
 = 0;

1204 
«me
 = 
NULL
;

1206 
∑th
.
d©a
 = 
NULL
;

1208 
tf
 = 
˛cf
->
åy_fûes
;

1210 
Æüs
 = 
˛cf
->alias;

1214 i‡(
tf
->
Àngths
) {

1215 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1217 
e
.
ù
 = 
tf
->
Àngths
->
ñts
;

1218 
e
.
ªque°
 = 
r
;

1221 
Àn
 = 1;

1223 *(
uöçå_t
 *Ë
e
.
ù
) {

1224 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

1225 
Àn
 +
	`lcode
(&
e
);

1229 
Àn
 = 
tf
->
«me
.len;

1232 i‡(!
Æüs
) {

1233 
ª£rve
 = 
Àn
 > 
r
->
uri
.len ?Üen -Ñ->uri.len : 0;

1235 #i‡(
NGX_PCRE
)

1236 } i‡(
˛cf
->
ªgex
) {

1237 
ª£rve
 = 
Àn
;

1241 
ª£rve
 = 
Àn
 > 
r
->
uri
.À¿- 
Æüs
 ?Üen - (r->uri.len -álias) : 0;

1244 i‡(
ª£rve
 > 
Æloˇãd
 || !allocated) {

1247 
Æloˇãd
 = 
ª£rve
 + 16;

1249 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Æloˇãd
Ë=
NULL
) {

1250 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1251  
NGX_OK
;

1254 
«me
 = 
∑th
.
d©a
 + 
roŸ
;

1257 i‡(
tf
->
vÆues
 =
NULL
) {

1261 
	`ngx_mem˝y
(
«me
, 
tf
->«me.
d©a
,Åf->«me.
Àn
);

1263 
∑th
.
Àn
 = (
«me
 + 
tf
->«me.À¿- 1Ë-Ö©h.
d©a
;

1266 
e
.
ù
 = 
tf
->
vÆues
->
ñts
;

1267 
e
.
pos
 = 
«me
;

1268 
e
.
Êushed
 = 1;

1270 *(
uöçå_t
 *Ë
e
.
ù
) {

1271 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1272 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1275 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

1277 *
e
.
pos
 = '\0';

1279 i‡(
Æüs
 && 
	`ngx_°∫cmp
(
«me
, 
˛cf
->«me.
d©a
,álias) == 0) {

1280 
	`ngx_memmove
(
«me
,Çamê+ 
Æüs
, 
Àn
 -álias);

1281 
∑th
.
Àn
 -
Æüs
;

1285 
ã°_dú
 = 
tf
->test_dir;

1287 
tf
++;

1289 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1291 
ã°_dú
 ? "dú" : "fûe", 
«me
, 
∑th
.
d©a
);

1293 i‡(
tf
->
Àngths
 =
NULL
 &&Åf->
«me
.
Àn
 == 0) {

1295 i‡(
tf
->
code
) {

1296 
	`ngx_hâp_föÆize_ªque°
(
r
, 
tf
->
code
);

1297  
NGX_OK
;

1300 
∑th
.
Àn
 -
roŸ
;

1301 
∑th
.
d©a
 +
roŸ
;

1303 i‡(
∑th
.
d©a
[0] == '@') {

1304 (Ë
	`ngx_hâp_«med_loˇti⁄
(
r
, &
∑th
);

1307 
	`ngx_hâp_•lô_¨gs
(
r
, &
∑th
, &
¨gs
);

1309 (Ë
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
∑th
, &
¨gs
);

1312 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1313  
NGX_OK
;

1316 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1318 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1319 
of
.
dúe˘io
 = 
˛cf
->directio;

1320 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1321 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1322 
of
.
ã°_⁄ly
 = 1;

1323 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1324 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1326 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1327 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1328  
NGX_OK
;

1331 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1332 !
NGX_OK
)

1334 i‡(
of
.
îr
 !
NGX_ENOENT


1335 && 
of
.
îr
 !
NGX_ENOTDIR


1336 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1338 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1339 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

1345 i‡(
of
.
is_dú
 && !
ã°_dú
) {

1349 
∑th
.
Àn
 -
roŸ
;

1350 
∑th
.
d©a
 +
roŸ
;

1352 i‡(!
Æüs
) {

1353 
r
->
uri
 = 
∑th
;

1355 #i‡(
NGX_PCRE
)

1356 } i‡(
˛cf
->
ªgex
) {

1357 i‡(!
ã°_dú
) {

1358 
r
->
uri
 = 
∑th
;

1359 
r
->
add_uri_to_Æüs
 = 1;

1363 
r
->
uri
.
Àn
 = 
Æüs
 + 
∑th
.len;

1364 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
);

1365 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1366 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1367  
NGX_OK
;

1370 
p
 = 
	`ngx_c›y
(
r
->
uri
.
d©a
, 
˛cf
->
«me
.d©a, 
Æüs
);

1371 
	`ngx_mem˝y
(
p
, 
«me
, 
∑th
.
Àn
);

1374 
	`ngx_hâp_£t_exãn
(
r
);

1376 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1377 "åy fûêuri: \"%V\"", &
r
->
uri
);

1379 
r
->
pha£_h™dÀr
++;

1380  
NGX_AGAIN
;

1384 
	}
}

1387 
ngx_öt_t


1388 
	$ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1389 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1391 
size_t
 
roŸ
;

1392 
ngx_öt_t
 
rc
;

1393 
ngx_°r_t
 
∑th
;

1395 i‡(
r
->
c⁄ã¡_h™dÀr
) {

1396 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

1397 
	`ngx_hâp_föÆize_ªque°
(
r
,Ñ->
	`c⁄ã¡_h™dÀr
(r));

1398  
NGX_OK
;

1401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1402 "c⁄ã¡Öha£: %ui", 
r
->
pha£_h™dÀr
);

1404 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1406 i‡(
rc
 !
NGX_DECLINED
) {

1407 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1408  
NGX_OK
;

1413 
ph
++;

1415 i‡(
ph
->
checkî
) {

1416 
r
->
pha£_h™dÀr
++;

1417  
NGX_AGAIN
;

1422 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

1424 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë!
NULL
) {

1425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1426 "dúe˘‹y index o‡\"%s\" i†f‹biddí", 
∑th
.
d©a
);

1429 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_FORBIDDEN
);

1430  
NGX_OK
;

1433 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "no handler found");

1435 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1436  
NGX_OK
;

1437 
	}
}

1441 
	$ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
)

1443 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1445 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1447 i‡(
r
->
mëhod
 & 
˛cf
->
limô_ex˚±
) {

1448 
r
->
loc_c⁄f
 = 
˛cf
->
limô_ex˚±_loc_c⁄f
;

1449 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1452 i‡(
r
 =r->
maö
) {

1453 
r
->
c⁄√˘i⁄
->
log
->
fûe
 = 
˛cf
->
îr‹_log
->file;

1455 i‡(!(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

1456 
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 = 
˛cf
->
îr‹_log
->log_level;

1460 i‡((
ngx_io
.
Êags
 & 
NGX_IO_SENDFILE
Ë&& 
˛cf
->
£ndfûe
) {

1461 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 1;

1464 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 0;

1467 i‡(
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
) {

1468 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

1469 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

1470 
r
->
ªque°_body_ö_˛ón_fûe
 =

1471 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 =
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
;

1472 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_NOTICE
;

1475 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_WARN
;

1478 
r
->
ªque°_body_ö_sögÀ_buf
 = 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
;

1480 i‡(
r
->
kì∑live
) {

1481 i‡(
˛cf
->
kì∑live_timeout
 == 0) {

1482 
r
->
kì∑live
 = 0;

1484 } i‡(
r
->
c⁄√˘i⁄
->
ªque°s
 >
˛cf
->
kì∑live_ªque°s
) {

1485 
r
->
kì∑live
 = 0;

1487 } i‡(
r
->
hódîs_ö
.
msõ6


1488 && 
r
->
mëhod
 =
NGX_HTTP_POST


1489 && (
˛cf
->
kì∑live_dißbÀ


1490 & 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
))

1496 
r
->
kì∑live
 = 0;

1498 } i‡(
r
->
hódîs_ö
.
ßÁri


1499 && (
˛cf
->
kì∑live_dißbÀ


1500 & 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
))

1507 
r
->
kì∑live
 = 0;

1511 i‡(!
˛cf
->
t˝_n›ush
) {

1513 
r
->
c⁄√˘i⁄
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

1516 i‡(
r
->
limô_øã
 == 0) {

1517 
r
->
limô_øã
 = 
˛cf
->limit_rate;

1520 i‡(
˛cf
->
h™dÀr
) {

1521 
r
->
c⁄ã¡_h™dÀr
 = 
˛cf
->
h™dÀr
;

1523 
	}
}

1534 
ngx_öt_t


1535 
	$ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
)

1537 
ngx_öt_t
 
rc
;

1538 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
;

1539 #i‡(
NGX_PCRE
)

1540 
ngx_öt_t
 
n
;

1541 
ngx_uöt_t
 
n‹egex
;

1542 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, **
˛cÂ
;

1544 
n‹egex
 = 0;

1547 
p˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1549 
rc
 = 
	`ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
r
, 
p˛cf
->
°©ic_loˇti⁄s
);

1551 i‡(
rc
 =
NGX_AGAIN
) {

1553 #i‡(
NGX_PCRE
)

1554 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1556 
n‹egex
 = 
˛cf
->noregex;

1561 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1564 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_DONE
) {

1565  
rc
;

1570 #i‡(
NGX_PCRE
)

1572 i‡(
n‹egex
 =0 && 
p˛cf
->
ªgex_loˇti⁄s
) {

1574 
˛cÂ
 = 
p˛cf
->
ªgex_loˇti⁄s
; *clcfp; clcfp++) {

1576 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1577 "ã°Üoˇti⁄: ~ \"%V\"", &(*
˛cÂ
)->
«me
);

1579 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, (*
˛cÂ
)->
ªgex
, &r->
uri
);

1581 i‡(
n
 =
NGX_OK
) {

1582 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

1586 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1588  (
rc
 =
NGX_ERROR
Ë?Ñ¯: 
NGX_OK
;

1591 i‡(
n
 =
NGX_DECLINED
) {

1595  
NGX_ERROR
;

1600  
rc
;

1601 
	}
}

1611 
ngx_öt_t


1612 
	$ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1613 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
)

1615 
u_ch¨
 *
uri
;

1616 
size_t
 
Àn
, 
n
;

1617 
ngx_öt_t
 
rc
, 
rv
;

1619 
Àn
 = 
r
->
uri
.len;

1620 
uri
 = 
r
->uri.
d©a
;

1622 
rv
 = 
NGX_DECLINED
;

1626 i‡(
node
 =
NULL
) {

1627  
rv
;

1630 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1631 "ã°Üoˇti⁄: \"%*s\"", 
node
->
Àn
,Çode->
«me
);

1633 
n
 = (
Àn
 <(
size_t
Ë
node
->len) ?Üen :Çode->len;

1635 
rc
 = 
	`ngx_fûíame_cmp
(
uri
, 
node
->
«me
, 
n
);

1637 i‡(
rc
 != 0) {

1638 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1643 i‡(
Àn
 > (
size_t
Ë
node
->len) {

1645 i‡(
node
->
ö˛usive
) {

1647 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1648 
rv
 = 
NGX_AGAIN
;

1650 
node
 =Çode->
åì
;

1651 
uri
 +
n
;

1652 
Àn
 -
n
;

1659 
node
 =Çode->
right
;

1664 i‡(
Àn
 =(
size_t
Ë
node
->len) {

1666 i‡(
node
->
exa˘
) {

1667 
r
->
loc_c⁄f
 = 
node
->
exa˘
->loc_conf;

1668  
NGX_OK
;

1671 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1672  
NGX_AGAIN
;

1678 i‡(
Àn
 + 1 =(
size_t
Ë
node
->À¿&&Çode->
auto_ªdúe˘
) {

1680 
r
->
loc_c⁄f
 = (
node
->
exa˘
) ?Çode->exact->loc_conf:

1681 
node
->
ö˛usive
->
loc_c⁄f
;

1682 
rv
 = 
NGX_DONE
;

1685 
node
 =Çode->
À·
;

1687 
	}
}

1691 
	$ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
)

1693 
u_ch¨
 
c
, *
lowˇ£
;

1694 
size_t
 
Àn
;

1695 
ngx_uöt_t
 
i
, 
hash
;

1697 i‡(
ty≥s_hash
->
size
 == 0) {

1701 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

1702  
NULL
;

1705 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

1707 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 =
NULL
) {

1709 
lowˇ£
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1710 i‡(
lowˇ£
 =
NULL
) {

1711  
NULL
;

1714 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
lowˇ£
;

1716 
hash
 = 0;

1718 
i
 = 0; i < 
Àn
; i++) {

1719 
c
 = 
	`ngx_tﬁowî
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
[
i
]);

1720 
hash
 = 
	`ngx_hash
(hash, 
c
);

1721 
lowˇ£
[
i
] = 
c
;

1724 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
 = 
hash
;

1727  
	`ngx_hash_föd
(
ty≥s_hash
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
,

1728 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
, 
Àn
);

1729 
	}
}

1732 
ngx_öt_t


1733 
	$ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
)

1735 
u_ch¨
 
c
, *
exãn
;

1736 
ngx_°r_t
 *
ty≥
;

1737 
ngx_uöt_t
 
i
, 
hash
;

1738 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1740 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1741  
NGX_OK
;

1744 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1746 i‡(
r
->
exãn
.
Àn
) {

1748 
hash
 = 0;

1750 
i
 = 0; i < 
r
->
exãn
.
Àn
; i++) {

1751 
c
 = 
r
->
exãn
.
d©a
[
i
];

1753 i‡(
c
 >= 'A' && c <= 'Z') {

1755 
exãn
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->exãn.
Àn
);

1756 i‡(
exãn
 =
NULL
) {

1757  
NGX_ERROR
;

1760 
hash
 = 
	`ngx_hash_°æow
(
exãn
, 
r
->exãn.
d©a
,Ñ->exãn.
Àn
);

1762 
r
->
exãn
.
d©a
 =Éxten;

1767 
hash
 = 
	`ngx_hash
(hash, 
c
);

1770 
ty≥
 = 
	`ngx_hash_föd
(&
˛cf
->
ty≥s_hash
, 
hash
,

1771 
r
->
exãn
.
d©a
,Ñ->exãn.
Àn
);

1773 i‡(
ty≥
) {

1774 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
ty≥
->
Àn
;

1775 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
ty≥
;

1777  
NGX_OK
;

1781 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˛cf
->
deÁu…_ty≥
.
Àn
;

1782 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
˛cf
->
deÁu…_ty≥
;

1784  
NGX_OK
;

1785 
	}
}

1789 
	$ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
)

1791 
ngx_öt_t
 
i
;

1793 
	`ngx_°r_nuŒ
(&
r
->
exãn
);

1795 
i
 = 
r
->
uri
.
Àn
 - 1; i > 1; i--) {

1796 i‡(
r
->
uri
.
d©a
[
i
] == '.' &&Ñ->uri.data[i - 1] != '/') {

1798 
r
->
exãn
.
Àn
 =Ñ->
uri
.À¿- 
i
 - 1;

1799 
r
->
exãn
.
d©a
 = &r->
uri
.d©a[
i
 + 1];

1803 } i‡(
r
->
uri
.
d©a
[
i
] == '/') {

1809 
	}
}

1812 
ngx_öt_t


1813 
	$ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

1814 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
)

1816 
ngx_öt_t
 
rc
;

1817 
ngx_°r_t
 
vÆ
;

1818 
ngx_buf_t
 *
b
;

1819 
ngx_chaö_t
 
out
;

1821 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

1822  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1825 
r
->
hódîs_out
.
°©us
 = status;

1827 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1828  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1831 i‡(
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


1832 || 
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY


1833 || 
°©us
 =
NGX_HTTP_SEE_OTHER


1834 || 
°©us
 =
NGX_HTTP_TEMPORARY_REDIRECT
)

1836 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1838 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1839 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1840  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1843 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1844 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1845 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
vÆ
;

1847  
°©us
;

1850 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
vÆ
.
Àn
;

1852 i‡(
˘
) {

1853 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

1854 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

1857 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

1858  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1862 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
 || (∏!r->
maö
 && 
vÆ
.
Àn
 == 0)) {

1863  
	`ngx_hâp_£nd_hódî
(
r
);

1866 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1867 i‡(
b
 =
NULL
) {

1868  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1871 
b
->
pos
 = 
vÆ
.
d©a
;

1872 
b
->
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

1873 
b
->
mem‹y
 = 
vÆ
.
Àn
 ? 1 : 0;

1874 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

1875 
b
->
œ°_ö_chaö
 = 1;

1877 
out
.
buf
 = 
b
;

1878 
out
.
√xt
 = 
NULL
;

1880 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1882 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1883  
rc
;

1886  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1887 
	}
}

1890 
ngx_öt_t


1891 
	$ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1893 i‡(
r
->
îr_°©us
) {

1894 
r
->
hódîs_out
.
°©us
 =Ñ->
îr_°©us
;

1895 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

1898  
	`ngx_hâp_t›_hódî_fûãr
(
r
);

1899 
	}
}

1902 
ngx_öt_t


1903 
	$ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1905 
ngx_öt_t
 
rc
;

1906 
ngx_c⁄√˘i⁄_t
 *
c
;

1908 
c
 = 
r
->
c⁄√˘i⁄
;

1910 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1911 "hâ∞ouçuàfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1913 
rc
 = 
	`ngx_hâp_t›_body_fûãr
(
r
, 
ö
);

1915 i‡(
rc
 =
NGX_ERROR
) {

1917 
c
->
îr‹
 = 1;

1920  
rc
;

1921 
	}
}

1924 
u_ch¨
 *

1925 
	$ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
,

1926 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
)

1928 
u_ch¨
 *
œ°
;

1929 
size_t
 
Æüs
;

1930 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1932 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1934 
Æüs
 = 
˛cf
->alias;

1936 i‡(
Æüs
 && !
r
->
vÆid_loˇti⁄
) {

1937 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1939 "whîêURI wa†ªwrôãn", &
˛cf
->
«me
);

1940  
NULL
;

1943 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1945 *
roŸ_Àngth
 = 
˛cf
->
roŸ
.
Àn
;

1947 
∑th
->
Àn
 = 
˛cf
->
roŸ
.À¿+ 
ª£rved
 + 
r
->
uri
.À¿- 
Æüs
 + 1;

1949 
∑th
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ö©h->
Àn
);

1950 i‡(
∑th
->
d©a
 =
NULL
) {

1951  
NULL
;

1954 
œ°
 = 
	`ngx_c›y
(
∑th
->
d©a
, 
˛cf
->
roŸ
.d©a, clcf->roŸ.
Àn
);

1958 #i‡(
NGX_PCRE
)

1959 
ngx_uöt_t
 
ˇ±uªs
;

1961 
ˇ±uªs
 = 
Æüs
 && 
˛cf
->
ªgex
;

1963 
ª£rved
 +
ˇ±uªs
 ? 
r
->
add_uri_to_Æüs
 ?Ñ->
uri
.
Àn
 + 1 : 1

1964 : 
r
->
uri
.
Àn
 - 
Æüs
 + 1;

1966 
ª£rved
 +
r
->
uri
.
Àn
 - 
Æüs
 + 1;

1969 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, 
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 
ª£rved
,

1970 
˛cf
->
roŸ_vÆues
->
ñts
)

1971 =
NULL
)

1973  
NULL
;

1976 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, 
∑th
, 0Ë!
NGX_OK
) {

1977  
NULL
;

1980 *
roŸ_Àngth
 = 
∑th
->
Àn
 - 
ª£rved
;

1981 
œ°
 = 
∑th
->
d©a
 + *
roŸ_Àngth
;

1983 #i‡(
NGX_PCRE
)

1984 i‡(
ˇ±uªs
) {

1985 i‡(!
r
->
add_uri_to_Æüs
) {

1986 *
œ°
 = '\0';

1987  
œ°
;

1990 
Æüs
 = 0;

1995 
œ°
 = 
	`ngx_˝y°∫
÷a°, 
r
->
uri
.
d©a
 + 
Æüs
,Ñ->uri.
Àn
 -álias + 1);

1997  
œ°
;

1998 
	}
}

2001 
ngx_öt_t


2002 
	$ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
)

2004 
ngx_°r_t
 
auth
, 
ícoded
;

2005 
ngx_uöt_t
 
Àn
;

2007 i‡(
r
->
hódîs_ö
.
u£r
.
Àn
 =0 &&Ñ->hódîs_ö.u£r.
d©a
 !
NULL
) {

2008  
NGX_DECLINED
;

2011 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 =
NULL
) {

2012 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2013  
NGX_DECLINED
;

2016 
ícoded
 = 
r
->
hódîs_ö
.
auth‹iz©i⁄
->
vÆue
;

2018 i‡(
ícoded
.
Àn
 < ("Basic ") - 1

2019 || 
	`ngx_°∫ˇ£cmp
(
ícoded
.
d©a
, (
u_ch¨
 *) "Basic ",

2023 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2024  
NGX_DECLINED
;

2027 
ícoded
.
Àn
 -= ("Basic ") - 1;

2028 
ícoded
.
d©a
 += ("Basic ") - 1;

2030 
ícoded
.
Àn
 &&Éncoded.
d©a
[0] == ' ') {

2031 
ícoded
.
Àn
--;

2032 
ícoded
.
d©a
++;

2035 i‡(
ícoded
.
Àn
 == 0) {

2036 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2037  
NGX_DECLINED
;

2040 
auth
.
Àn
 = 
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len);

2041 
auth
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,áuth.
Àn
 + 1);

2042 i‡(
auth
.
d©a
 =
NULL
) {

2043  
NGX_ERROR
;

2046 i‡(
	`ngx_decode_ba£64
(&
auth
, &
ícoded
Ë!
NGX_OK
) {

2047 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2048  
NGX_DECLINED
;

2051 
auth
.
d©a
[auth.
Àn
] = '\0';

2053 
Àn
 = 0;Üí < 
auth
.len;Üen++) {

2054 i‡(
auth
.
d©a
[
Àn
] == ':') {

2059 i‡(
Àn
 =0 ||Üí =
auth
.len) {

2060 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2061  
NGX_DECLINED
;

2064 
r
->
hódîs_ö
.
u£r
.
Àn
 =Üen;

2065 
r
->
hódîs_ö
.
u£r
.
d©a
 = 
auth
.data;

2066 
r
->
hódîs_ö
.
∑sswd
.
Àn
 = 
auth
.len -Üen - 1;

2067 
r
->
hódîs_ö
.
∑sswd
.
d©a
 = &
auth
.d©a[
Àn
 + 1];

2069  
NGX_OK
;

2070 
	}
}

2073 #i‡(
NGX_HTTP_GZIP
)

2075 
ngx_öt_t


2076 
	$ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
)

2078 
time_t
 
d©e
, 
expúes
;

2079 
ngx_uöt_t
 
p
;

2080 
ngx_¨øy_t
 *
cc
;

2081 
ngx_èbÀ_ñt_t
 *
e
, *
d
, *
´
;

2082 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2084 
r
->
gzù_ã°ed
 = 1;

2086 i‡(
r
 !r->
maö
) {

2087  
NGX_DECLINED
;

2090 
´
 = 
r
->
hódîs_ö
.
ac˚±_ícodög
;

2091 i‡(
´
 =
NULL
) {

2092  
NGX_DECLINED
;

2095 i‡(
´
->
vÆue
.
Àn
 < ("gzip") - 1) {

2096  
NGX_DECLINED
;

2108 i‡(
	`ngx_memcmp
(
´
->
vÆue
.
d©a
, "gzip,", 5) != 0

2109 && 
	`ngx_hâp_gzù_ac˚±_ícodög
(&
´
->
vÆue
Ë!
NGX_OK
)

2111  
NGX_DECLINED
;

2114 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2116 i‡(
r
->
hódîs_ö
.
msõ6
 && 
˛cf
->
gzù_dißbÀ_msõ6
) {

2117  
NGX_DECLINED
;

2120 i‡(
r
->
hâp_vîsi⁄
 < 
˛cf
->
gzù_hâp_vîsi⁄
) {

2121  
NGX_DECLINED
;

2124 i‡(
r
->
hódîs_ö
.
vü
 =
NULL
) {

2125 
ok
;

2128 
p
 = 
˛cf
->
gzù_¥oxõd
;

2130 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_OFF
) {

2131  
NGX_DECLINED
;

2134 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_ANY
) {

2135 
ok
;

2138 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 && (
p
 & 
NGX_HTTP_GZIP_PROXIED_AUTH
)) {

2139 
ok
;

2142 
e
 = 
r
->
hódîs_out
.
expúes
;

2144 i‡(
e
) {

2146 i‡(!(
p
 & 
NGX_HTTP_GZIP_PROXIED_EXPIRED
)) {

2147  
NGX_DECLINED
;

2150 
expúes
 = 
	`ngx_hâp_∑r£_time
(
e
->
vÆue
.
d©a
,É->vÆue.
Àn
);

2151 i‡(
expúes
 =
NGX_ERROR
) {

2152  
NGX_DECLINED
;

2155 
d
 = 
r
->
hódîs_out
.
d©e
;

2157 i‡(
d
) {

2158 
d©e
 = 
	`ngx_hâp_∑r£_time
(
d
->
vÆue
.
d©a
, d->vÆue.
Àn
);

2159 i‡(
d©e
 =
NGX_ERROR
) {

2160  
NGX_DECLINED
;

2164 
d©e
 = 
	`ngx_time
();

2167 i‡(
expúes
 < 
d©e
) {

2168 
ok
;

2171  
NGX_DECLINED
;

2174 
cc
 = &
r
->
hódîs_out
.
ˇche_c⁄åﬁ
;

2176 i‡(
cc
->
ñts
) {

2178 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
)

2179 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_ˇche
,

2180 
NULL
)

2183 
ok
;

2186 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_STORE
)

2187 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_°‹e
,

2188 
NULL
)

2191 
ok
;

2194 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_PRIVATE
)

2195 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_¥iv©e
,

2196 
NULL
)

2199 
ok
;

2202  
NGX_DECLINED
;

2205 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_LM
Ë&& 
r
->
hódîs_out
.
œ°_modifõd
) {

2206  
NGX_DECLINED
;

2209 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
Ë&& 
r
->
hódîs_out
.
ëag
) {

2210  
NGX_DECLINED
;

2213 
ok
:

2215 #i‡(
NGX_PCRE
)

2217 i‡(
˛cf
->
gzù_dißbÀ
 && 
r
->
hódîs_ö
.
u£r_agít
) {

2219 i‡(
	`ngx_ªgex_exec_¨øy
(
˛cf
->
gzù_dißbÀ
,

2220 &
r
->
hódîs_ö
.
u£r_agít
->
vÆue
,

2221 
r
->
c⁄√˘i⁄
->
log
)

2222 !
NGX_DECLINED
)

2224  
NGX_DECLINED
;

2230 
r
->
gzù_ok
 = 1;

2232  
NGX_OK
;

2233 
	}
}

2243 
ngx_öt_t


2244 
	$ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
)

2246 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

2248 
°¨t
 = 
´
->
d©a
;

2249 
œ°
 = 
°¨t
 + 
´
->
Àn
;

2252 
p
 = 
	`ngx_°rˇ£°∫
(
°¨t
, "gzip", 4 - 1);

2253 i‡(
p
 =
NULL
) {

2254  
NGX_DECLINED
;

2257 i‡(
p
 =
°¨t
 || (*(p - 1) == ',' || *(p - 1) == ' ')) {

2261 
°¨t
 = 
p
 + 4;

2264 
p
 += 4;

2266 
p
 < 
œ°
) {

2267 *
p
++) {

2269  
NGX_OK
;

2271 
qu™tôy
;

2275  
NGX_DECLINED
;

2279  
NGX_OK
;

2281 
qu™tôy
:

2283 
p
 < 
œ°
) {

2284 *
p
++) {

2287 
equÆ
;

2291  
NGX_DECLINED
;

2295  
NGX_OK
;

2297 
equÆ
:

2299 i‡(
p
 + 2 > 
œ°
 || *p++ != '=') {

2300  
NGX_DECLINED
;

2303 i‡(
	`ngx_hâp_gzù_qu™tôy
(
p
, 
œ°
) == 0) {

2304  
NGX_DECLINED
;

2307  
NGX_OK
;

2308 
	}
}

2311 
ngx_uöt_t


2312 
	$ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
)

2314 
u_ch¨
 
c
;

2315 
ngx_uöt_t
 
n
, 
q
;

2317 
c
 = *
p
++;

2319 i‡(
c
 != '0' && c != '1') {

2323 
q
 = (
c
 - '0') * 100;

2325 i‡(
p
 =
œ°
) {

2326  
q
;

2329 
c
 = *
p
++;

2331 i‡(
c
 == ',' || c == ' ') {

2332  
q
;

2335 i‡(
c
 != '.') {

2339 
n
 = 0;

2341 
p
 < 
œ°
) {

2342 
c
 = *
p
++;

2344 i‡(
c
 == ',' || c == ' ') {

2348 i‡(
c
 >= '0' && c <= '9') {

2349 
q
 +
c
 - '0';

2350 
n
++;

2357 i‡(
q
 > 100 || 
n
 > 3) {

2361  
q
;

2362 
	}
}

2367 
ngx_öt_t


2368 
	$ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

2369 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
p§
,

2370 
ngx_hâp_po°_subªque°_t
 *
ps
, 
ngx_uöt_t
 
Êags
)

2372 
ngx_time_t
 *
ç
;

2373 
ngx_c⁄√˘i⁄_t
 *
c
;

2374 
ngx_hâp_ªque°_t
 *
§
;

2375 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2376 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, *
p
;

2378 
r
->
maö
->
subªque°s
--;

2380 i‡(
r
->
maö
->
subªque°s
 == 0) {

2381 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2382 "subªque°†cy˛êwhûê¥o˚ssög \"%V\"", 
uri
);

2383 
r
->
maö
->
subªque°s
 = 1;

2384  
NGX_ERROR
;

2387 
§
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_t
));

2388 i‡(
§
 =
NULL
) {

2389  
NGX_ERROR
;

2392 
§
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

2394 
c
 = 
r
->
c⁄√˘i⁄
;

2395 
§
->
c⁄√˘i⁄
 = 
c
;

2397 
§
->
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2398 i‡(
§
->
˘x
 =
NULL
) {

2399  
NGX_ERROR
;

2402 i‡(
	`ngx_li°_öô
(&
§
->
hódîs_out
.
hódîs
, 
r
->
poﬁ
, 20,

2403 (
ngx_èbÀ_ñt_t
))

2404 !
NGX_OK
)

2406  
NGX_ERROR
;

2409 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2410 
§
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

2411 
§
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2412 
§
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2414 
§
->
poﬁ
 = 
r
->pool;

2416 
§
->
hódîs_ö
 = 
r
->headers_in;

2418 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
§
);

2419 
	`ngx_hâp_˛ór_ac˚±_ønges
(
§
);

2420 
	`ngx_hâp_˛ór_œ°_modifõd
(
§
);

2422 
§
->
ªque°_body
 = 
r
->request_body;

2424 
§
->
mëhod
 = 
NGX_HTTP_GET
;

2425 
§
->
hâp_vîsi⁄
 = 
r
->http_version;

2427 
§
->
ªque°_löe
 = 
r
->request_line;

2428 
§
->
uri
 = *uri;

2430 i‡(
¨gs
) {

2431 
§
->
¨gs
 = *args;

2434 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2435 "hâ∞subªque° \"%V?%V\"", 
uri
, &
§
->
¨gs
);

2437 
§
->
subªque°_ö_mem‹y
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_IN_MEMORY
) != 0;

2438 
§
->
waôed
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_WAITED
) != 0;

2440 
§
->
u≈¨£d_uri
 = 
r
->unparsed_uri;

2441 
§
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2442 
§
->
hâp_¥Ÿocﬁ
 = 
r
->http_protocol;

2444 
	`ngx_hâp_£t_exãn
(
§
);

2446 
§
->
maö
 = 
r
->main;

2447 
§
->
∑ª¡
 = 
r
;

2448 
§
->
po°_subªque°
 = 
ps
;

2449 
§
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2450 
§
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_h™dÀr
;

2452 i‡(
c
->
d©a
 =
r
 &&Ñ->
po°p⁄ed
 =
NULL
) {

2453 
c
->
d©a
 = 
§
;

2456 
§
->
v¨übÀs
 = 
r
->variables;

2458 
§
->
log_h™dÀr
 = 
r
->log_handler;

2460 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

2461 i‡(
¥
 =
NULL
) {

2462  
NGX_ERROR
;

2465 
¥
->
ªque°
 = 
§
;

2466 
¥
->
out
 = 
NULL
;

2467 
¥
->
√xt
 = 
NULL
;

2469 i‡(
r
->
po°p⁄ed
) {

2470 
p
 = 
r
->
po°p⁄ed
;Ö->
√xt
;Ö =Ö->next) { }

2471 
p
->
√xt
 = 
¥
;

2474 
r
->
po°p⁄ed
 = 
¥
;

2477 
§
->
öã∫Æ
 = 1;

2479 
§
->
disˇrd_body
 = 
r
->discard_body;

2480 
§
->
ex≥˘_ã°ed
 = 1;

2481 
§
->
maö_fûãr_√ed_ö_mem‹y
 = 
r
->main_filter_need_in_memory;

2483 
§
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

2485 
ç
 = 
	`ngx_timeofday
();

2486 
§
->
°¨t_£c
 = 
ç
->
£c
;

2487 
§
->
°¨t_m£c
 = 
ç
->
m£c
;

2489 
r
->
maö
->
cou¡
++;

2491 *
p§
 = 
§
;

2493  
	`ngx_hâp_po°_ªque°
(
§
, 
NULL
);

2494 
	}
}

2497 
ngx_öt_t


2498 
	$ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

2499 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2501 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2503 
r
->
uri_ch™ges
--;

2505 i‡(
r
->
uri_ch™ges
 == 0) {

2506 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2508 "whûêöã∫ÆlyÑedúe˘ögÅÿ\"%V\"", 
uri
);

2510 
r
->
maö
->
cou¡
++;

2511 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2512  
NGX_DONE
;

2515 
r
->
uri
 = *uri;

2517 i‡(
¨gs
) {

2518 
r
->
¨gs
 = *args;

2521 
	`ngx_°r_nuŒ
(&
r
->
¨gs
);

2524 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2525 "öã∫ÆÑedúe˘: \"%V?%V\"", 
uri
, &
r
->
¨gs
);

2527 
	`ngx_hâp_£t_exãn
(
r
);

2530 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2532 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2533 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2535 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2537 #i‡(
NGX_HTTP_CACHE
)

2538 
r
->
ˇche
 = 
NULL
;

2541 
r
->
öã∫Æ
 = 1;

2542 
r
->
vÆid_u≈¨£d_uri
 = 0;

2543 
r
->
add_uri_to_Æüs
 = 0;

2544 
r
->
maö
->
cou¡
++;

2546 
	`ngx_hâp_h™dÀr
(
r
);

2548  
NGX_DONE
;

2549 
	}
}

2552 
ngx_öt_t


2553 
	$ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

2555 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2556 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

2557 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2559 
r
->
maö
->
cou¡
++;

2560 
r
->
uri_ch™ges
--;

2562 i‡(
r
->
uri_ch™ges
 == 0) {

2563 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2565 "whûêªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2567 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2568  
NGX_DONE
;

2571 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2573 i‡(
cscf
->
«med_loˇti⁄s
) {

2575 
˛cÂ
 = 
cscf
->
«med_loˇti⁄s
; *clcfp; clcfp++) {

2577 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2578 "ã°Üoˇti⁄: \"%V\"", &(*
˛cÂ
)->
«me
);

2580 i‡(
«me
->
Àn
 !(*
˛cÂ
)->name.len

2581 || 
	`ngx_°∫cmp
(
«me
->
d©a
, (*
˛cÂ
)->«me.d©a,Çame->
Àn
) != 0)

2586 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2588 
«me
, &
r
->
uri
, &r->
¨gs
);

2590 
r
->
öã∫Æ
 = 1;

2591 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2592 
r
->
uri_ch™ged
 = 0;

2593 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

2596 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2598 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2600 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2602 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

2604 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2605 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2607  
NGX_DONE
;

2611 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2612 "couldÇŸ födÇamedÜoˇti⁄ \"%V\"", 
«me
);

2614 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2616  
NGX_DONE
;

2617 
	}
}

2620 
ngx_hâp_˛ónup_t
 *

2621 
	$ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
)

2623 
ngx_hâp_˛ónup_t
 *
˛n
;

2625 
r
 =Ñ->
maö
;

2627 
˛n
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_˛ónup_t
));

2628 i‡(
˛n
 =
NULL
) {

2629  
NULL
;

2632 i‡(
size
) {

2633 
˛n
->
d©a
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
size
);

2634 i‡(
˛n
->
d©a
 =
NULL
) {

2635  
NULL
;

2639 
˛n
->
d©a
 = 
NULL
;

2642 
˛n
->
h™dÀr
 = 
NULL
;

2643 
˛n
->
√xt
 = 
r
->
˛ónup
;

2645 
r
->
˛ónup
 = 
˛n
;

2647 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2648 "hâ∞˛ónu∞add: %p", 
˛n
);

2650  
˛n
;

2651 
	}
}

2654 
ngx_öt_t


2655 
	$ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

2656 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
)

2658 #i‡(
NGX_HAVE_OPENAT
)

2659 
u_ch¨
 *
p
;

2660 
ngx_°r_t
 
‰om
;

2662 
of
->
dißbÀ_symlöks
 = 
˛cf
->disable_symlinks;

2664 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NULL
) {

2665  
NGX_OK
;

2668 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
dißbÀ_symlöks_‰om
, &
‰om
)

2669 !
NGX_OK
)

2671  
NGX_ERROR
;

2674 i‡(
‰om
.
Àn
 == 0

2675 || 
‰om
.
Àn
 > 
∑th
->len

2676 || 
	`ngx_memcmp
(
∑th
->
d©a
, 
‰om
.d©a, from.
Àn
) != 0)

2678  
NGX_OK
;

2681 i‡(
‰om
.
Àn
 =
∑th
->len) {

2682 
of
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

2683  
NGX_OK
;

2686 
p
 = 
∑th
->
d©a
 + 
‰om
.
Àn
;

2688 i‡(*
p
 == '/') {

2689 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
;

2690  
NGX_OK
;

2693 
p
--;

2695 i‡(*
p
 == '/') {

2696 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
 - 1;

2700  
NGX_OK
;

2701 
	}
}

2704 
ngx_öt_t


2705 
	$ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2706 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
, 
ªcursive
)

2708 
u_ch¨
 *
p
;

2709 
ö_addr_t
 
öaddr
;

2710 
ngx_addr_t
 
∑ddr
;

2711 
ngx_cidr_t
 *
cidr
;

2712 
ngx_uöt_t
 
Ámûy
, 
i
;

2713 #i‡(
NGX_HAVE_INET6
)

2714 
ngx_uöt_t
 
n
;

2715 
ö6_addr
 *
öaddr6
;

2718 #i‡(
NGX_SUPPRESS_WARN
)

2719 
öaddr
 = 0;

2720 #i‡(
NGX_HAVE_INET6
)

2721 
öaddr6
 = 
NULL
;

2725 
Ámûy
 = 
addr
->
sockaddr
->
ß_Ámûy
;

2727 i‡(
Ámûy
 =
AF_INET
) {

2728 
öaddr
 = ((
sockaddr_ö
 *Ë
addr
->
sockaddr
)->
sö_addr
.
s_addr
;

2731 #i‡(
NGX_HAVE_INET6
)

2732 i‡(
Ámûy
 =
AF_INET6
) {

2733 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
->
sockaddr
)->
sö6_addr
;

2735 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

2736 
Ámûy
 = 
AF_INET
;

2738 
p
 = 
öaddr6
->
s6_addr
;

2740 
öaddr
 = 
p
[12] << 24;

2741 
öaddr
 +
p
[13] << 16;

2742 
öaddr
 +
p
[14] << 8;

2743 
öaddr
 +
p
[15];

2745 
öaddr
 = 
	`ht⁄l
(inaddr);

2750 
cidr
 = 
¥oxõs
->
ñts
, 
i
 = 0; i <Öroxõs->
√…s
; i++) {

2751 i‡(
cidr
[
i
].
Ámûy
 != family) {

2752 
√xt
;

2755 
Ámûy
) {

2757 #i‡(
NGX_HAVE_INET6
)

2758 
AF_INET6
:

2759 
n
 = 0;Ç < 16;Ç++) {

2760 i‡((
öaddr6
->
s6_addr
[
n
] & 
cidr
[
i
].
u
.
ö6
.
mask
.s6_addr[n])

2761 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

2763 
√xt
;

2769 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

2770 
AF_UNIX
:

2773 #i‡(
NGX_HAVE_SERVAL
)

2774 
AF_SERVAL
:

2779 i‡((
öaddr
 & 
cidr
[
i
].
u
.
ö
.
mask
Ë!cidr[i].u.ö.
addr
) {

2780 
√xt
;

2785 
p
 = 
xff
 + 
xfÊí
 - 1;Ö > xff;Ö--, xfflen--) {

2786 i‡(*
p
 != ' ' && *p != ',') {

2791  ; 
p
 > 
xff
;Ö--) {

2792 i‡(*
p
 == ' ' || *p == ',') {

2793 
p
++;

2798 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, &
∑ddr
, 
p
, 
xfÊí
 - (∞- 
xff
)Ë!
NGX_OK
) {

2799  
NGX_DECLINED
;

2802 *
addr
 = 
∑ddr
;

2804 i‡(
ªcursive
 && 
p
 > 
xff
) {

2805 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, 
addr
, 
xff
, 
p
 - 1 - xff,

2806 
¥oxõs
, 1);

2809  
NGX_OK
;

2811 
√xt
:

2815  
NGX_DECLINED
;

2816 
	}
}

2820 
	$ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2822 *
rv
;

2823 *
mc⁄f
;

2824 
ngx_uöt_t
 
i
;

2825 
ngx_c⁄f_t
 
pcf
;

2826 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2827 
sockaddr_ö
 *
sö
;

2828 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

2829 
ngx_hâp_li°í_›t_t
 
ls›t
;

2830 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

2831 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2833 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2834 i‡(
˘x
 =
NULL
) {

2835  
NGX_CONF_ERROR
;

2838 
hâp_˘x
 = 
cf
->
˘x
;

2839 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

2843 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2844 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

2845  
NGX_CONF_ERROR
;

2850 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2851 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2852  
NGX_CONF_ERROR
;

2855 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

2856 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2860 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

2862 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

2863 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

2864 i‡(
mc⁄f
 =
NULL
) {

2865  
NGX_CONF_ERROR
;

2868 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2871 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2872 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2873 i‡(
mc⁄f
 =
NULL
) {

2874  
NGX_CONF_ERROR
;

2877 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2884 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2885 
cscf
->
˘x
 = ctx;

2888 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2890 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

2891 i‡(
cscÂ
 =
NULL
) {

2892  
NGX_CONF_ERROR
;

2895 *
cscÂ
 = 
cscf
;

2900 
pcf
 = *
cf
;

2901 
cf
->
˘x
 = ctx;

2902 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SRV_CONF
;

2904 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

2906 *
cf
 = 
pcf
;

2908 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

2909 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

2911 
sö
 = &
ls›t
.
u
.
sockaddr_ö
;

2913 
sö
->
sö_Ámûy
 = 
AF_INET
;

2914 #i‡(
NGX_WIN32
)

2915 
sö
->
sö_p‹t
 = 
	`ht⁄s
(80);

2917 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
	`gëuid
() == 0) ? 80 : 8000);

2919 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

2921 
ls›t
.
sockÀn
 = (
sockaddr_ö
);

2923 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

2924 
ls›t
.
rcvbuf
 = -1;

2925 
ls›t
.
¢dbuf
 = -1;

2926 #i‡(
NGX_HAVE_SETFIB
)

2927 
ls›t
.
£tfib
 = -1;

2929 
ls›t
.
wûdˇrd
 = 1;

2931 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
addr
,

2932 
NGX_SOCKADDR_STRLEN
, 1);

2934 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë!
NGX_OK
) {

2935  
NGX_CONF_ERROR
;

2939  
rv
;

2940 
	}
}

2944 
	$ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2946 *
rv
;

2947 
u_ch¨
 *
mod
;

2948 
size_t
 
Àn
;

2949 
ngx_°r_t
 *
vÆue
, *
«me
;

2950 
ngx_uöt_t
 
i
;

2951 
ngx_c⁄f_t
 
ßve
;

2952 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2953 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

2954 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

2956 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2957 i‡(
˘x
 =
NULL
) {

2958  
NGX_CONF_ERROR
;

2961 
p˘x
 = 
cf
->
˘x
;

2962 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

2963 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

2965 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2966 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2967  
NGX_CONF_ERROR
;

2970 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

2971 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2975 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

2977 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2978 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =

2979 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2980 i‡(
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

2981  
NGX_CONF_ERROR
;

2986 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2987 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

2989 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2991 i‡(
cf
->
¨gs
->
√…s
 == 3) {

2993 
Àn
 = 
vÆue
[1].len;

2994 
mod
 = 
vÆue
[1].
d©a
;

2995 
«me
 = &
vÆue
[2];

2997 i‡(
Àn
 =1 && 
mod
[0] == '=') {

2999 
˛cf
->
«me
 = *name;

3000 
˛cf
->
exa˘_m©ch
 = 1;

3002 } i‡(
Àn
 =2 && 
mod
[0] == '^' && mod[1] == '~') {

3004 
˛cf
->
«me
 = *name;

3005 
˛cf
->
n‹egex
 = 1;

3007 } i‡(
Àn
 =1 && 
mod
[0] == '~') {

3009 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3010  
NGX_CONF_ERROR
;

3013 } i‡(
Àn
 =2 && 
mod
[0] == '~' && mod[1] == '*') {

3015 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3016  
NGX_CONF_ERROR
;

3020 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3021 "övÆidÜoˇti⁄ modifõ∏\"%V\"", &
vÆue
[1]);

3022  
NGX_CONF_ERROR
;

3027 
«me
 = &
vÆue
[1];

3029 i‡(
«me
->
d©a
[0] == '=') {

3031 
˛cf
->
«me
.
Àn
 =Çame->len - 1;

3032 
˛cf
->
«me
.
d©a
 =Çame->data + 1;

3033 
˛cf
->
exa˘_m©ch
 = 1;

3035 } i‡(
«me
->
d©a
[0] == '^' &&Çame->data[1] == '~') {

3037 
˛cf
->
«me
.
Àn
 =Çame->len - 2;

3038 
˛cf
->
«me
.
d©a
 =Çame->data + 2;

3039 
˛cf
->
n‹egex
 = 1;

3041 } i‡(
«me
->
d©a
[0] == '~') {

3043 
«me
->
Àn
--;

3044 
«me
->
d©a
++;

3046 i‡(
«me
->
d©a
[0] == '*') {

3048 
«me
->
Àn
--;

3049 
«me
->
d©a
++;

3051 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3052  
NGX_CONF_ERROR
;

3056 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3057  
NGX_CONF_ERROR
;

3063 
˛cf
->
«me
 = *name;

3065 i‡(
«me
->
d©a
[0] == '@') {

3066 
˛cf
->
«med
 = 1;

3071 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3073 i‡(
p˛cf
->
«me
.
Àn
) {

3078 
˛cf
->
¥ev_loˇti⁄
 = 
p˛cf
;

3081 i‡(
p˛cf
->
exa˘_m©ch
) {

3082 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3085 &
˛cf
->
«me
, &
p˛cf
->name);

3086  
NGX_CONF_ERROR
;

3089 i‡(
p˛cf
->
«med
) {

3090 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3093 &
˛cf
->
«me
, &
p˛cf
->name);

3094  
NGX_CONF_ERROR
;

3097 i‡(
˛cf
->
«med
) {

3098 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3101 &
˛cf
->
«me
);

3102  
NGX_CONF_ERROR
;

3105 
Àn
 = 
p˛cf
->
«me
.len;

3107 #i‡(
NGX_PCRE
)

3108 i‡(
˛cf
->
ªgex
 =
NULL


3109 && 
	`ngx_°∫cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3111 i‡(
	`ngx_°∫cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3114 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3116 &
˛cf
->
«me
, &
p˛cf
->name);

3117  
NGX_CONF_ERROR
;

3121 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

3122  
NGX_CONF_ERROR
;

3125 
ßve
 = *
cf
;

3126 
cf
->
˘x
 = ctx;

3127 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LOC_CONF
;

3129 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3131 *
cf
 = 
ßve
;

3133  
rv
;

3134 
	}
}

3137 
ngx_öt_t


3138 
	$ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

3139 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3141 #i‡(
NGX_PCRE
)

3142 
ngx_ªgex_compûe_t
 
rc
;

3143 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3145 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3147 
rc
.
∑âîn
 = *
ªgex
;

3148 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3149 
rc
.
îr
.
d©a
 = 
îr°r
;

3151 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

3152 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3154 
rc
.
›ti⁄s
 = 
ˇ£Àss
;

3157 
˛cf
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3158 i‡(
˛cf
->
ªgex
 =
NULL
) {

3159  
NGX_ERROR
;

3162 
˛cf
->
«me
 = *
ªgex
;

3164  
NGX_OK
;

3168 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3170 
ªgex
);

3171  
NGX_ERROR
;

3174 
	}
}

3178 
	$ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3180 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3182 *
rv
;

3183 
ngx_c⁄f_t
 
ßve
;

3185 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3186 
˛cf
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, (
ngx_hash_key_t
));

3187 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3188  
NGX_CONF_ERROR
;

3192 
ßve
 = *
cf
;

3193 
cf
->
h™dÀr
 = 
ngx_hâp_c‹e_ty≥
;

3194 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

3196 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3198 *
cf
 = 
ßve
;

3200  
rv
;

3201 
	}
}

3205 
	$ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

3207 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3209 
ngx_°r_t
 *
vÆue
, *
c⁄ã¡_ty≥
, *
ﬁd
;

3210 
ngx_uöt_t
 
i
, 
n
, 
hash
;

3211 
ngx_hash_key_t
 *
ty≥
;

3213 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3215 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

3216 i‡(
cf
->
¨gs
->
√…s
 != 2) {

3217 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3220  
NGX_CONF_ERROR
;

3223  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

3226 
c⁄ã¡_ty≥
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

3227 i‡(
c⁄ã¡_ty≥
 =
NULL
) {

3228  
NGX_CONF_ERROR
;

3231 *
c⁄ã¡_ty≥
 = 
vÆue
[0];

3233 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

3235 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

3237 
ty≥
 = 
˛cf
->
ty≥s
->
ñts
;

3238 
n
 = 0;Ç < 
˛cf
->
ty≥s
->
√…s
;Ç++) {

3239 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

3240 
ﬁd
 = 
ty≥
[
n
].
vÆue
;

3241 
ty≥
[
n
].
vÆue
 = 
c⁄ã¡_ty≥
;

3243 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3247 &
vÆue
[
i
], 
c⁄ã¡_ty≥
, 
ﬁd
);

3248 
√xt
;

3253 
ty≥
 = 
	`ngx_¨øy_push
(
˛cf
->
ty≥s
);

3254 i‡(
ty≥
 =
NULL
) {

3255  
NGX_CONF_ERROR
;

3258 
ty≥
->
key
 = 
vÆue
[
i
];

3259 
ty≥
->
key_hash
 = 
hash
;

3260 
ty≥
->
vÆue
 = 
c⁄ã¡_ty≥
;

3262 
√xt
:

3266  
NGX_CONF_OK
;

3267 
	}
}

3270 
ngx_öt_t


3271 
	$ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3273  
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
cf
);

3274 
	}
}

3278 
	$ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3280 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3282 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_maö_c⁄f_t
));

3283 i‡(
cmcf
 =
NULL
) {

3284  
NULL
;

3287 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

3288 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

3289 !
NGX_OK
)

3291  
NULL
;

3294 
cmcf
->
£rvî_«mes_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3295 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3297 
cmcf
->
v¨übÀs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3298 
cmcf
->
v¨übÀs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3300  
cmcf
;

3301 
	}
}

3305 
	$ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

3307 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
c⁄f
;

3309 i‡(
cmcf
->
£rvî_«mes_hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

3310 
cmcf
->
£rvî_«mes_hash_max_size
 = 512;

3313 i‡(
cmcf
->
£rvî_«mes_hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

3314 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
ngx_ˇchñöe_size
;

3317 
cmcf
->
£rvî_«mes_hash_buckë_size
 =

3318 
	`ngx_Æign
(
cmcf
->
£rvî_«mes_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3321 i‡(
cmcf
->
v¨übÀs_hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

3322 
cmcf
->
v¨übÀs_hash_max_size
 = 512;

3325 i‡(
cmcf
->
v¨übÀs_hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

3326 
cmcf
->
v¨übÀs_hash_buckë_size
 = 64;

3329 
cmcf
->
v¨übÀs_hash_buckë_size
 =

3330 
	`ngx_Æign
(
cmcf
->
v¨übÀs_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3332 i‡(
cmcf
->
nˇ±uªs
) {

3333 
cmcf
->
nˇ±uªs
 = (cmcf->ncaptures + 1) * 3;

3336  
NGX_CONF_OK
;

3337 
	}
}

3341 
	$ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3343 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3345 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_§v_c⁄f_t
));

3346 i‡(
cscf
 =
NULL
) {

3347  
NULL
;

3356 i‡(
	`ngx_¨øy_öô
(&
cscf
->
£rvî_«mes
, 
cf
->
ãmp_poﬁ
, 4,

3357 (
ngx_hâp_£rvî_«me_t
))

3358 !
NGX_OK
)

3360  
NULL
;

3363 
cscf
->
c⁄√˘i⁄_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3364 
cscf
->
ªque°_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3365 
cscf
->
˛õ¡_hódî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3366 
cscf
->
˛õ¡_hódî_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3367 
cscf
->
ign‹e_övÆid_hódîs
 = 
NGX_CONF_UNSET
;

3368 
cscf
->
mîge_¶ashes
 = 
NGX_CONF_UNSET
;

3369 
cscf
->
undîsc‹es_ö_hódîs
 = 
NGX_CONF_UNSET
;

3371  
cscf
;

3372 
	}
}

3376 
	$ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3378 
ngx_hâp_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3379 
ngx_hâp_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

3381 
ngx_°r_t
 
«me
;

3382 
ngx_hâp_£rvî_«me_t
 *
¢
;

3386 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
c⁄√˘i⁄_poﬁ_size
,

3387 
¥ev
->
c⁄√˘i⁄_poﬁ_size
, 256);

3388 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªque°_poﬁ_size
,

3389 
¥ev
->
ªque°_poﬁ_size
, 4096);

3390 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_hódî_timeout
,

3391 
¥ev
->
˛õ¡_hódî_timeout
, 60000);

3392 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_hódî_buf„r_size
,

3393 
¥ev
->
˛õ¡_hódî_buf„r_size
, 1024);

3394 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
,

3395 
¥ev
->
œrge_˛õ¡_hódî_buf„rs
,

3398 i‡(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
.
size
 < c⁄f->
c⁄√˘i⁄_poﬁ_size
) {

3399 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3402  
NGX_CONF_ERROR
;

3405 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_övÆid_hódîs
,

3406 
¥ev
->
ign‹e_övÆid_hódîs
, 1);

3408 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mîge_¶ashes
, 
¥ev
->merge_slashes, 1);

3410 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
undîsc‹es_ö_hódîs
,

3411 
¥ev
->
undîsc‹es_ö_hódîs
, 0);

3413 i‡(
c⁄f
->
£rvî_«mes
.
√…s
 == 0) {

3415 
¢
 = 
	`ngx_¨øy_push
(&
c⁄f
->
£rvî_«mes
);

3416 #i‡(
NGX_PCRE
)

3417 
¢
->
ªgex
 = 
NULL
;

3419 
¢
->
£rvî
 = 
c⁄f
;

3420 
	`ngx_°r_£t
(&
¢
->
«me
, "");

3423 
¢
 = 
c⁄f
->
£rvî_«mes
.
ñts
;

3424 
«me
 = 
¢
[0].name;

3426 #i‡(
NGX_PCRE
)

3427 i‡(
¢
->
ªgex
) {

3428 
«me
.
Àn
++;

3429 
«me
.
d©a
--;

3433 i‡(
«me
.
d©a
[0] == '.') {

3434 
«me
.
Àn
--;

3435 
«me
.
d©a
++;

3438 
c⁄f
->
£rvî_«me
.
Àn
 = 
«me
.len;

3439 
c⁄f
->
£rvî_«me
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

3440 i‡(
c⁄f
->
£rvî_«me
.
d©a
 =
NULL
) {

3441  
NGX_CONF_ERROR
;

3444  
NGX_CONF_OK
;

3445 
	}
}

3449 
	$ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3451 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3453 
˛cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_loc_c⁄f_t
));

3454 i‡(
˛cf
 =
NULL
) {

3455  
NULL
;

3478 
˛cf
->
˛õ¡_max_body_size
 = 
NGX_CONF_UNSET
;

3479 
˛cf
->
˛õ¡_body_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3480 
˛cf
->
˛õ¡_body_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3481 
˛cf
->
ßtisfy
 = 
NGX_CONF_UNSET_UINT
;

3482 
˛cf
->
if_modifõd_sö˚
 = 
NGX_CONF_UNSET_UINT
;

3483 
˛cf
->
max_ønges
 = 
NGX_CONF_UNSET_UINT
;

3484 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 = 
NGX_CONF_UNSET_UINT
;

3485 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
 = 
NGX_CONF_UNSET
;

3486 
˛cf
->
öã∫Æ
 = 
NGX_CONF_UNSET
;

3487 
˛cf
->
£ndfûe
 = 
NGX_CONF_UNSET
;

3488 
˛cf
->
£ndfûe_max_chunk
 = 
NGX_CONF_UNSET_SIZE
;

3489 #i‡(
NGX_HAVE_FILE_AIO
)

3490 
˛cf
->
aio
 = 
NGX_CONF_UNSET
;

3492 
˛cf
->
ªad_ahód
 = 
NGX_CONF_UNSET_SIZE
;

3493 
˛cf
->
dúe˘io
 = 
NGX_CONF_UNSET
;

3494 
˛cf
->
dúe˘io_Æignmít
 = 
NGX_CONF_UNSET
;

3495 
˛cf
->
t˝_n›ush
 = 
NGX_CONF_UNSET
;

3496 
˛cf
->
t˝_nodñay
 = 
NGX_CONF_UNSET
;

3497 
˛cf
->
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3498 
˛cf
->
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

3499 
˛cf
->
po°p⁄e_ouçut
 = 
NGX_CONF_UNSET_SIZE
;

3500 
˛cf
->
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

3501 
˛cf
->
limô_øã_a·î
 = 
NGX_CONF_UNSET_SIZE
;

3502 
˛cf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3503 
˛cf
->
kì∑live_hódî
 = 
NGX_CONF_UNSET
;

3504 
˛cf
->
kì∑live_ªque°s
 = 
NGX_CONF_UNSET_UINT
;

3505 
˛cf
->
lögîög_˛o£
 = 
NGX_CONF_UNSET_UINT
;

3506 
˛cf
->
lögîög_time
 = 
NGX_CONF_UNSET_MSEC
;

3507 
˛cf
->
lögîög_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3508 
˛cf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3509 
˛cf
->
ª£t_timedout_c⁄√˘i⁄
 = 
NGX_CONF_UNSET
;

3510 
˛cf
->
£rvî_«me_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3511 
˛cf
->
p‹t_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3512 
˛cf
->
msõ_∑ddög
 = 
NGX_CONF_UNSET
;

3513 
˛cf
->
msõ_ª‰esh
 = 
NGX_CONF_UNSET
;

3514 
˛cf
->
log_nŸ_found
 = 
NGX_CONF_UNSET
;

3515 
˛cf
->
log_subªque°
 = 
NGX_CONF_UNSET
;

3516 
˛cf
->
ªcursive_îr‹_∑ges
 = 
NGX_CONF_UNSET
;

3517 
˛cf
->
£rvî_tokís
 = 
NGX_CONF_UNSET
;

3518 
˛cf
->
chunked_å™s„r_ícodög
 = 
NGX_CONF_UNSET
;

3519 
˛cf
->
ty≥s_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3520 
˛cf
->
ty≥s_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3522 
˛cf
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

3523 
˛cf
->
›í_fûe_ˇche_vÆid
 = 
NGX_CONF_UNSET
;

3524 
˛cf
->
›í_fûe_ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

3525 
˛cf
->
›í_fûe_ˇche_îr‹s
 = 
NGX_CONF_UNSET
;

3526 
˛cf
->
›í_fûe_ˇche_evíts
 = 
NGX_CONF_UNSET
;

3528 #i‡(
NGX_HTTP_GZIP
)

3529 
˛cf
->
gzù_v¨y
 = 
NGX_CONF_UNSET
;

3530 
˛cf
->
gzù_hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

3531 #i‡(
NGX_PCRE
)

3532 
˛cf
->
gzù_dißbÀ
 = 
NGX_CONF_UNSET_PTR
;

3534 
˛cf
->
gzù_dißbÀ_msõ6
 = 3;

3535 #i‡(
NGX_HTTP_DEGRADATION
)

3536 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 3;

3540 #i‡(
NGX_HAVE_OPENAT
)

3541 
˛cf
->
dißbÀ_symlöks
 = 
NGX_CONF_UNSET_UINT
;

3542 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NGX_CONF_UNSET_PTR
;

3545  
˛cf
;

3546 
	}
}

3549 
ngx_°r_t
 
	gngx_hâp_c‹e_ãxt_html_ty≥
 = 
ngx_°rög
("text/html");

3550 
ngx_°r_t
 
	gngx_hâp_c‹e_image_gif_ty≥
 = 
ngx_°rög
("image/gif");

3551 
ngx_°r_t
 
	gngx_hâp_c‹e_image_j≥g_ty≥
 = 
ngx_°rög
("image/jpeg");

3553 
ngx_hash_key_t
 
	gngx_hâp_c‹e_deÁu…_ty≥s
[] = {

3554 { 
ngx_°rög
("html"), 0, &
ngx_hâp_c‹e_ãxt_html_ty≥
 },

3555 { 
ngx_°rög
("gif"), 0, &
ngx_hâp_c‹e_image_gif_ty≥
 },

3556 { 
ngx_°rög
("jpg"), 0, &
ngx_hâp_c‹e_image_j≥g_ty≥
 },

3557 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

3562 
	$ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3564 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3565 
ngx_hâp_c‹e_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

3567 
ngx_uöt_t
 
i
;

3568 
ngx_hash_key_t
 *
ty≥
;

3569 
ngx_hash_öô_t
 
ty≥s_hash
;

3571 i‡(
c⁄f
->
roŸ
.
d©a
 =
NULL
) {

3573 
c⁄f
->
Æüs
 = 
¥ev
->alias;

3574 
c⁄f
->
roŸ
 = 
¥ev
->root;

3575 
c⁄f
->
roŸ_Àngths
 = 
¥ev
->root_lengths;

3576 
c⁄f
->
roŸ_vÆues
 = 
¥ev
->root_values;

3578 i‡(
¥ev
->
roŸ
.
d©a
 =
NULL
) {

3579 
	`ngx_°r_£t
(&
c⁄f
->
roŸ
, "html");

3581 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
c⁄f
->
roŸ
, 0Ë!
NGX_OK
) {

3582  
NGX_CONF_ERROR
;

3587 i‡(
c⁄f
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3588 
c⁄f
->
po°_a˘i⁄
 = 
¥ev
->post_action;

3591 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_max_size
,

3592 
¥ev
->
ty≥s_hash_max_size
, 1024);

3594 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_buckë_size
,

3595 
¥ev
->
ty≥s_hash_buckë_size
,

3596 
ngx_ˇchñöe_size
);

3598 
c⁄f
->
ty≥s_hash_buckë_size
 = 
	`ngx_Æign
(conf->types_hash_bucket_size,

3599 
ngx_ˇchñöe_size
);

3606 i‡(
¥ev
->
ty≥s
 &&Öªv->
ty≥s_hash
.
buckës
 =
NULL
) {

3608 
ty≥s_hash
.
hash
 = &
¥ev
->types_hash;

3609 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3610 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3611 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3612 
ty≥s_hash
.
«me
 = "types_hash";

3613 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3614 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3616 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
¥ev
->
ty≥s
->
ñts
,Öªv->ty≥s->
√…s
)

3617 !
NGX_OK
)

3619  
NGX_CONF_ERROR
;

3623 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3624 
c⁄f
->
ty≥s
 = 
¥ev
->types;

3625 
c⁄f
->
ty≥s_hash
 = 
¥ev
->types_hash;

3628 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3629 
c⁄f
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 3, (
ngx_hash_key_t
));

3630 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3631  
NGX_CONF_ERROR
;

3634 
i
 = 0; 
ngx_hâp_c‹e_deÁu…_ty≥s
[i].
key
.
Àn
; i++) {

3635 
ty≥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ty≥s
);

3636 i‡(
ty≥
 =
NULL
) {

3637  
NGX_CONF_ERROR
;

3640 
ty≥
->
key
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].key;

3641 
ty≥
->
key_hash
 =

3642 
	`ngx_hash_key_lc
(
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
d©a
,

3643 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
Àn
);

3644 
ty≥
->
vÆue
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].value;

3648 i‡(
c⁄f
->
ty≥s_hash
.
buckës
 =
NULL
) {

3650 
ty≥s_hash
.
hash
 = &
c⁄f
->types_hash;

3651 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3652 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3653 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3654 
ty≥s_hash
.
«me
 = "types_hash";

3655 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3656 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3658 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
c⁄f
->
ty≥s
->
ñts
, c⁄f->ty≥s->
√…s
)

3659 !
NGX_OK
)

3661  
NGX_CONF_ERROR
;

3665 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

3666 i‡(
¥ev
->
îr‹_log
) {

3667 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

3669 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

3673 i‡(
c⁄f
->
îr‹_∑ges
 =
NULL
 && 
¥ev
->error_pages) {

3674 
c⁄f
->
îr‹_∑ges
 = 
¥ev
->error_pages;

3677 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
deÁu…_ty≥
,

3678 
¥ev
->
deÁu…_ty≥
, "text/plain");

3680 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
˛õ¡_max_body_size
,

3681 
¥ev
->
˛õ¡_max_body_size
, 1 * 1024 * 1024);

3682 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_body_buf„r_size
,

3683 
¥ev
->
˛õ¡_body_buf„r_size
,

3684 (
size_t
Ë2 * 
ngx_∑gesize
);

3685 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_body_timeout
,

3686 
¥ev
->
˛õ¡_body_timeout
, 60000);

3688 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
kì∑live_dißbÀ
,

3689 
¥ev
->
kì∑live_dißbÀ
,

3690 (
NGX_CONF_BITMASK_SET


3691 |
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
));

3692 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ßtisfy
, 
¥ev
->satisfy,

3693 
NGX_HTTP_SATISFY_ALL
);

3694 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
if_modifõd_sö˚
, 
¥ev
->if_modified_since,

3695 
NGX_HTTP_IMS_EXACT
);

3696 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
max_ønges
, 
¥ev
->max_ranges,

3697 
NGX_MAX_INT32_VALUE
);

3698 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
˛õ¡_body_ö_fûe_⁄ly
,

3699 
¥ev
->
˛õ¡_body_ö_fûe_⁄ly
,

3700 
NGX_HTTP_REQUEST_BODY_FILE_OFF
);

3701 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛õ¡_body_ö_sögÀ_buf„r
,

3702 
¥ev
->
˛õ¡_body_ö_sögÀ_buf„r
, 0);

3703 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öã∫Æ
, 
¥ev
->internal, 0);

3704 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ndfûe
, 
¥ev
->sendfile, 0);

3705 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£ndfûe_max_chunk
,

3706 
¥ev
->
£ndfûe_max_chunk
, 0);

3707 #i‡(
NGX_HAVE_FILE_AIO
)

3708 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
aio
, 
¥ev
->aio, 
NGX_HTTP_AIO_OFF
);

3710 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªad_ahód
, 
¥ev
->read_ahead, 0);

3711 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io
, 
¥ev
->directio,

3712 
NGX_OPEN_FILE_DIRECTIO_OFF
);

3713 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io_Æignmít
, 
¥ev
->directio_alignment,

3715 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_n›ush
, 
¥ev
->tcp_nopush, 0);

3716 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_nodñay
, 
¥ev
->tcp_nodelay, 1);

3718 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
£nd_timeout
, 
¥ev
->send_timeout, 60000);

3719 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£nd_low©
, 
¥ev
->send_lowat, 0);

3720 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_ouçut
, 
¥ev
->postpone_output,

3722 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã
, 
¥ev
->limit_rate, 0);

3723 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã_a·î
, 
¥ev
->limit_rate_after,

3725 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

3726 
¥ev
->
kì∑live_timeout
, 75000);

3727 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
kì∑live_hódî
,

3728 
¥ev
->
kì∑live_hódî
, 0);

3729 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
kì∑live_ªque°s
,

3730 
¥ev
->
kì∑live_ªque°s
, 100);

3731 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
lögîög_˛o£
,

3732 
¥ev
->
lögîög_˛o£
, 
NGX_HTTP_LINGERING_ON
);

3733 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_time
,

3734 
¥ev
->
lögîög_time
, 30000);

3735 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_timeout
,

3736 
¥ev
->
lögîög_timeout
, 5000);

3737 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
,

3738 
¥ev
->
ªsﬁvî_timeout
, 30000);

3740 i‡(
c⁄f
->
ªsﬁvî
 =
NULL
) {

3742 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3749 
¥ev
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, 
NULL
, 0);

3750 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3751  
NGX_CONF_ERROR
;

3755 
c⁄f
->
ªsﬁvî
 = 
¥ev
->resolver;

3758 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
˛õ¡_body_ãmp_∑th
,

3759 
¥ev
->
˛õ¡_body_ãmp_∑th
,

3760 &
ngx_hâp_˛õ¡_ãmp_∑th
)

3761 !
NGX_OK
)

3763  
NGX_CONF_ERROR
;

3766 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ª£t_timedout_c⁄√˘i⁄
,

3767 
¥ev
->
ª£t_timedout_c⁄√˘i⁄
, 0);

3768 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_«me_ö_ªdúe˘
,

3769 
¥ev
->
£rvî_«me_ö_ªdúe˘
, 0);

3770 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
p‹t_ö_ªdúe˘
, 
¥ev
->port_in_redirect, 1);

3771 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_∑ddög
, 
¥ev
->msie_padding, 1);

3772 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_ª‰esh
, 
¥ev
->msie_refresh, 0);

3773 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_nŸ_found
, 
¥ev
->log_not_found, 1);

3774 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_subªque°
, 
¥ev
->log_subrequest, 0);

3775 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive_îr‹_∑ges
,

3776 
¥ev
->
ªcursive_îr‹_∑ges
, 0);

3777 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_tokís
, 
¥ev
->server_tokens, 1);

3778 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
chunked_å™s„r_ícodög
,

3779 
¥ev
->
chunked_å™s„r_ícodög
, 1);

3781 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
›í_fûe_ˇche
,

3782 
¥ev
->
›í_fûe_ˇche
, 
NULL
);

3784 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_vÆid
,

3785 
¥ev
->
›í_fûe_ˇche_vÆid
, 60);

3787 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
›í_fûe_ˇche_mö_u£s
,

3788 
¥ev
->
›í_fûe_ˇche_mö_u£s
, 1);

3790 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_îr‹s
,

3791 
¥ev
->
›í_fûe_ˇche_îr‹s
, 0);

3793 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_evíts
,

3794 
¥ev
->
›í_fûe_ˇche_evíts
, 0);

3795 #i‡(
NGX_HTTP_GZIP
)

3797 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
gzù_v¨y
, 
¥ev
->gzip_vary, 0);

3798 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_hâp_vîsi⁄
, 
¥ev
->gzip_http_version,

3799 
NGX_HTTP_VERSION_11
);

3800 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
gzù_¥oxõd
, 
¥ev
->gzip_proxied,

3801 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_GZIP_PROXIED_OFF
));

3803 #i‡(
NGX_PCRE
)

3804 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
gzù_dißbÀ
, 
¥ev
->gzù_dißbÀ, 
NULL
);

3807 i‡(
c⁄f
->
gzù_dißbÀ_msõ6
 == 3) {

3808 
c⁄f
->
gzù_dißbÀ_msõ6
 =

3809 (
¥ev
->
gzù_dißbÀ_msõ6
 == 3) ? 0 :Örev->gzip_disable_msie6;

3812 #i‡(
NGX_HTTP_DEGRADATION
)

3814 i‡(
c⁄f
->
gzù_dißbÀ_degød©i⁄
 == 3) {

3815 
c⁄f
->
gzù_dißbÀ_degød©i⁄
 =

3816 (
¥ev
->
gzù_dißbÀ_degød©i⁄
 == 3) ?

3817 0 : 
¥ev
->
gzù_dißbÀ_degød©i⁄
;

3823 #i‡(
NGX_HAVE_OPENAT
)

3824 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
dißbÀ_symlöks
, 
¥ev
->disable_symlinks,

3825 
NGX_DISABLE_SYMLINKS_OFF
);

3826 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
dißbÀ_symlöks_‰om
,

3827 
¥ev
->
dißbÀ_symlöks_‰om
, 
NULL
);

3830  
NGX_CONF_OK
;

3831 
	}
}

3835 
	$ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3837 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

3839 
ngx_°r_t
 *
vÆue
, 
size
;

3840 
ngx_uæ_t
 
u
;

3841 
ngx_uöt_t
 
n
;

3842 
ngx_hâp_li°í_›t_t
 
ls›t
;

3844 
cscf
->
li°í
 = 1;

3846 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3848 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3850 
u
.
uæ
 = 
vÆue
[1];

3851 
u
.
li°í
 = 1;

3852 
u
.
deÁu…_p‹t
 = 80;

3854 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

3855 i‡(
u
.
îr
) {

3856 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3858 
u
.
îr
, &u.
uæ
);

3861  
NGX_CONF_ERROR
;

3864 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3866 
	`ngx_mem˝y
(&
ls›t
.
u
.
sockaddr
, u.sockaddr, u.
sockÀn
);

3868 
ls›t
.
sockÀn
 = 
u
.socklen;

3869 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3870 
ls›t
.
rcvbuf
 = -1;

3871 
ls›t
.
¢dbuf
 = -1;

3872 #i‡(
NGX_HAVE_SETFIB
)

3873 
ls›t
.
£tfib
 = -1;

3875 
ls›t
.
wûdˇrd
 = 
u
.wildcard;

3877 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
addr
,

3878 
NGX_SOCKADDR_STRLEN
, 1);

3880 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

3882 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default_server") == 0

3883 || 
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default") == 0)

3885 
ls›t
.
deÁu…_£rvî
 = 1;

3889 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "bind") == 0) {

3890 
ls›t
.
£t
 = 1;

3891 
ls›t
.
böd
 = 1;

3895 #i‡(
NGX_HAVE_SETFIB
)

3896 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "setfib=", 7) == 0) {

3897 
ls›t
.
£tfib
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 7, vÆue[n].
Àn
 - 7);

3899 i‡(
ls›t
.
£tfib
 =
NGX_ERROR
) {

3900 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3901 "övÆid sëfib \"%V\"", &
vÆue
[
n
]);

3902  
NGX_CONF_ERROR
;

3908 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "backlog=", 8) == 0) {

3909 
ls›t
.
backlog
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 8, vÆue[n].
Àn
 - 8);

3910 
ls›t
.
£t
 = 1;

3911 
ls›t
.
böd
 = 1;

3913 i‡(
ls›t
.
backlog
 =
NGX_ERROR
 ||Üsopt.backlog == 0) {

3914 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3915 "övÆid backlog \"%V\"", &
vÆue
[
n
]);

3916  
NGX_CONF_ERROR
;

3922 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "rcvbuf=", 7) == 0) {

3923 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

3924 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

3926 
ls›t
.
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

3927 
ls›t
.
£t
 = 1;

3928 
ls›t
.
böd
 = 1;

3930 i‡(
ls›t
.
rcvbuf
 =
NGX_ERROR
) {

3931 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3932 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
n
]);

3933  
NGX_CONF_ERROR
;

3939 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "sndbuf=", 7) == 0) {

3940 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

3941 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

3943 
ls›t
.
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

3944 
ls›t
.
£t
 = 1;

3945 
ls›t
.
böd
 = 1;

3947 i‡(
ls›t
.
¢dbuf
 =
NGX_ERROR
) {

3948 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3949 "övÆid sndbu‡\"%V\"", &
vÆue
[
n
]);

3950  
NGX_CONF_ERROR
;

3956 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "accept_filter=", 14) == 0) {

3957 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

3958 
ls›t
.
ac˚±_fûãr
 = (*Ë&
vÆue
[
n
].
d©a
[14];

3959 
ls›t
.
£t
 = 1;

3960 
ls›t
.
böd
 = 1;

3962 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3965 &
vÆue
[
n
]);

3970 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "deferred") == 0) {

3971 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

3972 
ls›t
.
de„ºed_ac˚±
 = 1;

3973 
ls›t
.
£t
 = 1;

3974 
ls›t
.
böd
 = 1;

3976 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3983 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "ipv6only=o", 10) == 0) {

3984 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

3985 
sockaddr
 *
ß
;

3987 
ß
 = &
ls›t
.
u
.
sockaddr
;

3989 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

3991 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "n") == 0) {

3992 
ls›t
.
ùv6⁄ly
 = 1;

3994 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "ff") == 0) {

3995 
ls›t
.
ùv6⁄ly
 = 2;

3998 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4000 &
vÆue
[
n
].
d©a
[9]);

4001  
NGX_CONF_ERROR
;

4004 
ls›t
.
£t
 = 1;

4005 
ls›t
.
böd
 = 1;

4008 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4010 "⁄ádd∏\"%s\", ign‹ed", 
ls›t
.
addr
);

4015 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4018  
NGX_CONF_ERROR
;

4022 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "ssl") == 0) {

4023 #i‡(
NGX_HTTP_SSL
)

4024 
ls›t
.
s¶
 = 1;

4027 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4030  
NGX_CONF_ERROR
;

4034 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "so_keepalive=", 13) == 0) {

4036 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "on") == 0) {

4037 
ls›t
.
so_kì∑live
 = 1;

4039 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "off") == 0) {

4040 
ls›t
.
so_kì∑live
 = 2;

4044 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4045 
u_ch¨
 *
p
, *
íd
;

4046 
ngx_°r_t
 
s
;

4048 
íd
 = 
vÆue
[
n
].
d©a
 + vÆue[n].
Àn
;

4049 
s
.
d©a
 = 
vÆue
[
n
].data + 13;

4051 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4052 i‡(
p
 =
NULL
) {

4053 
p
 = 
íd
;

4056 i‡(
p
 > 
s
.
d©a
) {

4057 
s
.
Àn
 = 
p
 - s.
d©a
;

4059 
ls›t
.
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

4060 i‡(
ls›t
.
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

4061 
övÆid_so_kì∑live
;

4065 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4067 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4068 i‡(
p
 =
NULL
) {

4069 
p
 = 
íd
;

4072 i‡(
p
 > 
s
.
d©a
) {

4073 
s
.
Àn
 = 
p
 - s.
d©a
;

4075 
ls›t
.
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

4076 i‡(
ls›t
.
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

4077 
övÆid_so_kì∑live
;

4081 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4083 i‡(
s
.
d©a
 < 
íd
) {

4084 
s
.
Àn
 = 
íd
 - s.
d©a
;

4086 
ls›t
.
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

4087 i‡(
ls›t
.
t˝_kìp˙t
 =
NGX_ERROR
) {

4088 
övÆid_so_kì∑live
;

4092 i‡(
ls›t
.
t˝_kìpidÀ
 =0 &&Üs›t.
t˝_kìpötvl
 == 0

4093 && 
ls›t
.
t˝_kìp˙t
 == 0)

4095 
övÆid_so_kì∑live
;

4098 
ls›t
.
so_kì∑live
 = 1;

4102 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4105  
NGX_CONF_ERROR
;

4110 
ls›t
.
£t
 = 1;

4111 
ls›t
.
böd
 = 1;

4115 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4116 
övÆid_so_kì∑live
:

4118 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4120 &
vÆue
[
n
].
d©a
[13]);

4121  
NGX_CONF_ERROR
;

4125 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4126 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
n
]);

4127  
NGX_CONF_ERROR
;

4130 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë=
NGX_OK
) {

4131  
NGX_CONF_OK
;

4134  
NGX_CONF_ERROR
;

4135 
	}
}

4139 
	$ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4141 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

4143 
u_ch¨
 
ch
;

4144 
ngx_°r_t
 *
vÆue
;

4145 
ngx_uöt_t
 
i
;

4146 
ngx_hâp_£rvî_«me_t
 *
¢
;

4148 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4150 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4152 
ch
 = 
vÆue
[
i
].
d©a
[0];

4154 i‡((
ch
 ='*' && (
vÆue
[
i
].
Àn
 < 3 || vÆue[i].
d©a
[1] != '.'))

4155 || (
ch
 ='.' && 
vÆue
[
i
].
Àn
 < 2))

4157 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4158 "£rvîÇamê\"%V\" i†övÆid", &
vÆue
[
i
]);

4159  
NGX_CONF_ERROR
;

4162 i‡(
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/')) {

4163 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4165 &
vÆue
[
i
]);

4168 
¢
 = 
	`ngx_¨øy_push
(&
cscf
->
£rvî_«mes
);

4169 i‡(
¢
 =
NULL
) {

4170  
NGX_CONF_ERROR
;

4173 #i‡(
NGX_PCRE
)

4174 
¢
->
ªgex
 = 
NULL
;

4176 
¢
->
£rvî
 = 
cscf
;

4178 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, (
u_ch¨
 *) "$hostname") == 0) {

4179 
¢
->
«me
 = 
cf
->
cy˛e
->
ho°«me
;

4182 
¢
->
«me
 = 
vÆue
[
i
];

4185 i‡(
vÆue
[
i
].
d©a
[0] != '~') {

4186 
	`ngx_°æow
(
¢
->
«me
.
d©a
, sn->«me.d©a, sn->«me.
Àn
);

4190 #i‡(
NGX_PCRE
)

4192 
u_ch¨
 *
p
;

4193 
ngx_ªgex_compûe_t
 
rc
;

4194 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4196 i‡(
vÆue
[
i
].
Àn
 == 1) {

4197 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4198 "em±yÑegex i¿£rvîÇamê\"%V\"", &
vÆue
[
i
]);

4199  
NGX_CONF_ERROR
;

4202 
vÆue
[
i
].
Àn
--;

4203 
vÆue
[
i
].
d©a
++;

4205 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4207 
rc
.
∑âîn
 = 
vÆue
[
i
];

4208 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4209 
rc
.
îr
.
d©a
 = 
îr°r
;

4211 
p
 = 
vÆue
[
i
].
d©a
;Ö < vÆue[i].d©®+ vÆue[i].
Àn
;Ö++) {

4212 i‡(*
p
 >= 'A' && *p <= 'Z') {

4213 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4218 
¢
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

4219 i‡(
¢
->
ªgex
 =
NULL
) {

4220  
NGX_CONF_ERROR
;

4223 
¢
->
«me
 = 
vÆue
[
i
];

4224 
cscf
->
ˇ±uªs
 = (
rc
.captures > 0);

4227 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4229 "ªquúe†PCREÜibøry", &
vÆue
[
i
]);

4231  
NGX_CONF_ERROR
;

4235  
NGX_CONF_OK
;

4236 
	}
}

4240 
	$ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4242 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4244 
ngx_°r_t
 *
vÆue
;

4245 
ngx_öt_t
 
Æüs
;

4246 
ngx_uöt_t
 
n
;

4247 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4249 
Æüs
 = (
cmd
->
«me
.
Àn
 == ("alias") - 1) ? 1 : 0;

4251 i‡(
˛cf
->
roŸ
.
d©a
) {

4253 i‡((
˛cf
->
Æüs
 != 0) ==álias) {

4254 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4256 &
cmd
->
«me
);

4258 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4261 &
cmd
->
«me
, 
˛cf
->
Æüs
 ? "alias" : "root");

4264  
NGX_CONF_ERROR
;

4267 i‡(
˛cf
->
«med
 && 
Æüs
) {

4268 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4272  
NGX_CONF_ERROR
;

4275 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4277 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$document_root")

4278 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${document_root}"))

4280 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4283 &
cmd
->
«me
);

4285  
NGX_CONF_ERROR
;

4288 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$realpath_root")

4289 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${realpath_root}"))

4291 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4294 &
cmd
->
«me
);

4296  
NGX_CONF_ERROR
;

4299 
˛cf
->
Æüs
 =álü†? clcf->
«me
.
Àn
 : 0;

4300 
˛cf
->
roŸ
 = 
vÆue
[1];

4302 i‡(!
Æüs
 && 
˛cf
->
roŸ
.
d©a
[˛cf->roŸ.
Àn
 - 1] == '/') {

4303 
˛cf
->
roŸ
.
Àn
--;

4306 i‡(
˛cf
->
roŸ
.
d©a
[0] != '$') {

4307 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
˛cf
->
roŸ
, 0Ë!
NGX_OK
) {

4308  
NGX_CONF_ERROR
;

4312 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
˛cf
->
roŸ
);

4314 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4315 
sc
.
v¨übÀs
 = 
n
;

4317 #i‡(
NGX_PCRE
)

4318 i‡(
Æüs
 && 
˛cf
->
ªgex
) {

4319 
n
 = 1;

4323 i‡(
n
) {

4324 
sc
.
cf
 = cf;

4325 
sc
.
sour˚
 = &
˛cf
->
roŸ
;

4326 
sc
.
Àngths
 = &
˛cf
->
roŸ_Àngths
;

4327 
sc
.
vÆues
 = &
˛cf
->
roŸ_vÆues
;

4328 
sc
.
com∂ëe_Àngths
 = 1;

4329 
sc
.
com∂ëe_vÆues
 = 1;

4331 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4332  
NGX_CONF_ERROR
;

4336  
NGX_CONF_OK
;

4337 
	}
}

4340 
ngx_hâp_mëhod_«me_t
 
	gngx_mëhods_«mes
[] = {

4341 { (
u_ch¨
 *Ë"GET", (
uöt32_t
Ë~
NGX_HTTP_GET
 },

4342 { (
u_ch¨
 *Ë"HEAD", (
uöt32_t
Ë~
NGX_HTTP_HEAD
 },

4343 { (
u_ch¨
 *Ë"POST", (
uöt32_t
Ë~
NGX_HTTP_POST
 },

4344 { (
u_ch¨
 *Ë"PUT", (
uöt32_t
Ë~
NGX_HTTP_PUT
 },

4345 { (
u_ch¨
 *Ë"DELETE", (
uöt32_t
Ë~
NGX_HTTP_DELETE
 },

4346 { (
u_ch¨
 *Ë"MKCOL", (
uöt32_t
Ë~
NGX_HTTP_MKCOL
 },

4347 { (
u_ch¨
 *Ë"COPY", (
uöt32_t
Ë~
NGX_HTTP_COPY
 },

4348 { (
u_ch¨
 *Ë"MOVE", (
uöt32_t
Ë~
NGX_HTTP_MOVE
 },

4349 { (
u_ch¨
 *Ë"OPTIONS", (
uöt32_t
Ë~
NGX_HTTP_OPTIONS
 },

4350 { (
u_ch¨
 *Ë"PROPFIND" , (
uöt32_t
Ë~
NGX_HTTP_PROPFIND
 },

4351 { (
u_ch¨
 *Ë"PROPPATCH", (
uöt32_t
Ë~
NGX_HTTP_PROPPATCH
 },

4352 { (
u_ch¨
 *Ë"LOCK", (
uöt32_t
Ë~
NGX_HTTP_LOCK
 },

4353 { (
u_ch¨
 *Ë"UNLOCK", (
uöt32_t
Ë~
NGX_HTTP_UNLOCK
 },

4354 { (
u_ch¨
 *Ë"PATCH", (
uöt32_t
Ë~
NGX_HTTP_PATCH
 },

4355 { 
NULL
, 0 }

4360 
	$ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4362 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
 = 
c⁄f
;

4364 *
rv
;

4365 *
mc⁄f
;

4366 
ngx_°r_t
 *
vÆue
;

4367 
ngx_uöt_t
 
i
;

4368 
ngx_c⁄f_t
 
ßve
;

4369 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4370 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

4371 
ngx_hâp_mëhod_«me_t
 *
«me
;

4372 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4374 i‡(
p˛cf
->
limô_ex˚±
) {

4378 
p˛cf
->
limô_ex˚±
 = 0xffffffff;

4380 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4382 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4383 
«me
 = 
ngx_mëhods_«mes
;Çame->name;Çame++) {

4385 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, 
«me
->name) == 0) {

4386 
p˛cf
->
limô_ex˚±
 &
«me
->
mëhod
;

4387 
√xt
;

4391 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4392 "övÆid mëhod \"%V\"", &
vÆue
[
i
]);

4393  
NGX_CONF_ERROR
;

4395 
√xt
:

4399 i‡(!(
p˛cf
->
limô_ex˚±
 & 
NGX_HTTP_GET
)) {

4400 
p˛cf
->
limô_ex˚±
 &(
uöt32_t
Ë~
NGX_HTTP_HEAD
;

4403 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4404 i‡(
˘x
 =
NULL
) {

4405  
NGX_CONF_ERROR
;

4408 
p˘x
 = 
cf
->
˘x
;

4409 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

4410 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

4412 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4413 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4414  
NGX_CONF_ERROR
;

4417 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

4418 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4422 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

4424 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4426 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4427 i‡(
mc⁄f
 =
NULL
) {

4428  
NGX_CONF_ERROR
;

4431 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

4436 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

4437 
p˛cf
->
limô_ex˚±_loc_c⁄f
 = 
˘x
->
loc_c⁄f
;

4438 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

4439 
˛cf
->
«me
 = 
p˛cf
->name;

4440 
˛cf
->
n⁄ame
 = 1;

4441 
˛cf
->
lmt_ex˝t
 = 1;

4443 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

4444  
NGX_CONF_ERROR
;

4447 
ßve
 = *
cf
;

4448 
cf
->
˘x
 = ctx;

4449 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LMT_CONF
;

4451 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4453 *
cf
 = 
ßve
;

4455  
rv
;

4456 
	}
}

4460 
	$ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4462 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4464 
ngx_°r_t
 *
vÆue
;

4466 i‡(
˛cf
->
dúe˘io
 !
NGX_CONF_UNSET
) {

4470 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4472 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4473 
˛cf
->
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

4474  
NGX_CONF_OK
;

4477 
˛cf
->
dúe˘io
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

4478 i‡(
˛cf
->
dúe˘io
 =(
off_t
Ë
NGX_ERROR
) {

4482  
NGX_CONF_OK
;

4483 
	}
}

4487 
	$ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4489 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4491 
u_ch¨
 *
p
;

4492 
ngx_öt_t
 
ovîwrôe
;

4493 
ngx_°r_t
 *
vÆue
, 
uri
, 
¨gs
;

4494 
ngx_uöt_t
 
i
, 
n
;

4495 
ngx_hâp_îr_∑ge_t
 *
îr
;

4496 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4497 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4499 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4500 
˛cf
->
îr‹_∑ges
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4501 (
ngx_hâp_îr_∑ge_t
));

4502 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4503  
NGX_CONF_ERROR
;

4507 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4509 
i
 = 
cf
->
¨gs
->
√…s
 - 2;

4511 i‡(
vÆue
[
i
].
d©a
[0] == '=') {

4512 i‡(
i
 == 1) {

4513 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4514 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4515  
NGX_CONF_ERROR
;

4518 i‡(
vÆue
[
i
].
Àn
 > 1) {

4519 
ovîwrôe
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[1], vÆue[i].
Àn
 - 1);

4521 i‡(
ovîwrôe
 =
NGX_ERROR
) {

4522 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4523 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4524  
NGX_CONF_ERROR
;

4528 
ovîwrôe
 = 0;

4531 
n
 = 2;

4534 
ovîwrôe
 = -1;

4535 
n
 = 1;

4538 
uri
 = 
vÆue
[
cf
->
¨gs
->
√…s
 - 1];

4540 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4542 
ccv
.
cf
 = cf;

4543 
ccv
.
vÆue
 = &
uri
;

4544 
ccv
.
com∂ex_vÆue
 = &
cv
;

4546 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4547  
NGX_CONF_ERROR
;

4550 
	`ngx_°r_nuŒ
(&
¨gs
);

4552 i‡(
cv
.
Àngths
 =
NULL
 && 
uri
.
Àn
 && uri.
d©a
[0] == '/') {

4553 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
uri
.
d©a
, '?');

4555 i‡(
p
) {

4556 
cv
.
vÆue
.
Àn
 = 
p
 - 
uri
.
d©a
;

4557 
cv
.
vÆue
.
d©a
 = 
uri
.data;

4558 
p
++;

4559 
¨gs
.
Àn
 = (
uri
.
d©a
 + uri.ÀnË- 
p
;

4560 
¨gs
.
d©a
 = 
p
;

4564 
i
 = 1; i < 
cf
->
¨gs
->
√…s
 - 
n
; i++) {

4565 
îr
 = 
	`ngx_¨øy_push
(
˛cf
->
îr‹_∑ges
);

4566 i‡(
îr
 =
NULL
) {

4567  
NGX_CONF_ERROR
;

4570 
îr
->
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

4572 i‡(
îr
->
°©us
 =
NGX_ERROR
 ||Érr->status == 499) {

4573 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4574 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4575  
NGX_CONF_ERROR
;

4578 i‡(
îr
->
°©us
 < 300 ||Érr->status > 599) {

4579 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4581 &
vÆue
[
i
]);

4582  
NGX_CONF_ERROR
;

4585 
îr
->
ovîwrôe
 = overwrite;

4587 i‡(
ovîwrôe
 == -1) {

4588 
îr
->
°©us
) {

4589 
NGX_HTTP_TO_HTTPS
:

4590 
NGX_HTTPS_CERT_ERROR
:

4591 
NGX_HTTPS_NO_CERT
:

4592 
îr
->
ovîwrôe
 = 
NGX_HTTP_BAD_REQUEST
;

4598 
îr
->
vÆue
 = 
cv
;

4599 
îr
->
¨gs
 =árgs;

4602  
NGX_CONF_OK
;

4603 
	}
}

4607 
	$ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4609 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4611 
ngx_°r_t
 *
vÆue
;

4612 
ngx_öt_t
 
code
;

4613 
ngx_uöt_t
 
i
, 
n
;

4614 
ngx_hâp_åy_fûe_t
 *
tf
;

4615 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4616 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

4618 i‡(
˛cf
->
åy_fûes
) {

4622 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

4624 
cmcf
->
åy_fûes
 = 1;

4626 
tf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, cf->
¨gs
->
√…s
 * (
ngx_hâp_åy_fûe_t
));

4627 i‡(
tf
 =
NULL
) {

4628  
NGX_CONF_ERROR
;

4631 
˛cf
->
åy_fûes
 = 
tf
;

4633 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4635 
i
 = 0; i < 
cf
->
¨gs
->
√…s
 - 1; i++) {

4637 
tf
[
i
].
«me
 = 
vÆue
[i + 1];

4639 i‡(
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
 - 1] == '/') {

4640 
tf
[
i
].
ã°_dú
 = 1;

4641 
tf
[
i
].
«me
.
Àn
--;

4642 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
] = '\0';

4645 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
tf
[
i
].
«me
);

4647 i‡(
n
) {

4648 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4650 
sc
.
cf
 = cf;

4651 
sc
.
sour˚
 = &
tf
[
i
].
«me
;

4652 
sc
.
Àngths
 = &
tf
[
i
].lengths;

4653 
sc
.
vÆues
 = &
tf
[
i
].values;

4654 
sc
.
v¨übÀs
 = 
n
;

4655 
sc
.
com∂ëe_Àngths
 = 1;

4656 
sc
.
com∂ëe_vÆues
 = 1;

4658 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4659  
NGX_CONF_ERROR
;

4664 
tf
[
i
].
«me
.
Àn
++;

4668 i‡(
tf
[
i
 - 1].
«me
.
d©a
[0] == '=') {

4670 
code
 = 
	`ngx_©oi
(
tf
[
i
 - 1].
«me
.
d©a
 + 1,Åf[ò- 1].«me.
Àn
 - 2);

4672 i‡(
code
 =
NGX_ERROR
 || code > 999) {

4673 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4675 
tf
[
i
 - 1].
«me
.
Àn
 - 1,Åf[ò- 1].«me.
d©a
);

4676  
NGX_CONF_ERROR
;

4679 
tf
[
i
].
code
 = code;

4682  
NGX_CONF_OK
;

4683 
	}
}

4687 
	$ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4689 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4691 
time_t
 
öa˘ive
;

4692 
ngx_°r_t
 *
vÆue
, 
s
;

4693 
ngx_öt_t
 
max
;

4694 
ngx_uöt_t
 
i
;

4696 i‡(
˛cf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

4700 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4702 
max
 = 0;

4703 
öa˘ive
 = 60;

4705 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4707 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

4709 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

4710 i‡(
max
 <= 0) {

4711 
Áûed
;

4717 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

4719 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

4720 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

4722 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

4723 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

4724 
Áûed
;

4730 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

4732 
˛cf
->
›í_fûe_ˇche
 = 
NULL
;

4737 
Áûed
:

4739 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4741 &
vÆue
[
i
]);

4742  
NGX_CONF_ERROR
;

4745 i‡(
˛cf
->
›í_fûe_ˇche
 =
NULL
) {

4746  
NGX_CONF_OK
;

4749 i‡(
max
 == 0) {

4750 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4752  
NGX_CONF_ERROR
;

4755 
˛cf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

4756 i‡(
˛cf
->
›í_fûe_ˇche
) {

4757  
NGX_CONF_OK
;

4760  
NGX_CONF_ERROR
;

4761 
	}
}

4765 
	$ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4767 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4769 
ngx_°r_t
 *
vÆue
, 
«me
;

4771 i‡(
˛cf
->
îr‹_log
) {

4775 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4777 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

4778 
	`ngx_°r_nuŒ
(&
«me
);

4781 
«me
 = 
vÆue
[1];

4784 
˛cf
->
îr‹_log
 = 
	`ngx_log_¸óã
(
cf
->
cy˛e
, &
«me
);

4785 i‡(
˛cf
->
îr‹_log
 =
NULL
) {

4786  
NGX_CONF_ERROR
;

4789 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4790 
˛cf
->
îr‹_log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

4791  
NGX_CONF_OK
;

4794  
	`ngx_log_£t_Àvñs
(
cf
, 
˛cf
->
îr‹_log
);

4795 
	}
}

4799 
	$ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4801 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4803 
ngx_°r_t
 *
vÆue
;

4805 i‡(
˛cf
->
kì∑live_timeout
 !
NGX_CONF_UNSET_MSEC
) {

4809 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4811 
˛cf
->
kì∑live_timeout
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

4813 i‡(
˛cf
->
kì∑live_timeout
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

4817 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4818  
NGX_CONF_OK
;

4821 
˛cf
->
kì∑live_hódî
 = 
	`ngx_∑r£_time
(&
vÆue
[2], 1);

4823 i‡(
˛cf
->
kì∑live_hódî
 =(
time_t
Ë
NGX_ERROR
) {

4827  
NGX_CONF_OK
;

4828 
	}
}

4832 
	$ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4834 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4836 i‡(
˛cf
->
öã∫Æ
 !
NGX_CONF_UNSET
) {

4840 
˛cf
->
öã∫Æ
 = 1;

4842  
NGX_CONF_OK
;

4843 
	}
}

4847 
	$ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4849 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4851 
ngx_°r_t
 *
vÆue
;

4853 i‡(
˛cf
->
ªsﬁvî
) {

4857 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4859 
˛cf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

4860 i‡(
˛cf
->
ªsﬁvî
 =
NULL
) {

4861  
NGX_CONF_ERROR
;

4864  
NGX_CONF_OK
;

4865 
	}
}

4868 #i‡(
NGX_HTTP_GZIP
)

4871 
	$ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4873 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4875 #i‡(
NGX_PCRE
)

4877 
ngx_°r_t
 *
vÆue
;

4878 
ngx_uöt_t
 
i
;

4879 
ngx_ªgex_ñt_t
 *
ª
;

4880 
ngx_ªgex_compûe_t
 
rc
;

4881 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4883 i‡(
˛cf
->
gzù_dißbÀ
 =
NGX_CONF_UNSET_PTR
) {

4884 
˛cf
->
gzù_dißbÀ
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

4885 (
ngx_ªgex_ñt_t
));

4886 i‡(
˛cf
->
gzù_dißbÀ
 =
NULL
) {

4887  
NGX_CONF_ERROR
;

4891 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4893 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4895 
rc
.
poﬁ
 = 
cf
->pool;

4896 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4897 
rc
.
îr
.
d©a
 = 
îr°r
;

4899 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4901 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

4902 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

4906 #i‡(
NGX_HTTP_DEGRADATION
)

4908 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

4909 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

4915 
ª
 = 
	`ngx_¨øy_push
(
˛cf
->
gzù_dißbÀ
);

4916 i‡(
ª
 =
NULL
) {

4917  
NGX_CONF_ERROR
;

4920 
rc
.
∑âîn
 = 
vÆue
[
i
];

4921 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4923 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

4924 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

4925  
NGX_CONF_ERROR
;

4928 
ª
->
ªgex
 = 
rc
.regex;

4929 
ª
->
«me
 = 
vÆue
[
i
].
d©a
;

4932  
NGX_CONF_OK
;

4935 
ngx_°r_t
 *
vÆue
;

4936 
ngx_uöt_t
 
i
;

4938 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4940 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4941 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

4942 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

4946 #i‡(
NGX_HTTP_DEGRADATION
)

4948 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

4949 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

4955 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4959  
NGX_CONF_ERROR
;

4962  
NGX_CONF_OK
;

4965 
	}
}

4970 #i‡(
NGX_HAVE_OPENAT
)

4973 
	$ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4975 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4977 
ngx_°r_t
 *
vÆue
;

4978 
ngx_uöt_t
 
i
;

4979 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4981 i‡(
˛cf
->
dißbÀ_symlöks
 !
NGX_CONF_UNSET_UINT
) {

4985 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4987 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4989 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

4990 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

4994 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "if_not_owner") == 0) {

4995 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_NOTOWNER
;

4999 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "on") == 0) {

5000 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_ON
;

5004 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "from=", 5) == 0) {

5005 
vÆue
[
i
].
Àn
 -= 5;

5006 
vÆue
[
i
].
d©a
 += 5;

5008 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

5010 
ccv
.
cf
 = cf;

5011 
ccv
.
vÆue
 = &vÆue[
i
];

5012 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

5013 (
ngx_hâp_com∂ex_vÆue_t
));

5014 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

5015  
NGX_CONF_ERROR
;

5018 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

5019  
NGX_CONF_ERROR
;

5022 
˛cf
->
dißbÀ_symlöks_‰om
 = 
ccv
.
com∂ex_vÆue
;

5027 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5028 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

5029  
NGX_CONF_ERROR
;

5032 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_CONF_UNSET_UINT
) {

5033 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5036 &
cmd
->
«me
);

5037  
NGX_CONF_ERROR
;

5040 i‡(
cf
->
¨gs
->
√…s
 == 2) {

5041 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NULL
;

5042  
NGX_CONF_OK
;

5045 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NGX_CONF_UNSET_PTR
) {

5046 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5048 &
vÆue
[1], &value[2]);

5049  
NGX_CONF_ERROR
;

5052 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

5053 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5055  
NGX_CONF_ERROR
;

5058  
NGX_CONF_OK
;

5059 
	}
}

5065 
	$ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5067 #i‡(
NGX_FREEBSD
)

5068 
ssize_t
 *
≈
 = 
d©a
;

5070 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

5071 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5074 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

5076  
NGX_CONF_ERROR
;

5079 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

5080 
ssize_t
 *
≈
 = 
d©a
;

5082 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

5085 *
≈
 = 0;

5089  
NGX_CONF_OK
;

5090 
	}
}

5094 
	$ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5096 
size_t
 *
•
 = 
d©a
;

5098 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

5099 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5101 
NGX_MIN_POOL_SIZE
);

5102  
NGX_CONF_ERROR
;

5105 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

5106 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5108 
NGX_POOL_ALIGNMENT
);

5109  
NGX_CONF_ERROR
;

5112  
NGX_CONF_OK
;

5113 
	}
}

	@src/http/ngx_http_core_module.h

8 #i‚de‡
_NGX_HTTP_CORE_H_INCLUDED_


9 
	#_NGX_HTTP_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_GZIP_PROXIED_OFF
 0x0002

	)

18 
	#NGX_HTTP_GZIP_PROXIED_EXPIRED
 0x0004

	)

19 
	#NGX_HTTP_GZIP_PROXIED_NO_CACHE
 0x0008

	)

20 
	#NGX_HTTP_GZIP_PROXIED_NO_STORE
 0x0010

	)

21 
	#NGX_HTTP_GZIP_PROXIED_PRIVATE
 0x0020

	)

22 
	#NGX_HTTP_GZIP_PROXIED_NO_LM
 0x0040

	)

23 
	#NGX_HTTP_GZIP_PROXIED_NO_ETAG
 0x0080

	)

24 
	#NGX_HTTP_GZIP_PROXIED_AUTH
 0x0100

	)

25 
	#NGX_HTTP_GZIP_PROXIED_ANY
 0x0200

	)

28 
	#NGX_HTTP_AIO_OFF
 0

	)

29 
	#NGX_HTTP_AIO_ON
 1

	)

30 
	#NGX_HTTP_AIO_SENDFILE
 2

	)

33 
	#NGX_HTTP_SATISFY_ALL
 0

	)

34 
	#NGX_HTTP_SATISFY_ANY
 1

	)

37 
	#NGX_HTTP_LINGERING_OFF
 0

	)

38 
	#NGX_HTTP_LINGERING_ON
 1

	)

39 
	#NGX_HTTP_LINGERING_ALWAYS
 2

	)

42 
	#NGX_HTTP_IMS_OFF
 0

	)

43 
	#NGX_HTTP_IMS_EXACT
 1

	)

44 
	#NGX_HTTP_IMS_BEFORE
 2

	)

47 
	#NGX_HTTP_KEEPALIVE_DISABLE_NONE
 0x0002

	)

48 
	#NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 0x0004

	)

49 
	#NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 0x0008

	)

52 
ngx_hâp_loˇti⁄_åì_node_s
 
	tngx_hâp_loˇti⁄_åì_node_t
;

53 
ngx_hâp_c‹e_loc_c⁄f_s
 
	tngx_hâp_c‹e_loc_c⁄f_t
;

58 
sockaddr
 
	msockaddr
;

59 
sockaddr_ö
 
	msockaddr_ö
;

60 #i‡(
NGX_HAVE_INET6
)

61 
sockaddr_ö6
 
	msockaddr_ö6
;

63 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

64 
sockaddr_un
 
	msockaddr_un
;

66 #i‡(
NGX_HAVE_SERVAL
)

67 
sockaddr_sv
 
	msockaddr_sv
;

69 
u_ch¨
 
	msockaddr_d©a
[
NGX_SOCKADDRLEN
];

70 } 
	mu
;

72 
sockÀn_t
 
	msockÀn
;

74 
	m£t
:1;

75 
	mdeÁu…_£rvî
:1;

76 
	mböd
:1;

77 
	mwûdˇrd
:1;

78 #i‡(
NGX_HTTP_SSL
)

79 
	ms¶
:1;

81 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

82 
	mùv6⁄ly
:2;

84 
	mso_kì∑live
:2;

86 
	mbacklog
;

87 
	mrcvbuf
;

88 
	m¢dbuf
;

89 #i‡(
NGX_HAVE_SETFIB
)

90 
	m£tfib
;

92 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

93 
	mt˝_kìpidÀ
;

94 
	mt˝_kìpötvl
;

95 
	mt˝_kìp˙t
;

98 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

99 *
	mac˚±_fûãr
;

101 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

102 
ngx_uöt_t
 
	mde„ºed_ac˚±
;

105 
u_ch¨
 
	maddr
[
NGX_SOCKADDR_STRLEN
 + 1];

106 } 
	tngx_hâp_li°í_›t_t
;

110 
	mNGX_HTTP_POST_READ_PHASE
 = 0,

112 
	mNGX_HTTP_SERVER_REWRITE_PHASE
,

114 
	mNGX_HTTP_FIND_CONFIG_PHASE
,

115 
	mNGX_HTTP_REWRITE_PHASE
,

116 
	mNGX_HTTP_POST_REWRITE_PHASE
,

118 
	mNGX_HTTP_PREACCESS_PHASE
,

120 
	mNGX_HTTP_ACCESS_PHASE
,

121 
	mNGX_HTTP_POST_ACCESS_PHASE
,

123 
	mNGX_HTTP_TRY_FILES_PHASE
,

124 
	mNGX_HTTP_CONTENT_PHASE
,

126 
	mNGX_HTTP_LOG_PHASE


127 } 
	tngx_hâp_pha£s
;

129 
ngx_hâp_pha£_h™dÀr_s
 
	tngx_hâp_pha£_h™dÀr_t
;

131 
	$ngx_öt_t
 (*
	tngx_hâp_pha£_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

132 
	tngx_hâp_pha£_h™dÀr_t
 *
	tph
);

134 
	sngx_hâp_pha£_h™dÀr_s
 {

135 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

136 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

137 
ngx_uöt_t
 
√xt
;

142 
ngx_hâp_pha£_h™dÀr_t
 *
h™dÀrs
;

143 
ngx_uöt_t
 
£rvî_ªwrôe_ödex
;

144 
ngx_uöt_t
 
loˇti⁄_ªwrôe_ödex
;

145 } 
	tngx_hâp_pha£_ígöe_t
;

149 
ngx_¨øy_t
 
h™dÀrs
;

150 } 
	tngx_hâp_pha£_t
;

154 
ngx_¨øy_t
 
£rvîs
;

156 
ngx_hâp_pha£_ígöe_t
 
pha£_ígöe
;

158 
ngx_hash_t
 
hódîs_ö_hash
;

160 
ngx_hash_t
 
v¨übÀs_hash
;

162 
ngx_¨øy_t
 
v¨übÀs
;

163 
ngx_uöt_t
 
nˇ±uªs
;

165 
ngx_uöt_t
 
£rvî_«mes_hash_max_size
;

166 
ngx_uöt_t
 
£rvî_«mes_hash_buckë_size
;

168 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

169 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

171 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

173 
ngx_¨øy_t
 *
p‹ts
;

175 
ngx_uöt_t
 
åy_fûes
;

177 
ngx_hâp_pha£_t
 
pha£s
[
NGX_HTTP_LOG_PHASE
 + 1];

178 } 
	tngx_hâp_c‹e_maö_c⁄f_t
;

183 
ngx_¨øy_t
 
£rvî_«mes
;

186 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

188 
ngx_°r_t
 
£rvî_«me
;

190 
size_t
 
c⁄√˘i⁄_poﬁ_size
;

191 
size_t
 
ªque°_poﬁ_size
;

192 
size_t
 
˛õ¡_hódî_buf„r_size
;

194 
ngx_bufs_t
 
œrge_˛õ¡_hódî_buf„rs
;

196 
ngx_m£c_t
 
˛õ¡_hódî_timeout
;

198 
ngx_Êag_t
 
ign‹e_övÆid_hódîs
;

199 
ngx_Êag_t
 
mîge_¶ashes
;

200 
ngx_Êag_t
 
undîsc‹es_ö_hódîs
;

202 
li°í
:1;

203 #i‡(
NGX_PCRE
)

204 
ˇ±uªs
:1;

207 
ngx_hâp_c‹e_loc_c⁄f_t
 **
«med_loˇti⁄s
;

208 } 
	tngx_hâp_c‹e_§v_c⁄f_t
;

216 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

218 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

220 #i‡(
NGX_HTTP_SSL
)

221 
ngx_uöt_t
 
s¶
;

223 } 
	tngx_hâp_addr_c⁄f_t
;

227 
ö_addr_t
 
addr
;

228 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

229 } 
	tngx_hâp_ö_addr_t
;

232 #i‡(
NGX_HAVE_INET6
)

235 
ö6_addr
 
addr6
;

236 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

237 } 
	tngx_hâp_ö6_addr_t
;

241 #i‡(
NGX_HAVE_SERVAL
)

244 
£rvi˚_id
 
§vid
;

245 
u_ch¨
 
¥efix_bôs
;

246 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

247 } 
	tngx_hâp_£rvÆ_addr_t
;

254 *
addrs
;

255 
ngx_uöt_t
 
«ddrs
;

256 } 
	tngx_hâp_p‹t_t
;

260 
ngx_öt_t
 
Ámûy
;

261 
ö_p‹t_t
 
p‹t
;

262 
ngx_¨øy_t
 
addrs
;

263 } 
	tngx_hâp_c⁄f_p‹t_t
;

267 
ngx_hâp_li°í_›t_t
 
›t
;

269 
ngx_hash_t
 
hash
;

270 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

271 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

273 #i‡(
NGX_PCRE
)

274 
ngx_uöt_t
 
ƒegex
;

275 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

279 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

280 
ngx_¨øy_t
 
£rvîs
;

281 } 
	tngx_hâp_c⁄f_addr_t
;

284 
	sngx_hâp_£rvî_«me_s
 {

285 #i‡(
NGX_PCRE
)

286 
ngx_hâp_ªgex_t
 *
ªgex
;

288 
ngx_hâp_c‹e_§v_c⁄f_t
 *
£rvî
;

289 
ngx_°r_t
 
«me
;

294 
ngx_öt_t
 
°©us
;

295 
ngx_öt_t
 
ovîwrôe
;

296 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

297 
ngx_°r_t
 
¨gs
;

298 } 
	tngx_hâp_îr_∑ge_t
;

302 
ngx_¨øy_t
 *
Àngths
;

303 
ngx_¨øy_t
 *
vÆues
;

304 
ngx_°r_t
 
«me
;

306 
code
:10;

307 
ã°_dú
:1;

308 } 
	tngx_hâp_åy_fûe_t
;

311 
	sngx_hâp_c‹e_loc_c⁄f_s
 {

312 
ngx_°r_t
 
«me
;

314 #i‡(
NGX_PCRE
)

315 
ngx_hâp_ªgex_t
 *
ªgex
;

318 
n⁄ame
:1;

319 
lmt_ex˝t
:1;

320 
«med
:1;

322 
exa˘_m©ch
:1;

323 
n‹egex
:1;

325 
auto_ªdúe˘
:1;

326 #i‡(
NGX_HTTP_GZIP
)

327 
gzù_dißbÀ_msõ6
:2;

328 #i‡(
NGX_HTTP_DEGRADATION
)

329 
gzù_dißbÀ_degød©i⁄
:2;

333 
ngx_hâp_loˇti⁄_åì_node_t
 *
°©ic_loˇti⁄s
;

334 #i‡(
NGX_PCRE
)

335 
ngx_hâp_c‹e_loc_c⁄f_t
 **
ªgex_loˇti⁄s
;

339 **
loc_c⁄f
;

341 
uöt32_t
 
limô_ex˚±
;

342 **
limô_ex˚±_loc_c⁄f
;

344 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

347 
size_t
 
Æüs
;

348 
ngx_°r_t
 
roŸ
;

349 
ngx_°r_t
 
po°_a˘i⁄
;

351 
ngx_¨øy_t
 *
roŸ_Àngths
;

352 
ngx_¨øy_t
 *
roŸ_vÆues
;

354 
ngx_¨øy_t
 *
ty≥s
;

355 
ngx_hash_t
 
ty≥s_hash
;

356 
ngx_°r_t
 
deÁu…_ty≥
;

358 
off_t
 
˛õ¡_max_body_size
;

359 
off_t
 
dúe˘io
;

360 
off_t
 
dúe˘io_Æignmít
;

362 
size_t
 
˛õ¡_body_buf„r_size
;

363 
size_t
 
£nd_low©
;

364 
size_t
 
po°p⁄e_ouçut
;

365 
size_t
 
limô_øã
;

366 
size_t
 
limô_øã_a·î
;

367 
size_t
 
£ndfûe_max_chunk
;

368 
size_t
 
ªad_ahód
;

370 
ngx_m£c_t
 
˛õ¡_body_timeout
;

371 
ngx_m£c_t
 
£nd_timeout
;

372 
ngx_m£c_t
 
kì∑live_timeout
;

373 
ngx_m£c_t
 
lögîög_time
;

374 
ngx_m£c_t
 
lögîög_timeout
;

375 
ngx_m£c_t
 
ªsﬁvî_timeout
;

377 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

379 
time_t
 
kì∑live_hódî
;

381 
ngx_uöt_t
 
kì∑live_ªque°s
;

382 
ngx_uöt_t
 
kì∑live_dißbÀ
;

383 
ngx_uöt_t
 
ßtisfy
;

384 
ngx_uöt_t
 
lögîög_˛o£
;

385 
ngx_uöt_t
 
if_modifõd_sö˚
;

386 
ngx_uöt_t
 
max_ønges
;

387 
ngx_uöt_t
 
˛õ¡_body_ö_fûe_⁄ly
;

389 
ngx_Êag_t
 
˛õ¡_body_ö_sögÀ_buf„r
;

391 
ngx_Êag_t
 
öã∫Æ
;

392 
ngx_Êag_t
 
£ndfûe
;

393 #i‡(
NGX_HAVE_FILE_AIO
)

394 
ngx_Êag_t
 
aio
;

396 
ngx_Êag_t
 
t˝_n›ush
;

397 
ngx_Êag_t
 
t˝_nodñay
;

398 
ngx_Êag_t
 
ª£t_timedout_c⁄√˘i⁄
;

399 
ngx_Êag_t
 
£rvî_«me_ö_ªdúe˘
;

400 
ngx_Êag_t
 
p‹t_ö_ªdúe˘
;

401 
ngx_Êag_t
 
msõ_∑ddög
;

402 
ngx_Êag_t
 
msõ_ª‰esh
;

403 
ngx_Êag_t
 
log_nŸ_found
;

404 
ngx_Êag_t
 
log_subªque°
;

405 
ngx_Êag_t
 
ªcursive_îr‹_∑ges
;

406 
ngx_Êag_t
 
£rvî_tokís
;

407 
ngx_Êag_t
 
chunked_å™s„r_ícodög
;

409 #i‡(
NGX_HTTP_GZIP
)

410 
ngx_Êag_t
 
gzù_v¨y
;

412 
ngx_uöt_t
 
gzù_hâp_vîsi⁄
;

413 
ngx_uöt_t
 
gzù_¥oxõd
;

415 #i‡(
NGX_PCRE
)

416 
ngx_¨øy_t
 *
gzù_dißbÀ
;

420 #i‡(
NGX_HAVE_OPENAT
)

421 
ngx_uöt_t
 
dißbÀ_symlöks
;

422 
ngx_hâp_com∂ex_vÆue_t
 *
dißbÀ_symlöks_‰om
;

425 
ngx_¨øy_t
 *
îr‹_∑ges
;

426 
ngx_hâp_åy_fûe_t
 *
åy_fûes
;

428 
ngx_∑th_t
 *
˛õ¡_body_ãmp_∑th
;

430 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

431 
time_t
 
›í_fûe_ˇche_vÆid
;

432 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

433 
ngx_Êag_t
 
›í_fûe_ˇche_îr‹s
;

434 
ngx_Êag_t
 
›í_fûe_ˇche_evíts
;

436 
ngx_log_t
 *
îr‹_log
;

438 
ngx_uöt_t
 
ty≥s_hash_max_size
;

439 
ngx_uöt_t
 
ty≥s_hash_buckë_size
;

441 
ngx_queue_t
 *
loˇti⁄s
;

444 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev_loˇti⁄
;

450 
ngx_queue_t
 
queue
;

451 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

452 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

453 
ngx_°r_t
 *
«me
;

454 
u_ch¨
 *
fûe_«me
;

455 
ngx_uöt_t
 
löe
;

456 
ngx_queue_t
 
li°
;

457 } 
	tngx_hâp_loˇti⁄_queue_t
;

460 
	sngx_hâp_loˇti⁄_åì_node_s
 {

461 
ngx_hâp_loˇti⁄_åì_node_t
 *
À·
;

462 
ngx_hâp_loˇti⁄_åì_node_t
 *
right
;

463 
ngx_hâp_loˇti⁄_åì_node_t
 *
åì
;

465 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

466 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

468 
u_ch¨
 
auto_ªdúe˘
;

469 
u_ch¨
 
Àn
;

470 
u_ch¨
 
«me
[1];

474 
	`ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
);

475 
ngx_öt_t
 
	`ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
,

476 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

477 
ngx_öt_t
 
	`ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

478 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

479 
ngx_öt_t
 
	`ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

480 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

481 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

482 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

483 
ngx_öt_t
 
	`ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

484 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

485 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

486 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

487 
ngx_öt_t
 
	`ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

488 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

489 
ngx_öt_t
 
	`ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

490 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

493 *
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
);

494 
ngx_öt_t
 
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
);

495 
	`ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
);

496 
ngx_öt_t
 
	`ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

497 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
);

498 
u_ch¨
 *
	`ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

499 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
);

500 
ngx_öt_t
 
	`ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
);

501 #i‡(
NGX_HTTP_GZIP
)

502 
ngx_öt_t
 
	`ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
);

506 
ngx_öt_t
 
	`ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

507 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
§
,

508 
ngx_hâp_po°_subªque°_t
 *
p§
, 
ngx_uöt_t
 
Êags
);

509 
ngx_öt_t
 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

510 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
);

511 
ngx_öt_t
 
	`ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

514 
ngx_hâp_˛ónup_t
 *
	`ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
);

517 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_hódî_fûãr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

518 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_body_fûãr_±
)

519 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

522 
ngx_öt_t
 
	`ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

523 
ngx_öt_t
 
	`ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

526 
ngx_öt_t
 
	`ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

527 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
);

529 
ngx_öt_t
 
	`ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

530 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
, 
ªcursive
);

533 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

535 
ngx_uöt_t
 
ngx_hâp_max_moduÀ
;

537 
ngx_°r_t
 
ngx_hâp_c‹e_gë_mëhod
;

540 
	#ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
) \

542 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1; \

543 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) { \

544 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0; \

545 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
; \

546 
	}

	)
}

548 
	#ngx_hâp_˛ór_ac˚±_ønges
(
r
) \

550 
r
->
Ælow_ønges
 = 0; \

551 i‡(
r
->
hódîs_out
.
ac˚±_ønges
) { \

552 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 0; \

553 
r
->
hódîs_out
.
ac˚±_ønges
 = 
NULL
; \

554 }

	)

556 
	#ngx_hâp_˛ór_œ°_modifõd
(
r
) \

558 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1; \

559 i‡(
r
->
hódîs_out
.
œ°_modifõd
) { \

560 
r
->
hódîs_out
.
œ°_modifõd
->
hash
 = 0; \

561 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
; \

562 }

	)

564 
	#ngx_hâp_˛ór_loˇti⁄
(
r
) \

566 i‡(
r
->
hódîs_out
.
loˇti⁄
) { \

567 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0; \

568 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
; \

569 }

	)

	@src/http/ngx_http_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

14 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_ˇche_t
 *
c
);

16 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
);

17 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_hâp_ˇche_t
 *
c
);

19 
ssize_t
 
ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
,

20 
ngx_hâp_ˇche_t
 *
c
);

21 #i‡(
NGX_HAVE_FILE_AIO
)

22 
ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

24 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

25 
ngx_hâp_ˇche_t
 *
c
);

26 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_∑th_t
 *
∑th
);

28 
ngx_hâp_fûe_ˇche_node_t
 *

29 
ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
);

30 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

31 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

32 
ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
);

33 
time_t
 
ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

34 
time_t
 
ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

35 
ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

36 
ngx_queue_t
 *
q
, 
u_ch¨
 *
«me
);

37 
ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

38 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
,

39 
ngx_°r_t
 *
∑th
);

40 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
,

41 
ngx_°r_t
 *
∑th
);

42 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
,

43 
ngx_°r_t
 *
∑th
);

44 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

45 
ngx_hâp_ˇche_t
 *
c
);

46 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
,

47 
ngx_°r_t
 *
∑th
);

50 
ngx_°r_t
 
	gngx_hâp_ˇche_°©us
[] = {

51 
ngx_°rög
("MISS"),

52 
ngx_°rög
("BYPASS"),

53 
ngx_°rög
("EXPIRED"),

54 
ngx_°rög
("STALE"),

55 
ngx_°rög
("UPDATING"),

56 
ngx_°rög
("HIT")

60 
u_ch¨
 
	gngx_hâp_fûe_ˇche_key
[] = { 
LF
, 'K', 'E', 'Y', ':', ' ' };

63 
ngx_öt_t


64 
	$ngx_hâp_fûe_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

66 
ngx_hâp_fûe_ˇche_t
 *
oˇche
 = 
d©a
;

68 
size_t
 
Àn
;

69 
ngx_uöt_t
 
n
;

70 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

72 
ˇche
 = 
shm_z⁄e
->
d©a
;

74 i‡(
oˇche
) {

75 i‡(
	`ngx_°rcmp
(
ˇche
->
∑th
->
«me
.
d©a
, 
oˇche
->path->name.data) != 0) {

76 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

79 &
shm_z⁄e
->
shm
.
«me
, &
ˇche
->
∑th
->name,

80 &
oˇche
->
∑th
->
«me
);

82  
NGX_ERROR
;

85 
n
 = 0;Ç < 3;Ç++) {

86 i‡(
ˇche
->
∑th
->
Àvñ
[
n
] !
oˇche
->path->level[n]) {

87 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

89 &
shm_z⁄e
->
shm
.
«me
);

90  
NGX_ERROR
;

94 
ˇche
->
sh
 = 
oˇche
->sh;

96 
ˇche
->
shpoﬁ
 = 
oˇche
->shpool;

97 
ˇche
->
bsize
 = 
oˇche
->bsize;

99 
ˇche
->
max_size
 /ˇche->
bsize
;

101 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

102 
ˇche
->
∑th
->
lﬂdî
 = 
NULL
;

105  
NGX_OK
;

108 
ˇche
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

110 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

111 
ˇche
->
sh
 = cache->
shpoﬁ
->
d©a
;

112 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

114  
NGX_OK
;

117 
ˇche
->
sh
 = 
	`ngx_¶ab_Æloc
(ˇche->
shpoﬁ
, (
ngx_hâp_fûe_ˇche_sh_t
));

118 i‡(
ˇche
->
sh
 =
NULL
) {

119  
NGX_ERROR
;

122 
ˇche
->
shpoﬁ
->
d©a
 = cache->
sh
;

124 
	`ngx_rbåì_öô
(&
ˇche
->
sh
->
rbåì
, &ˇche->sh->
£¡öñ
,

125 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
);

127 
	`ngx_queue_öô
(&
ˇche
->
sh
->
queue
);

129 
ˇche
->
sh
->
cﬁd
 = 1;

130 
ˇche
->
sh
->
lﬂdög
 = 0;

131 
ˇche
->
sh
->
size
 = 0;

133 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

135 
ˇche
->
max_size
 /ˇche->
bsize
;

137 
Àn
 = (" i¿ˇchêkey†z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

139 
ˇche
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(ˇche->shpoﬁ, 
Àn
);

140 i‡(
ˇche
->
shpoﬁ
->
log_˘x
 =
NULL
) {

141  
NGX_ERROR
;

144 
	`ngx_•rötf
(
ˇche
->
shpoﬁ
->
log_˘x
, " in cache keys zone \"%V\"%Z",

145 &
shm_z⁄e
->
shm
.
«me
);

147  
NGX_OK
;

148 
	}
}

151 
ngx_öt_t


152 
	$ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
)

154 
ngx_hâp_ˇche_t
 *
c
;

156 
c
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ˇche_t
));

157 i‡(
c
 =
NULL
) {

158  
NGX_ERROR
;

161 i‡(
	`ngx_¨øy_öô
(&
c
->
keys
, 
r
->
poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
) {

162  
NGX_ERROR
;

165 
r
->
ˇche
 = 
c
;

166 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

167 
c
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

176 
ngx_hâp_ˇche_t
 *
c
;

177 
ngx_poﬁ_˛ónup_t
 *
˛n
;

178 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

180 
c
 = 
r
->
ˇche
;

181 
ˇche
 = 
c
->
fûe_ˇche
;

183 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

184 i‡(
˛n
 =
NULL
) {

185  
NGX_ERROR
;

188 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

189 
˛n
->
d©a
 = 
c
;

191 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

192  
NGX_ERROR
;

195 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

196  
NGX_ERROR
;

199  
NGX_OK
;

200 
	}
}

204 
	$ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

206 
size_t
 
Àn
;

207 
ngx_°r_t
 *
key
;

208 
ngx_uöt_t
 
i
;

209 
ngx_md5_t
 
md5
;

210 
ngx_hâp_ˇche_t
 *
c
;

212 
c
 = 
r
->
ˇche
;

214 
Àn
 = 0;

216 
	`ngx_¸c32_öô
(
c
->
¸c32
);

217 
	`ngx_md5_öô
(&
md5
);

219 
key
 = 
c
->
keys
.
ñts
;

220 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

222 "hâ∞ˇchêkey: \"%V\"", &
key
[
i
]);

224 
Àn
 +
key
[
i
].len;

226 
	`ngx_¸c32_upd©e
(&
c
->
¸c32
, 
key
[
i
].
d©a
, key[i].
Àn
);

227 
	`ngx_md5_upd©e
(&
md5
, 
key
[
i
].
d©a
, key[i].
Àn
);

230 
c
->
hódî_°¨t
 = (
ngx_hâp_fûe_ˇche_hódî_t
)

231 + (
ngx_hâp_fûe_ˇche_key
Ë+ 
Àn
 + 1;

233 
	`ngx_¸c32_föÆ
(
c
->
¸c32
);

234 
	`ngx_md5_föÆ
(
c
->
key
, &
md5
);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
)

241 
ngx_öt_t
 
rc
, 
rv
;

242 
ngx_uöt_t
 
cﬁd
, 
ã°
;

243 
ngx_hâp_ˇche_t
 *
c
;

244 
ngx_poﬁ_˛ónup_t
 *
˛n
;

245 
ngx_›í_fûe_öfo_t
 
of
;

246 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

247 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

249 
c
 = 
r
->
ˇche
;

251 i‡(
c
->
waôög
) {

252  
NGX_AGAIN
;

255 i‡(
c
->
buf
) {

256  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

259 
ˇche
 = 
c
->
fûe_ˇche
;

261 i‡(
c
->
node
 =
NULL
) {

262 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

263 i‡(
˛n
 =
NULL
) {

264  
NGX_ERROR
;

267 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

268 
˛n
->
d©a
 = 
c
;

271 
rc
 = 
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
);

273 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

274 "hâ∞fûêˇchêexi°s: %òe:%d", 
rc
, 
c
->
exi°s
);

276 i‡(
rc
 =
NGX_ERROR
) {

277  
rc
;

280 i‡(
rc
 =
NGX_AGAIN
) {

281  
NGX_HTTP_CACHE_SCARCE
;

284 
cﬁd
 = 
ˇche
->
sh
->cold;

286 i‡(
rc
 =
NGX_OK
) {

288 i‡(
c
->
îr‹
) {

289  
c
->
îr‹
;

292 
c
->
ãmp_fûe
 = 1;

293 
ã°
 = 
c
->
exi°s
 ? 1 : 0;

294 
rv
 = 
NGX_DECLINED
;

298 i‡(
c
->
mö_u£s
 > 1) {

300 i‡(!
cﬁd
) {

301  
NGX_HTTP_CACHE_SCARCE
;

304 
ã°
 = 1;

305 
rv
 = 
NGX_HTTP_CACHE_SCARCE
;

308 
c
->
ãmp_fûe
 = 1;

309 
ã°
 = 
cﬁd
 ? 1 : 0;

310 
rv
 = 
NGX_DECLINED
;

314 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

315  
NGX_ERROR
;

318 i‡(!
ã°
) {

319 
d⁄e
;

322 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

324 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

326 
of
.
uniq
 = 
c
->uniq;

327 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

328 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

329 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

330 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

331 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

333 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
c
->
fûe
.
«me
, &
of
, 
r
->
poﬁ
)

334 !
NGX_OK
)

336 
of
.
îr
) {

339  
NGX_ERROR
;

341 
NGX_ENOENT
:

342 
NGX_ENOTDIR
:

343 
d⁄e
;

346 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

347 
ngx_›í_fûe_n
 " \"%s\" faûed", 
c
->
fûe
.
«me
.
d©a
);

348  
NGX_ERROR
;

352 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

353 "hâ∞fûêˇchêfd: %d", 
of
.
fd
);

355 
c
->
fûe
.
fd
 = 
of
.fd;

356 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

357 
c
->
uniq
 = 
of
.uniq;

358 
c
->
Àngth
 = 
of
.
size
;

359 
c
->
fs_size
 = (
of
.fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

361 
c
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, c->
body_°¨t
);

362 i‡(
c
->
buf
 =
NULL
) {

363  
NGX_ERROR
;

366  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

368 
d⁄e
:

370 i‡(
rv
 =
NGX_DECLINED
) {

371  
	`ngx_hâp_fûe_ˇche_lock
(
r
, 
c
);

374  
rv
;

375 
	}
}

378 
ngx_öt_t


379 
	$ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

381 
ngx_m£c_t
 
now
, 
timî
;

382 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

384 i‡(!
c
->
lock
) {

385  
NGX_DECLINED
;

388 
ˇche
 = 
c
->
fûe_ˇche
;

390 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

392 i‡(!
c
->
node
->
upd©ög
) {

393 
c
->
node
->
upd©ög
 = 1;

394 
c
->
upd©ög
 = 1;

397 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

399 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

401 
c
->
upd©ög
, c->
waô_time
);

403 i‡(
c
->
upd©ög
) {

404  
NGX_DECLINED
;

407 
c
->
waôög
 = 1;

409 
now
 = 
ngx_cuºít_m£c
;

411 i‡(
c
->
waô_time
 == 0) {

412 
c
->
waô_time
 = 
now
 + c->
lock_timeout
;

414 
c
->
waô_evít
.
h™dÀr
 = 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
;

415 
c
->
waô_evít
.
d©a
 = 
r
;

416 
c
->
waô_evít
.
log
 = 
r
->
c⁄√˘i⁄
->log;

419 
timî
 = 
c
->
waô_time
 - 
now
;

421 
	`ngx_add_timî
(&
c
->
waô_evít
, (
timî
 > 500) ? 500 :Åimer);

423 
r
->
maö
->
blocked
++;

425  
NGX_AGAIN
;

426 
	}
}

430 
	$ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
)

432 
ngx_uöt_t
 
waô
;

433 
ngx_m£c_t
 
timî
;

434 
ngx_hâp_ˇche_t
 *
c
;

435 
ngx_hâp_ªque°_t
 *
r
;

436 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

438 
r
 = 
ev
->
d©a
;

439 
c
 = 
r
->
ˇche
;

441 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

443 
c
->
waô_time
, 
ngx_cuºít_m£c
);

445 
timî
 = 
c
->
waô_time
 - 
ngx_cuºít_m£c
;

447 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

448 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

450 
c
->
lock
 = 0;

451 
wakeup
;

454 
ˇche
 = 
c
->
fûe_ˇche
;

455 
waô
 = 0;

457 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

459 i‡(
c
->
node
->
upd©ög
) {

460 
waô
 = 1;

463 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

465 i‡(
waô
) {

466 
	`ngx_add_timî
(
ev
, (
timî
 > 500) ? 500 :Åimer);

470 
wakeup
:

472 
c
->
waôög
 = 0;

473 
r
->
maö
->
blocked
--;

474 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

481 
time_t
 
now
;

482 
ssize_t
 
n
;

483 
ngx_öt_t
 
rc
;

484 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

485 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
;

487 
n
 = 
	`ngx_hâp_fûe_ˇche_aio_ªad
(
r
, 
c
);

489 i‡(
n
 < 0) {

490  
n
;

493 i‡((
size_t
Ë
n
 < 
c
->
hódî_°¨t
) {

494 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

495 "ˇchêfûê\"%s\" i†toÿsmÆl", 
c
->
fûe
.
«me
.
d©a
);

496  
NGX_DECLINED
;

499 
h
 = (
ngx_hâp_fûe_ˇche_hódî_t
 *Ë
c
->
buf
->
pos
;

501 i‡(
h
->
¸c32
 !
c
->crc32) {

502 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

503 "ˇchêfûê\"%s\" ha†md5 cﬁlisi⁄", 
c
->
fûe
.
«me
.
d©a
);

504  
NGX_DECLINED
;

507 i‡(
h
->
body_°¨t
 > 
c
->body_start) {

508 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

510 
c
->
fûe
.
«me
.
d©a
);

511  
NGX_DECLINED
;

514 
c
->
buf
->
œ°
 +
n
;

516 
c
->
vÆid_£c
 = 
h
->valid_sec;

517 
c
->
œ°_modifõd
 = 
h
->last_modified;

518 
c
->
d©e
 = 
h
->date;

519 
c
->
vÆid_m£c
 = 
h
->valid_msec;

520 
c
->
hódî_°¨t
 = 
h
->header_start;

521 
c
->
body_°¨t
 = 
h
->body_start;

523 
r
->
ˇched
 = 1;

525 
ˇche
 = 
c
->
fûe_ˇche
;

527 i‡(
ˇche
->
sh
->
cﬁd
) {

529 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

531 i‡(!
c
->
node
->
exi°s
) {

532 
c
->
node
->
u£s
 = 1;

533 
c
->
node
->
body_°¨t
 = c->body_start;

534 
c
->
node
->
exi°s
 = 1;

535 
c
->
node
->
uniq
 = c->uniq;

536 
c
->
node
->
fs_size
 = c->fs_size;

538 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

541 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

544 
now
 = 
	`ngx_time
();

546 i‡(
c
->
vÆid_£c
 < 
now
) {

548 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

550 i‡(
c
->
node
->
upd©ög
) {

551 
rc
 = 
NGX_HTTP_CACHE_UPDATING
;

554 
c
->
node
->
upd©ög
 = 1;

555 
c
->
upd©ög
 = 1;

556 
rc
 = 
NGX_HTTP_CACHE_STALE
;

559 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

561 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

563 
rc
, 
c
->
vÆid_£c
, 
now
);

565  
rc
;

568  
NGX_OK
;

569 
	}
}

572 
ssize_t


573 
	$ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

575 #i‡(
NGX_HAVE_FILE_AIO
)

576 
ssize_t
 
n
;

577 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

579 i‡(!
ngx_fûe_aio
) {

580 
nﬂio
;

583 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

585 i‡(!
˛cf
->
aio
) {

586 
nﬂio
;

589 
n
 = 
	`ngx_fûe_aio_ªad
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0, 
r
->
poﬁ
);

591 i‡(
n
 !
NGX_AGAIN
) {

592  
n
;

595 
c
->
fûe
.
aio
->
d©a
 = 
r
;

596 
c
->
fûe
.
aio
->
h™dÀr
 = 
ngx_hâp_ˇche_aio_evít_h™dÀr
;

598 
r
->
maö
->
blocked
++;

599 
r
->
aio
 = 1;

601  
NGX_AGAIN
;

603 
nﬂio
:

607  
	`ngx_ªad_fûe
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0);

608 
	}
}

611 #i‡(
NGX_HAVE_FILE_AIO
)

614 
	$ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

616 
ngx_evít_aio_t
 *
aio
;

617 
ngx_hâp_ªque°_t
 *
r
;

619 
aio
 = 
ev
->
d©a
;

620 
r
 = 
aio
->
d©a
;

622 
r
->
maö
->
blocked
--;

623 
r
->
aio
 = 0;

625 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

626 
	}
}

631 
ngx_öt_t


632 
	$ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

634 
ngx_öt_t
 
rc
;

635 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

637 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

639 
f˙
 = 
c
->
node
;

641 i‡(
f˙
 =
NULL
) {

642 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

645 i‡(
f˙
) {

646 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

648 i‡(
c
->
node
 =
NULL
) {

649 
f˙
->
u£s
++;

650 
f˙
->
cou¡
++;

653 i‡(
f˙
->
îr‹
) {

655 i‡(
f˙
->
vÆid_£c
 < 
	`ngx_time
()) {

656 
ª√w
;

659 
rc
 = 
NGX_OK
;

661 
d⁄e
;

664 i‡(
f˙
->
exi°s
 || f˙->
u£s
 >
c
->
mö_u£s
) {

666 
c
->
exi°s
 = 
f˙
->exists;

667 i‡(
f˙
->
body_°¨t
) {

668 
c
->
body_°¨t
 = 
f˙
->body_start;

671 
rc
 = 
NGX_OK
;

673 
d⁄e
;

676 
rc
 = 
NGX_AGAIN
;

678 
d⁄e
;

681 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

682 (
ngx_hâp_fûe_ˇche_node_t
));

683 i‡(
f˙
 =
NULL
) {

684 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

686 (Ë
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

688 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

690 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

691 (
ngx_hâp_fûe_ˇche_node_t
));

692 i‡(
f˙
 =
NULL
) {

693 
rc
 = 
NGX_ERROR
;

694 
Áûed
;

698 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

700 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

701 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

703 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

705 
f˙
->
u£s
 = 1;

706 
f˙
->
cou¡
 = 1;

707 
f˙
->
upd©ög
 = 0;

708 
f˙
->
dñëög
 = 0;

710 
ª√w
:

712 
rc
 = 
NGX_DECLINED
;

714 
f˙
->
vÆid_m£c
 = 0;

715 
f˙
->
îr‹
 = 0;

716 
f˙
->
exi°s
 = 0;

717 
f˙
->
vÆid_£c
 = 0;

718 
f˙
->
uniq
 = 0;

719 
f˙
->
body_°¨t
 = 0;

720 
f˙
->
fs_size
 = 0;

722 
d⁄e
:

724 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

726 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

728 
c
->
uniq
 = 
f˙
->uniq;

729 
c
->
îr‹
 = 
f˙
->error;

730 
c
->
node
 = 
f˙
;

732 
Áûed
:

734 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

736  
rc
;

737 
	}
}

740 
ngx_öt_t


741 
	$ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_∑th_t
 *
∑th
)

743 
u_ch¨
 *
p
;

744 
ngx_hâp_ˇche_t
 *
c
;

746 
c
 = 
r
->
ˇche
;

748 i‡(
c
->
fûe
.
«me
.
Àn
) {

749  
NGX_OK
;

752 
c
->
fûe
.
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len

753 + 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

755 
c
->
fûe
.
«me
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, c->fûe.«me.
Àn
 + 1);

756 i‡(
c
->
fûe
.
«me
.
d©a
 =
NULL
) {

757  
NGX_ERROR
;

760 
	`ngx_mem˝y
(
c
->
fûe
.
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

762 
p
 = 
c
->
fûe
.
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

763 
p
 = 
	`ngx_hex_dump
’, 
c
->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

764 *
p
 = '\0';

766 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
c
->
fûe
.
«me
.
d©a
, c->fûe.«me.
Àn
);

768 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

769 "ˇchêfûe: \"%s\"", 
c
->
fûe
.
«me
.
d©a
);

771  
NGX_OK
;

772 
	}
}

775 
ngx_hâp_fûe_ˇche_node_t
 *

776 
	$ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
)

778 
ngx_öt_t
 
rc
;

779 
ngx_rbåì_key_t
 
node_key
;

780 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

781 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

783 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
node_key
, 
key
, (
ngx_rbåì_key_t
));

785 
node
 = 
ˇche
->
sh
->
rbåì
.
roŸ
;

786 
£¡öñ
 = 
ˇche
->
sh
->
rbåì
.sentinel;

788 
node
 !
£¡öñ
) {

790 i‡(
node_key
 < 
node
->
key
) {

791 
node
 =Çode->
À·
;

795 i‡(
node_key
 > 
node
->
key
) {

796 
node
 =Çode->
right
;

802 
f˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

804 
rc
 = 
	`ngx_memcmp
(&
key
[(
ngx_rbåì_key_t
)], 
f˙
->key,

805 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

807 i‡(
rc
 == 0) {

808  
f˙
;

811 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

816  
NULL
;

817 
	}
}

821 
	$ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

822 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

824 
ngx_rbåì_node_t
 **
p
;

825 
ngx_hâp_fûe_ˇche_node_t
 *
˙
, *
˙t
;

829 i‡(
node
->
key
 < 
ãmp
->key) {

831 
p
 = &
ãmp
->
À·
;

833 } i‡(
node
->
key
 > 
ãmp
->key) {

835 
p
 = &
ãmp
->
right
;

839 
˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

840 
˙t
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
ãmp
;

842 
p
 = (
	`ngx_memcmp
(
˙
->
key
, 
˙t
->key,

843 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
))

845 ? &
ãmp
->
À·
 : &ãmp->
right
;

848 i‡(*
p
 =
£¡öñ
) {

852 
ãmp
 = *
p
;

855 *
p
 = 
node
;

856 
node
->
∑ª¡
 = 
ãmp
;

857 
node
->
À·
 = 
£¡öñ
;

858 
node
->
right
 = 
£¡öñ
;

859 
	`ngx_rbt_ªd
(
node
);

860 
	}
}

864 
	$ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
)

866 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
 = (ngx_hâp_fûe_ˇche_hódî_à*Ë
buf
;

868 
u_ch¨
 *
p
;

869 
ngx_°r_t
 *
key
;

870 
ngx_uöt_t
 
i
;

871 
ngx_hâp_ˇche_t
 *
c
;

873 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

876 
c
 = 
r
->
ˇche
;

878 
h
->
vÆid_£c
 = 
c
->valid_sec;

879 
h
->
œ°_modifõd
 = 
c
->last_modified;

880 
h
->
d©e
 = 
c
->date;

881 
h
->
¸c32
 = 
c
->crc32;

882 
h
->
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

883 
h
->
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

884 
h
->
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

886 
p
 = 
buf
 + (
ngx_hâp_fûe_ˇche_hódî_t
);

888 
p
 = 
	`ngx_˝ymem
’, 
ngx_hâp_fûe_ˇche_key
, (ngx_http_file_cache_key));

890 
key
 = 
c
->
keys
.
ñts
;

891 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

892 
p
 = 
	`ngx_c›y
’, 
key
[
i
].
d©a
, key[i].
Àn
);

895 *
p
 = 
LF
;

896 
	}
}

900 
	$ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
)

902 
off_t
 
fs_size
;

903 
ngx_öt_t
 
rc
;

904 
ngx_fûe_uniq_t
 
uniq
;

905 
ngx_fûe_öfo_t
 
fi
;

906 
ngx_hâp_ˇche_t
 *
c
;

907 
ngx_ext_ª«me_fûe_t
 
ext
;

908 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

910 
c
 = 
r
->
ˇche
;

912 i‡(
c
->
upd©ed
) {

916 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

919 
c
->
upd©ed
 = 1;

920 
c
->
upd©ög
 = 0;

922 
ˇche
 = 
c
->
fûe_ˇche
;

924 
uniq
 = 0;

925 
fs_size
 = 0;

927 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

929 
tf
->
fûe
.
«me
.
d©a
, 
c
->file.name.data);

931 
ext
.
ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

932 
ext
.
∑th_ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

933 
ext
.
time
 = -1;

934 
ext
.
¸óã_∑th
 = 1;

935 
ext
.
dñëe_fûe
 = 1;

936 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

938 
rc
 = 
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
c
->fûe.«me, &
ext
);

940 i‡(
rc
 =
NGX_OK
) {

942 i‡(
	`ngx_fd_öfo
(
tf
->
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

943 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

944 
ngx_fd_öfo_n
 " \"%s\" faûed", 
tf
->
fûe
.
«me
.
d©a
);

946 
rc
 = 
NGX_ERROR
;

949 
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

950 
fs_size
 = (
	`ngx_fûe_fs_size
(&
fi
Ë+ 
ˇche
->
bsize
 - 1) / cache->bsize;

954 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

956 
c
->
node
->
cou¡
--;

957 
c
->
node
->
uniq
 = uniq;

958 
c
->
node
->
body_°¨t
 = c->body_start;

960 
ˇche
->
sh
->
size
 +
fs_size
 - 
c
->
node
->fs_size;

961 
c
->
node
->
fs_size
 = fs_size;

963 i‡(
rc
 =
NGX_OK
) {

964 
c
->
node
->
exi°s
 = 1;

967 
c
->
node
->
upd©ög
 = 0;

969 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

970 
	}
}

973 
ngx_öt_t


974 
	$ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
)

976 
ngx_öt_t
 
rc
;

977 
ngx_buf_t
 *
b
;

978 
ngx_chaö_t
 
out
;

979 
ngx_hâp_ˇche_t
 *
c
;

981 
c
 = 
r
->
ˇche
;

983 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

984 "hâ∞fûêˇchê£nd: %s", 
c
->
fûe
.
«me
.
d©a
);

986 i‡(
r
 !r->
maö
 && 
c
->
Àngth
 - c->
body_°¨t
 == 0) {

987  
	`ngx_hâp_£nd_hódî
(
r
);

992 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

993 i‡(
b
 =
NULL
) {

994  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

997 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

998 i‡(
b
->
fûe
 =
NULL
) {

999  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1002 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1004 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1005  
rc
;

1008 
b
->
fûe_pos
 = 
c
->
body_°¨t
;

1009 
b
->
fûe_œ°
 = 
c
->
Àngth
;

1011 
b
->
ö_fûe
 = (
c
->
Àngth
 - c->
body_°¨t
) ? 1: 0;

1012 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

1013 
b
->
œ°_ö_chaö
 = 1;

1015 
b
->
fûe
->
fd
 = 
c
->file.fd;

1016 
b
->
fûe
->
«me
 = 
c
->file.name;

1017 
b
->
fûe
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1019 
out
.
buf
 = 
b
;

1020 
out
.
√xt
 = 
NULL
;

1022  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1023 
	}
}

1027 
	$ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
)

1029 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1030 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1032 i‡(
c
->
upd©ed
 || c->
node
 =
NULL
) {

1036 
ˇche
 = 
c
->
fûe_ˇche
;

1038 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1039 "hâ∞fûêˇchê‰ì, fd: %d", 
c
->
fûe
.
fd
);

1041 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1043 
f˙
 = 
c
->
node
;

1044 
f˙
->
cou¡
--;

1046 i‡(
c
->
upd©ög
) {

1047 
f˙
->
upd©ög
 = 0;

1050 i‡(
c
->
îr‹
) {

1051 
f˙
->
îr‹
 = 
c
->error;

1053 i‡(
c
->
vÆid_£c
) {

1054 
f˙
->
vÆid_£c
 = 
c
->valid_sec;

1055 
f˙
->
vÆid_m£c
 = 
c
->valid_msec;

1058 } i‡(!
f˙
->
exi°s
 && f˙->
cou¡
 =0 && 
c
->
mö_u£s
 == 1) {

1059 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1060 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1061 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1062 
c
->
node
 = 
NULL
;

1065 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1067 
c
->
upd©ed
 = 1;

1068 
c
->
upd©ög
 = 0;

1070 i‡(
c
->
ãmp_fûe
) {

1071 i‡(
tf
 &&Åf->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

1072 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1074 
tf
->
fûe
.
«me
.
d©a
);

1076 i‡(
	`ngx_dñëe_fûe
(
tf
->
fûe
.
«me
.
d©a
Ë=
NGX_FILE_ERROR
) {

1077 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
fûe
.
log
, 
ngx_î∫o
,

1078 
ngx_dñëe_fûe_n
 " \"%s\" failed",

1079 
tf
->
fûe
.
«me
.
d©a
);

1084 i‡(
c
->
waô_evít
.
timî_£t
) {

1085 
	`ngx_dñ_timî
(&
c
->
waô_evít
);

1087 
	}
}

1091 
	$ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
)

1093 
ngx_hâp_ˇche_t
 *
c
 = 
d©a
;

1095 i‡(
c
->
upd©ed
) {

1099 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1102 i‡(
c
->
upd©ög
) {

1103 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
fûe
.
log
, 0,

1104 "°ÆÀd cachêupd©ög,Éº‹:%ui", 
c
->
îr‹
);

1107 
	`ngx_hâp_fûe_ˇche_‰ì
(
c
, 
NULL
);

1108 
	}
}

1111 
time_t


1112 
	$ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1114 
u_ch¨
 *
«me
;

1115 
size_t
 
Àn
;

1116 
time_t
 
waô
;

1117 
ngx_uöt_t
 
åõs
;

1118 
ngx_∑th_t
 *
∑th
;

1119 
ngx_queue_t
 *
q
;

1120 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1122 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1125 
∑th
 = 
ˇche
->path;

1126 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1128 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1129 i‡(
«me
 =
NULL
) {

1133 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1135 
waô
 = 10;

1136 
åõs
 = 20;

1138 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1140 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1141 
q
 !
	`ngx_queue_£¡öñ
(&
ˇche
->
sh
->
queue
);

1142 
q
 = 
	`ngx_queue_¥ev
(q))

1144 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1146 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1148 
f˙
->
cou¡
, f˙->
exi°s
,

1149 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1151 i‡(
f˙
->
cou¡
 == 0) {

1152 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1153 
waô
 = 0;

1156 i‡(--
åõs
) {

1160 
waô
 = 1;

1166 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1168 
	`ngx_‰ì
(
«me
);

1170  
waô
;

1171 
	}
}

1174 
time_t


1175 
	$ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1177 
u_ch¨
 *
«me
, *
p
;

1178 
size_t
 
Àn
;

1179 
time_t
 
now
, 
waô
;

1180 
ngx_∑th_t
 *
∑th
;

1181 
ngx_queue_t
 *
q
;

1182 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1183 
u_ch¨
 
key
[2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1185 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1188 
∑th
 = 
ˇche
->path;

1189 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1191 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1192 i‡(
«me
 =
NULL
) {

1196 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1198 
now
 = 
	`ngx_time
();

1200 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1204 i‡(
	`ngx_queue_em±y
(&
ˇche
->
sh
->
queue
)) {

1205 
waô
 = 10;

1209 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1211 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1213 
waô
 = 
f˙
->
expúe
 - 
now
;

1215 i‡(
waô
 > 0) {

1216 
waô
 = wait > 10 ? 10 : wait;

1220 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1222 
f˙
->
cou¡
, f˙->
exi°s
,

1223 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1225 i‡(
f˙
->
cou¡
 == 0) {

1226 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1230 i‡(
f˙
->
dñëög
) {

1231 
waô
 = 1;

1235 
p
 = 
	`ngx_hex_dump
(
key
, (
u_ch¨
 *Ë&
f˙
->
node
.key,

1236 (
ngx_rbåì_key_t
));

1237 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1238 (Ë
	`ngx_hex_dump
(
p
, 
f˙
->
key
, 
Àn
);

1246 
	`ngx_queue_ªmove
(
q
);

1247 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1248 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1250 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1252 2 * 
NGX_HTTP_CACHE_KEY_LEN
, 
key
, 
f˙
->
cou¡
);

1255 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1257 
	`ngx_‰ì
(
«me
);

1259  
waô
;

1260 
	}
}

1264 
	$ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_queue_t
 *
q
,

1265 
u_ch¨
 *
«me
)

1267 
u_ch¨
 *
p
;

1268 
size_t
 
Àn
;

1269 
ngx_∑th_t
 *
∑th
;

1270 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1272 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1274 i‡(
f˙
->
exi°s
) {

1275 
ˇche
->
sh
->
size
 -
f˙
->
fs_size
;

1277 
∑th
 = 
ˇche
->path;

1278 
p
 = 
«me
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

1279 
p
 = 
	`ngx_hex_dump
’, (
u_ch¨
 *Ë&
f˙
->
node
.
key
,

1280 (
ngx_rbåì_key_t
));

1281 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1282 
p
 = 
	`ngx_hex_dump
’, 
f˙
->
key
, 
Àn
);

1283 *
p
 = '\0';

1285 
f˙
->
cou¡
++;

1286 
f˙
->
dñëög
 = 1;

1287 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1289 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1290 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
«me
, 
Àn
);

1292 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1293 "hâ∞fûêˇchêexpúe: \"%s\"", 
«me
);

1295 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1296 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1297 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1300 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1301 
f˙
->
cou¡
--;

1302 
f˙
->
dñëög
 = 0;

1305 i‡(
f˙
->
cou¡
 == 0) {

1306 
	`ngx_queue_ªmove
(
q
);

1307 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1308 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1310 
	}
}

1313 
time_t


1314 
	$ngx_hâp_fûe_ˇche_m™agî
(*
d©a
)

1316 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1318 
off_t
 
size
;

1319 
time_t
 
√xt
, 
waô
;

1321 
√xt
 = 
	`ngx_hâp_fûe_ˇche_expúe
(
ˇche
);

1323 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1324 
ˇche
->
fûes
 = 0;

1327 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1329 
size
 = 
ˇche
->
sh
->size;

1331 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1333 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1334 "hâ∞fûêˇchêsize: %O", 
size
);

1336 i‡(
size
 < 
ˇche
->
max_size
) {

1337  
√xt
;

1340 
waô
 = 
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

1342 i‡(
waô
 > 0) {

1343  
waô
;

1346 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

1347  
√xt
;

1350 
	}
}

1354 
	$ngx_hâp_fûe_ˇche_lﬂdî
(*
d©a
)

1356 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1358 
ngx_åì_˘x_t
 
åì
;

1360 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

1364 i‡(!
	`ngx_©omic_cmp_£t
(&
ˇche
->
sh
->
lﬂdög
, 0, 
ngx_pid
)) {

1368 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1371 
åì
.
öô_h™dÀr
 = 
NULL
;

1372 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_fûe
;

1373 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1374 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1375 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_fûe_ˇche_dñëe_fûe
;

1376 
åì
.
d©a
 = 
ˇche
;

1377 
åì
.
Æloc
 = 0;

1378 
åì
.
log
 = 
ngx_cy˛e
->log;

1380 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1381 
ˇche
->
fûes
 = 0;

1383 i‡(
	`ngx_wÆk_åì
(&
åì
, &
ˇche
->
∑th
->
«me
Ë=
NGX_ABORT
) {

1384 
ˇche
->
sh
->
lﬂdög
 = 0;

1388 
ˇche
->
sh
->
cﬁd
 = 0;

1389 
ˇche
->
sh
->
lﬂdög
 = 0;

1391 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

1393 &
ˇche
->
∑th
->
«me
,

1394 ((Ë
ˇche
->
sh
->
size
 * cache->
bsize
) / (1024 * 1024),

1395 
ˇche
->
bsize
);

1396 
	}
}

1399 
ngx_öt_t


1400 
	$ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1402  
NGX_OK
;

1403 
	}
}

1406 
ngx_öt_t


1407 
	$ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1409 
ngx_m£c_t
 
ñ≠£d
;

1410 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1412 
ˇche
 = 
˘x
->
d©a
;

1414 i‡(
	`ngx_hâp_fûe_ˇche_add_fûe
(
˘x
, 
∑th
Ë!
NGX_OK
) {

1415 (Ë
	`ngx_hâp_fûe_ˇche_dñëe_fûe
(
˘x
, 
∑th
);

1418 i‡(++
ˇche
->
fûes
 >ˇche->
lﬂdî_fûes
) {

1419 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1422 
	`ngx_time_upd©e
();

1424 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

1426 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1427 "hâ∞fûêˇchêlﬂdîÅimêñ≠£d: %M", 
ñ≠£d
);

1429 i‡(
ñ≠£d
 >
ˇche
->
lﬂdî_thªshﬁd
) {

1430 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1434  (
ngx_quô
 || 
ngx_ãrmö©e
Ë? 
NGX_ABORT
 : 
NGX_OK
;

1435 
	}
}

1439 
	$ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1441 
	`ngx_m¶ìp
(
ˇche
->
lﬂdî_¶ìp
);

1443 
	`ngx_time_upd©e
();

1445 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1446 
ˇche
->
fûes
 = 0;

1447 
	}
}

1450 
ngx_öt_t


1451 
	$ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
)

1453 
u_ch¨
 *
p
;

1454 
ngx_öt_t
 
n
;

1455 
ngx_uöt_t
 
i
;

1456 
ngx_hâp_ˇche_t
 
c
;

1457 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1459 i‡(
«me
->
Àn
 < 2 * 
NGX_HTTP_CACHE_KEY_LEN
) {

1460  
NGX_ERROR
;

1463 i‡(
˘x
->
size
 < (
off_t
Ë(
ngx_hâp_fûe_ˇche_hódî_t
)) {

1464 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1465 "ˇchêfûê\"%s\" i†toÿsmÆl", 
«me
->
d©a
);

1466  
NGX_ERROR
;

1469 
	`ngx_memzîo
(&
c
, (
ngx_hâp_ˇche_t
));

1470 
ˇche
 = 
˘x
->
d©a
;

1472 
c
.
Àngth
 = 
˘x
->
size
;

1473 
c
.
fs_size
 = (
˘x
->fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

1475 
p
 = &
«me
->
d©a
[«me->
Àn
 - 2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1477 
i
 = 0; i < 
NGX_HTTP_CACHE_KEY_LEN
; i++) {

1478 
n
 = 
	`ngx_hextoi
(
p
, 2);

1480 i‡(
n
 =
NGX_ERROR
) {

1481  
NGX_ERROR
;

1484 
p
 += 2;

1486 
c
.
key
[
i
] = (
u_ch¨
Ë
n
;

1489  
	`ngx_hâp_fûe_ˇche_add
(
ˇche
, &
c
);

1490 
	}
}

1493 
ngx_öt_t


1494 
	$ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

1496 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1498 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1500 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

1502 i‡(
f˙
 =
NULL
) {

1504 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

1505 (
ngx_hâp_fûe_ˇche_node_t
));

1506 i‡(
f˙
 =
NULL
) {

1507 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1508  
NGX_ERROR
;

1511 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

1513 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

1514 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

1516 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1518 
f˙
->
u£s
 = 1;

1519 
f˙
->
cou¡
 = 0;

1520 
f˙
->
vÆid_m£c
 = 0;

1521 
f˙
->
îr‹
 = 0;

1522 
f˙
->
exi°s
 = 1;

1523 
f˙
->
upd©ög
 = 0;

1524 
f˙
->
dñëög
 = 0;

1525 
f˙
->
uniq
 = 0;

1526 
f˙
->
vÆid_£c
 = 0;

1527 
f˙
->
body_°¨t
 = 0;

1528 
f˙
->
fs_size
 = 
c
->fs_size;

1530 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

1533 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1536 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1538 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1540 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1542  
NGX_OK
;

1543 
	}
}

1546 
ngx_öt_t


1547 
	$ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1549 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

1550 "hâ∞fûêˇchêdñëe: \"%s\"", 
∑th
->
d©a
);

1552 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

1553 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1554 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
∑th
->
d©a
);

1557  
NGX_OK
;

1558 
	}
}

1561 
time_t


1562 
	$ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
)

1564 
ngx_uöt_t
 
i
;

1565 
ngx_hâp_ˇche_vÆid_t
 *
vÆid
;

1567 i‡(
ˇche_vÆid
 =
NULL
) {

1571 
vÆid
 = 
ˇche_vÆid
->
ñts
;

1572 
i
 = 0; i < 
ˇche_vÆid
->
√…s
; i++) {

1574 i‡(
vÆid
[
i
].
°©us
 == 0) {

1575  
vÆid
[
i
].valid;

1578 i‡(
vÆid
[
i
].
°©us
 == status) {

1579  
vÆid
[
i
].valid;

1584 
	}
}

1588 
	$ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1590 
off_t
 
max_size
;

1591 
u_ch¨
 *
œ°
, *
p
;

1592 
time_t
 
öa˘ive
;

1593 
ssize_t
 
size
;

1594 
ngx_°r_t
 
s
, 
«me
, *
vÆue
;

1595 
ngx_öt_t
 
lﬂdî_fûes
;

1596 
ngx_m£c_t
 
lﬂdî_¶ìp
, 
lﬂdî_thªshﬁd
;

1597 
ngx_uöt_t
 
i
, 
n
;

1598 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1600 
ˇche
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_fûe_ˇche_t
));

1601 i‡(
ˇche
 =
NULL
) {

1602  
NGX_CONF_ERROR
;

1605 
ˇche
->
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

1606 i‡(
ˇche
->
∑th
 =
NULL
) {

1607  
NGX_CONF_ERROR
;

1610 
öa˘ive
 = 600;

1611 
lﬂdî_fûes
 = 100;

1612 
lﬂdî_¶ìp
 = 50;

1613 
lﬂdî_thªshﬁd
 = 200;

1615 
«me
.
Àn
 = 0;

1616 
size
 = 0;

1617 
max_size
 = 
NGX_MAX_OFF_T_VALUE
;

1619 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1621 
ˇche
->
∑th
->
«me
 = 
vÆue
[1];

1623 i‡(
ˇche
->
∑th
->
«me
.
d©a
[ˇche->∑th->«me.
Àn
 - 1] == '/') {

1624 
ˇche
->
∑th
->
«me
.
Àn
--;

1627 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
ˇche
->
∑th
->
«me
, 0Ë!
NGX_OK
) {

1628  
NGX_CONF_ERROR
;

1631 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

1633 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "levels=", 7) == 0) {

1635 
p
 = 
vÆue
[
i
].
d©a
 + 7;

1636 
œ°
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

1638 
n
 = 0;Ç < 3 && 
p
 < 
œ°
;Ç++) {

1640 i‡(*
p
 > '0' && *p < '3') {

1642 
ˇche
->
∑th
->
Àvñ
[
n
] = *
p
++ - '0';

1643 
ˇche
->
∑th
->
Àn
 +ˇche->∑th->
Àvñ
[
n
] + 1;

1645 i‡(
p
 =
œ°
) {

1649 i‡(*
p
++ =':' && 
n
 < 2 &&Ö !
œ°
) {

1653 
övÆid_Àvñs
;

1656 
övÆid_Àvñs
;

1659 i‡(
ˇche
->
∑th
->
Àn
 < 10 + 3) {

1663 
övÆid_Àvñs
:

1665 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1666 "övÆid \"Àvñs\" \"%V\"", &
vÆue
[
i
]);

1667  
NGX_CONF_ERROR
;

1670 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "keys_zone=", 10) == 0) {

1672 
«me
.
d©a
 = 
vÆue
[
i
].data + 10;

1674 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

1676 i‡(
p
) {

1677 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1679 
p
++;

1681 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + vÆue[i].À¿- 
p
;

1682 
s
.
d©a
 = 
p
;

1684 
size
 = 
	`ngx_∑r£_size
(&
s
);

1685 i‡(
size
 > 8191) {

1690 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1691 "övÆid key†z⁄êsizê\"%V\"", &
vÆue
[
i
]);

1692  
NGX_CONF_ERROR
;

1695 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1697 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1698 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1700 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1701 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1702 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1703 "övÆid i«˘ivêvÆuê\"%V\"", &
vÆue
[
i
]);

1704  
NGX_CONF_ERROR
;

1710 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_size=", 9) == 0) {

1712 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1713 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1715 
max_size
 = 
	`ngx_∑r£_off£t
(&
s
);

1716 i‡(
max_size
 < 0) {

1717 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1718 "övÆid max_sizêvÆuê\"%V\"", &
vÆue
[
i
]);

1719  
NGX_CONF_ERROR
;

1725 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_files=", 13) == 0) {

1727 
lﬂdî_fûes
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 13, vÆue[i].
Àn
 - 13);

1728 i‡(
lﬂdî_fûes
 =
NGX_ERROR
) {

1729 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1730 "övÆidÜﬂdî_fûe†vÆuê\"%V\"", &
vÆue
[
i
]);

1731  
NGX_CONF_ERROR
;

1737 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_sleep=", 13) == 0) {

1739 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

1740 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

1742 
lﬂdî_¶ìp
 = 
	`ngx_∑r£_time
(&
s
, 0);

1743 i‡(
lﬂdî_¶ìp
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1744 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1745 "övÆidÜﬂdî_¶ì∞vÆuê\"%V\"", &
vÆue
[
i
]);

1746  
NGX_CONF_ERROR
;

1752 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_threshold=", 17) == 0) {

1754 
s
.
Àn
 = 
vÆue
[
i
].len - 17;

1755 
s
.
d©a
 = 
vÆue
[
i
].data + 17;

1757 
lﬂdî_thªshﬁd
 = 
	`ngx_∑r£_time
(&
s
, 0);

1758 i‡(
lﬂdî_thªshﬁd
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1759 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1760 "övÆidÜﬂdî_thªshﬁd vÆuê\"%V\"", &
vÆue
[
i
]);

1761  
NGX_CONF_ERROR
;

1767 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1768 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1769  
NGX_CONF_ERROR
;

1772 i‡(
«me
.
Àn
 =0 || 
size
 == 0) {

1773 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1775 &
cmd
->
«me
);

1776  
NGX_CONF_ERROR
;

1779 
ˇche
->
∑th
->
m™agî
 = 
ngx_hâp_fûe_ˇche_m™agî
;

1780 
ˇche
->
∑th
->
lﬂdî
 = 
ngx_hâp_fûe_ˇche_lﬂdî
;

1781 
ˇche
->
∑th
->
d©a
 = cache;

1782 
ˇche
->
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

1783 
ˇche
->
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1784 
ˇche
->
lﬂdî_fûes
 =Üoader_files;

1785 
ˇche
->
lﬂdî_¶ìp
 =Üoader_sleep;

1786 
ˇche
->
lﬂdî_thªshﬁd
 =Üoader_threshold;

1788 i‡(
	`ngx_add_∑th
(
cf
, &
ˇche
->
∑th
Ë!
NGX_OK
) {

1789  
NGX_CONF_ERROR
;

1792 
ˇche
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
, 
cmd
->
po°
);

1793 i‡(
ˇche
->
shm_z⁄e
 =
NULL
) {

1794  
NGX_CONF_ERROR
;

1797 i‡(
ˇche
->
shm_z⁄e
->
d©a
) {

1798 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1799 "du∂iˇã z⁄ê\"%V\"", &
«me
);

1800  
NGX_CONF_ERROR
;

1804 
ˇche
->
shm_z⁄e
->
öô
 = 
ngx_hâp_fûe_ˇche_öô
;

1805 
ˇche
->
shm_z⁄e
->
d©a
 = cache;

1807 
ˇche
->
öa˘ive
 = inactive;

1808 
ˇche
->
max_size
 = max_size;

1810  
NGX_CONF_OK
;

1811 
	}
}

1815 
	$ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1816 *
c⁄f
)

1818 *
p
 = 
c⁄f
;

1820 
time_t
 
vÆid
;

1821 
ngx_°r_t
 *
vÆue
;

1822 
ngx_uöt_t
 
i
, 
n
, 
°©us
;

1823 
ngx_¨øy_t
 **
a
;

1824 
ngx_hâp_ˇche_vÆid_t
 *
v
;

1825 
ngx_uöt_t
 
°©u£s
[] = { 200, 301, 302 };

1827 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1829 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1830 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ˇche_vÆid_t
));

1831 i‡(*
a
 =
NULL
) {

1832  
NGX_CONF_ERROR
;

1836 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1837 
n
 = 
cf
->
¨gs
->
√…s
 - 1;

1839 
vÆid
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

1840 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1841 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1842 "övÆidÅimêvÆuê\"%V\"", &
vÆue
[
n
]);

1843  
NGX_CONF_ERROR
;

1846 i‡(
n
 == 1) {

1848 
i
 = 0; i < 3; i++) {

1849 
v
 = 
	`ngx_¨øy_push
(*
a
);

1850 i‡(
v
 =
NULL
) {

1851  
NGX_CONF_ERROR
;

1854 
v
->
°©us
 = 
°©u£s
[
i
];

1855 
v
->
vÆid
 = valid;

1858  
NGX_CONF_OK
;

1861 
i
 = 1; i < 
n
; i++) {

1863 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "any") == 0) {

1865 
°©us
 = 0;

1869 
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

1870 i‡(
°©us
 < 100) {

1871 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1872 "övÆid sètu†\"%V\"", &
vÆue
[
i
]);

1873  
NGX_CONF_ERROR
;

1877 
v
 = 
	`ngx_¨øy_push
(*
a
);

1878 i‡(
v
 =
NULL
) {

1879  
NGX_CONF_ERROR
;

1882 
v
->
°©us
 = status;

1883 
v
->
vÆid
 = valid;

1886  
NGX_CONF_OK
;

1887 
	}
}

	@src/http/ngx_http_header_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_hódî_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL
,

33 
ngx_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_hódî_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
	gngx_hâp_£rvî_°rög
[] = "Sîvî:Çgöx" 
CRLF
;

50 
	gngx_hâp_£rvî_fuŒ_°rög
[] = "Sîvî: " 
NGINX_VER
 
CRLF
;

53 
ngx_°r_t
 
	gngx_hâp_°©us_löes
[] = {

55 
ngx_°rög
("200 OK"),

56 
ngx_°rög
("201 Created"),

57 
ngx_°rög
("202 Accepted"),

58 
ngx_nuŒ_°rög
,

59 
ngx_°rög
("204 No Content"),

60 
ngx_nuŒ_°rög
,

61 
ngx_°rög
("206 Partial Content"),

65 
	#NGX_HTTP_LAST_2XX
 207

	)

66 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 200)

	)

70 
ngx_°rög
("301 Moved Permanently"),

71 
ngx_°rög
("302 Moved Temporarily"),

72 
ngx_°rög
("303 See Other"),

73 
ngx_°rög
("304 Not Modified"),

74 
ngx_nuŒ_°rög
,

75 
ngx_nuŒ_°rög
,

76 
ngx_°rög
("307 Temporary Redirect"),

78 
	#NGX_HTTP_LAST_3XX
 308

	)

79 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

81 
ngx_°rög
("400 Bad Request"),

82 
ngx_°rög
("401 Unauthorized"),

83 
ngx_°rög
("402 Payment Required"),

84 
ngx_°rög
("403 Forbidden"),

85 
ngx_°rög
("404 Not Found"),

86 
ngx_°rög
("405 Not Allowed"),

87 
ngx_°rög
("406 Not Acceptable"),

88 
ngx_nuŒ_°rög
,

89 
ngx_°rög
("408 Request Time-out"),

90 
ngx_°rög
("409 Conflict"),

91 
ngx_°rög
("410 Gone"),

92 
ngx_°rög
("411 Length Required"),

93 
ngx_°rög
("412 Precondition Failed"),

94 
ngx_°rög
("413 Request Entity Too Large"),

95 
ngx_nuŒ_°rög
,

99 
ngx_°rög
("415 Unsupported Media Type"),

100 
ngx_°rög
("416 Requested Range Not Satisfiable"),

111 
	#NGX_HTTP_LAST_4XX
 417

	)

112 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

114 
ngx_°rög
("500 Internal Server Error"),

115 
ngx_°rög
("501 Not Implemented"),

116 
ngx_°rög
("502 Bad Gateway"),

117 
ngx_°rög
("503 Service Temporarily Unavailable"),

118 
ngx_°rög
("504 Gateway Time-out"),

120 
ngx_nuŒ_°rög
,

121 
ngx_nuŒ_°rög
,

122 
ngx_°rög
("507 Insufficient Storage"),

127 
	#NGX_HTTP_LAST_5XX
 508

	)

132 
ngx_hâp_hódî_out_t
 
	gngx_hâp_hódîs_out
[] = {

133 { 
ngx_°rög
("Sîvî"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
) },

134 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
) },

135 { 
ngx_°rög
("Content-Length"),

136 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_Àngth
) },

137 { 
ngx_°rög
("Content-Encoding"),

138 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_ícodög
) },

139 { 
ngx_°rög
("Loˇti⁄"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
loˇti⁄
) },

140 { 
ngx_°rög
("Last-Modified"),

141 
off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
) },

142 { 
ngx_°rög
("Accept-Ranges"),

143 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
) },

144 { 
ngx_°rög
("Expúes"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
) },

145 { 
ngx_°rög
("Cache-Control"),

146 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
) },

147 { 
ngx_°rög
("ETag"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
) },

149 { 
ngx_nuŒ_°rög
, 0 }

153 
ngx_öt_t


154 
	$ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

156 
u_ch¨
 *
p
;

157 
size_t
 
Àn
;

158 
ngx_°r_t
 
ho°
, *
°©us_löe
;

159 
ngx_buf_t
 *
b
;

160 
ngx_uöt_t
 
°©us
, 
i
, 
p‹t
;

161 
ngx_chaö_t
 
out
;

162 
ngx_li°_∑π_t
 *
∑π
;

163 
ngx_èbÀ_ñt_t
 *
hódî
;

164 
ngx_c⁄√˘i⁄_t
 *
c
;

165 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

166 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

167 
sockaddr_ö
 *
sö
;

168 #i‡(
NGX_HAVE_INET6
)

169 
sockaddr_ö6
 *
sö6
;

171 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

173 i‡(
r
->
hódî_£¡
) {

174  
NGX_OK
;

177 
r
->
hódî_£¡
 = 1;

179 i‡(
r
 !r->
maö
) {

180  
NGX_OK
;

183 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

184  
NGX_OK
;

187 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

188 
r
->
hódî_⁄ly
 = 1;

191 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 != -1) {

192 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


193 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


194 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED
)

196 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

197 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

201 
Àn
 = ("HTTP/1.x "Ë- 1 + (
CRLF
) - 1

203 + (
CRLF
) - 1;

207 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

208 
Àn
 +
r
->
hódîs_out
.
°©us_löe
.len;

209 
°©us_löe
 = &
r
->
hódîs_out
.status_line;

210 #i‡(
NGX_SUPPRESS_WARN
)

211 
°©us
 = 0;

216 
°©us
 = 
r
->
hódîs_out
.status;

218 i‡(
°©us
 >
NGX_HTTP_OK


219 && 
°©us
 < 
NGX_HTTP_LAST_2XX
)

223 i‡(
°©us
 =
NGX_HTTP_NO_CONTENT
) {

224 
r
->
hódî_⁄ly
 = 1;

225 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

226 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

227 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

229 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

232 
°©us
 -
NGX_HTTP_OK
;

233 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

234 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

236 } i‡(
°©us
 >
NGX_HTTP_MOVED_PERMANENTLY


237 && 
°©us
 < 
NGX_HTTP_LAST_3XX
)

241 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

242 
r
->
hódî_⁄ly
 = 1;

245 
°©us
 = sètu†- 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

246 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

247 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

249 } i‡(
°©us
 >
NGX_HTTP_BAD_REQUEST


250 && 
°©us
 < 
NGX_HTTP_LAST_4XX
)

253 
°©us
 = sètu†- 
NGX_HTTP_BAD_REQUEST


254 + 
NGX_HTTP_OFF_4XX
;

256 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

257 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

259 } i‡(
°©us
 >
NGX_HTTP_INTERNAL_SERVER_ERROR


260 && 
°©us
 < 
NGX_HTTP_LAST_5XX
)

263 
°©us
 = sètu†- 
NGX_HTTP_INTERNAL_SERVER_ERROR


264 + 
NGX_HTTP_OFF_5XX
;

266 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

267 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

270 
Àn
 +
NGX_INT_T_LEN
;

271 
°©us_löe
 = 
NULL
;

275 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

277 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

278 
Àn
 +
˛cf
->
£rvî_tokís
 ? (
ngx_hâp_£rvî_fuŒ_°rög
) - 1:

279 (
ngx_hâp_£rvî_°rög
) - 1;

282 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

283 
Àn
 +("D©e: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

286 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

287 
Àn
 += ("Content-Type: ") - 1

288 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 + 2;

290 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


291 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

293 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

297 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


298 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

300 
Àn
 +("C⁄ã¡-Lígth: "Ë- 1 + 
NGX_OFF_T_LEN
 + 2;

303 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


304 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

306 
Àn
 +("La°-Modifõd: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

309 
c
 = 
r
->
c⁄√˘i⁄
;

311 i‡(
r
->
hódîs_out
.
loˇti⁄


312 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


313 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

315 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

317 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

318 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

319 
ho°
 = 
cscf
->
£rvî_«me
;

321 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

322 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

325 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

326 
ho°
.
d©a
 = 
addr
;

328 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

329  
NGX_ERROR
;

333 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

335 #i‡(
NGX_HAVE_INET6
)

336 
AF_INET6
:

337 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

338 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

341 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

342 
AF_UNIX
:

343 
p‹t
 = 0;

347 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

348 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

352 
Àn
 += ("Location: https://") - 1

353 + 
ho°
.
Àn


354 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 + 2;

356 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

358 #i‡(
NGX_HTTP_SSL
)

359 i‡(
c
->
s¶
)

360 
p‹t
 = (port == 443) ? 0 :Öort;

363 
p‹t
 = (port == 80) ? 0 :Öort;

366 
p‹t
 = 0;

369 i‡(
p‹t
) {

370 
Àn
 += (":65535") - 1;

374 
	`ngx_°r_nuŒ
(&
ho°
);

375 
p‹t
 = 0;

378 i‡(
r
->
chunked
) {

379 
Àn
 +("Tøns„r-Encodög: chunked" 
CRLF
) - 1;

382 i‡(
r
->
kì∑live
) {

383 
Àn
 +("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1;

393 i‡(
˛cf
->
kì∑live_hódî
) {

394 
Àn
 +("Kìp-Alive:Åimeout="Ë- 1 + 
NGX_TIME_T_LEN
 + 2;

398 
Àn
 +("C⁄√˘i⁄: clo£" 
CRLF
) - 1;

401 #i‡(
NGX_HTTP_GZIP
)

402 i‡(
r
->
gzù_v¨y
) {

403 i‡(
˛cf
->
gzù_v¨y
) {

404 
Àn
 +("V¨y: Ac˚±-Encodög" 
CRLF
) - 1;

407 
r
->
gzù_v¨y
 = 0;

412 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

413 
hódî
 = 
∑π
->
ñts
;

415 
i
 = 0; ; i++) {

417 i‡(
i
 >
∑π
->
√…s
) {

418 i‡(
∑π
->
√xt
 =
NULL
) {

422 
∑π
 =Ö¨t->
√xt
;

423 
hódî
 = 
∑π
->
ñts
;

424 
i
 = 0;

427 i‡(
hódî
[
i
].
hash
 == 0) {

431 
Àn
 +
hódî
[
i
].
key
.À¿+ (": "Ë- 1 + hódî[i].
vÆue
.len

432 + (
CRLF
) - 1;

435 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

436 i‡(
b
 =
NULL
) {

437  
NGX_ERROR
;

441 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP/1.1 ", ("HTTP/1.x ") - 1);

444 i‡(
°©us_löe
) {

445 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
°©us_löe
->
d©a
, sètus_löe->
Àn
);

448 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%03ui", 
°©us
);

450 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

452 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

453 i‡(
˛cf
->
£rvî_tokís
) {

454 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_fuŒ_°rög
;

455 
Àn
 = (
ngx_hâp_£rvî_fuŒ_°rög
) - 1;

458 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_°rög
;

459 
Àn
 = (
ngx_hâp_£rvî_°rög
) - 1;

462 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
Àn
);

465 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

466 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Date: ", ("Date: ") - 1);

467 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_ˇched_hâp_time
.
d©a
,

468 
ngx_ˇched_hâp_time
.
Àn
);

470 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

473 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

474 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Content-Type: ",

476 
p
 = 
b
->
œ°
;

477 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

478 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

480 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


481 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

483 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "; charset=",

485 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

486 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

490 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
b
->
œ°
 - 
p
;

491 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

494 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

497 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


498 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

500 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "C⁄ã¡-Lígth: %O" 
CRLF
,

501 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

504 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


505 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

507 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Last-Modified: ",

509 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
r
->
hódîs_out
.
œ°_modifõd_time
);

511 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

514 i‡(
ho°
.
d©a
) {

516 
p
 = 
b
->
œ°
 + ("Location: ") - 1;

518 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Location: http",

521 #i‡(
NGX_HTTP_SSL
)

522 i‡(
c
->
s¶
) {

523 *
b
->
œ°
++ ='s';

527 *
b
->
œ°
++ = ':'; *b->last++ = '/'; *b->last++ = '/';

528 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ho°
.
d©a
, ho°.
Àn
);

530 i‡(
p‹t
) {

531 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, ":%ui", 
p‹t
);

534 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

535 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

539 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
b
->
œ°
 - 
p
;

540 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

541 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

543 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

546 i‡(
r
->
chunked
) {

547 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Tøns„r-Encodög: chunked" 
CRLF
,

548 ("Tøns„r-Encodög: chunked" 
CRLF
) - 1);

551 i‡(
r
->
kì∑live
) {

552 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: kìp-Æive" 
CRLF
,

553 ("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1);

555 i‡(
˛cf
->
kì∑live_hódî
) {

556 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Kìp-Alive:Åimeout=%T" 
CRLF
,

557 
˛cf
->
kì∑live_hódî
);

561 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: clo£" 
CRLF
,

562 ("C⁄√˘i⁄: clo£" 
CRLF
) - 1);

565 #i‡(
NGX_HTTP_GZIP
)

566 i‡(
r
->
gzù_v¨y
) {

567 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "V¨y: Ac˚±-Encodög" 
CRLF
,

568 ("V¨y: Ac˚±-Encodög" 
CRLF
) - 1);

572 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

573 
hódî
 = 
∑π
->
ñts
;

575 
i
 = 0; ; i++) {

577 i‡(
i
 >
∑π
->
√…s
) {

578 i‡(
∑π
->
√xt
 =
NULL
) {

582 
∑π
 =Ö¨t->
√xt
;

583 
hódî
 = 
∑π
->
ñts
;

584 
i
 = 0;

587 i‡(
hódî
[
i
].
hash
 == 0) {

591 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

592 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

594 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

595 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

598 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

599 "%*s", (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

602 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

604 
r
->
hódî_size
 = 
b
->
œ°
 - b->
pos
;

606 i‡(
r
->
hódî_⁄ly
) {

607 
b
->
œ°_buf
 = 1;

610 
out
.
buf
 = 
b
;

611 
out
.
√xt
 = 
NULL
;

613  
	`ngx_hâp_wrôe_fûãr
(
r
, &
out
);

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

620 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódî_fûãr
;

622  
NGX_OK
;

623 
	}
}

	@src/http/ngx_http_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
uöt32_t
 
	gusuÆ
[] = {

20 #i‡(
NGX_WIN32
)

36 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

38 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

39 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

41 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

42 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

44 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

45 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

47 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

48 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

49 && 
m
[4] =
c4


	)

51 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

52 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

53 && (((
uöt32_t
 *Ë
m
)[1] & 0xffffË=((
c5
 << 8Ë| 
c4
)

	)

55 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

56 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

57 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

59 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

60 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

61 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

63 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

64 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

65 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
) \

66 && 
m
[8] =
c8


	)

70 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

71 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2


	)

73 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

74 
m
[0] =
c0
 && m[2] =
c2
 && m[3] =
c3


	)

76 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

77 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3


	)

79 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

80 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

82 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

83 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

84 && 
m
[4] =
c4
 && m[5] =
c5


	)

86 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

87 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

88 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6


	)

90 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

91 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

92 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7


	)

94 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

95 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

96 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7
 && m[8] =
c8


	)

103 
ngx_öt_t


104 
	$ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

106 
u_ch¨
 
c
, 
ch
, *
p
, *
m
;

108 
sw_°¨t
 = 0,

109 
sw_mëhod
,

110 
sw_•a˚s_bef‹e_uri
,

111 
sw_schema
,

112 
sw_schema_¶ash
,

113 
sw_schema_¶ash_¶ash
,

114 
sw_ho°_°¨t
,

115 
sw_ho°
,

116 
sw_ho°_íd
,

117 
sw_ho°_ù_lôîÆ
,

118 
sw_p‹t
,

119 
sw_ho°_hâp_09
,

120 
sw_a·î_¶ash_ö_uri
,

121 
sw_check_uri
,

122 
sw_check_uri_hâp_09
,

123 
sw_uri
,

124 
sw_hâp_09
,

125 
sw_hâp_H
,

126 
sw_hâp_HT
,

127 
sw_hâp_HTT
,

128 
sw_hâp_HTTP
,

129 
sw_fú°_maj‹_digô
,

130 
sw_maj‹_digô
,

131 
sw_fú°_mö‹_digô
,

132 
sw_mö‹_digô
,

133 
sw_•a˚s_a·î_digô
,

134 
sw_Æmo°_d⁄e


135 } 
°©e
;

137 
°©e
 = 
r
->state;

139 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

140 
ch
 = *
p
;

142 
°©e
) {

145 
sw_°¨t
:

146 
r
->
ªque°_°¨t
 = 
p
;

148 i‡(
ch
 =
CR
 || ch =
LF
) {

152 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

153  
NGX_HTTP_PARSE_INVALID_METHOD
;

156 
°©e
 = 
sw_mëhod
;

159 
sw_mëhod
:

160 i‡(
ch
 == ' ') {

161 
r
->
mëhod_íd
 = 
p
 - 1;

162 
m
 = 
r
->
ªque°_°¨t
;

164 
p
 - 
m
) {

167 i‡(
	`ngx_°r3_cmp
(
m
, 'G', 'E', 'T', ' ')) {

168 
r
->
mëhod
 = 
NGX_HTTP_GET
;

172 i‡(
	`ngx_°r3_cmp
(
m
, 'P', 'U', 'T', ' ')) {

173 
r
->
mëhod
 = 
NGX_HTTP_PUT
;

180 i‡(
m
[1] == 'O') {

182 i‡(
	`ngx_°r3Ocmp
(
m
, 'P', 'O', 'S', 'T')) {

183 
r
->
mëhod
 = 
NGX_HTTP_POST
;

187 i‡(
	`ngx_°r3Ocmp
(
m
, 'C', 'O', 'P', 'Y')) {

188 
r
->
mëhod
 = 
NGX_HTTP_COPY
;

192 i‡(
	`ngx_°r3Ocmp
(
m
, 'M', 'O', 'V', 'E')) {

193 
r
->
mëhod
 = 
NGX_HTTP_MOVE
;

197 i‡(
	`ngx_°r3Ocmp
(
m
, 'L', 'O', 'C', 'K')) {

198 
r
->
mëhod
 = 
NGX_HTTP_LOCK
;

204 i‡(
	`ngx_°r4cmp
(
m
, 'H', 'E', 'A', 'D')) {

205 
r
->
mëhod
 = 
NGX_HTTP_HEAD
;

213 i‡(
	`ngx_°r5cmp
(
m
, 'M', 'K', 'C', 'O', 'L')) {

214 
r
->
mëhod
 = 
NGX_HTTP_MKCOL
;

217 i‡(
	`ngx_°r5cmp
(
m
, 'P', 'A', 'T', 'C', 'H')) {

218 
r
->
mëhod
 = 
NGX_HTTP_PATCH
;

221 i‡(
	`ngx_°r5cmp
(
m
, 'T', 'R', 'A', 'C', 'E')) {

222 
r
->
mëhod
 = 
NGX_HTTP_TRACE
;

228 i‡(
	`ngx_°r6cmp
(
m
, 'D', 'E', 'L', 'E', 'T', 'E')) {

229 
r
->
mëhod
 = 
NGX_HTTP_DELETE
;

233 i‡(
	`ngx_°r6cmp
(
m
, 'U', 'N', 'L', 'O', 'C', 'K')) {

234 
r
->
mëhod
 = 
NGX_HTTP_UNLOCK
;

241 i‡(
	`ngx_°r7_cmp
(
m
, 'O', 'P', 'T', 'I', 'O', 'N', 'S', ' '))

243 
r
->
mëhod
 = 
NGX_HTTP_OPTIONS
;

249 i‡(
	`ngx_°r8cmp
(
m
, 'P', 'R', 'O', 'P', 'F', 'I', 'N', 'D'))

251 
r
->
mëhod
 = 
NGX_HTTP_PROPFIND
;

257 i‡(
	`ngx_°r9cmp
(
m
,

260 
r
->
mëhod
 = 
NGX_HTTP_PROPPATCH
;

266 
°©e
 = 
sw_•a˚s_bef‹e_uri
;

270 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

271  
NGX_HTTP_PARSE_INVALID_METHOD
;

277 
sw_•a˚s_bef‹e_uri
:

279 i‡(
ch
 == '/') {

280 
r
->
uri_°¨t
 = 
p
;

281 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

285 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

286 i‡(
c
 >= 'a' && c <= 'z') {

287 
r
->
schema_°¨t
 = 
p
;

288 
°©e
 = 
sw_schema
;

292 
ch
) {

296  
NGX_HTTP_PARSE_INVALID_REQUEST
;

300 
sw_schema
:

302 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

303 i‡(
c
 >= 'a' && c <= 'z') {

307 
ch
) {

309 
r
->
schema_íd
 = 
p
;

310 
°©e
 = 
sw_schema_¶ash
;

313  
NGX_HTTP_PARSE_INVALID_REQUEST
;

317 
sw_schema_¶ash
:

318 
ch
) {

320 
°©e
 = 
sw_schema_¶ash_¶ash
;

323  
NGX_HTTP_PARSE_INVALID_REQUEST
;

327 
sw_schema_¶ash_¶ash
:

328 
ch
) {

330 
°©e
 = 
sw_ho°_°¨t
;

333  
NGX_HTTP_PARSE_INVALID_REQUEST
;

337 
sw_ho°_°¨t
:

339 
r
->
ho°_°¨t
 = 
p
;

341 i‡(
ch
 == '[') {

342 
°©e
 = 
sw_ho°_ù_lôîÆ
;

346 
°©e
 = 
sw_ho°
;

350 
sw_ho°
:

352 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

353 i‡(
c
 >= 'a' && c <= 'z') {

357 i‡((
ch
 >= '0' && ch <= '9') || ch == '.' || ch == '-') {

363 
sw_ho°_íd
:

365 
r
->
ho°_íd
 = 
p
;

367 
ch
) {

369 
°©e
 = 
sw_p‹t
;

372 
r
->
uri_°¨t
 = 
p
;

373 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

380 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

381 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

382 
°©e
 = 
sw_ho°_hâp_09
;

385  
NGX_HTTP_PARSE_INVALID_REQUEST
;

389 
sw_ho°_ù_lôîÆ
:

391 i‡(
ch
 >= '0' && ch <= '9') {

395 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

396 i‡(
c
 >= 'a' && c <= 'z') {

400 
ch
) {

404 
°©e
 = 
sw_ho°_íd
;

426  
NGX_HTTP_PARSE_INVALID_REQUEST
;

430 
sw_p‹t
:

431 i‡(
ch
 >= '0' && ch <= '9') {

435 
ch
) {

437 
r
->
p‹t_íd
 = 
p
;

438 
r
->
uri_°¨t
 = 
p
;

439 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

442 
r
->
p‹t_íd
 = 
p
;

447 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

448 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

449 
°©e
 = 
sw_ho°_hâp_09
;

452  
NGX_HTTP_PARSE_INVALID_REQUEST
;

457 
sw_ho°_hâp_09
:

458 
ch
) {

461 
CR
:

462 
r
->
hâp_mö‹
 = 9;

463 
°©e
 = 
sw_Æmo°_d⁄e
;

465 
LF
:

466 
r
->
hâp_mö‹
 = 9;

467 
d⁄e
;

469 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

470 
°©e
 = 
sw_hâp_H
;

473  
NGX_HTTP_PARSE_INVALID_REQUEST
;

479 
sw_a·î_¶ash_ö_uri
:

481 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

482 
°©e
 = 
sw_check_uri
;

486 
ch
) {

488 
r
->
uri_íd
 = 
p
;

489 
°©e
 = 
sw_check_uri_hâp_09
;

491 
CR
:

492 
r
->
uri_íd
 = 
p
;

493 
r
->
hâp_mö‹
 = 9;

494 
°©e
 = 
sw_Æmo°_d⁄e
;

496 
LF
:

497 
r
->
uri_íd
 = 
p
;

498 
r
->
hâp_mö‹
 = 9;

499 
d⁄e
;

501 
r
->
com∂ex_uri
 = 1;

502 
°©e
 = 
sw_uri
;

505 
r
->
quŸed_uri
 = 1;

506 
°©e
 = 
sw_uri
;

509 
r
->
com∂ex_uri
 = 1;

510 
°©e
 = 
sw_uri
;

512 #i‡(
NGX_WIN32
)

514 
r
->
com∂ex_uri
 = 1;

515 
°©e
 = 
sw_uri
;

519 
r
->
¨gs_°¨t
 = 
p
 + 1;

520 
°©e
 = 
sw_uri
;

523 
r
->
com∂ex_uri
 = 1;

524 
°©e
 = 
sw_uri
;

527 
r
->
∂us_ö_uri
 = 1;

530  
NGX_HTTP_PARSE_INVALID_REQUEST
;

532 
°©e
 = 
sw_check_uri
;

538 
sw_check_uri
:

540 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

544 
ch
) {

546 #i‡(
NGX_WIN32
)

547 i‡(
r
->
uri_ext
 =
p
) {

548 
r
->
com∂ex_uri
 = 1;

549 
°©e
 = 
sw_uri
;

553 
r
->
uri_ext
 = 
NULL
;

554 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

557 
r
->
uri_ext
 = 
p
 + 1;

560 
r
->
uri_íd
 = 
p
;

561 
°©e
 = 
sw_check_uri_hâp_09
;

563 
CR
:

564 
r
->
uri_íd
 = 
p
;

565 
r
->
hâp_mö‹
 = 9;

566 
°©e
 = 
sw_Æmo°_d⁄e
;

568 
LF
:

569 
r
->
uri_íd
 = 
p
;

570 
r
->
hâp_mö‹
 = 9;

571 
d⁄e
;

572 #i‡(
NGX_WIN32
)

574 
r
->
com∂ex_uri
 = 1;

575 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

579 
r
->
quŸed_uri
 = 1;

580 
°©e
 = 
sw_uri
;

583 
r
->
¨gs_°¨t
 = 
p
 + 1;

584 
°©e
 = 
sw_uri
;

587 
r
->
com∂ex_uri
 = 1;

588 
°©e
 = 
sw_uri
;

591 
r
->
∂us_ö_uri
 = 1;

594  
NGX_HTTP_PARSE_INVALID_REQUEST
;

599 
sw_check_uri_hâp_09
:

600 
ch
) {

603 
CR
:

604 
r
->
hâp_mö‹
 = 9;

605 
°©e
 = 
sw_Æmo°_d⁄e
;

607 
LF
:

608 
r
->
hâp_mö‹
 = 9;

609 
d⁄e
;

611 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

612 
°©e
 = 
sw_hâp_H
;

615 
r
->
•a˚_ö_uri
 = 1;

616 
°©e
 = 
sw_check_uri
;

623 
sw_uri
:

625 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

629 
ch
) {

631 
r
->
uri_íd
 = 
p
;

632 
°©e
 = 
sw_hâp_09
;

634 
CR
:

635 
r
->
uri_íd
 = 
p
;

636 
r
->
hâp_mö‹
 = 9;

637 
°©e
 = 
sw_Æmo°_d⁄e
;

639 
LF
:

640 
r
->
uri_íd
 = 
p
;

641 
r
->
hâp_mö‹
 = 9;

642 
d⁄e
;

644 
r
->
com∂ex_uri
 = 1;

647  
NGX_HTTP_PARSE_INVALID_REQUEST
;

652 
sw_hâp_09
:

653 
ch
) {

656 
CR
:

657 
r
->
hâp_mö‹
 = 9;

658 
°©e
 = 
sw_Æmo°_d⁄e
;

660 
LF
:

661 
r
->
hâp_mö‹
 = 9;

662 
d⁄e
;

664 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

665 
°©e
 = 
sw_hâp_H
;

668 
r
->
•a˚_ö_uri
 = 1;

669 
°©e
 = 
sw_uri
;

674 
sw_hâp_H
:

675 
ch
) {

677 
°©e
 = 
sw_hâp_HT
;

680  
NGX_HTTP_PARSE_INVALID_REQUEST
;

684 
sw_hâp_HT
:

685 
ch
) {

687 
°©e
 = 
sw_hâp_HTT
;

690  
NGX_HTTP_PARSE_INVALID_REQUEST
;

694 
sw_hâp_HTT
:

695 
ch
) {

697 
°©e
 = 
sw_hâp_HTTP
;

700  
NGX_HTTP_PARSE_INVALID_REQUEST
;

704 
sw_hâp_HTTP
:

705 
ch
) {

707 
°©e
 = 
sw_fú°_maj‹_digô
;

710  
NGX_HTTP_PARSE_INVALID_REQUEST
;

715 
sw_fú°_maj‹_digô
:

716 i‡(
ch
 < '1' || ch > '9') {

717  
NGX_HTTP_PARSE_INVALID_REQUEST
;

720 
r
->
hâp_maj‹
 = 
ch
 - '0';

721 
°©e
 = 
sw_maj‹_digô
;

725 
sw_maj‹_digô
:

726 i‡(
ch
 == '.') {

727 
°©e
 = 
sw_fú°_mö‹_digô
;

731 i‡(
ch
 < '0' || ch > '9') {

732  
NGX_HTTP_PARSE_INVALID_REQUEST
;

735 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

739 
sw_fú°_mö‹_digô
:

740 i‡(
ch
 < '0' || ch > '9') {

741  
NGX_HTTP_PARSE_INVALID_REQUEST
;

744 
r
->
hâp_mö‹
 = 
ch
 - '0';

745 
°©e
 = 
sw_mö‹_digô
;

749 
sw_mö‹_digô
:

750 i‡(
ch
 =
CR
) {

751 
°©e
 = 
sw_Æmo°_d⁄e
;

755 i‡(
ch
 =
LF
) {

756 
d⁄e
;

759 i‡(
ch
 == ' ') {

760 
°©e
 = 
sw_•a˚s_a·î_digô
;

764 i‡(
ch
 < '0' || ch > '9') {

765  
NGX_HTTP_PARSE_INVALID_REQUEST
;

768 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

771 
sw_•a˚s_a·î_digô
:

772 
ch
) {

775 
CR
:

776 
°©e
 = 
sw_Æmo°_d⁄e
;

778 
LF
:

779 
d⁄e
;

781  
NGX_HTTP_PARSE_INVALID_REQUEST
;

786 
sw_Æmo°_d⁄e
:

787 
r
->
ªque°_íd
 = 
p
 - 1;

788 
ch
) {

789 
LF
:

790 
d⁄e
;

792  
NGX_HTTP_PARSE_INVALID_REQUEST
;

797 
b
->
pos
 = 
p
;

798 
r
->
°©e
 = state;

800  
NGX_AGAIN
;

802 
d⁄e
:

804 
b
->
pos
 = 
p
 + 1;

806 i‡(
r
->
ªque°_íd
 =
NULL
) {

807 
r
->
ªque°_íd
 = 
p
;

810 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

811 
r
->
°©e
 = 
sw_°¨t
;

813 i‡(
r
->
hâp_vîsi⁄
 =9 &&Ñ->
mëhod
 !
NGX_HTTP_GET
) {

814  
NGX_HTTP_PARSE_INVALID_09_METHOD
;

817  
NGX_OK
;

818 
	}
}

821 
ngx_öt_t


822 
	$ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

823 
ngx_uöt_t
 
Ælow_undîsc‹es
)

825 
u_ch¨
 
c
, 
ch
, *
p
;

826 
ngx_uöt_t
 
hash
, 
i
;

828 
sw_°¨t
 = 0,

829 
sw_«me
,

830 
sw_•a˚_bef‹e_vÆue
,

831 
sw_vÆue
,

832 
sw_•a˚_a·î_vÆue
,

833 
sw_ign‹e_löe
,

834 
sw_Æmo°_d⁄e
,

835 
sw_hódî_Æmo°_d⁄e


836 } 
°©e
;

840 
u_ch¨
 
lowˇ£
[] =

850 
°©e
 = 
r
->state;

851 
hash
 = 
r
->
hódî_hash
;

852 
i
 = 
r
->
lowˇ£_ödex
;

854 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

855 
ch
 = *
p
;

857 
°©e
) {

860 
sw_°¨t
:

861 
r
->
hódî_«me_°¨t
 = 
p
;

862 
r
->
övÆid_hódî
 = 0;

864 
ch
) {

865 
CR
:

866 
r
->
hódî_íd
 = 
p
;

867 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

869 
LF
:

870 
r
->
hódî_íd
 = 
p
;

871 
hódî_d⁄e
;

873 
°©e
 = 
sw_«me
;

875 
c
 = 
lowˇ£
[
ch
];

877 i‡(
c
) {

878 
hash
 = 
	`ngx_hash
(0, 
c
);

879 
r
->
lowˇ£_hódî
[0] = 
c
;

880 
i
 = 1;

884 i‡(
ch
 == '\0') {

885  
NGX_HTTP_PARSE_INVALID_HEADER
;

888 
r
->
övÆid_hódî
 = 1;

896 
sw_«me
:

897 
c
 = 
lowˇ£
[
ch
];

899 i‡(
c
) {

900 
hash
 = 
	`ngx_hash
(hash, 
c
);

901 
r
->
lowˇ£_hódî
[
i
++] = 
c
;

902 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

906 i‡(
ch
 == '_') {

907 i‡(
Ælow_undîsc‹es
) {

908 
hash
 = 
	`ngx_hash
(hash, 
ch
);

909 
r
->
lowˇ£_hódî
[
i
++] = 
ch
;

910 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

913 
r
->
övÆid_hódî
 = 1;

919 i‡(
ch
 == ':') {

920 
r
->
hódî_«me_íd
 = 
p
;

921 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

925 i‡(
ch
 =
CR
) {

926 
r
->
hódî_«me_íd
 = 
p
;

927 
r
->
hódî_°¨t
 = 
p
;

928 
r
->
hódî_íd
 = 
p
;

929 
°©e
 = 
sw_Æmo°_d⁄e
;

933 i‡(
ch
 =
LF
) {

934 
r
->
hódî_«me_íd
 = 
p
;

935 
r
->
hódî_°¨t
 = 
p
;

936 
r
->
hódî_íd
 = 
p
;

937 
d⁄e
;

941 i‡(
ch
 == '/'

942 && 
r
->
up°ªam


943 && 
p
 - 
r
->
hódî_«me_°¨t
 == 4

944 && 
	`ngx_°∫cmp
(
r
->
hódî_«me_°¨t
, "HTTP", 4) == 0)

946 
°©e
 = 
sw_ign‹e_löe
;

950 i‡(
ch
 == '\0') {

951  
NGX_HTTP_PARSE_INVALID_HEADER
;

954 
r
->
övÆid_hódî
 = 1;

959 
sw_•a˚_bef‹e_vÆue
:

960 
ch
) {

963 
CR
:

964 
r
->
hódî_°¨t
 = 
p
;

965 
r
->
hódî_íd
 = 
p
;

966 
°©e
 = 
sw_Æmo°_d⁄e
;

968 
LF
:

969 
r
->
hódî_°¨t
 = 
p
;

970 
r
->
hódî_íd
 = 
p
;

971 
d⁄e
;

973  
NGX_HTTP_PARSE_INVALID_HEADER
;

975 
r
->
hódî_°¨t
 = 
p
;

976 
°©e
 = 
sw_vÆue
;

982 
sw_vÆue
:

983 
ch
) {

985 
r
->
hódî_íd
 = 
p
;

986 
°©e
 = 
sw_•a˚_a·î_vÆue
;

988 
CR
:

989 
r
->
hódî_íd
 = 
p
;

990 
°©e
 = 
sw_Æmo°_d⁄e
;

992 
LF
:

993 
r
->
hódî_íd
 = 
p
;

994 
d⁄e
;

996  
NGX_HTTP_PARSE_INVALID_HEADER
;

1001 
sw_•a˚_a·î_vÆue
:

1002 
ch
) {

1005 
CR
:

1006 
°©e
 = 
sw_Æmo°_d⁄e
;

1008 
LF
:

1009 
d⁄e
;

1011  
NGX_HTTP_PARSE_INVALID_HEADER
;

1013 
°©e
 = 
sw_vÆue
;

1019 
sw_ign‹e_löe
:

1020 
ch
) {

1021 
LF
:

1022 
°©e
 = 
sw_°¨t
;

1030 
sw_Æmo°_d⁄e
:

1031 
ch
) {

1032 
LF
:

1033 
d⁄e
;

1034 
CR
:

1037  
NGX_HTTP_PARSE_INVALID_HEADER
;

1042 
sw_hódî_Æmo°_d⁄e
:

1043 
ch
) {

1044 
LF
:

1045 
hódî_d⁄e
;

1047  
NGX_HTTP_PARSE_INVALID_HEADER
;

1052 
b
->
pos
 = 
p
;

1053 
r
->
°©e
 = state;

1054 
r
->
hódî_hash
 = 
hash
;

1055 
r
->
lowˇ£_ödex
 = 
i
;

1057  
NGX_AGAIN
;

1059 
d⁄e
:

1061 
b
->
pos
 = 
p
 + 1;

1062 
r
->
°©e
 = 
sw_°¨t
;

1063 
r
->
hódî_hash
 = 
hash
;

1064 
r
->
lowˇ£_ödex
 = 
i
;

1066  
NGX_OK
;

1068 
hódî_d⁄e
:

1070 
b
->
pos
 = 
p
 + 1;

1071 
r
->
°©e
 = 
sw_°¨t
;

1073  
NGX_HTTP_PARSE_HEADER_DONE
;

1074 
	}
}

1077 
ngx_öt_t


1078 
	$ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
mîge_¶ashes
)

1080 
u_ch¨
 
c
, 
ch
, 
decoded
, *
p
, *
u
;

1082 
sw_usuÆ
 = 0,

1083 
sw_¶ash
,

1084 
sw_dŸ
,

1085 
sw_dŸ_dŸ
,

1086 
sw_quŸed
,

1087 
sw_quŸed_£c⁄d


1088 } 
°©e
, 
quŸed_°©e
;

1090 #i‡(
NGX_SUPPRESS_WARN
)

1091 
decoded
 = '\0';

1092 
quŸed_°©e
 = 
sw_usuÆ
;

1095 
°©e
 = 
sw_usuÆ
;

1096 
p
 = 
r
->
uri_°¨t
;

1097 
u
 = 
r
->
uri
.
d©a
;

1098 
r
->
uri_ext
 = 
NULL
;

1099 
r
->
¨gs_°¨t
 = 
NULL
;

1101 
ch
 = *
p
++;

1103 
p
 <
r
->
uri_íd
) {

1111 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1112 "s:%d in:'%Xd:%c', out:'%c'", 
°©e
, 
ch
, ch, *
u
);

1114 
°©e
) {

1116 
sw_usuÆ
:

1118 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1119 *
u
++ = 
ch
;

1120 
ch
 = *
p
++;

1124 
ch
) {

1125 #i‡(
NGX_WIN32
)

1127 i‡(
u
 - 2 >
r
->
uri
.
d©a


1128 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1130 
u
--;

1133 
r
->
uri_ext
 = 
NULL
;

1135 i‡(
p
 =
r
->
uri_°¨t
 +Ñ->
uri
.
Àn
) {

1145 
°©e
 = 
sw_¶ash
;

1146 *
u
++ = '/';

1150 #i‡(
NGX_WIN32
)

1151 i‡(
u
 - 2 >
r
->
uri
.
d©a


1152 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1154 
u
--;

1157 
r
->
uri_ext
 = 
NULL
;

1158 
°©e
 = 
sw_¶ash
;

1159 *
u
++ = 
ch
;

1162 
quŸed_°©e
 = 
°©e
;

1163 
°©e
 = 
sw_quŸed
;

1166 
r
->
¨gs_°¨t
 = 
p
;

1167 
¨gs
;

1169 
d⁄e
;

1171 
r
->
uri_ext
 = 
u
 + 1;

1172 *
u
++ = 
ch
;

1175 
r
->
∂us_ö_uri
 = 1;

1178 *
u
++ = 
ch
;

1182 
ch
 = *
p
++;

1185 
sw_¶ash
:

1187 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1188 
°©e
 = 
sw_usuÆ
;

1189 *
u
++ = 
ch
;

1190 
ch
 = *
p
++;

1194 
ch
) {

1195 #i‡(
NGX_WIN32
)

1200 i‡(!
mîge_¶ashes
) {

1201 *
u
++ = 
ch
;

1205 
°©e
 = 
sw_dŸ
;

1206 *
u
++ = 
ch
;

1209 
quŸed_°©e
 = 
°©e
;

1210 
°©e
 = 
sw_quŸed
;

1213 
r
->
¨gs_°¨t
 = 
p
;

1214 
¨gs
;

1216 
d⁄e
;

1218 
r
->
∂us_ö_uri
 = 1;

1220 
°©e
 = 
sw_usuÆ
;

1221 *
u
++ = 
ch
;

1225 
ch
 = *
p
++;

1228 
sw_dŸ
:

1230 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1231 
°©e
 = 
sw_usuÆ
;

1232 *
u
++ = 
ch
;

1233 
ch
 = *
p
++;

1237 
ch
) {

1238 #i‡(
NGX_WIN32
)

1242 
°©e
 = 
sw_¶ash
;

1243 
u
--;

1246 
°©e
 = 
sw_dŸ_dŸ
;

1247 *
u
++ = 
ch
;

1250 
quŸed_°©e
 = 
°©e
;

1251 
°©e
 = 
sw_quŸed
;

1254 
r
->
¨gs_°¨t
 = 
p
;

1255 
¨gs
;

1257 
d⁄e
;

1259 
r
->
∂us_ö_uri
 = 1;

1261 
°©e
 = 
sw_usuÆ
;

1262 *
u
++ = 
ch
;

1266 
ch
 = *
p
++;

1269 
sw_dŸ_dŸ
:

1271 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1272 
°©e
 = 
sw_usuÆ
;

1273 *
u
++ = 
ch
;

1274 
ch
 = *
p
++;

1278 
ch
) {

1279 #i‡(
NGX_WIN32
)

1283 
°©e
 = 
sw_¶ash
;

1284 
u
 -= 5;

1286 i‡(
u
 < 
r
->
uri
.
d©a
) {

1287  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1289 i‡(*
u
 == '/') {

1290 
u
++;

1293 
u
--;

1297 
quŸed_°©e
 = 
°©e
;

1298 
°©e
 = 
sw_quŸed
;

1301 
r
->
¨gs_°¨t
 = 
p
;

1302 
¨gs
;

1304 
d⁄e
;

1306 
r
->
∂us_ö_uri
 = 1;

1308 
°©e
 = 
sw_usuÆ
;

1309 *
u
++ = 
ch
;

1313 
ch
 = *
p
++;

1316 
sw_quŸed
:

1317 
r
->
quŸed_uri
 = 1;

1319 i‡(
ch
 >= '0' && ch <= '9') {

1320 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1321 
°©e
 = 
sw_quŸed_£c⁄d
;

1322 
ch
 = *
p
++;

1326 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1327 i‡(
c
 >= 'a' && c <= 'f') {

1328 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1329 
°©e
 = 
sw_quŸed_£c⁄d
;

1330 
ch
 = *
p
++;

1334  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1336 
sw_quŸed_£c⁄d
:

1337 i‡(
ch
 >= '0' && ch <= '9') {

1338 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1340 i‡(
ch
 == '%' || ch == '#') {

1341 
°©e
 = 
sw_usuÆ
;

1342 *
u
++ = 
ch
;

1343 
ch
 = *
p
++;

1346 } i‡(
ch
 == '\0') {

1347  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1350 
°©e
 = 
quŸed_°©e
;

1354 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1355 i‡(
c
 >= 'a' && c <= 'f') {

1356 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1358 i‡(
ch
 == '?') {

1359 
°©e
 = 
sw_usuÆ
;

1360 *
u
++ = 
ch
;

1361 
ch
 = *
p
++;

1364 } i‡(
ch
 == '+') {

1365 
r
->
∂us_ö_uri
 = 1;

1368 
°©e
 = 
quŸed_°©e
;

1372  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1376 
d⁄e
:

1378 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1380 i‡(
r
->
uri_ext
) {

1381 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1382 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1385 
r
->
uri_ext
 = 
NULL
;

1387  
NGX_OK
;

1389 
¨gs
:

1391 
p
 < 
r
->
uri_íd
) {

1392 i‡(*
p
++ != '#') {

1396 
r
->
¨gs
.
Àn
 = 
p
 - 1 -Ñ->
¨gs_°¨t
;

1397 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1398 
r
->
¨gs_°¨t
 = 
NULL
;

1403 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1405 i‡(
r
->
uri_ext
) {

1406 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1407 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1410 
r
->
uri_ext
 = 
NULL
;

1412  
NGX_OK
;

1413 
	}
}

1416 
ngx_öt_t


1417 
	$ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

1418 
ngx_hâp_°©us_t
 *
°©us
)

1420 
u_ch¨
 
ch
;

1421 
u_ch¨
 *
p
;

1423 
sw_°¨t
 = 0,

1424 
sw_H
,

1425 
sw_HT
,

1426 
sw_HTT
,

1427 
sw_HTTP
,

1428 
sw_fú°_maj‹_digô
,

1429 
sw_maj‹_digô
,

1430 
sw_fú°_mö‹_digô
,

1431 
sw_mö‹_digô
,

1432 
sw_°©us
,

1433 
sw_•a˚_a·î_°©us
,

1434 
sw_°©us_ãxt
,

1435 
sw_Æmo°_d⁄e


1436 } 
°©e
;

1438 
°©e
 = 
r
->state;

1440 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1441 
ch
 = *
p
;

1443 
°©e
) {

1446 
sw_°¨t
:

1447 
ch
) {

1449 
°©e
 = 
sw_H
;

1452  
NGX_ERROR
;

1456 
sw_H
:

1457 
ch
) {

1459 
°©e
 = 
sw_HT
;

1462  
NGX_ERROR
;

1466 
sw_HT
:

1467 
ch
) {

1469 
°©e
 = 
sw_HTT
;

1472  
NGX_ERROR
;

1476 
sw_HTT
:

1477 
ch
) {

1479 
°©e
 = 
sw_HTTP
;

1482  
NGX_ERROR
;

1486 
sw_HTTP
:

1487 
ch
) {

1489 
°©e
 = 
sw_fú°_maj‹_digô
;

1492  
NGX_ERROR
;

1497 
sw_fú°_maj‹_digô
:

1498 i‡(
ch
 < '1' || ch > '9') {

1499  
NGX_ERROR
;

1502 
r
->
hâp_maj‹
 = 
ch
 - '0';

1503 
°©e
 = 
sw_maj‹_digô
;

1507 
sw_maj‹_digô
:

1508 i‡(
ch
 == '.') {

1509 
°©e
 = 
sw_fú°_mö‹_digô
;

1513 i‡(
ch
 < '0' || ch > '9') {

1514  
NGX_ERROR
;

1517 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

1521 
sw_fú°_mö‹_digô
:

1522 i‡(
ch
 < '0' || ch > '9') {

1523  
NGX_ERROR
;

1526 
r
->
hâp_mö‹
 = 
ch
 - '0';

1527 
°©e
 = 
sw_mö‹_digô
;

1531 
sw_mö‹_digô
:

1532 i‡(
ch
 == ' ') {

1533 
°©e
 = 
sw_°©us
;

1537 i‡(
ch
 < '0' || ch > '9') {

1538  
NGX_ERROR
;

1541 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

1545 
sw_°©us
:

1546 i‡(
ch
 == ' ') {

1550 i‡(
ch
 < '0' || ch > '9') {

1551  
NGX_ERROR
;

1554 
°©us
->
code
 = sètus->codê* 10 + 
ch
 - '0';

1556 i‡(++
°©us
->
cou¡
 == 3) {

1557 
°©e
 = 
sw_•a˚_a·î_°©us
;

1558 
°©us
->
°¨t
 = 
p
 - 2;

1564 
sw_•a˚_a·î_°©us
:

1565 
ch
) {

1567 
°©e
 = 
sw_°©us_ãxt
;

1570 
°©e
 = 
sw_°©us_ãxt
;

1572 
CR
:

1573 
°©e
 = 
sw_Æmo°_d⁄e
;

1575 
LF
:

1576 
d⁄e
;

1578  
NGX_ERROR
;

1583 
sw_°©us_ãxt
:

1584 
ch
) {

1585 
CR
:

1586 
°©e
 = 
sw_Æmo°_d⁄e
;

1589 
LF
:

1590 
d⁄e
;

1595 
sw_Æmo°_d⁄e
:

1596 
°©us
->
íd
 = 
p
 - 1;

1597 
ch
) {

1598 
LF
:

1599 
d⁄e
;

1601  
NGX_ERROR
;

1606 
b
->
pos
 = 
p
;

1607 
r
->
°©e
 = state;

1609  
NGX_AGAIN
;

1611 
d⁄e
:

1613 
b
->
pos
 = 
p
 + 1;

1615 i‡(
°©us
->
íd
 =
NULL
) {

1616 
°©us
->
íd
 = 
p
;

1619 
°©us
->
hâp_vîsi⁄
 = 
r
->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

1620 
r
->
°©e
 = 
sw_°¨t
;

1622  
NGX_OK
;

1623 
	}
}

1626 
ngx_öt_t


1627 
	$ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

1628 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
)

1630 
u_ch¨
 
ch
, *
p
;

1631 
size_t
 
Àn
;

1633 
Àn
 = 
uri
->len;

1634 
p
 = 
uri
->
d©a
;

1636 i‡(
Àn
 =0 || 
p
[0] == '?') {

1637 
unß„
;

1640 i‡(
p
[0] ='.' && 
Àn
 =3 &&Ö[1] ='.' && (
	`ngx_∑th_£∑øt‹
(p[2]))) {

1641 
unß„
;

1644  ; 
Àn
;Üen--) {

1646 
ch
 = *
p
++;

1648 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1652 i‡(
ch
 == '?') {

1653 
¨gs
->
Àn
 =Üen - 1;

1654 
¨gs
->
d©a
 = 
p
;

1655 
uri
->
Àn
 -=Üen;

1657  
NGX_OK
;

1660 i‡(
ch
 == '\0') {

1661 
unß„
;

1664 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1668 i‡(
p
[0] ='.' &&Ö[1] ='.' && 
	`ngx_∑th_£∑øt‹
(p[2])) {

1669 
unß„
;

1674  
NGX_OK
;

1676 
unß„
:

1678 i‡(*
Êags
 & 
NGX_HTTP_LOG_UNSAFE
) {

1679 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1680 "unß„ URI \"%V\" wa†dëe˘ed", 
uri
);

1683  
NGX_ERROR
;

1684 
	}
}

1687 
ngx_öt_t


1688 
	$ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

1689 
ngx_°r_t
 *
vÆue
)

1691 
ngx_uöt_t
 
i
;

1692 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
, 
ch
;

1693 
ngx_èbÀ_ñt_t
 **
h
;

1695 
h
 = 
hódîs
->
ñts
;

1697 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

1699 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

1700 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

1702 i‡(
«me
->
Àn
 > 
h
[
i
]->
vÆue
.len) {

1706 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

1707 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

1709 
°¨t
 < 
íd
) {

1711 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

1712 
skù
;

1715 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

1719 i‡(
vÆue
 =
NULL
) {

1720 i‡(
°¨t
 =
íd
 || *start == ',') {

1721  
i
;

1724 
skù
;

1727 i‡(
°¨t
 =
íd
 || *start++ != '=') {

1729 
skù
;

1732 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1734 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

1738 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

1739 
vÆue
->
d©a
 = 
°¨t
;

1741  
i
;

1743 
skù
:

1745 
°¨t
 < 
íd
) {

1746 
ch
 = *
°¨t
++;

1747 i‡(
ch
 == ';' || ch == ',') {

1752 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1756  
NGX_DECLINED
;

1757 
	}
}

1760 
ngx_öt_t


1761 
	$ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
, 
ngx_°r_t
 *
vÆue
)

1763 
u_ch¨
 *
p
, *
œ°
;

1765 i‡(
r
->
¨gs
.
Àn
 == 0) {

1766  
NGX_DECLINED
;

1769 
p
 = 
r
->
¨gs
.
d©a
;

1770 
œ°
 = 
p
 + 
r
->
¨gs
.
Àn
;

1772  ; 
p
 < 
œ°
;Ö++) {

1776 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
 - 1, 
«me
, 
Àn
 - 1);

1778 i‡(
p
 =
NULL
) {

1779  
NGX_DECLINED
;

1782 i‡((
p
 =
r
->
¨gs
.
d©a
 || *’ - 1Ë='&'Ë&& *’ + 
Àn
) == '=') {

1784 
vÆue
->
d©a
 = 
p
 + 
Àn
 + 1;

1786 
p
 = 
	`ngx_°æchr
’, 
œ°
, '&');

1788 i‡(
p
 =
NULL
) {

1789 
p
 = 
r
->
¨gs
.
d©a
 +Ñ->¨gs.
Àn
;

1792 
vÆue
->
Àn
 = 
p
 - vÆue->
d©a
;

1794  
NGX_OK
;

1798  
NGX_DECLINED
;

1799 
	}
}

1803 
	$ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

1805 
u_ch¨
 *
p
, *
œ°
;

1807 
œ°
 = 
uri
->
d©a
 + uri->
Àn
;

1809 
p
 = 
	`ngx_°æchr
(
uri
->
d©a
, 
œ°
, '?');

1811 i‡(
p
) {

1812 
uri
->
Àn
 = 
p
 - uri->
d©a
;

1813 
p
++;

1814 
¨gs
->
Àn
 = 
œ°
 - 
p
;

1815 
¨gs
->
d©a
 = 
p
;

1818 
¨gs
->
Àn
 = 0;

1820 
	}
}

	@src/http/ngx_http_parse_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
	gmday
[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

15 
time_t


16 
	$ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
)

18 
u_ch¨
 *
p
, *
íd
;

19 
ngx_öt_t
 
m⁄th
;

20 
ngx_uöt_t
 
day
, 
yór
, 
hour
, 
mö
, 
£c
;

21 
uöt64_t
 
time
;

23 
no
 = 0,

24 
rfc822
,

25 
rfc850
,

26 
isoc


27 } 
fmt
;

29 
fmt
 = 0;

30 
íd
 = 
vÆue
 + 
Àn
;

32 #i‡(
NGX_SUPPRESS_WARN
)

33 
day
 = 32;

34 
yór
 = 2038;

37 
p
 = 
vÆue
;Ö < 
íd
;Ö++) {

38 i‡(*
p
 == ',') {

42 i‡(*
p
 == ' ') {

43 
fmt
 = 
isoc
;

48 
p
++;Ö < 
íd
;Ö++)

49 i‡(*
p
 != ' ') {

53 i‡(
íd
 - 
p
 < 18) {

54  
NGX_ERROR
;

57 i‡(
fmt
 !
isoc
) {

58 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

59  
NGX_ERROR
;

62 
day
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

63 
p
 += 2;

65 i‡(*
p
 == ' ') {

66 i‡(
íd
 - 
p
 < 18) {

67  
NGX_ERROR
;

69 
fmt
 = 
rfc822
;

71 } i‡(*
p
 == '-') {

72 
fmt
 = 
rfc850
;

75  
NGX_ERROR
;

78 
p
++;

81 *
p
) {

84 
m⁄th
 = *(
p
 + 1) == 'a' ? 0 : *(p + 2) == 'n' ? 5 : 6;

88 
m⁄th
 = 1;

92 
m⁄th
 = *(
p
 + 2) == 'r' ? 2 : 4;

96 
m⁄th
 = *(
p
 + 1) == 'p' ? 3 : 7;

100 
m⁄th
 = 8;

104 
m⁄th
 = 9;

108 
m⁄th
 = 10;

112 
m⁄th
 = 11;

116  
NGX_ERROR
;

119 
p
 += 3;

121 i‡((
fmt
 =
rfc822
 && *
p
 !' 'Ë|| (fmà=
rfc850
 && *p != '-')) {

122  
NGX_ERROR
;

125 
p
++;

127 i‡(
fmt
 =
rfc822
) {

128 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

129 || *(
p
 + 2) < '0' || *(p + 2) > '9'

130 || *(
p
 + 3) < '0' || *(p + 3) > '9')

132  
NGX_ERROR
;

135 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

136 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

137 
p
 += 4;

139 } i‡(
fmt
 =
rfc850
) {

140 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

141  
NGX_ERROR
;

144 
yór
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

145 
yór
 += (year < 70) ? 2000 : 1900;

146 
p
 += 2;

149 i‡(
fmt
 =
isoc
) {

150 i‡(*
p
 == ' ') {

151 
p
++;

154 i‡(*
p
 < '0' || *p > '9') {

155  
NGX_ERROR
;

158 
day
 = *
p
++ - '0';

160 i‡(*
p
 != ' ') {

161 i‡(*
p
 < '0' || *p > '9') {

162  
NGX_ERROR
;

165 
day
 = day * 10 + *
p
++ - '0';

168 i‡(
íd
 - 
p
 < 14) {

169  
NGX_ERROR
;

173 i‡(*
p
++ != ' ') {

174  
NGX_ERROR
;

177 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

178  
NGX_ERROR
;

181 
hour
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

182 
p
 += 2;

184 i‡(*
p
++ != ':') {

185  
NGX_ERROR
;

188 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

189  
NGX_ERROR
;

192 
mö
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

193 
p
 += 2;

195 i‡(*
p
++ != ':') {

196  
NGX_ERROR
;

199 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

200  
NGX_ERROR
;

203 
£c
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

205 i‡(
fmt
 =
isoc
) {

206 
p
 += 2;

208 i‡(*
p
++ != ' ') {

209  
NGX_ERROR
;

212 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

213 || *(
p
 + 2) < '0' || *(p + 2) > '9'

214 || *(
p
 + 3) < '0' || *(p + 3) > '9')

216  
NGX_ERROR
;

219 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

220 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

223 i‡(
hour
 > 23 || 
mö
 > 59 || 
£c
 > 59) {

224  
NGX_ERROR
;

227 i‡(
day
 =29 && 
m⁄th
 == 1) {

228 i‡((
yór
 & 3) || ((year % 100 == 0) && (year % 400) != 0)) {

229  
NGX_ERROR
;

232 } i‡(
day
 > 
mday
[
m⁄th
]) {

233  
NGX_ERROR
;

241 i‡(--
m⁄th
 <= 0) {

242 
m⁄th
 += 12;

243 
yór
 -= 1;

248 
time
 = (
uöt64_t
) (

251 365 * 
yór
 + year / 4 - year / 100 + year / 400

255 + 367 * 
m⁄th
 / 12 - 30

259 + 
day
 - 1

266 - 719527 + 31 + 28Ë* 86400 + 
hour
 * 3600 + 
mö
 * 60 + 
£c
;

268 #i‡(
NGX_TIME_T_SIZE
 <= 4)

270 i‡(
time
 > 0x7fffffff) {

271  
NGX_ERROR
;

276  (
time_t
Ë
time
;

277 
	}
}

	@src/http/ngx_http_postpone_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_chaö_t
 *
ö
);

15 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_po°p⁄e_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL


33 
ngx_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

52 
ngx_öt_t


53 
	$ngx_hâp_po°p⁄e_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

55 
ngx_c⁄√˘i⁄_t
 *
c
;

56 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
;

58 
c
 = 
r
->
c⁄√˘i⁄
;

60 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

61 "hâ∞po°p⁄êfûã∏\"%V?%V\" %p", &
r
->
uri
, &r->
¨gs
, 
ö
);

63 i‡(
r
 !
c
->
d©a
) {

65 i‡(
ö
) {

66 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

67  
NGX_OK
;

72 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

74 &
r
->
uri
, &r->
¨gs
);

77  
NGX_OK
;

80 i‡(
r
->
po°p⁄ed
 =
NULL
) {

82 i‡(
ö
 || 
c
->
buf„ªd
) {

83  
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
ö
);

86  
NGX_OK
;

89 i‡(
ö
) {

90 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

94 
¥
 = 
r
->
po°p⁄ed
;

96 i‡(
¥
->
ªque°
) {

98 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

100 &
¥
->
ªque°
->
uri
, &¥->ªque°->
¨gs
);

102 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

104 
c
->
d©a
 = 
¥
->
ªque°
;

106  
	`ngx_hâp_po°_ªque°
(
¥
->
ªque°
, 
NULL
);

109 i‡(
¥
->
out
 =
NULL
) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

112 &
r
->
uri
, &r->
¨gs
);

115 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

117 &
r
->
uri
, &r->
¨gs
);

119 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
¥
->
out
Ë=
NGX_ERROR
) {

120  
NGX_ERROR
;

124 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

126 } 
r
->
po°p⁄ed
);

128  
NGX_OK
;

129 
	}
}

132 
ngx_öt_t


133 
	$ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

135 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, **
µr
;

137 i‡(
r
->
po°p⁄ed
) {

138 
¥
 = 
r
->
po°p⁄ed
;Ör->
√xt
;Ör =Ör->next) { }

140 i‡(
¥
->
ªque°
 =
NULL
) {

141 
found
;

144 
µr
 = &
¥
->
√xt
;

147 
µr
 = &
r
->
po°p⁄ed
;

150 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

151 i‡(
¥
 =
NULL
) {

152  
NGX_ERROR
;

155 *
µr
 = 
¥
;

157 
¥
->
ªque°
 = 
NULL
;

158 
¥
->
out
 = 
NULL
;

159 
¥
->
√xt
 = 
NULL
;

161 
found
:

163 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
¥
->
out
, 
ö
Ë=
NGX_OK
) {

164  
NGX_OK
;

167  
NGX_ERROR
;

168 
	}
}

171 
ngx_öt_t


172 
	$ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

174 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

175 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_po°p⁄e_fûãr
;

177  
NGX_OK
;

178 
	}
}

	@src/http/ngx_http_request.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_öô_ªque°
(
ngx_evít_t
 *
ev
);

14 
ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
);

15 
ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
);

16 
ssize_t
 
ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_uöt_t
 
ªque°_löe
);

20 
ngx_öt_t
 
ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

22 
ngx_öt_t
 
ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

24 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

26 
ngx_öt_t
 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

28 
ngx_öt_t
 
ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

30 
ngx_öt_t
 
ngx_hâp_¥o˚ss_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

33 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

34 
ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

35 
ssize_t
 
ngx_hâp_vÆid©e_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 **
ho°
,

36 
size_t
 
Àn
, 
ngx_uöt_t
 
Æloc
);

37 
ngx_öt_t
 
ngx_hâp_föd_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
,

38 
u_ch¨
 *
ho°
, 
size_t
 
Àn
);

40 
ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

41 
ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

42 
ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

43 
ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_öt_t
 
ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
);

48 
ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ev
);

50 
ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
);

51 
ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

52 
ngx_öt_t
 
ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

53 
ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

54 
ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

55 
ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

56 
ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

58 
u_ch¨
 *
ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

59 
u_ch¨
 *
ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_ªque°_t
 *
§
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

62 #i‡(
NGX_HTTP_SSL
)

63 
ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
);

64 
ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

68 *
	gngx_hâp_˛õ¡_îr‹s
[] = {

81 
ngx_hâp_hódî_t
 
	gngx_hâp_hódîs_ö
[] = {

82 { 
ngx_°rög
("Ho°"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
),

83 
ngx_hâp_¥o˚ss_ho°
 },

85 { 
ngx_°rög
("C⁄√˘i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄√˘i⁄
),

86 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
 },

88 { 
ngx_°rög
("If-Modified-Since"),

89 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_modifõd_sö˚
),

90 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

92 { 
ngx_°rög
("If-Unmodified-Since"),

93 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_unmodifõd_sö˚
),

94 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

96 { 
ngx_°rög
("U£r-Agít"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
),

97 
ngx_hâp_¥o˚ss_u£r_agít
 },

99 { 
ngx_°rög
("Re„ªr"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ª„ªr
),

100 
ngx_hâp_¥o˚ss_hódî_löe
 },

102 { 
ngx_°rög
("Content-Length"),

103 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

104 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

106 { 
ngx_°rög
("Content-Type"),

107 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

108 
ngx_hâp_¥o˚ss_hódî_löe
 },

110 { 
ngx_°rög
("R™ge"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ønge
),

111 
ngx_hâp_¥o˚ss_hódî_löe
 },

113 { 
ngx_°rög
("If-Range"),

114 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_ønge
),

115 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

117 { 
ngx_°rög
("Transfer-Encoding"),

118 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
å™s„r_ícodög
),

119 
ngx_hâp_¥o˚ss_hódî_löe
 },

121 { 
ngx_°rög
("Expect"),

122 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ex≥˘
),

123 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

125 #i‡(
NGX_HTTP_GZIP
)

126 { 
ngx_°rög
("Accept-Encoding"),

127 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
),

128 
ngx_hâp_¥o˚ss_hódî_löe
 },

130 { 
ngx_°rög
("Vü"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
vü
),

131 
ngx_hâp_¥o˚ss_hódî_löe
 },

134 { 
ngx_°rög
("Authorization"),

135 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
auth‹iz©i⁄
),

136 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

138 { 
ngx_°rög
("Kìp-Alive"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
kìp_Æive
),

139 
ngx_hâp_¥o˚ss_hódî_löe
 },

141 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

142 { 
ngx_°rög
("X-Forwarded-For"),

143 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_f‹w¨ded_f‹
),

144 
ngx_hâp_¥o˚ss_hódî_löe
 },

147 #i‡(
NGX_HTTP_REALIP
)

148 { 
ngx_°rög
("X-Real-IP"),

149 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_ªÆ_ù
),

150 
ngx_hâp_¥o˚ss_hódî_löe
 },

153 #i‡(
NGX_HTTP_HEADERS
)

154 { 
ngx_°rög
("Ac˚±"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±
),

155 
ngx_hâp_¥o˚ss_hódî_löe
 },

157 { 
ngx_°rög
("Accept-Language"),

158 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
),

159 
ngx_hâp_¥o˚ss_hódî_löe
 },

162 #i‡(
NGX_HTTP_DAV
)

163 { 
ngx_°rög
("Dïth"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
dïth
),

164 
ngx_hâp_¥o˚ss_hódî_löe
 },

166 { 
ngx_°rög
("De°ö©i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
de°ö©i⁄
),

167 
ngx_hâp_¥o˚ss_hódî_löe
 },

169 { 
ngx_°rög
("Ovîwrôe"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ovîwrôe
),

170 
ngx_hâp_¥o˚ss_hódî_löe
 },

172 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
d©e
),

173 
ngx_hâp_¥o˚ss_hódî_löe
 },

176 { 
ngx_°rög
("Cookõ"), 0, 
ngx_hâp_¥o˚ss_cookõ
 },

178 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

183 
	$ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

185 
ngx_evít_t
 *
ªv
;

186 
ngx_hâp_log_˘x_t
 *
˘x
;

188 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

189 i‡(
˘x
 =
NULL
) {

190 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

194 
˘x
->
c⁄√˘i⁄
 = 
c
;

195 
˘x
->
ªque°
 = 
NULL
;

196 
˘x
->
cuºít_ªque°
 = 
NULL
;

198 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

199 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

200 
c
->
log
->
d©a
 = 
˘x
;

201 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

203 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

205 
ªv
 = 
c
->
ªad
;

206 
ªv
->
h™dÀr
 = 
ngx_hâp_öô_ªque°
;

207 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

209 #i‡(
NGX_STAT_STUB
)

210 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

213 i‡(
ªv
->
ªady
) {

216 i‡(
ngx_u£_ac˚±_muãx
) {

217 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

221 
	`ngx_hâp_öô_ªque°
(
ªv
);

225 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

227 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

228 #i‡(
NGX_STAT_STUB
)

229 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

231 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

234 
	}
}

238 
	$ngx_hâp_öô_ªque°
(
ngx_evít_t
 *
ªv
)

240 
ngx_time_t
 *
ç
;

241 
ngx_uöt_t
 
i
;

242 
ngx_c⁄√˘i⁄_t
 *
c
;

243 
ngx_hâp_ªque°_t
 *
r
;

244 
sockaddr_ö
 *
sö
;

245 
ngx_hâp_p‹t_t
 *
p‹t
;

246 
ngx_hâp_ö_addr_t
 *
addr
;

247 
ngx_hâp_log_˘x_t
 *
˘x
;

248 
ngx_hâp_addr_c⁄f_t
 *
addr_c⁄f
;

249 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

250 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

251 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

252 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

253 #i‡(
NGX_HAVE_INET6
)

254 
sockaddr_ö6
 *
sö6
;

255 
ngx_hâp_ö6_addr_t
 *
addr6
;

257 #i‡(
NGX_HAVE_SERVAL
)

258 
sockaddr_sv
 *
ssv
;

259 
ngx_hâp_£rvÆ_addr_t
 *
addr_sv
;

262 #i‡(
NGX_STAT_STUB
)

263 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

266 
c
 = 
ªv
->
d©a
;

268 i‡(
ªv
->
timedout
) {

269 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

271 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

275 
c
->
ªque°s
++;

277 
hc
 = 
c
->
d©a
;

279 i‡(
hc
 =
NULL
) {

280 
hc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_c⁄√˘i⁄_t
));

281 i‡(
hc
 =
NULL
) {

282 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

287 
r
 = 
hc
->
ªque°
;

289 i‡(
r
) {

290 
	`ngx_memzîo
(
r
, (
ngx_hâp_ªque°_t
));

292 
r
->
pùñöe
 = 
hc
->pipeline;

294 i‡(
hc
->
nbusy
) {

295 
r
->
hódî_ö
 = 
hc
->
busy
[0];

299 
r
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_ªque°_t
));

300 i‡(
r
 =
NULL
) {

301 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

305 
hc
->
ªque°
 = 
r
;

308 
c
->
d©a
 = 
r
;

309 
r
->
hâp_c⁄√˘i⁄
 = 
hc
;

311 
c
->
£¡
 = 0;

312 
r
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

316 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

318 
r
->
c⁄√˘i⁄
 = 
c
;

320 i‡(
p‹t
->
«ddrs
 > 1) {

328 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

329 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

333 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

335 #i‡(
NGX_HAVE_INET6
)

336 
AF_INET6
:

337 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

339 
addr6
 = 
p‹t
->
addrs
;

343 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

344 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

349 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

354 #i‡(
NGX_HAVE_SERVAL
)

355 
AF_SERVAL
:

356 
ssv
 = (
sockaddr_sv
 *Ë
c
->
loˇl_sockaddr
;

358 
addr_sv
 = 
p‹t
->
addrs
;

362 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

363 i‡(
	`ngx_memcmp
(&
addr_sv
[
i
].
§vid
, &
ssv
->
sv_§vid
, (ssv->sv_srvid)) == 0) {

368 
addr_c⁄f
 = &
addr_sv
[
i
].
c⁄f
;

374 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

376 
addr
 = 
p‹t
->
addrs
;

380 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

381 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

386 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

393 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

395 #i‡(
NGX_HAVE_INET6
)

396 
AF_INET6
:

397 
addr6
 = 
p‹t
->
addrs
;

398 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

402 #i‡(
NGX_HAVE_SERVAL
)

403 
AF_SERVAL
:

404 
addr_sv
 = 
p‹t
->
addrs
;

405 
addr_c⁄f
 = &
addr_sv
[0].
c⁄f
;

410 
addr
 = 
p‹t
->
addrs
;

411 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

416 
r
->
vútuÆ_«mes
 = 
addr_c⁄f
->virtual_names;

419 
cscf
 = 
addr_c⁄f
->
deÁu…_£rvî
;

421 
r
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

422 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

423 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

425 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

426 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

428 #i‡(
NGX_HTTP_SSL
)

431 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

433 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

434 i‡(
sscf
->
íabÀ
 || 
addr_c⁄f
->
s¶
) {

436 i‡(
c
->
s¶
 =
NULL
) {

438 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

440 i‡(
addr_c⁄f
->
s¶
 && 
sscf
->s¶.
˘x
 =
NULL
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

444 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

448 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(&
sscf
->
s¶
, 
c
, 
NGX_SSL_BUFFER
)

449 !
NGX_OK
)

451 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

455 
ªv
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake
;

458 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

464 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

465 
c
->
log
->
fûe
 = 
˛cf
->
îr‹_log
->file;

466 i‡(!(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

467 
c
->
log
->
log_Àvñ
 = 
˛cf
->
îr‹_log
->log_level;

470 i‡(
c
->
buf„r
 =
NULL
) {

471 
c
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(c->
poﬁ
,

472 
cscf
->
˛õ¡_hódî_buf„r_size
);

473 i‡(
c
->
buf„r
 =
NULL
) {

474 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

479 i‡(
r
->
hódî_ö
 =
NULL
) {

480 
r
->
hódî_ö
 = 
c
->
buf„r
;

483 
r
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
cscf
->
ªque°_poﬁ_size
, 
c
->
log
);

484 i‡(
r
->
poﬁ
 =
NULL
) {

485 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

490 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_out
.
hódîs
,Ñ->
poﬁ
, 20,

491 (
ngx_èbÀ_ñt_t
))

492 !
NGX_OK
)

494 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

495 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

499 
r
->
˘x
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

500 i‡(
r
->
˘x
 =
NULL
) {

501 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

502 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

506 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

508 
r
->
v¨übÀs
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, 
cmcf
->v¨übÀs.
√…s


509 * (
ngx_hâp_v¨übÀ_vÆue_t
));

510 i‡(
r
->
v¨übÀs
 =
NULL
) {

511 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

512 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

516 
c
->
sögÀ_c⁄√˘i⁄
 = 1;

517 
c
->
de°royed
 = 0;

519 
r
->
maö
 =Ñ;

520 
r
->
cou¡
 = 1;

522 
ç
 = 
	`ngx_timeofday
();

523 
r
->
°¨t_£c
 = 
ç
->
£c
;

524 
r
->
°¨t_m£c
 = 
ç
->
m£c
;

526 
r
->
mëhod
 = 
NGX_HTTP_UNKNOWN
;

528 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

529 
r
->
hódîs_ö
.
kìp_Æive_n
 = -1;

530 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

531 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

533 
r
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

534 
r
->
subªque°s
 = 
NGX_HTTP_MAX_SUBREQUESTS
 + 1;

536 
r
->
hâp_°©e
 = 
NGX_HTTP_READING_REQUEST_STATE
;

538 
˘x
 = 
c
->
log
->
d©a
;

539 
˘x
->
ªque°
 = 
r
;

540 
˘x
->
cuºít_ªque°
 = 
r
;

541 
r
->
log_h™dÀr
 = 
ngx_hâp_log_îr‹_h™dÀr
;

543 #i‡(
NGX_STAT_STUB
)

544 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

545 
r
->
°©_ªadög
 = 1;

546 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªque°s
, 1);

549 
ªv
->
	`h™dÀr
(rev);

550 
	}
}

553 #i‡(
NGX_HTTP_SSL
)

556 
	$ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
)

558 
u_ch¨
 
buf
[1];

559 
ssize_t
 
n
;

560 
ngx_öt_t
 
rc
;

561 
ngx_c⁄√˘i⁄_t
 *
c
;

562 
ngx_hâp_ªque°_t
 *
r
;

564 
c
 = 
ªv
->
d©a
;

565 
r
 = 
c
->
d©a
;

567 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

570 i‡(
ªv
->
timedout
) {

571 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

572 
c
->
timedout
 = 1;

573 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

577 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, 1, 
MSG_PEEK
);

579 i‡(
n
 =-1 && 
ngx_sockë_î∫o
 =
NGX_EAGAIN
) {

581 i‡(!
ªv
->
timî_£t
) {

582 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

585 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

586 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

592 i‡(
n
 == 1) {

593 i‡(
buf
[0] & 0x80 || buf[0] == 0x16 ) {

594 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

595 "hâp†s¶ h™dshake: 0x%02Xd", 
buf
[0]);

597 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

599 i‡(
rc
 =
NGX_AGAIN
) {

601 i‡(!
ªv
->
timî_£t
) {

602 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

605 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake_h™dÀr
;

609 
	`ngx_hâp_s¶_h™dshake_h™dÀr
(
c
);

614 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

617 
r
->
∂aö_hâp
 = 1;

621 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

623 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

624 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

625 
	}
}

629 
	$ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

631 
ngx_hâp_ªque°_t
 *
r
;

633 i‡(
c
->
s¶
->
h™dshaked
) {

643 
c
->
s¶
->
no_waô_shutdown
 = 1;

645 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

647 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

648  
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

650 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
c
->
ªad
);

655 
r
 = 
c
->
d©a
;

657 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

660 
	}
}

662 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


665 
	$ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
)

667 
size_t
 
Àn
;

668 
u_ch¨
 *
ho°
;

669 c⁄° *
£rvî«me
;

670 
ngx_c⁄√˘i⁄_t
 *
c
;

671 
ngx_hâp_ªque°_t
 *
r
;

672 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

674 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
s¶_c⁄n
, 
TLSEXT_NAMETYPE_ho°_«me
);

676 i‡(
£rvî«me
 =
NULL
) {

677  
SSL_TLSEXT_ERR_NOACK
;

680 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

682 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

683 "SSL sîvîÇame: \"%s\"", 
£rvî«me
);

685 
Àn
 = 
	`ngx_°æí
(
£rvî«me
);

687 i‡(
Àn
 == 0) {

688  
SSL_TLSEXT_ERR_NOACK
;

691 
r
 = 
c
->
d©a
;

693 
ho°
 = (
u_ch¨
 *Ë
£rvî«me
;

695 
Àn
 = 
	`ngx_hâp_vÆid©e_ho°
(
r
, &
ho°
,Üen, 1);

697 i‡(
Àn
 <= 0) {

698  
SSL_TLSEXT_ERR_NOACK
;

701 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
, 
ho°
, 
Àn
Ë!
NGX_OK
) {

702  
SSL_TLSEXT_ERR_NOACK
;

705 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

707 i‡(
sscf
->
s¶
.
˘x
) {

708 
	`SSL_£t_SSL_CTX
(
s¶_c⁄n
, 
sscf
->
s¶
.
˘x
);

715 
	`SSL_£t_vîify
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_mode
(
sscf
->
s¶
.
˘x
),

716 
	`SSL_CTX_gë_vîify_ˇŒback
(
sscf
->
s¶
.
˘x
));

718 
	`SSL_£t_vîify_dïth
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_dïth
(
sscf
->
s¶
.
˘x
));

720 #ifde‡
SSL_CTRL_CLEAR_OPTIONS


722 
	`SSL_˛ór_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_gë_›ti⁄s
(ssl_conn) &

723 ~
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

726 
	`SSL_£t_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

729  
SSL_TLSEXT_ERR_OK
;

730 
	}
}

738 
	$ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
)

740 
u_ch¨
 *
ho°
;

741 
ssize_t
 
n
;

742 
ngx_öt_t
 
rc
, 
rv
;

743 
ngx_c⁄√˘i⁄_t
 *
c
;

744 
ngx_hâp_ªque°_t
 *
r
;

745 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

747 
c
 = 
ªv
->
d©a
;

748 
r
 = 
c
->
d©a
;

750 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

753 i‡(
ªv
->
timedout
) {

754 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

755 
c
->
timedout
 = 1;

756 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

760 
rc
 = 
NGX_AGAIN
;

764 i‡(
rc
 =
NGX_AGAIN
) {

765 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

767 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

772 
rc
 = 
	`ngx_hâp_∑r£_ªque°_löe
(
r
,Ñ->
hódî_ö
);

774 i‡(
rc
 =
NGX_OK
) {

778 
r
->
ªque°_löe
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->
ªque°_°¨t
;

779 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

780 
r
->
ªque°_Àngth
 =Ñ->
hódî_ö
->
pos
 -Ñ->
ªque°_°¨t
;

783 i‡(
r
->
¨gs_°¨t
) {

784 
r
->
uri
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_°¨t
;

786 
r
->
uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

790 i‡(
r
->
com∂ex_uri
 ||Ñ->
quŸed_uri
) {

792 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
 + 1);

793 i‡(
r
->
uri
.
d©a
 =
NULL
) {

794 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

798 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

800 
rc
 = 
	`ngx_hâp_∑r£_com∂ex_uri
(
r
, 
cscf
->
mîge_¶ashes
);

802 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_REQUEST
) {

803 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

805 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

810 
r
->
uri
.
d©a
 =Ñ->
uri_°¨t
;

814 
r
->
u≈¨£d_uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

815 
r
->
u≈¨£d_uri
.
d©a
 =Ñ->
uri_°¨t
;

817 
r
->
vÆid_u≈¨£d_uri
 =Ñ->
•a˚_ö_uri
 ? 0 : 1;

819 
r
->
mëhod_«me
.
Àn
 =Ñ->
mëhod_íd
 -Ñ->
ªque°_°¨t
 + 1;

820 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

823 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

824 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->hâp_¥Ÿocﬁ.
d©a
;

828 i‡(
r
->
uri_ext
) {

829 i‡(
r
->
¨gs_°¨t
) {

830 
r
->
exãn
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_ext
;

832 
r
->
exãn
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_ext
;

835 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

839 i‡(
r
->
¨gs_°¨t
 &&Ñ->
uri_íd
 >Ñ->args_start) {

840 
r
->
¨gs
.
Àn
 =Ñ->
uri_íd
 -Ñ->
¨gs_°¨t
;

841 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

844 #i‡(
NGX_WIN32
)

846 
u_ch¨
 *
p
, *
œ°
;

848 
p
 = 
r
->
uri
.
d©a
;

849 
œ°
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
;

851 
p
 < 
œ°
) {

853 i‡(*
p
++ == ':') {

860 i‡(
p
 < 
œ°
 && *p == '$') {

861 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

863 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

869 
p
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1;

871 
p
 > 
r
->
uri
.
d©a
) {

873 i‡(*
p
 == ' ') {

874 
p
--;

878 i‡(*
p
 == '.') {

879 
p
--;

886 i‡(
p
 !
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1) {

887 
r
->
uri
.
Àn
 = 
p
 + 1 -Ñ->uri.
d©a
;

888 
	`ngx_hâp_£t_exãn
(
r
);

894 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

895 "hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

897 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

898 "hâ∞uri: \"%V\"", &
r
->
uri
);

900 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

901 "hâ∞¨gs: \"%V\"", &
r
->
¨gs
);

903 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

904 "hâ∞exãn: \"%V\"", &
r
->
exãn
);

906 i‡(
r
->
ho°_°¨t
 &&Ñ->
ho°_íd
) {

908 
ho°
 = 
r
->
ho°_°¨t
;

909 
n
 = 
	`ngx_hâp_vÆid©e_ho°
(
r
, &
ho°
,

910 
r
->
ho°_íd
 -Ñ->
ho°_°¨t
, 0);

912 i‡(
n
 == 0) {

913 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

915 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

919 i‡(
n
 < 0) {

920 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

924 
r
->
hódîs_ö
.
£rvî
.
Àn
 = 
n
;

925 
r
->
hódîs_ö
.
£rvî
.
d©a
 = 
ho°
;

928 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

930 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
,Ñ->
hódîs_ö
.
£rvî
.
d©a
,

931 
r
->
hódîs_ö
.
£rvî
.
Àn
)

932 =
NGX_ERROR
)

934 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

938 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

943 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

944 (
ngx_èbÀ_ñt_t
))

945 !
NGX_OK
)

947 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

952 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_ö
.
cookõs
,Ñ->
poﬁ
, 2,

953 (
ngx_èbÀ_ñt_t
 *))

954 !
NGX_OK
)

956 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

960 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

962 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_hódîs
;

963 
	`ngx_hâp_¥o˚ss_ªque°_hódîs
(
ªv
);

968 i‡(
rc
 !
NGX_AGAIN
) {

972 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

973 
ngx_hâp_˛õ¡_îr‹s
[
rc
 - 
NGX_HTTP_CLIENT_ERROR
]);

974 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

980 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

982 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 1);

984 i‡(
rv
 =
NGX_ERROR
) {

985 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

989 i‡(
rv
 =
NGX_DECLINED
) {

990 
r
->
ªque°_löe
.
Àn
 =Ñ->
hódî_ö
->
íd
 -Ñ->
ªque°_°¨t
;

991 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

993 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

995 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_URI_TOO_LARGE
);

1000 
	}
}

1004 
	$ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
)

1006 
u_ch¨
 *
p
;

1007 
size_t
 
Àn
;

1008 
ssize_t
 
n
;

1009 
ngx_öt_t
 
rc
, 
rv
;

1010 
ngx_èbÀ_ñt_t
 *
h
;

1011 
ngx_c⁄√˘i⁄_t
 *
c
;

1012 
ngx_hâp_hódî_t
 *
hh
;

1013 
ngx_hâp_ªque°_t
 *
r
;

1014 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1015 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1017 
c
 = 
ªv
->
d©a
;

1018 
r
 = 
c
->
d©a
;

1020 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

1023 i‡(
ªv
->
timedout
) {

1024 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

1025 
c
->
timedout
 = 1;

1026 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

1030 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1031 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1033 
rc
 = 
NGX_AGAIN
;

1037 i‡(
rc
 =
NGX_AGAIN
) {

1039 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1041 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 0);

1043 i‡(
rv
 =
NGX_ERROR
) {

1044 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1048 i‡(
rv
 =
NGX_DECLINED
) {

1049 
p
 = 
r
->
hódî_«me_°¨t
;

1051 
r
->
lögîög_˛o£
 = 1;

1053 i‡(
p
 =
NULL
) {

1054 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1056 
	`ngx_hâp_föÆize_ªque°
(
r
,

1057 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1061 
Àn
 = 
r
->
hódî_ö
->
íd
 - 
p
;

1063 i‡(
Àn
 > 
NGX_MAX_ERROR_STR
 - 300) {

1064 
Àn
 = 
NGX_MAX_ERROR_STR
 - 300;

1065 
p
[
Àn
++] = '.';Ö[len++] = '.';Ö[len++] = '.';

1068 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1070 
Àn
, 
r
->
hódî_«me_°¨t
);

1072 
	`ngx_hâp_föÆize_ªque°
(
r
,

1073 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1078 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

1080 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

1085 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
,Ñ->
hódî_ö
,

1086 
cscf
->
undîsc‹es_ö_hódîs
);

1088 i‡(
rc
 =
NGX_OK
) {

1090 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1092 i‡(
r
->
övÆid_hódî
 && 
cscf
->
ign‹e_övÆid_hódîs
) {

1096 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1098 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1099 
r
->
hódî_«me_°¨t
);

1105 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

1106 i‡(
h
 =
NULL
) {

1107 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1111 
h
->
hash
 = 
r
->
hódî_hash
;

1113 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1114 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1115 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1117 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1118 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1119 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1121 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1122 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1123 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1127 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1128 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1131 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1134 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

1135 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1137 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1141 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1143 &
h
->
key
, &h->
vÆue
);

1148 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1152 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1155 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1157 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

1159 
rc
 = 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
);

1161 i‡(
rc
 !
NGX_OK
) {

1165 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1170 i‡(
rc
 =
NGX_AGAIN
) {

1179 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1181 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1182 
r
->
hódî_«me_°¨t
);

1183 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1186 
	}
}

1189 
ssize_t


1190 
	$ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1192 
ssize_t
 
n
;

1193 
ngx_evít_t
 *
ªv
;

1194 
ngx_c⁄√˘i⁄_t
 *
c
;

1195 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1197 
c
 = 
r
->
c⁄√˘i⁄
;

1198 
ªv
 = 
c
->
ªad
;

1200 
n
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

1202 i‡(
n
 > 0) {

1203  
n
;

1206 i‡(
ªv
->
ªady
) {

1207 
n
 = 
c
->
	`ªcv
(c, 
r
->
hódî_ö
->
œ°
,

1208 
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
);

1210 
n
 = 
NGX_AGAIN
;

1213 i‡(
n
 =
NGX_AGAIN
) {

1214 i‡(!
ªv
->
timî_£t
) {

1215 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1216 
	`ngx_add_timî
(
ªv
, 
cscf
->
˛õ¡_hódî_timeout
);

1219 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1220 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1221  
NGX_ERROR
;

1224  
NGX_AGAIN
;

1227 i‡(
n
 == 0) {

1228 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1232 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1233 
c
->
îr‹
 = 1;

1234 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1236 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1237  
NGX_ERROR
;

1240 
r
->
hódî_ö
->
œ°
 +
n
;

1242  
n
;

1243 
	}
}

1246 
ngx_öt_t


1247 
	$ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

1248 
ngx_uöt_t
 
ªque°_löe
)

1250 
u_ch¨
 *
ﬁd
, *
√w
;

1251 
ngx_buf_t
 *
b
;

1252 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

1253 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1255 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1258 i‡(
ªque°_löe
 && 
r
->
°©e
 == 0) {

1262 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
°¨t
;

1263 
r
->
hódî_ö
->
œ°
 =Ñ->hódî_ö->
°¨t
;

1265  
NGX_OK
;

1268 
ﬁd
 = 
ªque°_löe
 ? 
r
->
ªque°_°¨t
 :Ñ->
hódî_«me_°¨t
;

1270 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1272 i‡(
r
->
°©e
 != 0

1273 && (
size_t
Ë(
r
->
hódî_ö
->
pos
 - 
ﬁd
)

1274 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
)

1276  
NGX_DECLINED
;

1279 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

1281 i‡(
hc
->
n‰ì
) {

1282 
b
 = 
hc
->
‰ì
[--hc->
n‰ì
];

1284 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1286 
b
->
pos
, b->
íd
 - b->
œ°
);

1288 } i‡(
hc
->
nbusy
 < 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
) {

1290 i‡(
hc
->
busy
 =
NULL
) {

1291 
hc
->
busy
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1292 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

1293 i‡(
hc
->
busy
 =
NULL
) {

1294  
NGX_ERROR
;

1298 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1299 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

1300 i‡(
b
 =
NULL
) {

1301  
NGX_ERROR
;

1304 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1306 
b
->
pos
, b->
íd
 - b->
œ°
);

1309  
NGX_DECLINED
;

1312 
hc
->
busy
[hc->
nbusy
++] = 
b
;

1314 i‡(
r
->
°©e
 == 0) {

1321 
r
->
hódî_ö
 = 
b
;

1323  
NGX_OK
;

1326 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1327 "hâ∞œrgêhódî c›y: %d", 
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1329 
√w
 = 
b
->
°¨t
;

1331 
	`ngx_mem˝y
(
√w
, 
ﬁd
, 
r
->
hódî_ö
->
pos
 - old);

1333 
b
->
pos
 = 
√w
 + (
r
->
hódî_ö
->po†- 
ﬁd
);

1334 
b
->
œ°
 = 
√w
 + (
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1336 i‡(
ªque°_löe
) {

1337 
r
->
ªque°_°¨t
 = 
√w
;

1339 i‡(
r
->
ªque°_íd
) {

1340 
r
->
ªque°_íd
 = 
√w
 + (r->ªque°_íd - 
ﬁd
);

1343 
r
->
mëhod_íd
 = 
√w
 + (r->mëhod_íd - 
ﬁd
);

1345 
r
->
uri_°¨t
 = 
√w
 + (r->uri_°¨à- 
ﬁd
);

1346 
r
->
uri_íd
 = 
√w
 + (r->uri_íd - 
ﬁd
);

1348 i‡(
r
->
schema_°¨t
) {

1349 
r
->
schema_°¨t
 = 
√w
 + (r->schema_°¨à- 
ﬁd
);

1350 
r
->
schema_íd
 = 
√w
 + (r->schema_íd - 
ﬁd
);

1353 i‡(
r
->
ho°_°¨t
) {

1354 
r
->
ho°_°¨t
 = 
√w
 + (r->ho°_°¨à- 
ﬁd
);

1355 i‡(
r
->
ho°_íd
) {

1356 
r
->
ho°_íd
 = 
√w
 + (r->ho°_íd - 
ﬁd
);

1360 i‡(
r
->
p‹t_°¨t
) {

1361 
r
->
p‹t_°¨t
 = 
√w
 + (r->p‹t_°¨à- 
ﬁd
);

1362 
r
->
p‹t_íd
 = 
√w
 + (r->p‹t_íd - 
ﬁd
);

1365 i‡(
r
->
uri_ext
) {

1366 
r
->
uri_ext
 = 
√w
 + (r->uri_exà- 
ﬁd
);

1369 i‡(
r
->
¨gs_°¨t
) {

1370 
r
->
¨gs_°¨t
 = 
√w
 + (r->¨gs_°¨à- 
ﬁd
);

1373 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

1374 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
√w
 + (r->hâp_¥Ÿocﬁ.d©®- 
ﬁd
);

1378 
r
->
hódî_«me_°¨t
 = 
√w
;

1379 
r
->
hódî_«me_íd
 = 
√w
 + (r->hódî_«me_íd - 
ﬁd
);

1380 
r
->
hódî_°¨t
 = 
√w
 + (r->hódî_°¨à- 
ﬁd
);

1381 
r
->
hódî_íd
 = 
√w
 + (r->hódî_íd - 
ﬁd
);

1384 
r
->
hódî_ö
 = 
b
;

1386  
NGX_OK
;

1387 
	}
}

1390 
ngx_öt_t


1391 
	$ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1392 
ngx_uöt_t
 
off£t
)

1394 
ngx_èbÀ_ñt_t
 **
ph
;

1396 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1398 i‡(*
ph
 =
NULL
) {

1399 *
ph
 = 
h
;

1402  
NGX_OK
;

1403 
	}
}

1406 
ngx_öt_t


1407 
	$ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1408 
ngx_uöt_t
 
off£t
)

1410 
ngx_èbÀ_ñt_t
 **
ph
;

1412 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1414 i‡(*
ph
 =
NULL
) {

1415 *
ph
 = 
h
;

1416  
NGX_OK
;

1419 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1422 &
h
->
key
, &h->
vÆue
, &(*
ph
)->key, &(*ph)->value);

1424 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1426  
NGX_ERROR
;

1427 
	}
}

1430 
ngx_öt_t


1431 
	$ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1432 
ngx_uöt_t
 
off£t
)

1434 
u_ch¨
 *
ho°
;

1435 
ssize_t
 
Àn
;

1437 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
) {

1438 
r
->
hódîs_ö
.
ho°
 = 
h
;

1441 
ho°
 = 
h
->
vÆue
.
d©a
;

1442 
Àn
 = 
	`ngx_hâp_vÆid©e_ho°
(
r
, &
ho°
, 
h
->
vÆue
.len, 0);

1444 i‡(
Àn
 == 0) {

1445 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1447 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1448  
NGX_ERROR
;

1451 i‡(
Àn
 < 0) {

1452 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1453  
NGX_ERROR
;

1456 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1457  
NGX_OK
;

1460 
r
->
hódîs_ö
.
£rvî
.
Àn
 =Üen;

1461 
r
->
hódîs_ö
.
£rvî
.
d©a
 = 
ho°
;

1463  
NGX_OK
;

1464 
	}
}

1467 
ngx_öt_t


1468 
	$ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1469 
ngx_uöt_t
 
off£t
)

1471 i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "close", 5 - 1)) {

1472 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

1474 } i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "keep-alive", 10 - 1)) {

1475 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_KEEP_ALIVE
;

1478  
NGX_OK
;

1479 
	}
}

1482 
ngx_öt_t


1483 
	$ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1484 
ngx_uöt_t
 
off£t
)

1486 
u_ch¨
 *
u£r_agít
, *
msõ
;

1488 i‡(
r
->
hódîs_ö
.
u£r_agít
) {

1489  
NGX_OK
;

1492 
r
->
hódîs_ö
.
u£r_agít
 = 
h
;

1496 
u£r_agít
 = 
h
->
vÆue
.
d©a
;

1498 
msõ
 = 
	`ngx_°r°∫
(
u£r_agít
, "MSIE ", 5 - 1);

1500 i‡(
msõ
 && msõ + 7 < 
u£r_agít
 + 
h
->
vÆue
.
Àn
) {

1502 
r
->
hódîs_ö
.
msõ
 = 1;

1504 i‡(
msõ
[6] == '.') {

1506 
msõ
[5]) {

1509 
r
->
hódîs_ö
.
msõ6
 = 1;

1512 i‡(
	`ngx_°r°∫
(
msõ
 + 8, "SV1", 3 - 1Ë=
NULL
) {

1513 
r
->
hódîs_ö
.
msõ6
 = 1;

1521 i‡(
c
->
s¶
) {

1522 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1527 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Opera", 5 - 1)) {

1528 
r
->
hódîs_ö
.
›îa
 = 1;

1529 
r
->
hódîs_ö
.
msõ
 = 0;

1530 
r
->
hódîs_ö
.
msõ6
 = 0;

1533 i‡(!
r
->
hódîs_ö
.
msõ
 && !r->hódîs_ö.
›îa
) {

1535 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Gecko/", 6 - 1)) {

1536 
r
->
hódîs_ö
.
gecko
 = 1;

1538 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Chrome/", 7 - 1)) {

1539 
r
->
hódîs_ö
.
chrome
 = 1;

1541 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Safari/", 7 - 1)

1542 && 
	`ngx_°r°∫
(
u£r_agít
, "Mac OS X", 8 - 1))

1544 
r
->
hódîs_ö
.
ßÁri
 = 1;

1546 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Konqueror", 9 - 1)) {

1547 
r
->
hódîs_ö
.
k⁄quî‹
 = 1;

1551  
NGX_OK
;

1552 
	}
}

1555 
ngx_öt_t


1556 
	$ngx_hâp_¥o˚ss_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1557 
ngx_uöt_t
 
off£t
)

1559 
ngx_èbÀ_ñt_t
 **
cookõ
;

1561 
cookõ
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_ö
.
cookõs
);

1562 i‡(
cookõ
) {

1563 *
cookõ
 = 
h
;

1564  
NGX_OK
;

1567 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1569  
NGX_ERROR
;

1570 
	}
}

1573 
ngx_öt_t


1574 
	$ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1576 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
,Ñ->
hódîs_ö
.
£rvî
.
d©a
,

1577 
r
->
hódîs_ö
.
£rvî
.
Àn
)

1578 =
NGX_ERROR
)

1580 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1581  
NGX_ERROR
;

1584 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
 &&Ñ->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
) {

1585 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1587 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1588  
NGX_ERROR
;

1591 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1592 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =

1593 
	`ngx_©oof
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
d©a
,

1594 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
Àn
);

1596 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

1597 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1599 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_LENGTH_REQUIRED
);

1600  
NGX_ERROR
;

1604 i‡(
r
->
mëhod
 & 
NGX_HTTP_PUT
 &&Ñ->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

1605 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1607 &
r
->
mëhod_«me
);

1608 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_LENGTH_REQUIRED
);

1609  
NGX_ERROR
;

1612 i‡(
r
->
mëhod
 & 
NGX_HTTP_TRACE
) {

1613 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1615 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_ALLOWED
);

1616  
NGX_ERROR
;

1619 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög


1620 && 
	`ngx_°rˇ£°∫
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1623 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1625 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_LENGTH_REQUIRED
);

1626  
NGX_ERROR
;

1629 i‡(
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 =
NGX_HTTP_CONNECTION_KEEP_ALIVE
) {

1630 i‡(
r
->
hódîs_ö
.
kìp_Æive
) {

1631 
r
->
hódîs_ö
.
kìp_Æive_n
 =

1632 
	`ngx_©Ÿm
(
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
d©a
,

1633 
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
Àn
);

1637  
NGX_OK
;

1638 
	}
}

1642 
	$ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1644 
ngx_c⁄√˘i⁄_t
 *
c
;

1646 
c
 = 
r
->
c⁄√˘i⁄
;

1648 i‡(
r
->
∂aö_hâp
) {

1649 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1651 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_TO_HTTPS
);

1655 #i‡(
NGX_HTTP_SSL
)

1657 i‡(
c
->
s¶
) {

1658 
rc
;

1659 
X509
 *
˚π
;

1660 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

1662 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

1664 i‡(
sscf
->
vîify
) {

1665 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1667 i‡(
rc
 !
X509_V_OK


1668 && (
sscf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

1670 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1672 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1674 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1675 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1677 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_CERT_ERROR
);

1681 i‡(
sscf
->
vîify
 == 1) {

1682 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

1684 i‡(
˚π
 =
NULL
) {

1685 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1688 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1689 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1691 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_NO_CERT
);

1695 
	`X509_‰ì
(
˚π
);

1702 i‡(
c
->
ªad
->
timî_£t
) {

1703 
	`ngx_dñ_timî
(
c
->
ªad
);

1706 #i‡(
NGX_STAT_STUB
)

1707 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

1708 
r
->
°©_ªadög
 = 0;

1709 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, 1);

1710 
r
->
°©_wrôög
 = 1;

1713 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1714 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1715 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1717 
	`ngx_hâp_h™dÀr
(
r
);

1719 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1720 
	}
}

1723 
ssize_t


1724 
	$ngx_hâp_vÆid©e_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 **
ho°
, 
size_t
 
Àn
,

1725 
ngx_uöt_t
 
Æloc
)

1727 
u_ch¨
 *
h
, 
ch
;

1728 
size_t
 
i
, 
dŸ_pos
, 
ho°_Àn
;

1731 
sw_usuÆ
 = 0,

1732 
sw_lôîÆ
,

1733 
sw_ª°


1734 } 
°©e
;

1736 
dŸ_pos
 = 
Àn
;

1737 
ho°_Àn
 = 
Àn
;

1739 
h
 = *
ho°
;

1741 
°©e
 = 
sw_usuÆ
;

1743 
i
 = 0; i < 
Àn
; i++) {

1744 
ch
 = 
h
[
i
];

1746 
ch
) {

1749 i‡(
dŸ_pos
 =
i
 - 1) {

1752 
dŸ_pos
 = 
i
;

1756 i‡(
°©e
 =
sw_usuÆ
) {

1757 
ho°_Àn
 = 
i
;

1758 
°©e
 = 
sw_ª°
;

1763 i‡(
i
 == 0) {

1764 
°©e
 = 
sw_lôîÆ
;

1769 i‡(
°©e
 =
sw_lôîÆ
) {

1770 
ho°_Àn
 = 
i
 + 1;

1771 
°©e
 = 
sw_ª°
;

1780 i‡(
	`ngx_∑th_£∑øt‹
(
ch
)) {

1784 i‡(
ch
 >= 'A' && ch <= 'Z') {

1785 
Æloc
 = 1;

1792 i‡(
dŸ_pos
 =
ho°_Àn
 - 1) {

1793 
ho°_Àn
--;

1796 i‡(
Æloc
) {

1797 *
ho°
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ho°_Àn
);

1798 i‡(*
ho°
 =
NULL
) {

1802 
	`ngx_°æow
(*
ho°
, 
h
, 
ho°_Àn
);

1805  
ho°_Àn
;

1806 
	}
}

1809 
ngx_öt_t


1810 
	$ngx_hâp_föd_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
ho°
, 
size_t
 
Àn
)

1812 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1813 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1815 i‡(
r
->
vútuÆ_«mes
 =
NULL
) {

1816  
NGX_DECLINED
;

1819 
cscf
 = 
	`ngx_hash_föd_comböed
(&
r
->
vútuÆ_«mes
->
«mes
,

1820 
	`ngx_hash_key
(
ho°
, 
Àn
), host,Üen);

1822 i‡(
cscf
) {

1823 
found
;

1826 #i‡(
NGX_PCRE
)

1828 i‡(
Àn
 && 
r
->
vútuÆ_«mes
->
ƒegex
) {

1829 
ngx_öt_t
 
n
;

1830 
ngx_uöt_t
 
i
;

1831 
ngx_°r_t
 
«me
;

1832 
ngx_hâp_£rvî_«me_t
 *
¢
;

1834 
«me
.
Àn
 =Üen;

1835 
«me
.
d©a
 = 
ho°
;

1837 
¢
 = 
r
->
vútuÆ_«mes
->
ªgex
;

1839 
i
 = 0; i < 
r
->
vútuÆ_«mes
->
ƒegex
; i++) {

1841 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
¢
[
i
].
ªgex
, &
«me
);

1843 i‡(
n
 =
NGX_OK
) {

1844 
cscf
 = 
¢
[
i
].
£rvî
;

1845 
found
;

1848 i‡(
n
 =
NGX_DECLINED
) {

1852  
NGX_ERROR
;

1858  
NGX_DECLINED
;

1860 
found
:

1862 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

1863 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1865 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1866 
r
->
c⁄√˘i⁄
->
log
->
fûe
 = 
˛cf
->
îr‹_log
->file;

1868 i‡(!(
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

1869 
r
->
c⁄√˘i⁄
->
log
->
log_Àvñ
 = 
˛cf
->
îr‹_log
->log_level;

1872  
NGX_OK
;

1873 
	}
}

1877 
	$ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
)

1879 
ngx_c⁄√˘i⁄_t
 *
c
;

1880 
ngx_hâp_ªque°_t
 *
r
;

1881 
ngx_hâp_log_˘x_t
 *
˘x
;

1883 
c
 = 
ev
->
d©a
;

1884 
r
 = 
c
->
d©a
;

1886 
˘x
 = 
c
->
log
->
d©a
;

1887 
˘x
->
cuºít_ªque°
 = 
r
;

1889 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1890 "hâ∞ru¿ªque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1892 i‡(
ev
->
wrôe
) {

1893 
r
->
	`wrôe_evít_h™dÀr
(r);

1896 
r
->
	`ªad_evít_h™dÀr
(r);

1899 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1900 
	}
}

1904 
	$ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
)

1906 
ngx_hâp_ªque°_t
 *
r
;

1907 
ngx_hâp_log_˘x_t
 *
˘x
;

1908 
ngx_hâp_po°ed_ªque°_t
 *
¥
;

1912 i‡(
c
->
de°royed
) {

1916 
r
 = 
c
->
d©a
;

1917 
¥
 = 
r
->
maö
->
po°ed_ªque°s
;

1919 i‡(
¥
 =
NULL
) {

1923 
r
->
maö
->
po°ed_ªque°s
 = 
¥
->
√xt
;

1925 
r
 = 
¥
->
ªque°
;

1927 
˘x
 = 
c
->
log
->
d©a
;

1928 
˘x
->
cuºít_ªque°
 = 
r
;

1930 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1931 "hâ∞po°edÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1933 
r
->
	`wrôe_evít_h™dÀr
(r);

1935 
	}
}

1938 
ngx_öt_t


1939 
	$ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_po°ed_ªque°_t
 *
¥
)

1941 
ngx_hâp_po°ed_ªque°_t
 **
p
;

1943 i‡(
¥
 =
NULL
) {

1944 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°ed_ªque°_t
));

1945 i‡(
¥
 =
NULL
) {

1946  
NGX_ERROR
;

1950 
¥
->
ªque°
 = 
r
;

1951 
¥
->
√xt
 = 
NULL
;

1953 
p
 = &
r
->
maö
->
po°ed_ªque°s
; *p;Ö = &(*p)->
√xt
) { }

1955 *
p
 = 
¥
;

1957  
NGX_OK
;

1958 
	}
}

1962 
	$ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1964 
ngx_c⁄√˘i⁄_t
 *
c
;

1965 
ngx_hâp_ªque°_t
 *
¥
;

1966 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1968 
c
 = 
r
->
c⁄√˘i⁄
;

1970 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1972 
rc
, &
r
->
uri
, &r->
¨gs
,Ñ =
c
->
d©a
,Ñ->
maö
->
cou¡
);

1974 i‡(
rc
 =
NGX_DONE
) {

1975 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

1979 i‡(
rc
 =
NGX_OK
 && 
r
->
fûãr_föÆize
) {

1980 
c
->
îr‹
 = 1;

1983 i‡(
rc
 =
NGX_DECLINED
) {

1984 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

1985 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

1986 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

1990 i‡(
r
 !r->
maö
 &&Ñ->
po°_subªque°
) {

1991 
rc
 = 
r
->
po°_subªque°
->
	`h™dÀr
‘,Ñ->po°_subªque°->
d©a
,Ñc);

1994 i‡(
rc
 =
NGX_ERROR


1995 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


1996 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST


1997 || 
c
->
îr‹
)

1999 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2003 i‡(
r
->
maö
->
blocked
) {

2004 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2007 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2011 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE


2012 || 
rc
 =
NGX_HTTP_CREATED


2013 || 
rc
 =
NGX_HTTP_NO_CONTENT
)

2015 i‡(
rc
 =
NGX_HTTP_CLOSE
) {

2016 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2020 i‡(
r
 =r->
maö
) {

2021 i‡(
c
->
ªad
->
timî_£t
) {

2022 
	`ngx_dñ_timî
(
c
->
ªad
);

2025 i‡(
c
->
wrôe
->
timî_£t
) {

2026 
	`ngx_dñ_timî
(
c
->
wrôe
);

2030 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2031 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2033 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
‘, 
rc
));

2037 i‡(
r
 !r->
maö
) {

2039 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
) {

2041 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2042 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2048 
¥
 = 
r
->
∑ª¡
;

2050 i‡(
r
 =
c
->
d©a
) {

2052 
r
->
maö
->
cou¡
--;

2053 
r
->
maö
->
subªque°s
++;

2055 i‡(!
r
->
logged
) {

2057 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2059 i‡(
˛cf
->
log_subªque°
) {

2060 
	`ngx_hâp_log_ªque°
(
r
);

2063 
r
->
logged
 = 1;

2066 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2068 &
r
->
uri
, &r->
¨gs
);

2071 
r
->
d⁄e
 = 1;

2073 i‡(
¥
->
po°p⁄ed
 &&Ör->po°p⁄ed->
ªque°
 =
r
) {

2074 
¥
->
po°p⁄ed
 =Ör->po°p⁄ed->
√xt
;

2077 
c
->
d©a
 = 
¥
;

2081 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2083 &
r
->
uri
, &r->
¨gs
);

2085 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2087 i‡(
r
->
waôed
) {

2088 
r
->
d⁄e
 = 1;

2092 i‡(
	`ngx_hâp_po°_ªque°
(
¥
, 
NULL
Ë!
NGX_OK
) {

2093 
r
->
maö
->
cou¡
++;

2094 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2098 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2100 &
¥
->
uri
, &¥->
¨gs
);

2105 i‡(
r
->
buf„ªd
 || 
c
->buf„ªd ||Ñ->
po°p⁄ed
 ||Ñ->
blocked
) {

2107 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2108 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2114 i‡(
r
 !
c
->
d©a
) {

2115 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2117 &
r
->
uri
, &r->
¨gs
);

2121 
r
->
d⁄e
 = 1;

2122 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2124 i‡(!
r
->
po°_a˘i⁄
) {

2125 
r
->
ªque°_com∂ëe
 = 1;

2128 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2132 i‡(
c
->
ªad
->
timî_£t
) {

2133 
	`ngx_dñ_timî
(
c
->
ªad
);

2136 i‡(
c
->
wrôe
->
timî_£t
) {

2137 
c
->
wrôe
->
dñayed
 = 0;

2138 
	`ngx_dñ_timî
(
c
->
wrôe
);

2141 i‡(
c
->
ªad
->
eof
) {

2142 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2146 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2147 
	}
}

2151 
	$ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2153 
ngx_hâp_˛ónup_t
 *
˛n
;

2154 
ngx_hâp_ªque°_t
 *
mr
;

2155 
ngx_hâp_ïhemîÆ_t
 *
e
;

2157 
mr
 = 
r
->
maö
;

2159 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2160 "hâ∞ãrmö©êªque° cou¡:%d", 
mr
->
cou¡
);

2162 i‡(
rc
 > 0 && (
mr
->
hódîs_out
.
°©us
 =0 || mr->
c⁄√˘i⁄
->
£¡
 == 0)) {

2163 
mr
->
hódîs_out
.
°©us
 = 
rc
;

2166 
˛n
 = 
mr
->
˛ónup
;

2167 
mr
->
˛ónup
 = 
NULL
;

2169 
˛n
) {

2170 i‡(
˛n
->
h™dÀr
) {

2171 
˛n
->
	`h™dÀr
(˛n->
d©a
);

2174 
˛n
 = c ->
√xt
;

2177 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2179 
mr
->
cou¡
, mr->
blocked
);

2181 i‡(
mr
->
wrôe_evít_h™dÀr
) {

2183 i‡(
mr
->
blocked
) {

2187 
e
 = 
	`ngx_hâp_ïhemîÆ
(
mr
);

2188 
mr
->
po°ed_ªque°s
 = 
NULL
;

2189 
mr
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ãrmö©e_h™dÀr
;

2190 (Ë
	`ngx_hâp_po°_ªque°
(
mr
, &
e
->
ãrmöÆ_po°ed_ªque°
);

2194 
	`ngx_hâp_˛o£_ªque°
(
mr
, 
rc
);

2195 
	}
}

2199 
	$ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2201 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2202 "hâ∞ãrmö©êh™dÀ∏cou¡:%d", 
r
->
cou¡
);

2204 
r
->
cou¡
 = 1;

2206 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2207 
	}
}

2211 
	$ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2213 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2215 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2217 i‡(
r
->
maö
->
cou¡
 != 1) {

2219 i‡(
r
->
disˇrd_body
) {

2220 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

2221 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
ªad
, 
˛cf
->
lögîög_timeout
);

2223 i‡(
r
->
lögîög_time
 == 0) {

2224 
r
->
lögîög_time
 = 
	`ngx_time
()

2225 + (
time_t
Ë(
˛cf
->
lögîög_time
 / 1000);

2229 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2233 i‡(!
ngx_ãrmö©e


2234 && !
ngx_exôög


2235 && 
r
->
kì∑live


2236 && 
˛cf
->
kì∑live_timeout
 > 0)

2238 
	`ngx_hâp_£t_kì∑live
(
r
);

2242 i‡(
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ALWAYS


2243 || (
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ON


2244 && (
r
->
lögîög_˛o£


2245 || 
r
->
hódî_ö
->
pos
 <Ñ->hódî_ö->
œ°


2246 || 
r
->
c⁄√˘i⁄
->
ªad
->
ªady
)))

2248 
	`ngx_hâp_£t_lögîög_˛o£
(
r
);

2252 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2253 
	}
}

2256 
ngx_öt_t


2257 
	$ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2259 
ngx_evít_t
 *
wev
;

2260 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2262 
r
->
hâp_°©e
 = 
NGX_HTTP_WRITING_REQUEST_STATE
;

2264 
r
->
ªad_evít_h™dÀr
 =Ñ->
disˇrd_body
 ?

2265 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
:

2266 
ngx_hâp_ã°_ªadög
;

2267 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_wrôî
;

2269 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

2271 i‡(
wev
->
ªady
 && wev->
dñayed
) {

2272  
NGX_OK
;

2275 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2276 i‡(!
wev
->
dñayed
) {

2277 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2280 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2281 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2282  
NGX_ERROR
;

2285  
NGX_OK
;

2286 
	}
}

2290 
	$ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
)

2292 
rc
;

2293 
ngx_evít_t
 *
wev
;

2294 
ngx_c⁄√˘i⁄_t
 *
c
;

2295 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2297 
c
 = 
r
->
c⁄√˘i⁄
;

2298 
wev
 = 
c
->
wrôe
;

2300 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2301 "hâ∞wrôî h™dÀr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2303 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_c‹e_moduÀ
);

2305 i‡(
wev
->
timedout
) {

2306 i‡(!
wev
->
dñayed
) {

2307 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

2309 
c
->
timedout
 = 1;

2311 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2315 
wev
->
timedout
 = 0;

2316 
wev
->
dñayed
 = 0;

2318 i‡(!
wev
->
ªady
) {

2319 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2321 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2322 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2330 i‡(
wev
->
dñayed
 || 
r
->
aio
) {

2331 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2334 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2335 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2341 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
NULL
);

2343 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2345 
rc
, &
r
->
uri
, &r->
¨gs
);

2347 i‡(
rc
 =
NGX_ERROR
) {

2348 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2352 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
 || (∏=r->
maö
 && 
c
->buffered)) {

2354 i‡(!
wev
->
dñayed
) {

2355 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2358 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2359 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2365 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2366 "hâ∞wrôî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2368 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2370 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2371 
	}
}

2375 
	$ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
)

2377 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2378 "hâ∞föÆizî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2380 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2381 
	}
}

2385 
	$ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2387 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2392 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)

2393 && 
r
->
c⁄√˘i⁄
->
ªad
->
a˘ive
)

2395 i‡(
	`ngx_dñ_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2396 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2399 
	}
}

2403 
	$ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2405 
n
;

2406 
buf
[1];

2407 
ngx_îr_t
 
îr
;

2408 
ngx_evít_t
 *
ªv
;

2409 
ngx_c⁄√˘i⁄_t
 *
c
;

2411 
c
 = 
r
->
c⁄√˘i⁄
;

2412 
ªv
 = 
c
->
ªad
;

2414 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "httpÅestÑeading");

2416 #i‡(
NGX_HAVE_KQUEUE
)

2418 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2420 i‡(!
ªv
->
≥ndög_eof
) {

2424 
ªv
->
eof
 = 1;

2425 
c
->
îr‹
 = 1;

2426 
îr
 = 
ªv
->
kq_î∫o
;

2428 
˛o£d
;

2433 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

2435 i‡(
n
 == 0) {

2436 
ªv
->
eof
 = 1;

2437 
c
->
îr‹
 = 1;

2438 
îr
 = 0;

2440 
˛o£d
;

2442 } i‡(
n
 == -1) {

2443 
îr
 = 
ngx_sockë_î∫o
;

2445 i‡(
îr
 !
NGX_EAGAIN
) {

2446 
ªv
->
eof
 = 1;

2447 
c
->
îr‹
 = 1;

2449 
˛o£d
;

2455 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ªv
->
a˘ive
) {

2457 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2458 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2464 
˛o£d
:

2466 i‡(
îr
) {

2467 
ªv
->
îr‹
 = 1;

2470 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

2473 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2474 
	}
}

2478 
	$ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
)

2480 
t˝_nodñay
;

2481 
ngx_öt_t
 
i
;

2482 
ngx_buf_t
 *
b
, *
f
;

2483 
ngx_evít_t
 *
ªv
, *
wev
;

2484 
ngx_c⁄√˘i⁄_t
 *
c
;

2485 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2486 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2487 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2489 
c
 = 
r
->
c⁄√˘i⁄
;

2490 
ªv
 = 
c
->
ªad
;

2492 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2494 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "set http keepalive handler");

2496 i‡(
r
->
disˇrd_body
) {

2497 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2498 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2499 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2503 
c
->
log
->
a˘i⁄
 = "closingÑequest";

2505 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2506 
b
 = 
r
->
hódî_ö
;

2508 i‡(
b
->
pos
 < b->
œ°
) {

2512 i‡(
b
 !
c
->
buf„r
) {

2522 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2524 i‡(
hc
->
‰ì
 =
NULL
) {

2525 
hc
->
‰ì
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
,

2526 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

2528 i‡(
hc
->
‰ì
 =
NULL
) {

2529 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2534 
i
 = 0; i < 
hc
->
nbusy
 - 1; i++) {

2535 
f
 = 
hc
->
busy
[
i
];

2536 
hc
->
‰ì
[hc->
n‰ì
++] = 
f
;

2537 
f
->
pos
 = f->
°¨t
;

2538 
f
->
œ°
 = f->
°¨t
;

2541 
hc
->
busy
[0] = 
b
;

2542 
hc
->
nbusy
 = 1;

2546 
r
->
kì∑live
 = 0;

2548 
	`ngx_hâp_‰ì_ªque°
(
r
, 0);

2550 
c
->
d©a
 = 
hc
;

2552 
	`ngx_add_timî
(
ªv
, 
˛cf
->
kì∑live_timeout
);

2554 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2555 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2559 
wev
 = 
c
->
wrôe
;

2560 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2562 i‡(
b
->
pos
 < b->
œ°
) {

2564 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "pipelinedÑequest");

2566 #i‡(
NGX_STAT_STUB
)

2567 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

2570 
hc
->
pùñöe
 = 1;

2571 
c
->
log
->
a˘i⁄
 = "reading clientÖipelinedÑequestÜine";

2573 
ªv
->
h™dÀr
 = 
ngx_hâp_öô_ªque°
;

2574 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2578 
hc
->
pùñöe
 = 0;

2588 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
r
Ë=
NGX_OK
) {

2589 
hc
->
ªque°
 = 
NULL
;

2592 
b
 = 
c
->
buf„r
;

2594 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

2601 
b
->
pos
 = 
NULL
;

2604 
b
->
pos
 = b->
°¨t
;

2605 
b
->
œ°
 = b->
°¨t
;

2608 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc free: %p %d",

2609 
hc
->
‰ì
, hc->
n‰ì
);

2611 i‡(
hc
->
‰ì
) {

2612 
i
 = 0; i < 
hc
->
n‰ì
; i++) {

2613 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
‰ì
[
i
]->
°¨t
);

2614 
hc
->
‰ì
[
i
] = 
NULL
;

2617 
hc
->
n‰ì
 = 0;

2620 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc busy: %p %d",

2621 
hc
->
busy
, hc->
nbusy
);

2623 i‡(
hc
->
busy
) {

2624 
i
 = 0; i < 
hc
->
nbusy
; i++) {

2625 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
busy
[
i
]->
°¨t
);

2626 
hc
->
busy
[
i
] = 
NULL
;

2629 
hc
->
nbusy
 = 0;

2632 #i‡(
NGX_HTTP_SSL
)

2633 i‡(
c
->
s¶
) {

2634 
	`ngx_s¶_‰ì_buf„r
(
c
);

2638 
ªv
->
h™dÀr
 = 
ngx_hâp_kì∑live_h™dÀr
;

2640 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

2641 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

2642 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2647 
c
->
log
->
a˘i⁄
 = "keepalive";

2649 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

2650 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

2651 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

2652 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2656 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

2657 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

2660 
t˝_nodñay
 = 1;

2663 i‡(
t˝_nodñay


2664 && 
˛cf
->
t˝_nodñay


2665 && 
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
)

2667 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2669 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2670 (c⁄° *Ë&
t˝_nodñay
, ())

2673 #i‡(
NGX_SOLARIS
)

2675 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_EINVAL
;

2678 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2681 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

2682 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2686 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2691 
r
->
hâp_°©e
 = 
NGX_HTTP_KEEPALIVE_STATE
;

2694 
c
->
idÀ
 = 1;

2695 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

2697 i‡(
ªv
->
ªady
) {

2698 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2700 
	}
}

2704 
	$ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

2706 
size_t
 
size
;

2707 
ssize_t
 
n
;

2708 
ngx_buf_t
 *
b
;

2709 
ngx_c⁄√˘i⁄_t
 *
c
;

2711 
c
 = 
ªv
->
d©a
;

2713 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http keepalive handler");

2715 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

2716 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2720 #i‡(
NGX_HAVE_KQUEUE
)

2722 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2723 i‡(
ªv
->
≥ndög_eof
) {

2724 
c
->
log
->
h™dÀr
 = 
NULL
;

2725 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

2727 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

2728 #i‡(
NGX_HTTP_SSL
)

2729 i‡(
c
->
s¶
) {

2730 
c
->
s¶
->
no_£nd_shutdown
 = 1;

2733 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2740 
b
 = 
c
->
buf„r
;

2741 
size
 = 
b
->
íd
 - b->
°¨t
;

2743 i‡(
b
->
pos
 =
NULL
) {

2751 
b
->
pos
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

2752 i‡(
b
->
pos
 =
NULL
) {

2753 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2757 
b
->
°¨t
 = b->
pos
;

2758 
b
->
œ°
 = b->
pos
;

2759 
b
->
íd
 = b->
pos
 + 
size
;

2767 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_ECONNRESET
;

2768 
	`ngx_£t_sockë_î∫o
(0);

2770 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

2771 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

2773 i‡(
n
 =
NGX_AGAIN
) {

2774 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2775 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2784 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

2790 
b
->
pos
 = 
NULL
;

2796 i‡(
n
 =
NGX_ERROR
) {

2797 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2801 
c
->
log
->
h™dÀr
 = 
NULL
;

2803 i‡(
n
 == 0) {

2804 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ngx_sockë_î∫o
,

2805 "˛õ¡ %V clo£d kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

2806 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2810 
b
->
œ°
 +
n
;

2812 #i‡(
NGX_STAT_STUB
)

2813 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

2816 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

2817 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

2819 
c
->
idÀ
 = 0;

2820 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

2822 
	`ngx_hâp_öô_ªque°
(
ªv
);

2823 
	}
}

2827 
	$ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
)

2829 
ngx_evít_t
 *
ªv
, *
wev
;

2830 
ngx_c⁄√˘i⁄_t
 *
c
;

2831 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2833 
c
 = 
r
->
c⁄√˘i⁄
;

2835 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2837 
ªv
 = 
c
->
ªad
;

2838 
ªv
->
h™dÀr
 = 
ngx_hâp_lögîög_˛o£_h™dÀr
;

2840 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2841 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2843 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2844 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2848 
wev
 = 
c
->
wrôe
;

2849 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2851 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

2852 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

2853 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2858 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

2859 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2860 
ngx_shutdown_sockë_n
 " failed");

2861 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2865 i‡(
ªv
->
ªady
) {

2866 
	`ngx_hâp_lögîög_˛o£_h™dÀr
(
ªv
);

2868 
	}
}

2872 
	$ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ªv
)

2874 
ssize_t
 
n
;

2875 
ngx_m£c_t
 
timî
;

2876 
ngx_c⁄√˘i⁄_t
 *
c
;

2877 
ngx_hâp_ªque°_t
 *
r
;

2878 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2879 
u_ch¨
 
buf„r
[
NGX_HTTP_LINGERING_BUFFER_SIZE
];

2881 
c
 = 
ªv
->
d©a
;

2882 
r
 = 
c
->
d©a
;

2884 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2887 i‡(
ªv
->
timedout
) {

2888 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2892 
timî
 = (
ngx_m£c_t
Ë(
r
->
lögîög_time
 - 
	`ngx_time
());

2893 i‡(
timî
 <= 0) {

2894 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2899 
n
 = 
c
->
	`ªcv
(c, 
buf„r
, 
NGX_HTTP_LINGERING_BUFFER_SIZE
);

2901 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "lögîögÑód: %d", 
n
);

2903 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

2904 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2908 } 
ªv
->
ªady
);

2910 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2911 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2915 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2917 
timî
 *= 1000;

2919 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

2920 
timî
 = 
˛cf
->
lögîög_timeout
;

2923 
	`ngx_add_timî
(
ªv
, 
timî
);

2924 
	}
}

2928 
	$ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
)

2930 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0, "httpÉmpty handler");

2933 
	}
}

2937 
	$ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2939 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2943 
	}
}

2946 
ngx_öt_t


2947 
	$ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
)

2949 
ngx_buf_t
 *
b
;

2950 
ngx_chaö_t
 
out
;

2952 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2953 i‡(
b
 =
NULL
) {

2954  
NGX_ERROR
;

2957 i‡(
Êags
 & 
NGX_HTTP_LAST
) {

2959 i‡(
r
 =r->
maö
 && !r->
po°_a˘i⁄
) {

2960 
b
->
œ°_buf
 = 1;

2963 
b
->
sync
 = 1;

2964 
b
->
œ°_ö_chaö
 = 1;

2968 i‡(
Êags
 & 
NGX_HTTP_FLUSH
) {

2969 
b
->
Êush
 = 1;

2972 
out
.
buf
 = 
b
;

2973 
out
.
√xt
 = 
NULL
;

2975  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

2976 
	}
}

2979 
ngx_öt_t


2980 
	$ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2982 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2984 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2986 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

2987  
NGX_DECLINED
;

2990 i‡(
r
->
po°_a˘i⁄
 &&Ñ->
uri_ch™ges
 == 0) {

2991  
NGX_DECLINED
;

2994 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2995 "po°á˘i⁄: \"%V\"", &
˛cf
->
po°_a˘i⁄
);

2997 
r
->
maö
->
cou¡
--;

2999 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

3000 
r
->
hódî_⁄ly
 = 1;

3001 
r
->
po°_a˘i⁄
 = 1;

3003 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

3005 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
[0] == '/') {

3006 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
˛cf
->
po°_a˘i⁄
, 
NULL
);

3009 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
˛cf
->
po°_a˘i⁄
);

3012  
NGX_OK
;

3013 
	}
}

3017 
	$ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3019 
ngx_c⁄√˘i⁄_t
 *
c
;

3021 
r
 =Ñ->
maö
;

3022 
c
 = 
r
->
c⁄√˘i⁄
;

3024 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3025 "hâ∞ªque° cou¡:%d blk:%d", 
r
->
cou¡
,Ñ->
blocked
);

3027 i‡(
r
->
cou¡
 == 0) {

3028 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "httpÑequest count is zero");

3031 
r
->
cou¡
--;

3033 i‡(
r
->
cou¡
 ||Ñ->
blocked
) {

3037 
	`ngx_hâp_‰ì_ªque°
(
r
, 
rc
);

3038 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3039 
	}
}

3043 
	$ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3045 
ngx_log_t
 *
log
;

3046 
lögî
Üinger;

3047 
ngx_hâp_˛ónup_t
 *
˛n
;

3048 
ngx_hâp_log_˘x_t
 *
˘x
;

3049 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3051 
log
 = 
r
->
c⁄√˘i⁄
->log;

3053 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http closeÑequest");

3055 i‡(
r
->
poﬁ
 =
NULL
) {

3056 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "httpÑequestálready closed");

3060 
˛n
 = 
r
->
˛ónup
; c ; c  = c ->
√xt
) {

3061 i‡(
˛n
->
h™dÀr
) {

3062 
˛n
->
	`h™dÀr
(˛n->
d©a
);

3066 #i‡(
NGX_STAT_STUB
)

3068 i‡(
r
->
°©_ªadög
) {

3069 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

3072 i‡(
r
->
°©_wrôög
) {

3073 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, -1);

3078 i‡(
rc
 > 0 && (
r
->
hódîs_out
.
°©us
 =0 ||Ñ->
c⁄√˘i⁄
->
£¡
 == 0)) {

3079 
r
->
hódîs_out
.
°©us
 = 
rc
;

3082 
log
->
a˘i⁄
 = "loggingÑequest";

3084 
	`ngx_hâp_log_ªque°
(
r
);

3086 
log
->
a˘i⁄
 = "closingÑequest";

3088 i‡(
r
->
c⁄√˘i⁄
->
timedout
) {

3089 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3091 i‡(
˛cf
->
ª£t_timedout_c⁄√˘i⁄
) {

3092 
lögî
.
l_⁄off
 = 1;

3093 
lögî
.
l_lögî
 = 0;

3095 i‡(
	`£tsock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

3096 (c⁄° *Ë&
lögî
, (linger)) == -1)

3098 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_sockë_î∫o
,

3105 
˘x
 = 
log
->
d©a
;

3106 
˘x
->
ªque°
 = 
NULL
;

3108 
r
->
ªque°_löe
.
Àn
 = 0;

3110 
r
->
c⁄√˘i⁄
->
de°royed
 = 1;

3112 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

3113 
	}
}

3117 
	$ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3119 
ngx_uöt_t
 
i
, 
n
;

3120 
ngx_hâp_h™dÀr_±
 *
log_h™dÀr
;

3121 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3123 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3125 
log_h™dÀr
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
ñts
;

3126 
n
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
√…s
;

3128 
i
 = 0; i < 
n
; i++) {

3129 
log_h™dÀr
[
i
](
r
);

3131 
	}
}

3135 
	$ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

3137 
ngx_poﬁ_t
 *
poﬁ
;

3139 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3140 "˛o£ hâ∞c⁄√˘i⁄: %d", 
c
->
fd
);

3142 #i‡(
NGX_HTTP_SSL
)

3144 i‡(
c
->
s¶
) {

3145 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

3146 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_˛o£_c⁄√˘i⁄
;

3153 #i‡(
NGX_STAT_STUB
)

3154 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

3157 
c
->
de°royed
 = 1;

3159 
poﬁ
 = 
c
->pool;

3161 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3163 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3164 
	}
}

3167 
u_ch¨
 *

3168 
	$ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3170 
u_ch¨
 *
p
;

3171 
ngx_hâp_ªque°_t
 *
r
;

3172 
ngx_hâp_log_˘x_t
 *
˘x
;

3174 i‡(
log
->
a˘i⁄
) {

3175 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3176 
Àn
 -
p
 - 
buf
;

3177 
buf
 = 
p
;

3180 
˘x
 = 
log
->
d©a
;

3182 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", &
˘x
->
c⁄√˘i⁄
->
addr_ãxt
);

3183 
Àn
 -
p
 - 
buf
;

3185 
r
 = 
˘x
->
ªque°
;

3187 i‡(
r
) {

3188  
r
->
	`log_h™dÀr
‘, 
˘x
->
cuºít_ªque°
, 
p
, 
Àn
);

3191 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ", server: %V",

3192 &
˘x
->
c⁄√˘i⁄
->
li°íög
->
addr_ãxt
);

3195  
p
;

3196 
	}
}

3199 
u_ch¨
 *

3200 
	$ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,Çgx_hâp_ªque°_à*
§
,

3201 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3203 *
uri_£∑øt‹
;

3204 
u_ch¨
 *
p
;

3205 
ngx_hâp_up°ªam_t
 *
u
;

3206 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3208 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3210 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", sîvî: %V", &
cscf
->
£rvî_«me
);

3211 
Àn
 -
p
 - 
buf
;

3212 
buf
 = 
p
;

3214 i‡(
r
->
ªque°_löe
.
d©a
 =
NULL
 &&Ñ->
ªque°_°¨t
) {

3215 
p
 = 
r
->
ªque°_°¨t
;Ö <Ñ->
hódî_ö
->
œ°
;Ö++) {

3216 i‡(*
p
 =
CR
 || *∞=
LF
) {

3221 
r
->
ªque°_löe
.
Àn
 = 
p
 -Ñ->
ªque°_°¨t
;

3222 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

3225 i‡(
r
->
ªque°_löe
.
Àn
) {

3226 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeque°: \"%V\"", &
r
->
ªque°_löe
);

3227 
Àn
 -
p
 - 
buf
;

3228 
buf
 = 
p
;

3231 i‡(
r
 !
§
) {

3232 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", subªque°: \"%V\"", &
§
->
uri
);

3233 
Àn
 -
p
 - 
buf
;

3234 
buf
 = 
p
;

3237 
u
 = 
§
->
up°ªam
;

3239 i‡(
u
 && u->
≥î
.
«me
) {

3241 
uri_£∑øt‹
 = "";

3243 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

3244 i‡(
u
->
≥î
.
sockaddr
 && u->≥î.sockaddr->
ß_Ámûy
 =
AF_UNIX
) {

3245 
uri_£∑øt‹
 = ":";

3249 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", upstream: \"%V%V%s%V\"",

3250 &
u
->
schema
, u->
≥î
.
«me
,

3251 
uri_£∑øt‹
, &
u
->
uri
);

3252 
Àn
 -
p
 - 
buf
;

3253 
buf
 = 
p
;

3256 i‡(
r
->
hódîs_ö
.
ho°
) {

3257 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", host: \"%V\"",

3258 &
r
->
hódîs_ö
.
ho°
->
vÆue
);

3259 
Àn
 -
p
 - 
buf
;

3260 
buf
 = 
p
;

3263 i‡(
r
->
hódîs_ö
.
ª„ªr
) {

3264 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeferrer: \"%V\"",

3265 &
r
->
hódîs_ö
.
ª„ªr
->
vÆue
);

3266 
buf
 = 
p
;

3269  
buf
;

3270 
	}
}

	@src/http/ngx_http_request.h

8 #i‚de‡
_NGX_HTTP_REQUEST_H_INCLUDED_


9 
	#_NGX_HTTP_REQUEST_H_INCLUDED_


	)

12 
	#NGX_HTTP_MAX_URI_CHANGES
 10

	)

13 
	#NGX_HTTP_MAX_SUBREQUESTS
 200

	)

16 
	#NGX_HTTP_LC_HEADER_LEN
 32

	)

19 
	#NGX_HTTP_DISCARD_BUFFER_SIZE
 4096

	)

20 
	#NGX_HTTP_LINGERING_BUFFER_SIZE
 4096

	)

23 
	#NGX_HTTP_VERSION_9
 9

	)

24 
	#NGX_HTTP_VERSION_10
 1000

	)

25 
	#NGX_HTTP_VERSION_11
 1001

	)

27 
	#NGX_HTTP_UNKNOWN
 0x0001

	)

28 
	#NGX_HTTP_GET
 0x0002

	)

29 
	#NGX_HTTP_HEAD
 0x0004

	)

30 
	#NGX_HTTP_POST
 0x0008

	)

31 
	#NGX_HTTP_PUT
 0x0010

	)

32 
	#NGX_HTTP_DELETE
 0x0020

	)

33 
	#NGX_HTTP_MKCOL
 0x0040

	)

34 
	#NGX_HTTP_COPY
 0x0080

	)

35 
	#NGX_HTTP_MOVE
 0x0100

	)

36 
	#NGX_HTTP_OPTIONS
 0x0200

	)

37 
	#NGX_HTTP_PROPFIND
 0x0400

	)

38 
	#NGX_HTTP_PROPPATCH
 0x0800

	)

39 
	#NGX_HTTP_LOCK
 0x1000

	)

40 
	#NGX_HTTP_UNLOCK
 0x2000

	)

41 
	#NGX_HTTP_PATCH
 0x4000

	)

42 
	#NGX_HTTP_TRACE
 0x8000

	)

44 
	#NGX_HTTP_CONNECTION_CLOSE
 1

	)

45 
	#NGX_HTTP_CONNECTION_KEEP_ALIVE
 2

	)

48 
	#NGX_NONE
 1

	)

51 
	#NGX_HTTP_PARSE_HEADER_DONE
 1

	)

53 
	#NGX_HTTP_CLIENT_ERROR
 10

	)

54 
	#NGX_HTTP_PARSE_INVALID_METHOD
 10

	)

55 
	#NGX_HTTP_PARSE_INVALID_REQUEST
 11

	)

56 
	#NGX_HTTP_PARSE_INVALID_09_METHOD
 12

	)

58 
	#NGX_HTTP_PARSE_INVALID_HEADER
 13

	)

62 
	#NGX_HTTP_SUBREQUEST_IN_MEMORY
 2

	)

63 
	#NGX_HTTP_SUBREQUEST_WAITED
 4

	)

64 
	#NGX_HTTP_LOG_UNSAFE
 8

	)

67 
	#NGX_HTTP_OK
 200

	)

68 
	#NGX_HTTP_CREATED
 201

	)

69 
	#NGX_HTTP_ACCEPTED
 202

	)

70 
	#NGX_HTTP_NO_CONTENT
 204

	)

71 
	#NGX_HTTP_PARTIAL_CONTENT
 206

	)

73 
	#NGX_HTTP_SPECIAL_RESPONSE
 300

	)

74 
	#NGX_HTTP_MOVED_PERMANENTLY
 301

	)

75 
	#NGX_HTTP_MOVED_TEMPORARILY
 302

	)

76 
	#NGX_HTTP_SEE_OTHER
 303

	)

77 
	#NGX_HTTP_NOT_MODIFIED
 304

	)

78 
	#NGX_HTTP_TEMPORARY_REDIRECT
 307

	)

80 
	#NGX_HTTP_BAD_REQUEST
 400

	)

81 
	#NGX_HTTP_UNAUTHORIZED
 401

	)

82 
	#NGX_HTTP_FORBIDDEN
 403

	)

83 
	#NGX_HTTP_NOT_FOUND
 404

	)

84 
	#NGX_HTTP_NOT_ALLOWED
 405

	)

85 
	#NGX_HTTP_REQUEST_TIME_OUT
 408

	)

86 
	#NGX_HTTP_CONFLICT
 409

	)

87 
	#NGX_HTTP_LENGTH_REQUIRED
 411

	)

88 
	#NGX_HTTP_PRECONDITION_FAILED
 412

	)

89 
	#NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
 413

	)

90 
	#NGX_HTTP_REQUEST_URI_TOO_LARGE
 414

	)

91 
	#NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
 415

	)

92 
	#NGX_HTTP_RANGE_NOT_SATISFIABLE
 416

	)

98 
	#NGX_HTTP_CLOSE
 444

	)

100 
	#NGX_HTTP_NGINX_CODES
 494

	)

102 
	#NGX_HTTP_REQUEST_HEADER_TOO_LARGE
 494

	)

104 
	#NGX_HTTPS_CERT_ERROR
 495

	)

105 
	#NGX_HTTPS_NO_CERT
 496

	)

111 
	#NGX_HTTP_TO_HTTPS
 497

	)

121 
	#NGX_HTTP_CLIENT_CLOSED_REQUEST
 499

	)

124 
	#NGX_HTTP_INTERNAL_SERVER_ERROR
 500

	)

125 
	#NGX_HTTP_NOT_IMPLEMENTED
 501

	)

126 
	#NGX_HTTP_BAD_GATEWAY
 502

	)

127 
	#NGX_HTTP_SERVICE_UNAVAILABLE
 503

	)

128 
	#NGX_HTTP_GATEWAY_TIME_OUT
 504

	)

129 
	#NGX_HTTP_INSUFFICIENT_STORAGE
 507

	)

132 
	#NGX_HTTP_LOWLEVEL_BUFFERED
 0xf0

	)

133 
	#NGX_HTTP_WRITE_BUFFERED
 0x10

	)

134 
	#NGX_HTTP_GZIP_BUFFERED
 0x20

	)

135 
	#NGX_HTTP_SSI_BUFFERED
 0x01

	)

136 
	#NGX_HTTP_SUB_BUFFERED
 0x02

	)

137 
	#NGX_HTTP_COPY_BUFFERED
 0x04

	)

140 #i‡(
NGX_HTTP_PROXY
 || 
NGX_HTTP_REALIP
 || 
NGX_HTTP_GEO
)

141 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


142 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

148 
	mNGX_HTTP_INITING_REQUEST_STATE
 = 0,

149 
	mNGX_HTTP_READING_REQUEST_STATE
,

150 
	mNGX_HTTP_PROCESS_REQUEST_STATE
,

152 
	mNGX_HTTP_CONNECT_UPSTREAM_STATE
,

153 
	mNGX_HTTP_WRITING_UPSTREAM_STATE
,

154 
	mNGX_HTTP_READING_UPSTREAM_STATE
,

156 
	mNGX_HTTP_WRITING_REQUEST_STATE
,

157 
	mNGX_HTTP_LINGERING_CLOSE_STATE
,

158 
	mNGX_HTTP_KEEPALIVE_STATE


159 } 
	tngx_hâp_°©e_e
;

163 
ngx_°r_t
 
	m«me
;

164 
ngx_uöt_t
 
	moff£t
;

165 
ngx_hâp_hódî_h™dÀr_±
 
	mh™dÀr
;

166 } 
	tngx_hâp_hódî_t
;

170 
ngx_°r_t
 
	m«me
;

171 
ngx_uöt_t
 
	moff£t
;

172 } 
	tngx_hâp_hódî_out_t
;

176 
ngx_li°_t
 
	mhódîs
;

178 
ngx_èbÀ_ñt_t
 *
	mho°
;

179 
ngx_èbÀ_ñt_t
 *
	mc⁄√˘i⁄
;

180 
ngx_èbÀ_ñt_t
 *
	mif_modifõd_sö˚
;

181 
ngx_èbÀ_ñt_t
 *
	mif_unmodifõd_sö˚
;

182 
ngx_èbÀ_ñt_t
 *
	mu£r_agít
;

183 
ngx_èbÀ_ñt_t
 *
	mª„ªr
;

184 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

185 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ty≥
;

187 
ngx_èbÀ_ñt_t
 *
	mønge
;

188 
ngx_èbÀ_ñt_t
 *
	mif_ønge
;

190 
ngx_èbÀ_ñt_t
 *
	må™s„r_ícodög
;

191 
ngx_èbÀ_ñt_t
 *
	mex≥˘
;

193 #i‡(
NGX_HTTP_GZIP
)

194 
ngx_èbÀ_ñt_t
 *
	mac˚±_ícodög
;

195 
ngx_èbÀ_ñt_t
 *
	mvü
;

198 
ngx_èbÀ_ñt_t
 *
	mauth‹iz©i⁄
;

200 
ngx_èbÀ_ñt_t
 *
	mkìp_Æive
;

202 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

203 
ngx_èbÀ_ñt_t
 *
	mx_f‹w¨ded_f‹
;

206 #i‡(
NGX_HTTP_REALIP
)

207 
ngx_èbÀ_ñt_t
 *
	mx_ªÆ_ù
;

210 #i‡(
NGX_HTTP_HEADERS
)

211 
ngx_èbÀ_ñt_t
 *
	mac˚±
;

212 
ngx_èbÀ_ñt_t
 *
	mac˚±_œnguage
;

215 #i‡(
NGX_HTTP_DAV
)

216 
ngx_èbÀ_ñt_t
 *
	mdïth
;

217 
ngx_èbÀ_ñt_t
 *
	mde°ö©i⁄
;

218 
ngx_èbÀ_ñt_t
 *
	movîwrôe
;

219 
ngx_èbÀ_ñt_t
 *
	md©e
;

222 
ngx_°r_t
 
	mu£r
;

223 
ngx_°r_t
 
	m∑sswd
;

225 
ngx_¨øy_t
 
	mcookõs
;

227 
ngx_°r_t
 
	m£rvî
;

228 
off_t
 
	mc⁄ã¡_Àngth_n
;

229 
time_t
 
	mkìp_Æive_n
;

231 
	mc⁄√˘i⁄_ty≥
:2;

232 
	mmsõ
:1;

233 
	mmsõ6
:1;

234 
	m›îa
:1;

235 
	mgecko
:1;

236 
	mchrome
:1;

237 
	mßÁri
:1;

238 
	mk⁄quî‹
:1;

239 } 
	tngx_hâp_hódîs_ö_t
;

243 
ngx_li°_t
 
	mhódîs
;

245 
ngx_uöt_t
 
	m°©us
;

246 
ngx_°r_t
 
	m°©us_löe
;

248 
ngx_èbÀ_ñt_t
 *
	m£rvî
;

249 
ngx_èbÀ_ñt_t
 *
	md©e
;

250 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

251 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ícodög
;

252 
ngx_èbÀ_ñt_t
 *
	mloˇti⁄
;

253 
ngx_èbÀ_ñt_t
 *
	mª‰esh
;

254 
ngx_èbÀ_ñt_t
 *
	mœ°_modifõd
;

255 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

256 
ngx_èbÀ_ñt_t
 *
	mac˚±_ønges
;

257 
ngx_èbÀ_ñt_t
 *
	mwww_authítiˇã
;

258 
ngx_èbÀ_ñt_t
 *
	mexpúes
;

259 
ngx_èbÀ_ñt_t
 *
	mëag
;

261 
ngx_°r_t
 *
	movîride_ch¨£t
;

263 
size_t
 
	mc⁄ã¡_ty≥_Àn
;

264 
ngx_°r_t
 
	mc⁄ã¡_ty≥
;

265 
ngx_°r_t
 
	mch¨£t
;

266 
u_ch¨
 *
	mc⁄ã¡_ty≥_lowˇ£
;

267 
ngx_uöt_t
 
	mc⁄ã¡_ty≥_hash
;

269 
ngx_¨øy_t
 
	mˇche_c⁄åﬁ
;

271 
off_t
 
	mc⁄ã¡_Àngth_n
;

272 
time_t
 
	md©e_time
;

273 
time_t
 
	mœ°_modifõd_time
;

274 } 
	tngx_hâp_hódîs_out_t
;

277 (*
	tngx_hâp_˛õ¡_body_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

280 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

281 
ngx_chaö_t
 *
bufs
;

282 
ngx_buf_t
 *
buf
;

283 
off_t
 
ª°
;

284 
ngx_chaö_t
 *
to_wrôe
;

285 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
;

286 } 
	tngx_hâp_ªque°_body_t
;

290 
ngx_hâp_ªque°_t
 *
ªque°
;

292 
ngx_buf_t
 **
busy
;

293 
ngx_öt_t
 
nbusy
;

295 
ngx_buf_t
 **
‰ì
;

296 
ngx_öt_t
 
n‰ì
;

298 
ngx_uöt_t
 
pùñöe
;

299 } 
	tngx_hâp_c⁄√˘i⁄_t
;

302 
ngx_hâp_£rvî_«me_s
 
	tngx_hâp_£rvî_«me_t
;

306 
ngx_hash_comböed_t
 
«mes
;

308 
ngx_uöt_t
 
ƒegex
;

309 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

310 } 
	tngx_hâp_vútuÆ_«mes_t
;

313 (*
	tngx_hâp_˛ónup_±
)(*
	td©a
);

315 
ngx_hâp_˛ónup_s
 
	tngx_hâp_˛ónup_t
;

317 
	sngx_hâp_˛ónup_s
 {

318 
ngx_hâp_˛ónup_±
 
h™dÀr
;

319 *
d©a
;

320 
ngx_hâp_˛ónup_t
 *
√xt
;

324 
	$ngx_öt_t
 (*
	tngx_hâp_po°_subªque°_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

325 *
	td©a
, 
	tngx_öt_t
 
	trc
);

328 
ngx_hâp_po°_subªque°_±
 
h™dÀr
;

329 *
d©a
;

330 } 
	tngx_hâp_po°_subªque°_t
;

333 
ngx_hâp_po°p⁄ed_ªque°_s
 
	tngx_hâp_po°p⁄ed_ªque°_t
;

335 
	sngx_hâp_po°p⁄ed_ªque°_s
 {

336 
ngx_hâp_ªque°_t
 *
ªque°
;

337 
ngx_chaö_t
 *
out
;

338 
ngx_hâp_po°p⁄ed_ªque°_t
 *
√xt
;

342 
ngx_hâp_po°ed_ªque°_s
 
	tngx_hâp_po°ed_ªque°_t
;

344 
	sngx_hâp_po°ed_ªque°_s
 {

345 
ngx_hâp_ªque°_t
 *
ªque°
;

346 
ngx_hâp_po°ed_ªque°_t
 *
√xt
;

350 
	$ngx_öt_t
 (*
	tngx_hâp_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

351 (*
	tngx_hâp_evít_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

354 
	sngx_hâp_ªque°_s
 {

355 
uöt32_t
 
sig«tuª
;

357 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

359 **
˘x
;

360 **
maö_c⁄f
;

361 **
§v_c⁄f
;

362 **
loc_c⁄f
;

364 
ngx_hâp_evít_h™dÀr_±
 
ªad_evít_h™dÀr
;

365 
ngx_hâp_evít_h™dÀr_±
 
wrôe_evít_h™dÀr
;

367 #i‡(
NGX_HTTP_CACHE
)

368 
ngx_hâp_ˇche_t
 *
ˇche
;

371 
ngx_hâp_up°ªam_t
 *
up°ªam
;

372 
ngx_¨øy_t
 *
up°ªam_°©es
;

375 
ngx_poﬁ_t
 *
poﬁ
;

376 
ngx_buf_t
 *
hódî_ö
;

378 
ngx_hâp_hódîs_ö_t
 
hódîs_ö
;

379 
ngx_hâp_hódîs_out_t
 
hódîs_out
;

381 
ngx_hâp_ªque°_body_t
 *
ªque°_body
;

383 
time_t
 
lögîög_time
;

384 
time_t
 
°¨t_£c
;

385 
ngx_m£c_t
 
°¨t_m£c
;

387 
ngx_uöt_t
 
mëhod
;

388 
ngx_uöt_t
 
hâp_vîsi⁄
;

390 
ngx_°r_t
 
ªque°_löe
;

391 
ngx_°r_t
 
uri
;

392 
ngx_°r_t
 
¨gs
;

393 
ngx_°r_t
 
exãn
;

394 
ngx_°r_t
 
u≈¨£d_uri
;

396 
ngx_°r_t
 
mëhod_«me
;

397 
ngx_°r_t
 
hâp_¥Ÿocﬁ
;

399 
ngx_chaö_t
 *
out
;

400 
ngx_hâp_ªque°_t
 *
maö
;

401 
ngx_hâp_ªque°_t
 *
∑ª¡
;

402 
ngx_hâp_po°p⁄ed_ªque°_t
 *
po°p⁄ed
;

403 
ngx_hâp_po°_subªque°_t
 *
po°_subªque°
;

404 
ngx_hâp_po°ed_ªque°_t
 *
po°ed_ªque°s
;

406 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

408 
ngx_öt_t
 
pha£_h™dÀr
;

409 
ngx_hâp_h™dÀr_±
 
c⁄ã¡_h™dÀr
;

410 
ngx_uöt_t
 
ac˚ss_code
;

412 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨übÀs
;

414 #i‡(
NGX_PCRE
)

415 
ngx_uöt_t
 
nˇ±uªs
;

416 *
ˇ±uªs
;

417 
u_ch¨
 *
ˇ±uªs_d©a
;

420 
size_t
 
limô_øã
;

423 
size_t
 
hódî_size
;

425 
off_t
 
ªque°_Àngth
;

427 
ngx_uöt_t
 
îr_°©us
;

429 
ngx_hâp_c⁄√˘i⁄_t
 *
hâp_c⁄√˘i⁄
;

431 
ngx_hâp_log_h™dÀr_±
 
log_h™dÀr
;

433 
ngx_hâp_˛ónup_t
 *
˛ónup
;

435 
subªque°s
:8;

436 
cou¡
:8;

437 
blocked
:8;

439 
aio
:1;

441 
hâp_°©e
:4;

444 
com∂ex_uri
:1;

447 
quŸed_uri
:1;

450 
∂us_ö_uri
:1;

453 
•a˚_ö_uri
:1;

455 
övÆid_hódî
:1;

457 
add_uri_to_Æüs
:1;

458 
vÆid_loˇti⁄
:1;

459 
vÆid_u≈¨£d_uri
:1;

460 
uri_ch™ged
:1;

461 
uri_ch™ges
:4;

463 
ªque°_body_ö_sögÀ_buf
:1;

464 
ªque°_body_ö_fûe_⁄ly
:1;

465 
ªque°_body_ö_≥rsi°ít_fûe
:1;

466 
ªque°_body_ö_˛ón_fûe
:1;

467 
ªque°_body_fûe_group_ac˚ss
:1;

468 
ªque°_body_fûe_log_Àvñ
:3;

470 
subªque°_ö_mem‹y
:1;

471 
waôed
:1;

473 #i‡(
NGX_HTTP_CACHE
)

474 
ˇched
:1;

477 #i‡(
NGX_HTTP_GZIP
)

478 
gzù_ã°ed
:1;

479 
gzù_ok
:1;

480 
gzù_v¨y
:1;

483 
¥oxy
:1;

484 
by∑ss_ˇche
:1;

485 
no_ˇche
:1;

492 
limô_c⁄n_£t
:1;

493 
limô_ªq_£t
:1;

496 
ˇchóbÀ
:1;

499 
pùñöe
:1;

500 
∂aö_hâp
:1;

501 
chunked
:1;

502 
hódî_⁄ly
:1;

503 
kì∑live
:1;

504 
lögîög_˛o£
:1;

505 
disˇrd_body
:1;

506 
öã∫Æ
:1;

507 
îr‹_∑ge
:1;

508 
ign‹e_c⁄ã¡_ícodög
:1;

509 
fûãr_föÆize
:1;

510 
po°_a˘i⁄
:1;

511 
ªque°_com∂ëe
:1;

512 
ªque°_ouçut
:1;

513 
hódî_£¡
:1;

514 
ex≥˘_ã°ed
:1;

515 
roŸ_ã°ed
:1;

516 
d⁄e
:1;

517 
logged
:1;

519 
buf„ªd
:4;

521 
maö_fûãr_√ed_ö_mem‹y
:1;

522 
fûãr_√ed_ö_mem‹y
:1;

523 
fûãr_√ed_ãmp‹¨y
:1;

524 
Ælow_ønges
:1;

526 #i‡(
NGX_STAT_STUB
)

527 
°©_ªadög
:1;

528 
°©_wrôög
:1;

533 
ngx_uöt_t
 
°©e
;

535 
ngx_uöt_t
 
hódî_hash
;

536 
ngx_uöt_t
 
lowˇ£_ödex
;

537 
u_ch¨
 
lowˇ£_hódî
[
NGX_HTTP_LC_HEADER_LEN
];

539 
u_ch¨
 *
hódî_«me_°¨t
;

540 
u_ch¨
 *
hódî_«me_íd
;

541 
u_ch¨
 *
hódî_°¨t
;

542 
u_ch¨
 *
hódî_íd
;

549 
u_ch¨
 *
uri_°¨t
;

550 
u_ch¨
 *
uri_íd
;

551 
u_ch¨
 *
uri_ext
;

552 
u_ch¨
 *
¨gs_°¨t
;

553 
u_ch¨
 *
ªque°_°¨t
;

554 
u_ch¨
 *
ªque°_íd
;

555 
u_ch¨
 *
mëhod_íd
;

556 
u_ch¨
 *
schema_°¨t
;

557 
u_ch¨
 *
schema_íd
;

558 
u_ch¨
 *
ho°_°¨t
;

559 
u_ch¨
 *
ho°_íd
;

560 
u_ch¨
 *
p‹t_°¨t
;

561 
u_ch¨
 *
p‹t_íd
;

563 
hâp_mö‹
:16;

564 
hâp_maj‹
:16;

569 
ngx_hâp_po°ed_ªque°_t
 
ãrmöÆ_po°ed_ªque°
;

570 #i‡(
NGX_HAVE_AIO_SENDFILE
)

571 
u_ch¨
 
aio_¥ñﬂd
;

573 } 
	tngx_hâp_ïhemîÆ_t
;

576 
ngx_hâp_hódî_t
 
ngx_hâp_hódîs_ö
[];

577 
ngx_hâp_hódî_out_t
 
ngx_hâp_hódîs_out
[];

	@src/http/ngx_http_request_body.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

16 
ngx_chaö_t
 *
body
);

17 
ngx_öt_t
 
ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_öt_t
 
ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t


29 
	$ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

32 
size_t
 
¥îód
;

33 
ssize_t
 
size
;

34 
ngx_öt_t
 
rc
;

35 
ngx_buf_t
 *
b
;

36 
ngx_chaö_t
 *
˛
, **
√xt
;

37 
ngx_hâp_ªque°_body_t
 *
rb
;

38 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

40 
r
->
maö
->
cou¡
++;

42 i‡(
r
->
ªque°_body
 ||Ñ->
disˇrd_body
) {

43 
	`po°_h™dÀr
(
r
);

44  
NGX_OK
;

47 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

48 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

49 
d⁄e
;

52 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

53 i‡(
rb
 =
NULL
) {

54 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

55 
d⁄e
;

58 
r
->
ªque°_body
 = 
rb
;

60 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0) {

61 
	`po°_h™dÀr
(
r
);

62  
NGX_OK
;

65 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

67 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

69 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
) {

70 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
, 
NULL
Ë!
NGX_OK
) {

71 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

72 
d⁄e
;

76 
	`po°_h™dÀr
(
r
);

78  
NGX_OK
;

81 
rb
->
po°_h™dÀr
 =Öost_handler;

91 
¥îód
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

93 i‡(
¥îód
) {

97 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

98 "hâ∞˛õ¡Ñeque° bodyÖªªad %uz", 
¥îód
);

100 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

101 i‡(
b
 =
NULL
) {

102 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

103 
d⁄e
;

106 
b
->
ãmp‹¨y
 = 1;

107 
b
->
°¨t
 = 
r
->
hódî_ö
->
pos
;

108 
b
->
pos
 = 
r
->
hódî_ö
->pos;

109 
b
->
œ°
 = 
r
->
hódî_ö
->last;

110 
b
->
íd
 = 
r
->
hódî_ö
->end;

112 
rb
->
bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

113 i‡(
rb
->
bufs
 =
NULL
) {

114 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

115 
d⁄e
;

118 
rb
->
bufs
->
buf
 = 
b
;

119 
rb
->
bufs
->
√xt
 = 
NULL
;

121 
rb
->
buf
 = 
b
;

123 i‡((
off_t
Ë
¥îód
 >
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) {

127 
r
->
hódî_ö
->
pos
 +(
size_t
Ër->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

128 
r
->
ªque°_Àngth
 +r->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

129 
b
->
œ°
 = 
r
->
hódî_ö
->
pos
;

131 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
) {

132 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
, 
rb
->
bufs
Ë!
NGX_OK
) {

133 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

134 
d⁄e
;

138 
	`po°_h™dÀr
(
r
);

140  
NGX_OK
;

147 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
œ°
;

149 
r
->
ªque°_Àngth
 +
¥îód
;

151 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 - 
¥îód
;

153 i‡(
rb
->
ª°
 <(
off_t
Ë(
b
->
íd
 - b->
œ°
)) {

157 
rb
->
to_wrôe
 =Ñb->
bufs
;

159 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

161 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

162 
d⁄e
;

165 
√xt
 = &
rb
->
bufs
->next;

168 
b
 = 
NULL
;

169 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

170 
√xt
 = &
rb
->
bufs
;

173 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

174 
size
 += size >> 2;

176 i‡(
rb
->
ª°
 < 
size
) {

177 
size
 = (
ssize_t
Ë
rb
->
ª°
;

179 i‡(
r
->
ªque°_body_ö_sögÀ_buf
) {

180 
size
 +
¥îód
;

184 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

187 
b
 = 
NULL
;

190 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

191 i‡(
rb
->
buf
 =
NULL
) {

192 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

193 
d⁄e
;

196 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

197 i‡(
˛
 =
NULL
) {

198 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

199 
d⁄e
;

202 
˛
->
buf
 = 
rb
->buf;

203 
˛
->
√xt
 = 
NULL
;

205 i‡(
b
 && 
r
->
ªque°_body_ö_sögÀ_buf
) {

206 
size
 = 
b
->
œ°
 - b->
pos
;

207 
	`ngx_mem˝y
(
rb
->
buf
->
pos
, 
b
->pos, 
size
);

208 
rb
->
buf
->
œ°
 +
size
;

210 
√xt
 = &
rb
->
bufs
;

213 *
√xt
 = 
˛
;

215 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
 ||Ñ->
ªque°_body_ö_sögÀ_buf
) {

216 
rb
->
to_wrôe
 =Ñb->
bufs
;

219 
rb
->
to_wrôe
 =Ñb->
bufs
->
√xt
 ?Ñb->bufs->next :Ñb->bufs;

222 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

224 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

226 
d⁄e
:

228 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

229 
r
->
maö
->
cou¡
--;

232  
rc
;

233 
	}
}

237 
	$ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

239 
ngx_öt_t
 
rc
;

241 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

242 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

243 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

247 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

249 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

250 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

252 
	}
}

255 
ngx_öt_t


256 
	$ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

258 
size_t
 
size
;

259 
ssize_t
 
n
;

260 
ngx_buf_t
 *
b
;

261 
ngx_c⁄√˘i⁄_t
 *
c
;

262 
ngx_hâp_ªque°_body_t
 *
rb
;

263 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

265 
c
 = 
r
->
c⁄√˘i⁄
;

266 
rb
 = 
r
->
ªque°_body
;

268 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

273 i‡(
rb
->
buf
->
œ°
 =rb->buf->
íd
) {

275 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
, 
rb
->
to_wrôe
Ë!
NGX_OK
) {

276  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

279 
rb
->
to_wrôe
 =Ñb->
bufs
->
√xt
 ?Ñb->bufs->next :Ñb->bufs;

280 
rb
->
buf
->
œ°
 =Ñb->buf->
°¨t
;

283 
size
 = 
rb
->
buf
->
íd
 -Ñb->buf->
œ°
;

285 i‡((
off_t
Ë
size
 > 
rb
->
ª°
) {

286 
size
 = (
size_t
Ë
rb
->
ª°
;

289 
n
 = 
c
->
	`ªcv
(c, 
rb
->
buf
->
œ°
, 
size
);

291 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

292 "hâ∞˛õ¡Ñeque° bodyÑecv %z", 
n
);

294 i‡(
n
 =
NGX_AGAIN
) {

298 i‡(
n
 == 0) {

299 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

303 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

304 
c
->
îr‹
 = 1;

305  
NGX_HTTP_BAD_REQUEST
;

308 
rb
->
buf
->
œ°
 +
n
;

309 
rb
->
ª°
 -
n
;

310 
r
->
ªque°_Àngth
 +
n
;

312 i‡(
rb
->
ª°
 == 0) {

316 i‡(
rb
->
buf
->
œ°
 <Ñb->buf->
íd
) {

321 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

322 "hâ∞˛õ¡Ñeque° bodyÑe° %O", 
rb
->
ª°
);

324 i‡(
rb
->
ª°
 == 0) {

328 i‡(!
c
->
ªad
->
ªady
) {

329 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

330 
	`ngx_add_timî
(
c
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

332 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

333  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

336  
NGX_AGAIN
;

340 i‡(
c
->
ªad
->
timî_£t
) {

341 
	`ngx_dñ_timî
(
c
->
ªad
);

344 i‡(
rb
->
ãmp_fûe
 || 
r
->
ªque°_body_ö_fûe_⁄ly
) {

348 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
, 
rb
->
to_wrôe
Ë!
NGX_OK
) {

349  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

352 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

353 i‡(
b
 =
NULL
) {

354  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

357 
b
->
ö_fûe
 = 1;

358 
b
->
fûe_pos
 = 0;

359 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

360 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

362 i‡(
rb
->
bufs
->
√xt
) {

363 
rb
->
bufs
->
√xt
->
buf
 = 
b
;

366 
rb
->
bufs
->
buf
 = 
b
;

370 i‡(
rb
->
bufs
->
√xt


371 && (
r
->
ªque°_body_ö_fûe_⁄ly
 ||Ñ->
ªque°_body_ö_sögÀ_buf
))

373 
rb
->
bufs
 =Ñb->bufs->
√xt
;

376 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

378 
rb
->
	`po°_h™dÀr
(
r
);

380  
NGX_OK
;

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
body
)

387 
ssize_t
 
n
;

388 
ngx_ãmp_fûe_t
 *
tf
;

389 
ngx_hâp_ªque°_body_t
 *
rb
;

390 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

392 
rb
 = 
r
->
ªque°_body
;

394 i‡(
rb
->
ãmp_fûe
 =
NULL
) {

395 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

396 i‡(
tf
 =
NULL
) {

397  
NGX_ERROR
;

400 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

402 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

403 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

404 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

405 
tf
->
poﬁ
 = 
r
->pool;

406 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

407 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

408 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

409 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

411 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

412 
tf
->
ac˚ss
 = 0660;

415 
rb
->
ãmp_fûe
 = 
tf
;

417 i‡(
body
 =
NULL
) {

420 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

421 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

422 !
NGX_OK
)

424  
NGX_ERROR
;

427  
NGX_OK
;

431 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
rb
->
ãmp_fûe
, 
body
);

435 i‡(
n
 =
NGX_ERROR
) {

436  
NGX_ERROR
;

439 
rb
->
ãmp_fûe
->
off£t
 +
n
;

441  
NGX_OK
;

442 
	}
}

445 
ngx_öt_t


446 
	$ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

448 
ssize_t
 
size
;

449 
ngx_evít_t
 *
ªv
;

451 i‡(
r
 !r->
maö
 ||Ñ->
disˇrd_body
) {

452  
NGX_OK
;

455 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

456  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

459 
ªv
 = 
r
->
c⁄√˘i⁄
->
ªad
;

461 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "http set discard body");

463 i‡(
ªv
->
timî_£t
) {

464 
	`ngx_dñ_timî
(
ªv
);

467 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 <0 ||Ñ->
ªque°_body
) {

468  
NGX_OK
;

471 
size
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

473 i‡(
size
) {

474 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 
size
) {

475 
r
->
hódî_ö
->
pos
 +
size
;

476 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
size
;

479 
r
->
hódî_ö
->
pos
 +(
size_t
Ër->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

480 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

481  
NGX_OK
;

485 i‡(
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
Ë=
NGX_OK
) {

486 
r
->
lögîög_˛o£
 = 0;

487  
NGX_OK
;

492 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

494 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

495  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

498 
r
->
cou¡
++;

499 
r
->
disˇrd_body
 = 1;

501  
NGX_OK
;

502 
	}
}

506 
	$ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

508 
ngx_öt_t
 
rc
;

509 
ngx_m£c_t
 
timî
;

510 
ngx_evít_t
 *
ªv
;

511 
ngx_c⁄√˘i⁄_t
 *
c
;

512 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

514 
c
 = 
r
->
c⁄√˘i⁄
;

515 
ªv
 = 
c
->
ªad
;

517 i‡(
ªv
->
timedout
) {

518 
c
->
timedout
 = 1;

519 
c
->
îr‹
 = 1;

520 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

524 i‡(
r
->
lögîög_time
) {

525 
timî
 = (
ngx_m£c_t
Ë(
r
->
lögîög_time
 - 
	`ngx_time
());

527 i‡(
timî
 <= 0) {

528 
r
->
disˇrd_body
 = 0;

529 
r
->
lögîög_˛o£
 = 0;

530 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

535 
timî
 = 0;

538 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

540 i‡(
rc
 =
NGX_OK
) {

541 
r
->
disˇrd_body
 = 0;

542 
r
->
lögîög_˛o£
 = 0;

543 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

549 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

550 
c
->
îr‹
 = 1;

551 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

555 i‡(
timî
) {

557 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

559 
timî
 *= 1000;

561 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

562 
timî
 = 
˛cf
->
lögîög_timeout
;

565 
	`ngx_add_timî
(
ªv
, 
timî
);

567 
	}
}

570 
ngx_öt_t


571 
	$ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

573 
size_t
 
size
;

574 
ssize_t
 
n
;

575 
u_ch¨
 
buf„r
[
NGX_HTTP_DISCARD_BUFFER_SIZE
];

577 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

581 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

582 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

583  
NGX_OK
;

586 i‡(!
r
->
c⁄√˘i⁄
->
ªad
->
ªady
) {

587  
NGX_AGAIN
;

590 
size
 = (
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 
NGX_HTTP_DISCARD_BUFFER_SIZE
) ?

591 
NGX_HTTP_DISCARD_BUFFER_SIZE
:

592 (
size_t
Ë
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

594 
n
 = 
r
->
c⁄√˘i⁄
->
	`ªcv
‘->c⁄√˘i⁄, 
buf„r
, 
size
);

596 i‡(
n
 =
NGX_ERROR
) {

597 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

598  
NGX_OK
;

601 i‡(
n
 =
NGX_AGAIN
) {

602  
NGX_AGAIN
;

605 i‡(
n
 == 0) {

606  
NGX_OK
;

609 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
n
;

611 
	}
}

614 
ngx_öt_t


615 
	$ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
)

617 
ngx_öt_t
 
n
;

618 
ngx_°r_t
 *
ex≥˘
;

620 i‡(
r
->
ex≥˘_ã°ed


621 || 
r
->
hódîs_ö
.
ex≥˘
 =
NULL


622 || 
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
)

624  
NGX_OK
;

627 
r
->
ex≥˘_ã°ed
 = 1;

629 
ex≥˘
 = &
r
->
hódîs_ö
.ex≥˘->
vÆue
;

631 i‡(
ex≥˘
->
Àn
 != ("100-continue") - 1

632 || 
	`ngx_°∫ˇ£cmp
(
ex≥˘
->
d©a
, (
u_ch¨
 *) "100-continue",

636  
NGX_OK
;

639 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

642 
n
 = 
r
->
c⁄√˘i⁄
->
	`£nd
(r->connection,

643 (
u_ch¨
 *Ë"HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF,

644 ("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1);

646 i‡(
n
 =("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1) {

647  
NGX_OK
;

652  
NGX_ERROR
;

653 
	}
}

	@src/http/ngx_http_script.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

14 
ngx_öt_t
 
ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

15 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

16 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
);

17 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

18 
ngx_°r_t
 *
«me
);

19 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

20 #i‡(
NGX_PCRE
)

21 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

22 
ngx_uöt_t
 
n
);

24 
ngx_öt_t


25 
ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

26 
size_t
 
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

27 
ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

30 
	#ngx_hâp_s¸ùt_exô
 (
u_ch¨
 *Ë&
ngx_hâp_s¸ùt_exô_code


	)

32 
uöçå_t
 
	gngx_hâp_s¸ùt_exô_code
 = (uöçå_tË
NULL
;

36 
	$ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
)

39 
ngx_uöt_t
 *
ödex
;

41 
ödex
 = 
vÆ
->
Êushes
;

43 i‡(
ödex
) {

44 *
ödex
 !(
ngx_uöt_t
) -1) {

46 i‡(
r
->
v¨übÀs
[*
ödex
].
no_ˇchóbÀ
) {

47 
r
->
v¨übÀs
[*
ödex
].
vÆid
 = 0;

48 
r
->
v¨übÀs
[*
ödex
].
nŸ_found
 = 0;

51 
ödex
++;

54 
	}
}

57 
ngx_öt_t


58 
	$ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
,

59 
ngx_°r_t
 *
vÆue
)

61 
size_t
 
Àn
;

62 
ngx_hâp_s¸ùt_code_±
 
code
;

63 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

64 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

66 i‡(
vÆ
->
Àngths
 =
NULL
) {

67 *
vÆue
 = 
vÆ
->value;

68  
NGX_OK
;

71 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
r
, 
vÆ
);

73 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

75 
e
.
ù
 = 
vÆ
->
Àngths
;

76 
e
.
ªque°
 = 
r
;

77 
e
.
Êushed
 = 1;

79 
Àn
 = 0;

81 *(
uöçå_t
 *Ë
e
.
ù
) {

82 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

83 
Àn
 +
	`lcode
(&
e
);

86 
vÆue
->
Àn
 =Üen;

87 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

88 i‡(
vÆue
->
d©a
 =
NULL
) {

89  
NGX_ERROR
;

92 
e
.
ù
 = 
vÆ
->
vÆues
;

93 
e
.
pos
 = 
vÆue
->
d©a
;

94 
e
.
buf
 = *
vÆue
;

96 *(
uöçå_t
 *Ë
e
.
ù
) {

97 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

98 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

101 *
vÆue
 = 
e
.
buf
;

103  
NGX_OK
;

104 
	}
}

107 
ngx_öt_t


108 
	$ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
)

110 
ngx_°r_t
 *
v
;

111 
ngx_uöt_t
 
i
, 
n
, 
nv
, 
nc
;

112 
ngx_¨øy_t
 
Êushes
, 
Àngths
, 
vÆues
, *
pf
, *
∂
, *
pv
;

113 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

115 
v
 = 
ccv
->
vÆue
;

117 
nv
 = 0;

118 
nc
 = 0;

120 
i
 = 0; i < 
v
->
Àn
; i++) {

121 i‡(
v
->
d©a
[
i
] == '$') {

122 i‡(
v
->
d©a
[
i
 + 1] >= '1' && v->data[i + 1] <= '9') {

123 
nc
++;

126 
nv
++;

131 i‡((
v
->
Àn
 =0 || v->
d©a
[0] != '$')

132 && (
ccv
->
c⁄f_¥efix
 || ccv->
roŸ_¥efix
))

134 i‡(
	`ngx_c⁄f_fuŒ_«me
(
ccv
->
cf
->
cy˛e
, 
v
, ccv->
c⁄f_¥efix
Ë!
NGX_OK
) {

135  
NGX_ERROR
;

138 
ccv
->
c⁄f_¥efix
 = 0;

139 
ccv
->
roŸ_¥efix
 = 0;

142 
ccv
->
com∂ex_vÆue
->
vÆue
 = *
v
;

143 
ccv
->
com∂ex_vÆue
->
Êushes
 = 
NULL
;

144 
ccv
->
com∂ex_vÆue
->
Àngths
 = 
NULL
;

145 
ccv
->
com∂ex_vÆue
->
vÆues
 = 
NULL
;

147 i‡(
nv
 =0 && 
nc
 == 0) {

148  
NGX_OK
;

151 
n
 = 
nv
 + 1;

153 i‡(
	`ngx_¨øy_öô
(&
Êushes
, 
ccv
->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
))

154 !
NGX_OK
)

156  
NGX_ERROR
;

159 
n
 = 
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

160 + (
ngx_hâp_s¸ùt_v¨_code_t
))

161 + (
uöçå_t
);

163 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

164  
NGX_ERROR
;

167 
n
 = (
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

168 + (
ngx_hâp_s¸ùt_v¨_code_t
))

169 + (
uöçå_t
)

170 + 
v
->
Àn


171 + (
uöçå_t
) - 1)

172 & ~((
uöçå_t
) - 1);

174 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

175  
NGX_ERROR
;

178 
pf
 = &
Êushes
;

179 
∂
 = &
Àngths
;

180 
pv
 = &
vÆues
;

182 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

184 
sc
.
cf
 = 
ccv
->cf;

185 
sc
.
sour˚
 = 
v
;

186 
sc
.
Êushes
 = &
pf
;

187 
sc
.
Àngths
 = &
∂
;

188 
sc
.
vÆues
 = &
pv
;

189 
sc
.
com∂ëe_Àngths
 = 1;

190 
sc
.
com∂ëe_vÆues
 = 1;

191 
sc
.
zîo
 = 
ccv
->zero;

192 
sc
.
c⁄f_¥efix
 = 
ccv
->conf_prefix;

193 
sc
.
roŸ_¥efix
 = 
ccv
->root_prefix;

195 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

196  
NGX_ERROR
;

199 i‡(
Êushes
.
√…s
) {

200 
ccv
->
com∂ex_vÆue
->
Êushes
 = flushes.
ñts
;

201 
ccv
->
com∂ex_vÆue
->
Êushes
[Êushes.
√…s
] = (
ngx_uöt_t
) -1;

204 
ccv
->
com∂ex_vÆue
->
Àngths
 =Üígths.
ñts
;

205 
ccv
->
com∂ex_vÆue
->
vÆues
 = vÆues.
ñts
;

207  
NGX_OK
;

208 
	}
}

212 
	$ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
p
 = 
c⁄f
;

216 
ngx_°r_t
 *
vÆue
;

217 
ngx_hâp_com∂ex_vÆue_t
 **
cv
;

218 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

220 
cv
 = (
ngx_hâp_com∂ex_vÆue_t
 **Ë(
p
 + 
cmd
->
off£t
);

222 i‡(*
cv
 !
NULL
) {

226 *
cv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

227 i‡(*
cv
 =
NULL
) {

228  
NGX_CONF_ERROR
;

231 
vÆue
 = 
cf
->
¨gs
->
ñts
;

233 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

235 
ccv
.
cf
 = cf;

236 
ccv
.
vÆue
 = &value[1];

237 
ccv
.
com∂ex_vÆue
 = *
cv
;

239 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

240  
NGX_CONF_ERROR
;

243  
NGX_CONF_OK
;

244 
	}
}

247 
ngx_öt_t


248 
	$ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
¥ediˇãs
)

250 
ngx_°r_t
 
vÆ
;

251 
ngx_uöt_t
 
i
;

252 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

254 i‡(
¥ediˇãs
 =
NULL
) {

255  
NGX_OK
;

258 
cv
 = 
¥ediˇãs
->
ñts
;

260 
i
 = 0; i < 
¥ediˇãs
->
√…s
; i++) {

261 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
cv
[
i
], &
vÆ
Ë!
NGX_OK
) {

262  
NGX_ERROR
;

265 i‡(
vÆ
.
Àn
 && (vÆ.À¿!1 || vÆ.
d©a
[0] != '0')) {

266  
NGX_DECLINED
;

270  
NGX_OK
;

271 
	}
}

275 
	$ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

277 *
p
 = 
c⁄f
;

279 
ngx_°r_t
 *
vÆue
;

280 
ngx_uöt_t
 
i
;

281 
ngx_¨øy_t
 **
a
;

282 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

283 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

285 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

287 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

288 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_com∂ex_vÆue_t
));

289 i‡(*
a
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
vÆue
 = 
cf
->
¨gs
->
ñts
;

296 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

297 
cv
 = 
	`ngx_¨øy_push
(*
a
);

298 i‡(
cv
 =
NULL
) {

299  
NGX_CONF_ERROR
;

302 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

304 
ccv
.
cf
 = cf;

305 
ccv
.
vÆue
 = &vÆue[
i
];

306 
ccv
.
com∂ex_vÆue
 = 
cv
;

308 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

309  
NGX_CONF_ERROR
;

313  
NGX_CONF_OK
;

314 
	}
}

317 
ngx_uöt_t


318 
	$ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
)

320 
ngx_uöt_t
 
i
, 
n
;

322 
n
 = 0, 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

323 i‡(
vÆue
->
d©a
[
i
] == '$') {

324 
n
++;

328  
n
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

335 
u_ch¨
 
ch
;

336 
ngx_°r_t
 
«me
;

337 
ngx_uöt_t
 
i
, 
bøckë
;

339 i‡(
	`ngx_hâp_s¸ùt_öô_¨øys
(
sc
Ë!
NGX_OK
) {

340  
NGX_ERROR
;

343 
i
 = 0; i < 
sc
->
sour˚
->
Àn
; ) {

345 
«me
.
Àn
 = 0;

347 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

349 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

350 
övÆid_v¨übÀ
;

353 #i‡(
NGX_PCRE
)

355 
ngx_uöt_t
 
n
;

357 i‡(
sc
->
sour˚
->
d©a
[
i
] >= '1' && sc->source->data[i] <= '9') {

359 
n
 = 
sc
->
sour˚
->
d©a
[
i
] - '0';

361 i‡(
sc
->
ˇ±uªs_mask
 & (1 << 
n
)) {

362 
sc
->
dup_ˇ±uª
 = 1;

365 
sc
->
ˇ±uªs_mask
 |1 << 
n
;

367 i‡(
	`ngx_hâp_s¸ùt_add_ˇ±uª_code
(
sc
, 
n
Ë!
NGX_OK
) {

368  
NGX_ERROR
;

371 
i
++;

378 i‡(
sc
->
sour˚
->
d©a
[
i
] == '{') {

379 
bøckë
 = 1;

381 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

382 
övÆid_v¨übÀ
;

385 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

388 
bøckë
 = 0;

389 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

392  ; 
i
 < 
sc
->
sour˚
->
Àn
; i++, 
«me
.len++) {

393 
ch
 = 
sc
->
sour˚
->
d©a
[
i
];

395 i‡(
ch
 ='}' && 
bøckë
) {

396 
i
++;

397 
bøckë
 = 0;

401 i‡((
ch
 >= 'A' && ch <= 'Z')

402 || (
ch
 >= 'a' && ch <= 'z')

403 || (
ch
 >= '0' && ch <= '9')

404 || 
ch
 == '_')

412 i‡(
bøckë
) {

413 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

415 "v¨übÀ i†missög", &
«me
);

416  
NGX_ERROR
;

419 i‡(
«me
.
Àn
 == 0) {

420 
övÆid_v¨übÀ
;

423 
sc
->
v¨übÀs
++;

425 i‡(
	`ngx_hâp_s¸ùt_add_v¨_code
(
sc
, &
«me
Ë!
NGX_OK
) {

426  
NGX_ERROR
;

432 i‡(
sc
->
sour˚
->
d©a
[
i
] ='?' && sc->
compûe_¨gs
) {

433 
sc
->
¨gs
 = 1;

434 
sc
->
compûe_¨gs
 = 0;

436 i‡(
	`ngx_hâp_s¸ùt_add_¨gs_code
(
sc
Ë!
NGX_OK
) {

437  
NGX_ERROR
;

440 
i
++;

445 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

447 
i
 < 
sc
->
sour˚
->
Àn
) {

449 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

453 i‡(
sc
->
sour˚
->
d©a
[
i
] == '?') {

455 
sc
->
¨gs
 = 1;

457 i‡(
sc
->
compûe_¨gs
) {

462 
i
++;

463 
«me
.
Àn
++;

466 
sc
->
size
 +
«me
.
Àn
;

468 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
«me
, (
i
 =sc->
sour˚
->
Àn
))

469 !
NGX_OK
)

471  
NGX_ERROR
;

475  
	`ngx_hâp_s¸ùt_d⁄e
(
sc
);

477 
övÆid_v¨übÀ
:

479 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0, "invalid variableÇame");

481  
NGX_ERROR
;

482 
	}
}

485 
u_ch¨
 *

486 
	$ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

487 *
code_Àngths
, 
size_t
 
Àn
, *
code_vÆues
)

489 
ngx_uöt_t
 
i
;

490 
ngx_hâp_s¸ùt_code_±
 
code
;

491 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

492 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

493 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

495 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

497 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

498 i‡(
r
->
v¨übÀs
[
i
].
no_ˇchóbÀ
) {

499 
r
->
v¨übÀs
[
i
].
vÆid
 = 0;

500 
r
->
v¨übÀs
[
i
].
nŸ_found
 = 0;

504 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

506 
e
.
ù
 = 
code_Àngths
;

507 
e
.
ªque°
 = 
r
;

508 
e
.
Êushed
 = 1;

510 *(
uöçå_t
 *Ë
e
.
ù
) {

511 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

512 
Àn
 +
	`lcode
(&
e
);

516 
vÆue
->
Àn
 =Üen;

517 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

518 i‡(
vÆue
->
d©a
 =
NULL
) {

519  
NULL
;

522 
e
.
ù
 = 
code_vÆues
;

523 
e
.
pos
 = 
vÆue
->
d©a
;

525 *(
uöçå_t
 *Ë
e
.
ù
) {

526 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

527 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

530  
e
.
pos
;

531 
	}
}

535 
	$ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_¨øy_t
 *
ödi˚s
)

538 
ngx_uöt_t
 
n
, *
ödex
;

540 i‡(
ödi˚s
) {

541 
ödex
 = 
ödi˚s
->
ñts
;

542 
n
 = 0;Ç < 
ödi˚s
->
√…s
;Ç++) {

543 i‡(
r
->
v¨übÀs
[
ödex
[
n
]].
no_ˇchóbÀ
) {

544 
r
->
v¨übÀs
[
ödex
[
n
]].
vÆid
 = 0;

545 
r
->
v¨übÀs
[
ödex
[
n
]].
nŸ_found
 = 0;

549 
	}
}

552 
ngx_öt_t


553 
	$ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

555 
ngx_uöt_t
 
n
;

557 i‡(
sc
->
Êushes
 && *sc->Êushe†=
NULL
) {

558 
n
 = 
sc
->
v¨übÀs
 ? sc->variables : 1;

559 *
sc
->
Êushes
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
));

560 i‡(*
sc
->
Êushes
 =
NULL
) {

561  
NGX_ERROR
;

565 i‡(*
sc
->
Àngths
 =
NULL
) {

566 
n
 = 
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

567 + (
ngx_hâp_s¸ùt_v¨_code_t
))

568 + (
uöçå_t
);

570 *
sc
->
Àngths
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

571 i‡(*
sc
->
Àngths
 =
NULL
) {

572  
NGX_ERROR
;

576 i‡(*
sc
->
vÆues
 =
NULL
) {

577 
n
 = (
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

578 + (
ngx_hâp_s¸ùt_v¨_code_t
))

579 + (
uöçå_t
)

580 + 
sc
->
sour˚
->
Àn


581 + (
uöçå_t
) - 1)

582 & ~((
uöçå_t
) - 1);

584 *
sc
->
vÆues
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

585 i‡(*
sc
->
vÆues
 =
NULL
) {

586  
NGX_ERROR
;

590 
sc
->
v¨übÀs
 = 0;

592  
NGX_OK
;

593 
	}
}

596 
ngx_öt_t


597 
	$ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

599 
ngx_°r_t
 
zîo
;

600 
uöçå_t
 *
code
;

602 i‡(
sc
->
zîo
) {

604 
zîo
.
Àn
 = 1;

605 
zîo
.
d©a
 = (
u_ch¨
 *) "\0";

607 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
zîo
, 0Ë!
NGX_OK
) {

608  
NGX_ERROR
;

612 i‡(
sc
->
c⁄f_¥efix
 || sc->
roŸ_¥efix
) {

613 i‡(
	`ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
sc
Ë!
NGX_OK
) {

614  
NGX_ERROR
;

618 i‡(
sc
->
com∂ëe_Àngths
) {

619 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

620 i‡(
code
 =
NULL
) {

621  
NGX_ERROR
;

624 *
code
 = (
uöçå_t
Ë
NULL
;

627 i‡(
sc
->
com∂ëe_vÆues
) {

628 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
),

629 &
sc
->
maö
);

630 i‡(
code
 =
NULL
) {

631  
NGX_ERROR
;

634 *
code
 = (
uöçå_t
Ë
NULL
;

637  
NGX_OK
;

638 
	}
}

642 
	$ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
, 
size_t
 
size
)

644 i‡(*
codes
 =
NULL
) {

645 *
codes
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 256, 1);

646 i‡(*
codes
 =
NULL
) {

647  
NULL
;

651  
	`ngx_¨øy_push_n
(*
codes
, 
size
);

652 
	}
}

656 
	$ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
)

658 
u_ch¨
 *
ñts
, **
p
;

659 *
√w
;

661 
ñts
 = 
codes
->elts;

663 
√w
 = 
	`ngx_¨øy_push_n
(
codes
, 
size
);

664 i‡(
√w
 =
NULL
) {

665  
NULL
;

668 i‡(
code
) {

669 i‡(
ñts
 !
codes
->elts) {

670 
p
 = 
code
;

671 *
p
 +(
u_ch¨
 *Ë
codes
->
ñts
 -Élts;

675  
√w
;

676 
	}
}

679 
ngx_öt_t


680 
	$ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
vÆue
,

681 
ngx_uöt_t
 
œ°
)

683 
u_ch¨
 *
p
;

684 
size_t
 
size
, 
Àn
, 
zîo
;

685 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

687 
zîo
 = (
sc
->zîÿ&& 
œ°
);

688 
Àn
 = 
vÆue
->À¿+ 
zîo
;

690 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

691 (
ngx_hâp_s¸ùt_c›y_code_t
), 
NULL
);

692 i‡(
code
 =
NULL
) {

693  
NGX_ERROR
;

696 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

697 
code
->
Àn
 =Üen;

699 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
Ë+ 
Àn
 + (
uöçå_t
) - 1)

700 & ~((
uöçå_t
) - 1);

702 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, 
size
, &sc->
maö
);

703 i‡(
code
 =
NULL
) {

704  
NGX_ERROR
;

707 
code
->codê
ngx_hâp_s¸ùt_c›y_code
;

708 
code
->
Àn
 =Üen;

710 
p
 = 
	`ngx_˝ymem
((
u_ch¨
 *Ë
code
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

711 
vÆue
->
d©a
, vÆue->
Àn
);

713 i‡(
zîo
) {

714 *
p
 = '\0';

715 
sc
->
zîo
 = 0;

718  
NGX_OK
;

719 
	}
}

722 
size_t


723 
	$ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

725 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

727 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

729 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
);

731  
code
->
Àn
;

732 
	}
}

736 
	$ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

738 
u_ch¨
 *
p
;

739 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

741 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

743 
p
 = 
e
->
pos
;

745 i‡(!
e
->
skù
) {

746 
e
->
pos
 = 
	`ngx_c›y
(
p
,É->
ù
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

747 
code
->
Àn
);

750 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
)

751 + ((
code
->
Àn
 + (
uöçå_t
) - 1) & ~((uintptr_t) - 1));

753 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

754 "hâ∞s¸ùàc›y: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

755 
	}
}

758 
ngx_öt_t


759 
	$ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
)

761 
ngx_öt_t
 
ödex
, *
p
;

762 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

764 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
sc
->
cf
, 
«me
);

766 i‡(
ödex
 =
NGX_ERROR
) {

767  
NGX_ERROR
;

770 i‡(
sc
->
Êushes
) {

771 
p
 = 
	`ngx_¨øy_push
(*
sc
->
Êushes
);

772 i‡(
p
 =
NULL
) {

773  
NGX_ERROR
;

776 *
p
 = 
ödex
;

779 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

780 (
ngx_hâp_s¸ùt_v¨_code_t
), 
NULL
);

781 i‡(
code
 =
NULL
) {

782  
NGX_ERROR
;

785 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_v¨_Àn_code
;

786 
code
->
ödex
 = (
uöçå_t
) index;

788 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

789 (
ngx_hâp_s¸ùt_v¨_code_t
),

790 &
sc
->
maö
);

791 i‡(
code
 =
NULL
) {

792  
NGX_ERROR
;

795 
code
->codê
ngx_hâp_s¸ùt_c›y_v¨_code
;

796 
code
->
ödex
 = (
uöçå_t
) index;

798  
NGX_OK
;

799 
	}
}

802 
size_t


803 
	$ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

805 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

806 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

808 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

810 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

812 i‡(
e
->
Êushed
) {

813 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

816 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

819 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

820  
vÆue
->
Àn
;

824 
	}
}

828 
	$ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

830 
u_ch¨
 *
p
;

831 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

832 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

834 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

836 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

838 i‡(!
e
->
skù
) {

840 i‡(
e
->
Êushed
) {

841 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

844 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

847 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

848 
p
 = 
e
->
pos
;

849 
e
->
pos
 = 
	`ngx_c›y
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

851 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
,

852 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

853 "hâ∞s¸ùàv¨: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

856 
	}
}

859 
ngx_öt_t


860 
	$ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

862 
uöçå_t
 *
code
;

864 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

865 i‡(
code
 =
NULL
) {

866  
NGX_ERROR
;

869 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_m¨k_¨gs_code
;

871 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
), &sc->
maö
);

872 i‡(
code
 =
NULL
) {

873  
NGX_ERROR
;

876 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_°¨t_¨gs_code
;

878  
NGX_OK
;

879 
	}
}

882 
size_t


883 
	$ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

885 
e
->
is_¨gs
 = 1;

886 
e
->
ù
 +(
uöçå_t
);

889 
	}
}

893 
	$ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

895 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

898 
e
->
is_¨gs
 = 1;

899 
e
->
¨gs
 =É->
pos
;

900 
e
->
ù
 +(
uöçå_t
);

901 
	}
}

904 #i‡(
NGX_PCRE
)

907 
	$ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

909 
size_t
 
Àn
;

910 
ngx_öt_t
 
rc
;

911 
ngx_uöt_t
 
n
;

912 
ngx_hâp_ªque°_t
 *
r
;

913 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

914 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

915 
ngx_hâp_s¸ùt_ªgex_code_t
 *
code
;

917 
code
 = (
ngx_hâp_s¸ùt_ªgex_code_t
 *Ë
e
->
ù
;

919 
r
 = 
e
->
ªque°
;

921 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

922 "hâ∞s¸ùàªgex: \"%V\"", &
code
->
«me
);

924 i‡(
code
->
uri
) {

925 
e
->
löe
 = 
r
->
uri
;

927 
e
->
•
--;

928 
e
->
löe
.
Àn
 =É->
•
->len;

929 
e
->
löe
.
d©a
 =É->
•
->data;

932 
rc
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
code
->
ªgex
, &
e
->
löe
);

934 i‡(
rc
 =
NGX_DECLINED
) {

935 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

936 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

938 &
code
->
«me
, &
e
->
löe
);

941 
r
->
nˇ±uªs
 = 0;

943 i‡(
code
->
ã°
) {

944 i‡(
code
->
√g©ive_ã°
) {

945 
e
->
•
->
Àn
 = 1;

946 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

949 
e
->
•
->
Àn
 = 0;

950 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

953 
e
->
•
++;

955 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

959 
e
->
ù
 +
code
->
√xt
;

963 i‡(
rc
 =
NGX_ERROR
) {

964 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

965 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

969 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

970 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

971 "\"%V\" m©che†\"%V\"", &
code
->
«me
, &
e
->
löe
);

974 i‡(
code
->
ã°
) {

975 i‡(
code
->
√g©ive_ã°
) {

976 
e
->
•
->
Àn
 = 0;

977 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

980 
e
->
•
->
Àn
 = 1;

981 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

984 
e
->
•
++;

986 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

990 i‡(
code
->
°©us
) {

991 
e
->
°©us
 = 
code
->status;

993 i‡(!
code
->
ªdúe˘
) {

994 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

999 i‡(
code
->
uri
) {

1000 
r
->
öã∫Æ
 = 1;

1001 
r
->
vÆid_u≈¨£d_uri
 = 0;

1003 i‡(
code
->
bªak_cy˛e
) {

1004 
r
->
vÆid_loˇti⁄
 = 0;

1005 
r
->
uri_ch™ged
 = 0;

1008 
r
->
uri_ch™ged
 = 1;

1012 i‡(
code
->
Àngths
 =
NULL
) {

1013 
e
->
buf
.
Àn
 = 
code
->
size
;

1015 i‡(
code
->
uri
) {

1016 i‡(
r
->
nˇ±uªs
 && (r->
quŸed_uri
 ||Ñ->
∂us_ö_uri
)) {

1017 
e
->
buf
.
Àn
 +2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.len,

1018 
NGX_ESCAPE_ARGS
);

1022 
n
 = 2;Ç < 
r
->
nˇ±uªs
;Ç += 2) {

1023 
e
->
buf
.
Àn
 +
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

1027 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1029 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1030 
À
.
löe
 = 
e
->line;

1031 
À
.
ªque°
 = 
r
;

1032 
À
.
quŸe
 = 
code
->
ªdúe˘
;

1034 
Àn
 = 0;

1036 *(
uöçå_t
 *Ë
À
.
ù
) {

1037 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1038 
Àn
 +
	`lcode
(&
À
);

1041 
e
->
buf
.
Àn
 =Üen;

1044 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1045 
e
->
buf
.
Àn
 +
r
->
¨gs
.len + 1;

1048 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,É->buf.
Àn
);

1049 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1050 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1051 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1055 
e
->
quŸe
 = 
code
->
ªdúe˘
;

1057 
e
->
pos
 =É->
buf
.
d©a
;

1059 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

1060 
	}
}

1064 
	$ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1066 
u_ch¨
 *
d°
, *
§c
;

1067 
ngx_hâp_ªque°_t
 *
r
;

1068 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
code
;

1070 
code
 = (
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *Ë
e
->
ù
;

1072 
r
 = 
e
->
ªque°
;

1074 
e
->
quŸe
 = 0;

1076 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1079 i‡(
code
->
ªdúe˘
) {

1081 
d°
 = 
e
->
buf
.
d©a
;

1082 
§c
 = 
e
->
buf
.
d©a
;

1084 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
e
->
pos
 -É->
buf
.
d©a
,

1085 
NGX_UNESCAPE_REDIRECT
);

1087 i‡(
§c
 < 
e
->
pos
) {

1088 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
e
->
pos
 - src);

1091 
e
->
pos
 = 
d°
;

1093 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1094 *
e
->
pos
++ = (
u_ch¨
Ë(
code
->
¨gs
 ? '&' : '?');

1095 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1098 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1100 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1101 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1102 "ªwrôã¿ªdúe˘: \"%V\"", &
e
->
buf
);

1105 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1107 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1108 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1109 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1110 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1114 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1115 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1116 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
e
->
buf
;

1118 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1122 i‡(
e
->
¨gs
) {

1123 
e
->
buf
.
Àn
 =É->
¨gs
 -É->buf.
d©a
;

1125 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1126 *
e
->
pos
++ = '&';

1127 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1130 
r
->
¨gs
.
Àn
 = 
e
->
pos
 -É->args;

1131 
r
->
¨gs
.
d©a
 = 
e
->args;

1133 
e
->
¨gs
 = 
NULL
;

1136 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1138 i‡(!
code
->
add_¨gs
) {

1139 
r
->
¨gs
.
Àn
 = 0;

1143 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1144 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1146 &
e
->
buf
, &
r
->
¨gs
);

1149 i‡(
code
->
uri
) {

1150 
r
->
uri
 = 
e
->
buf
;

1152 i‡(
r
->
uri
.
Àn
 == 0) {

1153 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1155 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1156 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1160 
	`ngx_hâp_£t_exãn
(
r
);

1163 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1164 
	}
}

1167 
ngx_öt_t


1168 
	$ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_uöt_t
 
n
)

1170 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1172 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1173 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1174 
NULL
);

1175 i‡(
code
 =
NULL
) {

1176  
NGX_ERROR
;

1179 
code
->codê(
ngx_hâp_s¸ùt_code_±
)

1180 
ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
;

1181 
code
->
n
 = 2 *Ç;

1184 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1185 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1186 &
sc
->
maö
);

1187 i‡(
code
 =
NULL
) {

1188  
NGX_ERROR
;

1191 
code
->codê
ngx_hâp_s¸ùt_c›y_ˇ±uª_code
;

1192 
code
->
n
 = 2 *Ç;

1194 i‡(
sc
->
nˇ±uªs
 < 
n
) {

1195 
sc
->
nˇ±uªs
 = 
n
;

1198  
NGX_OK
;

1199 
	}
}

1202 
size_t


1203 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1205 *
ˇp
;

1206 
u_ch¨
 *
p
;

1207 
ngx_uöt_t
 
n
;

1208 
ngx_hâp_ªque°_t
 *
r
;

1209 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1211 
r
 = 
e
->
ªque°
;

1213 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1215 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1217 
n
 = 
code
->n;

1219 i‡(
n
 < 
r
->
nˇ±uªs
) {

1221 
ˇp
 = 
r
->
ˇ±uªs
;

1223 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1224 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1226 
p
 = 
r
->
ˇ±uªs_d©a
;

1228  
ˇp
[
n
 + 1] - cap[n]

1229 + 2 * 
	`ngx_esˇ≥_uri
(
NULL
, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n],

1230 
NGX_ESCAPE_ARGS
);

1232  
ˇp
[
n
 + 1] - cap[n];

1237 
	}
}

1241 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1243 *
ˇp
;

1244 
u_ch¨
 *
p
, *
pos
;

1245 
ngx_uöt_t
 
n
;

1246 
ngx_hâp_ªque°_t
 *
r
;

1247 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1249 
r
 = 
e
->
ªque°
;

1251 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1253 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1255 
n
 = 
code
->n;

1257 
pos
 = 
e
->pos;

1259 i‡(
n
 < 
r
->
nˇ±uªs
) {

1261 
ˇp
 = 
r
->
ˇ±uªs
;

1262 
p
 = 
r
->
ˇ±uªs_d©a
;

1264 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1265 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1267 
e
->
pos
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’os, &
p
[
ˇp
[
n
]],

1268 
ˇp
[
n
 + 1] - cap[n],

1269 
NGX_ESCAPE_ARGS
);

1271 
e
->
pos
 = 
	`ngx_c›y
’os, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n]);

1275 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1276 "hâ∞s¸ùàˇ±uª: \"%*s\"", 
e
->
pos
 -Öos,Öos);

1277 
	}
}

1282 
ngx_öt_t


1283 
	$ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

1285 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1287 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1288 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1289 
NULL
);

1290 i‡(
code
 =
NULL
) {

1291  
NGX_ERROR
;

1294 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
;

1295 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1297 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1298 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1299 &
sc
->
maö
);

1300 i‡(
code
 =
NULL
) {

1301  
NGX_ERROR
;

1304 
code
->codê
ngx_hâp_s¸ùt_fuŒ_«me_code
;

1305 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1307  
NGX_OK
;

1308 
	}
}

1311 
size_t


1312 
	$ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1314 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1316 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1318 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1320  
code
->
c⁄f_¥efix
 ? 
ngx_cy˛e
->c⁄f_¥efix.
Àn
:

1321 
ngx_cy˛e
->
¥efix
.
Àn
;

1322 
	}
}

1326 
	$ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1328 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1330 
ngx_°r_t
 
vÆue
;

1332 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1334 
vÆue
.
d©a
 = 
e
->
buf
.data;

1335 
vÆue
.
Àn
 = 
e
->
pos
 -É->
buf
.
d©a
;

1337 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
vÆue
, 
code
->
c⁄f_¥efix
)

1338 !
NGX_OK
)

1340 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1341 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1345 
e
->
buf
 = 
vÆue
;

1347 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1348 "hâ∞s¸ùàfuŒ«me: \"%V\"", &
vÆue
);

1350 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1351 
	}
}

1355 
	$ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1357 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
code
;

1359 
code
 = (
ngx_hâp_s¸ùt_ªtu∫_code_t
 *Ë
e
->
ù
;

1361 i‡(
code
->
°©us
 < 
NGX_HTTP_BAD_REQUEST


1362 || 
code
->
ãxt
.
vÆue
.
Àn


1363 || 
code
->
ãxt
.
Àngths
)

1365 
e
->
°©us
 = 
	`ngx_hâp_£nd_ª•⁄£
”->
ªque°
, 
code
->°©us, 
NULL
,

1366 &
code
->
ãxt
);

1368 
e
->
°©us
 = 
code
->status;

1371 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1372 
	}
}

1376 
	$ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1378 
e
->
ªque°
->
uri_ch™ged
 = 0;

1380 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1381 
	}
}

1385 
	$ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1387 
ngx_hâp_s¸ùt_if_code_t
 *
code
;

1389 
code
 = (
ngx_hâp_s¸ùt_if_code_t
 *Ë
e
->
ù
;

1391 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1394 
e
->
•
--;

1396 i‡(
e
->
•
->
Àn
 && (e->•->À¿!=1 ||É->•->
d©a
[0] != '0')) {

1397 i‡(
code
->
loc_c⁄f
) {

1398 
e
->
ªque°
->
loc_c⁄f
 = 
code
->loc_conf;

1399 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
e
->
ªque°
);

1402 
e
->
ù
 +(
ngx_hâp_s¸ùt_if_code_t
);

1406 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1409 
e
->
ù
 +
code
->
√xt
;

1410 
	}
}

1414 
	$ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1416 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1418 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1421 
e
->
•
--;

1422 
vÆ
 = 
e
->
•
;

1423 
ªs
 = 
e
->
•
 - 1;

1425 
e
->
ù
 +(
uöçå_t
);

1427 i‡(
vÆ
->
Àn
 =
ªs
->len

1428 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1430 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1434 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1437 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1438 
	}
}

1442 
	$ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1444 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1446 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1449 
e
->
•
--;

1450 
vÆ
 = 
e
->
•
;

1451 
ªs
 = 
e
->
•
 - 1;

1453 
e
->
ù
 +(
uöçå_t
);

1455 i‡(
vÆ
->
Àn
 =
ªs
->len

1456 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1458 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1461 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1465 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1466 
	}
}

1470 
	$ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1472 
ngx_°r_t
 
∑th
;

1473 
ngx_hâp_ªque°_t
 *
r
;

1474 
ngx_›í_fûe_öfo_t
 
of
;

1475 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1476 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1477 
ngx_hâp_s¸ùt_fûe_code_t
 *
code
;

1479 
vÆue
 = 
e
->
•
 - 1;

1481 
code
 = (
ngx_hâp_s¸ùt_fûe_code_t
 *Ë
e
->
ù
;

1482 
e
->
ù
 +(
ngx_hâp_s¸ùt_fûe_code_t
);

1484 
∑th
.
Àn
 = 
vÆue
->len - 1;

1485 
∑th
.
d©a
 = 
vÆue
->data;

1487 
r
 = 
e
->
ªque°
;

1489 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1490 "hâ∞s¸ùàfûê› %∞\"%V\"", 
code
->
›
, &
∑th
);

1492 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1494 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1496 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1497 
of
.
dúe˘io
 = 
˛cf
->directio;

1498 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1499 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1500 
of
.
ã°_⁄ly
 = 1;

1501 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1502 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1504 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1505 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1506 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1510 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1511 !
NGX_OK
)

1513 i‡(
of
.
îr
 !
NGX_ENOENT


1514 && 
of
.
îr
 !
NGX_ENOTDIR


1515 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1517 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1518 "%†\"%s\" faûed", 
of
.
Áûed
, 
vÆue
->
d©a
);

1521 
code
->
›
) {

1523 
ngx_hâp_s¸ùt_fûe_∂aö
:

1524 
ngx_hâp_s¸ùt_fûe_dú
:

1525 
ngx_hâp_s¸ùt_fûe_exi°s
:

1526 
ngx_hâp_s¸ùt_fûe_exec
:

1527 
Ál£_vÆue
;

1529 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1530 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1531 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1532 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1533 
åue_vÆue
;

1536 
Ál£_vÆue
;

1539 
code
->
›
) {

1540 
ngx_hâp_s¸ùt_fûe_∂aö
:

1541 i‡(
of
.
is_fûe
) {

1542 
åue_vÆue
;

1544 
Ál£_vÆue
;

1546 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1547 i‡(
of
.
is_fûe
) {

1548 
Ál£_vÆue
;

1550 
åue_vÆue
;

1552 
ngx_hâp_s¸ùt_fûe_dú
:

1553 i‡(
of
.
is_dú
) {

1554 
åue_vÆue
;

1556 
Ál£_vÆue
;

1558 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1559 i‡(
of
.
is_dú
) {

1560 
Ál£_vÆue
;

1562 
åue_vÆue
;

1564 
ngx_hâp_s¸ùt_fûe_exi°s
:

1565 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1566 
åue_vÆue
;

1568 
Ál£_vÆue
;

1570 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1571 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1572 
Ál£_vÆue
;

1574 
åue_vÆue
;

1576 
ngx_hâp_s¸ùt_fûe_exec
:

1577 i‡(
of
.
is_exec
) {

1578 
åue_vÆue
;

1580 
Ál£_vÆue
;

1582 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1583 i‡(
of
.
is_exec
) {

1584 
Ál£_vÆue
;

1586 
åue_vÆue
;

1589 
Ál£_vÆue
:

1591 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1594 *
vÆue
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1597 
åue_vÆue
:

1599 *
vÆue
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1601 
	}
}

1605 
	$ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1607 
size_t
 
Àn
;

1608 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

1609 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1610 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
code
;

1612 
code
 = (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *Ë
e
->
ù
;

1614 
e
->
ù
 +(
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
);

1616 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1619 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1621 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1622 
À
.
löe
 = 
e
->line;

1623 
À
.
ªque°
 = 
e
->request;

1624 
À
.
quŸe
 = 
e
->quote;

1626 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1627 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1630 
e
->
buf
.
Àn
 =Üen;

1631 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
”->
ªque°
->
poﬁ
, 
Àn
);

1632 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1633 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1634 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1638 
e
->
pos
 =É->
buf
.
d©a
;

1640 
e
->
•
->
Àn
 =É->
buf
.len;

1641 
e
->
•
->
d©a
 =É->
buf
.data;

1642 
e
->
•
++;

1643 
	}
}

1647 
	$ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1649 
ngx_hâp_s¸ùt_vÆue_code_t
 *
code
;

1651 
code
 = (
ngx_hâp_s¸ùt_vÆue_code_t
 *Ë
e
->
ù
;

1653 
e
->
ù
 +(
ngx_hâp_s¸ùt_vÆue_code_t
);

1655 
e
->
•
->
Àn
 = 
code
->
ãxt_Àn
;

1656 
e
->
•
->
d©a
 = (
u_ch¨
 *Ë
code
->
ãxt_d©a
;

1658 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1659 "hâ∞s¸ùàvÆue: \"%v\"", 
e
->
•
);

1661 
e
->
•
++;

1662 
	}
}

1666 
	$ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1668 
ngx_hâp_ªque°_t
 *
r
;

1669 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1671 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1673 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1675 
r
 = 
e
->
ªque°
;

1677 
e
->
•
--;

1679 
r
->
v¨übÀs
[
code
->
ödex
].
Àn
 = 
e
->
•
->len;

1680 
r
->
v¨übÀs
[
code
->
ödex
].
vÆid
 = 1;

1681 
r
->
v¨übÀs
[
code
->
ödex
].
no_ˇchóbÀ
 = 0;

1682 
r
->
v¨übÀs
[
code
->
ödex
].
nŸ_found
 = 0;

1683 
r
->
v¨übÀs
[
code
->
ödex
].
d©a
 = 
e
->
•
->data;

1685 #i‡(
NGX_DEBUG
)

1687 
ngx_hâp_v¨übÀ_t
 *
v
;

1688 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1690 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1692 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1694 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1695 "hâ∞s¸ùà£à$%V", &
v
[
code
->
ödex
].
«me
);

1698 
	}
}

1702 
	$ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1704 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
code
;

1706 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1709 
code
 = (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *Ë
e
->
ù
;

1711 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
);

1713 
e
->
•
--;

1715 
code
->
	`h™dÀr
(
e
->
ªque°
,É->
•
, code->
d©a
);

1716 
	}
}

1720 
	$ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1722 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1723 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1725 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1728 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1730 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1732 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

1734 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

1735 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1736 "hâ∞s¸ùàv¨: \"%v\"", 
vÆue
);

1738 *
e
->
•
 = *
vÆue
;

1739 
e
->
•
++;

1744 *
e
->
•
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1745 
e
->
•
++;

1746 
	}
}

1750 
	$ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1752 
e
->
ù
 +(
uöçå_t
);

1753 
	}
}

	@src/http/ngx_http_script.h

8 #i‚de‡
_NGX_HTTP_SCRIPT_H_INCLUDED_


9 
	#_NGX_HTTP_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

26 
u_ch¨
 *
	m¨gs
;

28 
	mÊushed
:1;

29 
	mskù
:1;

30 
	mquŸe
:1;

31 
	mis_¨gs
:1;

32 
	mlog
:1;

34 
ngx_öt_t
 
	m°©us
;

35 
ngx_hâp_ªque°_t
 *
	mªque°
;

36 } 
	tngx_hâp_s¸ùt_ígöe_t
;

40 
ngx_c⁄f_t
 *
	mcf
;

41 
ngx_°r_t
 *
	msour˚
;

43 
ngx_¨øy_t
 **
	mÊushes
;

44 
ngx_¨øy_t
 **
	mÀngths
;

45 
ngx_¨øy_t
 **
	mvÆues
;

47 
ngx_uöt_t
 
	mv¨übÀs
;

48 
ngx_uöt_t
 
	mnˇ±uªs
;

49 
ngx_uöt_t
 
	mˇ±uªs_mask
;

50 
ngx_uöt_t
 
	msize
;

52 *
	mmaö
;

54 
	mcompûe_¨gs
:1;

55 
	mcom∂ëe_Àngths
:1;

56 
	mcom∂ëe_vÆues
:1;

57 
	mzîo
:1;

58 
	mc⁄f_¥efix
:1;

59 
	mroŸ_¥efix
:1;

61 
	mdup_ˇ±uª
:1;

62 
	m¨gs
:1;

63 } 
	tngx_hâp_s¸ùt_compûe_t
;

67 
ngx_°r_t
 
	mvÆue
;

68 
ngx_uöt_t
 *
	mÊushes
;

69 *
	mÀngths
;

70 *
	mvÆues
;

71 } 
	tngx_hâp_com∂ex_vÆue_t
;

75 
ngx_c⁄f_t
 *
	mcf
;

76 
ngx_°r_t
 *
	mvÆue
;

77 
ngx_hâp_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

79 
	mzîo
:1;

80 
	mc⁄f_¥efix
:1;

81 
	mroŸ_¥efix
:1;

82 } 
	tngx_hâp_compûe_com∂ex_vÆue_t
;

85 (*
	tngx_hâp_s¸ùt_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

86 
	$size_t
 (*
	tngx_hâp_s¸ùt_Àn_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

90 
ngx_hâp_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
Àn
;

92 } 
	tngx_hâp_s¸ùt_c›y_code_t
;

96 
ngx_hâp_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
ödex
;

98 } 
	tngx_hâp_s¸ùt_v¨_code_t
;

102 
ngx_hâp_s¸ùt_code_±
 
code
;

103 
ngx_hâp_£t_v¨übÀ_±
 
h™dÀr
;

104 
uöçå_t
 
d©a
;

105 } 
	tngx_hâp_s¸ùt_v¨_h™dÀr_code_t
;

109 
ngx_hâp_s¸ùt_code_±
 
code
;

110 
uöçå_t
 
n
;

111 } 
	tngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
;

114 #i‡(
NGX_PCRE
)

117 
ngx_hâp_s¸ùt_code_±
 
code
;

118 
ngx_hâp_ªgex_t
 *
ªgex
;

119 
ngx_¨øy_t
 *
Àngths
;

120 
uöçå_t
 
size
;

121 
uöçå_t
 
°©us
;

122 
uöçå_t
 
√xt
;

124 
uöçå_t
 
ã°
:1;

125 
uöçå_t
 
√g©ive_ã°
:1;

126 
uöçå_t
 
uri
:1;

127 
uöçå_t
 
¨gs
:1;

130 
uöçå_t
 
add_¨gs
:1;

132 
uöçå_t
 
ªdúe˘
:1;

133 
uöçå_t
 
bªak_cy˛e
:1;

135 
ngx_°r_t
 
«me
;

136 } 
	tngx_hâp_s¸ùt_ªgex_code_t
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

142 
uöçå_t
 
uri
:1;

143 
uöçå_t
 
¨gs
:1;

146 
uöçå_t
 
add_¨gs
:1;

148 
uöçå_t
 
ªdúe˘
:1;

149 } 
	tngx_hâp_s¸ùt_ªgex_íd_code_t
;

155 
ngx_hâp_s¸ùt_code_±
 
code
;

156 
uöçå_t
 
c⁄f_¥efix
;

157 } 
	tngx_hâp_s¸ùt_fuŒ_«me_code_t
;

161 
ngx_hâp_s¸ùt_code_±
 
code
;

162 
uöçå_t
 
°©us
;

163 
ngx_hâp_com∂ex_vÆue_t
 
ãxt
;

164 } 
	tngx_hâp_s¸ùt_ªtu∫_code_t
;

168 
ngx_hâp_s¸ùt_fûe_∂aö
 = 0,

169 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
,

170 
ngx_hâp_s¸ùt_fûe_dú
,

171 
ngx_hâp_s¸ùt_fûe_nŸ_dú
,

172 
ngx_hâp_s¸ùt_fûe_exi°s
,

173 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
,

174 
ngx_hâp_s¸ùt_fûe_exec
,

175 
ngx_hâp_s¸ùt_fûe_nŸ_exec


176 } 
	tngx_hâp_s¸ùt_fûe_›_e
;

180 
ngx_hâp_s¸ùt_code_±
 
code
;

181 
uöçå_t
 
›
;

182 } 
	tngx_hâp_s¸ùt_fûe_code_t
;

186 
ngx_hâp_s¸ùt_code_±
 
code
;

187 
uöçå_t
 
√xt
;

188 **
loc_c⁄f
;

189 } 
	tngx_hâp_s¸ùt_if_code_t
;

193 
ngx_hâp_s¸ùt_code_±
 
code
;

194 
ngx_¨øy_t
 *
Àngths
;

195 } 
	tngx_hâp_s¸ùt_com∂ex_vÆue_code_t
;

199 
ngx_hâp_s¸ùt_code_±
 
code
;

200 
uöçå_t
 
vÆue
;

201 
uöçå_t
 
ãxt_Àn
;

202 
uöçå_t
 
ãxt_d©a
;

203 } 
	tngx_hâp_s¸ùt_vÆue_code_t
;

206 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

207 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
);

208 
ngx_öt_t
 
	`ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

209 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

210 
ngx_öt_t
 
	`ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
);

211 *
	`ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

212 *
c⁄f
);

215 
ngx_öt_t
 
	`ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
,

216 
ngx_¨øy_t
 *
¥ediˇãs
);

217 *
	`ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

218 *
c⁄f
);

220 
ngx_uöt_t
 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

221 
ngx_öt_t
 
	`ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

222 
u_ch¨
 *
	`ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

223 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

224 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

225 
ngx_¨øy_t
 *
ödi˚s
);

227 *
	`ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
,

228 
size_t
 
size
);

229 *
	`ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

231 
size_t
 
	`ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

232 
	`ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

233 
size_t
 
	`ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

234 
	`ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

235 
size_t
 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

236 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

237 
size_t
 
	`ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

238 
	`ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

239 #i‡(
NGX_PCRE
)

240 
	`ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

241 
	`ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

243 
	`ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

244 
	`ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

245 
	`ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

246 
	`ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

247 
	`ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

248 
	`ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

249 
	`ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

250 
	`ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

251 
	`ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

252 
	`ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

253 
	`ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

254 
	`ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

	@src/http/ngx_http_special_response.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
);

16 
ngx_öt_t
 
ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
);

18 
ngx_öt_t
 
ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
);

21 
u_ch¨
 
	gngx_hâp_îr‹_fuŒ_èû
[] =

22 "<hr><˚¡î>" 
NGINX_VER
 "</˚¡î>" 
CRLF


23 "</body>" 
CRLF


24 "</html>" 
CRLF


28 
u_ch¨
 
	gngx_hâp_îr‹_èû
[] =

29 "<hr><˚¡î>ngöx</˚¡î>" 
CRLF


30 "</body>" 
CRLF


31 "</html>" 
CRLF


35 
u_ch¨
 
	gngx_hâp_msõ_∑ddög
[] =

36 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


37 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


38 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


39 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


40 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


41 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


45 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_hód
[] =

49 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_èû
[] =

50 "\"></hód><body></body></html>" 
CRLF
;

53 
	gngx_hâp_îr‹_301_∑ge
[] =

54 "<html>" 
CRLF


55 "<hód><tôÀ>301 Moved Pîm™íéy</tôÀ></hód>" 
CRLF


56 "<body bgcﬁ‹=\"whôe\">" 
CRLF


57 "<˚¡î><h1>301 Moved Pîm™íéy</h1></˚¡î>" 
CRLF


61 
	gngx_hâp_îr‹_302_∑ge
[] =

62 "<html>" 
CRLF


63 "<hód><tôÀ>302 Found</tôÀ></hód>" 
CRLF


64 "<body bgcﬁ‹=\"whôe\">" 
CRLF


65 "<˚¡î><h1>302 Found</h1></˚¡î>" 
CRLF


69 
	gngx_hâp_îr‹_303_∑ge
[] =

70 "<html>" 
CRLF


71 "<hód><tôÀ>303 Sì Othî</tôÀ></hód>" 
CRLF


72 "<body bgcﬁ‹=\"whôe\">" 
CRLF


73 "<˚¡î><h1>303 Sì Othî</h1></˚¡î>" 
CRLF


77 
	gngx_hâp_îr‹_307_∑ge
[] =

78 "<html>" 
CRLF


79 "<hód><tôÀ>307 Temp‹¨y Redúe˘</tôÀ></hód>" 
CRLF


80 "<body bgcﬁ‹=\"whôe\">" 
CRLF


81 "<˚¡î><h1>307 Temp‹¨y Redúe˘</h1></˚¡î>" 
CRLF


85 
	gngx_hâp_îr‹_400_∑ge
[] =

86 "<html>" 
CRLF


87 "<hód><tôÀ>400 Bad Reque°</tôÀ></hód>" 
CRLF


88 "<body bgcﬁ‹=\"whôe\">" 
CRLF


89 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


93 
	gngx_hâp_îr‹_401_∑ge
[] =

94 "<html>" 
CRLF


95 "<hód><tôÀ>401 Auth‹iz©i⁄ Requúed</tôÀ></hód>" 
CRLF


96 "<body bgcﬁ‹=\"whôe\">" 
CRLF


97 "<˚¡î><h1>401 Auth‹iz©i⁄ Requúed</h1></˚¡î>" 
CRLF


101 
	gngx_hâp_îr‹_402_∑ge
[] =

102 "<html>" 
CRLF


103 "<hód><tôÀ>402 PaymíàRequúed</tôÀ></hód>" 
CRLF


104 "<body bgcﬁ‹=\"whôe\">" 
CRLF


105 "<˚¡î><h1>402 PaymíàRequúed</h1></˚¡î>" 
CRLF


109 
	gngx_hâp_îr‹_403_∑ge
[] =

110 "<html>" 
CRLF


111 "<hód><tôÀ>403 F‹biddí</tôÀ></hód>" 
CRLF


112 "<body bgcﬁ‹=\"whôe\">" 
CRLF


113 "<˚¡î><h1>403 F‹biddí</h1></˚¡î>" 
CRLF


117 
	gngx_hâp_îr‹_404_∑ge
[] =

118 "<html>" 
CRLF


119 "<hód><tôÀ>404 NŸ Found</tôÀ></hód>" 
CRLF


120 "<body bgcﬁ‹=\"whôe\">" 
CRLF


121 "<˚¡î><h1>404 NŸ Found</h1></˚¡î>" 
CRLF


125 
	gngx_hâp_îr‹_405_∑ge
[] =

126 "<html>" 
CRLF


127 "<hód><tôÀ>405 NŸ AŒowed</tôÀ></hód>" 
CRLF


128 "<body bgcﬁ‹=\"whôe\">" 
CRLF


129 "<˚¡î><h1>405 NŸ AŒowed</h1></˚¡î>" 
CRLF


133 
	gngx_hâp_îr‹_406_∑ge
[] =

134 "<html>" 
CRLF


135 "<hód><tôÀ>406 NŸ Ac˚±abÀ</tôÀ></hód>" 
CRLF


136 "<body bgcﬁ‹=\"whôe\">" 
CRLF


137 "<˚¡î><h1>406 NŸ Ac˚±abÀ</h1></˚¡î>" 
CRLF


141 
	gngx_hâp_îr‹_408_∑ge
[] =

142 "<html>" 
CRLF


143 "<hód><tôÀ>408 Reque° Time-out</tôÀ></hód>" 
CRLF


144 "<body bgcﬁ‹=\"whôe\">" 
CRLF


145 "<˚¡î><h1>408 Reque° Time-out</h1></˚¡î>" 
CRLF


149 
	gngx_hâp_îr‹_409_∑ge
[] =

150 "<html>" 
CRLF


151 "<hód><tôÀ>409 C⁄Êi˘</tôÀ></hód>" 
CRLF


152 "<body bgcﬁ‹=\"whôe\">" 
CRLF


153 "<˚¡î><h1>409 C⁄Êi˘</h1></˚¡î>" 
CRLF


157 
	gngx_hâp_îr‹_410_∑ge
[] =

158 "<html>" 
CRLF


159 "<hód><tôÀ>410 G⁄e</tôÀ></hód>" 
CRLF


160 "<body bgcﬁ‹=\"whôe\">" 
CRLF


161 "<˚¡î><h1>410 G⁄e</h1></˚¡î>" 
CRLF


165 
	gngx_hâp_îr‹_411_∑ge
[] =

166 "<html>" 
CRLF


167 "<hód><tôÀ>411 Lígth Requúed</tôÀ></hód>" 
CRLF


168 "<body bgcﬁ‹=\"whôe\">" 
CRLF


169 "<˚¡î><h1>411 Lígth Requúed</h1></˚¡î>" 
CRLF


173 
	gngx_hâp_îr‹_412_∑ge
[] =

174 "<html>" 
CRLF


175 "<hód><tôÀ>412 Pªc⁄dôi⁄ Faûed</tôÀ></hód>" 
CRLF


176 "<body bgcﬁ‹=\"whôe\">" 
CRLF


177 "<˚¡î><h1>412 Pªc⁄dôi⁄ Faûed</h1></˚¡î>" 
CRLF


181 
	gngx_hâp_îr‹_413_∑ge
[] =

182 "<html>" 
CRLF


183 "<hód><tôÀ>413 Reque° E¡ôy ToÿL¨ge</tôÀ></hód>" 
CRLF


184 "<body bgcﬁ‹=\"whôe\">" 
CRLF


185 "<˚¡î><h1>413 Reque° E¡ôy ToÿL¨ge</h1></˚¡î>" 
CRLF


189 
	gngx_hâp_îr‹_414_∑ge
[] =

190 "<html>" 
CRLF


191 "<hód><tôÀ>414 Reque°-URI ToÿL¨ge</tôÀ></hód>" 
CRLF


192 "<body bgcﬁ‹=\"whôe\">" 
CRLF


193 "<˚¡î><h1>414 Reque°-URI ToÿL¨ge</h1></˚¡î>" 
CRLF


197 
	gngx_hâp_îr‹_415_∑ge
[] =

198 "<html>" 
CRLF


199 "<hód><tôÀ>415 Unsuµ‹ãd Medü Ty≥</tôÀ></hód>" 
CRLF


200 "<body bgcﬁ‹=\"whôe\">" 
CRLF


201 "<˚¡î><h1>415 Unsuµ‹ãd Medü Ty≥</h1></˚¡î>" 
CRLF


205 
	gngx_hâp_îr‹_416_∑ge
[] =

206 "<html>" 
CRLF


207 "<hód><tôÀ>416 Reque°ed R™gêNŸ S©isfübÀ</tôÀ></hód>" 
CRLF


208 "<body bgcﬁ‹=\"whôe\">" 
CRLF


209 "<˚¡î><h1>416 Reque°ed R™gêNŸ S©isfübÀ</h1></˚¡î>" 
CRLF


213 
	gngx_hâp_îr‹_494_∑ge
[] =

214 "<html>" 
CRLF


216 
CRLF


217 "<body bgcﬁ‹=\"whôe\">" 
CRLF


218 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


219 "<˚¡î>Reque° Hódî O∏Cookõ ToÿL¨ge</˚¡î>" 
CRLF


223 
	gngx_hâp_îr‹_495_∑ge
[] =

224 "<html>" 
CRLF


226 
CRLF


227 "<body bgcﬁ‹=\"whôe\">" 
CRLF


228 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


229 "<˚¡î>ThêSSL cîtifiˇãÉº‹</˚¡î>" 
CRLF


233 
	gngx_hâp_îr‹_496_∑ge
[] =

234 "<html>" 
CRLF


236 
CRLF


237 "<body bgcﬁ‹=\"whôe\">" 
CRLF


238 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


239 "<˚¡î>Nÿªquúed SSL cîtifiˇã wa†£¡</˚¡î>" 
CRLF


243 
	gngx_hâp_îr‹_497_∑ge
[] =

244 "<html>" 
CRLF


246 
CRLF


247 "<body bgcﬁ‹=\"whôe\">" 
CRLF


248 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


249 "<˚¡î>Thê∂aö HTTPÑeque° wa†£¡ÅÿHTTPSÖ‹t</˚¡î>" 
CRLF


253 
	gngx_hâp_îr‹_500_∑ge
[] =

254 "<html>" 
CRLF


255 "<hód><tôÀ>500 I¡î«»Sîvî Eº‹</tôÀ></hód>" 
CRLF


256 "<body bgcﬁ‹=\"whôe\">" 
CRLF


257 "<˚¡î><h1>500 I¡î«»Sîvî Eº‹</h1></˚¡î>" 
CRLF


261 
	gngx_hâp_îr‹_501_∑ge
[] =

262 "<html>" 
CRLF


263 "<hód><tôÀ>501 NŸ Im∂emíãd</tôÀ></hód>" 
CRLF


264 "<body bgcﬁ‹=\"whôe\">" 
CRLF


265 "<˚¡î><h1>501 NŸ Im∂emíãd</h1></˚¡î>" 
CRLF


269 
	gngx_hâp_îr‹_502_∑ge
[] =

270 "<html>" 
CRLF


271 "<hód><tôÀ>502 Bad G©eway</tôÀ></hód>" 
CRLF


272 "<body bgcﬁ‹=\"whôe\">" 
CRLF


273 "<˚¡î><h1>502 Bad G©eway</h1></˚¡î>" 
CRLF


277 
	gngx_hâp_îr‹_503_∑ge
[] =

278 "<html>" 
CRLF


279 "<hód><tôÀ>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</tôÀ></hód>" 
CRLF


280 "<body bgcﬁ‹=\"whôe\">" 
CRLF


281 "<˚¡î><h1>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</h1></˚¡î>" 
CRLF


285 
	gngx_hâp_îr‹_504_∑ge
[] =

286 "<html>" 
CRLF


287 "<hód><tôÀ>504 G©eway Time-out</tôÀ></hód>" 
CRLF


288 "<body bgcﬁ‹=\"whôe\">" 
CRLF


289 "<˚¡î><h1>504 G©eway Time-out</h1></˚¡î>" 
CRLF


293 
	gngx_hâp_îr‹_507_∑ge
[] =

294 "<html>" 
CRLF


295 "<hód><tôÀ>507 Insufficõ¡ St‹age</tôÀ></hód>" 
CRLF


296 "<body bgcﬁ‹=\"whôe\">" 
CRLF


297 "<˚¡î><h1>507 Insufficõ¡ St‹age</h1></˚¡î>" 
CRLF


301 
ngx_°r_t
 
	gngx_hâp_îr‹_∑ges
[] = {

303 
ngx_nuŒ_°rög
,

305 
	#NGX_HTTP_LAST_2XX
 202

	)

306 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 201)

	)

309 
ngx_°rög
(
ngx_hâp_îr‹_301_∑ge
),

310 
ngx_°rög
(
ngx_hâp_îr‹_302_∑ge
),

311 
ngx_°rög
(
ngx_hâp_îr‹_303_∑ge
),

312 
ngx_nuŒ_°rög
,

313 
ngx_nuŒ_°rög
,

314 
ngx_nuŒ_°rög
,

315 
ngx_°rög
(
ngx_hâp_îr‹_307_∑ge
),

317 
	#NGX_HTTP_LAST_3XX
 308

	)

318 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

320 
ngx_°rög
(
ngx_hâp_îr‹_400_∑ge
),

321 
ngx_°rög
(
ngx_hâp_îr‹_401_∑ge
),

322 
ngx_°rög
(
ngx_hâp_îr‹_402_∑ge
),

323 
ngx_°rög
(
ngx_hâp_îr‹_403_∑ge
),

324 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

325 
ngx_°rög
(
ngx_hâp_îr‹_405_∑ge
),

326 
ngx_°rög
(
ngx_hâp_îr‹_406_∑ge
),

327 
ngx_nuŒ_°rög
,

328 
ngx_°rög
(
ngx_hâp_îr‹_408_∑ge
),

329 
ngx_°rög
(
ngx_hâp_îr‹_409_∑ge
),

330 
ngx_°rög
(
ngx_hâp_îr‹_410_∑ge
),

331 
ngx_°rög
(
ngx_hâp_îr‹_411_∑ge
),

332 
ngx_°rög
(
ngx_hâp_îr‹_412_∑ge
),

333 
ngx_°rög
(
ngx_hâp_îr‹_413_∑ge
),

334 
ngx_°rög
(
ngx_hâp_îr‹_414_∑ge
),

335 
ngx_°rög
(
ngx_hâp_îr‹_415_∑ge
),

336 
ngx_°rög
(
ngx_hâp_îr‹_416_∑ge
),

338 
	#NGX_HTTP_LAST_4XX
 417

	)

339 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

341 
ngx_°rög
(
ngx_hâp_îr‹_494_∑ge
),

342 
ngx_°rög
(
ngx_hâp_îr‹_495_∑ge
),

343 
ngx_°rög
(
ngx_hâp_îr‹_496_∑ge
),

344 
ngx_°rög
(
ngx_hâp_îr‹_497_∑ge
),

345 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

346 
ngx_nuŒ_°rög
,

348 
ngx_°rög
(
ngx_hâp_îr‹_500_∑ge
),

349 
ngx_°rög
(
ngx_hâp_îr‹_501_∑ge
),

350 
ngx_°rög
(
ngx_hâp_îr‹_502_∑ge
),

351 
ngx_°rög
(
ngx_hâp_îr‹_503_∑ge
),

352 
ngx_°rög
(
ngx_hâp_îr‹_504_∑ge
),

353 
ngx_nuŒ_°rög
,

354 
ngx_nuŒ_°rög
,

355 
ngx_°rög
(
ngx_hâp_îr‹_507_∑ge
)

357 
	#NGX_HTTP_LAST_5XX
 508

	)

362 
ngx_°r_t
 
	gngx_hâp_gë_«me
 = { 3, (
u_ch¨
 *) "GET " };

365 
ngx_öt_t


366 
	$ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
)

368 
ngx_uöt_t
 
i
, 
îr
;

369 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

370 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

372 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

374 
îr‹
, &
r
->
uri
, &r->
¨gs
);

376 
r
->
îr_°©us
 = 
îr‹
;

378 i‡(
r
->
kì∑live
) {

379 
îr‹
) {

380 
NGX_HTTP_BAD_REQUEST
:

381 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
:

382 
NGX_HTTP_REQUEST_URI_TOO_LARGE
:

383 
NGX_HTTP_TO_HTTPS
:

384 
NGX_HTTPS_CERT_ERROR
:

385 
NGX_HTTPS_NO_CERT
:

386 
NGX_HTTP_INTERNAL_SERVER_ERROR
:

387 
NGX_HTTP_NOT_IMPLEMENTED
:

388 
r
->
kì∑live
 = 0;

392 i‡(
r
->
lögîög_˛o£
) {

393 
îr‹
) {

394 
NGX_HTTP_BAD_REQUEST
:

395 
NGX_HTTP_TO_HTTPS
:

396 
NGX_HTTPS_CERT_ERROR
:

397 
NGX_HTTPS_NO_CERT
:

398 
r
->
lögîög_˛o£
 = 0;

402 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

404 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

406 i‡(!
r
->
îr‹_∑ge
 && 
˛cf
->
îr‹_∑ges
 &&Ñ->
uri_ch™ges
 != 0) {

408 i‡(
˛cf
->
ªcursive_îr‹_∑ges
 == 0) {

409 
r
->
îr‹_∑ge
 = 1;

412 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

414 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

415 i‡(
îr_∑ge
[
i
].
°©us
 =
îr‹
) {

416  
	`ngx_hâp_£nd_îr‹_∑ge
(
r
, &
îr_∑ge
[
i
]);

421 
r
->
ex≥˘_ã°ed
 = 1;

423 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

424 
îr‹
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

427 i‡(
˛cf
->
msõ_ª‰esh


428 && 
r
->
hódîs_ö
.
msõ


429 && (
îr‹
 =
NGX_HTTP_MOVED_PERMANENTLY


430 || 
îr‹
 =
NGX_HTTP_MOVED_TEMPORARILY
))

432  
	`ngx_hâp_£nd_ª‰esh
(
r
);

435 i‡(
îr‹
 =
NGX_HTTP_CREATED
) {

437 
îr
 = 0;

439 } i‡(
îr‹
 =
NGX_HTTP_NO_CONTENT
) {

441 
îr
 = 0;

443 } i‡(
îr‹
 >
NGX_HTTP_MOVED_PERMANENTLY


444 && 
îr‹
 < 
NGX_HTTP_LAST_3XX
)

447 
îr
 = 
îr‹
 - 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

449 } i‡(
îr‹
 >
NGX_HTTP_BAD_REQUEST


450 && 
îr‹
 < 
NGX_HTTP_LAST_4XX
)

453 
îr
 = 
îr‹
 - 
NGX_HTTP_BAD_REQUEST
 + 
NGX_HTTP_OFF_4XX
;

455 } i‡(
îr‹
 >
NGX_HTTP_NGINX_CODES


456 && 
îr‹
 < 
NGX_HTTP_LAST_5XX
)

459 
îr
 = 
îr‹
 - 
NGX_HTTP_NGINX_CODES
 + 
NGX_HTTP_OFF_5XX
;

460 
îr‹
) {

461 
NGX_HTTP_TO_HTTPS
:

462 
NGX_HTTPS_CERT_ERROR
:

463 
NGX_HTTPS_NO_CERT
:

464 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
:

465 
r
->
îr_°©us
 = 
NGX_HTTP_BAD_REQUEST
;

471 
îr
 = 0;

474  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
, 
îr
);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_moduÀ_t
 *
m
,

480 
ngx_öt_t
 
îr‹
)

482 *
˘x
;

483 
ngx_öt_t
 
rc
;

485 
	`ngx_hâp_˛ón_hódî
(
r
);

487 
˘x
 = 
NULL
;

489 i‡(
m
) {

490 
˘x
 = 
r
->˘x[
m
->
˘x_ödex
];

494 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

496 i‡(
m
) {

497 
r
->
˘x
[
m
->
˘x_ödex
] = ctx;

500 
r
->
fûãr_föÆize
 = 1;

502 
rc
 = 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
r
, 
îr‹
);

506 
rc
) {

508 
NGX_OK
:

509 
NGX_DONE
:

510  
NGX_ERROR
;

513  
rc
;

515 
	}
}

519 
	$ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
)

521 
	`ngx_memzîo
(&
r
->
hódîs_out
.
°©us
,

522 (
ngx_hâp_hódîs_out_t
)

523 - 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
°©us
));

525 
r
->
hódîs_out
.
hódîs
.
∑π
.
√…s
 = 0;

526 
r
->
hódîs_out
.
hódîs
.
∑π
.
√xt
 = 
NULL
;

527 
r
->
hódîs_out
.
hódîs
.
œ°
 = &r->hódîs_out.hódîs.
∑π
;

529 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

530 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
)

537 
ngx_öt_t
 
ovîwrôe
;

538 
ngx_°r_t
 
uri
, 
¨gs
;

539 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

540 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

542 
ovîwrôe
 = 
îr_∑ge
->overwrite;

544 i‡(
ovîwrôe
 && ovîwrôê!
NGX_HTTP_OK
) {

545 
r
->
ex≥˘_ã°ed
 = 1;

548 i‡(
ovîwrôe
 >= 0) {

549 
r
->
îr_°©us
 = 
ovîwrôe
;

552 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
îr_∑ge
->
vÆue
, &
uri
Ë!
NGX_OK
) {

553  
NGX_ERROR
;

556 i‡(
uri
.
d©a
[0] == '/') {

558 i‡(
îr_∑ge
->
vÆue
.
Àngths
) {

559 
	`ngx_hâp_•lô_¨gs
(
r
, &
uri
, &
¨gs
);

562 
¨gs
 = 
îr_∑ge
->args;

565 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

566 
r
->
mëhod
 = 
NGX_HTTP_GET
;

567 
r
->
mëhod_«me
 = 
ngx_hâp_gë_«me
;

570  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

573 i‡(
uri
.
d©a
[0] == '@') {

574  
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

577 
loˇti⁄
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

579 i‡(
loˇti⁄
 =
NULL
) {

580  
NGX_ERROR
;

583 i‡(
ovîwrôe
 !
NGX_HTTP_MOVED_PERMANENTLY


584 && 
ovîwrôe
 !
NGX_HTTP_MOVED_TEMPORARILY


585 && 
ovîwrôe
 !
NGX_HTTP_SEE_OTHER


586 && 
ovîwrôe
 !
NGX_HTTP_TEMPORARY_REDIRECT
)

588 
r
->
îr_°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

591 
loˇti⁄
->
hash
 = 1;

592 
	`ngx_°r_£t
(&
loˇti⁄
->
key
, "Location");

593 
loˇti⁄
->
vÆue
 = 
uri
;

595 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

597 
r
->
hódîs_out
.
loˇti⁄
 =Üocation;

599 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

601 i‡(
˛cf
->
msõ_ª‰esh
 && 
r
->
hódîs_ö
.
msõ
) {

602  
	`ngx_hâp_£nd_ª‰esh
(
r
);

605  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
,Ñ->
îr_°©us


606 - 
NGX_HTTP_MOVED_PERMANENTLY


607 + 
NGX_HTTP_OFF_3XX
);

608 
	}
}

611 
ngx_öt_t


612 
	$ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

613 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
)

615 
u_ch¨
 *
èû
;

616 
size_t
 
Àn
;

617 
ngx_öt_t
 
rc
;

618 
ngx_buf_t
 *
b
;

619 
ngx_uöt_t
 
msõ_∑ddög
;

620 
ngx_chaö_t
 
out
[3];

622 i‡(
˛cf
->
£rvî_tokís
) {

623 
Àn
 = (
ngx_hâp_îr‹_fuŒ_èû
) - 1;

624 
èû
 = 
ngx_hâp_îr‹_fuŒ_èû
;

627 
Àn
 = (
ngx_hâp_îr‹_èû
) - 1;

628 
èû
 = 
ngx_hâp_îr‹_èû
;

631 
msõ_∑ddög
 = 0;

633 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
) {

634 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 +Üen;

635 i‡(
˛cf
->
msõ_∑ddög


636 && (
r
->
hódîs_ö
.
msõ
 ||Ñ->hódîs_ö.
chrome
)

637 && 
r
->
hâp_vîsi⁄
 >
NGX_HTTP_VERSION_10


638 && 
îr
 >
NGX_HTTP_OFF_4XX
)

640 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 +=

641 (
ngx_hâp_msõ_∑ddög
) - 1;

642 
msõ_∑ddög
 = 1;

645 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

646 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

647 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

650 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

653 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

654 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

655 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

658 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

659 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

661 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

663 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

664  
rc
;

667 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 == 0) {

668  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

671 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

672 i‡(
b
 =
NULL
) {

673  
NGX_ERROR
;

676 
b
->
mem‹y
 = 1;

677 
b
->
pos
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
;

678 
b
->
œ°
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
 +Çgx_hâp_îr‹_∑ges[îr].
Àn
;

680 
out
[0].
buf
 = 
b
;

681 
out
[0].
√xt
 = &out[1];

683 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

684 i‡(
b
 =
NULL
) {

685  
NGX_ERROR
;

688 
b
->
mem‹y
 = 1;

690 
b
->
pos
 = 
èû
;

691 
b
->
œ°
 = 
èû
 + 
Àn
;

693 
out
[1].
buf
 = 
b
;

694 
out
[1].
√xt
 = 
NULL
;

696 i‡(
msõ_∑ddög
) {

697 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

698 i‡(
b
 =
NULL
) {

699  
NGX_ERROR
;

702 
b
->
mem‹y
 = 1;

703 
b
->
pos
 = 
ngx_hâp_msõ_∑ddög
;

704 
b
->
œ°
 = 
ngx_hâp_msõ_∑ddög
 + (ngx_http_msie_padding) - 1;

706 
out
[1].
√xt
 = &out[2];

707 
out
[2].
buf
 = 
b
;

708 
out
[2].
√xt
 = 
NULL
;

711 i‡(
r
 =r->
maö
) {

712 
b
->
œ°_buf
 = 1;

715 
b
->
œ°_ö_chaö
 = 1;

717  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[0]);

718 
	}
}

721 
ngx_öt_t


722 
	$ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
)

724 
u_ch¨
 *
p
, *
loˇti⁄
;

725 
size_t
 
Àn
, 
size
;

726 
uöçå_t
 
esˇ≥
;

727 
ngx_öt_t
 
rc
;

728 
ngx_buf_t
 *
b
;

729 
ngx_chaö_t
 
out
;

731 
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

732 
loˇti⁄
 = 
r
->
hódîs_out
.loˇti⁄->
vÆue
.
d©a
;

734 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

736 
size
 = (
ngx_hâp_msõ_ª‰esh_hód
) - 1

737 + 
esˇ≥
 + 
Àn


738 + (
ngx_hâp_msõ_ª‰esh_èû
) - 1;

740 
r
->
îr_°©us
 = 
NGX_HTTP_OK
;

742 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

743 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

744 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

746 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

747 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
;

749 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
size
;

751 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

752 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

753 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

756 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

757 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

759 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

761 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

762  
rc
;

765 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

766 i‡(
b
 =
NULL
) {

767  
NGX_ERROR
;

770 
p
 = 
	`ngx_˝ymem
(
b
->
pos
, 
ngx_hâp_msõ_ª‰esh_hód
,

771 (
ngx_hâp_msõ_ª‰esh_hód
) - 1);

773 i‡(
esˇ≥
 == 0) {

774 
p
 = 
	`ngx_˝ymem
’, 
loˇti⁄
, 
Àn
);

777 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

780 
b
->
œ°
 = 
	`ngx_˝ymem
(
p
, 
ngx_hâp_msõ_ª‰esh_èû
,

781 (
ngx_hâp_msõ_ª‰esh_èû
) - 1);

783 
b
->
œ°_buf
 = 1;

784 
b
->
œ°_ö_chaö
 = 1;

786 
out
.
buf
 = 
b
;

787 
out
.
√xt
 = 
NULL
;

789  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

790 
	}
}

	@src/http/ngx_http_upstream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 #i‡(
NGX_HTTP_CACHE
)

14 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_up°ªam_t
 *
u
);

16 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_up°ªam_t
 *
u
);

18 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

23 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

24 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

26 
ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_evít_t
 *
ev
);

28 
ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_t
 *
u
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_hâp_up°ªam_t
 *
u
);

32 
ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_up°ªam_t
 *
u
);

34 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_up°ªam_t
 *
u
);

36 
ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_up°ªam_t
 *
u
);

38 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_up°ªam_t
 *
u
);

40 
ngx_öt_t
 
ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_up°ªam_t
 *
u
);

42 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
);

43 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_up°ªam_t
 *
u
);

45 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_up°ªam_t
 *
u
);

47 
ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_up°ªam_t
 *
u
);

50 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_up°ªam_t
 *
u
);

55 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_uöt_t
 
do_wrôe
);

57 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
);

58 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
,

59 
ssize_t
 
byãs
);

60 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

61 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

62 
ngx_hâp_up°ªam_t
 *
u
);

63 
ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_up°ªam_t
 *
u
);

66 
ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_up°ªam_t
 *
u
);

68 
ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
,

69 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
·_ty≥
);

70 
ngx_hâp_up°ªam_˛ónup
(*
d©a
);

71 
ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
);

74 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

76 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

78 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

80 
ngx_öt_t


81 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

83 
ngx_öt_t
 
ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

85 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

87 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

89 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

91 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

93 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

95 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

97 
ngx_öt_t


98 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

100 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

102 
ngx_öt_t


103 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

105 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

107 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

109 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

110 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

111 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

113 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

114 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

115 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

118 #i‡(
NGX_HTTP_GZIP
)

119 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

123 
ngx_öt_t
 
ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

124 
ngx_öt_t
 
ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

126 
ngx_öt_t
 
ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

127 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

128 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

130 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(

131 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

133 *
ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
);

134 *
ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

135 *
c⁄f
);

137 *
ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

138 *
ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

140 #i‡(
NGX_HTTP_SSL
)

141 
ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *,

142 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

143 
ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

147 
ngx_hâp_up°ªam_hódî_t
 
	gngx_hâp_up°ªam_hódîs_ö
[] = {

149 { 
ngx_°rög
("Status"),

150 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

151 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
°©us
),

152 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

154 { 
ngx_°rög
("Content-Type"),

155 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

156 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

157 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
, 0, 1 },

159 { 
ngx_°rög
("Content-Length"),

160 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
,

161 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

162 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

164 { 
ngx_°rög
("Date"),

165 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

166 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
d©e
),

167 
ngx_hâp_up°ªam_c›y_hódî_löe
,

168 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
), 0 },

170 { 
ngx_°rög
("Last-Modified"),

171 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

172 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
œ°_modifõd
),

173 
ngx_hâp_up°ªam_c›y_œ°_modifõd
, 0, 0 },

175 { 
ngx_°rög
("ETag"),

176 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

177 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ëag
),

178 
ngx_hâp_up°ªam_c›y_hódî_löe
,

179 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
), 0 },

181 { 
ngx_°rög
("Server"),

182 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

183 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
£rvî
),

184 
ngx_hâp_up°ªam_c›y_hódî_löe
,

185 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
), 0 },

187 { 
ngx_°rög
("WWW-Authenticate"),

188 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

189 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
www_authítiˇã
),

190 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

192 { 
ngx_°rög
("Location"),

193 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

194 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
loˇti⁄
),

195 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
, 0, 0 },

197 { 
ngx_°rög
("Refresh"),

198 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

199 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
, 0, 0 },

201 { 
ngx_°rög
("Set-Cookie"),

202 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
, 0,

203 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
, 0, 1 },

205 { 
ngx_°rög
("Content-Disposition"),

206 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

207 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 1 },

209 { 
ngx_°rög
("Cache-Control"),

210 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
, 0,

211 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
,

212 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
), 1 },

214 { 
ngx_°rög
("Expires"),

215 
ngx_hâp_up°ªam_¥o˚ss_expúes
, 0,

216 
ngx_hâp_up°ªam_c›y_hódî_löe
,

217 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
), 1 },

219 { 
ngx_°rög
("Accept-Ranges"),

220 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

221 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ac˚±_ønges
),

222 
ngx_hâp_up°ªam_c›y_Ælow_ønges
,

223 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
), 1 },

225 { 
ngx_°rög
("Connection"),

226 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
, 0,

227 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

229 { 
ngx_°rög
("Keep-Alive"),

230 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

231 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

233 { 
ngx_°rög
("X-Powered-By"),

234 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

235 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

237 { 
ngx_°rög
("X-Accel-Expires"),

238 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
, 0,

239 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

241 { 
ngx_°rög
("X-Accel-Redirect"),

242 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

243 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
x_ac˚l_ªdúe˘
),

244 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

246 { 
ngx_°rög
("X-Accel-Limit-Rate"),

247 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
, 0,

248 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

250 { 
ngx_°rög
("X-Accel-Buffering"),

251 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
, 0,

252 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

254 { 
ngx_°rög
("X-Accel-Charset"),

255 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
, 0,

256 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

258 { 
ngx_°rög
("Transfer-Encoding"),

259 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
, 0,

260 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

262 #i‡(
NGX_HTTP_GZIP
)

263 { 
ngx_°rög
("Content-Encoding"),

264 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

265 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ícodög
),

266 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
, 0, 0 },

269 { 
ngx_nuŒ_°rög
, 
NULL
, 0, NULL, 0, 0 }

273 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_comm™ds
[] = {

275 { 
ngx_°rög
("upstream"),

276 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

277 
ngx_hâp_up°ªam
,

280 
NULL
 },

282 { 
ngx_°rög
("server"),

283 
NGX_HTTP_UPS_CONF
|
NGX_CONF_1MORE
,

284 
ngx_hâp_up°ªam_£rvî
,

285 
NGX_HTTP_SRV_CONF_OFFSET
,

287 
NULL
 },

289 
ngx_nuŒ_comm™d


293 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ_˘x
 = {

294 
ngx_hâp_up°ªam_add_v¨übÀs
,

295 
NULL
,

297 
ngx_hâp_up°ªam_¸óã_maö_c⁄f
,

298 
ngx_hâp_up°ªam_öô_maö_c⁄f
,

300 
NULL
,

301 
NULL
,

303 
NULL
,

304 
NULL


308 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ
 = {

309 
NGX_MODULE_V1
,

310 &
ngx_hâp_up°ªam_moduÀ_˘x
,

311 
ngx_hâp_up°ªam_comm™ds
,

312 
NGX_HTTP_MODULE
,

313 
NULL
,

314 
NULL
,

315 
NULL
,

316 
NULL
,

317 
NULL
,

318 
NULL
,

319 
NULL
,

320 
NGX_MODULE_V1_PADDING


324 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_up°ªam_v¨s
[] = {

326 { 
ngx_°rög
("up°ªam_addr"), 
NULL
,

327 
ngx_hâp_up°ªam_addr_v¨übÀ
, 0,

328 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

330 { 
ngx_°rög
("up°ªam_°©us"), 
NULL
,

331 
ngx_hâp_up°ªam_°©us_v¨übÀ
, 0,

332 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

334 { 
ngx_°rög
("up°ªam_ª•⁄£_time"), 
NULL
,

335 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 0,

336 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

338 { 
ngx_°rög
("up°ªam_ª•⁄£_Àngth"), 
NULL
,

339 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
, 0,

340 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

342 #i‡(
NGX_HTTP_CACHE
)

344 { 
ngx_°rög
("up°ªam_ˇche_°©us"), 
NULL
,

345 
ngx_hâp_up°ªam_ˇche_°©us
, 0,

346 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

350 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

354 
ngx_hâp_up°ªam_√xt_t
 
	gngx_hâp_up°ªam_√xt_îr‹s
[] = {

355 { 500, 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

356 { 502, 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

357 { 503, 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

358 { 504, 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

359 { 404, 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

364 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ˇche_mëhod_mask
[] = {

365 { 
ngx_°rög
("GET"), 
NGX_HTTP_GET
},

366 { 
ngx_°rög
("HEAD"), 
NGX_HTTP_HEAD
 },

367 { 
ngx_°rög
("POST"), 
NGX_HTTP_POST
 },

368 { 
ngx_nuŒ_°rög
, 0 }

372 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ign‹e_hódîs_masks
[] = {

373 { 
ngx_°rög
("X-Ac˚l-Redúe˘"), 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 },

374 { 
ngx_°rög
("X-Ac˚l-Expúes"), 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 },

375 { 
ngx_°rög
("X-Ac˚l-Limô-R©e"), 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 },

376 { 
ngx_°rög
("X-Ac˚l-Buf„rög"), 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 },

377 { 
ngx_°rög
("X-Ac˚l-Ch¨£t"), 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 },

378 { 
ngx_°rög
("Expúes"), 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
 },

379 { 
ngx_°rög
("Cache-C⁄åﬁ"), 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 },

380 { 
ngx_°rög
("Së-Cookõ"), 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 },

381 { 
ngx_nuŒ_°rög
, 0 }

385 
ngx_öt_t


386 
	$ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

388 
ngx_hâp_up°ªam_t
 *
u
;

390 
u
 = 
r
->
up°ªam
;

392 i‡(
u
 && u->
˛ónup
) {

393 
r
->
maö
->
cou¡
++;

394 
	`ngx_hâp_up°ªam_˛ónup
(
r
);

397 
u
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_t
));

398 i‡(
u
 =
NULL
) {

399  
NGX_ERROR
;

402 
r
->
up°ªam
 = 
u
;

404 
u
->
≥î
.
log
 = 
r
->
c⁄√˘i⁄
->log;

405 
u
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

406 #i‡(
NGX_THREADS
)

407 
u
->
≥î
.
lock
 = &
r
->
c⁄√˘i⁄
->lock;

410 #i‡(
NGX_HTTP_CACHE
)

411 
r
->
ˇche
 = 
NULL
;

414 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

416  
NGX_OK
;

417 
	}
}

421 
	$ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
)

423 
ngx_c⁄√˘i⁄_t
 *
c
;

425 
c
 = 
r
->
c⁄√˘i⁄
;

427 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

428 "hâ∞öô up°ªam, clõ¡Åimî: %d", 
c
->
ªad
->
timî_£t
);

430 i‡(
c
->
ªad
->
timî_£t
) {

431 
	`ngx_dñ_timî
(
c
->
ªad
);

434 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

436 i‡(!
c
->
wrôe
->
a˘ive
) {

437 i‡(
	`ngx_add_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLEAR_EVENT
)

438 =
NGX_ERROR
)

440 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

446 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

447 
	}
}

451 
	$ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

453 
ngx_°r_t
 *
ho°
;

454 
ngx_uöt_t
 
i
;

455 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ãmp
;

456 
ngx_hâp_˛ónup_t
 *
˛n
;

457 
ngx_hâp_up°ªam_t
 *
u
;

458 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

459 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

460 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

462 i‡(
r
->
aio
) {

466 
u
 = 
r
->
up°ªam
;

468 #i‡(
NGX_HTTP_CACHE
)

470 i‡(
u
->
c⁄f
->
ˇche
) {

471 
ngx_öt_t
 
rc
;

473 
rc
 = 
	`ngx_hâp_up°ªam_ˇche
(
r
, 
u
);

475 i‡(
rc
 =
NGX_BUSY
) {

476 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_öô_ªque°
;

480 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

482 i‡(
rc
 =
NGX_DONE
) {

486 i‡(
rc
 !
NGX_DECLINED
) {

487 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

494 
u
->
°‹e
 = (u->
c⁄f
->°‹ê|| u->c⁄f->
°‹e_Àngths
);

496 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

497 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

498 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
;

501 i‡(
r
->
ªque°_body
) {

502 
u
->
ªque°_bufs
 = 
r
->
ªque°_body
->
bufs
;

505 i‡(
u
->
	`¸óã_ªque°
(
r
Ë!
NGX_OK
) {

506 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

510 
u
->
≥î
.
loˇl
 = u->
c⁄f
->local;

512 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

514 
u
->
ouçut
.
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

515 
u
->
ouçut
.
poﬁ
 = 
r
->pool;

516 
u
->
ouçut
.
bufs
.
num
 = 1;

517 
u
->
ouçut
.
bufs
.
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

518 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_chaö_wrôî
;

519 
u
->
ouçut
.
fûãr_˘x
 = &u->
wrôî
;

521 
u
->
wrôî
.
poﬁ
 = 
r
->pool;

523 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

525 
r
->
up°ªam_°©es
 = 
	`ngx_¨øy_¸óã
‘->
poﬁ
, 1,

526 (
ngx_hâp_up°ªam_°©e_t
));

527 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

528 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

534 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

535 i‡(
u
->
°©e
 =
NULL
) {

536 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

537 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

541 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

544 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

545 i‡(
˛n
 =
NULL
) {

546 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

550 
˛n
->
h™dÀr
 = 
ngx_hâp_up°ªam_˛ónup
;

551 
˛n
->
d©a
 = 
r
;

552 
u
->
˛ónup
 = &
˛n
->
h™dÀr
;

554 i‡(
u
->
ªsﬁved
 =
NULL
) {

556 
uscf
 = 
u
->
c⁄f
->
up°ªam
;

560 i‡(
u
->
ªsﬁved
->
sockaddr
) {

562 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
u
->
ªsﬁved
)

563 !
NGX_OK
)

565 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

566 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

570 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

575 
ho°
 = &
u
->
ªsﬁved
->host;

577 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

579 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

581 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

583 
uscf
 = 
uscÂ
[
i
];

585 i‡(
uscf
->
ho°
.
Àn
 == host->len

586 && ((
uscf
->
p‹t
 =0 && 
u
->
ªsﬁved
->
no_p‹t
)

587 || 
uscf
->
p‹t
 =
u
->
ªsﬁved
->port)

588 && 
	`ngx_memcmp
(
uscf
->
ho°
.
d©a
, ho°->d©a, ho°->
Àn
) == 0)

590 
found
;

594 i‡(
u
->
ªsﬁved
->
p‹t
 == 0) {

595 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

596 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

597 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

598 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

602 
ãmp
.
«me
 = *
ho°
;

604 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
˛cf
->
ªsﬁvî
, &
ãmp
);

605 i‡(
˘x
 =
NULL
) {

606 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

607 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

611 i‡(
˘x
 =
NGX_NO_RESOLVER
) {

612 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

613 "nÿªsﬁvî deföedÅÿªsﬁvê%V", 
ho°
);

615 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

619 
˘x
->
«me
 = *
ho°
;

620 
˘x
->
ty≥
 = 
NGX_RESOLVE_A
;

621 
˘x
->
h™dÀr
 = 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
;

622 
˘x
->
d©a
 = 
r
;

623 
˘x
->
timeout
 = 
˛cf
->
ªsﬁvî_timeout
;

625 
u
->
ªsﬁved
->
˘x
 = ctx;

627 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

628 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

629 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

630 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

637 
found
:

639 i‡(
uscf
 =
NULL
) {

640 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

642 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

643 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

647 i‡(
uscf
->
≥î
.
	`öô
(
r
, uscfË!
NGX_OK
) {

648 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

649 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

653 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

654 
	}
}

657 #i‡(
NGX_HTTP_CACHE
)

659 
ngx_öt_t


660 
	$ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

662 
ngx_öt_t
 
rc
;

663 
ngx_hâp_ˇche_t
 *
c
;

665 
c
 = 
r
->
ˇche
;

667 i‡(
c
 =
NULL
) {

669 i‡(!(
r
->
mëhod
 & 
u
->
c⁄f
->
ˇche_mëhods
)) {

670  
NGX_DECLINED
;

673 i‡(
r
->
mëhod
 & 
NGX_HTTP_HEAD
) {

674 
u
->
mëhod
 = 
ngx_hâp_c‹e_gë_mëhod
;

677 i‡(
	`ngx_hâp_fûe_ˇche_√w
(
r
Ë!
NGX_OK
) {

678  
NGX_ERROR
;

681 i‡(
u
->
	`¸óã_key
(
r
Ë!
NGX_OK
) {

682  
NGX_ERROR
;

687 
	`ngx_hâp_fûe_ˇche_¸óã_key
(
r
);

689 i‡(
r
->
ˇche
->
hódî_°¨t
 + 256 >
u
->
c⁄f
->
buf„r_size
) {

690 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

693 &
u
->
c⁄f
->
moduÀ
, u->c⁄f->
buf„r_size
,

694 
	`ngx_Æign
(
r
->
ˇche
->
hódî_°¨t
 + 256, 1024));

696 
r
->
ˇche
 = 
NULL
;

697  
NGX_DECLINED
;

700 
u
->
ˇchóbÀ
 = 1;

702 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
ˇche_by∑ss
)) {

704 
NGX_ERROR
:

705  
NGX_ERROR
;

707 
NGX_DECLINED
:

708 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_BYPASS
;

709  
NGX_DECLINED
;

715 
c
 = 
r
->
ˇche
;

717 
c
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

718 
c
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

719 
c
->
fûe_ˇche
 = 
u
->
c⁄f
->
ˇche
->
d©a
;

721 
c
->
lock
 = 
u
->
c⁄f
->
ˇche_lock
;

722 
c
->
lock_timeout
 = 
u
->
c⁄f
->
ˇche_lock_timeout
;

724 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_MISS
;

727 
rc
 = 
	`ngx_hâp_fûe_ˇche_›í
(
r
);

729 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

730 "hâ∞up°ªam cache: %i", 
rc
);

732 
rc
) {

734 
NGX_HTTP_CACHE_UPDATING
:

736 i‡(
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_UPDATING
) {

737 
u
->
ˇche_°©us
 = 
rc
;

738 
rc
 = 
NGX_OK
;

741 
rc
 = 
NGX_HTTP_CACHE_STALE
;

746 
NGX_OK
:

747 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

750 
rc
) {

752 
NGX_OK
:

754 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

756 i‡(
rc
 !
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

757  
rc
;

762 
NGX_HTTP_CACHE_STALE
:

764 
c
->
vÆid_£c
 = 0;

765 
u
->
buf„r
.
°¨t
 = 
NULL
;

766 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_EXPIRED
;

770 
NGX_DECLINED
:

772 i‡((
size_t
Ë(
u
->
buf„r
.
íd
 - u->buf„r.
°¨t
Ë< u->
c⁄f
->
buf„r_size
) {

773 
u
->
buf„r
.
°¨t
 = 
NULL
;

776 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
 + 
c
->
hódî_°¨t
;

777 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

782 
NGX_HTTP_CACHE_SCARCE
:

784 
u
->
ˇchóbÀ
 = 0;

788 
NGX_AGAIN
:

790  
NGX_BUSY
;

792 
NGX_ERROR
:

794  
NGX_ERROR
;

800 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

802  
rc
;

805 
r
->
ˇched
 = 0;

807  
NGX_DECLINED
;

808 
	}
}

811 
ngx_öt_t


812 
	$ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

814 
ngx_öt_t
 
rc
;

815 
ngx_hâp_ˇche_t
 *
c
;

817 
r
->
ˇched
 = 1;

818 
c
 = 
r
->
ˇche
;

820 i‡(
c
->
hódî_°¨t
 =c->
body_°¨t
) {

821 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

822  
	`ngx_hâp_ˇche_£nd
(
r
);

827 
u
->
buf„r
 = *
c
->
buf
;

828 
u
->
buf„r
.
pos
 +
c
->
hódî_°¨t
;

830 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

831 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

833 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

834 (
ngx_èbÀ_ñt_t
))

835 !
NGX_OK
)

837  
NGX_ERROR
;

840 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

842 i‡(
rc
 =
NGX_OK
) {

844 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

845  
NGX_DONE
;

848  
	`ngx_hâp_ˇche_£nd
(
r
);

851 i‡(
rc
 =
NGX_ERROR
) {

852  
NGX_ERROR
;

859  
rc
;

860 
	}
}

866 
	$ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

868 
ngx_c⁄√˘i⁄_t
 *
c
;

869 
ngx_hâp_ªque°_t
 *
r
;

870 
ngx_hâp_up°ªam_t
 *
u
;

871 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
;

873 
r
 = 
˘x
->
d©a
;

874 
c
 = 
r
->
c⁄√˘i⁄
;

876 
u
 = 
r
->
up°ªam
;

877 
ur
 = 
u
->
ªsﬁved
;

879 i‡(
˘x
->
°©e
) {

880 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

882 &
˘x
->
«me
, ctx->
°©e
,

883 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

885 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

886 
Áûed
;

889 
ur
->
«ddrs
 = 
˘x
->naddrs;

890 
ur
->
addrs
 = 
˘x
->addrs;

892 #i‡(
NGX_DEBUG
)

894 
ö_addr_t
 
addr
;

895 
ngx_uöt_t
 
i
;

897 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

898 
addr
 = 
	`¡ohl
(
ur
->
addrs
[
i
]);

900 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

902 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

903 (
addr
 >> 8) & 0xff,áddr & 0xff);

908 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
ur
Ë!
NGX_OK
) {

909 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

910 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

911 
Áûed
;

914 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

915 
ur
->
˘x
 = 
NULL
;

917 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

919 
Áûed
:

921 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

922 
	}
}

926 
	$ngx_hâp_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

928 
ngx_c⁄√˘i⁄_t
 *
c
;

929 
ngx_hâp_ªque°_t
 *
r
;

930 
ngx_hâp_log_˘x_t
 *
˘x
;

931 
ngx_hâp_up°ªam_t
 *
u
;

933 
c
 = 
ev
->
d©a
;

934 
r
 = 
c
->
d©a
;

936 
u
 = 
r
->
up°ªam
;

937 
c
 = 
r
->
c⁄√˘i⁄
;

939 
˘x
 = 
c
->
log
->
d©a
;

940 
˘x
->
cuºít_ªque°
 = 
r
;

942 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

943 "hâ∞up°ªamÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

945 i‡(
ev
->
wrôe
) {

946 
u
->
	`wrôe_evít_h™dÀr
(
r
, u);

949 
u
->
	`ªad_evít_h™dÀr
(
r
, u);

952 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

953 
	}
}

957 
	$ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

959 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
ªad
);

960 
	}
}

964 
	$ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

966 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
wrôe
);

967 
	}
}

971 
	$ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

972 
ngx_evít_t
 *
ev
)

974 
n
;

975 
buf
[1];

976 
ngx_îr_t
 
îr
;

977 
ngx_öt_t
 
evít
;

978 
ngx_c⁄√˘i⁄_t
 *
c
;

979 
ngx_hâp_up°ªam_t
 *
u
;

981 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

983 
ev
->
wrôe
, &
r
->
uri
);

985 
c
 = 
r
->
c⁄√˘i⁄
;

986 
u
 = 
r
->
up°ªam
;

988 i‡(
c
->
îr‹
) {

989 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

991 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

993 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

994 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

995 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1000 i‡(!
u
->
ˇchóbÀ
) {

1001 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1002 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1008 #i‡(
NGX_HAVE_KQUEUE
)

1010 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1012 i‡(!
ev
->
≥ndög_eof
) {

1016 
ev
->
eof
 = 1;

1017 
c
->
îr‹
 = 1;

1019 i‡(
ev
->
kq_î∫o
) {

1020 
ev
->
îr‹
 = 1;

1023 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1024 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1027 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1028 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1032 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1036 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1037 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1038 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1046 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

1048 
îr
 = 
ngx_sockë_î∫o
;

1050 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 
îr
,

1051 "hâ∞up°ªamÑecv(): %d", 
n
);

1053 i‡(
ev
->
wrôe
 && (
n
 >0 || 
îr
 =
NGX_EAGAIN
)) {

1057 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1059 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1061 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1062 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1063 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1068 i‡(
n
 > 0) {

1072 i‡(
n
 == -1) {

1073 i‡(
îr
 =
NGX_EAGAIN
) {

1077 
ev
->
îr‹
 = 1;

1080 
îr
 = 0;

1083 
ev
->
eof
 = 1;

1084 
c
->
îr‹
 = 1;

1086 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1087 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1090 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1091 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1095 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1098 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1099 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1100 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1102 
	}
}

1106 
	$ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1108 
ngx_öt_t
 
rc
;

1109 
ngx_time_t
 *
ç
;

1110 
ngx_c⁄√˘i⁄_t
 *
c
;

1112 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1114 
r
->
c⁄√˘i⁄
->
sögÀ_c⁄√˘i⁄
 = 0;

1116 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

1117 
ç
 = 
	`ngx_timeofday
();

1118 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

1119 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

1122 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

1123 i‡(
u
->
°©e
 =
NULL
) {

1124 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1125 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1129 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

1131 
ç
 = 
	`ngx_timeofday
();

1132 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
;

1133 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
;

1135 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
u
->
≥î
);

1137 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1138 "hâ∞up°ªam c⁄√˘: %i", 
rc
);

1140 i‡(
rc
 =
NGX_ERROR
) {

1141 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1142 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1146 
u
->
°©e
->
≥î
 = u->≥î.
«me
;

1148 i‡(
rc
 =
NGX_BUSY
) {

1149 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "noÜive upstreams");

1150 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_NOLIVE
);

1154 i‡(
rc
 =
NGX_DECLINED
) {

1155 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1161 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1163 
c
->
d©a
 = 
r
;

1165 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1166 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1168 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
;

1169 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_hódî
;

1171 
c
->
£ndfûe
 &
r
->
c⁄√˘i⁄
->sendfile;

1172 
u
->
ouçut
.
£ndfûe
 = 
c
->sendfile;

1174 i‡(
c
->
poﬁ
 =
NULL
) {

1178 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
r
->
c⁄√˘i⁄
->
log
);

1179 i‡(
c
->
poﬁ
 =
NULL
) {

1180 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1181 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1186 
c
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1187 
c
->
poﬁ
->
log
 = c->log;

1188 
c
->
ªad
->
log
 = c->log;

1189 
c
->
wrôe
->
log
 = c->log;

1193 
u
->
wrôî
.
out
 = 
NULL
;

1194 
u
->
wrôî
.
œ°
 = &u->wrôî.
out
;

1195 
u
->
wrôî
.
c⁄√˘i⁄
 = 
c
;

1196 
u
->
wrôî
.
limô
 = 0;

1198 i‡(
u
->
ªque°_£¡
) {

1199 i‡(
	`ngx_hâp_up°ªam_ªöô
(
r
, 
u
Ë!
NGX_OK
) {

1200 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1201 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1206 i‡(
r
->
ªque°_body


1207 && 
r
->
ªque°_body
->
buf


1208 && 
r
->
ªque°_body
->
ãmp_fûe


1209 && 
r
 =r->
maö
)

1216 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1217 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1218 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1219 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1223 
u
->
ouçut
.
‰ì
->
buf
 = 
r
->
ªque°_body
->buf;

1224 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1225 
u
->
ouçut
.
Æloˇãd
 = 1;

1227 
r
->
ªque°_body
->
buf
->
pos
 =Ñ->ªque°_body->buf->
°¨t
;

1228 
r
->
ªque°_body
->
buf
->
œ°
 =Ñ->ªque°_body->buf->
°¨t
;

1229 
r
->
ªque°_body
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1232 
u
->
ªque°_£¡
 = 0;

1234 i‡(
rc
 =
NGX_AGAIN
) {

1235 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1239 #i‡(
NGX_HTTP_SSL
)

1241 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1242 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1248 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1249 
	}
}

1252 #i‡(
NGX_HTTP_SSL
)

1255 
	$ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1256 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
)

1258 
ngx_öt_t
 
rc
;

1260 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
u
->
c⁄f
->
s¶
, 
c
,

1261 
NGX_SSL_BUFFER
|
NGX_SSL_CLIENT
)

1262 !
NGX_OK
)

1264 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1265 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1269 
c
->
£ndfûe
 = 0;

1270 
u
->
ouçut
.
£ndfûe
 = 0;

1272 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1273 i‡(
u
->
≥î
.
	`£t_£ssi⁄
(&u->≥î, u->≥î.
d©a
Ë!
NGX_OK
) {

1274 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1275 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1280 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "SSL handshakingÅo upstream";

1282 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

1284 i‡(
rc
 =
NGX_AGAIN
) {

1285 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_s¶_h™dshake
;

1289 
	`ngx_hâp_up°ªam_s¶_h™dshake
(
c
);

1290 
	}
}

1294 
	$ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

1296 
ngx_hâp_ªque°_t
 *
r
;

1297 
ngx_hâp_up°ªam_t
 *
u
;

1299 
r
 = 
c
->
d©a
;

1300 
u
 = 
r
->
up°ªam
;

1302 i‡(
c
->
s¶
->
h™dshaked
) {

1304 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1305 
u
->
≥î
.
	`ßve_£ssi⁄
(&u->≥î, u->≥î.
d©a
);

1308 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1309 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1311 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1316 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1318 
	}
}

1323 
ngx_öt_t


1324 
	$ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1326 
ngx_chaö_t
 *
˛
;

1328 i‡(
u
->
	`ªöô_ªque°
(
r
Ë!
NGX_OK
) {

1329  
NGX_ERROR
;

1332 
u
->
kì∑live
 = 0;

1334 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

1335 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1337 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1338 (
ngx_èbÀ_ñt_t
))

1339 !
NGX_OK
)

1341  
NGX_ERROR
;

1346 
˛
 = 
u
->
ªque°_bufs
; cl; c»˛->
√xt
) {

1347 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

1348 
˛
->
buf
->
fûe_pos
 = 0;

1353 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe


1354 && 
r
 !r->
maö
 && 
u
->
ouçut
.
buf
)

1356 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1357 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1358  
NGX_ERROR
;

1361 
u
->
ouçut
.
‰ì
->
buf
 = u->output.buf;

1362 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1364 
u
->
ouçut
.
buf
->
pos
 = u->ouçut.buf->
°¨t
;

1365 
u
->
ouçut
.
buf
->
œ°
 = u->ouçut.buf->
°¨t
;

1368 
u
->
ouçut
.
buf
 = 
NULL
;

1369 
u
->
ouçut
.
ö
 = 
NULL
;

1370 
u
->
ouçut
.
busy
 = 
NULL
;

1374 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1376 #i‡(
NGX_HTTP_CACHE
)

1378 i‡(
r
->
ˇche
) {

1379 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1384 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1386  
NGX_OK
;

1387 
	}
}

1391 
	$ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1393 
ngx_öt_t
 
rc
;

1394 
ngx_c⁄√˘i⁄_t
 *
c
;

1396 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1398 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1401 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1402 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1406 
c
->
log
->
a˘i⁄
 = "sendingÑequestÅo upstream";

1408 
rc
 = 
	`ngx_ouçut_chaö
(&
u
->
ouçut
, u->
ªque°_£¡
 ? 
NULL
 : u->
ªque°_bufs
);

1410 
u
->
ªque°_£¡
 = 1;

1412 i‡(
rc
 =
NGX_ERROR
) {

1413 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1417 i‡(
c
->
wrôe
->
timî_£t
) {

1418 
	`ngx_dñ_timî
(
c
->
wrôe
);

1421 i‡(
rc
 =
NGX_AGAIN
) {

1422 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

1424 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
Ë!
NGX_OK
) {

1425 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1426 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1435 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

1436 i‡(
	`ngx_t˝_push
(
c
->
fd
Ë=
NGX_ERROR
) {

1437 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
ngx_sockë_î∫o
,

1438 
ngx_t˝_push_n
 " failed");

1439 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1440 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1444 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

1447 
	`ngx_add_timî
(
c
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

1450 i‡(
c
->
ªad
->
ªady
) {

1461 
	`ngx_hâp_up°ªam_¥o˚ss_hódî
(
r
, 
u
);

1466 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1468 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1469 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1470 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1473 
	}
}

1477 
	$ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

1478 
ngx_hâp_up°ªam_t
 *
u
)

1480 
ngx_c⁄√˘i⁄_t
 *
c
;

1482 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1484 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1487 i‡(
c
->
wrôe
->
timedout
) {

1488 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1492 #i‡(
NGX_HTTP_SSL
)

1494 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1495 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1501 i‡(
u
->
hódî_£¡
) {

1502 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1504 (Ë
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0);

1509 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1510 
	}
}

1514 
	$ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1516 
ssize_t
 
n
;

1517 
ngx_öt_t
 
rc
;

1518 
ngx_c⁄√˘i⁄_t
 *
c
;

1520 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1522 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1525 
c
->
log
->
a˘i⁄
 = "readingÑesponse header from upstream";

1527 i‡(
c
->
ªad
->
timedout
) {

1528 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1532 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1533 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1537 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1538 
u
->
buf„r
.
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, u->
c⁄f
->
buf„r_size
);

1539 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1540 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1541 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1545 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1546 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

1547 
u
->
buf„r
.
íd
 = u->buf„r.
°¨t
 + u->
c⁄f
->
buf„r_size
;

1548 
u
->
buf„r
.
ãmp‹¨y
 = 1;

1550 
u
->
buf„r
.
èg
 = u->
ouçut
.tag;

1552 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1553 (
ngx_èbÀ_ñt_t
))

1554 !
NGX_OK
)

1556 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1557 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1561 #i‡(
NGX_HTTP_CACHE
)

1563 i‡(
r
->
ˇche
) {

1564 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1565 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1572 
n
 = 
c
->
	`ªcv
(c, 
u
->
buf„r
.
œ°
, u->buf„r.
íd
 - u->buffer.last);

1574 i‡(
n
 =
NGX_AGAIN
) {

1576 
	`ngx_add_timî
(
ªv
, 
u
->
ªad_timeout
);

1579 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1580 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1581 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1588 i‡(
n
 == 0) {

1589 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1593 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

1594 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1598 
u
->
buf„r
.
œ°
 +
n
;

1601 
u
->
vÆid_hódî_ö
 = 0;

1603 
u
->
≥î
.
ˇched
 = 0;

1606 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

1608 i‡(
rc
 =
NGX_AGAIN
) {

1610 i‡(
u
->
buf„r
.
œ°
 =u->buf„r.
íd
) {

1611 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1614 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
,

1615 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1625 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

1626 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1630 i‡(
rc
 =
NGX_ERROR
) {

1631 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1632 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1638 i‡(
u
->
hódîs_ö
.
°©us_n
 > 
NGX_HTTP_SPECIAL_RESPONSE
) {

1640 i‡(
r
->
subªque°_ö_mem‹y
) {

1641 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1644 i‡(
	`ngx_hâp_up°ªam_ã°_√xt
(
r
, 
u
Ë=
NGX_OK
) {

1648 i‡(
	`ngx_hâp_up°ªam_öãr˚±_îr‹s
(
r
, 
u
Ë=
NGX_OK
) {

1653 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

1657 i‡(!
r
->
subªque°_ö_mem‹y
) {

1658 
	`ngx_hâp_up°ªam_£nd_ª•⁄£
(
r
, 
u
);

1664 i‡(
u
->
öput_fûãr
 =
NULL
) {

1665 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

1666 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

1667 
u
->
öput_fûãr_˘x
 = 
r
;

1670 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

1671 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1672 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1676 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1678 i‡(
n
) {

1679 
u
->
buf„r
.
œ°
 -
n
;

1681 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

1683 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

1684 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

1688 i‡(
u
->
Àngth
 == 0) {

1689 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

1694 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
;

1696 
	`ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
r
, 
u
);

1697 
	}
}

1700 
ngx_öt_t


1701 
	$ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1703 
ngx_uöt_t
 
°©us
;

1704 
ngx_hâp_up°ªam_√xt_t
 *
un
;

1706 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1708 
un
 = 
ngx_hâp_up°ªam_√xt_îr‹s
; un->
°©us
; un++) {

1710 i‡(
°©us
 !
un
->status) {

1714 i‡(
u
->
≥î
.
åõs
 > 1 && (u->
c⁄f
->
√xt_up°ªam
 & 
un
->
mask
)) {

1715 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
un
->
mask
);

1716  
NGX_OK
;

1719 #i‡(
NGX_HTTP_CACHE
)

1721 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


1722 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
un
->
mask
))

1724 
ngx_öt_t
 
rc
;

1726 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

1728 i‡(
rc
 =
NGX_OK
) {

1729 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

1730 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

1733 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

1734  
NGX_OK
;

1740  
NGX_DECLINED
;

1741 
	}
}

1744 
ngx_öt_t


1745 
	$ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

1746 
ngx_hâp_up°ªam_t
 *
u
)

1748 
ngx_öt_t
 
°©us
;

1749 
ngx_uöt_t
 
i
;

1750 
ngx_èbÀ_ñt_t
 *
h
;

1751 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

1752 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1754 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1756 i‡(
°©us
 =
NGX_HTTP_NOT_FOUND
 && 
u
->
c⁄f
->
öãr˚±_404
) {

1757 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_NOT_FOUND
);

1758  
NGX_OK
;

1761 i‡(!
u
->
c⁄f
->
öãr˚±_îr‹s
) {

1762  
NGX_DECLINED
;

1765 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1767 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

1768  
NGX_DECLINED
;

1771 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

1772 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

1774 i‡(
îr_∑ge
[
i
].
°©us
 == status) {

1776 i‡(
°©us
 =
NGX_HTTP_UNAUTHORIZED


1777 && 
u
->
hódîs_ö
.
www_authítiˇã
)

1779 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1781 i‡(
h
 =
NULL
) {

1782 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1783 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1784  
NGX_OK
;

1787 *
h
 = *
u
->
hódîs_ö
.
www_authítiˇã
;

1789 
r
->
hódîs_out
.
www_authítiˇã
 = 
h
;

1792 #i‡(
NGX_HTTP_CACHE
)

1794 i‡(
r
->
ˇche
) {

1795 
time_t
 
vÆid
;

1797 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
°©us
);

1799 i‡(
vÆid
) {

1800 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

1801 
r
->
ˇche
->
îr‹
 = 
°©us
;

1804 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

1807 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

1809  
NGX_OK
;

1813  
NGX_DECLINED
;

1814 
	}
}

1817 
ngx_öt_t


1818 
	$ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
)

1820 
îr
;

1821 
sockÀn_t
 
Àn
;

1823 #i‡(
NGX_HAVE_KQUEUE
)

1825 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1826 i‡(
c
->
wrôe
->
≥ndög_eof
 || c->
ªad
->pending_eof) {

1827 i‡(
c
->
wrôe
->
≥ndög_eof
) {

1828 
îr
 = 
c
->
wrôe
->
kq_î∫o
;

1831 
îr
 = 
c
->
ªad
->
kq_î∫o
;

1834 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1835 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

1837  
NGX_ERROR
;

1843 
îr
 = 0;

1844 
Àn
 = ();

1851 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1854 
îr
 = 
ngx_î∫o
;

1857 i‡(
îr
) {

1858 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1859 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "connect() failed");

1860  
NGX_ERROR
;

1864  
NGX_OK
;

1865 
	}
}

1868 
ngx_öt_t


1869 
	$ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1871 
ngx_°r_t
 *
uri
, 
¨gs
;

1872 
ngx_uöt_t
 
i
, 
Êags
;

1873 
ngx_li°_∑π_t
 *
∑π
;

1874 
ngx_èbÀ_ñt_t
 *
h
;

1875 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1876 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1878 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1880 i‡(
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘


1881 && !(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
))

1883 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DECLINED
);

1885 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

1886 
h
 = 
∑π
->
ñts
;

1888 
i
 = 0; ; i++) {

1890 i‡(
i
 >
∑π
->
√…s
) {

1891 i‡(
∑π
->
√xt
 =
NULL
) {

1895 
∑π
 =Ö¨t->
√xt
;

1896 
h
 = 
∑π
->
ñts
;

1897 
i
 = 0;

1900 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

1901 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

1903 i‡(
hh
 && hh->
ªdúe˘
) {

1904 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

1905 
	`ngx_hâp_föÆize_ªque°
(
r
,

1906 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1907  
NGX_DONE
;

1912 
uri
 = &
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘
->
vÆue
;

1913 
	`ngx_°r_nuŒ
(&
¨gs
);

1914 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

1916 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

1917 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1918  
NGX_DONE
;

1921 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

1922 
r
->
mëhod
 = 
NGX_HTTP_GET
;

1925 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, 
uri
, &
¨gs
);

1926 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1927  
NGX_DONE
;

1930 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

1931 
h
 = 
∑π
->
ñts
;

1933 
i
 = 0; ; i++) {

1935 i‡(
i
 >
∑π
->
√…s
) {

1936 i‡(
∑π
->
√xt
 =
NULL
) {

1940 
∑π
 =Ö¨t->
√xt
;

1941 
h
 = 
∑π
->
ñts
;

1942 
i
 = 0;

1945 i‡(
	`ngx_hash_föd
(&
u
->
c⁄f
->
hide_hódîs_hash
, 
h
[
i
].
hash
,

1946 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
))

1951 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

1952 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

1954 i‡(
hh
) {

1955 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

1956 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1957 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1958  
NGX_DONE
;

1964 i‡(
	`ngx_hâp_up°ªam_c›y_hódî_löe
(
r
, &
h
[
i
], 0Ë!
NGX_OK
) {

1965 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1966 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1967  
NGX_DONE
;

1971 i‡(
r
->
hódîs_out
.
£rvî
 &&Ñ->hódîs_out.£rvî->
vÆue
.
d©a
 =
NULL
) {

1972 
r
->
hódîs_out
.
£rvî
->
hash
 = 0;

1975 i‡(
r
->
hódîs_out
.
d©e
 &&Ñ->hódîs_out.d©e->
vÆue
.
d©a
 =
NULL
) {

1976 
r
->
hódîs_out
.
d©e
->
hash
 = 0;

1979 
r
->
hódîs_out
.
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1980 
r
->
hódîs_out
.
°©us_löe
 = 
u
->
hódîs_ö
.status_line;

1982 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
u
->
hódîs_ö
.content_length_n;

1984 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1986  
NGX_OK
;

1987 
	}
}

1991 
	$ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

1992 
ngx_hâp_up°ªam_t
 *
u
)

1994 
size_t
 
size
;

1995 
ssize_t
 
n
;

1996 
ngx_buf_t
 *
b
;

1997 
ngx_evít_t
 *
ªv
;

1998 
ngx_c⁄√˘i⁄_t
 *
c
;

2000 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2001 
ªv
 = 
c
->
ªad
;

2003 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2006 i‡(
ªv
->
timedout
) {

2007 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2008 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ETIMEDOUT
);

2012 
b
 = &
u
->
buf„r
;

2016 
size
 = 
b
->
íd
 - b->
œ°
;

2018 i‡(
size
 == 0) {

2019 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2021 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2025 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

2027 i‡(
n
 =
NGX_AGAIN
) {

2031 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

2032 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
n
);

2036 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2038 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2039 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2043 i‡(!
ªv
->
ªady
) {

2048 i‡(
u
->
Àngth
 == 0) {

2049 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2053 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2054 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2058 i‡(
ªv
->
a˘ive
) {

2059 
	`ngx_add_timî
(
ªv
, 
u
->
c⁄f
->
ªad_timeout
);

2061 } i‡(
ªv
->
timî_£t
) {

2062 
	`ngx_dñ_timî
(
ªv
);

2064 
	}
}

2068 
	$ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2070 
t˝_nodñay
;

2071 
ssize_t
 
n
;

2072 
ngx_öt_t
 
rc
;

2073 
ngx_evít_pùe_t
 *
p
;

2074 
ngx_c⁄√˘i⁄_t
 *
c
;

2075 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2077 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

2079 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
po°_a˘i⁄
) {

2080 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2084 
c
 = 
r
->
c⁄√˘i⁄
;

2086 i‡(
r
->
hódî_⁄ly
) {

2088 i‡(
u
->
ˇchóbÀ
 || u->
°‹e
) {

2090 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

2091 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2092 
ngx_shutdown_sockë_n
 " failed");

2095 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2096 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2097 
c
->
îr‹
 = 1;

2100 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2105 
u
->
hódî_£¡
 = 1;

2107 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe
) {

2108 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
);

2109 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2112 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2114 i‡(!
u
->
buf„rög
) {

2116 i‡(
u
->
öput_fûãr
 =
NULL
) {

2117 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

2118 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

2119 
u
->
öput_fûãr_˘x
 = 
r
;

2122 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
;

2123 
r
->
wrôe_evít_h™dÀr
 =

2124 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
;

2126 
r
->
limô_øã
 = 0;

2128 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

2129 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2133 i‡(
˛cf
->
t˝_nodñay
 && 
c
->t˝_nodñay =
NGX_TCP_NODELAY_UNSET
) {

2134 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2136 
t˝_nodñay
 = 1;

2138 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2139 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2141 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2143 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2147 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2150 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2152 i‡(
n
) {

2153 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2155 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2157 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2158 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2162 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
r
);

2165 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2166 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2168 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

2169 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2173 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady
 || u->
Àngth
 == 0) {

2174 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
r
, 
u
);

2183 #i‡(
NGX_HTTP_CACHE
)

2185 i‡(
r
->
ˇche
 &&Ñ->ˇche->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

2186 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ˇche
->
fûe
.
fd
);

2187 
r
->
ˇche
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2190 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
no_ˇche
)) {

2192 
NGX_ERROR
:

2193 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2196 
NGX_DECLINED
:

2197 
u
->
ˇchóbÀ
 = 0;

2202 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_BYPASS
) {

2204 
r
->
ˇche
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

2205 
r
->
ˇche
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

2206 
r
->
ˇche
->
fûe_ˇche
 = 
u
->
c⁄f
->ˇche->
d©a
;

2208 i‡(
	`ngx_hâp_fûe_ˇche_¸óã
(
r
Ë!
NGX_OK
) {

2209 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2217 i‡(
u
->
ˇchóbÀ
) {

2218 
time_t
 
now
, 
vÆid
;

2220 
now
 = 
	`ngx_time
();

2222 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2224 i‡(
vÆid
 == 0) {

2225 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2226 
u
->
hódîs_ö
.
°©us_n
);

2227 i‡(
vÆid
) {

2228 
r
->
ˇche
->
vÆid_£c
 = 
now
 + 
vÆid
;

2232 i‡(
vÆid
) {

2233 
r
->
ˇche
->
œ°_modifõd
 =Ñ->
hódîs_out
.
œ°_modifõd_time
;

2234 
r
->
ˇche
->
d©e
 = 
now
;

2235 
r
->
ˇche
->
body_°¨t
 = (
u_sh‹t
Ë(
u
->
buf„r
.
pos
 - u->buf„r.
°¨t
);

2237 
	`ngx_hâp_fûe_ˇche_£t_hódî
(
r
, 
u
->
buf„r
.
°¨t
);

2240 
u
->
ˇchóbÀ
 = 0;

2241 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

2245 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2246 "hâ∞ˇchóbÀ: %d", 
u
->
ˇchóbÀ
);

2248 i‡(
u
->
ˇchóbÀ
 =0 && 
r
->
ˇche
) {

2249 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2254 
p
 = 
u
->
pùe
;

2256 
p
->
ouçut_fûãr
 = (
ngx_evít_pùe_ouçut_fûãr_±
Ë
ngx_hâp_ouçut_fûãr
;

2257 
p
->
ouçut_˘x
 = 
r
;

2258 
p
->
èg
 = 
u
->
ouçut
.tag;

2259 
p
->
bufs
 = 
u
->
c⁄f
->bufs;

2260 
p
->
busy_size
 = 
u
->
c⁄f
->
busy_buf„rs_size
;

2261 
p
->
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2262 
p
->
down°ªam
 = 
c
;

2263 
p
->
poﬁ
 = 
r
->pool;

2264 
p
->
log
 = 
c
->log;

2266 
p
->
ˇchóbÀ
 = 
u
->ˇchóbÀ || u->
°‹e
;

2268 
p
->
ãmp_fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2269 i‡(
p
->
ãmp_fûe
 =
NULL
) {

2270 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2274 
p
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2275 
p
->
ãmp_fûe
->
fûe
.
log
 = 
c
->log;

2276 
p
->
ãmp_fûe
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

2277 
p
->
ãmp_fûe
->
poﬁ
 = 
r
->pool;

2279 i‡(
p
->
ˇchóbÀ
) {

2280 
p
->
ãmp_fûe
->
≥rsi°ít
 = 1;

2283 
p
->
ãmp_fûe
->
log_Àvñ
 = 
NGX_LOG_WARN
;

2284 
p
->
ãmp_fûe
->
w¨n
 = "an upstreamÑesponse is buffered "

2288 
p
->
max_ãmp_fûe_size
 = 
u
->
c⁄f
->max_temp_file_size;

2289 
p
->
ãmp_fûe_wrôe_size
 = 
u
->
c⁄f
->temp_file_write_size;

2291 
p
->
¥îód_bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2292 i‡(
p
->
¥îód_bufs
 =
NULL
) {

2293 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2297 
p
->
¥îód_bufs
->
buf
 = &
u
->
buf„r
;

2298 
p
->
¥îód_bufs
->
√xt
 = 
NULL
;

2299 
u
->
buf„r
.
ªcy˛ed
 = 1;

2301 
p
->
¥îód_size
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2303 i‡(
u
->
ˇchóbÀ
) {

2305 
p
->
buf_to_fûe
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2306 i‡(
p
->
buf_to_fûe
 =
NULL
) {

2307 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2311 
p
->
buf_to_fûe
->
°¨t
 = 
u
->
buf„r
.start;

2312 
p
->
buf_to_fûe
->
pos
 = 
u
->
buf„r
.
°¨t
;

2313 
p
->
buf_to_fûe
->
œ°
 = 
u
->
buf„r
.
pos
;

2314 
p
->
buf_to_fûe
->
ãmp‹¨y
 = 1;

2317 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

2319 
p
->
sögÀ_buf
 = 1;

2323 
p
->
‰ì_bufs
 = 1;

2329 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2331 i‡(
u
->
c⁄f
->
cy˛ic_ãmp_fûe
) {

2339 
p
->
cy˛ic_ãmp_fûe
 = 1;

2340 
c
->
£ndfûe
 = 0;

2343 
p
->
cy˛ic_ãmp_fûe
 = 0;

2346 
p
->
ªad_timeout
 = 
u
->
c⁄f
->read_timeout;

2347 
p
->
£nd_timeout
 = 
˛cf
->send_timeout;

2348 
p
->
£nd_low©
 = 
˛cf
->send_lowat;

2350 
p
->
Àngth
 = -1;

2352 i‡(
u
->
öput_fûãr_öô


2353 && 
u
->
	`öput_fûãr_öô
(
p
->
öput_˘x
Ë!
NGX_OK
)

2355 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2359 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
;

2360 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
;

2362 
	`ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
r
, 
u
);

2363 
	}
}

2367 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2369 
ngx_evít_t
 *
wev
;

2370 
ngx_c⁄√˘i⁄_t
 *
c
;

2371 
ngx_hâp_up°ªam_t
 *
u
;

2373 
c
 = 
r
->
c⁄√˘i⁄
;

2374 
u
 = 
r
->
up°ªam
;

2375 
wev
 = 
c
->
wrôe
;

2377 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2380 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

2382 i‡(
wev
->
timedout
) {

2383 
c
->
timedout
 = 1;

2384 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2385 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2389 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 1);

2390 
	}
}

2394 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2395 
ngx_hâp_up°ªam_t
 *
u
)

2397 
ngx_c⁄√˘i⁄_t
 *
c
;

2399 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2401 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2404 
c
->
log
->
a˘i⁄
 = "reading upstream";

2406 i‡(
c
->
ªad
->
timedout
) {

2407 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2408 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2412 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 0);

2413 
	}
}

2417 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

2418 
ngx_uöt_t
 
do_wrôe
)

2420 
size_t
 
size
;

2421 
ssize_t
 
n
;

2422 
ngx_buf_t
 *
b
;

2423 
ngx_öt_t
 
rc
;

2424 
ngx_c⁄√˘i⁄_t
 *
down°ªam
, *
up°ªam
;

2425 
ngx_hâp_up°ªam_t
 *
u
;

2426 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2428 
u
 = 
r
->
up°ªam
;

2429 
down°ªam
 = 
r
->
c⁄√˘i⁄
;

2430 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2432 
b
 = &
u
->
buf„r
;

2434 
do_wrôe
 = do_wrôê|| 
u
->
Àngth
 == 0;

2438 i‡(
do_wrôe
) {

2440 i‡(
u
->
out_bufs
 || u->
busy_bufs
) {

2441 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
u
->
out_bufs
);

2443 i‡(
rc
 =
NGX_ERROR
) {

2444 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2448 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
u
->
‰ì_bufs
, &u->
busy_bufs
,

2449 &
u
->
out_bufs
, u->
ouçut
.
èg
);

2452 i‡(
u
->
busy_bufs
 =
NULL
) {

2454 i‡(
u
->
Àngth
 == 0

2455 || 
up°ªam
->
ªad
->
eof


2456 || 
up°ªam
->
ªad
->
îr‹
)

2458 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2462 
b
->
pos
 = b->
°¨t
;

2463 
b
->
œ°
 = b->
°¨t
;

2467 
size
 = 
b
->
íd
 - b->
œ°
;

2469 i‡(
size
 && 
up°ªam
->
ªad
->
ªady
) {

2471 
n
 = 
up°ªam
->
	`ªcv
(up°ªam, 
b
->
œ°
, 
size
);

2473 i‡(
n
 =
NGX_AGAIN
) {

2477 i‡(
n
 > 0) {

2478 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2480 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2481 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2486 
do_wrôe
 = 1;

2494 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2496 i‡(
down°ªam
->
d©a
 =
r
) {

2497 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

2498 !
NGX_OK
)

2500 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2505 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

2506 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

2508 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

2509 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

2512 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2513 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2517 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

2518 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

2520 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

2521 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

2523 
	}
}

2526 
ngx_öt_t


2527 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
)

2529  
NGX_OK
;

2530 
	}
}

2533 
ngx_öt_t


2534 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2536 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2538 
ngx_buf_t
 *
b
;

2539 
ngx_chaö_t
 *
˛
, **
Œ
;

2540 
ngx_hâp_up°ªam_t
 *
u
;

2542 
u
 = 
r
->
up°ªam
;

2544 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2545 
Œ
 = &
˛
->
√xt
;

2548 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2549 i‡(
˛
 =
NULL
) {

2550  
NGX_ERROR
;

2553 *
Œ
 = 
˛
;

2555 
˛
->
buf
->
Êush
 = 1;

2556 
˛
->
buf
->
mem‹y
 = 1;

2558 
b
 = &
u
->
buf„r
;

2560 
˛
->
buf
->
pos
 = 
b
->
œ°
;

2561 
b
->
œ°
 +
byãs
;

2562 
˛
->
buf
->
œ°
 = 
b
->last;

2563 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

2565 i‡(
u
->
Àngth
 == -1) {

2566  
NGX_OK
;

2569 
u
->
Àngth
 -
byãs
;

2571  
NGX_OK
;

2572 
	}
}

2576 
	$ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2578 
ngx_evít_t
 *
wev
;

2579 
ngx_c⁄√˘i⁄_t
 *
c
;

2580 
ngx_evít_pùe_t
 *
p
;

2581 
ngx_hâp_up°ªam_t
 *
u
;

2583 
c
 = 
r
->
c⁄√˘i⁄
;

2584 
u
 = 
r
->
up°ªam
;

2585 
p
 = 
u
->
pùe
;

2586 
wev
 = 
c
->
wrôe
;

2588 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2591 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

2593 i‡(
wev
->
timedout
) {

2595 i‡(
wev
->
dñayed
) {

2597 
wev
->
timedout
 = 0;

2598 
wev
->
dñayed
 = 0;

2600 i‡(!
wev
->
ªady
) {

2601 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

2603 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

2604 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2610 i‡(
	`ngx_evít_pùe
(
p
, 
wev
->
wrôe
Ë=
NGX_ABORT
) {

2611 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2616 
p
->
down°ªam_îr‹
 = 1;

2617 
c
->
timedout
 = 1;

2618 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2623 i‡(
wev
->
dñayed
) {

2625 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2628 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

2629 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2635 i‡(
	`ngx_evít_pùe
(
p
, 1Ë=
NGX_ABORT
) {

2636 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2641 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

2642 
	}
}

2646 
	$ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2647 
ngx_hâp_up°ªam_t
 *
u
)

2649 
ngx_c⁄√˘i⁄_t
 *
c
;

2651 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2653 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2656 
c
->
log
->
a˘i⁄
 = "reading upstream";

2658 i‡(
c
->
ªad
->
timedout
) {

2659 
u
->
pùe
->
up°ªam_îr‹
 = 1;

2660 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2663 i‡(
	`ngx_evít_pùe
(
u
->
pùe
, 0Ë=
NGX_ABORT
) {

2664 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2669 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

2670 
	}
}

2674 
	$ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2676 
ngx_ãmp_fûe_t
 *
tf
;

2677 
ngx_evít_pùe_t
 *
p
;

2678 
ngx_hâp_up°ªam_t
 *
u
;

2680 
u
 = 
r
->
up°ªam
;

2681 
p
 = 
u
->
pùe
;

2683 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

2685 i‡(
u
->
°‹e
) {

2687 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_d⁄e
) {

2689 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

2691 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


2692 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

2693 || (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
tf
->
off£t
)))

2695 
	`ngx_hâp_up°ªam_°‹e
(
r
, 
u
);

2696 
u
->
°‹e
 = 0;

2701 #i‡(
NGX_HTTP_CACHE
)

2703 i‡(
u
->
ˇchóbÀ
) {

2705 i‡(
p
->
up°ªam_d⁄e
) {

2706 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
u
->
pùe
->
ãmp_fûe
);

2708 } i‡(
p
->
up°ªam_eof
) {

2710 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

2712 i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

2713 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n


2714 =
tf
->
off£t
 - (
off_t
Ë
r
->
ˇche
->
body_°¨t
)

2716 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
tf
);

2719 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
tf
);

2722 } i‡(
p
->
up°ªam_îr‹
) {

2723 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2729 i‡(
p
->
up°ªam_d⁄e
 ||Ö->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
) {

2730 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2731 "hâ∞up°ªamÉxô: %p", 
p
->
out
);

2733 
	`ngx_hâp_busy_u∆ock
(
u
->
c⁄f
->
busy_lock
, &u->busy_lock);

2735 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2740 i‡(
p
->
down°ªam_îr‹
) {

2741 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2744 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
 && u->
≥î
.
c⁄√˘i⁄
) {

2745 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2748 
	}
}

2752 
	$ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2754 
size_t
 
roŸ
;

2755 
time_t
 
lm
;

2756 
ngx_°r_t
 
∑th
;

2757 
ngx_ãmp_fûe_t
 *
tf
;

2758 
ngx_ext_ª«me_fûe_t
 
ext
;

2760 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

2762 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

2766 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2767 i‡(
tf
 =
NULL
) {

2771 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2772 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

2773 
tf
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

2774 
tf
->
poﬁ
 = 
r
->pool;

2775 
tf
->
≥rsi°ít
 = 1;

2777 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

2778 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

2779 !
NGX_OK
)

2784 
u
->
pùe
->
ãmp_fûe
 = 
tf
;

2787 
ext
.
ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

2788 
ext
.
∑th_ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

2789 
ext
.
time
 = -1;

2790 
ext
.
¸óã_∑th
 = 1;

2791 
ext
.
dñëe_fûe
 = 1;

2792 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

2794 i‡(
u
->
hódîs_ö
.
œ°_modifõd
) {

2796 
lm
 = 
	`ngx_hâp_∑r£_time
(
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
d©a
,

2797 
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
Àn
);

2799 i‡(
lm
 !
NGX_ERROR
) {

2800 
ext
.
time
 = 
lm
;

2801 
ext
.
fd
 = 
tf
->
fûe
.fd;

2805 i‡(
u
->
c⁄f
->
°‹e_Àngths
 =
NULL
) {

2807 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

2810 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
u
->
c⁄f
->
°‹e_Àngths
->
ñts
, 0,

2811 
u
->
c⁄f
->
°‹e_vÆues
->
ñts
)

2812 =
NULL
)

2818 
∑th
.
Àn
--;

2820 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2822 
tf
->
fûe
.
«me
.
d©a
, 
∑th
.data);

2824 (Ë
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
∑th
, &
ext
);

2825 
	}
}

2829 
	$ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2831 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2833 
	}
}

2837 
	$ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

2838 
ngx_uöt_t
 
·_ty≥
)

2840 
ngx_uöt_t
 
°©us
, 
°©e
;

2842 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2843 "hâ∞√xàup°ªam, %xi", 
·_ty≥
);

2846 
	`ngx_hâp_busy_u∆ock
(
u
->
c⁄f
->
busy_lock
, &u->busy_lock);

2849 i‡(
u
->
≥î
.
sockaddr
) {

2851 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_404
) {

2852 
°©e
 = 
NGX_PEER_NEXT
;

2854 
°©e
 = 
NGX_PEER_FAILED
;

2857 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
°©e
);

2858 
u
->
≥î
.
sockaddr
 = 
NULL
;

2861 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_TIMEOUT
) {

2862 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ETIMEDOUT
,

2866 i‡(
u
->
≥î
.
ˇched
 && 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2867 
°©us
 = 0;

2871 
u
->
≥î
.
åõs
++;

2874 
·_ty≥
) {

2876 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
:

2877 
°©us
 = 
NGX_HTTP_GATEWAY_TIME_OUT
;

2880 
NGX_HTTP_UPSTREAM_FT_HTTP_500
:

2881 
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

2884 
NGX_HTTP_UPSTREAM_FT_HTTP_404
:

2885 
°©us
 = 
NGX_HTTP_NOT_FOUND
;

2894 
°©us
 = 
NGX_HTTP_BAD_GATEWAY
;

2898 i‡(
r
->
c⁄√˘i⁄
->
îr‹
) {

2899 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2900 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

2904 i‡(
°©us
) {

2905 
u
->
°©e
->
°©us
 = status;

2907 i‡(
u
->
≥î
.
åõs
 =0 || !(u->
c⁄f
->
√xt_up°ªam
 & 
·_ty≥
)) {

2909 #i‡(
NGX_HTTP_CACHE
)

2911 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


2912 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
·_ty≥
))

2914 
ngx_öt_t
 
rc
;

2916 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

2918 i‡(
rc
 =
NGX_OK
) {

2919 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

2920 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

2923 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2928 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

2933 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

2934 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2936 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

2937 #i‡(
NGX_HTTP_SSL
)

2939 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

2940 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

2941 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_£nd_shutdown
 = 1;

2943 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

2947 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

2948 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

2951 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

2952 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

2956 i‡(
u
->
c⁄f
->
busy_lock
 && !u->
busy_locked
) {

2957 
	`ngx_hâp_up°ªam_busy_lock
(
p
);

2962 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

2963 
	}
}

2967 
	$ngx_hâp_up°ªam_˛ónup
(*
d©a
)

2969 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2971 
ngx_hâp_up°ªam_t
 *
u
;

2973 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2974 "˛ónu∞hâ∞up°ªamÑeque°: \"%V\"", &
r
->
uri
);

2976 
u
 = 
r
->
up°ªam
;

2978 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

2979 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

2980 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

2983 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DONE
);

2984 
	}
}

2988 
	$ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

2989 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
)

2991 
ngx_time_t
 *
ç
;

2993 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2994 "föÆizêhâ∞up°ªamÑeque°: %i", 
rc
);

2996 i‡(
u
->
˛ónup
) {

2997 *
u
->
˛ónup
 = 
NULL
;

2998 
u
->
˛ónup
 = 
NULL
;

3001 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

3002 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

3003 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

3006 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

3007 
ç
 = 
	`ngx_timeofday
();

3008 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

3009 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

3011 i‡(
u
->
pùe
) {

3012 
u
->
°©e
->
ª•⁄£_Àngth
 = u->
pùe
->
ªad_Àngth
;

3016 
u
->
	`föÆize_ªque°
(
r
, 
rc
);

3018 i‡(
u
->
≥î
.
‰ì
 && u->≥î.
sockaddr
) {

3019 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 0);

3020 
u
->
≥î
.
sockaddr
 = 
NULL
;

3023 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3025 #i‡(
NGX_HTTP_SSL
)

3029 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

3037 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

3039 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

3043 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3045 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

3047 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

3048 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

3051 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

3054 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

3056 i‡(
u
->
pùe
 && u->pùe->
ãmp_fûe
) {

3057 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3059 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
);

3062 i‡(
u
->
°‹e
 && u->
pùe
 && u->pùe->
ãmp_fûe


3063 && 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
)

3065 i‡(
	`ngx_dñëe_fûe
(
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
)

3066 =
NGX_FILE_ERROR
)

3068 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

3069 
ngx_dñëe_fûe_n
 " \"%s\" failed",

3070 
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
);

3074 #i‡(
NGX_HTTP_CACHE
)

3076 i‡(
r
->
ˇche
) {

3078 i‡(
u
->
ˇchóbÀ
) {

3080 i‡(
rc
 =
NGX_HTTP_BAD_GATEWAY
 ||Ñ¯=
NGX_HTTP_GATEWAY_TIME_OUT
) {

3081 
time_t
 
vÆid
;

3083 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
rc
);

3085 i‡(
vÆid
) {

3086 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

3087 
r
->
ˇche
->
îr‹
 = 
rc
;

3092 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

3097 i‡(
u
->
hódî_£¡


3098 && 
rc
 !
NGX_HTTP_REQUEST_TIME_OUT


3099 && (
rc
 =
NGX_ERROR
 ||Ñ¯>
NGX_HTTP_SPECIAL_RESPONSE
))

3101 
rc
 = 0;

3104 i‡(
rc
 =
NGX_DECLINED
) {

3108 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÅo client";

3110 i‡(
rc
 == 0

3111 && !
r
->
hódî_⁄ly


3112 #i‡(
NGX_HTTP_CACHE
)

3113 && !
r
->
ˇched


3117 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

3120 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

3121 
	}
}

3124 
ngx_öt_t


3125 
	$ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3126 
ngx_uöt_t
 
off£t
)

3128 
ngx_èbÀ_ñt_t
 **
ph
;

3130 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
up°ªam
->
hódîs_ö
 + 
off£t
);

3132 i‡(*
ph
 =
NULL
) {

3133 *
ph
 = 
h
;

3136  
NGX_OK
;

3137 
	}
}

3140 
ngx_öt_t


3141 
	$ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3142 
ngx_uöt_t
 
off£t
)

3144  
NGX_OK
;

3145 
	}
}

3148 
ngx_öt_t


3149 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

3150 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3152 
ngx_hâp_up°ªam_t
 *
u
;

3154 
u
 = 
r
->
up°ªam
;

3156 
u
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
h
;

3157 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3159  
NGX_OK
;

3160 
	}
}

3163 
ngx_öt_t


3164 
	$ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3165 
ngx_uöt_t
 
off£t
)

3167 #i‡(
NGX_HTTP_CACHE
)

3168 
ngx_hâp_up°ªam_t
 *
u
;

3170 
u
 = 
r
->
up°ªam
;

3172 i‡(!(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
)) {

3173 
u
->
ˇchóbÀ
 = 0;

3177  
NGX_OK
;

3178 
	}
}

3181 
ngx_öt_t


3182 
	$ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

3183 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3185 
ngx_¨øy_t
 *
∑
;

3186 
ngx_èbÀ_ñt_t
 **
ph
;

3187 
ngx_hâp_up°ªam_t
 *
u
;

3189 
u
 = 
r
->
up°ªam
;

3190 
∑
 = &
u
->
hódîs_ö
.
ˇche_c⁄åﬁ
;

3192 i‡(
∑
->
ñts
 =
NULL
) {

3193 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3195  
NGX_ERROR
;

3199 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3200 i‡(
ph
 =
NULL
) {

3201  
NGX_ERROR
;

3204 *
ph
 = 
h
;

3206 #i‡(
NGX_HTTP_CACHE
)

3208 
u_ch¨
 *
p
, *
œ°
;

3209 
ngx_öt_t
 
n
;

3211 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
) {

3212  
NGX_OK
;

3215 i‡(
r
->
ˇche
 =
NULL
) {

3216  
NGX_OK
;

3219 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

3220  
NGX_OK
;

3223 
p
 = 
h
->
vÆue
.
d©a
;

3224 
œ°
 = 
p
 + 
h
->
vÆue
.
Àn
;

3226 i‡(
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-ˇche", 8 - 1Ë!
NULL


3227 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-°‹e", 8 - 1Ë!
NULL


3228 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"¥iv©e", 7 - 1Ë!
NULL
)

3230 
u
->
ˇchóbÀ
 = 0;

3231  
NGX_OK
;

3234 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
, (
u_ch¨
 *) "max-age=", 8 - 1);

3236 i‡(
p
 =
NULL
) {

3237  
NGX_OK
;

3240 
n
 = 0;

3242 
p
 +8;Ö < 
œ°
;Ö++) {

3243 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

3247 i‡(*
p
 >= '0' && *p <= '9') {

3248 
n
 =Ç * 10 + *
p
 - '0';

3252 
u
->
ˇchóbÀ
 = 0;

3253  
NGX_OK
;

3256 i‡(
n
 == 0) {

3257 
u
->
ˇchóbÀ
 = 0;

3258  
NGX_OK
;

3261 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3265  
NGX_OK
;

3266 
	}
}

3269 
ngx_öt_t


3270 
	$ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3271 
ngx_uöt_t
 
off£t
)

3273 
ngx_hâp_up°ªam_t
 *
u
;

3275 
u
 = 
r
->
up°ªam
;

3276 
u
->
hódîs_ö
.
expúes
 = 
h
;

3278 #i‡(
NGX_HTTP_CACHE
)

3280 
time_t
 
expúes
;

3282 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
) {

3283  
NGX_OK
;

3286 i‡(
r
->
ˇche
 =
NULL
) {

3287  
NGX_OK
;

3290 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

3291  
NGX_OK
;

3294 
expúes
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3296 i‡(
expúes
 =
NGX_ERROR
 ||Éxpúe†< 
	`ngx_time
()) {

3297 
u
->
ˇchóbÀ
 = 0;

3298  
NGX_OK
;

3301 
r
->
ˇche
->
vÆid_£c
 = 
expúes
;

3305  
NGX_OK
;

3306 
	}
}

3309 
ngx_öt_t


3310 
	$ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

3311 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3313 
ngx_hâp_up°ªam_t
 *
u
;

3315 
u
 = 
r
->
up°ªam
;

3316 
u
->
hódîs_ö
.
x_ac˚l_expúes
 = 
h
;

3318 #i‡(
NGX_HTTP_CACHE
)

3320 
u_ch¨
 *
p
;

3321 
size_t
 
Àn
;

3322 
ngx_öt_t
 
n
;

3324 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
) {

3325  
NGX_OK
;

3328 i‡(
r
->
ˇche
 =
NULL
) {

3329  
NGX_OK
;

3332 
Àn
 = 
h
->
vÆue
.len;

3333 
p
 = 
h
->
vÆue
.
d©a
;

3335 i‡(
p
[0] != '@') {

3336 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3338 
n
) {

3340 
u
->
ˇchóbÀ
 = 0;

3343 
NGX_ERROR
:

3344  
NGX_OK
;

3347 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3348  
NGX_OK
;

3352 
p
++;

3353 
Àn
--;

3355 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3357 i‡(
n
 !
NGX_ERROR
) {

3358 
r
->
ˇche
->
vÆid_£c
 = 
n
;

3363  
NGX_OK
;

3364 
	}
}

3367 
ngx_öt_t


3368 
	$ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3369 
ngx_uöt_t
 
off£t
)

3371 
ngx_öt_t
 
n
;

3372 
ngx_hâp_up°ªam_t
 *
u
;

3374 
u
 = 
r
->
up°ªam
;

3375 
u
->
hódîs_ö
.
x_ac˚l_limô_øã
 = 
h
;

3377 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
) {

3378  
NGX_OK
;

3381 
n
 = 
	`ngx_©oi
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3383 i‡(
n
 !
NGX_ERROR
) {

3384 
r
->
limô_øã
 = (
size_t
Ë
n
;

3387  
NGX_OK
;

3388 
	}
}

3391 
ngx_öt_t


3392 
	$ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3393 
ngx_uöt_t
 
off£t
)

3395 
u_ch¨
 
c0
, 
c1
, 
c2
;

3396 
ngx_hâp_up°ªam_t
 *
u
;

3398 
u
 = 
r
->
up°ªam
;

3400 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
) {

3401  
NGX_OK
;

3404 i‡(
u
->
c⁄f
->
ch™ge_buf„rög
) {

3406 i‡(
h
->
vÆue
.
Àn
 == 2) {

3407 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3408 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3410 i‡(
c0
 ='n' && 
c1
 == 'o') {

3411 
u
->
buf„rög
 = 0;

3414 } i‡(
h
->
vÆue
.
Àn
 == 3) {

3415 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3416 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3417 
c2
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[2]);

3419 i‡(
c0
 ='y' && 
c1
 ='e' && 
c2
 == 's') {

3420 
u
->
buf„rög
 = 1;

3425  
NGX_OK
;

3426 
	}
}

3429 
ngx_öt_t


3430 
	$ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3431 
ngx_uöt_t
 
off£t
)

3433 i‡(
r
->
up°ªam
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
) {

3434  
NGX_OK
;

3437 
r
->
hódîs_out
.
ovîride_ch¨£t
 = &
h
->
vÆue
;

3439  
NGX_OK
;

3440 
	}
}

3443 
ngx_öt_t


3444 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3445 
ngx_uöt_t
 
off£t
)

3447 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄
 = 
h
;

3449 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

3450 (
u_ch¨
 *) "close", 5 - 1)

3451 !
NULL
)

3453 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

3456  
NGX_OK
;

3457 
	}
}

3460 
ngx_öt_t


3461 
	$ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

3462 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3464 
r
->
up°ªam
->
hódîs_ö
.
å™s„r_ícodög
 = 
h
;

3466 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

3467 (
u_ch¨
 *) "chunked", 7 - 1)

3468 !
NULL
)

3470 
r
->
up°ªam
->
hódîs_ö
.
chunked
 = 1;

3473  
NGX_OK
;

3474 
	}
}

3477 
ngx_öt_t


3478 
	$ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3479 
ngx_uöt_t
 
off£t
)

3481 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3483 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3484 i‡(
ho
 =
NULL
) {

3485  
NGX_ERROR
;

3488 *
ho
 = *
h
;

3490 i‡(
off£t
) {

3491 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3492 *
ph
 = 
ho
;

3495  
NGX_OK
;

3496 
	}
}

3499 
ngx_öt_t


3500 
	$ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

3501 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3503 
ngx_¨øy_t
 *
∑
;

3504 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3506 
∑
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3508 i‡(
∑
->
ñts
 =
NULL
) {

3509 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3511  
NGX_ERROR
;

3515 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3516 i‡(
ph
 =
NULL
) {

3517  
NGX_ERROR
;

3520 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3521 i‡(
ho
 =
NULL
) {

3522  
NGX_ERROR
;

3525 *
ho
 = *
h
;

3526 *
ph
 = 
ho
;

3528  
NGX_OK
;

3529 
	}
}

3532 
ngx_öt_t


3533 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3534 
ngx_uöt_t
 
off£t
)

3536 
u_ch¨
 *
p
, *
œ°
;

3538 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
h
->
vÆue
.
Àn
;

3539 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
h
->
vÆue
;

3540 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

3542 
p
 = 
h
->
vÆue
.
d©a
; *p;Ö++) {

3544 i‡(*
p
 != ';') {

3548 
œ°
 = 
p
;

3550 *++
p
 == ' ') { }

3552 i‡(*
p
 == '\0') {

3553  
NGX_OK
;

3556 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "charset=", 8) != 0) {

3560 
p
 += 8;

3562 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
œ°
 - 
h
->
vÆue
.
d©a
;

3564 i‡(*
p
 == '"') {

3565 
p
++;

3568 
œ°
 = 
h
->
vÆue
.
d©a
 + h->vÆue.
Àn
;

3570 i‡(*(
œ°
 - 1) == '"') {

3571 
œ°
--;

3574 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
œ°
 - 
p
;

3575 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
p
;

3577  
NGX_OK
;

3580  
NGX_OK
;

3581 
	}
}

3584 
ngx_öt_t


3585 
	$ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3586 
ngx_uöt_t
 
off£t
)

3588 
ngx_èbÀ_ñt_t
 *
ho
;

3590 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3591 i‡(
ho
 =
NULL
) {

3592  
NGX_ERROR
;

3595 *
ho
 = *
h
;

3597 
r
->
hódîs_out
.
œ°_modifõd
 = 
ho
;

3599 #i‡(
NGX_HTTP_CACHE
)

3601 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

3602 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
,

3603 
h
->
vÆue
.
Àn
);

3608  
NGX_OK
;

3609 
	}
}

3612 
ngx_öt_t


3613 
	$ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3614 
ngx_uöt_t
 
off£t
)

3616 
ngx_öt_t
 
rc
;

3617 
ngx_èbÀ_ñt_t
 *
ho
;

3619 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3620 i‡(
ho
 =
NULL
) {

3621  
NGX_ERROR
;

3624 *
ho
 = *
h
;

3626 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

3627 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 0);

3629 i‡(
rc
 =
NGX_DECLINED
) {

3630  
NGX_OK
;

3633 i‡(
rc
 =
NGX_OK
) {

3634 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

3636 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3637 "ªwrôã¿loˇti⁄: \"%V\"", &
ho
->
vÆue
);

3640  
rc
;

3643 i‡(
ho
->
vÆue
.
d©a
[0] != '/') {

3644 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

3652  
NGX_OK
;

3653 
	}
}

3656 
ngx_öt_t


3657 
	$ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3658 
ngx_uöt_t
 
off£t
)

3660 
u_ch¨
 *
p
;

3661 
ngx_öt_t
 
rc
;

3662 
ngx_èbÀ_ñt_t
 *
ho
;

3664 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3665 i‡(
ho
 =
NULL
) {

3666  
NGX_ERROR
;

3669 *
ho
 = *
h
;

3671 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

3673 
p
 = 
	`ngx_°rˇ£°∫
(
ho
->
vÆue
.
d©a
, "url=", 4 - 1);

3675 i‡(
p
) {

3676 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 
p
 + 4 - ho->
vÆue
.
d©a
);

3679  
NGX_OK
;

3682 i‡(
rc
 =
NGX_DECLINED
) {

3683  
NGX_OK
;

3686 i‡(
rc
 =
NGX_OK
) {

3687 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

3689 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3690 "ªwrôã¿ª‰esh: \"%V\"", &
ho
->
vÆue
);

3693  
rc
;

3696 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

3698  
NGX_OK
;

3699 
	}
}

3702 
ngx_öt_t


3703 
	$ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3704 
ngx_uöt_t
 
off£t
)

3706 
ngx_öt_t
 
rc
;

3707 
ngx_èbÀ_ñt_t
 *
ho
;

3709 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3710 i‡(
ho
 =
NULL
) {

3711  
NGX_ERROR
;

3714 *
ho
 = *
h
;

3716 i‡(
r
->
up°ªam
->
ªwrôe_cookõ
) {

3717 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_cookõ
‘, 
ho
);

3719 i‡(
rc
 =
NGX_DECLINED
) {

3720  
NGX_OK
;

3723 #i‡(
NGX_DEBUG
)

3724 i‡(
rc
 =
NGX_OK
) {

3725 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3726 "ªwrôã¿cookõ: \"%V\"", &
ho
->
vÆue
);

3730  
rc
;

3733  
NGX_OK
;

3734 
	}
}

3737 
ngx_öt_t


3738 
	$ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

3739 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3741 
ngx_èbÀ_ñt_t
 *
ho
;

3743 #i‡(
NGX_HTTP_CACHE
)

3745 i‡(
r
->
ˇched
) {

3746 
r
->
Ælow_ønges
 = 1;

3747  
NGX_OK
;

3753 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3754 i‡(
ho
 =
NULL
) {

3755  
NGX_ERROR
;

3758 *
ho
 = *
h
;

3760 
r
->
hódîs_out
.
ac˚±_ønges
 = 
ho
;

3762  
NGX_OK
;

3763 
	}
}

3766 #i‡(
NGX_HTTP_GZIP
)

3768 
ngx_öt_t


3769 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

3770 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3772 
ngx_èbÀ_ñt_t
 *
ho
;

3774 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3775 i‡(
ho
 =
NULL
) {

3776  
NGX_ERROR
;

3779 *
ho
 = *
h
;

3781 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
ho
;

3783  
NGX_OK
;

3784 
	}
}

3789 
ngx_öt_t


3790 
	$ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

3792 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

3794 
v
 = 
ngx_hâp_up°ªam_v¨s
; v->
«me
.
Àn
; v++) {

3795 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

3796 i‡(
v¨
 =
NULL
) {

3797  
NGX_ERROR
;

3800 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

3801 
v¨
->
d©a
 = 
v
->data;

3804  
NGX_OK
;

3805 
	}
}

3808 
ngx_öt_t


3809 
	$ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3810 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3812 
u_ch¨
 *
p
;

3813 
size_t
 
Àn
;

3814 
ngx_uöt_t
 
i
;

3815 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

3817 
v
->
vÆid
 = 1;

3818 
v
->
no_ˇchóbÀ
 = 0;

3819 
v
->
nŸ_found
 = 0;

3821 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

3822 
v
->
nŸ_found
 = 1;

3823  
NGX_OK
;

3826 
Àn
 = 0;

3827 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

3829 
i
 = 0; i < 
r
->
up°ªam_°©es
->
√…s
; i++) {

3830 i‡(
°©e
[
i
].
≥î
) {

3831 
Àn
 +
°©e
[
i
].
≥î
->len + 2;

3834 
Àn
 += 3;

3838 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

3839 i‡(
p
 =
NULL
) {

3840  
NGX_ERROR
;

3843 
v
->
d©a
 = 
p
;

3845 
i
 = 0;

3848 i‡(
°©e
[
i
].
≥î
) {

3849 
p
 = 
	`ngx_˝ymem
’, 
°©e
[
i
].
≥î
->
d©a
, sèã[i].≥î->
Àn
);

3852 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3856 i‡(
°©e
[
i
].
≥î
) {

3857 *
p
++ = ',';

3858 *
p
++ = ' ';

3861 *
p
++ = ' ';

3862 *
p
++ = ':';

3863 *
p
++ = ' ';

3865 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3873 
v
->
Àn
 = 
p
 - v->
d©a
;

3875  
NGX_OK
;

3876 
	}
}

3879 
ngx_öt_t


3880 
	$ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3881 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3883 
u_ch¨
 *
p
;

3884 
size_t
 
Àn
;

3885 
ngx_uöt_t
 
i
;

3886 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

3888 
v
->
vÆid
 = 1;

3889 
v
->
no_ˇchóbÀ
 = 0;

3890 
v
->
nŸ_found
 = 0;

3892 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

3893 
v
->
nŸ_found
 = 1;

3894  
NGX_OK
;

3897 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (3 + 2);

3899 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

3900 i‡(
p
 =
NULL
) {

3901  
NGX_ERROR
;

3904 
v
->
d©a
 = 
p
;

3906 
i
 = 0;

3907 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

3910 i‡(
°©e
[
i
].
°©us
) {

3911 
p
 = 
	`ngx_•rötf
’, "%ui", 
°©e
[
i
].
°©us
);

3914 *
p
++ = '-';

3917 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3921 i‡(
°©e
[
i
].
≥î
) {

3922 *
p
++ = ',';

3923 *
p
++ = ' ';

3926 *
p
++ = ' ';

3927 *
p
++ = ':';

3928 *
p
++ = ' ';

3930 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3938 
v
->
Àn
 = 
p
 - v->
d©a
;

3940  
NGX_OK
;

3941 
	}
}

3944 
ngx_öt_t


3945 
	$ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3946 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3948 
u_ch¨
 *
p
;

3949 
size_t
 
Àn
;

3950 
ngx_uöt_t
 
i
;

3951 
ngx_m£c_öt_t
 
ms
;

3952 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

3954 
v
->
vÆid
 = 1;

3955 
v
->
no_ˇchóbÀ
 = 0;

3956 
v
->
nŸ_found
 = 0;

3958 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

3959 
v
->
nŸ_found
 = 1;

3960  
NGX_OK
;

3963 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_TIME_T_LEN
 + 4 + 2);

3965 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

3966 i‡(
p
 =
NULL
) {

3967  
NGX_ERROR
;

3970 
v
->
d©a
 = 
p
;

3972 
i
 = 0;

3973 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

3976 i‡(
°©e
[
i
].
°©us
) {

3977 
ms
 = (
ngx_m£c_öt_t
)

3978 (
°©e
[
i
].
ª•⁄£_£c
 * 1000 + sèã[i].
ª•⁄£_m£c
);

3979 
ms
 = 
	`ngx_max
(ms, 0);

3980 
p
 = 
	`ngx_•rötf
’, "%d.%03d", 
ms
 / 1000, ms % 1000);

3983 *
p
++ = '-';

3986 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

3990 i‡(
°©e
[
i
].
≥î
) {

3991 *
p
++ = ',';

3992 *
p
++ = ' ';

3995 *
p
++ = ' ';

3996 *
p
++ = ':';

3997 *
p
++ = ' ';

3999 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4007 
v
->
Àn
 = 
p
 - v->
d©a
;

4009  
NGX_OK
;

4010 
	}
}

4013 
ngx_öt_t


4014 
	$ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4015 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4017 
u_ch¨
 *
p
;

4018 
size_t
 
Àn
;

4019 
ngx_uöt_t
 
i
;

4020 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4022 
v
->
vÆid
 = 1;

4023 
v
->
no_ˇchóbÀ
 = 0;

4024 
v
->
nŸ_found
 = 0;

4026 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4027 
v
->
nŸ_found
 = 1;

4028  
NGX_OK
;

4031 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_OFF_T_LEN
 + 2);

4033 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4034 i‡(
p
 =
NULL
) {

4035  
NGX_ERROR
;

4038 
v
->
d©a
 = 
p
;

4040 
i
 = 0;

4041 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4044 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
ª•⁄£_Àngth
);

4046 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4050 i‡(
°©e
[
i
].
≥î
) {

4051 *
p
++ = ',';

4052 *
p
++ = ' ';

4055 *
p
++ = ' ';

4056 *
p
++ = ':';

4057 *
p
++ = ' ';

4059 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4067 
v
->
Àn
 = 
p
 - v->
d©a
;

4069  
NGX_OK
;

4070 
	}
}

4073 
ngx_öt_t


4074 
	$ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4075 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4077 i‡(
r
->
up°ªam
 =
NULL
) {

4078 
v
->
nŸ_found
 = 1;

4079  
NGX_OK
;

4082  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

4083 &
r
->
up°ªam
->
hódîs_ö
.
hódîs
.
∑π
,

4085 
	}
}

4088 #i‡(
NGX_HTTP_CACHE
)

4090 
ngx_öt_t


4091 
	$ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

4092 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4094 
ngx_uöt_t
 
n
;

4096 i‡(
r
->
up°ªam
 =
NULL
 ||Ñ->up°ªam->
ˇche_°©us
 == 0) {

4097 
v
->
nŸ_found
 = 1;

4098  
NGX_OK
;

4101 
n
 = 
r
->
up°ªam
->
ˇche_°©us
 - 1;

4103 
v
->
vÆid
 = 1;

4104 
v
->
no_ˇchóbÀ
 = 0;

4105 
v
->
nŸ_found
 = 0;

4106 
v
->
Àn
 = 
ngx_hâp_ˇche_°©us
[
n
].len;

4107 
v
->
d©a
 = 
ngx_hâp_ˇche_°©us
[
n
].data;

4109  
NGX_OK
;

4110 
	}
}

4116 
	$ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

4118 *
rv
;

4119 *
mc⁄f
;

4120 
ngx_°r_t
 *
vÆue
;

4121 
ngx_uæ_t
 
u
;

4122 
ngx_uöt_t
 
m
;

4123 
ngx_c⁄f_t
 
pcf
;

4124 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4125 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

4126 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

4128 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4130 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4131 
u
.
ho°
 = 
vÆue
[1];

4132 
u
.
no_ªsﬁve
 = 1;

4134 
uscf
 = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 
NGX_HTTP_UPSTREAM_CREATE


4135 |
NGX_HTTP_UPSTREAM_WEIGHT


4136 |
NGX_HTTP_UPSTREAM_MAX_FAILS


4137 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


4138 |
NGX_HTTP_UPSTREAM_DOWN


4139 |
NGX_HTTP_UPSTREAM_BACKUP
);

4140 i‡(
uscf
 =
NULL
) {

4141  
NGX_CONF_ERROR
;

4145 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4146 i‡(
˘x
 =
NULL
) {

4147  
NGX_CONF_ERROR
;

4150 
hâp_˘x
 = 
cf
->
˘x
;

4151 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

4155 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4156 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

4157  
NGX_CONF_ERROR
;

4160 
˘x
->
§v_c⁄f
[
ngx_hâp_up°ªam_moduÀ
.
˘x_ödex
] = 
uscf
;

4162 
uscf
->
§v_c⁄f
 = 
˘x
->srv_conf;

4167 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4168 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4169  
NGX_CONF_ERROR
;

4172 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

4173 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4177 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

4179 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

4180 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

4181 i‡(
mc⁄f
 =
NULL
) {

4182  
NGX_CONF_ERROR
;

4185 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4188 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4189 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4190 i‡(
mc⁄f
 =
NULL
) {

4191  
NGX_CONF_ERROR
;

4194 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4201 
pcf
 = *
cf
;

4202 
cf
->
˘x
 = ctx;

4203 
cf
->
cmd_ty≥
 = 
NGX_HTTP_UPS_CONF
;

4205 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4207 *
cf
 = 
pcf
;

4209 i‡(
rv
 !
NGX_CONF_OK
) {

4210  
rv
;

4213 i‡(
uscf
->
£rvîs
 =
NULL
) {

4214 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4216  
NGX_CONF_ERROR
;

4219  
rv
;

4220 
	}
}

4224 
	$ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4226 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
 = 
c⁄f
;

4228 
time_t
 
Áû_timeout
;

4229 
ngx_°r_t
 *
vÆue
, 
s
;

4230 
ngx_uæ_t
 
u
;

4231 
ngx_öt_t
 
weight
, 
max_Áûs
;

4232 
ngx_uöt_t
 
i
;

4233 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4235 i‡(
uscf
->
£rvîs
 =
NULL
) {

4236 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4237 (
ngx_hâp_up°ªam_£rvî_t
));

4238 i‡(
uscf
->
£rvîs
 =
NULL
) {

4239  
NGX_CONF_ERROR
;

4243 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4244 i‡(
us
 =
NULL
) {

4245  
NGX_CONF_ERROR
;

4248 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4250 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4252 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4254 
u
.
uæ
 = 
vÆue
[1];

4255 
u
.
deÁu…_p‹t
 = 80;

4257 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

4258 i‡(
u
.
îr
) {

4259 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4260 "%†ö up°ªam \"%V\"", 
u
.
îr
, &u.
uæ
);

4263  
NGX_CONF_ERROR
;

4266 
weight
 = 1;

4267 
max_Áûs
 = 1;

4268 
Áû_timeout
 = 10;

4270 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

4272 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "weight=", 7) == 0) {

4274 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_WEIGHT
)) {

4275 
övÆid
;

4278 
weight
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[7], vÆue[i].
Àn
 - 7);

4280 i‡(
weight
 =
NGX_ERROR
 || weight == 0) {

4281 
övÆid
;

4287 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_fails=", 10) == 0) {

4289 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_MAX_FAILS
)) {

4290 
övÆid
;

4293 
max_Áûs
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

4295 i‡(
max_Áûs
 =
NGX_ERROR
) {

4296 
övÆid
;

4302 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "fail_timeout=", 13) == 0) {

4304 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
)) {

4305 
övÆid
;

4308 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

4309 
s
.
d©a
 = &
vÆue
[
i
].data[13];

4311 
Áû_timeout
 = 
	`ngx_∑r£_time
(&
s
, 1);

4313 i‡(
Áû_timeout
 =(
time_t
Ë
NGX_ERROR
) {

4314 
övÆid
;

4320 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "backup", 6) == 0) {

4322 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_BACKUP
)) {

4323 
övÆid
;

4326 
us
->
backup
 = 1;

4331 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "down", 4) == 0) {

4333 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_DOWN
)) {

4334 
övÆid
;

4337 
us
->
down
 = 1;

4342 
övÆid
;

4345 
us
->
addrs
 = 
u
.addrs;

4346 
us
->
«ddrs
 = 
u
.naddrs;

4347 
us
->
weight
 = weight;

4348 
us
->
max_Áûs
 = max_fails;

4349 
us
->
Áû_timeout
 = fail_timeout;

4351  
NGX_CONF_OK
;

4353 
övÆid
:

4355 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4356 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

4358  
NGX_CONF_ERROR
;

4359 
	}
}

4362 
ngx_hâp_up°ªam_§v_c⁄f_t
 *

4363 
	$ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
)

4365 
ngx_uöt_t
 
i
;

4366 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4367 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

4368 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

4370 i‡(!(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)) {

4372 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

4373 i‡(
u
->
îr
) {

4374 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4375 "%†ö up°ªam \"%V\"", 
u
->
îr
, &u->
uæ
);

4378  
NULL
;

4382 
umcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

4384 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

4386 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

4388 i‡(
uscÂ
[
i
]->
ho°
.
Àn
 !
u
->host.len

4389 || 
	`ngx_°∫ˇ£cmp
(
uscÂ
[
i
]->
ho°
.
d©a
, 
u
->ho°.d©a, u->ho°.
Àn
)

4395 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)

4396 && (
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
))

4398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4399 "du∂iˇã up°ªam \"%V\"", &
u
->
ho°
);

4400  
NULL
;

4403 i‡((
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& 
u
->
p‹t
) {

4404 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4406 &
u
->
ho°
, u->
p‹t
);

4407  
NULL
;

4410 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& 
uscÂ
[
i
]->
p‹t
) {

4411 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

4413 &
u
->
ho°
, 
uscÂ
[
i
]->
p‹t
,

4414 
uscÂ
[
i
]->
fûe_«me
, uscÂ[i]->
löe
);

4415  
NULL
;

4418 i‡(
uscÂ
[
i
]->
p‹t
 !
u
->port) {

4422 i‡(
uscÂ
[
i
]->
deÁu…_p‹t
 && 
u
->default_port

4423 && 
uscÂ
[
i
]->
deÁu…_p‹t
 !
u
->default_port)

4428 i‡(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
) {

4429 
uscÂ
[
i
]->
Êags
 = flags;

4432  
uscÂ
[
i
];

4435 
uscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_§v_c⁄f_t
));

4436 i‡(
uscf
 =
NULL
) {

4437  
NULL
;

4440 
uscf
->
Êags
 = flags;

4441 
uscf
->
ho°
 = 
u
->host;

4442 
uscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

4443 
uscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

4444 
uscf
->
p‹t
 = 
u
->port;

4445 
uscf
->
deÁu…_p‹t
 = 
u
->default_port;

4447 i‡(
u
->
«ddrs
 == 1) {

4448 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

4449 (
ngx_hâp_up°ªam_£rvî_t
));

4450 i‡(
uscf
->
£rvîs
 =
NULL
) {

4451  
NULL
;

4454 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4455 i‡(
us
 =
NULL
) {

4456  
NULL
;

4459 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4461 
us
->
addrs
 = 
u
->addrs;

4462 
us
->
«ddrs
 = 1;

4465 
uscÂ
 = 
	`ngx_¨øy_push
(&
umcf
->
up°ªams
);

4466 i‡(
uscÂ
 =
NULL
) {

4467  
NULL
;

4470 *
uscÂ
 = 
uscf
;

4472  
uscf
;

4473 
	}
}

4477 
	$ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

4478 *
c⁄f
)

4480 *
p
 = 
c⁄f
;

4482 
ngx_öt_t
 
rc
;

4483 
ngx_°r_t
 *
vÆue
;

4484 
ngx_addr_t
 **
∑ddr
;

4486 
∑ddr
 = (
ngx_addr_t
 **Ë(
p
 + 
cmd
->
off£t
);

4488 *
∑ddr
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_addr_t
));

4489 i‡(*
∑ddr
 =
NULL
) {

4490  
NGX_CONF_ERROR
;

4493 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4495 
rc
 = 
	`ngx_∑r£_addr
(
cf
->
poﬁ
, *
∑ddr
, 
vÆue
[1].
d©a
, vÆue[1].
Àn
);

4497 
rc
) {

4498 
NGX_OK
:

4499 (*
∑ddr
)->
«me
 = 
vÆue
[1];

4500  
NGX_CONF_OK
;

4502 
NGX_DECLINED
:

4503 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4504 "övÆidáddªs†\"%V\"", &
vÆue
[1]);

4508  
NGX_CONF_ERROR
;

4510 
	}
}

4514 
	$ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

4515 *
c⁄f
)

4517 *
p
 = 
c⁄f
;

4519 
ngx_°r_t
 *
vÆue
;

4520 
ngx_¨øy_t
 **
a
;

4521 
ngx_hâp_up°ªam_∑øm_t
 *
∑øm
;

4523 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

4525 i‡(*
a
 =
NULL
) {

4526 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_hâp_up°ªam_∑øm_t
));

4527 i‡(*
a
 =
NULL
) {

4528  
NGX_CONF_ERROR
;

4532 
∑øm
 = 
	`ngx_¨øy_push
(*
a
);

4533 i‡(
∑øm
 =
NULL
) {

4534  
NGX_CONF_ERROR
;

4537 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4539 
∑øm
->
key
 = 
vÆue
[1];

4540 
∑øm
->
vÆue
 = value[2];

4541 
∑øm
->
skù_em±y
 = 0;

4543 i‡(
cf
->
¨gs
->
√…s
 == 4) {

4544 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "if_not_empty") != 0) {

4545 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4546 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

4547  
NGX_CONF_ERROR
;

4550 
∑øm
->
skù_em±y
 = 1;

4553  
NGX_CONF_OK
;

4554 
	}
}

4557 
ngx_öt_t


4558 
	$ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

4559 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

4560 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
)

4562 
ngx_°r_t
 *
h
;

4563 
ngx_uöt_t
 
i
, 
j
;

4564 
ngx_¨øy_t
 
hide_hódîs
;

4565 
ngx_hash_key_t
 *
hk
;

4567 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR


4568 && 
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
)

4570 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

4571 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

4573 
c⁄f
->
hide_hódîs_hash
 = 
¥ev
->hide_headers_hash;

4575 i‡(
c⁄f
->
hide_hódîs_hash
.
buckës


4576 #i‡(
NGX_HTTP_CACHE
)

4577 && ((
c⁄f
->
ˇche
 =
NULL
Ë=(
¥ev
->cache == NULL))

4581  
NGX_OK
;

4585 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR
) {

4586 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

4589 i‡(
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
) {

4590 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

4594 i‡(
	`ngx_¨øy_öô
(&
hide_hódîs
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

4595 !
NGX_OK
)

4597  
NGX_ERROR
;

4600 
h
 = 
deÁu…_hide_hódîs
; h->
Àn
; h++) {

4601 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

4602 i‡(
hk
 =
NULL
) {

4603  
NGX_ERROR
;

4606 
hk
->
key
 = *
h
;

4607 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
->
d©a
, h->
Àn
);

4608 
hk
->
vÆue
 = (*) 1;

4611 i‡(
c⁄f
->
hide_hódîs
 !
NGX_CONF_UNSET_PTR
) {

4613 
h
 = 
c⁄f
->
hide_hódîs
->
ñts
;

4615 
i
 = 0; i < 
c⁄f
->
hide_hódîs
->
√…s
; i++) {

4617 
hk
 = 
hide_hódîs
.
ñts
;

4619 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

4620 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

4621 
exi°
;

4625 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

4626 i‡(
hk
 =
NULL
) {

4627  
NGX_ERROR
;

4630 
hk
->
key
 = 
h
[
i
];

4631 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
[
i
].
d©a
, h[i].
Àn
);

4632 
hk
->
vÆue
 = (*) 1;

4634 
exi°
:

4640 i‡(
c⁄f
->
∑ss_hódîs
 !
NGX_CONF_UNSET_PTR
) {

4642 
h
 = 
c⁄f
->
∑ss_hódîs
->
ñts
;

4643 
hk
 = 
hide_hódîs
.
ñts
;

4645 
i
 = 0; i < 
c⁄f
->
∑ss_hódîs
->
√…s
; i++) {

4646 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

4648 i‡(
hk
[
j
].
key
.
d©a
 =
NULL
) {

4652 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

4653 
hk
[
j
].
key
.
d©a
 = 
NULL
;

4660 
hash
->hash = &
c⁄f
->
hide_hódîs_hash
;

4661 
hash
->
key
 = 
ngx_hash_key_lc
;

4662 
hash
->
poﬁ
 = 
cf
->pool;

4663 
hash
->
ãmp_poﬁ
 = 
NULL
;

4665  
	`ngx_hash_öô
(
hash
, 
hide_hódîs
.
ñts
, hide_hódîs.
√…s
);

4666 
	}
}

4670 
	$ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

4672 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

4674 
umcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_maö_c⁄f_t
));

4675 i‡(
umcf
 =
NULL
) {

4676  
NULL
;

4679 i‡(
	`ngx_¨øy_öô
(&
umcf
->
up°ªams
, 
cf
->
poﬁ
, 4,

4680 (
ngx_hâp_up°ªam_§v_c⁄f_t
 *))

4681 !
NGX_OK
)

4683  
NULL
;

4686  
umcf
;

4687 
	}
}

4691 
	$ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

4693 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
 = 
c⁄f
;

4695 
ngx_uöt_t
 
i
;

4696 
ngx_¨øy_t
 
hódîs_ö
;

4697 
ngx_hash_key_t
 *
hk
;

4698 
ngx_hash_öô_t
 
hash
;

4699 
ngx_hâp_up°ªam_öô_±
 
öô
;

4700 
ngx_hâp_up°ªam_hódî_t
 *
hódî
;

4701 
ngx_hâp_up°ªam_§v_c⁄f_t
 **
uscÂ
;

4703 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

4705 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

4707 
öô
 = 
uscÂ
[
i
]->
≥î
.
öô_up°ªam
 ? uscfp[i]->peer.init_upstream:

4708 
ngx_hâp_up°ªam_öô_round_robö
;

4710 i‡(
	`öô
(
cf
, 
uscÂ
[
i
]Ë!
NGX_OK
) {

4711  
NGX_CONF_ERROR
;

4718 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

4719 !
NGX_OK
)

4721  
NGX_CONF_ERROR
;

4724 
hódî
 = 
ngx_hâp_up°ªam_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

4725 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

4726 i‡(
hk
 =
NULL
) {

4727  
NGX_CONF_ERROR
;

4730 
hk
->
key
 = 
hódî
->
«me
;

4731 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

4732 
hk
->
vÆue
 = 
hódî
;

4735 
hash
.hash = &
umcf
->
hódîs_ö_hash
;

4736 
hash
.
key
 = 
ngx_hash_key_lc
;

4737 
hash
.
max_size
 = 512;

4738 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

4739 
hash
.
«me
 = "upstream_headers_in_hash";

4740 
hash
.
poﬁ
 = 
cf
->pool;

4741 
hash
.
ãmp_poﬁ
 = 
NULL
;

4743 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

4744  
NGX_CONF_ERROR
;

4747  
NGX_CONF_OK
;

4748 
	}
}

	@src/http/ngx_http_upstream.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

16 
	~<ngx_evít_pùe.h
>

17 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_UPSTREAM_FT_ERROR
 0x00000002

	)

21 
	#NGX_HTTP_UPSTREAM_FT_TIMEOUT
 0x00000004

	)

22 
	#NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 0x00000008

	)

23 
	#NGX_HTTP_UPSTREAM_FT_HTTP_500
 0x00000010

	)

24 
	#NGX_HTTP_UPSTREAM_FT_HTTP_502
 0x00000020

	)

25 
	#NGX_HTTP_UPSTREAM_FT_HTTP_503
 0x00000040

	)

26 
	#NGX_HTTP_UPSTREAM_FT_HTTP_504
 0x00000080

	)

27 
	#NGX_HTTP_UPSTREAM_FT_HTTP_404
 0x00000100

	)

28 
	#NGX_HTTP_UPSTREAM_FT_UPDATING
 0x00000200

	)

29 
	#NGX_HTTP_UPSTREAM_FT_BUSY_LOCK
 0x00000400

	)

30 
	#NGX_HTTP_UPSTREAM_FT_MAX_WAITING
 0x00000800

	)

31 
	#NGX_HTTP_UPSTREAM_FT_NOLIVE
 0x40000000

	)

32 
	#NGX_HTTP_UPSTREAM_FT_OFF
 0x80000000

	)

34 
	#NGX_HTTP_UPSTREAM_FT_STATUS
 (
NGX_HTTP_UPSTREAM_FT_HTTP_500
 \

35 |
NGX_HTTP_UPSTREAM_FT_HTTP_502
 \

36 |
NGX_HTTP_UPSTREAM_FT_HTTP_503
 \

37 |
NGX_HTTP_UPSTREAM_FT_HTTP_504
 \

38 |
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

	)

40 
	#NGX_HTTP_UPSTREAM_INVALID_HEADER
 40

	)

43 
	#NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 0x00000002

	)

44 
	#NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 0x00000004

	)

45 
	#NGX_HTTP_UPSTREAM_IGN_EXPIRES
 0x00000008

	)

46 
	#NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 0x00000010

	)

47 
	#NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 0x00000020

	)

48 
	#NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 0x00000040

	)

49 
	#NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 0x00000080

	)

50 
	#NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 0x00000100

	)

54 
ngx_m£c_t
 
	mbl_time
;

55 
ngx_uöt_t
 
	mbl_°©e
;

57 
ngx_uöt_t
 
	m°©us
;

58 
time_t
 
	mª•⁄£_£c
;

59 
ngx_uöt_t
 
	mª•⁄£_m£c
;

60 
off_t
 
	mª•⁄£_Àngth
;

62 
ngx_°r_t
 *
	m≥î
;

63 } 
	tngx_hâp_up°ªam_°©e_t
;

67 
ngx_hash_t
 
	mhódîs_ö_hash
;

68 
ngx_¨øy_t
 
	mup°ªams
;

70 } 
	tngx_hâp_up°ªam_maö_c⁄f_t
;

72 
ngx_hâp_up°ªam_§v_c⁄f_s
 
	tngx_hâp_up°ªam_§v_c⁄f_t
;

74 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

75 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

76 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_≥î_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

77 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

81 
ngx_hâp_up°ªam_öô_±
 
öô_up°ªam
;

82 
ngx_hâp_up°ªam_öô_≥î_±
 
öô
;

83 *
d©a
;

84 } 
	tngx_hâp_up°ªam_≥î_t
;

88 
ngx_addr_t
 *
addrs
;

89 
ngx_uöt_t
 
«ddrs
;

90 
ngx_uöt_t
 
weight
;

91 
ngx_uöt_t
 
max_Áûs
;

92 
time_t
 
Áû_timeout
;

94 
down
:1;

95 
backup
:1;

96 } 
	tngx_hâp_up°ªam_£rvî_t
;

99 
	#NGX_HTTP_UPSTREAM_CREATE
 0x0001

	)

100 
	#NGX_HTTP_UPSTREAM_WEIGHT
 0x0002

	)

101 
	#NGX_HTTP_UPSTREAM_MAX_FAILS
 0x0004

	)

102 
	#NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

103 
	#NGX_HTTP_UPSTREAM_DOWN
 0x0010

	)

104 
	#NGX_HTTP_UPSTREAM_BACKUP
 0x0020

	)

107 
	sngx_hâp_up°ªam_§v_c⁄f_s
 {

108 
ngx_hâp_up°ªam_≥î_t
 
≥î
;

109 **
§v_c⁄f
;

111 
ngx_¨øy_t
 *
£rvîs
;

113 
ngx_uöt_t
 
Êags
;

114 
ngx_°r_t
 
ho°
;

115 
u_ch¨
 *
fûe_«me
;

116 
ngx_uöt_t
 
löe
;

117 
ö_p‹t_t
 
p‹t
;

118 
ö_p‹t_t
 
deÁu…_p‹t
;

123 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

125 
ngx_m£c_t
 
c⁄√˘_timeout
;

126 
ngx_m£c_t
 
£nd_timeout
;

127 
ngx_m£c_t
 
ªad_timeout
;

128 
ngx_m£c_t
 
timeout
;

130 
size_t
 
£nd_low©
;

131 
size_t
 
buf„r_size
;

133 
size_t
 
busy_buf„rs_size
;

134 
size_t
 
max_ãmp_fûe_size
;

135 
size_t
 
ãmp_fûe_wrôe_size
;

137 
size_t
 
busy_buf„rs_size_c⁄f
;

138 
size_t
 
max_ãmp_fûe_size_c⁄f
;

139 
size_t
 
ãmp_fûe_wrôe_size_c⁄f
;

141 
ngx_bufs_t
 
bufs
;

143 
ngx_uöt_t
 
ign‹e_hódîs
;

144 
ngx_uöt_t
 
√xt_up°ªam
;

145 
ngx_uöt_t
 
°‹e_ac˚ss
;

146 
ngx_Êag_t
 
buf„rög
;

147 
ngx_Êag_t
 
∑ss_ªque°_hódîs
;

148 
ngx_Êag_t
 
∑ss_ªque°_body
;

150 
ngx_Êag_t
 
ign‹e_˛õ¡_ab‹t
;

151 
ngx_Êag_t
 
öãr˚±_îr‹s
;

152 
ngx_Êag_t
 
cy˛ic_ãmp_fûe
;

154 
ngx_∑th_t
 *
ãmp_∑th
;

156 
ngx_hash_t
 
hide_hódîs_hash
;

157 
ngx_¨øy_t
 *
hide_hódîs
;

158 
ngx_¨øy_t
 *
∑ss_hódîs
;

160 
ngx_addr_t
 *
loˇl
;

162 #i‡(
NGX_HTTP_CACHE
)

163 
ngx_shm_z⁄e_t
 *
ˇche
;

165 
ngx_uöt_t
 
ˇche_mö_u£s
;

166 
ngx_uöt_t
 
ˇche_u£_°Æe
;

167 
ngx_uöt_t
 
ˇche_mëhods
;

169 
ngx_Êag_t
 
ˇche_lock
;

170 
ngx_m£c_t
 
ˇche_lock_timeout
;

172 
ngx_¨øy_t
 *
ˇche_vÆid
;

173 
ngx_¨øy_t
 *
ˇche_by∑ss
;

174 
ngx_¨øy_t
 *
no_ˇche
;

177 
ngx_¨øy_t
 *
°‹e_Àngths
;

178 
ngx_¨øy_t
 *
°‹e_vÆues
;

180 sig√d 
°‹e
:2;

181 
öãr˚±_404
:1;

182 
ch™ge_buf„rög
:1;

184 #i‡(
NGX_HTTP_SSL
)

185 
ngx_s¶_t
 *
s¶
;

186 
ngx_Êag_t
 
s¶_£ssi⁄_ªu£
;

189 
ngx_°r_t
 
moduÀ
;

190 } 
	tngx_hâp_up°ªam_c⁄f_t
;

194 
ngx_°r_t
 
«me
;

195 
ngx_hâp_hódî_h™dÀr_±
 
h™dÀr
;

196 
ngx_uöt_t
 
off£t
;

197 
ngx_hâp_hódî_h™dÀr_±
 
c›y_h™dÀr
;

198 
ngx_uöt_t
 
c⁄f
;

199 
ngx_uöt_t
 
ªdúe˘
;

200 } 
	tngx_hâp_up°ªam_hódî_t
;

204 
ngx_li°_t
 
hódîs
;

206 
ngx_uöt_t
 
°©us_n
;

207 
ngx_°r_t
 
°©us_löe
;

209 
ngx_èbÀ_ñt_t
 *
°©us
;

210 
ngx_èbÀ_ñt_t
 *
d©e
;

211 
ngx_èbÀ_ñt_t
 *
£rvî
;

212 
ngx_èbÀ_ñt_t
 *
c⁄√˘i⁄
;

214 
ngx_èbÀ_ñt_t
 *
expúes
;

215 
ngx_èbÀ_ñt_t
 *
ëag
;

216 
ngx_èbÀ_ñt_t
 *
x_ac˚l_expúes
;

217 
ngx_èbÀ_ñt_t
 *
x_ac˚l_ªdúe˘
;

218 
ngx_èbÀ_ñt_t
 *
x_ac˚l_limô_øã
;

220 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ty≥
;

221 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_Àngth
;

223 
ngx_èbÀ_ñt_t
 *
œ°_modifõd
;

224 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

225 
ngx_èbÀ_ñt_t
 *
ac˚±_ønges
;

226 
ngx_èbÀ_ñt_t
 *
www_authítiˇã
;

227 
ngx_èbÀ_ñt_t
 *
å™s„r_ícodög
;

229 #i‡(
NGX_HTTP_GZIP
)

230 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ícodög
;

233 
off_t
 
c⁄ã¡_Àngth_n
;

235 
ngx_¨øy_t
 
ˇche_c⁄åﬁ
;

237 
c⁄√˘i⁄_˛o£
:1;

238 
chunked
:1;

239 } 
	tngx_hâp_up°ªam_hódîs_ö_t
;

243 
ngx_°r_t
 
ho°
;

244 
ö_p‹t_t
 
p‹t
;

245 
ngx_uöt_t
 
no_p‹t
;

247 
ngx_uöt_t
 
«ddrs
;

248 
ö_addr_t
 *
addrs
;

250 
sockaddr
 *sockaddr;

251 
sockÀn_t
 
sockÀn
;

253 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

254 } 
	tngx_hâp_up°ªam_ªsﬁved_t
;

257 (*
	tngx_hâp_up°ªam_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

258 
	tngx_hâp_up°ªam_t
 *
	tu
);

261 
	sngx_hâp_up°ªam_s
 {

262 
ngx_hâp_up°ªam_h™dÀr_±
 
ªad_evít_h™dÀr
;

263 
ngx_hâp_up°ªam_h™dÀr_±
 
wrôe_evít_h™dÀr
;

265 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

267 
ngx_evít_pùe_t
 *
pùe
;

269 
ngx_chaö_t
 *
ªque°_bufs
;

271 
ngx_ouçut_chaö_˘x_t
 
ouçut
;

272 
ngx_chaö_wrôî_˘x_t
 
wrôî
;

274 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
;

276 
ngx_hâp_up°ªam_hódîs_ö_t
 
hódîs_ö
;

278 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

280 
ngx_buf_t
 
buf„r
;

281 
off_t
 
Àngth
;

283 
ngx_chaö_t
 *
out_bufs
;

284 
ngx_chaö_t
 *
busy_bufs
;

285 
ngx_chaö_t
 *
‰ì_bufs
;

287 
	`ngx_öt_t
 (*
öput_fûãr_öô
)(*
d©a
);

288 
	`ngx_öt_t
 (*
öput_fûãr
)(*
d©a
, 
ssize_t
 
byãs
);

289 *
öput_fûãr_˘x
;

291 #i‡(
NGX_HTTP_CACHE
)

292 
	`ngx_öt_t
 (*
¸óã_key
)(
ngx_hâp_ªque°_t
 *
r
);

294 
	`ngx_öt_t
 (*
¸óã_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

295 
	`ngx_öt_t
 (*
ªöô_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

296 
	`ngx_öt_t
 (*
¥o˚ss_hódî
)(
ngx_hâp_ªque°_t
 *
r
);

297 (*
ab‹t_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

298 (*
föÆize_ªque°
)(
ngx_hâp_ªque°_t
 *
r
,

299 
ngx_öt_t
 
rc
);

300 
	`ngx_öt_t
 (*
ªwrôe_ªdúe˘
)(
ngx_hâp_ªque°_t
 *
r
,

301 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

302 
	`ngx_öt_t
 (*
ªwrôe_cookõ
)(
ngx_hâp_ªque°_t
 *
r
,

303 
ngx_èbÀ_ñt_t
 *
h
);

305 
ngx_m£c_t
 
timeout
;

307 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

309 
ngx_°r_t
 
mëhod
;

310 
ngx_°r_t
 
schema
;

311 
ngx_°r_t
 
uri
;

313 
ngx_hâp_˛ónup_±
 *
˛ónup
;

315 
°‹e
:1;

316 
ˇchóbÀ
:1;

317 
ac˚l
:1;

318 
s¶
:1;

319 #i‡(
NGX_HTTP_CACHE
)

320 
ˇche_°©us
:3;

323 
buf„rög
:1;

324 
kì∑live
:1;

326 
ªque°_£¡
:1;

327 
hódî_£¡
:1;

332 
ngx_uöt_t
 
°©us
;

333 
ngx_uöt_t
 
mask
;

334 } 
	tngx_hâp_up°ªam_√xt_t
;

338 
ngx_°r_t
 
key
;

339 
ngx_°r_t
 
vÆue
;

340 
ngx_uöt_t
 
skù_em±y
;

341 } 
	tngx_hâp_up°ªam_∑øm_t
;

344 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

345 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

347 
ngx_öt_t
 
	`ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

348 
	`ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
);

349 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
	`ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

350 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

351 *
	`ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

352 *
c⁄f
);

353 *
	`ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

354 *
c⁄f
);

355 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

356 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

357 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
);

360 
	#ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

361 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

364 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

365 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ˇche_mëhod_mask
[];

366 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ign‹e_hódîs_masks
[];

	@src/http/ngx_http_upstream_round_robin.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_up°ªam_cmp_£rvîs
(c⁄° *
⁄e
,

14 c⁄° *
two
);

15 
ngx_hâp_up°ªam_º_≥î_t
 *
ngx_hâp_up°ªam_gë_≥î
(

16 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
);

18 #i‡(
NGX_HTTP_SSL
)

20 
ngx_öt_t
 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

21 *
d©a
);

22 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

23 *
d©a
);

28 
ngx_öt_t


29 
	$ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

30 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

32 
ngx_uæ_t
 
u
;

33 
ngx_uöt_t
 
i
, 
j
, 
n
, 
w
;

34 
ngx_hâp_up°ªam_£rvî_t
 *
£rvî
;

35 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

37 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_round_robö_≥î
;

39 i‡(
us
->
£rvîs
) {

40 
£rvî
 = 
us
->
£rvîs
->
ñts
;

42 
n
 = 0;

43 
w
 = 0;

45 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

46 i‡(
£rvî
[
i
].
backup
) {

50 
n
 +
£rvî
[
i
].
«ddrs
;

51 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

54 i‡(
n
 == 0) {

55 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

57 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

58  
NGX_ERROR
;

61 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

62 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

63 i‡(
≥îs
 =
NULL
) {

64  
NGX_ERROR
;

67 
≥îs
->
sögÀ
 = (
n
 == 1);

68 
≥îs
->
numbî
 = 
n
;

69 
≥îs
->
weighãd
 = (
w
 !
n
);

70 
≥îs
->
tŸÆ_weight
 = 
w
;

71 
≥îs
->
«me
 = &
us
->
ho°
;

73 
n
 = 0;

75 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

76 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

77 i‡(
£rvî
[
i
].
backup
) {

81 
≥îs
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

82 
≥îs
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

83 
≥îs
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

84 
≥îs
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

85 
≥îs
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

86 
≥îs
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

87 
≥îs
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

88 
≥îs
->
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

89 
≥îs
->
≥î
[
n
].
cuºít_weight
 = 0;

90 
n
++;

94 
us
->
≥î
.
d©a
 = 
≥îs
;

96 
	`ngx_s‹t
(&
≥îs
->
≥î
[0], (
size_t
Ë
n
,

97 (
ngx_hâp_up°ªam_º_≥î_t
),

98 
ngx_hâp_up°ªam_cmp_£rvîs
);

102 
n
 = 0;

103 
w
 = 0;

105 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

106 i‡(!
£rvî
[
i
].
backup
) {

110 
n
 +
£rvî
[
i
].
«ddrs
;

111 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

114 i‡(
n
 == 0) {

115  
NGX_OK
;

118 
backup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

119 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

120 i‡(
backup
 =
NULL
) {

121  
NGX_ERROR
;

124 
≥îs
->
sögÀ
 = 0;

125 
backup
->
sögÀ
 = 0;

126 
backup
->
numbî
 = 
n
;

127 
backup
->
weighãd
 = (
w
 !
n
);

128 
backup
->
tŸÆ_weight
 = 
w
;

129 
backup
->
«me
 = &
us
->
ho°
;

131 
n
 = 0;

133 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

134 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

135 i‡(!
£rvî
[
i
].
backup
) {

139 
backup
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

140 
backup
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

141 
backup
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

142 
backup
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

143 
backup
->
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

144 
backup
->
≥î
[
n
].
cuºít_weight
 = 0;

145 
backup
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

146 
backup
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

147 
backup
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

148 
n
++;

152 
≥îs
->
√xt
 = 
backup
;

154 
	`ngx_s‹t
(&
backup
->
≥î
[0], (
size_t
Ë
n
,

155 (
ngx_hâp_up°ªam_º_≥î_t
),

156 
ngx_hâp_up°ªam_cmp_£rvîs
);

158  
NGX_OK
;

164 i‡(
us
->
p‹t
 =0 && us->
deÁu…_p‹t
 == 0) {

165 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

167 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

168  
NGX_ERROR
;

171 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

173 
u
.
ho°
 = 
us
->host;

174 
u
.
p‹t
 = (
ö_p‹t_t
Ë(
us
->p‹à? us->p‹à: us->
deÁu…_p‹t
);

176 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

177 i‡(
u
.
îr
) {

178 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

180 
u
.
îr
, &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

183  
NGX_ERROR
;

186 
n
 = 
u
.
«ddrs
;

188 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

189 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

190 i‡(
≥îs
 =
NULL
) {

191  
NGX_ERROR
;

194 
≥îs
->
sögÀ
 = (
n
 == 1);

195 
≥îs
->
numbî
 = 
n
;

196 
≥îs
->
weighãd
 = 0;

197 
≥îs
->
tŸÆ_weight
 = 
n
;

198 
≥îs
->
«me
 = &
us
->
ho°
;

200 
i
 = 0; i < 
u
.
«ddrs
; i++) {

201 
≥îs
->
≥î
[
i
].
sockaddr
 = 
u
.
addrs
[i].sockaddr;

202 
≥îs
->
≥î
[
i
].
sockÀn
 = 
u
.
addrs
[i].socklen;

203 
≥îs
->
≥î
[
i
].
«me
 = 
u
.
addrs
[i].name;

204 
≥îs
->
≥î
[
i
].
weight
 = 1;

205 
≥îs
->
≥î
[
i
].
ef„˘ive_weight
 = 1;

206 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 0;

207 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

208 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

211 
us
->
≥î
.
d©a
 = 
≥îs
;

215  
NGX_OK
;

216 
	}
}

219 
ngx_öt_t


220 
	$ngx_hâp_up°ªam_cmp_£rvîs
(c⁄° *
⁄e
, c⁄° *
two
)

222 
ngx_hâp_up°ªam_º_≥î_t
 *
fú°
, *
£c⁄d
;

224 
fú°
 = (
ngx_hâp_up°ªam_º_≥î_t
 *Ë
⁄e
;

225 
£c⁄d
 = (
ngx_hâp_up°ªam_º_≥î_t
 *Ë
two
;

227  (
fú°
->
weight
 < 
£c⁄d
->weight);

228 
	}
}

231 
ngx_öt_t


232 
	$ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

233 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

235 
ngx_uöt_t
 
n
;

236 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

238 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

240 i‡(
ºp
 =
NULL
) {

241 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

242 i‡(
ºp
 =
NULL
) {

243  
NGX_ERROR
;

246 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

249 
ºp
->
≥îs
 = 
us
->
≥î
.
d©a
;

250 
ºp
->
cuºít
 = 0;

252 
n
 = 
ºp
->
≥îs
->
numbî
;

254 i‡(
ºp
->
≥îs
->
√xt
 &&ÑΩ->≥îs->√xt->
numbî
 > 
n
) {

255 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
;

258 i‡(
n
 <8 * (
uöçå_t
)) {

259 
ºp
->
åõd
 = &ºp->
d©a
;

260 
ºp
->
d©a
 = 0;

263 
n
 = (¿+ (8 * (
uöçå_t
) - 1)) / (8 * (uintptr_t));

265 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

266 i‡(
ºp
->
åõd
 =
NULL
) {

267  
NGX_ERROR
;

271 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

272 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

273 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

274 #i‡(
NGX_HTTP_SSL
)

275 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 =

276 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
;

277 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 =

278 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
;

281  
NGX_OK
;

282 
	}
}

285 
ngx_öt_t


286 
	$ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

287 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
)

289 
u_ch¨
 *
p
;

290 
size_t
 
Àn
;

291 
ngx_uöt_t
 
i
, 
n
;

292 
sockaddr_ö
 *
sö
;

293 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

294 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

296 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

298 i‡(
ºp
 =
NULL
) {

299 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

300 i‡(
ºp
 =
NULL
) {

301  
NGX_ERROR
;

304 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

307 
≥îs
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

308 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
ur
->
«ddrs
 - 1));

309 i‡(
≥îs
 =
NULL
) {

310  
NGX_ERROR
;

313 
≥îs
->
sögÀ
 = (
ur
->
«ddrs
 == 1);

314 
≥îs
->
numbî
 = 
ur
->
«ddrs
;

315 
≥îs
->
«me
 = &
ur
->
ho°
;

317 i‡(
ur
->
sockaddr
) {

318 
≥îs
->
≥î
[0].
sockaddr
 = 
ur
->sockaddr;

319 
≥îs
->
≥î
[0].
sockÀn
 = 
ur
->socklen;

320 
≥îs
->
≥î
[0].
«me
 = 
ur
->
ho°
;

321 
≥îs
->
≥î
[0].
weight
 = 1;

322 
≥îs
->
≥î
[0].
ef„˘ive_weight
 = 1;

323 
≥îs
->
≥î
[0].
cuºít_weight
 = 0;

324 
≥îs
->
≥î
[0].
max_Áûs
 = 1;

325 
≥îs
->
≥î
[0].
Áû_timeout
 = 10;

329 
i
 = 0; i < 
ur
->
«ddrs
; i++) {

331 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65536") - 1;

333 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

334 i‡(
p
 =
NULL
) {

335  
NGX_ERROR
;

338 
Àn
 = 
	`ngx_öë_¡›
(
AF_INET
, &
ur
->
addrs
[
i
], 
p
, 
NGX_INET_ADDRSTRLEN
);

339 
Àn
 = 
	`ngx_•rötf
(&
p
[Àn], ":%d", 
ur
->
p‹t
) -Ö;

341 
sö
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
sockaddr_ö
));

342 i‡(
sö
 =
NULL
) {

343  
NGX_ERROR
;

346 
sö
->
sö_Ámûy
 = 
AF_INET
;

347 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
ur
->
p‹t
);

348 
sö
->
sö_addr
.
s_addr
 = 
ur
->
addrs
[
i
];

350 
≥îs
->
≥î
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

351 
≥îs
->
≥î
[
i
].
sockÀn
 = (
sockaddr_ö
);

352 
≥îs
->
≥î
[
i
].
«me
.
Àn
 =Üen;

353 
≥îs
->
≥î
[
i
].
«me
.
d©a
 = 
p
;

354 
≥îs
->
≥î
[
i
].
weight
 = 1;

355 
≥îs
->
≥î
[
i
].
ef„˘ive_weight
 = 1;

356 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 0;

357 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

358 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

362 
ºp
->
≥îs
 =Öeers;

363 
ºp
->
cuºít
 = 0;

365 i‡(
ºp
->
≥îs
->
numbî
 <8 * (
uöçå_t
)) {

366 
ºp
->
åõd
 = &ºp->
d©a
;

367 
ºp
->
d©a
 = 0;

370 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

371 / (8 * (
uöçå_t
));

373 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

374 i‡(
ºp
->
åõd
 =
NULL
) {

375  
NGX_ERROR
;

379 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

380 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

381 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

382 #i‡(
NGX_HTTP_SSL
)

383 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
;

384 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
;

387  
NGX_OK
;

388 
	}
}

391 
ngx_öt_t


392 
	$ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

394 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

396 
ngx_öt_t
 
rc
;

397 
ngx_uöt_t
 
i
, 
n
;

398 
ngx_c⁄√˘i⁄_t
 *
c
;

399 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

400 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

402 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

403 "gëÑ∏≥î,Åry: %ui", 
pc
->
åõs
);

407 i‡(
ºp
->
≥îs
->
œ°_ˇched
) {

411 
c
 = 
ºp
->
≥îs
->
ˇched
[ºp->≥îs->
œ°_ˇched
];

412 
ºp
->
≥îs
->
œ°_ˇched
--;

416 #i‡(
NGX_THREADS
)

417 
c
->
ªad
->
lock
 = c->ªad->
own_lock
;

418 
c
->
wrôe
->
lock
 = c->wrôe->
own_lock
;

421 
pc
->
c⁄√˘i⁄
 = 
c
;

422 
pc
->
ˇched
 = 1;

424  
NGX_OK
;

427 
pc
->
ˇched
 = 0;

428 
pc
->
c⁄√˘i⁄
 = 
NULL
;

430 i‡(
ºp
->
≥îs
->
sögÀ
) {

431 
≥î
 = &
ºp
->
≥îs
->peer[0];

433 i‡(
≥î
->
down
) {

434 
Áûed
;

441 
≥î
 = 
	`ngx_hâp_up°ªam_gë_≥î
(
ºp
);

443 i‡(
≥î
 =
NULL
) {

444 
Áûed
;

447 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

449 
ºp
->
cuºít
, 
≥î
->
cuºít_weight
);

452 
pc
->
sockaddr
 = 
≥î
->sockaddr;

453 
pc
->
sockÀn
 = 
≥î
->socklen;

454 
pc
->
«me
 = &
≥î
->name;

458 i‡(
pc
->
åõs
 =1 && 
ºp
->
≥îs
->
√xt
) {

459 
pc
->
åõs
 +
ºp
->
≥îs
->
√xt
->
numbî
;

462  
NGX_OK
;

464 
Áûed
:

466 
≥îs
 = 
ºp
->peers;

468 i‡(
≥îs
->
√xt
) {

472 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0, "backup servers");

474 
ºp
->
≥îs
 =Öìrs->
√xt
;

475 
pc
->
åõs
 = 
ºp
->
≥îs
->
numbî
;

477 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

478 / (8 * (
uöçå_t
));

480 
i
 = 0; i < 
n
; i++) {

481 
ºp
->
åõd
[
i
] = 0;

484 
rc
 = 
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

486 i‡(
rc
 !
NGX_BUSY
) {

487  
rc
;

495 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

496 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

501 
pc
->
«me
 = 
≥îs
->name;

503  
NGX_BUSY
;

504 
	}
}

507 
ngx_hâp_up°ªam_º_≥î_t
 *

508 
	$ngx_hâp_up°ªam_gë_≥î
(
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
)

510 
time_t
 
now
;

511 
uöçå_t
 
m
;

512 
ngx_öt_t
 
tŸÆ
;

513 
ngx_uöt_t
 
i
, 
n
;

514 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

516 
now
 = 
	`ngx_time
();

518 
be°
 = 
NULL
;

519 
tŸÆ
 = 0;

521 
i
 = 0; i < 
ºp
->
≥îs
->
numbî
; i++) {

523 
n
 = 
i
 / (8 * (
uöçå_t
));

524 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

526 i‡(
ºp
->
åõd
[
n
] & 
m
) {

530 
≥î
 = &
ºp
->
≥îs
->≥î[
i
];

532 i‡(
≥î
->
down
) {

536 i‡(
≥î
->
max_Áûs


537 && 
≥î
->
Áûs
 >≥î->
max_Áûs


538 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

543 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

544 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

546 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

547 
≥î
->
ef„˘ive_weight
++;

550 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

551 
be°
 = 
≥î
;

555 i‡(
be°
 =
NULL
) {

556  
NULL
;

559 
i
 = 
be°
 - &
ºp
->
≥îs
->
≥î
[0];

561 
ºp
->
cuºít
 = 
i
;

563 
n
 = 
i
 / (8 * (
uöçå_t
));

564 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

566 
ºp
->
åõd
[
n
] |
m
;

568 
be°
->
cuºít_weight
 -
tŸÆ
;

569 
be°
->
checked
 = 
now
;

571  
be°
;

572 
	}
}

576 
	$ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

577 
ngx_uöt_t
 
°©e
)

579 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

581 
time_t
 
now
;

582 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

584 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

585 "‰ìÑ∏≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

589 i‡(
ºp
->
≥îs
->
sögÀ
) {

590 
pc
->
åõs
 = 0;

594 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

596 i‡(
°©e
 & 
NGX_PEER_FAILED
) {

597 
now
 = 
	`ngx_time
();

601 
≥î
->
Áûs
++;

602 
≥î
->
ac˚s£d
 = 
now
;

603 
≥î
->
checked
 = 
now
;

605 i‡(
≥î
->
max_Áûs
) {

606 
≥î
->
ef„˘ive_weight
 -≥î->
weight
 /Öìr->
max_Áûs
;

609 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

611 
ºp
->
cuºít
, 
≥î
->
ef„˘ive_weight
);

613 i‡(
≥î
->
ef„˘ive_weight
 < 0) {

614 
≥î
->
ef„˘ive_weight
 = 0;

623 i‡(
≥î
->
ac˚s£d
 <Öìr->
checked
) {

624 
≥î
->
Áûs
 = 0;

628 i‡(
pc
->
åõs
) {

629 
pc
->
åõs
--;

633 
	}
}

636 #i‡(
NGX_HTTP_SSL
)

638 
ngx_öt_t


639 
	$ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

640 *
d©a
)

642 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

644 
ngx_öt_t
 
rc
;

645 
ngx_s¶_£ssi⁄_t
 *
s¶_£ssi⁄
;

646 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

648 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

653 
s¶_£ssi⁄
 = 
≥î
->ssl_session;

655 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

657 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

659 
s¶_£ssi⁄
, s¶_£ssi⁄ ? s¶_£ssi⁄->
ª„ªn˚s
 : 0);

663  
rc
;

664 
	}
}

668 
	$ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

669 *
d©a
)

671 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

673 
ngx_s¶_£ssi⁄_t
 *
ﬁd_s¶_£ssi⁄
, *
s¶_£ssi⁄
;

674 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

676 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

678 i‡(
s¶_£ssi⁄
 =
NULL
) {

682 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

683 "ßvê£ssi⁄: %p:%d", 
s¶_£ssi⁄
, s¶_£ssi⁄->
ª„ªn˚s
);

685 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

690 
ﬁd_s¶_£ssi⁄
 = 
≥î
->
s¶_£ssi⁄
;

691 
≥î
->
s¶_£ssi⁄
 = ssl_session;

695 i‡(
ﬁd_s¶_£ssi⁄
) {

697 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

699 
ﬁd_s¶_£ssi⁄
, old_s¶_£ssi⁄->
ª„ªn˚s
);

703 
	`ngx_s¶_‰ì_£ssi⁄
(
ﬁd_s¶_£ssi⁄
);

705 
	}
}

708 
ngx_öt_t


709 
	$ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

711  
NGX_OK
;

712 
	}
}

716 
	$ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

719 
	}
}

	@src/http/ngx_http_upstream_round_robin.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
sockaddr
 *
	msockaddr
;

19 
sockÀn_t
 
	msockÀn
;

20 
ngx_°r_t
 
	m«me
;

22 
ngx_öt_t
 
	mcuºít_weight
;

23 
ngx_öt_t
 
	mef„˘ive_weight
;

24 
ngx_öt_t
 
	mweight
;

26 
ngx_uöt_t
 
	mÁûs
;

27 
time_t
 
	mac˚s£d
;

28 
time_t
 
	mchecked
;

30 
ngx_uöt_t
 
	mmax_Áûs
;

31 
time_t
 
	mÁû_timeout
;

33 
ngx_uöt_t
 
	mdown
;

35 #i‡(
NGX_HTTP_SSL
)

36 
ngx_s¶_£ssi⁄_t
 *
	ms¶_£ssi⁄
;

38 } 
	tngx_hâp_up°ªam_º_≥î_t
;

41 
ngx_hâp_up°ªam_º_≥îs_s
 
	tngx_hâp_up°ªam_º_≥îs_t
;

43 
	sngx_hâp_up°ªam_º_≥îs_s
 {

44 
ngx_uöt_t
 
	mnumbî
;

45 
ngx_uöt_t
 
	mœ°_ˇched
;

48 
ngx_c⁄√˘i⁄_t
 **
	mˇched
;

50 
ngx_uöt_t
 
	mtŸÆ_weight
;

52 
	msögÀ
:1;

53 
	mweighãd
:1;

55 
ngx_°r_t
 *
	m«me
;

57 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m√xt
;

59 
ngx_hâp_up°ªam_º_≥î_t
 
	m≥î
[1];

64 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m≥îs
;

65 
ngx_uöt_t
 
	mcuºít
;

66 
uöçå_t
 *
	måõd
;

67 
uöçå_t
 
	md©a
;

68 } 
	tngx_hâp_up°ªam_º_≥î_d©a_t
;

71 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

72 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

73 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

75 
ngx_öt_t
 
ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
);

77 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

78 *
d©a
);

79 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

80 *
d©a
, 
ngx_uöt_t
 
°©e
);

82 #i‡(
NGX_HTTP_SSL
)

83 
ngx_öt_t


84 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

85 *
d©a
);

86 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

87 *
d©a
);

	@src/http/ngx_http_variables.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

16 
ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

24 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

27 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

33 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

35 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

37 #i‡(
NGX_HAVE_TCP_INFO
)

38 
ngx_öt_t
 
ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

42 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

44 
ngx_öt_t
 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

45 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

46 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

48 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

50 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

52 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

54 
ngx_öt_t
 
ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

56 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

58 
ngx_öt_t
 
ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

62 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

64 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

66 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

68 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

69 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

70 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

71 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

72 
ngx_öt_t
 
ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

74 
ngx_öt_t
 
ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

76 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

78 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

80 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

82 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

84 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

86 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

88 
ngx_öt_t
 
ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

91 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

93 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

95 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

97 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

99 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

101 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

103 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

106 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

108 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

111 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

113 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

114 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

115 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

117 
ngx_öt_t
 
ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

119 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

121 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

140 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_c‹e_v¨übÀs
[] = {

142 { 
ngx_°rög
("hâp_ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

143 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ho°
), 0, 0 },

145 { 
ngx_°rög
("hâp_u£r_agít"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

146 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
u£r_agít
), 0, 0 },

148 { 
ngx_°rög
("hâp_ª„ªr"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

149 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ª„ªr
), 0, 0 },

151 #i‡(
NGX_HTTP_GZIP
)

152 { 
ngx_°rög
("hâp_vü"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

153 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
vü
), 0, 0 },

156 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

157 { 
ngx_°rög
("hâp_x_f‹w¨ded_f‹"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

158 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
x_f‹w¨ded_f‹
), 0, 0 },

161 { 
ngx_°rög
("hâp_cookõ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

162 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
cookõs
), 0, 0 },

164 { 
ngx_°rög
("c⁄ã¡_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

165 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_Àngth
), 0, 0 },

167 { 
ngx_°rög
("c⁄ã¡_ty≥"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

168 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_ty≥
), 0, 0 },

170 { 
ngx_°rög
("ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°
, 0, 0, 0 },

172 { 
ngx_°rög
("bö¨y_ªmŸe_addr"), 
NULL
,

173 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
, 0, 0, 0 },

175 { 
ngx_°rög
("ªmŸe_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_addr
, 0, 0, 0 },

177 { 
ngx_°rög
("ªmŸe_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
, 0, 0, 0 },

179 { 
ngx_°rög
("£rvî_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_addr
, 0, 0, 0 },

181 { 
ngx_°rög
("£rvî_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_p‹t
, 0, 0, 0 },

183 { 
ngx_°rög
("£rvî_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

184 
off£tof
(
ngx_hâp_ªque°_t
, 
hâp_¥Ÿocﬁ
), 0, 0 },

186 { 
ngx_°rög
("scheme"), 
NULL
, 
ngx_hâp_v¨übÀ_scheme
, 0, 0, 0 },

188 { 
ngx_°rög
("hâps"), 
NULL
, 
ngx_hâp_v¨übÀ_hâps
, 0, 0, 0 },

190 { 
ngx_°rög
("ªque°_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

191 
off£tof
(
ngx_hâp_ªque°_t
, 
u≈¨£d_uri
), 0, 0 },

193 { 
ngx_°rög
("uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

194 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

195 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

197 { 
ngx_°rög
("documít_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

198 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

199 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

201 { 
ngx_°rög
("ªque°"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_löe
, 0, 0, 0 },

203 { 
ngx_°rög
("documít_roŸ"), 
NULL
,

204 
ngx_hâp_v¨übÀ_documít_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

206 { 
ngx_°rög
("ªÆ∑th_roŸ"), 
NULL
,

207 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

209 { 
ngx_°rög
("quîy_°rög"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

210 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

211 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

213 { 
ngx_°rög
("args"),

214 
ngx_hâp_v¨übÀ_ªque°_£t
,

215 
ngx_hâp_v¨übÀ_ªque°
,

216 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

217 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

219 { 
ngx_°rög
("is_¨gs"), 
NULL
, 
ngx_hâp_v¨übÀ_is_¨gs
,

220 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

222 { 
ngx_°rög
("ªque°_fûíame"), 
NULL
,

223 
ngx_hâp_v¨übÀ_ªque°_fûíame
, 0,

224 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

226 { 
ngx_°rög
("£rvî_«me"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_«me
, 0, 0, 0 },

228 { 
ngx_°rög
("ªque°_mëhod"), 
NULL
,

229 
ngx_hâp_v¨übÀ_ªque°_mëhod
, 0,

230 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

232 { 
ngx_°rög
("ªmŸe_u£r"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_u£r
, 0, 0, 0 },

234 { 
ngx_°rög
("byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_byãs_£¡
,

237 { 
ngx_°rög
("body_byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_body_byãs_£¡
,

240 { 
ngx_°rög
("pùe"), 
NULL
, 
ngx_hâp_v¨übÀ_pùe
,

243 { 
ngx_°rög
("ªque°_com∂ëi⁄"), 
NULL
,

244 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
,

247 { 
ngx_°rög
("ªque°_body"), 
NULL
,

248 
ngx_hâp_v¨übÀ_ªque°_body
,

251 { 
ngx_°rög
("ªque°_body_fûe"), 
NULL
,

252 
ngx_hâp_v¨übÀ_ªque°_body_fûe
,

255 { 
ngx_°rög
("ªque°_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_Àngth
,

256 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

258 { 
ngx_°rög
("ªque°_time"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_time
,

259 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

261 { 
ngx_°rög
("°©us"), 
NULL
,

262 
ngx_hâp_v¨übÀ_°©us
, 0,

263 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

265 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_ty≥"), 
NULL
,

266 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
, 0, 0, 0 },

268 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_Àngth"), 
NULL
,

269 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
, 0, 0, 0 },

271 { 
ngx_°rög
("£¡_hâp_loˇti⁄"), 
NULL
,

272 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
, 0, 0, 0 },

274 { 
ngx_°rög
("£¡_hâp_œ°_modifõd"), 
NULL
,

275 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
, 0, 0, 0 },

277 { 
ngx_°rög
("£¡_hâp_c⁄√˘i⁄"), 
NULL
,

278 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
, 0, 0, 0 },

280 { 
ngx_°rög
("£¡_hâp_kìp_Æive"), 
NULL
,

281 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
, 0, 0, 0 },

283 { 
ngx_°rög
("£¡_hâp_å™s„r_ícodög"), 
NULL
,

284 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
, 0, 0, 0 },

286 { 
ngx_°rög
("£¡_hâp_ˇche_c⁄åﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

287 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_out
.
ˇche_c⁄åﬁ
), 0, 0 },

289 { 
ngx_°rög
("limô_øã"), 
ngx_hâp_v¨übÀ_ªque°_£t_size
,

290 
ngx_hâp_v¨übÀ_ªque°_gë_size
,

291 
off£tof
(
ngx_hâp_ªque°_t
, 
limô_øã
),

292 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

294 { 
ngx_°rög
("c⁄√˘i⁄"), 
NULL
,

295 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
, 0, 0, 0 },

297 { 
ngx_°rög
("c⁄√˘i⁄_ªque°s"), 
NULL
,

298 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
, 0, 0, 0 },

300 { 
ngx_°rög
("ngöx_vîsi⁄"), 
NULL
, 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
,

303 { 
ngx_°rög
("ho°«me"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°«me
,

306 { 
ngx_°rög
("pid"), 
NULL
, 
ngx_hâp_v¨übÀ_pid
,

309 { 
ngx_°rög
("m£c"), 
NULL
, 
ngx_hâp_v¨übÀ_m£c
,

310 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

312 { 
ngx_°rög
("time_iso8601"), 
NULL
, 
ngx_hâp_v¨übÀ_time_iso8601
,

313 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

315 { 
ngx_°rög
("time_loˇl"), 
NULL
, 
ngx_hâp_v¨übÀ_time_loˇl
,

316 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

318 #i‡(
NGX_HAVE_TCP_INFO
)

319 { 
ngx_°rög
("t˝öfo_πt"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

320 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

322 { 
ngx_°rög
("t˝öfo_πtv¨"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

323 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

325 { 
ngx_°rög
("t˝öfo_¢d_cwnd"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

326 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

328 { 
ngx_°rög
("t˝öfo_rcv_•a˚"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

329 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

332 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

336 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_nuŒ_vÆue
 =

337 
ngx_hâp_v¨übÀ
("");

338 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_åue_vÆue
 =

339 
ngx_hâp_v¨übÀ
("1");

342 
ngx_hâp_v¨übÀ_t
 *

343 
	$ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

345 
ngx_öt_t
 
rc
;

346 
ngx_uöt_t
 
i
;

347 
ngx_hash_key_t
 *
key
;

348 
ngx_hâp_v¨übÀ_t
 *
v
;

349 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

351 i‡(
«me
->
Àn
 == 0) {

352 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

354  
NULL
;

357 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

359 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

360 
i
 = 0; i < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
; i++) {

361 i‡(
«me
->
Àn
 !
key
[
i
].key.len

362 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
key
[
i
].key.d©a,Çame->
Àn
) != 0)

367 
v
 = 
key
[
i
].
vÆue
;

369 i‡(!(
v
->
Êags
 & 
NGX_HTTP_VAR_CHANGEABLE
)) {

370 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

371 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

372  
NULL
;

375  
v
;

378 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

379 i‡(
v
 =
NULL
) {

380  
NULL
;

383 
v
->
«me
.
Àn
 =Çame->len;

384 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

385 i‡(
v
->
«me
.
d©a
 =
NULL
) {

386  
NULL
;

389 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

391 
v
->
£t_h™dÀr
 = 
NULL
;

392 
v
->
gë_h™dÀr
 = 
NULL
;

393 
v
->
d©a
 = 0;

394 
v
->
Êags
 = flags;

395 
v
->
ödex
 = 0;

397 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v, 0);

399 i‡(
rc
 =
NGX_ERROR
) {

400  
NULL
;

403 i‡(
rc
 =
NGX_BUSY
) {

404 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

405 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", 
«me
);

406  
NULL
;

409  
v
;

410 
	}
}

413 
ngx_öt_t


414 
	$ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

416 
ngx_uöt_t
 
i
;

417 
ngx_hâp_v¨übÀ_t
 *
v
;

418 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

420 i‡(
«me
->
Àn
 == 0) {

421 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

423  
NGX_ERROR
;

426 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

428 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

430 i‡(
v
 =
NULL
) {

431 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
v¨übÀs
, 
cf
->
poﬁ
, 4,

432 (
ngx_hâp_v¨übÀ_t
))

433 !
NGX_OK
)

435  
NGX_ERROR
;

439 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

440 i‡(
«me
->
Àn
 !
v
[
i
].name.len

441 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

446  
i
;

450 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
v¨übÀs
);

451 i‡(
v
 =
NULL
) {

452  
NGX_ERROR
;

455 
v
->
«me
.
Àn
 =Çame->len;

456 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

457 i‡(
v
->
«me
.
d©a
 =
NULL
) {

458  
NGX_ERROR
;

461 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

463 
v
->
£t_h™dÀr
 = 
NULL
;

464 
v
->
gë_h™dÀr
 = 
NULL
;

465 
v
->
d©a
 = 0;

466 
v
->
Êags
 = 0;

467 
v
->
ödex
 = 
cmcf
->
v¨übÀs
.
√…s
 - 1;

469  
v
->
ödex
;

470 
	}
}

473 
ngx_hâp_v¨übÀ_vÆue_t
 *

474 
	$ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

476 
ngx_hâp_v¨übÀ_t
 *
v
;

477 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

479 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

481 i‡(
cmcf
->
v¨übÀs
.
√…s
 <
ödex
) {

482 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

483 "unknow¿v¨übÀ index: %d", 
ödex
);

484  
NULL
;

487 i‡(
r
->
v¨übÀs
[
ödex
].
nŸ_found
 ||Ñ->v¨übÀs[ödex].
vÆid
) {

488  &
r
->
v¨übÀs
[
ödex
];

491 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

493 i‡(
v
[
ödex
].
	`gë_h™dÀr
(
r
, &r->
v¨übÀs
[ödex], v[ödex].
d©a
)

494 =
NGX_OK
)

496 i‡(
v
[
ödex
].
Êags
 & 
NGX_HTTP_VAR_NOCACHEABLE
) {

497 
r
->
v¨übÀs
[
ödex
].
no_ˇchóbÀ
 = 1;

500  &
r
->
v¨übÀs
[
ödex
];

503 
r
->
v¨übÀs
[
ödex
].
vÆid
 = 0;

504 
r
->
v¨übÀs
[
ödex
].
nŸ_found
 = 1;

506  
NULL
;

507 
	}
}

510 
ngx_hâp_v¨übÀ_vÆue_t
 *

511 
	$ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

513 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

515 
v
 = &
r
->
v¨übÀs
[
ödex
];

517 i‡(
v
->
vÆid
 || v->
nŸ_found
) {

518 i‡(!
v
->
no_ˇchóbÀ
) {

519  
v
;

522 
v
->
vÆid
 = 0;

523 
v
->
nŸ_found
 = 0;

526  
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ödex
);

527 
	}
}

530 
ngx_hâp_v¨übÀ_vÆue_t
 *

531 
	$ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
)

533 
ngx_hâp_v¨übÀ_t
 *
v
;

534 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

535 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

537 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

539 
v
 = 
	`ngx_hash_föd
(&
cmcf
->
v¨übÀs_hash
, 
key
, 
«me
->
d©a
,Çame->
Àn
);

541 i‡(
v
) {

542 i‡(
v
->
Êags
 & 
NGX_HTTP_VAR_INDEXED
) {

543  
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
v
->
ödex
);

547 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

549 i‡(
vv
 && 
v
->
	`gë_h™dÀr
(
r
, vv, v->
d©a
Ë=
NGX_OK
) {

550  
vv
;

553  
NULL
;

557 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

558 i‡(
vv
 =
NULL
) {

559  
NULL
;

562 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "http_", 5) == 0) {

564 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_ö
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

565 =
NGX_OK
)

567  
vv
;

570  
NULL
;

573 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "sent_http_", 10) == 0) {

575 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_out
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

576 =
NGX_OK
)

578  
vv
;

581  
NULL
;

584 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "upstream_http_", 14) == 0) {

586 i‡(
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

587 =
NGX_OK
)

589  
vv
;

592  
NULL
;

595 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "cookie_", 7) == 0) {

597 i‡(
	`ngx_hâp_v¨übÀ_cookõ
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

598  
vv
;

601  
NULL
;

604 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "arg_", 4) == 0) {

606 i‡(
	`ngx_hâp_v¨übÀ_¨gumít
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

607  
vv
;

610  
NULL
;

613 
vv
->
nŸ_found
 = 1;

615  
vv
;

616 
	}
}

619 
ngx_öt_t


620 
	$ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

621 
uöçå_t
 
d©a
)

623 
ngx_°r_t
 *
s
;

625 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

627 i‡(
s
->
d©a
) {

628 
v
->
Àn
 = 
s
->len;

629 
v
->
vÆid
 = 1;

630 
v
->
no_ˇchóbÀ
 = 0;

631 
v
->
nŸ_found
 = 0;

632 
v
->
d©a
 = 
s
->data;

635 
v
->
nŸ_found
 = 1;

638  
NGX_OK
;

639 
	}
}

643 
	$ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

644 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

646 
ngx_°r_t
 *
s
;

648 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

650 
s
->
Àn
 = 
v
->len;

651 
s
->
d©a
 = 
v
->data;

652 
	}
}

655 
ngx_öt_t


656 
	$ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

657 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

659 
size_t
 *
•
;

661 
•
 = (
size_t
 *Ë((*Ë
r
 + 
d©a
);

663 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
);

664 i‡(
v
->
d©a
 =
NULL
) {

665  
NGX_ERROR
;

668 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", *
•
) - v->data;

669 
v
->
vÆid
 = 1;

670 
v
->
no_ˇchóbÀ
 = 0;

671 
v
->
nŸ_found
 = 0;

673  
NGX_OK
;

674 
	}
}

678 
	$ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

679 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

681 
ssize_t
 
s
, *
•
;

682 
ngx_°r_t
 
vÆ
;

684 
vÆ
.
Àn
 = 
v
->len;

685 
vÆ
.
d©a
 = 
v
->data;

687 
s
 = 
	`ngx_∑r£_size
(&
vÆ
);

689 i‡(
s
 =
NGX_ERROR
) {

690 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

691 "övÆid sizê\"%V\"", &
vÆ
);

695 
•
 = (
ssize_t
 *Ë((*Ë
r
 + 
d©a
);

697 *
•
 = 
s
;

700 
	}
}

703 
ngx_öt_t


704 
	$ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

705 
uöçå_t
 
d©a
)

707 
ngx_èbÀ_ñt_t
 *
h
;

709 
h
 = *(
ngx_èbÀ_ñt_t
 **Ë((*Ë
r
 + 
d©a
);

711 i‡(
h
) {

712 
v
->
Àn
 = 
h
->
vÆue
.len;

713 
v
->
vÆid
 = 1;

714 
v
->
no_ˇchóbÀ
 = 0;

715 
v
->
nŸ_found
 = 0;

716 
v
->
d©a
 = 
h
->
vÆue
.data;

719 
v
->
nŸ_found
 = 1;

722  
NGX_OK
;

723 
	}
}

726 
ngx_öt_t


727 
	$ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

728 
uöçå_t
 
d©a
)

730 
size_t
 
Àn
;

731 
u_ch¨
 *
p
, *
íd
;

732 
ngx_uöt_t
 
i
, 
n
;

733 
ngx_¨øy_t
 *
a
;

734 
ngx_èbÀ_ñt_t
 **
h
;

736 
a
 = (
ngx_¨øy_t
 *Ë((*Ë
r
 + 
d©a
);

738 
n
 = 
a
->
√…s
;

739 
h
 = 
a
->
ñts
;

741 
Àn
 = 0;

743 
i
 = 0; i < 
n
; i++) {

745 i‡(
h
[
i
]->
hash
 == 0) {

749 
Àn
 +
h
[
i
]->
vÆue
.len + ("; ") - 1;

752 i‡(
Àn
 == 0) {

753 
v
->
nŸ_found
 = 1;

754  
NGX_OK
;

757 
Àn
 -= ("; ") - 1;

759 
v
->
vÆid
 = 1;

760 
v
->
no_ˇchóbÀ
 = 0;

761 
v
->
nŸ_found
 = 0;

763 i‡(
n
 == 1) {

764 
v
->
Àn
 = (*
h
)->
vÆue
.len;

765 
v
->
d©a
 = (*
h
)->
vÆue
.data;

767  
NGX_OK
;

770 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

771 i‡(
p
 =
NULL
) {

772  
NGX_ERROR
;

775 
v
->
Àn
 =Üen;

776 
v
->
d©a
 = 
p
;

778 
íd
 = 
p
 + 
Àn
;

780 
i
 = 0; ; i++) {

782 i‡(
h
[
i
]->
hash
 == 0) {

786 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

788 i‡(
p
 =
íd
) {

792 *
p
++ = ';'; *p++ = ' ';

795  
NGX_OK
;

796 
	}
}

799 
ngx_öt_t


800 
	$ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

801 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

803  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

804 &
r
->
hódîs_ö
.
hódîs
.
∑π
,

806 
	}
}

809 
ngx_öt_t


810 
	$ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

811 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

813  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

814 &
r
->
hódîs_out
.
hódîs
.
∑π
,

816 
	}
}

819 
ngx_öt_t


820 
	$ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
v¨
,

821 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
)

823 
u_ch¨
 
ch
;

824 
ngx_uöt_t
 
i
, 
n
;

825 
ngx_èbÀ_ñt_t
 *
hódî
;

827 
hódî
 = 
∑π
->
ñts
;

829 
i
 = 0; ; i++) {

831 i‡(
i
 >
∑π
->
√…s
) {

832 i‡(
∑π
->
√xt
 =
NULL
) {

836 
∑π
 =Ö¨t->
√xt
;

837 
hódî
 = 
∑π
->
ñts
;

838 
i
 = 0;

841 i‡(
hódî
[
i
].
hash
 == 0) {

845 
n
 = 0;Ç + 
¥efix
 < 
v¨
->
Àn
 &&Ç < 
hódî
[
i
].
key
.len;Ç++) {

846 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

848 i‡(
ch
 >= 'A' && ch <= 'Z') {

849 
ch
 |= 0x20;

851 } i‡(
ch
 == '-') {

852 
ch
 = '_';

855 i‡(
v¨
->
d©a
[
n
 + 
¥efix
] !
ch
) {

860 i‡(
n
 + 
¥efix
 =
v¨
->
Àn
 &&Ç =
hódî
[
i
].
key
.len) {

861 
v
->
Àn
 = 
hódî
[
i
].
vÆue
.len;

862 
v
->
vÆid
 = 1;

863 
v
->
no_ˇchóbÀ
 = 0;

864 
v
->
nŸ_found
 = 0;

865 
v
->
d©a
 = 
hódî
[
i
].
vÆue
.data;

867  
NGX_OK
;

871 
v
->
nŸ_found
 = 1;

873  
NGX_OK
;

874 
	}
}

877 
ngx_öt_t


878 
	$ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

879 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

881 
u_ch¨
 *
p
, *
s
;

883 
s
 = 
r
->
ªque°_löe
.
d©a
;

885 i‡(
s
 =
NULL
) {

886 
s
 = 
r
->
ªque°_°¨t
;

888 i‡(
s
 =
NULL
) {

889 
v
->
nŸ_found
 = 1;

890  
NGX_OK
;

893 
p
 = 
s
;Ö < 
r
->
hódî_ö
->
œ°
;Ö++) {

894 i‡(*
p
 =
CR
 || *∞=
LF
) {

899 
r
->
ªque°_löe
.
Àn
 = 
p
 - 
s
;

900 
r
->
ªque°_löe
.
d©a
 = 
s
;

903 
v
->
Àn
 = 
r
->
ªque°_löe
.len;

904 
v
->
vÆid
 = 1;

905 
v
->
no_ˇchóbÀ
 = 0;

906 
v
->
nŸ_found
 = 0;

907 
v
->
d©a
 = 
s
;

909  
NGX_OK
;

910 
	}
}

913 
ngx_öt_t


914 
	$ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

915 
uöçå_t
 
d©a
)

917 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

919 
ngx_°r_t
 
cookõ
, 
s
;

921 
s
.
Àn
 = 
«me
->len - (("cookie_") - 1);

922 
s
.
d©a
 = 
«me
->data + ("cookie_") - 1;

924 i‡(
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
s
, &
cookõ
)

925 =
NGX_DECLINED
)

927 
v
->
nŸ_found
 = 1;

928  
NGX_OK
;

931 
v
->
Àn
 = 
cookõ
.len;

932 
v
->
vÆid
 = 1;

933 
v
->
no_ˇchóbÀ
 = 0;

934 
v
->
nŸ_found
 = 0;

935 
v
->
d©a
 = 
cookõ
.data;

937  
NGX_OK
;

938 
	}
}

941 
ngx_öt_t


942 
	$ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

943 
uöçå_t
 
d©a
)

945 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

947 
u_ch¨
 *
¨g
;

948 
size_t
 
Àn
;

949 
ngx_°r_t
 
vÆue
;

951 
Àn
 = 
«me
->len - (("arg_") - 1);

952 
¨g
 = 
«me
->
d©a
 + ("arg_") - 1;

954 i‡(
	`ngx_hâp_¨g
(
r
, 
¨g
, 
Àn
, &
vÆue
Ë!
NGX_OK
) {

955 
v
->
nŸ_found
 = 1;

956  
NGX_OK
;

959 
v
->
d©a
 = 
vÆue
.data;

960 
v
->
Àn
 = 
vÆue
.len;

961 
v
->
vÆid
 = 1;

962 
v
->
no_ˇchóbÀ
 = 0;

963 
v
->
nŸ_found
 = 0;

965  
NGX_OK
;

966 
	}
}

969 #i‡(
NGX_HAVE_TCP_INFO
)

971 
ngx_öt_t


972 
	$ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

973 
uöçå_t
 
d©a
)

975 
t˝_öfo
 
ti
;

976 
sockÀn_t
 
Àn
;

977 
uöt32_t
 
vÆue
;

979 
Àn
 = (
t˝_öfo
);

980 i‡(
	`gësock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_INFO
, &
ti
, &
Àn
) == -1) {

981 
v
->
nŸ_found
 = 1;

982  
NGX_OK
;

985 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
);

986 i‡(
v
->
d©a
 =
NULL
) {

987  
NGX_ERROR
;

990 
d©a
) {

992 
vÆue
 = 
ti
.
t˝i_πt
;

996 
vÆue
 = 
ti
.
t˝i_πtv¨
;

1000 
vÆue
 = 
ti
.
t˝i_¢d_cwnd
;

1004 
vÆue
 = 
ti
.
t˝i_rcv_•a˚
;

1009 
vÆue
 = 0;

1013 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uD", 
vÆue
) - v->data;

1014 
v
->
vÆid
 = 1;

1015 
v
->
no_ˇchóbÀ
 = 0;

1016 
v
->
nŸ_found
 = 0;

1018  
NGX_OK
;

1019 
	}
}

1024 
ngx_öt_t


1025 
	$ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1026 
uöçå_t
 
d©a
)

1028 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1030 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1031 
v
->
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

1032 
v
->
d©a
 = 
r
->
hódîs_ö
.
£rvî
.data;

1035 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1037 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1038 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1041 
v
->
vÆid
 = 1;

1042 
v
->
no_ˇchóbÀ
 = 0;

1043 
v
->
nŸ_found
 = 0;

1045  
NGX_OK
;

1046 
	}
}

1049 
ngx_öt_t


1050 
	$ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1051 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1053 
sockaddr_ö
 *
sö
;

1054 #i‡(
NGX_HAVE_INET6
)

1055 
sockaddr_ö6
 *
sö6
;

1057 #i‡(
NGX_HAVE_SERVAL
)

1058 
sockaddr_sv
 *
ssv
;

1061 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1063 #i‡(
NGX_HAVE_INET6
)

1064 
AF_INET6
:

1065 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1067 
v
->
Àn
 = (
ö6_addr
);

1068 
v
->
vÆid
 = 1;

1069 
v
->
no_ˇchóbÀ
 = 0;

1070 
v
->
nŸ_found
 = 0;

1071 
v
->
d©a
 = 
sö6
->
sö6_addr
.
s6_addr
;

1076 #i‡(
NGX_HAVE_SERVAL
)

1077 
AF_SERVAL
:

1078 
ssv
 = (
sockaddr_sv
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1080 
v
->
Àn
 = (
£rvi˚_id
);

1081 
v
->
vÆid
 = 1;

1082 
v
->
no_ˇchóbÀ
 = 0;

1083 
v
->
nŸ_found
 = 0;

1084 
v
->
d©a
 = 
ssv
->
sv_§vid
.
s_sid
;

1090 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1092 
v
->
Àn
 = (
ö_addr_t
);

1093 
v
->
vÆid
 = 1;

1094 
v
->
no_ˇchóbÀ
 = 0;

1095 
v
->
nŸ_found
 = 0;

1096 
v
->
d©a
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

1101  
NGX_OK
;

1102 
	}
}

1105 
ngx_öt_t


1106 
	$ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1109 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

1110 
v
->
vÆid
 = 1;

1111 
v
->
no_ˇchóbÀ
 = 0;

1112 
v
->
nŸ_found
 = 0;

1113 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

1115  
NGX_OK
;

1116 
	}
}

1119 
ngx_öt_t


1120 
	$ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1121 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1123 
ngx_uöt_t
 
p‹t
;

1124 
sockaddr_ö
 *
sö
;

1125 #i‡(
NGX_HAVE_INET6
)

1126 
sockaddr_ö6
 *
sö6
;

1129 
v
->
Àn
 = 0;

1130 
v
->
vÆid
 = 1;

1131 
v
->
no_ˇchóbÀ
 = 0;

1132 
v
->
nŸ_found
 = 0;

1134 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1135 i‡(
v
->
d©a
 =
NULL
) {

1136  
NGX_ERROR
;

1139 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1141 #i‡(
NGX_HAVE_INET6
)

1142 
AF_INET6
:

1143 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1144 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1148 #i‡(
NGX_HAVE_SERVAL
)

1149 
AF_INET6
:

1150 
p‹t
 = 0;

1155 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1156 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1160 i‡(
p‹t
 > 0 &&Öort < 65536) {

1161 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1164  
NGX_OK
;

1165 
	}
}

1168 
ngx_öt_t


1169 
	$ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

1170 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1172 
ngx_°r_t
 
s
;

1173 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

1175 
s
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

1176 
s
.
d©a
 = 
addr
;

1178 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, &
s
, 0Ë!
NGX_OK
) {

1179  
NGX_ERROR
;

1182 
s
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, s.
Àn
);

1183 i‡(
s
.
d©a
 =
NULL
) {

1184  
NGX_ERROR
;

1187 
	`ngx_mem˝y
(
s
.
d©a
, 
addr
, s.
Àn
);

1189 
v
->
Àn
 = 
s
.len;

1190 
v
->
vÆid
 = 1;

1191 
v
->
no_ˇchóbÀ
 = 0;

1192 
v
->
nŸ_found
 = 0;

1193 
v
->
d©a
 = 
s
.data;

1195  
NGX_OK
;

1196 
	}
}

1199 
ngx_öt_t


1200 
	$ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1201 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1203 
ngx_uöt_t
 
p‹t
;

1204 
sockaddr_ö
 *
sö
;

1205 #i‡(
NGX_HAVE_INET6
)

1206 
sockaddr_ö6
 *
sö6
;

1209 
v
->
Àn
 = 0;

1210 
v
->
vÆid
 = 1;

1211 
v
->
no_ˇchóbÀ
 = 0;

1212 
v
->
nŸ_found
 = 0;

1214 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, 
NULL
, 0Ë!
NGX_OK
) {

1215  
NGX_ERROR
;

1218 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1219 i‡(
v
->
d©a
 =
NULL
) {

1220  
NGX_ERROR
;

1223 
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
->
ß_Ámûy
) {

1225 #i‡(
NGX_HAVE_INET6
)

1226 
AF_INET6
:

1227 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1228 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1232 #i‡(
NGX_HAVE_SERVAL
)

1233 
AF_SERVAL
:

1234 
p‹t
 = 0;

1239 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1240 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1244 i‡(
p‹t
 > 0 &&Öort < 65536) {

1245 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1248  
NGX_OK
;

1249 
	}
}

1252 
ngx_öt_t


1253 
	$ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

1254 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1256 #i‡(
NGX_HTTP_SSL
)

1258 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1259 
v
->
Àn
 = ("https") - 1;

1260 
v
->
vÆid
 = 1;

1261 
v
->
no_ˇchóbÀ
 = 0;

1262 
v
->
nŸ_found
 = 0;

1263 
v
->
d©a
 = (
u_ch¨
 *) "https";

1265  
NGX_OK
;

1270 
v
->
Àn
 = ("http") - 1;

1271 
v
->
vÆid
 = 1;

1272 
v
->
no_ˇchóbÀ
 = 0;

1273 
v
->
nŸ_found
 = 0;

1274 
v
->
d©a
 = (
u_ch¨
 *) "http";

1276  
NGX_OK
;

1277 
	}
}

1280 
ngx_öt_t


1281 
	$ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

1282 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1284 #i‡(
NGX_HTTP_SSL
)

1286 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1287 
v
->
Àn
 = ("on") - 1;

1288 
v
->
vÆid
 = 1;

1289 
v
->
no_ˇchóbÀ
 = 0;

1290 
v
->
nŸ_found
 = 0;

1291 
v
->
d©a
 = (
u_ch¨
 *) "on";

1293  
NGX_OK
;

1298 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1300  
NGX_OK
;

1301 
	}
}

1304 
ngx_öt_t


1305 
	$ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1306 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1308 
v
->
vÆid
 = 1;

1309 
v
->
no_ˇchóbÀ
 = 0;

1310 
v
->
nŸ_found
 = 0;

1312 i‡(
r
->
¨gs
.
Àn
 == 0) {

1313 
v
->
Àn
 = 0;

1314 
v
->
d©a
 = 
NULL
;

1315  
NGX_OK
;

1318 
v
->
Àn
 = 1;

1319 
v
->
d©a
 = (
u_ch¨
 *) "?";

1321  
NGX_OK
;

1322 
	}
}

1325 
ngx_öt_t


1326 
	$ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1327 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1329 
ngx_°r_t
 
∑th
;

1330 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1332 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1334 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1335 
v
->
Àn
 = 
˛cf
->
roŸ
.len;

1336 
v
->
vÆid
 = 1;

1337 
v
->
no_ˇchóbÀ
 = 0;

1338 
v
->
nŸ_found
 = 0;

1339 
v
->
d©a
 = 
˛cf
->
roŸ
.data;

1342 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 0,

1343 
˛cf
->
roŸ_vÆues
->
ñts
)

1344 =
NULL
)

1346  
NGX_ERROR
;

1349 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
∑th
, 0Ë!
NGX_OK
) {

1350  
NGX_ERROR
;

1353 
v
->
Àn
 = 
∑th
.len;

1354 
v
->
vÆid
 = 1;

1355 
v
->
no_ˇchóbÀ
 = 0;

1356 
v
->
nŸ_found
 = 0;

1357 
v
->
d©a
 = 
∑th
.data;

1360  
NGX_OK
;

1361 
	}
}

1364 
ngx_öt_t


1365 
	$ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1366 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1368 
u_ch¨
 *
ªÆ
;

1369 
size_t
 
Àn
;

1370 
ngx_°r_t
 
∑th
;

1371 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1372 #i‡(
NGX_HAVE_MAX_PATH
)

1373 
u_ch¨
 
buf„r
[
NGX_MAX_PATH
];

1376 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1378 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1379 
∑th
 = 
˛cf
->
roŸ
;

1382 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 1,

1383 
˛cf
->
roŸ_vÆues
->
ñts
)

1384 =
NULL
)

1386  
NGX_ERROR
;

1389 
∑th
.
d©a
[∑th.
Àn
 - 1] = '\0';

1391 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
∑th
, 0Ë!
NGX_OK
) {

1392  
NGX_ERROR
;

1396 #i‡(
NGX_HAVE_MAX_PATH
)

1397 
ªÆ
 = 
buf„r
;

1399 
ªÆ
 = 
NULL
;

1402 
ªÆ
 = 
	`ngx_ªÆ∑th
(
∑th
.
d©a
,Ñeal);

1404 i‡(
ªÆ
 =
NULL
) {

1405 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1406 
ngx_ªÆ∑th_n
 " \"%s\" faûed", 
∑th
.
d©a
);

1407  
NGX_ERROR
;

1410 
Àn
 = 
	`ngx_°æí
(
ªÆ
);

1412 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1413 i‡(
v
->
d©a
 =
NULL
) {

1414 #i‡!(
NGX_HAVE_MAX_PATH
)

1415 
	`ngx_‰ì
(
ªÆ
);

1417  
NGX_ERROR
;

1420 
v
->
Àn
 =Üen;

1421 
v
->
vÆid
 = 1;

1422 
v
->
no_ˇchóbÀ
 = 0;

1423 
v
->
nŸ_found
 = 0;

1425 
	`ngx_mem˝y
(
v
->
d©a
, 
ªÆ
, 
Àn
);

1427 #i‡!(
NGX_HAVE_MAX_PATH
)

1428 
	`ngx_‰ì
(
ªÆ
);

1431  
NGX_OK
;

1432 
	}
}

1435 
ngx_öt_t


1436 
	$ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

1437 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1439 
size_t
 
roŸ
;

1440 
ngx_°r_t
 
∑th
;

1442 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

1443  
NGX_ERROR
;

1448 
v
->
Àn
 = 
∑th
.len - 1;

1449 
v
->
vÆid
 = 1;

1450 
v
->
no_ˇchóbÀ
 = 0;

1451 
v
->
nŸ_found
 = 0;

1452 
v
->
d©a
 = 
∑th
.data;

1454  
NGX_OK
;

1455 
	}
}

1458 
ngx_öt_t


1459 
	$ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

1460 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1462 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1464 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1466 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1467 
v
->
vÆid
 = 1;

1468 
v
->
no_ˇchóbÀ
 = 0;

1469 
v
->
nŸ_found
 = 0;

1470 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1472  
NGX_OK
;

1473 
	}
}

1476 
ngx_öt_t


1477 
	$ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

1478 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1480 i‡(
r
->
maö
->
mëhod_«me
.
d©a
) {

1481 
v
->
Àn
 = 
r
->
maö
->
mëhod_«me
.len;

1482 
v
->
vÆid
 = 1;

1483 
v
->
no_ˇchóbÀ
 = 0;

1484 
v
->
nŸ_found
 = 0;

1485 
v
->
d©a
 = 
r
->
maö
->
mëhod_«me
.data;

1488 
v
->
nŸ_found
 = 1;

1491  
NGX_OK
;

1492 
	}
}

1495 
ngx_öt_t


1496 
	$ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

1497 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1499 
ngx_öt_t
 
rc
;

1501 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

1503 i‡(
rc
 =
NGX_DECLINED
) {

1504 
v
->
nŸ_found
 = 1;

1505  
NGX_OK
;

1508 i‡(
rc
 =
NGX_ERROR
) {

1509  
NGX_ERROR
;

1512 
v
->
Àn
 = 
r
->
hódîs_ö
.
u£r
.len;

1513 
v
->
vÆid
 = 1;

1514 
v
->
no_ˇchóbÀ
 = 0;

1515 
v
->
nŸ_found
 = 0;

1516 
v
->
d©a
 = 
r
->
hódîs_ö
.
u£r
.data;

1518  
NGX_OK
;

1519 
	}
}

1522 
ngx_öt_t


1523 
	$ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1524 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1526 
u_ch¨
 *
p
;

1528 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1529 i‡(
p
 =
NULL
) {

1530  
NGX_ERROR
;

1533 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
) -Ö;

1534 
v
->
vÆid
 = 1;

1535 
v
->
no_ˇchóbÀ
 = 0;

1536 
v
->
nŸ_found
 = 0;

1537 
v
->
d©a
 = 
p
;

1539  
NGX_OK
;

1540 
	}
}

1543 
ngx_öt_t


1544 
	$ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1545 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1547 
off_t
 
£¡
;

1548 
u_ch¨
 *
p
;

1550 
£¡
 = 
r
->
c⁄√˘i⁄
->£¡ -Ñ->
hódî_size
;

1552 i‡(
£¡
 < 0) {

1553 
£¡
 = 0;

1556 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1557 i‡(
p
 =
NULL
) {

1558  
NGX_ERROR
;

1561 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
£¡
) -Ö;

1562 
v
->
vÆid
 = 1;

1563 
v
->
no_ˇchóbÀ
 = 0;

1564 
v
->
nŸ_found
 = 0;

1565 
v
->
d©a
 = 
p
;

1567  
NGX_OK
;

1568 
	}
}

1571 
ngx_öt_t


1572 
	$ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

1573 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1575 
v
->
d©a
 = (
u_ch¨
 *Ë(
r
->
pùñöe
 ? "p" : ".");

1576 
v
->
Àn
 = 1;

1577 
v
->
vÆid
 = 1;

1578 
v
->
no_ˇchóbÀ
 = 0;

1579 
v
->
nŸ_found
 = 0;

1581  
NGX_OK
;

1582 
	}
}

1585 
ngx_öt_t


1586 
	$ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

1587 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1589 
ngx_uöt_t
 
°©us
;

1591 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

1592 i‡(
v
->
d©a
 =
NULL
) {

1593  
NGX_ERROR
;

1596 i‡(
r
->
îr_°©us
) {

1597 
°©us
 = 
r
->
îr_°©us
;

1599 } i‡(
r
->
hódîs_out
.
°©us
) {

1600 
°©us
 = 
r
->
hódîs_out
.status;

1602 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

1603 
°©us
 = 9;

1606 
°©us
 = 0;

1609 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%03ui", 
°©us
) - v->data;

1610 
v
->
vÆid
 = 1;

1611 
v
->
no_ˇchóbÀ
 = 0;

1612 
v
->
nŸ_found
 = 0;

1614  
NGX_OK
;

1615 
	}
}

1618 
ngx_öt_t


1619 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

1620 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1622 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1623 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len;

1624 
v
->
vÆid
 = 1;

1625 
v
->
no_ˇchóbÀ
 = 0;

1626 
v
->
nŸ_found
 = 0;

1627 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.data;

1630 
v
->
nŸ_found
 = 1;

1633  
NGX_OK
;

1634 
	}
}

1637 
ngx_öt_t


1638 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1639 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1641 
u_ch¨
 *
p
;

1643 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

1644 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.len;

1645 
v
->
vÆid
 = 1;

1646 
v
->
no_ˇchóbÀ
 = 0;

1647 
v
->
nŸ_found
 = 0;

1648 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.data;

1650  
NGX_OK
;

1653 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0) {

1654 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1655 i‡(
p
 =
NULL
) {

1656  
NGX_ERROR
;

1659 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
) -Ö;

1660 
v
->
vÆid
 = 1;

1661 
v
->
no_ˇchóbÀ
 = 0;

1662 
v
->
nŸ_found
 = 0;

1663 
v
->
d©a
 = 
p
;

1665  
NGX_OK
;

1668 
v
->
nŸ_found
 = 1;

1670  
NGX_OK
;

1671 
	}
}

1674 
ngx_öt_t


1675 
	$ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1676 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1678 
ngx_°r_t
 
«me
;

1680 i‡(
r
->
hódîs_out
.
loˇti⁄
) {

1681 
v
->
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

1682 
v
->
vÆid
 = 1;

1683 
v
->
no_ˇchóbÀ
 = 0;

1684 
v
->
nŸ_found
 = 0;

1685 
v
->
d©a
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.data;

1687  
NGX_OK
;

1690 
	`ngx_°r_£t
(&
«me
, "sent_http_location");

1692  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, &
«me
,

1693 &
r
->
hódîs_out
.
hódîs
.
∑π
,

1695 
	}
}

1698 
ngx_öt_t


1699 
	$ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

1700 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1702 
u_ch¨
 *
p
;

1704 i‡(
r
->
hódîs_out
.
œ°_modifõd
) {

1705 
v
->
Àn
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.len;

1706 
v
->
vÆid
 = 1;

1707 
v
->
no_ˇchóbÀ
 = 0;

1708 
v
->
nŸ_found
 = 0;

1709 
v
->
d©a
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.data;

1711  
NGX_OK
;

1714 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 >= 0) {

1715 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1717 i‡(
p
 =
NULL
) {

1718  
NGX_ERROR
;

1721 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
) -Ö;

1722 
v
->
vÆid
 = 1;

1723 
v
->
no_ˇchóbÀ
 = 0;

1724 
v
->
nŸ_found
 = 0;

1725 
v
->
d©a
 = 
p
;

1727  
NGX_OK
;

1730 
v
->
nŸ_found
 = 1;

1732  
NGX_OK
;

1733 
	}
}

1736 
ngx_öt_t


1737 
	$ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1738 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1740 
size_t
 
Àn
;

1741 *
p
;

1743 i‡(
r
->
kì∑live
) {

1744 
Àn
 = ("keep-alive") - 1;

1745 
p
 = "keep-alive";

1748 
Àn
 = ("close") - 1;

1749 
p
 = "close";

1752 
v
->
Àn
 =Üen;

1753 
v
->
vÆid
 = 1;

1754 
v
->
no_ˇchóbÀ
 = 0;

1755 
v
->
nŸ_found
 = 0;

1756 
v
->
d©a
 = (
u_ch¨
 *Ë
p
;

1758  
NGX_OK
;

1759 
	}
}

1762 
ngx_öt_t


1763 
	$ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

1764 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1766 
u_ch¨
 *
p
;

1767 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1769 i‡(
r
->
kì∑live
) {

1770 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1772 i‡(
˛cf
->
kì∑live_hódî
) {

1774 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("timeout="Ë- 1 + 
NGX_TIME_T_LEN
);

1775 i‡(
p
 =
NULL
) {

1776  
NGX_ERROR
;

1779 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "timeout=%T", 
˛cf
->
kì∑live_hódî
) -Ö;

1780 
v
->
vÆid
 = 1;

1781 
v
->
no_ˇchóbÀ
 = 0;

1782 
v
->
nŸ_found
 = 0;

1783 
v
->
d©a
 = 
p
;

1785  
NGX_OK
;

1789 
v
->
nŸ_found
 = 1;

1791  
NGX_OK
;

1792 
	}
}

1795 
ngx_öt_t


1796 
	$ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

1797 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1799 i‡(
r
->
chunked
) {

1800 
v
->
Àn
 = ("chunked") - 1;

1801 
v
->
vÆid
 = 1;

1802 
v
->
no_ˇchóbÀ
 = 0;

1803 
v
->
nŸ_found
 = 0;

1804 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

1807 
v
->
nŸ_found
 = 1;

1810  
NGX_OK
;

1811 
	}
}

1814 
ngx_öt_t


1815 
	$ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

1816 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1818 i‡(
r
->
ªque°_com∂ëe
) {

1819 
v
->
Àn
 = 2;

1820 
v
->
vÆid
 = 1;

1821 
v
->
no_ˇchóbÀ
 = 0;

1822 
v
->
nŸ_found
 = 0;

1823 
v
->
d©a
 = (
u_ch¨
 *) "OK";

1825  
NGX_OK
;

1828 
v
->
Àn
 = 0;

1829 
v
->
vÆid
 = 1;

1830 
v
->
no_ˇchóbÀ
 = 0;

1831 
v
->
nŸ_found
 = 0;

1832 
v
->
d©a
 = (
u_ch¨
 *) "";

1834  
NGX_OK
;

1835 
	}
}

1838 
ngx_öt_t


1839 
	$ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

1840 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1842 
u_ch¨
 *
p
;

1843 
size_t
 
Àn
;

1844 
ngx_buf_t
 *
buf
;

1845 
ngx_chaö_t
 *
˛
;

1847 i‡(
r
->
ªque°_body
 =
NULL


1848 || 
r
->
ªque°_body
->
bufs
 =
NULL


1849 || 
r
->
ªque°_body
->
ãmp_fûe
)

1851 
v
->
nŸ_found
 = 1;

1853  
NGX_OK
;

1856 
˛
 = 
r
->
ªque°_body
->
bufs
;

1857 
buf
 = 
˛
->buf;

1859 i‡(
˛
->
√xt
 =
NULL
) {

1860 
v
->
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1861 
v
->
vÆid
 = 1;

1862 
v
->
no_ˇchóbÀ
 = 0;

1863 
v
->
nŸ_found
 = 0;

1864 
v
->
d©a
 = 
buf
->
pos
;

1866  
NGX_OK
;

1869 
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1870 
˛
 = cl->
√xt
;

1872  ; 
˛
; c»˛->
√xt
) {

1873 
buf
 = 
˛
->buf;

1874 
Àn
 +
buf
->
œ°
 - buf->
pos
;

1877 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1878 i‡(
p
 =
NULL
) {

1879  
NGX_ERROR
;

1882 
v
->
d©a
 = 
p
;

1883 
˛
 = 
r
->
ªque°_body
->
bufs
;

1885  ; 
˛
; c»˛->
√xt
) {

1886 
buf
 = 
˛
->buf;

1887 
p
 = 
	`ngx_˝ymem
’, 
buf
->
pos
, buf->
œ°
 - buf->pos);

1890 
v
->
Àn
 =Üen;

1891 
v
->
vÆid
 = 1;

1892 
v
->
no_ˇchóbÀ
 = 0;

1893 
v
->
nŸ_found
 = 0;

1895  
NGX_OK
;

1896 
	}
}

1899 
ngx_öt_t


1900 
	$ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

1901 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1903 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

1904 
v
->
nŸ_found
 = 1;

1906  
NGX_OK
;

1909 
v
->
Àn
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.len;

1910 
v
->
vÆid
 = 1;

1911 
v
->
no_ˇchóbÀ
 = 0;

1912 
v
->
nŸ_found
 = 0;

1913 
v
->
d©a
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.data;

1915  
NGX_OK
;

1916 
	}
}

1919 
ngx_öt_t


1920 
	$ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1921 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1923 
u_ch¨
 *
p
;

1925 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1926 i‡(
p
 =
NULL
) {

1927  
NGX_ERROR
;

1930 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
ªque°_Àngth
) -Ö;

1931 
v
->
vÆid
 = 1;

1932 
v
->
no_ˇchóbÀ
 = 0;

1933 
v
->
nŸ_found
 = 0;

1934 
v
->
d©a
 = 
p
;

1936  
NGX_OK
;

1937 
	}
}

1940 
ngx_öt_t


1941 
	$ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

1942 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1944 
u_ch¨
 *
p
;

1945 
ngx_time_t
 *
ç
;

1946 
ngx_m£c_öt_t
 
ms
;

1948 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

1949 i‡(
p
 =
NULL
) {

1950  
NGX_ERROR
;

1953 
ç
 = 
	`ngx_timeofday
();

1955 
ms
 = (
ngx_m£c_öt_t
)

1956 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

1957 
ms
 = 
	`ngx_max
(ms, 0);

1959 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ms
 / 1000, ms % 1000) -Ö;

1960 
v
->
vÆid
 = 1;

1961 
v
->
no_ˇchóbÀ
 = 0;

1962 
v
->
nŸ_found
 = 0;

1963 
v
->
d©a
 = 
p
;

1965  
NGX_OK
;

1966 
	}
}

1969 
ngx_öt_t


1970 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1971 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1973 
u_ch¨
 *
p
;

1975 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

1976 i‡(
p
 =
NULL
) {

1977  
NGX_ERROR
;

1980 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
r
->
c⁄√˘i⁄
->
numbî
) -Ö;

1981 
v
->
vÆid
 = 1;

1982 
v
->
no_ˇchóbÀ
 = 0;

1983 
v
->
nŸ_found
 = 0;

1984 
v
->
d©a
 = 
p
;

1986  
NGX_OK
;

1987 
	}
}

1990 
ngx_öt_t


1991 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

1992 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1994 
u_ch¨
 *
p
;

1996 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

1997 i‡(
p
 =
NULL
) {

1998  
NGX_ERROR
;

2001 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%ui", 
r
->
c⁄√˘i⁄
->
ªque°s
) -Ö;

2002 
v
->
vÆid
 = 1;

2003 
v
->
no_ˇchóbÀ
 = 0;

2004 
v
->
nŸ_found
 = 0;

2005 
v
->
d©a
 = 
p
;

2007  
NGX_OK
;

2008 
	}
}

2011 
ngx_öt_t


2012 
	$ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

2013 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2015 
v
->
Àn
 = (
NGINX_VERSION
) - 1;

2016 
v
->
vÆid
 = 1;

2017 
v
->
no_ˇchóbÀ
 = 0;

2018 
v
->
nŸ_found
 = 0;

2019 
v
->
d©a
 = (
u_ch¨
 *Ë
NGINX_VERSION
;

2021  
NGX_OK
;

2022 
	}
}

2025 
ngx_öt_t


2026 
	$ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

2027 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2029 
v
->
Àn
 = 
ngx_cy˛e
->
ho°«me
.len;

2030 
v
->
vÆid
 = 1;

2031 
v
->
no_ˇchóbÀ
 = 0;

2032 
v
->
nŸ_found
 = 0;

2033 
v
->
d©a
 = 
ngx_cy˛e
->
ho°«me
.data;

2035  
NGX_OK
;

2036 
	}
}

2039 
ngx_öt_t


2040 
	$ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

2041 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2043 
u_ch¨
 *
p
;

2045 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

2046 i‡(
p
 =
NULL
) {

2047  
NGX_ERROR
;

2050 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%P", 
ngx_pid
) -Ö;

2051 
v
->
vÆid
 = 1;

2052 
v
->
no_ˇchóbÀ
 = 0;

2053 
v
->
nŸ_found
 = 0;

2054 
v
->
d©a
 = 
p
;

2056  
NGX_OK
;

2057 
	}
}

2060 
ngx_öt_t


2061 
	$ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

2062 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2064 
u_ch¨
 *
p
;

2065 
ngx_time_t
 *
ç
;

2067 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2068 i‡(
p
 =
NULL
) {

2069  
NGX_ERROR
;

2072 
ç
 = 
	`ngx_timeofday
();

2074 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
) -Ö;

2075 
v
->
vÆid
 = 1;

2076 
v
->
no_ˇchóbÀ
 = 0;

2077 
v
->
nŸ_found
 = 0;

2078 
v
->
d©a
 = 
p
;

2080  
NGX_OK
;

2081 
	}
}

2084 
ngx_öt_t


2085 
	$ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

2086 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2088 
u_ch¨
 *
p
;

2090 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2091 i‡(
p
 =
NULL
) {

2092  
NGX_ERROR
;

2095 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

2096 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2098 
v
->
Àn
 = 
ngx_ˇched_hâp_log_iso8601
.len;

2099 
v
->
vÆid
 = 1;

2100 
v
->
no_ˇchóbÀ
 = 0;

2101 
v
->
nŸ_found
 = 0;

2102 
v
->
d©a
 = 
p
;

2104  
NGX_OK
;

2105 
	}
}

2108 
ngx_öt_t


2109 
	$ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

2110 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2112 
u_ch¨
 *
p
;

2114 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_time
.
Àn
);

2115 i‡(
p
 =
NULL
) {

2116  
NGX_ERROR
;

2119 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_time
.
d©a
,Çgx_ˇched_hâp_log_time.
Àn
);

2121 
v
->
Àn
 = 
ngx_ˇched_hâp_log_time
.len;

2122 
v
->
vÆid
 = 1;

2123 
v
->
no_ˇchóbÀ
 = 0;

2124 
v
->
nŸ_found
 = 0;

2125 
v
->
d©a
 = 
p
;

2127  
NGX_OK
;

2128 
	}
}

2132 
	$ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
, 
ngx_°r_t
 *
m©ch
)

2134 *
vÆue
;

2135 
u_ch¨
 *
low
;

2136 
size_t
 
Àn
;

2137 
ngx_uöt_t
 
key
;

2139 
Àn
 = 
m©ch
->len;

2141 i‡(
Àn
) {

2142 
low
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2143 i‡(
low
 =
NULL
) {

2144  
NULL
;

2148 
low
 = 
NULL
;

2151 
key
 = 
	`ngx_hash_°æow
(
low
, 
m©ch
->
d©a
, 
Àn
);

2153 
vÆue
 = 
	`ngx_hash_föd_comböed
(&
m≠
->
hash
, 
key
, 
low
, 
Àn
);

2154 i‡(
vÆue
) {

2155  
vÆue
;

2158 #i‡(
NGX_PCRE
)

2160 i‡(
Àn
 && 
m≠
->
ƒegex
) {

2161 
ngx_öt_t
 
n
;

2162 
ngx_uöt_t
 
i
;

2163 
ngx_hâp_m≠_ªgex_t
 *
ªg
;

2165 
ªg
 = 
m≠
->
ªgex
;

2167 
i
 = 0; i < 
m≠
->
ƒegex
; i++) {

2169 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
ªg
[
i
].
ªgex
, 
m©ch
);

2171 i‡(
n
 =
NGX_OK
) {

2172  
ªg
[
i
].
vÆue
;

2175 i‡(
n
 =
NGX_DECLINED
) {

2181  
NULL
;

2187  
NULL
;

2188 
	}
}

2191 #i‡(
NGX_PCRE
)

2193 
ngx_öt_t


2194 
	$ngx_hâp_v¨übÀ_nŸ_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

2195 
uöçå_t
 
d©a
)

2197 
v
->
nŸ_found
 = 1;

2198  
NGX_OK
;

2199 
	}
}

2202 
ngx_hâp_ªgex_t
 *

2203 
	$ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_ªgex_compûe_t
 *
rc
)

2205 
u_ch¨
 *
p
;

2206 
size_t
 
size
;

2207 
ngx_°r_t
 
«me
;

2208 
ngx_uöt_t
 
i
, 
n
;

2209 
ngx_hâp_v¨übÀ_t
 *
v
;

2210 
ngx_hâp_ªgex_t
 *
ª
;

2211 
ngx_hâp_ªgex_v¨übÀ_t
 *
rv
;

2212 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2214 
rc
->
poﬁ
 = 
cf
->pool;

2216 i‡(
	`ngx_ªgex_compûe
(
rc
Ë!
NGX_OK
) {

2217 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
->
îr
);

2218  
NULL
;

2221 
ª
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªgex_t
));

2222 i‡(
ª
 =
NULL
) {

2223  
NULL
;

2226 
ª
->
ªgex
 = 
rc
->regex;

2227 
ª
->
nˇ±uªs
 = 
rc
->
ˇ±uªs
;

2229 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2230 
cmcf
->
nˇ±uªs
 = 
	`ngx_max
(cmcf->nˇ±uªs, 
ª
->ncaptures);

2232 
n
 = (
ngx_uöt_t
Ë
rc
->
«med_ˇ±uªs
;

2234 i‡(
n
 == 0) {

2235  
ª
;

2238 
rv
 = 
	`ngx_∑Œoc
(
rc
->
poﬁ
, 
n
 * (
ngx_hâp_ªgex_v¨übÀ_t
));

2239 i‡(
rv
 =
NULL
) {

2240  
NULL
;

2243 
ª
->
v¨übÀs
 = 
rv
;

2244 
ª
->
nv¨übÀs
 = 
n
;

2245 
ª
->
«me
 = 
rc
->
∑âîn
;

2247 
size
 = 
rc
->
«me_size
;

2248 
p
 = 
rc
->
«mes
;

2250 
i
 = 0; i < 
n
; i++) {

2251 
rv
[
i
].
ˇ±uª
 = 2 * ((
p
[0] << 8) +Ö[1]);

2253 
«me
.
d©a
 = &
p
[2];

2254 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

2256 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

2257 i‡(
v
 =
NULL
) {

2258  
NULL
;

2261 
rv
[
i
].
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

2262 i‡(
rv
[
i
].
ödex
 =
NGX_ERROR
) {

2263  
NULL
;

2266 
v
->
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_nŸ_found
;

2268 
p
 +
size
;

2271  
ª
;

2272 
	}
}

2275 
ngx_öt_t


2276 
	$ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
, 
ngx_°r_t
 *
s
)

2278 
ngx_öt_t
 
rc
, 
ödex
;

2279 
ngx_uöt_t
 
i
, 
n
, 
Àn
;

2280 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2281 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2283 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2285 i‡(
ª
->
nˇ±uªs
) {

2286 
Àn
 = 
cmcf
->
nˇ±uªs
;

2288 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2289 
r
->
ˇ±uªs
 = 
	`ngx_∑Œoc
‘->
poﬁ
, 
Àn
 * ());

2290 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2291  
NGX_ERROR
;

2296 
Àn
 = 0;

2299 
rc
 = 
	`ngx_ªgex_exec
(
ª
->
ªgex
, 
s
, 
r
->
ˇ±uªs
, 
Àn
);

2301 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

2302  
NGX_DECLINED
;

2305 i‡(
rc
 < 0) {

2306 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2307 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2308 
rc
, 
s
, &
ª
->
«me
);

2309  
NGX_ERROR
;

2312 
i
 = 0; i < 
ª
->
nv¨übÀs
; i++) {

2314 
n
 = 
ª
->
v¨übÀs
[
i
].
ˇ±uª
;

2315 
ödex
 = 
ª
->
v¨übÀs
[
i
].index;

2316 
vv
 = &
r
->
v¨übÀs
[
ödex
];

2318 
vv
->
Àn
 = 
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

2319 
vv
->
vÆid
 = 1;

2320 
vv
->
no_ˇchóbÀ
 = 0;

2321 
vv
->
nŸ_found
 = 0;

2322 
vv
->
d©a
 = &
s
->d©a[
r
->
ˇ±uªs
[
n
]];

2324 #i‡(
NGX_DEBUG
)

2326 
ngx_hâp_v¨übÀ_t
 *
v
;

2328 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2330 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2332 &
v
[
ödex
].
«me
, 
vv
->
Àn
, vv->
d©a
);

2337 
r
->
nˇ±uªs
 = 
rc
 * 2;

2338 
r
->
ˇ±uªs_d©a
 = 
s
->
d©a
;

2340  
NGX_OK
;

2341 
	}
}

2346 
ngx_öt_t


2347 
	$ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
)

2349 
ngx_öt_t
 
rc
;

2350 
ngx_hâp_v¨übÀ_t
 *
cv
, *
v
;

2351 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2353 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2355 
cmcf
->
v¨übÀs_keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
,

2356 (
ngx_hash_keys_¨øys_t
));

2357 i‡(
cmcf
->
v¨übÀs_keys
 =
NULL
) {

2358  
NGX_ERROR
;

2361 
cmcf
->
v¨übÀs_keys
->
poﬁ
 = 
cf
->pool;

2362 
cmcf
->
v¨übÀs_keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

2364 i‡(
	`ngx_hash_keys_¨øy_öô
(
cmcf
->
v¨übÀs_keys
, 
NGX_HASH_SMALL
)

2365 !
NGX_OK
)

2367  
NGX_ERROR
;

2370 
cv
 = 
ngx_hâp_c‹e_v¨übÀs
; cv->
«me
.
Àn
; cv++) {

2371 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

2372 i‡(
v
 =
NULL
) {

2373  
NGX_ERROR
;

2376 *
v
 = *
cv
;

2378 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v,

2379 
NGX_HASH_READONLY_KEY
);

2381 i‡(
rc
 =
NGX_OK
) {

2385 i‡(
rc
 =
NGX_BUSY
) {

2386 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2387 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", &
v
->
«me
);

2390  
NGX_ERROR
;

2393  
NGX_OK
;

2394 
	}
}

2397 
ngx_öt_t


2398 
	$ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
)

2400 
ngx_uöt_t
 
i
, 
n
;

2401 
ngx_hash_key_t
 *
key
;

2402 
ngx_hash_öô_t
 
hash
;

2403 
ngx_hâp_v¨übÀ_t
 *
v
, *
av
;

2404 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2408 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2410 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2411 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

2413 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

2415 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2417 
av
 = 
key
[
n
].
vÆue
;

2419 i‡(
av
->
gë_h™dÀr


2420 && 
v
[
i
].
«me
.
Àn
 =
key
[
n
].key.len

2421 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
key
[
n
].key.d©a, v[i].«me.
Àn
)

2424 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

2425 
v
[
i
].
d©a
 = 
av
->data;

2427 
av
->
Êags
 |
NGX_HTTP_VAR_INDEXED
;

2428 
v
[
i
].
Êags
 = 
av
->flags;

2430 
av
->
ödex
 = 
i
;

2432 
√xt
;

2436 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "http_", 5) == 0) {

2437 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_ö
;

2438 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2443 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "sent_http_", 10) == 0) {

2444 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_out
;

2445 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2450 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "upstream_http_", 14) == 0) {

2451 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_up°ªam_hódî_v¨übÀ
;

2452 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2453 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2458 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "cookie_", 7) == 0) {

2459 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_cookõ
;

2460 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2465 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "arg_", 4) == 0) {

2466 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_¨gumít
;

2467 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2468 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2473 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2474 "unknow¿\"%V\" v¨übÀ", &
v
[
i
].
«me
);

2476  
NGX_ERROR
;

2478 
√xt
:

2483 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2484 
av
 = 
key
[
n
].
vÆue
;

2486 i‡(
av
->
Êags
 & 
NGX_HTTP_VAR_NOHASH
) {

2487 
key
[
n
].key.
d©a
 = 
NULL
;

2492 
hash
.hash = &
cmcf
->
v¨übÀs_hash
;

2493 
hash
.
key
 = 
ngx_hash_key
;

2494 
hash
.
max_size
 = 
cmcf
->
v¨übÀs_hash_max_size
;

2495 
hash
.
buckë_size
 = 
cmcf
->
v¨übÀs_hash_buckë_size
;

2496 
hash
.
«me
 = "variables_hash";

2497 
hash
.
poﬁ
 = 
cf
->pool;

2498 
hash
.
ãmp_poﬁ
 = 
NULL
;

2500 i‡(
	`ngx_hash_öô
(&
hash
, 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
,

2501 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
)

2502 !
NGX_OK
)

2504  
NGX_ERROR
;

2507 
cmcf
->
v¨übÀs_keys
 = 
NULL
;

2509  
NGX_OK
;

2510 
	}
}

	@src/http/ngx_http_variables.h

8 #i‚de‡
_NGX_HTTP_VARIABLES_H_INCLUDED_


9 
	#_NGX_HTTP_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_hâp_v¨übÀ_vÆue_t
;

19 
	#ngx_hâp_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_hâp_v¨übÀ_s
 
	tngx_hâp_v¨übÀ_t
;

23 (*
	tngx_hâp_£t_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

24 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_hâp_gë_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

26 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_HTTP_VAR_CHANGEABLE
 1

	)

30 
	#NGX_HTTP_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_HTTP_VAR_INDEXED
 4

	)

32 
	#NGX_HTTP_VAR_NOHASH
 8

	)

35 
	sngx_hâp_v¨übÀ_s
 {

36 
ngx_°r_t
 
«me
;

37 
ngx_hâp_£t_v¨übÀ_±
 
£t_h™dÀr
;

38 
ngx_hâp_gë_v¨übÀ_±
 
gë_h™dÀr
;

39 
uöçå_t
 
d©a
;

40 
ngx_uöt_t
 
Êags
;

41 
ngx_uöt_t
 
ödex
;

45 
ngx_hâp_v¨übÀ_t
 *
	`ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

46 
ngx_uöt_t
 
Êags
);

47 
ngx_öt_t
 
	`ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_uöt_t
 
ödex
);

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_uöt_t
 
ödex
);

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

56 
ngx_öt_t
 
	`ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

57 
ngx_°r_t
 *
v¨
, 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
);

60 #i‡(
NGX_PCRE
)

63 
ngx_uöt_t
 
ˇ±uª
;

64 
ngx_öt_t
 
ödex
;

65 } 
	tngx_hâp_ªgex_v¨übÀ_t
;

69 
ngx_ªgex_t
 *
ªgex
;

70 
ngx_uöt_t
 
nˇ±uªs
;

71 
ngx_hâp_ªgex_v¨übÀ_t
 *
v¨übÀs
;

72 
ngx_uöt_t
 
nv¨übÀs
;

73 
ngx_°r_t
 
«me
;

74 } 
	tngx_hâp_ªgex_t
;

78 
ngx_hâp_ªgex_t
 *
ªgex
;

79 *
vÆue
;

80 } 
	tngx_hâp_m≠_ªgex_t
;

83 
ngx_hâp_ªgex_t
 *
	`ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

84 
ngx_ªgex_compûe_t
 *
rc
);

85 
ngx_öt_t
 
	`ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
,

86 
ngx_°r_t
 *
s
);

92 
ngx_hash_comböed_t
 
hash
;

93 #i‡(
NGX_PCRE
)

94 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

95 
ngx_uöt_t
 
ƒegex
;

97 } 
	tngx_hâp_m≠_t
;

100 *
	`ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
,

101 
ngx_°r_t
 *
m©ch
);

104 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

105 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

109 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_åue_vÆue
;

	@src/http/ngx_http_write_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_hâp_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ_˘x
 = {

17 
NULL
,

18 
ngx_hâp_wrôe_fûãr_öô
,

20 
NULL
,

21 
NULL
,

23 
NULL
,

24 
NULL
,

26 
NULL
,

27 
NULL
,

31 
ngx_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 &
ngx_hâp_wrôe_fûãr_moduÀ_˘x
,

34 
NULL
,

35 
NGX_HTTP_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


47 
ngx_öt_t


48 
	$ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

50 
off_t
 
size
, 
£¡
, 
n£¡
, 
limô
;

51 
ngx_uöt_t
 
œ°
, 
Êush
;

52 
ngx_m£c_t
 
dñay
;

53 
ngx_chaö_t
 *
˛
, *
 
, **
Œ
, *
chaö
;

54 
ngx_c⁄√˘i⁄_t
 *
c
;

55 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

57 
c
 = 
r
->
c⁄√˘i⁄
;

59 i‡(
c
->
îr‹
) {

60  
NGX_ERROR
;

63 
size
 = 0;

64 
Êush
 = 0;

65 
œ°
 = 0;

66 
Œ
 = &
r
->
out
;

70 
˛
 = 
r
->
out
; cl; c»˛->
√xt
) {

71 
Œ
 = &
˛
->
√xt
;

73 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

76 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

77 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

78 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

79 
˛
->
buf
->
fûe_pos
,

80 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

83 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

84 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

87 
˛
->
buf
->
ãmp‹¨y
,

88 
˛
->
buf
->
ªcy˛ed
,

89 
˛
->
buf
->
ö_fûe
,

90 
˛
->
buf
->
°¨t
,

91 
˛
->
buf
->
pos
,

92 
˛
->
buf
->
œ°
,

93 
˛
->
buf
->
fûe
,

94 
˛
->
buf
->
fûe_pos
,

95 
˛
->
buf
->
fûe_œ°
);

97 
	`ngx_debug_poöt
();

98  
NGX_ERROR
;

102 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

104 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

105 
Êush
 = 1;

108 i‡(
˛
->
buf
->
œ°_buf
) {

109 
œ°
 = 1;

115 
 
 = 
ö
;Ün;Ü¿ ->
√xt
) {

116 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

117 i‡(
˛
 =
NULL
) {

118  
NGX_ERROR
;

121 
˛
->
buf
 = 
 
->buf;

122 *
Œ
 = 
˛
;

123 
Œ
 = &
˛
->
√xt
;

125 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

128 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

129 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

130 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

131 
˛
->
buf
->
fûe_pos
,

132 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

135 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

139 
˛
->
buf
->
ãmp‹¨y
,

140 
˛
->
buf
->
ªcy˛ed
,

141 
˛
->
buf
->
ö_fûe
,

142 
˛
->
buf
->
°¨t
,

143 
˛
->
buf
->
pos
,

144 
˛
->
buf
->
œ°
,

145 
˛
->
buf
->
fûe
,

146 
˛
->
buf
->
fûe_pos
,

147 
˛
->
buf
->
fûe_œ°
);

149 
	`ngx_debug_poöt
();

150  
NGX_ERROR
;

154 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

156 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

157 
Êush
 = 1;

160 i‡(
˛
->
buf
->
œ°_buf
) {

161 
œ°
 = 1;

165 *
Œ
 = 
NULL
;

167 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

168 "hâ∞wrôêfûãr:Ü:%d f:%d s:%O", 
œ°
, 
Êush
, 
size
);

170 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

178 i‡(!
œ°
 && !
Êush
 && 
ö
 && 
size
 < (
off_t
Ë
˛cf
->
po°p⁄e_ouçut
) {

179  
NGX_OK
;

182 i‡(
c
->
wrôe
->
dñayed
) {

183 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

184  
NGX_AGAIN
;

187 i‡(
size
 =0 && !(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
)) {

188 i‡(
œ°
 || 
Êush
) {

189 
˛
 = 
r
->
out
; cl; ) {

190 
 
 = 
˛
;

191 
˛
 = cl->
√xt
;

192 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

195 
r
->
out
 = 
NULL
;

196 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

198  
NGX_OK
;

201 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

204 
	`ngx_debug_poöt
();

206  
NGX_ERROR
;

209 i‡(
r
->
limô_øã
) {

210 
limô
 = (
off_t
Ë
r
->
limô_øã
 * (
	`ngx_time
(Ë-Ñ->
°¨t_£c
 + 1)

211 - (
c
->
£¡
 - 
˛cf
->
limô_øã_a·î
);

213 i‡(
limô
 <= 0) {

214 
c
->
wrôe
->
dñayed
 = 1;

215 
	`ngx_add_timî
(
c
->
wrôe
,

216 (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
r
->
limô_øã
 + 1));

218 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

220  
NGX_AGAIN
;

223 i‡(
˛cf
->
£ndfûe_max_chunk


224 && (
off_t
Ë
˛cf
->
£ndfûe_max_chunk
 < 
limô
)

226 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

230 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

233 
£¡
 = 
c
->sent;

235 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

236 "hâ∞wrôêfûã∏limô %O", 
limô
);

238 
chaö
 = 
c
->
	`£nd_chaö
(c, 
r
->
out
, 
limô
);

240 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

241 "hâ∞wrôêfûã∏%p", 
chaö
);

243 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

244 
c
->
îr‹
 = 1;

245  
NGX_ERROR
;

248 i‡(
r
->
limô_øã
) {

250 
n£¡
 = 
c
->
£¡
;

252 i‡(
˛cf
->
limô_øã_a·î
) {

254 
£¡
 -
˛cf
->
limô_øã_a·î
;

255 i‡(
£¡
 < 0) {

256 
£¡
 = 0;

259 
n£¡
 -
˛cf
->
limô_øã_a·î
;

260 i‡(
n£¡
 < 0) {

261 
n£¡
 = 0;

265 
dñay
 = (
ngx_m£c_t
Ë((
n£¡
 - 
£¡
Ë* 1000 / 
r
->
limô_øã
);

267 i‡(
dñay
 > 0) {

268 
limô
 = 0;

269 
c
->
wrôe
->
dñayed
 = 1;

270 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

274 i‡(
limô


275 && 
c
->
wrôe
->
ªady


276 && 
c
->
£¡
 - síà>
limô
 - (
off_t
Ë(2 * 
ngx_∑gesize
))

278 
c
->
wrôe
->
dñayed
 = 1;

279 
	`ngx_add_timî
(
c
->
wrôe
, 1);

282 
˛
 = 
r
->
out
; c»&& c»!
chaö
; ) {

283 
 
 = 
˛
;

284 
˛
 = cl->
√xt
;

285 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

288 
r
->
out
 = 
chaö
;

290 i‡(
chaö
) {

291 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

292  
NGX_AGAIN
;

295 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

297 i‡((
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
Ë&& 
r
->
po°p⁄ed
 =
NULL
) {

298  
NGX_AGAIN
;

301  
NGX_OK
;

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

308 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_wrôe_fûãr
;

310  
NGX_OK
;

311 
	}
}

	@src/mail/ngx_mail.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

16 
ngx_maû_li°í_t
 *
li°í
);

17 *
ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

18 
ngx_öt_t
 
ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

19 
ngx_maû_c⁄f_addr_t
 *
addr
);

20 #i‡(
NGX_HAVE_INET6
)

21 
ngx_öt_t
 
ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

22 
ngx_maû_c⁄f_addr_t
 *
addr
);

24 
ngx_öt_t
 
ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

27 
ngx_uöt_t
 
	gngx_maû_max_moduÀ
;

30 
ngx_comm™d_t
 
	gngx_maû_comm™ds
[] = {

32 { 
ngx_°rög
("mail"),

33 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

34 
ngx_maû_block
,

37 
NULL
 },

39 { 
ngx_°rög
("imap"),

40 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

41 
ngx_maû_block
,

44 
NULL
 },

46 
ngx_nuŒ_comm™d


50 
ngx_c‹e_moduÀ_t
 
	gngx_maû_moduÀ_˘x
 = {

51 
ngx_°rög
("mail"),

52 
NULL
,

53 
NULL


57 
ngx_moduÀ_t
 
	gngx_maû_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_maû_moduÀ_˘x
,

60 
ngx_maû_comm™ds
,

61 
NGX_CORE_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


74 
	$ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

76 *
rv
;

77 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

78 
ngx_c⁄f_t
 
pcf
;

79 
ngx_¨øy_t
 
p‹ts
;

80 
ngx_maû_li°í_t
 *
li°í
;

81 
ngx_maû_moduÀ_t
 *
moduÀ
;

82 
ngx_maû_c⁄f_˘x_t
 *
˘x
;

83 
ngx_maû_c‹e_§v_c⁄f_t
 **
cscÂ
;

84 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

86 i‡(
cmd
->
«me
.
d©a
[0] == 'i') {

87 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

94 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

95 i‡(
˘x
 =
NULL
) {

96  
NGX_CONF_ERROR
;

99 *(
ngx_maû_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

103 
ngx_maû_max_moduÀ
 = 0;

104 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

105 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

109 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_maû_max_moduÀ
++;

115 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

116 (*Ë* 
ngx_maû_max_moduÀ
);

117 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

118  
NGX_CONF_ERROR
;

127 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

128 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

129  
NGX_CONF_ERROR
;

138 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

139 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

143 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

144 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

146 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

147 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

148 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

149  
NGX_CONF_ERROR
;

153 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

154 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

155 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

156  
NGX_CONF_ERROR
;

164 
pcf
 = *
cf
;

165 
cf
->
˘x
 = ctx;

167 
cf
->
moduÀ_ty≥
 = 
NGX_MAIL_MODULE
;

168 
cf
->
cmd_ty≥
 = 
NGX_MAIL_MAIN_CONF
;

169 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

171 i‡(
rv
 !
NGX_CONF_OK
) {

172 *
cf
 = 
pcf
;

173  
rv
;

179 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

180 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

182 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

183 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

187 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

188 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

192 
cf
->
˘x
 = ctx;

194 i‡(
moduÀ
->
öô_maö_c⁄f
) {

195 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

196 i‡(
rv
 !
NGX_CONF_OK
) {

197 *
cf
 = 
pcf
;

198  
rv
;

202 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

206 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

208 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

209 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

210 
˘x
->
§v_c⁄f
[
mi
],

211 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

212 i‡(
rv
 !
NGX_CONF_OK
) {

213 *
cf
 = 
pcf
;

214  
rv
;

220 *
cf
 = 
pcf
;

223 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_maû_c⁄f_p‹t_t
))

224 !
NGX_OK
)

226  
NGX_CONF_ERROR
;

229 
li°í
 = 
cmcf
->li°í.
ñts
;

231 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

232 i‡(
	`ngx_maû_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

233  
NGX_CONF_ERROR
;

237  
	`ngx_maû_›timize_£rvîs
(
cf
, &
p‹ts
);

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

243 
ngx_maû_li°í_t
 *
li°í
)

245 
ö_p‹t_t
 
p
;

246 
ngx_uöt_t
 
i
;

247 
sockaddr
 *
ß
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

250 
ngx_maû_c⁄f_addr_t
 *
addr
;

251 #i‡(
NGX_HAVE_INET6
)

252 
sockaddr_ö6
 *
sö6
;

255 
ß
 = (
sockaddr
 *Ë&
li°í
->sockaddr;

257 
ß
->
ß_Ámûy
) {

259 #i‡(
NGX_HAVE_INET6
)

260 
AF_INET6
:

261 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

262 
p
 = 
sö6
->
sö6_p‹t
;

266 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

267 
AF_UNIX
:

268 
p
 = 0;

273 
sö
 = (
sockaddr_ö
 *Ë
ß
;

274 
p
 = 
sö
->
sö_p‹t
;

278 
p‹t
 = 
p‹ts
->
ñts
;

279 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

280 i‡(
p
 =
p‹t
[
i
].p‹à&& 
ß
->
ß_Ámûy
 =p‹t[i].
Ámûy
) {

284 
p‹t
 = &p‹t[
i
];

285 
found
;

291 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

292 i‡(
p‹t
 =
NULL
) {

293  
NGX_ERROR
;

296 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

297 
p‹t
->p‹à
p
;

299 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

300 (
ngx_maû_c⁄f_addr_t
))

301 !
NGX_OK
)

303  
NGX_ERROR
;

306 
found
:

308 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

309 i‡(
addr
 =
NULL
) {

310  
NGX_ERROR
;

313 
addr
->
sockaddr
 = (sockadd∏*Ë&
li°í
->sockaddr;

314 
addr
->
sockÀn
 = 
li°í
->socklen;

315 
addr
->
˘x
 = 
li°í
->ctx;

316 
addr
->
böd
 = 
li°í
->bind;

317 
addr
->
wûdˇrd
 = 
li°í
->wildcard;

318 
addr
->
so_kì∑live
 = 
li°í
->so_keepalive;

319 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

320 
addr
->
t˝_kìpidÀ
 = 
li°í
->tcp_keepidle;

321 
addr
->
t˝_kìpötvl
 = 
li°í
->tcp_keepintvl;

322 
addr
->
t˝_kìp˙t
 = 
li°í
->tcp_keepcnt;

324 #i‡(
NGX_MAIL_SSL
)

325 
addr
->
s¶
 = 
li°í
->ssl;

327 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

328 
addr
->
ùv6⁄ly
 = 
li°í
->ipv6only;

331  
NGX_OK
;

332 
	}
}

336 
	$ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

338 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

339 
ngx_li°íög_t
 *
ls
;

340 
ngx_maû_p‹t_t
 *
mp‹t
;

341 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

342 
ngx_maû_c⁄f_addr_t
 *
addr
;

344 
p‹t
 = 
p‹ts
->
ñts
;

345 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

347 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

348 (
ngx_maû_c⁄f_addr_t
), 
ngx_maû_cmp_c⁄f_addrs
);

350 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

351 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

358 i‡(
addr
[
œ°
 - 1].
wûdˇrd
) {

359 
addr
[
œ°
 - 1].
böd
 = 1;

360 
böd_wûdˇrd
 = 1;

363 
böd_wûdˇrd
 = 0;

366 
i
 = 0;

368 
i
 < 
œ°
) {

370 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
böd
) {

371 
i
++;

375 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, 
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
);

376 i‡(
ls
 =
NULL
) {

377  
NGX_CONF_ERROR
;

380 
ls
->
addr_¡›
 = 1;

381 
ls
->
h™dÀr
 = 
ngx_maû_öô_c⁄√˘i⁄
;

382 
ls
->
poﬁ_size
 = 256;

385 
ls
->
logp
 = &
cf
->
cy˛e
->
√w_log
;

386 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

387 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

389 
ls
->
kì∑live
 = 
addr
[
i
].
so_kì∑live
;

390 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

391 
ls
->
kìpidÀ
 = 
addr
[
i
].
t˝_kìpidÀ
;

392 
ls
->
kìpötvl
 = 
addr
[
i
].
t˝_kìpötvl
;

393 
ls
->
kìp˙t
 = 
addr
[
i
].
t˝_kìp˙t
;

396 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

397 
ls
->
ùv6⁄ly
 = 
addr
[
i
].ipv6only;

400 
mp‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_maû_p‹t_t
));

401 i‡(
mp‹t
 =
NULL
) {

402  
NGX_CONF_ERROR
;

405 
ls
->
£rvîs
 = 
mp‹t
;

407 i‡(
i
 =
œ°
 - 1) {

408 
mp‹t
->
«ddrs
 = 
œ°
;

411 
mp‹t
->
«ddrs
 = 1;

412 
i
 = 0;

415 
ls
->
sockaddr
->
ß_Ámûy
) {

416 #i‡(
NGX_HAVE_INET6
)

417 
AF_INET6
:

418 i‡(
	`ngx_maû_add_addrs6
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

419  
NGX_CONF_ERROR
;

424 i‡(
	`ngx_maû_add_addrs
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

425  
NGX_CONF_ERROR
;

430 
addr
++;

431 
œ°
--;

435  
NGX_CONF_OK
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

441 
ngx_maû_c⁄f_addr_t
 *
addr
)

443 
u_ch¨
 *
p
;

444 
size_t
 
Àn
;

445 
ngx_uöt_t
 
i
;

446 
ngx_maû_ö_addr_t
 *
addrs
;

447 
sockaddr_ö
 *
sö
;

448 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

450 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

451 
mp‹t
->
«ddrs
 * (
ngx_maû_ö_addr_t
));

452 i‡(
mp‹t
->
addrs
 =
NULL
) {

453  
NGX_ERROR
;

456 
addrs
 = 
mp‹t
->addrs;

458 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

460 
sö
 = (
sockaddr_ö
 *Ë
addr
[
i
].
sockaddr
;

461 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

463 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

464 #i‡(
NGX_MAIL_SSL
)

465 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

468 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

470 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

471 i‡(
p
 =
NULL
) {

472  
NGX_ERROR
;

475 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

477 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

478 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

481  
NGX_OK
;

482 
	}
}

485 #i‡(
NGX_HAVE_INET6
)

487 
ngx_öt_t


488 
	$ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

489 
ngx_maû_c⁄f_addr_t
 *
addr
)

491 
u_ch¨
 *
p
;

492 
size_t
 
Àn
;

493 
ngx_uöt_t
 
i
;

494 
ngx_maû_ö6_addr_t
 *
addrs6
;

495 
sockaddr_ö6
 *
sö6
;

496 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

498 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

499 
mp‹t
->
«ddrs
 * (
ngx_maû_ö6_addr_t
));

500 i‡(
mp‹t
->
addrs
 =
NULL
) {

501  
NGX_ERROR
;

504 
addrs6
 = 
mp‹t
->
addrs
;

506 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

508 
sö6
 = (
sockaddr_ö6
 *Ë
addr
[
i
].
sockaddr
;

509 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

511 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

512 #i‡(
NGX_MAIL_SSL
)

513 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

516 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

518 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

519 i‡(
p
 =
NULL
) {

520  
NGX_ERROR
;

523 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

525 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

526 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

529  
NGX_OK
;

530 
	}
}

535 
ngx_öt_t


536 
	$ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

538 
ngx_maû_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

540 
fú°
 = (
ngx_maû_c⁄f_addr_t
 *Ë
⁄e
;

541 
£c⁄d
 = (
ngx_maû_c⁄f_addr_t
 *Ë
two
;

543 i‡(
fú°
->
wûdˇrd
) {

548 i‡(
£c⁄d
->
wûdˇrd
) {

553 i‡(
fú°
->
böd
 && !
£c⁄d
->bind) {

558 i‡(!
fú°
->
böd
 && 
£c⁄d
->bind) {

566 
	}
}

	@src/mail/ngx_mail.h

8 #i‚de‡
_NGX_MAIL_H_INCLUDED_


9 
	#_NGX_MAIL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

17 #i‡(
NGX_MAIL_SSL
)

18 
	~<ngx_maû_s¶_moduÀ.h
>

24 **
	mmaö_c⁄f
;

25 **
	m§v_c⁄f
;

26 } 
	tngx_maû_c⁄f_˘x_t
;

30 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

31 
sockÀn_t
 
	msockÀn
;

34 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

36 
	mböd
:1;

37 
	mwûdˇrd
:1;

38 #i‡(
NGX_MAIL_SSL
)

39 
	ms¶
:1;

41 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

42 
	mùv6⁄ly
:2;

44 
	mso_kì∑live
:2;

45 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

46 
	mt˝_kìpidÀ
;

47 
	mt˝_kìpötvl
;

48 
	mt˝_kìp˙t
;

50 } 
	tngx_maû_li°í_t
;

54 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

55 
ngx_°r_t
 
	maddr_ãxt
;

56 #i‡(
NGX_MAIL_SSL
)

57 
ngx_uöt_t
 
	ms¶
;

59 } 
	tngx_maû_addr_c⁄f_t
;

62 
ö_addr_t
 
	maddr
;

63 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

64 } 
	tngx_maû_ö_addr_t
;

67 #i‡(
NGX_HAVE_INET6
)

70 
ö6_addr
 
	maddr6
;

71 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

72 } 
	tngx_maû_ö6_addr_t
;

79 *
	maddrs
;

80 
ngx_uöt_t
 
	m«ddrs
;

81 } 
	tngx_maû_p‹t_t
;

85 
	mÁmûy
;

86 
ö_p‹t_t
 
	mp‹t
;

87 
ngx_¨øy_t
 
	maddrs
;

88 } 
	tngx_maû_c⁄f_p‹t_t
;

92 
sockaddr
 *
	msockaddr
;

93 
sockÀn_t
 
	msockÀn
;

95 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

97 
	mböd
:1;

98 
	mwûdˇrd
:1;

99 #i‡(
NGX_MAIL_SSL
)

100 
	ms¶
:1;

102 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

103 
	mùv6⁄ly
:2;

105 
	mso_kì∑live
:2;

106 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

107 
	mt˝_kìpidÀ
;

108 
	mt˝_kìpötvl
;

109 
	mt˝_kìp˙t
;

111 } 
	tngx_maû_c⁄f_addr_t
;

115 
ngx_¨øy_t
 
	m£rvîs
;

116 
ngx_¨øy_t
 
	mli°í
;

117 } 
	tngx_maû_c‹e_maö_c⁄f_t
;

120 
	#NGX_MAIL_POP3_PROTOCOL
 0

	)

121 
	#NGX_MAIL_IMAP_PROTOCOL
 1

	)

122 
	#NGX_MAIL_SMTP_PROTOCOL
 2

	)

125 
ngx_maû_¥Ÿocﬁ_s
 
	tngx_maû_¥Ÿocﬁ_t
;

129 
ngx_maû_¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

131 
ngx_m£c_t
 
	mtimeout
;

132 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

134 
ngx_Êag_t
 
	mso_kì∑live
;

136 
ngx_°r_t
 
	m£rvî_«me
;

138 
u_ch¨
 *
	mfûe_«me
;

139 
ngx_öt_t
 
	mlöe
;

141 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

144 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

145 } 
	tngx_maû_c‹e_§v_c⁄f_t
;

149 
	mngx_p›3_°¨t
 = 0,

150 
	mngx_p›3_u£r
,

151 
	mngx_p›3_∑sswd
,

152 
	mngx_p›3_auth_logö_u£∫ame
,

153 
	mngx_p›3_auth_logö_∑ssw‹d
,

154 
	mngx_p›3_auth_∂aö
,

155 
	mngx_p›3_auth_¸am_md5


156 } 
	tngx_p›3_°©e_e
;

160 
	mngx_im≠_°¨t
 = 0,

161 
	mngx_im≠_auth_logö_u£∫ame
,

162 
	mngx_im≠_auth_logö_∑ssw‹d
,

163 
	mngx_im≠_auth_∂aö
,

164 
	mngx_im≠_auth_¸am_md5
,

165 
	mngx_im≠_logö
,

166 
	mngx_im≠_u£r
,

167 
	mngx_im≠_∑sswd


168 } 
	tngx_im≠_°©e_e
;

172 
	mngx_smç_°¨t
 = 0,

173 
	mngx_smç_auth_logö_u£∫ame
,

174 
	mngx_smç_auth_logö_∑ssw‹d
,

175 
	mngx_smç_auth_∂aö
,

176 
	mngx_smç_auth_¸am_md5
,

177 
	mngx_smç_hño
,

178 
	mngx_smç_hño_x˛õ¡
,

179 
	mngx_smç_hño_‰om
,

180 
	mngx_smç_x˛õ¡
,

181 
	mngx_smç_x˛õ¡_‰om
,

182 
	mngx_smç_x˛õ¡_hño
,

183 
	mngx_smç_‰om
,

184 
	mngx_smç_to


185 } 
	tngx_smç_°©e_e
;

189 
ngx_≥î_c⁄√˘i⁄_t
 
	mup°ªam
;

190 
ngx_buf_t
 *
	mbuf„r
;

191 } 
	tngx_maû_¥oxy_˘x_t
;

195 
uöt32_t
 
	msig«tuª
;

197 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

199 
ngx_°r_t
 
	mout
;

200 
ngx_buf_t
 *
	mbuf„r
;

202 **
	m˘x
;

203 **
	mmaö_c⁄f
;

204 **
	m§v_c⁄f
;

206 
ngx_ªsﬁvî_˘x_t
 *
	mªsﬁvî_˘x
;

208 
ngx_maû_¥oxy_˘x_t
 *
	m¥oxy
;

210 
ngx_uöt_t
 
	mmaû_°©e
;

212 
	m¥Ÿocﬁ
:3;

213 
	mblocked
:1;

214 
	mquô
:1;

215 
	mquŸed
:1;

216 
	mback¶ash
:1;

217 
	mno_sync_lôîÆ
:1;

218 
	m°¨âls
:1;

219 
	mesmç
:1;

220 
	mauth_mëhod
:3;

221 
	mauth_waô
:1;

223 
ngx_°r_t
 
	mlogö
;

224 
ngx_°r_t
 
	m∑sswd
;

226 
ngx_°r_t
 
	mß…
;

227 
ngx_°r_t
 
	mèg
;

228 
ngx_°r_t
 
	mègged_löe
;

229 
ngx_°r_t
 
	mãxt
;

231 
ngx_°r_t
 *
	maddr_ãxt
;

232 
ngx_°r_t
 
	mho°
;

233 
ngx_°r_t
 
	msmç_hño
;

234 
ngx_°r_t
 
	msmç_‰om
;

235 
ngx_°r_t
 
	msmç_to
;

237 
ngx_uöt_t
 
	mcomm™d
;

238 
ngx_¨øy_t
 
	m¨gs
;

240 
ngx_uöt_t
 
	mlogö_©ãm±
;

244 
ngx_uöt_t
 
	m°©e
;

245 
u_ch¨
 *
	mcmd_°¨t
;

246 
u_ch¨
 *
	m¨g_°¨t
;

247 
u_ch¨
 *
	m¨g_íd
;

248 
ngx_uöt_t
 
	mlôîÆ_Àn
;

249 } 
	tngx_maû_£ssi⁄_t
;

253 
ngx_°r_t
 *
	m˛õ¡
;

254 
ngx_maû_£ssi⁄_t
 *
	m£ssi⁄
;

255 } 
	tngx_maû_log_˘x_t
;

258 
	#NGX_POP3_USER
 1

	)

259 
	#NGX_POP3_PASS
 2

	)

260 
	#NGX_POP3_CAPA
 3

	)

261 
	#NGX_POP3_QUIT
 4

	)

262 
	#NGX_POP3_NOOP
 5

	)

263 
	#NGX_POP3_STLS
 6

	)

264 
	#NGX_POP3_APOP
 7

	)

265 
	#NGX_POP3_AUTH
 8

	)

266 
	#NGX_POP3_STAT
 9

	)

267 
	#NGX_POP3_LIST
 10

	)

268 
	#NGX_POP3_RETR
 11

	)

269 
	#NGX_POP3_DELE
 12

	)

270 
	#NGX_POP3_RSET
 13

	)

271 
	#NGX_POP3_TOP
 14

	)

272 
	#NGX_POP3_UIDL
 15

	)

275 
	#NGX_IMAP_LOGIN
 1

	)

276 
	#NGX_IMAP_LOGOUT
 2

	)

277 
	#NGX_IMAP_CAPABILITY
 3

	)

278 
	#NGX_IMAP_NOOP
 4

	)

279 
	#NGX_IMAP_STARTTLS
 5

	)

281 
	#NGX_IMAP_NEXT
 6

	)

283 
	#NGX_IMAP_AUTHENTICATE
 7

	)

286 
	#NGX_SMTP_HELO
 1

	)

287 
	#NGX_SMTP_EHLO
 2

	)

288 
	#NGX_SMTP_AUTH
 3

	)

289 
	#NGX_SMTP_QUIT
 4

	)

290 
	#NGX_SMTP_NOOP
 5

	)

291 
	#NGX_SMTP_MAIL
 6

	)

292 
	#NGX_SMTP_RSET
 7

	)

293 
	#NGX_SMTP_RCPT
 8

	)

294 
	#NGX_SMTP_DATA
 9

	)

295 
	#NGX_SMTP_VRFY
 10

	)

296 
	#NGX_SMTP_EXPN
 11

	)

297 
	#NGX_SMTP_HELP
 12

	)

298 
	#NGX_SMTP_STARTTLS
 13

	)

301 
	#NGX_MAIL_AUTH_PLAIN
 0

	)

302 
	#NGX_MAIL_AUTH_LOGIN
 1

	)

303 
	#NGX_MAIL_AUTH_LOGIN_USERNAME
 2

	)

304 
	#NGX_MAIL_AUTH_APOP
 3

	)

305 
	#NGX_MAIL_AUTH_CRAM_MD5
 4

	)

306 
	#NGX_MAIL_AUTH_NONE
 5

	)

309 
	#NGX_MAIL_AUTH_PLAIN_ENABLED
 0x0002

	)

310 
	#NGX_MAIL_AUTH_LOGIN_ENABLED
 0x0004

	)

311 
	#NGX_MAIL_AUTH_APOP_ENABLED
 0x0008

	)

312 
	#NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 0x0010

	)

313 
	#NGX_MAIL_AUTH_NONE_ENABLED
 0x0020

	)

316 
	#NGX_MAIL_PARSE_INVALID_COMMAND
 20

	)

319 (*
	tngx_maû_öô_£ssi⁄_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

320 
	tngx_c⁄√˘i⁄_t
 *
	tc
);

321 (*
	tngx_maû_öô_¥Ÿocﬁ_±
)(
	tngx_evít_t
 *
	tªv
);

322 (*
	tngx_maû_auth_°©e_±
)(
	tngx_evít_t
 *
	tªv
);

323 
	$ngx_öt_t
 (*
	tngx_maû_∑r£_comm™d_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
);

326 
	sngx_maû_¥Ÿocﬁ_s
 {

327 
ngx_°r_t
 
«me
;

328 
ö_p‹t_t
 
p‹t
[4];

329 
ngx_uöt_t
 
ty≥
;

331 
ngx_maû_öô_£ssi⁄_±
 
öô_£ssi⁄
;

332 
ngx_maû_öô_¥Ÿocﬁ_±
 
öô_¥Ÿocﬁ
;

333 
ngx_maû_∑r£_comm™d_±
 
∑r£_comm™d
;

334 
ngx_maû_auth_°©e_±
 
auth_°©e
;

336 
ngx_°r_t
 
öã∫Æ_£rvî_îr‹
;

341 
ngx_maû_¥Ÿocﬁ_t
 *
¥Ÿocﬁ
;

343 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

344 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

346 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

347 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

348 *
c⁄f
);

349 } 
	tngx_maû_moduÀ_t
;

352 
	#NGX_MAIL_MODULE
 0x4C49414D

	)

354 
	#NGX_MAIL_MAIN_CONF
 0x02000000

	)

355 
	#NGX_MAIL_SRV_CONF
 0x04000000

	)

358 
	#NGX_MAIL_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

359 
	#NGX_MAIL_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

362 
	#ngx_maû_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

363 
	#ngx_maû_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

364 
	#ngx_maû_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

367 
	#ngx_maû_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

368 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

369 
	#ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

371 
	#ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

372 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

373 
	#ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

374 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

377 #i‡(
NGX_MAIL_SSL
)

378 
	`ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
);

379 
ngx_öt_t
 
	`ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

383 
	`ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

385 
ngx_öt_t
 
	`ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

386 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
);

387 
ngx_öt_t
 
	`ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

388 
ngx_uöt_t
 
n
);

389 
ngx_öt_t
 
	`ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
,

390 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
);

391 
ngx_öt_t
 
	`ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
,

392 
ngx_c⁄√˘i⁄_t
 *
c
);

393 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
,

394 
ngx_c⁄√˘i⁄_t
 *
c
, *
¥efix
, 
size_t
 
Àn
);

395 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

396 
ngx_öt_t
 
	`ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

398 
	`ngx_maû_£nd
(
ngx_evít_t
 *
wev
);

399 
ngx_öt_t
 
	`ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

400 
	`ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

401 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

402 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

403 
u_ch¨
 *
	`ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

406 *
	`ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

410 
	`ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
);

411 
	`ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
);

415 
ngx_uöt_t
 
ngx_maû_max_moduÀ
;

416 
ngx_moduÀ_t
 
ngx_maû_c‹e_moduÀ
;

	@src/mail/ngx_mail_auth_http_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_addr_t
 *
	m≥î
;

18 
ngx_m£c_t
 
	mtimeout
;

20 
ngx_°r_t
 
	mho°_hódî
;

21 
ngx_°r_t
 
	muri
;

22 
ngx_°r_t
 
	mhódî
;

24 
ngx_¨øy_t
 *
	mhódîs
;

26 
u_ch¨
 *
	mfûe
;

27 
ngx_uöt_t
 
	mlöe
;

28 } 
	tngx_maû_auth_hâp_c⁄f_t
;

31 
ngx_maû_auth_hâp_˘x_s
 
	tngx_maû_auth_hâp_˘x_t
;

33 (*
	tngx_maû_auth_hâp_h™dÀr_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

34 
	tngx_maû_auth_hâp_˘x_t
 *
	t˘x
);

36 
	sngx_maû_auth_hâp_˘x_s
 {

37 
ngx_buf_t
 *
ªque°
;

38 
ngx_buf_t
 *
ª•⁄£
;

39 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

41 
ngx_maû_auth_hâp_h™dÀr_±
 
h™dÀr
;

43 
ngx_uöt_t
 
°©e
;

45 
u_ch¨
 *
hódî_«me_°¨t
;

46 
u_ch¨
 *
hódî_«me_íd
;

47 
u_ch¨
 *
hódî_°¨t
;

48 
u_ch¨
 *
hódî_íd
;

50 
ngx_°r_t
 
addr
;

51 
ngx_°r_t
 
p‹t
;

52 
ngx_°r_t
 
îr
;

53 
ngx_°r_t
 
îrmsg
;

54 
ngx_°r_t
 
îrcode
;

56 
time_t
 
¶ìp
;

58 
ngx_poﬁ_t
 *
poﬁ
;

62 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

63 
	`ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

64 
	`ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

65 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

66 
	`ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

67 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

68 
	`ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
);

69 
ngx_öt_t
 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

70 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

71 
	`ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
);

72 
	`ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

73 
ngx_buf_t
 *
	`ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
,

74 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
);

75 
ngx_öt_t
 
	`ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,

76 
ngx_°r_t
 *
esˇ≥d
);

78 *
	`ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

79 *
	`ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

80 *
chûd
);

81 *
	`ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

82 *
	`ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

83 *
c⁄f
);

86 
ngx_comm™d_t
 
ngx_maû_auth_hâp_comm™ds
[] = {

88 { 
	`ngx_°rög
("auth_http"),

89 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_maû_auth_hâp
,

91 
NGX_MAIL_SRV_CONF_OFFSET
,

93 
NULL
 },

95 { 
	`ngx_°rög
("auth_http_timeout"),

96 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_m£c_¶Ÿ
,

98 
NGX_MAIL_SRV_CONF_OFFSET
,

99 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
timeout
),

100 
NULL
 },

102 { 
	`ngx_°rög
("auth_http_header"),

103 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE2
,

104 
ngx_maû_auth_hâp_hódî
,

105 
NGX_MAIL_SRV_CONF_OFFSET
,

107 
NULL
 },

109 
ngx_nuŒ_comm™d


110 
	}
};

113 
ngx_maû_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ_˘x
 = {

114 
NULL
,

116 
NULL
,

117 
NULL
,

119 
ngx_maû_auth_hâp_¸óã_c⁄f
,

120 
ngx_maû_auth_hâp_mîge_c⁄f


124 
ngx_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_maû_auth_hâp_moduÀ_˘x
,

127 
ngx_maû_auth_hâp_comm™ds
,

128 
NGX_MAIL_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


140 
ngx_°r_t
 
	gngx_maû_auth_hâp_mëhod
[] = {

141 
ngx_°rög
("plain"),

142 
ngx_°rög
("plain"),

143 
ngx_°rög
("plain"),

144 
ngx_°rög
("apop"),

145 
ngx_°rög
("cram-md5"),

146 
ngx_°rög
("none")

149 
ngx_°r_t
 
	gngx_maû_smç_îrcode
 = 
ngx_°rög
("535 5.7.0");

153 
	$ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
)

155 
ngx_öt_t
 
rc
;

156 
ngx_poﬁ_t
 *
poﬁ
;

157 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

158 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

160 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "in httpáuth state";

162 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
s
->
c⁄√˘i⁄
->
log
);

163 i‡(
poﬁ
 =
NULL
) {

164 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

168 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_maû_auth_hâp_˘x_t
));

169 i‡(
˘x
 =
NULL
) {

170 
	`ngx_de°roy_poﬁ
(
poﬁ
);

171 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

175 
˘x
->
poﬁ
 =Öool;

177 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

179 
˘x
->
ªque°
 = 
	`ngx_maû_auth_hâp_¸óã_ªque°
(
s
, 
poﬁ
, 
ahcf
);

180 i‡(
˘x
->
ªque°
 =
NULL
) {

181 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

182 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

186 
	`ngx_maû_£t_˘x
(
s
, 
˘x
, 
ngx_maû_auth_hâp_moduÀ
);

188 
˘x
->
≥î
.
sockaddr
 = 
ahcf
->peer->sockaddr;

189 
˘x
->
≥î
.
sockÀn
 = 
ahcf
->peer->socklen;

190 
˘x
->
≥î
.
«me
 = &
ahcf
->peer->name;

191 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

192 
˘x
->
≥î
.
log
 = 
s
->
c⁄√˘i⁄
->log;

193 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

195 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

197 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

198 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

199 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

202 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

203 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

207 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = 
s
;

208 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

210 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_block_ªad
;

211 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_ªad_h™dÀr
;

212 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_auth_hâp_wrôe_h™dÀr
;

214 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_ign‹e_°©us_löe
;

216 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, 
ahcf
->
timeout
);

217 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, 
ahcf
->
timeout
);

219 i‡(
rc
 =
NGX_OK
) {

220 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

223 
	}
}

227 
	$ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

229 
ssize_t
 
n
, 
size
;

230 
ngx_c⁄√˘i⁄_t
 *
c
;

231 
ngx_maû_£ssi⁄_t
 *
s
;

232 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

233 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

235 
c
 = 
wev
->
d©a
;

236 
s
 = 
c
->
d©a
;

238 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

240 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0,

243 i‡(
wev
->
timedout
) {

244 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

245 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

246 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

247 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

248 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

252 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

254 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

256 i‡(
n
 =
NGX_ERROR
) {

257 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

258 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

259 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

263 i‡(
n
 > 0) {

264 
˘x
->
ªque°
->
pos
 +
n
;

266 i‡(
n
 =
size
) {

267 
wev
->
h™dÀr
 = 
ngx_maû_auth_hâp_dummy_h™dÀr
;

269 i‡(
wev
->
timî_£t
) {

270 
	`ngx_dñ_timî
(
wev
);

273 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

274 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

275 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

276 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

283 i‡(!
wev
->
timî_£t
) {

284 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

285 
	`ngx_add_timî
(
wev
, 
ahcf
->
timeout
);

287 
	}
}

291 
	$ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

293 
ssize_t
 
n
, 
size
;

294 
ngx_c⁄√˘i⁄_t
 *
c
;

295 
ngx_maû_£ssi⁄_t
 *
s
;

296 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

298 
c
 = 
ªv
->
d©a
;

299 
s
 = 
c
->
d©a
;

301 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

304 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

306 i‡(
ªv
->
timedout
) {

307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

308 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

309 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

310 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

311 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

315 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

316 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 1024);

317 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

318 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

319 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

320 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

325 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

327 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
pos
, 
size
);

329 i‡(
n
 > 0) {

330 
˘x
->
ª•⁄£
->
œ°
 +
n
;

332 
˘x
->
	`h™dÀr
(
s
, ctx);

336 i‡(
n
 =
NGX_AGAIN
) {

340 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

341 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

342 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

343 
	}
}

347 
	$ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

348 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

350 
u_ch¨
 *
p
, 
ch
;

352 
sw_°¨t
 = 0,

353 
sw_H
,

354 
sw_HT
,

355 
sw_HTT
,

356 
sw_HTTP
,

357 
sw_skù
,

358 
sw_Æmo°_d⁄e


359 } 
°©e
;

361 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

364 
°©e
 = 
˘x
->state;

366 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

367 
ch
 = *
p
;

369 
°©e
) {

372 
sw_°¨t
:

373 i‡(
ch
 == 'H') {

374 
°©e
 = 
sw_H
;

377 
√xt
;

379 
sw_H
:

380 i‡(
ch
 == 'T') {

381 
°©e
 = 
sw_HT
;

384 
√xt
;

386 
sw_HT
:

387 i‡(
ch
 == 'T') {

388 
°©e
 = 
sw_HTT
;

391 
√xt
;

393 
sw_HTT
:

394 i‡(
ch
 == 'P') {

395 
°©e
 = 
sw_HTTP
;

398 
√xt
;

400 
sw_HTTP
:

401 i‡(
ch
 == '/') {

402 
°©e
 = 
sw_skù
;

405 
√xt
;

408 
sw_skù
:

409 
ch
) {

410 
CR
:

411 
°©e
 = 
sw_Æmo°_d⁄e
;

414 
LF
:

415 
d⁄e
;

420 
sw_Æmo°_d⁄e
:

421 i‡(
ch
 =
LF
) {

422 
d⁄e
;

425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

427 
˘x
->
≥î
.
«me
);

428 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

429 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

430 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

435 
˘x
->
ª•⁄£
->
pos
 = 
p
;

436 
˘x
->
°©e
 = state;

440 
√xt
:

442 
p
 = 
˘x
->
ª•⁄£
->
°¨t
 - 1;

444 
d⁄e
:

446 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

447 
˘x
->
°©e
 = 0;

448 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_¥o˚ss_hódîs
;

449 
˘x
->
	`h™dÀr
(
s
, ctx);

450 
	}
}

454 
	$ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

455 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

457 
u_ch¨
 *
p
;

458 
time_t
 
timî
;

459 
size_t
 
Àn
, 
size
;

460 
ngx_öt_t
 
rc
, 
p‹t
, 
n
;

461 
ngx_addr_t
 *
≥î
;

462 
sockaddr_ö
 *
sö
;

464 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

468 
rc
 = 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
s
, 
˘x
);

470 i‡(
rc
 =
NGX_OK
) {

472 #i‡(
NGX_DEBUG
)

474 
ngx_°r_t
 
key
, 
vÆue
;

476 
key
.
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

477 
key
.
d©a
 = 
˘x
->
hódî_«me_°¨t
;

478 
vÆue
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

479 
vÆue
.
d©a
 = 
˘x
->
hódî_°¨t
;

481 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

483 &
key
, &
vÆue
);

487 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

489 i‡(
Àn
 == ("Auth-Status") - 1

490 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

491 (
u_ch¨
 *) "Auth-Status",

495 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

497 i‡(
Àn
 == 2

498 && 
˘x
->
hódî_°¨t
[0] == 'O'

499 && 
˘x
->
hódî_°¨t
[1] == 'K')

504 i‡(
Àn
 == 4

505 && 
˘x
->
hódî_°¨t
[0] == 'W'

506 && 
˘x
->
hódî_°¨t
[1] == 'A'

507 && 
˘x
->
hódî_°¨t
[2] == 'I'

508 && 
˘x
->
hódî_°¨t
[3] == 'T')

510 
s
->
auth_waô
 = 1;

514 
˘x
->
îrmsg
.
Àn
 =Üen;

515 
˘x
->
îrmsg
.
d©a
 = ctx->
hódî_°¨t
;

517 
s
->
¥Ÿocﬁ
) {

519 
NGX_MAIL_POP3_PROTOCOL
:

520 
size
 = ("-ERR "Ë- 1 + 
Àn
 + (
CRLF
) - 1;

523 
NGX_MAIL_IMAP_PROTOCOL
:

524 
size
 = 
s
->
èg
.
Àn
 + ("NO ") - 1 +Üen

525 + (
CRLF
) - 1;

529 
˘x
->
îr
 = ctx->
îrmsg
;

533 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
size
);

534 i‡(
p
 =
NULL
) {

535 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

536 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

537 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

541 
˘x
->
îr
.
d©a
 = 
p
;

543 
s
->
¥Ÿocﬁ
) {

545 
NGX_MAIL_POP3_PROTOCOL
:

546 *
p
++ = '-'; *p++ = 'E'; *p++ = 'R'; *p++ = 'R'; *p++ = ' ';

549 
NGX_MAIL_IMAP_PROTOCOL
:

550 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

551 *
p
++ = 'N'; *p++ = 'O'; *p++ = ' ';

558 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
hódî_°¨t
, 
Àn
);

559 *
p
++ = 
CR
; *p++ = 
LF
;

561 
˘x
->
îr
.
Àn
 = 
p
 - ctx->îr.
d©a
;

566 i‡(
Àn
 == ("Auth-Server") - 1

567 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

568 (
u_ch¨
 *) "Auth-Server",

572 
˘x
->
addr
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

573 
˘x
->
addr
.
d©a
 = ctx->
hódî_°¨t
;

578 i‡(
Àn
 == ("Auth-Port") - 1

579 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

580 (
u_ch¨
 *) "Auth-Port",

584 
˘x
->
p‹t
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

585 
˘x
->
p‹t
.
d©a
 = ctx->
hódî_°¨t
;

590 i‡(
Àn
 == ("Auth-User") - 1

591 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

592 (
u_ch¨
 *) "Auth-User",

596 
s
->
logö
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

598 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
, s->logö.
Àn
);

599 i‡(
s
->
logö
.
d©a
 =
NULL
) {

600 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

601 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

602 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

606 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
˘x
->
hódî_°¨t
, s->logö.
Àn
);

611 i‡(
Àn
 == ("Auth-Pass") - 1

612 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

613 (
u_ch¨
 *) "Auth-Pass",

617 
s
->
∑sswd
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

619 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
,

620 
s
->
∑sswd
.
Àn
);

621 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

622 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

623 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

624 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

628 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
˘x
->
hódî_°¨t
, s->∑sswd.
Àn
);

633 i‡(
Àn
 == ("Auth-Wait") - 1

634 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

635 (
u_ch¨
 *) "Auth-Wait",

639 
n
 = 
	`ngx_©oi
(
˘x
->
hódî_°¨t
,

640 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
);

642 i‡(
n
 !
NGX_ERROR
) {

643 
˘x
->
¶ìp
 = 
n
;

649 i‡(
Àn
 == ("Auth-Error-Code") - 1

650 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

651 (
u_ch¨
 *) "Auth-Error-Code",

655 
˘x
->
îrcode
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

657 
˘x
->
îrcode
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

658 
˘x
->
îrcode
.
Àn
);

659 i‡(
˘x
->
îrcode
.
d©a
 =
NULL
) {

660 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

661 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

662 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

666 
	`ngx_mem˝y
(
˘x
->
îrcode
.
d©a
, ctx->
hódî_°¨t
,

667 
˘x
->
îrcode
.
Àn
);

677 i‡(
rc
 =
NGX_DONE
) {

678 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

681 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

683 i‡(
˘x
->
îr
.
Àn
) {

685 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

686 "˛õ¡Üogö faûed: \"%V\"", &
˘x
->
îrmsg
);

688 i‡(
s
->
¥Ÿocﬁ
 =
NGX_MAIL_SMTP_PROTOCOL
) {

690 i‡(
˘x
->
îrcode
.
Àn
 == 0) {

691 
˘x
->
îrcode
 = 
ngx_maû_smç_îrcode
;

694 
˘x
->
îr
.
Àn
 = ctx->
îrcode
.À¿+ ctx->
îrmsg
.len

695 + (" " 
CRLF
) - 1;

697 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
˘x
->
îr
.
Àn
);

698 i‡(
p
 =
NULL
) {

699 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

700 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

701 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

705 
˘x
->
îr
.
d©a
 = 
p
;

707 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrcode
.
d©a
, ctx->îrcode.
Àn
);

708 *
p
++ = ' ';

709 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrmsg
.
d©a
, ctx->îrmsg.
Àn
);

710 *
p
++ = 
CR
; *∞
LF
;

713 
s
->
out
 = 
˘x
->
îr
;

714 
timî
 = 
˘x
->
¶ìp
;

716 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

718 i‡(
timî
 == 0) {

719 
s
->
quô
 = 1;

720 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

724 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

726 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

731 i‡(
s
->
auth_waô
) {

732 
timî
 = 
˘x
->
¶ìp
;

734 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

736 i‡(
timî
 == 0) {

737 
	`ngx_maû_auth_hâp_öô
(
s
);

741 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

743 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

748 i‡(
˘x
->
addr
.
Àn
 =0 || ctx->
p‹t
.len == 0) {

749 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

751 
˘x
->
≥î
.
«me
);

752 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

753 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

757 i‡(
s
->
∑sswd
.
d©a
 =
NULL


758 && 
s
->
¥Ÿocﬁ
 !
NGX_MAIL_SMTP_PROTOCOL
)

760 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

762 
˘x
->
≥î
.
«me
);

763 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

764 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

768 
≥î
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_addr_t
));

769 i‡(
≥î
 =
NULL
) {

770 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

771 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

777 
sö
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
sockaddr_ö
));

778 i‡(
sö
 =
NULL
) {

779 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

780 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

784 
sö
->
sö_Ámûy
 = 
AF_INET
;

786 
p‹t
 = 
	`ngx_©oi
(
˘x
->p‹t.
d©a
, ctx->p‹t.
Àn
);

787 i‡(
p‹t
 =
NGX_ERROR
 ||Öort < 1 ||Öort > 65535) {

788 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

791 
˘x
->
≥î
.
«me
, &˘x->
p‹t
);

792 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

793 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

797 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

799 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
˘x
->
addr
.
d©a
, ctx->addr.
Àn
);

800 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_NONE
) {

801 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

804 
˘x
->
≥î
.
«me
, &˘x->
addr
);

805 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

806 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

810 
≥î
->
sockaddr
 = (sockadd∏*Ë
sö
;

811 
≥î
->
sockÀn
 = (
sockaddr_ö
);

813 
Àn
 = 
˘x
->
addr
.À¿+ 1 + ctx->
p‹t
.len;

815 
≥î
->
«me
.
Àn
 =Üen;

817 
≥î
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

818 i‡(
≥î
->
«me
.
d©a
 =
NULL
) {

819 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

820 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

824 
Àn
 = 
˘x
->
addr
.len;

826 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
, 
˘x
->
addr
.d©a, 
Àn
);

828 
≥î
->
«me
.
d©a
[
Àn
++] = ':';

830 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
 + 
Àn
, 
˘x
->
p‹t
.data, ctx->port.len);

832 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

833 
	`ngx_maû_¥oxy_öô
(
s
, 
≥î
);

838 i‡(
rc
 =
NGX_AGAIN
 ) {

844 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

846 
˘x
->
≥î
.
«me
);

847 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

848 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

849 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

853 
	}
}

857 
	$ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
)

859 
ngx_c⁄√˘i⁄_t
 *
c
;

860 
ngx_maû_£ssi⁄_t
 *
s
;

861 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

863 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailáuth sleep handler");

865 
c
 = 
ªv
->
d©a
;

866 
s
 = 
c
->
d©a
;

868 i‡(
ªv
->
timedout
) {

870 
ªv
->
timedout
 = 0;

872 i‡(
s
->
auth_waô
) {

873 
s
->
auth_waô
 = 0;

874 
	`ngx_maû_auth_hâp_öô
(
s
);

878 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

880 
ªv
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
auth_°©e
;

882 
s
->
maû_°©e
 = 0;

883 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_PLAIN
;

885 
c
->
log
->
a˘i⁄
 = "ináuth state";

887 
	`ngx_maû_£nd
(
c
->
wrôe
);

889 i‡(
c
->
de°royed
) {

893 
	`ngx_add_timî
(
ªv
, 
cscf
->
timeout
);

895 i‡(
ªv
->
ªady
) {

896 
ªv
->
	`h™dÀr
(rev);

900 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

901 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

907 i‡(
ªv
->
a˘ive
) {

908 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

909 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

912 
	}
}

915 
ngx_öt_t


916 
	$ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

917 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

919 
u_ch¨
 
c
, 
ch
, *
p
;

921 
sw_°¨t
 = 0,

922 
sw_«me
,

923 
sw_•a˚_bef‹e_vÆue
,

924 
sw_vÆue
,

925 
sw_•a˚_a·î_vÆue
,

926 
sw_Æmo°_d⁄e
,

927 
sw_hódî_Æmo°_d⁄e


928 } 
°©e
;

930 
°©e
 = 
˘x
->state;

932 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

933 
ch
 = *
p
;

935 
°©e
) {

938 
sw_°¨t
:

940 
ch
) {

941 
CR
:

942 
˘x
->
hódî_íd
 = 
p
;

943 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

945 
LF
:

946 
˘x
->
hódî_íd
 = 
p
;

947 
hódî_d⁄e
;

949 
°©e
 = 
sw_«me
;

950 
˘x
->
hódî_«me_°¨t
 = 
p
;

952 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

953 i‡(
c
 >= 'a' && c <= 'z') {

957 i‡(
ch
 >= '0' && ch <= '9') {

961  
NGX_ERROR
;

966 
sw_«me
:

967 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

968 i‡(
c
 >= 'a' && c <= 'z') {

972 i‡(
ch
 == ':') {

973 
˘x
->
hódî_«me_íd
 = 
p
;

974 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

978 i‡(
ch
 == '-') {

982 i‡(
ch
 >= '0' && ch <= '9') {

986 i‡(
ch
 =
CR
) {

987 
˘x
->
hódî_«me_íd
 = 
p
;

988 
˘x
->
hódî_°¨t
 = 
p
;

989 
˘x
->
hódî_íd
 = 
p
;

990 
°©e
 = 
sw_Æmo°_d⁄e
;

994 i‡(
ch
 =
LF
) {

995 
˘x
->
hódî_«me_íd
 = 
p
;

996 
˘x
->
hódî_°¨t
 = 
p
;

997 
˘x
->
hódî_íd
 = 
p
;

998 
d⁄e
;

1001  
NGX_ERROR
;

1004 
sw_•a˚_bef‹e_vÆue
:

1005 
ch
) {

1008 
CR
:

1009 
˘x
->
hódî_°¨t
 = 
p
;

1010 
˘x
->
hódî_íd
 = 
p
;

1011 
°©e
 = 
sw_Æmo°_d⁄e
;

1013 
LF
:

1014 
˘x
->
hódî_°¨t
 = 
p
;

1015 
˘x
->
hódî_íd
 = 
p
;

1016 
d⁄e
;

1018 
˘x
->
hódî_°¨t
 = 
p
;

1019 
°©e
 = 
sw_vÆue
;

1025 
sw_vÆue
:

1026 
ch
) {

1028 
˘x
->
hódî_íd
 = 
p
;

1029 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1031 
CR
:

1032 
˘x
->
hódî_íd
 = 
p
;

1033 
°©e
 = 
sw_Æmo°_d⁄e
;

1035 
LF
:

1036 
˘x
->
hódî_íd
 = 
p
;

1037 
d⁄e
;

1042 
sw_•a˚_a·î_vÆue
:

1043 
ch
) {

1046 
CR
:

1047 
°©e
 = 
sw_Æmo°_d⁄e
;

1049 
LF
:

1050 
d⁄e
;

1052 
°©e
 = 
sw_vÆue
;

1058 
sw_Æmo°_d⁄e
:

1059 
ch
) {

1060 
LF
:

1061 
d⁄e
;

1063  
NGX_ERROR
;

1067 
sw_hódî_Æmo°_d⁄e
:

1068 
ch
) {

1069 
LF
:

1070 
hódî_d⁄e
;

1072  
NGX_ERROR
;

1077 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1078 
˘x
->
°©e
 = state;

1080  
NGX_AGAIN
;

1082 
d⁄e
:

1084 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1085 
˘x
->
°©e
 = 
sw_°¨t
;

1087  
NGX_OK
;

1089 
hódî_d⁄e
:

1091 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1092 
˘x
->
°©e
 = 
sw_°¨t
;

1094  
NGX_DONE
;

1095 
	}
}

1099 
	$ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
)

1101 
ngx_c⁄√˘i⁄_t
 *
c
;

1102 
ngx_maû_£ssi⁄_t
 *
s
;

1103 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

1105 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

1108 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1109 
c
 = 
ªv
->
d©a
;

1110 
s
 = 
c
->
d©a
;

1112 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

1114 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

1115 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

1116 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1118 
	}
}

1122 
	$ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

1126 
	}
}

1129 
ngx_buf_t
 *

1130 
	$ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

1131 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
)

1133 
size_t
 
Àn
;

1134 
ngx_buf_t
 *
b
;

1135 
ngx_°r_t
 
logö
, 
∑sswd
;

1136 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

1138 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
logö
, &logöË!
NGX_OK
) {

1139  
NULL
;

1142 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
∑sswd
, &∑sswdË!
NGX_OK
) {

1143  
NULL
;

1146 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

1148 
Àn
 = ("GET "Ë- 1 + 
ahcf
->
uri
.À¿+ (" HTTP/1.0" 
CRLF
) - 1

1149 + ("Ho°: "Ë- 1 + 
ahcf
->
ho°_hódî
.
Àn
 + (
CRLF
) - 1

1151 + 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn


1152 + (
CRLF
) - 1

1153 + ("Auth-U£r: "Ë- 1 + 
logö
.
Àn
 + (
CRLF
) - 1

1154 + ("Auth-Pass: "Ë- 1 + 
∑sswd
.
Àn
 + (
CRLF
) - 1

1155 + ("Auth-SÆt: "Ë- 1 + 
s
->
ß…
.
Àn


1156 + ("Auth-PrŸocﬁ: "Ë- 1 + 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn


1157 + (
CRLF
) - 1

1158 + ("Auth-Logö-Aâem±: "Ë- 1 + 
NGX_INT_T_LEN


1159 + (
CRLF
) - 1

1160 + ("Clõ¡-IP: "Ë- 1 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn


1161 + (
CRLF
) - 1

1162 + ("Clõ¡-Ho°: "Ë- 1 + 
s
->
ho°
.
Àn
 + (
CRLF
) - 1

1163 + ("Auth-SMTP-Hño: "Ë- 1 + 
s
->
smç_hño
.
Àn


1164 + ("Auth-SMTP-From: "Ë- 1 + 
s
->
smç_‰om
.
Àn


1165 + ("Auth-SMTP-To: "Ë- 1 + 
s
->
smç_to
.
Àn


1166 + 
ahcf
->
hódî
.
Àn


1167 + (
CRLF
) - 1;

1169 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
Àn
);

1170 i‡(
b
 =
NULL
) {

1171  
NULL
;

1174 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "GET ", ("GET ") - 1);

1175 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
uri
.
d©a
,áhcf->uri.
Àn
);

1176 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, " HTTP/1.0" 
CRLF
,

1177 (" HTTP/1.0" 
CRLF
) - 1);

1179 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Host: ", ("Host: ") - 1);

1180 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
ho°_hódî
.
d©a
,

1181 
ahcf
->
ho°_hódî
.
Àn
);

1182 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1184 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Method: ",

1186 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last,

1187 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
d©a
,

1188 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn
);

1189 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1191 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-User: ", ("Auth-User: ") - 1);

1192 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
logö
.
d©a
,Üogö.
Àn
);

1193 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1195 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Pass: ", ("Auth-Pass: ") - 1);

1196 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
∑sswd
.
d©a
,Öasswd.
Àn
);

1197 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1199 i‡(
s
->
auth_mëhod
 !
NGX_MAIL_AUTH_PLAIN
 && s->
ß…
.
Àn
) {

1200 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Salt: ", ("Auth-Salt: ") - 1);

1201 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

1203 
s
->
∑sswd
.
d©a
 = 
NULL
;

1206 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Protocol: ",

1208 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
cscf
->
¥Ÿocﬁ
->
«me
.
d©a
,

1209 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn
);

1210 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1212 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Auth-Logö-Aâem±: %ui" 
CRLF
,

1213 
s
->
logö_©ãm±
);

1215 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-IP: ", ("Client-IP: ") - 1);

1216 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

1217 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

1218 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1220 i‡(
s
->
ho°
.
Àn
) {

1221 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-Host: ",

1223 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

1224 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1227 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

1231 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-Helo: ",

1233 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_hño
.
d©a
, s->smç_hño.
Àn
);

1234 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1236 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-From: ",

1238 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_‰om
.
d©a
, s->smç_‰om.
Àn
);

1239 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1241 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-To: ",

1243 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_to
.
d©a
, s->smç_to.
Àn
);

1244 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1248 i‡(
ahcf
->
hódî
.
Àn
) {

1249 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
hódî
.
d©a
,áhcf->hódî.
Àn
);

1253 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1255 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

1257 
ngx_°r_t
 
l
;

1259 
l
.
Àn
 = 
b
->
œ°
 - b->
pos
;

1260 
l
.
d©a
 = 
b
->
pos
;

1261 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1262 "maûáuth hâ∞hódî:\n\"%V\"", &
l
);

1266  
b
;

1267 
	}
}

1270 
ngx_öt_t


1271 
	$ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,Çgx_°r_à*
esˇ≥d
)

1273 
u_ch¨
 *
p
;

1274 
uöçå_t
 
n
;

1276 
n
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1278 i‡(
n
 == 0) {

1279 *
esˇ≥d
 = *
ãxt
;

1280  
NGX_OK
;

1283 
esˇ≥d
->
Àn
 = 
ãxt
->À¿+ 
n
 * 2;

1285 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
esˇ≥d
->
Àn
);

1286 i‡(
p
 =
NULL
) {

1287  
NGX_ERROR
;

1290 (Ë
	`ngx_esˇ≥_uri
(
p
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1292 
esˇ≥d
->
d©a
 = 
p
;

1294  
NGX_OK
;

1295 
	}
}

1299 
	$ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1301 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

1303 
ahcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_auth_hâp_c⁄f_t
));

1304 i‡(
ahcf
 =
NULL
) {

1305  
NULL
;

1308 
ahcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1310 
ahcf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

1311 
ahcf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1313  
ahcf
;

1314 
	}
}

1318 
	$ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1320 
ngx_maû_auth_hâp_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1321 
ngx_maû_auth_hâp_c⁄f_t
 *
c⁄f
 = 
chûd
;

1323 
u_ch¨
 *
p
;

1324 
size_t
 
Àn
;

1325 
ngx_uöt_t
 
i
;

1326 
ngx_èbÀ_ñt_t
 *
hódî
;

1328 i‡(
c⁄f
->
≥î
 =
NULL
) {

1329 
c⁄f
->
≥î
 = 
¥ev
->peer;

1330 
c⁄f
->
ho°_hódî
 = 
¥ev
->host_header;

1331 
c⁄f
->
uri
 = 
¥ev
->uri;

1333 i‡(
c⁄f
->
≥î
 =
NULL
) {

1334 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1336 
c⁄f
->
fûe
, c⁄f->
löe
);

1338  
NGX_CONF_ERROR
;

1342 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

1344 i‡(
c⁄f
->
hódîs
 =
NULL
) {

1345 
c⁄f
->
hódîs
 = 
¥ev
->headers;

1346 
c⁄f
->
hódî
 = 
¥ev
->header;

1349 i‡(
c⁄f
->
hódîs
 && c⁄f->
hódî
.
Àn
 == 0) {

1350 
Àn
 = 0;

1351 
hódî
 = 
c⁄f
->
hódîs
->
ñts
;

1352 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1353 
Àn
 +
hódî
[
i
].
key
.À¿+ 2 + hódî[i].
vÆue
.len + 2;

1356 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1357 i‡(
p
 =
NULL
) {

1358  
NGX_CONF_ERROR
;

1361 
c⁄f
->
hódî
.
Àn
 =Üen;

1362 
c⁄f
->
hódî
.
d©a
 = 
p
;

1364 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1365 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1366 *
p
++ = ':'; *p++ = ' ';

1367 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1368 *
p
++ = 
CR
; *p++ = 
LF
;

1372  
NGX_CONF_OK
;

1373 
	}
}

1377 
	$ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1379 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1381 
ngx_°r_t
 *
vÆue
;

1382 
ngx_uæ_t
 
u
;

1384 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1386 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1388 
u
.
uæ
 = 
vÆue
[1];

1389 
u
.
deÁu…_p‹t
 = 80;

1390 
u
.
uri_∑π
 = 1;

1391 
u
.
⁄e_addr
 = 1;

1393 i‡(
	`ngx_°∫cmp
(
u
.
uæ
.
d©a
, "http://", 7) == 0) {

1394 
u
.
uæ
.
Àn
 -= 7;

1395 
u
.
uæ
.
d©a
 += 7;

1398 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1399 i‡(
u
.
îr
) {

1400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1401 "%†öáuth_hâ∞\"%V\"", 
u
.
îr
, &u.
uæ
);

1404  
NGX_CONF_ERROR
;

1407 
ahcf
->
≥î
 = 
u
.
addrs
;

1409 i‡(
u
.
Ámûy
 !
AF_UNIX
) {

1410 
ahcf
->
ho°_hódî
 = 
u
.
ho°
;

1413 
	`ngx_°r_£t
(&
ahcf
->
ho°_hódî
, "localhost");

1416 
ahcf
->
uri
 = 
u
.uri;

1418 i‡(
ahcf
->
uri
.
Àn
 == 0) {

1419 
	`ngx_°r_£t
(&
ahcf
->
uri
, "/");

1422  
NGX_CONF_OK
;

1423 
	}
}

1427 
	$ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1429 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1431 
ngx_°r_t
 *
vÆue
;

1432 
ngx_èbÀ_ñt_t
 *
hódî
;

1434 i‡(
ahcf
->
hódîs
 =
NULL
) {

1435 
ahcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
));

1436 i‡(
ahcf
->
hódîs
 =
NULL
) {

1437  
NGX_CONF_ERROR
;

1441 
hódî
 = 
	`ngx_¨øy_push
(
ahcf
->
hódîs
);

1442 i‡(
hódî
 =
NULL
) {

1443  
NGX_CONF_ERROR
;

1446 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1448 
hódî
->
key
 = 
vÆue
[1];

1449 
hódî
->
vÆue
 = value[2];

1451  
NGX_CONF_OK
;

1452 
	}
}

	@src/mail/ngx_mail_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

18 *
ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

19 *
c⁄f
);

20 *
ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_so_kì∑live
 = {

29 
ngx_c⁄f_dïªˇãd
, "so_keepalive",

34 
ngx_comm™d_t
 
	gngx_maû_c‹e_comm™ds
[] = {

36 { 
ngx_°rög
("server"),

37 
NGX_MAIL_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

38 
ngx_maû_c‹e_£rvî
,

41 
NULL
 },

43 { 
ngx_°rög
("listen"),

44 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

45 
ngx_maû_c‹e_li°í
,

46 
NGX_MAIL_SRV_CONF_OFFSET
,

48 
NULL
 },

50 { 
ngx_°rög
("protocol"),

51 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

52 
ngx_maû_c‹e_¥Ÿocﬁ
,

53 
NGX_MAIL_SRV_CONF_OFFSET
,

55 
NULL
 },

57 { 
ngx_°rög
("so_keepalive"),

58 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

59 
ngx_c⁄f_£t_Êag_¶Ÿ
,

60 
NGX_MAIL_SRV_CONF_OFFSET
,

61 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
so_kì∑live
),

62 &
ngx_c⁄f_dïªˇãd_so_kì∑live
 },

64 { 
ngx_°rög
("timeout"),

65 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_m£c_¶Ÿ
,

67 
NGX_MAIL_SRV_CONF_OFFSET
,

68 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
timeout
),

69 
NULL
 },

71 { 
ngx_°rög
("server_name"),

72 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_°r_¶Ÿ
,

74 
NGX_MAIL_SRV_CONF_OFFSET
,

75 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
£rvî_«me
),

76 
NULL
 },

78 { 
ngx_°rög
("resolver"),

79 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

80 
ngx_maû_c‹e_ªsﬁvî
,

81 
NGX_MAIL_SRV_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("resolver_timeout"),

86 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_m£c_¶Ÿ
,

88 
NGX_MAIL_SRV_CONF_OFFSET
,

89 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
ªsﬁvî_timeout
),

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_maû_moduÀ_t
 
	gngx_maû_c‹e_moduÀ_˘x
 = {

97 
NULL
,

99 
ngx_maû_c‹e_¸óã_maö_c⁄f
,

100 
NULL
,

102 
ngx_maû_c‹e_¸óã_§v_c⁄f
,

103 
ngx_maû_c‹e_mîge_§v_c⁄f


107 
ngx_moduÀ_t
 
	gngx_maû_c‹e_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_maû_c‹e_moduÀ_˘x
,

110 
ngx_maû_c‹e_comm™ds
,

111 
NGX_MAIL_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


124 
	$ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

126 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

128 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_maö_c⁄f_t
));

129 i‡(
cmcf
 =
NULL
) {

130  
NULL
;

133 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

134 (
ngx_maû_c‹e_§v_c⁄f_t
 *))

135 !
NGX_OK
)

137  
NULL
;

140 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_maû_li°í_t
))

141 !
NGX_OK
)

143  
NULL
;

146  
cmcf
;

147 
	}
}

151 
	$ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

155 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_§v_c⁄f_t
));

156 i‡(
cscf
 =
NULL
) {

157  
NULL
;

166 
cscf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

167 
cscf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

168 
cscf
->
so_kì∑live
 = 
NGX_CONF_UNSET
;

170 
cscf
->
ªsﬁvî
 = 
NGX_CONF_UNSET_PTR
;

172 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

173 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

175  
cscf
;

176 
	}
}

180 
	$ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

182 
ngx_maû_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

183 
ngx_maû_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

185 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

186 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
, 
¥ev
->resolver_timeout,

189 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
so_kì∑live
, 
¥ev
->so_keepalive, 0);

192 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
£rvî_«me
, 
¥ev
->server_name, "");

194 i‡(
c⁄f
->
£rvî_«me
.
Àn
 == 0) {

195 
c⁄f
->
£rvî_«me
 = 
cf
->
cy˛e
->
ho°«me
;

198 i‡(
c⁄f
->
¥Ÿocﬁ
 =
NULL
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

201 
c⁄f
->
fûe_«me
, c⁄f->
löe
);

202  
NGX_CONF_ERROR
;

205 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªsﬁvî
, 
¥ev
->ªsﬁvî, 
NULL
);

207  
NGX_CONF_OK
;

208 
	}
}

212 
	$ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
rv
;

215 *
mc⁄f
;

216 
ngx_uöt_t
 
m
;

217 
ngx_c⁄f_t
 
pcf
;

218 
ngx_maû_moduÀ_t
 *
moduÀ
;

219 
ngx_maû_c⁄f_˘x_t
 *
˘x
, *
maû_˘x
;

220 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

221 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

223 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

224 i‡(
˘x
 =
NULL
) {

225  
NGX_CONF_ERROR
;

228 
maû_˘x
 = 
cf
->
˘x
;

229 
˘x
->
maö_c⁄f
 = 
maû_˘x
->main_conf;

233 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

234 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

235  
NGX_CONF_ERROR
;

238 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

239 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

243 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

245 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

246 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

247 i‡(
mc⁄f
 =
NULL
) {

248  
NGX_CONF_ERROR
;

251 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

257 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

258 
cscf
->
˘x
 = ctx;

260 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

262 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

263 i‡(
cscÂ
 =
NULL
) {

264  
NGX_CONF_ERROR
;

267 *
cscÂ
 = 
cscf
;

272 
pcf
 = *
cf
;

273 
cf
->
˘x
 = ctx;

274 
cf
->
cmd_ty≥
 = 
NGX_MAIL_SRV_CONF
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
pcf
;

280  
rv
;

281 
	}
}

285 
	$ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

287 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

289 
size_t
 
Àn
, 
off
;

290 
ö_p‹t_t
 
p‹t
;

291 
ngx_°r_t
 *
vÆue
;

292 
ngx_uæ_t
 
u
;

293 
ngx_uöt_t
 
i
, 
m
;

294 
sockaddr
 *
ß
;

295 
ngx_maû_li°í_t
 *
ls
;

296 
ngx_maû_moduÀ_t
 *
moduÀ
;

297 
sockaddr_ö
 *
sö
;

298 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

299 #i‡(
NGX_HAVE_INET6
)

300 
sockaddr_ö6
 *
sö6
;

303 
vÆue
 = 
cf
->
¨gs
->
ñts
;

305 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

307 
u
.
uæ
 = 
vÆue
[1];

308 
u
.
li°í
 = 1;

310 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

311 i‡(
u
.
îr
) {

312 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

314 
u
.
îr
, &u.
uæ
);

317  
NGX_CONF_ERROR
;

320 
cmcf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

322 
ls
 = 
cmcf
->
li°í
.
ñts
;

324 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

326 
ß
 = (
sockaddr
 *Ë
ls
[
i
].sockaddr;

328 i‡(
ß
->
ß_Ámûy
 !
u
.
Ámûy
) {

332 
ß
->
ß_Ámûy
) {

334 #i‡(
NGX_HAVE_INET6
)

335 
AF_INET6
:

336 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

337 
Àn
 = 16;

338 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

339 
p‹t
 = 
sö6
->
sö6_p‹t
;

343 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

344 
AF_UNIX
:

345 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

346 
Àn
 = (((
sockaddr_un
 *Ë
ß
)->
sun_∑th
);

347 
p‹t
 = 0;

352 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

353 
Àn
 = 4;

354 
sö
 = (
sockaddr_ö
 *Ë
ß
;

355 
p‹t
 = 
sö
->
sö_p‹t
;

359 i‡(
	`ngx_memcmp
(
ls
[
i
].
sockaddr
 + 
off
, 
u
.sockadd∏+ off, 
Àn
) != 0) {

363 i‡(
p‹t
 !
u
.port) {

367 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

368 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

369  
NGX_CONF_ERROR
;

372 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

373 i‡(
ls
 =
NULL
) {

374  
NGX_CONF_ERROR
;

377 
	`ngx_memzîo
(
ls
, (
ngx_maû_li°í_t
));

379 
	`ngx_mem˝y
(
ls
->
sockaddr
, 
u
.sockaddr, u.
sockÀn
);

381 
ls
->
sockÀn
 = 
u
.socklen;

382 
ls
->
wûdˇrd
 = 
u
.wildcard;

383 
ls
->
˘x
 = 
cf
->ctx;

385 i‡(
cscf
->
¥Ÿocﬁ
 =
NULL
) {

386 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

387 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

391 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

393 i‡(
moduÀ
->
¥Ÿocﬁ
 =
NULL
) {

397 
i
 = 0; 
moduÀ
->
¥Ÿocﬁ
->
p‹t
[i]; i++) {

398 i‡(
moduÀ
->
¥Ÿocﬁ
->
p‹t
[
i
] =
u
.port) {

399 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

406 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

408 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

409 
ls
->
böd
 = 1;

413 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

414 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

415 
sockaddr
 *
ß
;

416 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

418 
ß
 = (
sockaddr
 *Ë
ls
->sockaddr;

420 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

422 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

423 
ls
->
ùv6⁄ly
 = 1;

425 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

426 
ls
->
ùv6⁄ly
 = 2;

429 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

431 &
vÆue
[
i
].
d©a
[9]);

432  
NGX_CONF_ERROR
;

435 
ls
->
böd
 = 1;

438 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

440 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

442 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

447 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

450  
NGX_CONF_ERROR
;

454 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "ssl") == 0) {

455 #i‡(
NGX_MAIL_SSL
)

456 
ls
->
s¶
 = 1;

459 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

462  
NGX_CONF_ERROR
;

466 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "so_keepalive=", 13) == 0) {

468 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "on") == 0) {

469 
ls
->
so_kì∑live
 = 1;

471 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "off") == 0) {

472 
ls
->
so_kì∑live
 = 2;

476 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

477 
u_ch¨
 *
p
, *
íd
;

478 
ngx_°r_t
 
s
;

480 
íd
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

481 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

483 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

484 i‡(
p
 =
NULL
) {

485 
p
 = 
íd
;

488 i‡(
p
 > 
s
.
d©a
) {

489 
s
.
Àn
 = 
p
 - s.
d©a
;

491 
ls
->
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

492 i‡(
ls
->
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

493 
övÆid_so_kì∑live
;

497 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

499 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

500 i‡(
p
 =
NULL
) {

501 
p
 = 
íd
;

504 i‡(
p
 > 
s
.
d©a
) {

505 
s
.
Àn
 = 
p
 - s.
d©a
;

507 
ls
->
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

508 i‡(
ls
->
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

509 
övÆid_so_kì∑live
;

513 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

515 i‡(
s
.
d©a
 < 
íd
) {

516 
s
.
Àn
 = 
íd
 - s.
d©a
;

518 
ls
->
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

519 i‡(
ls
->
t˝_kìp˙t
 =
NGX_ERROR
) {

520 
övÆid_so_kì∑live
;

524 i‡(
ls
->
t˝_kìpidÀ
 =0 &&Üs->
t˝_kìpötvl
 == 0

525 && 
ls
->
t˝_kìp˙t
 == 0)

527 
övÆid_so_kì∑live
;

530 
ls
->
so_kì∑live
 = 1;

534 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

537  
NGX_CONF_ERROR
;

542 
ls
->
böd
 = 1;

546 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

547 
övÆid_so_kì∑live
:

549 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

551 &
vÆue
[
i
].
d©a
[13]);

552  
NGX_CONF_ERROR
;

556 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

557 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

558  
NGX_CONF_ERROR
;

561  
NGX_CONF_OK
;

562 
	}
}

566 
	$ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

568 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

570 
ngx_°r_t
 *
vÆue
;

571 
ngx_uöt_t
 
m
;

572 
ngx_maû_moduÀ_t
 *
moduÀ
;

574 
vÆue
 = 
cf
->
¨gs
->
ñts
;

576 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

577 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

581 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

583 i‡(
moduÀ
->
¥Ÿocﬁ


584 && 
	`ngx_°rcmp
(
moduÀ
->
¥Ÿocﬁ
->
«me
.
d©a
, 
vÆue
[1].data) == 0)

586 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

588  
NGX_CONF_OK
;

592 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

593 "unknow¿¥Ÿocﬁ \"%V\"", &
vÆue
[1]);

594  
NGX_CONF_ERROR
;

595 
	}
}

599 
	$ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

601 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

603 
ngx_°r_t
 *
vÆue
;

605 
vÆue
 = 
cf
->
¨gs
->
ñts
;

607 i‡(
cscf
->
ªsﬁvî
 !
NGX_CONF_UNSET_PTR
) {

611 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

612 
cscf
->
ªsﬁvî
 = 
NULL
;

613  
NGX_CONF_OK
;

616 
cscf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

617 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

618  
NGX_CONF_ERROR
;

621  
NGX_CONF_OK
;

622 
	}
}

626 
	$ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

628 *
p
 = 
c⁄f
;

630 
ngx_°r_t
 *
c
, *
vÆue
;

631 
ngx_uöt_t
 
i
;

632 
ngx_¨øy_t
 *
a
;

634 
a
 = (
ngx_¨øy_t
 *Ë(
p
 + 
cmd
->
off£t
);

636 
vÆue
 = 
cf
->
¨gs
->
ñts
;

638 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

639 
c
 = 
	`ngx_¨øy_push
(
a
);

640 i‡(
c
 =
NULL
) {

641  
NGX_CONF_ERROR
;

644 *
c
 = 
vÆue
[
i
];

647  
NGX_CONF_OK
;

648 
	}
}

	@src/mail/ngx_mail_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 
ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

16 #i‡(
NGX_MAIL_SSL
)

17 
ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
);

18 
ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

23 
	$ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

25 
ngx_uöt_t
 
i
;

26 
ngx_maû_p‹t_t
 *
p‹t
;

27 
sockaddr
 *
ß
;

28 
sockaddr_ö
 *
sö
;

29 
ngx_maû_log_˘x_t
 *
˘x
;

30 
ngx_maû_ö_addr_t
 *
addr
;

31 
ngx_maû_£ssi⁄_t
 *
s
;

32 
ngx_maû_addr_c⁄f_t
 *
addr_c⁄f
;

33 #i‡(
NGX_HAVE_INET6
)

34 
sockaddr_ö6
 *
sö6
;

35 
ngx_maû_ö6_addr_t
 *
addr6
;

41 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

43 i‡(
p‹t
->
«ddrs
 > 1) {

53 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

54 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

58 
ß
 = 
c
->
loˇl_sockaddr
;

60 
ß
->
ß_Ámûy
) {

62 #i‡(
NGX_HAVE_INET6
)

63 
AF_INET6
:

64 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

66 
addr6
 = 
p‹t
->
addrs
;

70 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

71 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

76 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

82 
sö
 = (
sockaddr_ö
 *Ë
ß
;

84 
addr
 = 
p‹t
->
addrs
;

88 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

89 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

94 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

100 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

102 #i‡(
NGX_HAVE_INET6
)

103 
AF_INET6
:

104 
addr6
 = 
p‹t
->
addrs
;

105 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

110 
addr
 = 
p‹t
->
addrs
;

111 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

116 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_maû_£ssi⁄_t
));

117 i‡(
s
 =
NULL
) {

118 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

122 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

123 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

125 
s
->
addr_ãxt
 = &
addr_c⁄f
->addr_text;

127 
c
->
d©a
 = 
s
;

128 
s
->
c⁄√˘i⁄
 = 
c
;

130 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%ui client %V connectedÅo %V",

131 
c
->
numbî
, &c->
addr_ãxt
, 
s
->addr_text);

133 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_maû_log_˘x_t
));

134 i‡(
˘x
 =
NULL
) {

135 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

139 
˘x
->
˛õ¡
 = &
c
->
addr_ãxt
;

140 
˘x
->
£ssi⁄
 = 
s
;

142 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

143 
c
->
log
->
h™dÀr
 = 
ngx_maû_log_îr‹
;

144 
c
->
log
->
d©a
 = 
˘x
;

145 
c
->
log
->
a˘i⁄
 = "sending client greetingÜine";

147 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

149 #i‡(
NGX_MAIL_SSL
)

151 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

153 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

155 i‡(
s¶cf
->
íabÀ
) {

156 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

158 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

162 i‡(
addr_c⁄f
->
s¶
) {

164 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

166 i‡(
s¶cf
->
s¶
.
˘x
 =
NULL
) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

170 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

174 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

181 
	`ngx_maû_öô_£ssi⁄
(
c
);

182 
	}
}

185 #i‡(
NGX_MAIL_SSL
)

188 
	$ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
)

190 
ngx_c⁄√˘i⁄_t
 *
c
;

191 
ngx_maû_£ssi⁄_t
 *
s
;

192 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

194 
c
 = 
ªv
->
d©a
;

195 
s
 = 
c
->
d©a
;

196 
s
->
°¨âls
 = 1;

198 
c
->
log
->
a˘i⁄
 = "in starttls state";

200 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

202 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

203 
	}
}

207 
	$ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
)

209 
ngx_maû_£ssi⁄_t
 *
s
;

210 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

212 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
s¶
, 
c
, 0Ë=
NGX_ERROR
) {

213 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

217 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

219 
s
 = 
c
->
d©a
;

221 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

223 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

225 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_s¶_h™dshake_h™dÀr
;

230 
	`ngx_maû_s¶_h™dshake_h™dÀr
(
c
);

231 
	}
}

235 
	$ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

237 
ngx_maû_£ssi⁄_t
 *
s
;

238 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

240 i‡(
c
->
s¶
->
h™dshaked
) {

242 
s
 = 
c
->
d©a
;

244 i‡(
s
->
°¨âls
) {

245 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

247 
c
->
ªad
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
öô_¥Ÿocﬁ
;

248 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

250 
cscf
->
¥Ÿocﬁ
->
	`öô_¥Ÿocﬁ
(
c
->
ªad
);

255 
c
->
ªad
->
ªady
 = 0;

257 
	`ngx_maû_öô_£ssi⁄
(
c
);

261 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

262 
	}
}

268 
	$ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

270 
ngx_maû_£ssi⁄_t
 *
s
;

271 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

273 
s
 = 
c
->
d©a
;

275 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

277 
s
->
¥Ÿocﬁ
 = 
cscf
->¥Ÿocﬁ->
ty≥
;

279 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

280 i‡(
s
->
˘x
 =
NULL
) {

281 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

285 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

287 
cscf
->
¥Ÿocﬁ
->
	`öô_£ssi⁄
(
s
, 
c
);

288 
	}
}

291 
ngx_öt_t


292 
	$ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

293 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
)

295 
s
->
ß…
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

296 (" <18446744073709551616.@>" 
CRLF
) - 1

297 + 
NGX_TIME_T_LEN


298 + 
cscf
->
£rvî_«me
.
Àn
);

299 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

300  
NGX_ERROR
;

303 
s
->
ß…
.
Àn
 = 
	`ngx_•rötf
(s->ß….
d©a
, "<%ul.%T@%V>" 
CRLF
,

304 
	`ngx_øndom
(), 
	`ngx_time
(), &
cscf
->
£rvî_«me
)

305 - 
s
->
ß…
.
d©a
;

307  
NGX_OK
;

308 
	}
}

311 #i‡(
NGX_MAIL_SSL
)

313 
ngx_öt_t


314 
	$ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

316 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

318 i‡(
c
->
s¶
) {

322 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

324 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

329 
	}
}

334 
ngx_öt_t


335 
	$ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
)

337 
u_ch¨
 *
p
, *
œ°
;

338 
ngx_°r_t
 *
¨g
, 
∂aö
;

340 
¨g
 = 
s
->
¨gs
.
ñts
;

342 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

343 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

344 "maûáuthÖœö: \"%V\"", &
¨g
[
n
]);

347 
∂aö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

348 i‡(
∂aö
.
d©a
 =
NULL
) {

349  
NGX_ERROR
;

352 i‡(
	`ngx_decode_ba£64
(&
∂aö
, &
¨g
[
n
]Ë!
NGX_OK
) {

353 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

355  
NGX_MAIL_PARSE_INVALID_COMMAND
;

358 
p
 = 
∂aö
.
d©a
;

359 
œ°
 = 
p
 + 
∂aö
.
Àn
;

361 
p
 < 
œ°
 && *p++) { }

363 i‡(
p
 =
œ°
) {

364 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

366  
NGX_MAIL_PARSE_INVALID_COMMAND
;

369 
s
->
logö
.
d©a
 = 
p
;

371 
p
 < 
œ°
 && *p) {Ö++; }

373 i‡(
p
 =
œ°
) {

374 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

376  
NGX_MAIL_PARSE_INVALID_COMMAND
;

379 
s
->
logö
.
Àn
 = 
p
++ - s->logö.
d©a
;

381 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

382 
s
->
∑sswd
.
d©a
 = 
p
;

384 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

385 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

386 "maûáuthÖœö: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

389  
NGX_DONE
;

390 
	}
}

393 
ngx_öt_t


394 
	$ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

395 
ngx_uöt_t
 
n
)

397 
ngx_°r_t
 *
¨g
;

399 
¨g
 = 
s
->
¨gs
.
ñts
;

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

402 "maûáuthÜogö u£∫ame: \"%V\"", &
¨g
[
n
]);

404 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

405 i‡(
s
->
logö
.
d©a
 =
NULL
) {

406  
NGX_ERROR
;

409 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[
n
]Ë!
NGX_OK
) {

410 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

412  
NGX_MAIL_PARSE_INVALID_COMMAND
;

415 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

416 "maûáuthÜogö u£∫ame: \"%V\"", &
s
->
logö
);

418  
NGX_OK
;

419 
	}
}

422 
ngx_öt_t


423 
	$ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

425 
ngx_°r_t
 *
¨g
;

427 
¨g
 = 
s
->
¨gs
.
ñts
;

429 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

430 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "maûáuthÜogöÖassw‹d: \"%V\"", &
¨g
[0]);

434 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

435 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

436 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

437  
NGX_ERROR
;

440 i‡(
	`ngx_decode_ba£64
(&
s
->
∑sswd
, &
¨g
[0]Ë!
NGX_OK
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

443  
NGX_MAIL_PARSE_INVALID_COMMAND
;

446 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

447 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

448 "maûáuthÜogöÖassw‹d: \"%V\"", &
s
->
∑sswd
);

451  
NGX_DONE
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

457 *
¥efix
, 
size_t
 
Àn
)

459 
u_ch¨
 *
p
;

460 
ngx_°r_t
 
ß…
;

461 
ngx_uöt_t
 
n
;

463 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
 + 
	`ngx_ba£64_ícoded_Àngth
(
s
->
ß…
.len) + 2);

464 i‡(
p
 =
NULL
) {

465  
NGX_ERROR
;

468 
ß…
.
d©a
 = 
	`ngx_˝ymem
(
p
, 
¥efix
, 
Àn
);

469 
s
->
ß…
.
Àn
 -= 2;

471 
	`ngx_ícode_ba£64
(&
ß…
, &
s
->salt);

473 
s
->
ß…
.
Àn
 += 2;

474 
n
 = 
Àn
 + 
ß…
.len;

475 
p
[
n
++] = 
CR
;Ö[n++] = 
LF
;

477 
s
->
out
.
Àn
 = 
n
;

478 
s
->
out
.
d©a
 = 
p
;

480  
NGX_OK
;

481 
	}
}

484 
ngx_öt_t


485 
	$ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

487 
u_ch¨
 *
p
, *
œ°
;

488 
ngx_°r_t
 *
¨g
;

490 
¨g
 = 
s
->
¨gs
.
ñts
;

492 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

493 "maûáuth cøm-md5: \"%V\"", &
¨g
[0]);

495 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

496 i‡(
s
->
logö
.
d©a
 =
NULL
) {

497  
NGX_ERROR
;

500 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[0]Ë!
NGX_OK
) {

501 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

503  
NGX_MAIL_PARSE_INVALID_COMMAND
;

506 
p
 = 
s
->
logö
.
d©a
;

507 
œ°
 = 
p
 + 
s
->
logö
.
Àn
;

509 
p
 < 
œ°
) {

510 i‡(*
p
++ == ' ') {

511 
s
->
logö
.
Àn
 = 
p
 - s->logö.
d©a
 - 1;

512 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

513 
s
->
∑sswd
.
d©a
 = 
p
;

518 i‡(
s
->
∑sswd
.
Àn
 != 32) {

519 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

521  
NGX_MAIL_PARSE_INVALID_COMMAND
;

524 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

525 "maûáuth cøm-md5: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

527 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_CRAM_MD5
;

529  
NGX_DONE
;

530 
	}
}

534 
	$ngx_maû_£nd
(
ngx_evít_t
 *
wev
)

536 
ngx_öt_t
 
n
;

537 
ngx_c⁄√˘i⁄_t
 *
c
;

538 
ngx_maû_£ssi⁄_t
 *
s
;

539 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

541 
c
 = 
wev
->
d©a
;

542 
s
 = 
c
->
d©a
;

544 i‡(
wev
->
timedout
) {

545 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

546 
c
->
timedout
 = 1;

547 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

551 i‡(
s
->
out
.
Àn
 == 0) {

552 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

553 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

559 
n
 = 
c
->
	`£nd
(c, 
s
->
out
.
d©a
, s->out.
Àn
);

561 i‡(
n
 > 0) {

562 
s
->
out
.
Àn
 -
n
;

564 i‡(
wev
->
timî_£t
) {

565 
	`ngx_dñ_timî
(
wev
);

568 i‡(
s
->
quô
) {

569 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

573 i‡(
s
->
blocked
) {

574 
c
->
ªad
->
	`h™dÀr
(c->read);

580 i‡(
n
 =
NGX_ERROR
) {

581 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

587 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

589 
	`ngx_add_timî
(
c
->
wrôe
, 
cscf
->
timeout
);

591 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

592 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

601 
ssize_t
 
n
;

602 
ngx_öt_t
 
rc
;

603 
ngx_°r_t
 
l
;

604 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

606 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

608 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

609 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

610  
NGX_ERROR
;

613 i‡(
n
 > 0) {

614 
s
->
buf„r
->
œ°
 +
n
;

617 i‡(
n
 =
NGX_AGAIN
) {

618 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

619 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

620  
NGX_ERROR
;

623  
NGX_AGAIN
;

626 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

628 
rc
 = 
cscf
->
¥Ÿocﬁ
->
	`∑r£_comm™d
(
s
);

630 i‡(
rc
 =
NGX_AGAIN
) {

632 i‡(
s
->
buf„r
->
œ°
 < s->buf„r->
íd
) {

633  
rc
;

636 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

637 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

639 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

640 "˛õ¡ síàtoÿl⁄g comm™d \"%V\"", &
l
);

642 
s
->
quô
 = 1;

644  
NGX_MAIL_PARSE_INVALID_COMMAND
;

647 i‡(
rc
 =
NGX_IMAP_NEXT
 ||Ñ¯=
NGX_MAIL_PARSE_INVALID_COMMAND
) {

648  
rc
;

651 i‡(
rc
 =
NGX_ERROR
) {

652 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

653  
NGX_ERROR
;

656  
NGX_OK
;

657 
	}
}

661 
	$ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

663 
s
->
¨gs
.
√…s
 = 0;

664 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

665 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

666 
s
->
°©e
 = 0;

668 i‡(
c
->
ªad
->
timî_£t
) {

669 
	`ngx_dñ_timî
(
c
->
ªad
);

672 
s
->
logö_©ãm±
++;

674 
	`ngx_maû_auth_hâp_öô
(
s
);

675 
	}
}

679 
	$ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

681 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

683 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

685 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
öã∫Æ_£rvî_îr‹
;

686 
s
->
quô
 = 1;

688 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

689 
	}
}

693 
	$ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

695 
ngx_poﬁ_t
 *
poﬁ
;

697 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

698 "˛o£ maû c⁄√˘i⁄: %d", 
c
->
fd
);

700 #i‡(
NGX_MAIL_SSL
)

702 i‡(
c
->
s¶
) {

703 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

704 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_˛o£_c⁄√˘i⁄
;

711 #i‡(
NGX_STAT_STUB
)

712 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

715 
c
->
de°royed
 = 1;

717 
poﬁ
 = 
c
->pool;

719 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

721 
	`ngx_de°roy_poﬁ
(
poﬁ
);

722 
	}
}

725 
u_ch¨
 *

726 
	$ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

728 
u_ch¨
 *
p
;

729 
ngx_maû_£ssi⁄_t
 *
s
;

730 
ngx_maû_log_˘x_t
 *
˘x
;

732 i‡(
log
->
a˘i⁄
) {

733 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

734 
Àn
 -
p
 - 
buf
;

735 
buf
 = 
p
;

738 
˘x
 = 
log
->
d©a
;

740 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", 
˘x
->
˛õ¡
);

741 
Àn
 -
p
 - 
buf
;

742 
buf
 = 
p
;

744 
s
 = 
˘x
->
£ssi⁄
;

746 i‡(
s
 =
NULL
) {

747  
p
;

750 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, "%s, server: %V",

751 
s
->
°¨âls
 ? " using starttls" : "",

752 
s
->
addr_ãxt
);

753 
Àn
 -
p
 - 
buf
;

754 
buf
 = 
p
;

756 i‡(
s
->
logö
.
Àn
 == 0) {

757  
p
;

760 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Üogö: \"%V\"", &
s
->
logö
);

761 
Àn
 -
p
 - 
buf
;

762 
buf
 = 
p
;

764 i‡(
s
->
¥oxy
 =
NULL
) {

765  
p
;

768 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", up°ªam: %V", 
s
->
¥oxy
->
up°ªam
.
«me
);

770  
p
;

771 
	}
}

	@src/mail/ngx_mail_imap_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
,

16 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
,

18 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

22 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
u_ch¨
 
	gim≠_gªëög
[] = "* OK IMAP4Ñódy" 
CRLF
;

26 
u_ch¨
 
	gim≠_°¨
[] = "* ";

27 
u_ch¨
 
	gim≠_ok
[] = "OK com∂ëed" 
CRLF
;

28 
u_ch¨
 
	gim≠_√xt
[] = "+ OK" 
CRLF
;

29 
u_ch¨
 
	gim≠_∂aö_√xt
[] = "+ " 
CRLF
;

30 
u_ch¨
 
	gim≠_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

31 
u_ch¨
 
	gim≠_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

32 
u_ch¨
 
	gim≠_bye
[] = "* BYE" 
CRLF
;

33 
u_ch¨
 
	gim≠_övÆid_comm™d
[] = "BAD invÆid comm™d" 
CRLF
;

37 
	$ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

39 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

41 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

43 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_gªëög
);

45 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_öô_¥Ÿocﬁ
;

47 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

49 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

50 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

53 
	`ngx_maû_£nd
(
c
->
wrôe
);

54 
	}
}

58 
	$ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

60 
ngx_c⁄√˘i⁄_t
 *
c
;

61 
ngx_maû_£ssi⁄_t
 *
s
;

62 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

64 
c
 = 
ªv
->
d©a
;

66 
c
->
log
->
a˘i⁄
 = "ináuth state";

68 i‡(
ªv
->
timedout
) {

69 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

70 
c
->
timedout
 = 1;

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

75 
s
 = 
c
->
d©a
;

77 i‡(
s
->
buf„r
 =
NULL
) {

78 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

79 =
NGX_ERROR
)

81 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

85 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

87 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
iscf
->
˛õ¡_buf„r_size
);

88 i‡(
s
->
buf„r
 =
NULL
) {

89 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

94 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

95 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_auth_°©e
;

97 
	`ngx_maû_im≠_auth_°©e
(
ªv
);

98 
	}
}

102 
	$ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
)

104 
u_ch¨
 *
p
, *
d°
, *
§c
, *
íd
;

105 
ngx_°r_t
 *
¨g
;

106 
ngx_öt_t
 
rc
;

107 
ngx_uöt_t
 
èg
, 
i
;

108 
ngx_c⁄√˘i⁄_t
 *
c
;

109 
ngx_maû_£ssi⁄_t
 *
s
;

111 
c
 = 
ªv
->
d©a
;

112 
s
 = 
c
->
d©a
;

114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth state");

116 i‡(
ªv
->
timedout
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

118 
c
->
timedout
 = 1;

119 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

123 i‡(
s
->
out
.
Àn
) {

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imap send handler busy");

125 
s
->
blocked
 = 1;

129 
s
->
blocked
 = 0;

131 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

133 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

137 
èg
 = 1;

138 
s
->
ãxt
.
Àn
 = 0;

139 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_ok
);

141 i‡(
rc
 =
NGX_OK
) {

143 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth command: %i",

144 
s
->
comm™d
);

146 i‡(
s
->
back¶ash
) {

148 
¨g
 = 
s
->
¨gs
.
ñts
;

150 
i
 = 0; i < 
s
->
¨gs
.
√…s
; i++) {

151 
d°
 = 
¨g
[
i
].
d©a
;

152 
íd
 = 
d°
 + 
¨g
[
i
].
Àn
;

154 
§c
 = 
d°
; sr¯< 
íd
; dst++) {

155 *
d°
 = *
§c
;

156 i‡(*
§c
++ == '\\') {

157 *
d°
 = *
§c
++;

161 
¨g
[
i
].
Àn
 = 
d°
 -árg[i].
d©a
;

164 
s
->
back¶ash
 = 0;

167 
s
->
maû_°©e
) {

169 
ngx_im≠_°¨t
:

171 
s
->
comm™d
) {

173 
NGX_IMAP_LOGIN
:

174 
rc
 = 
	`ngx_maû_im≠_logö
(
s
, 
c
);

177 
NGX_IMAP_AUTHENTICATE
:

178 
rc
 = 
	`ngx_maû_im≠_authítiˇã
(
s
, 
c
);

179 
èg
 = (
rc
 !
NGX_OK
);

182 
NGX_IMAP_CAPABILITY
:

183 
rc
 = 
	`ngx_maû_im≠_ˇ∑bûôy
(
s
, 
c
);

186 
NGX_IMAP_LOGOUT
:

187 
s
->
quô
 = 1;

188 
	`ngx_°r_£t
(&
s
->
ãxt
, 
im≠_bye
);

191 
NGX_IMAP_NOOP
:

194 
NGX_IMAP_STARTTLS
:

195 
rc
 = 
	`ngx_maû_im≠_°¨âls
(
s
, 
c
);

199 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

205 
ngx_im≠_auth_logö_u£∫ame
:

206 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

208 
èg
 = 0;

209 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

210 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

214 
ngx_im≠_auth_logö_∑ssw‹d
:

215 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

218 
ngx_im≠_auth_∂aö
:

219 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

222 
ngx_im≠_auth_¸am_md5
:

223 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

227 } i‡(
rc
 =
NGX_IMAP_NEXT
) {

228 
èg
 = 0;

229 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_√xt
);

232 
rc
) {

234 
NGX_DONE
:

235 
	`ngx_maû_auth
(
s
, 
c
);

238 
NGX_ERROR
:

239 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

242 
NGX_MAIL_PARSE_INVALID_COMMAND
:

243 
s
->
°©e
 = 0;

244 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_övÆid_comm™d
);

245 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

249 i‡(
èg
) {

250 i‡(
s
->
èg
.
Àn
 == 0) {

251 
	`ngx_°r_£t
(&
s
->
èg
, 
im≠_°¨
);

254 i‡(
s
->
ègged_löe
.
Àn
 < s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len) {

255 
s
->
ègged_löe
.
Àn
 = s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len;

256 
s
->
ègged_löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->ègged_löe.
Àn
);

257 i‡(
s
->
ègged_löe
.
d©a
 =
NULL
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

263 
p
 = 
s
->
ègged_löe
.
d©a
;

265 i‡(
s
->
ãxt
.
Àn
) {

266 
p
 = 
	`ngx_˝ymem
’, 
s
->
ãxt
.
d©a
, s->ãxt.
Àn
);

269 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

270 
	`ngx_mem˝y
(
p
, 
s
->
out
.
d©a
, s->out.
Àn
);

272 
s
->
out
.
Àn
 = s->
ãxt
.À¿+ s->
èg
.len + s->out.len;

273 
s
->
out
.
d©a
 = s->
ègged_löe
.data;

276 i‡(
rc
 !
NGX_IMAP_NEXT
) {

277 
s
->
¨gs
.
√…s
 = 0;

279 i‡(
s
->
°©e
) {

281 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
 + s->
èg
.
Àn
;

282 
s
->
buf„r
->
pos
 = s->
¨g_°¨t
;

283 
s
->
buf„r
->
œ°
 = s->
¨g_°¨t
;

286 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

287 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

288 
s
->
èg
.
Àn
 = 0;

292 
	`ngx_maû_£nd
(
c
->
wrôe
);

293 
	}
}

296 
ngx_öt_t


297 
	$ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

299 
ngx_°r_t
 *
¨g
;

301 #i‡(
NGX_MAIL_SSL
)

302 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

303  
NGX_MAIL_PARSE_INVALID_COMMAND
;

307 
¨g
 = 
s
->
¨gs
.
ñts
;

309 i‡(
s
->
¨gs
.
√…s
 !2 || 
¨g
[0].
Àn
 == 0) {

310  
NGX_MAIL_PARSE_INVALID_COMMAND
;

313 
s
->
logö
.
Àn
 = 
¨g
[0].len;

314 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

315 i‡(
s
->
logö
.
d©a
 =
NULL
) {

316  
NGX_ERROR
;

319 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

321 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

332 &
s
->
logö
, &s->
∑sswd
);

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

335 "im≠Üogö:\"%V\"", &
s
->
logö
);

338  
NGX_DONE
;

339 
	}
}

342 
ngx_öt_t


343 
	$ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

345 
ngx_öt_t
 
rc
;

346 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

347 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

349 #i‡(
NGX_MAIL_SSL
)

350 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

351  
NGX_MAIL_PARSE_INVALID_COMMAND
;

355 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

357 
rc
) {

359 
NGX_MAIL_AUTH_LOGIN
:

361 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_u£∫ame
);

362 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_u£∫ame
;

364  
NGX_OK
;

366 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

368 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

369 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

371  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

373 
NGX_MAIL_AUTH_PLAIN
:

375 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∂aö_√xt
);

376 
s
->
maû_°©e
 = 
ngx_im≠_auth_∂aö
;

378  
NGX_OK
;

380 
NGX_MAIL_AUTH_CRAM_MD5
:

382 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

384 i‡(!(
iscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

385  
NGX_MAIL_PARSE_INVALID_COMMAND
;

388 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

389 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

391 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

392  
NGX_ERROR
;

396 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

397 
s
->
maû_°©e
 = 
ngx_im≠_auth_¸am_md5
;

398  
NGX_OK
;

401  
NGX_ERROR
;

404  
rc
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

411 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

413 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

415 #i‡(
NGX_MAIL_SSL
)

417 i‡(
c
->
s¶
 =
NULL
) {

418 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

420 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

422 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

423 
s
->
ãxt
 = 
iscf
->
°¨âls_ˇ∑bûôy
;

424  
NGX_OK
;

427 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

428 
s
->
ãxt
 = 
iscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

429  
NGX_OK
;

434 
s
->
ãxt
 = 
iscf
->
ˇ∑bûôy
;

436  
NGX_OK
;

437 
	}
}

440 
ngx_öt_t


441 
	$ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

443 #i‡(
NGX_MAIL_SSL
)

444 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

446 i‡(
c
->
s¶
 =
NULL
) {

447 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

448 i‡(
s¶cf
->
°¨âls
) {

449 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

450  
NGX_OK
;

456  
NGX_MAIL_PARSE_INVALID_COMMAND
;

457 
	}
}

	@src/mail/ngx_mail_imap_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 *
ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_im≠_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("IMAP4"),

22 
ngx_°rög
("IMAP4rev1"),

23 
ngx_°rög
("UIDPLUS"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_im≠_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_im≠_auth_mëhods_«mes
[] = {

37 
ngx_°rög
("AUTH=PLAIN"),

38 
ngx_°rög
("AUTH=LOGIN"),

39 
ngx_nuŒ_°rög
,

40 
ngx_°rög
("AUTH=CRAM-MD5"),

41 
ngx_nuŒ_°rög


45 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_im≠_¥Ÿocﬁ
 = {

46 
ngx_°rög
("imap"),

48 
NGX_MAIL_IMAP_PROTOCOL
,

50 
ngx_maû_im≠_öô_£ssi⁄
,

51 
ngx_maû_im≠_öô_¥Ÿocﬁ
,

52 
ngx_maû_im≠_∑r£_comm™d
,

53 
ngx_maû_im≠_auth_°©e
,

55 
ngx_°rög
("* BAD i¡î«»£rvîÉº‹" 
CRLF
)

59 
ngx_comm™d_t
 
	gngx_maû_im≠_comm™ds
[] = {

61 { 
ngx_°rög
("imap_client_buffer"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_size_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

66 
NULL
 },

68 { 
ngx_°rög
("imap_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("imap_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_im≠_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_im≠_moduÀ_˘x
 = {

87 &
ngx_maû_im≠_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_im≠_¸óã_§v_c⁄f
,

93 
ngx_maû_im≠_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_im≠_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_im≠_moduÀ_˘x
,

100 
ngx_maû_im≠_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

118 
iscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_im≠_§v_c⁄f_t
));

119 i‡(
iscf
 =
NULL
) {

120  
NULL
;

123 
iscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

125 i‡(
	`ngx_¨øy_öô
(&
iscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

126 !
NGX_OK
)

128  
NULL
;

131  
iscf
;

132 
	}
}

136 
	$ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

138 
ngx_maû_im≠_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

139 
ngx_maû_im≠_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

141 
u_ch¨
 *
p
, *
auth
;

142 
size_t
 
size
;

143 
ngx_°r_t
 *
c
, *
d
;

144 
ngx_uöt_t
 
i
, 
m
;

146 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

147 
¥ev
->
˛õ¡_buf„r_size
,

148 (
size_t
Ë
ngx_∑gesize
);

150 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

151 
¥ev
->
auth_mëhods
,

152 (
NGX_CONF_BITMASK_SET


153 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

156 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

157 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

160 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

162 
d
 = 
ngx_maû_im≠_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

163 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

164 i‡(
c
 =
NULL
) {

165  
NGX_CONF_ERROR
;

168 *
c
 = *
d
;

172 
size
 = ("* CAPABILITY" 
CRLF
) - 1;

174 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

175 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

176 
size
 +1 + 
c
[
i
].
Àn
;

179 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

180 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

181 
m
 <<1, 
i
++)

183 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

184 
size
 +1 + 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
;

188 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

189 i‡(
p
 =
NULL
) {

190  
NGX_CONF_ERROR
;

193 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

194 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

196 
p
 = 
	`ngx_˝ymem
(p, "* CAPABILITY", ("* CAPABILITY") - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 *
p
++ = ' ';

200 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

203 
auth
 = 
p
;

205 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

206 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

207 
m
 <<1, 
i
++)

209 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

210 *
p
++ = ' ';

211 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
d©a
,

212 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
);

216 *
p
++ = 
CR
; *∞
LF
;

219 
size
 += (" STARTTLS") - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

229 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

230 
c⁄f
->
ˇ∑bûôy
.
Àn
 - ((
CRLF
) - 1));

231 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS", (" STARTTLS") - 1);

232 *
p
++ = 
CR
; *∞
LF
;

235 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
Ë+ (
CRLF
) - 1

238 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

239 i‡(
p
 =
NULL
) {

240  
NGX_CONF_ERROR
;

243 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

244 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

246 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

247 
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
);

248 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS LOGINDISABLED",

250 *
p
++ = 
CR
; *∞
LF
;

252  
NGX_CONF_OK
;

253 
	}
}

	@src/mail/ngx_mail_imap_module.h

8 #i‚de‡
_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
size_t
 
	m˛õ¡_buf„r_size
;

20 
ngx_°r_t
 
	mˇ∑bûôy
;

21 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

22 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

24 
ngx_uöt_t
 
	mauth_mëhods
;

26 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

27 } 
	tngx_maû_im≠_§v_c⁄f_t
;

30 
ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

32 
ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
);

33 
ngx_öt_t
 
ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

36 
ngx_moduÀ_t
 
ngx_maû_im≠_moduÀ
;

	@src/mail/ngx_mail_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

13 
	~<ngx_maû_im≠_moduÀ.h
>

14 
	~<ngx_maû_smç_moduÀ.h
>

17 
ngx_öt_t


18 
	$ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

20 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

21 
ngx_°r_t
 *
¨g
;

23 
sw_°¨t
 = 0,

24 
sw_•a˚s_bef‹e_¨gumít
,

25 
sw_¨gumít
,

26 
sw_Æmo°_d⁄e


27 } 
°©e
;

29 
°©e
 = 
s
->state;

31 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

32 
ch
 = *
p
;

34 
°©e
) {

37 
sw_°¨t
:

38 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

39 
c
 = 
s
->
buf„r
->
°¨t
;

41 i‡(
p
 - 
c
 == 4) {

43 
c0
 = 
	`ngx_touµî
(
c
[0]);

44 
c1
 = 
	`ngx_touµî
(
c
[1]);

45 
c2
 = 
	`ngx_touµî
(
c
[2]);

46 
c3
 = 
	`ngx_touµî
(
c
[3]);

48 i‡(
c0
 ='U' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'R')

50 
s
->
comm™d
 = 
NGX_POP3_USER
;

52 } i‡(
c0
 ='P' && 
c1
 ='A' && 
c2
 ='S' && 
c3
 == 'S')

54 
s
->
comm™d
 = 
NGX_POP3_PASS
;

56 } i‡(
c0
 ='A' && 
c1
 ='P' && 
c2
 ='O' && 
c3
 == 'P')

58 
s
->
comm™d
 = 
NGX_POP3_APOP
;

60 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

62 
s
->
comm™d
 = 
NGX_POP3_QUIT
;

64 } i‡(
c0
 ='C' && 
c1
 ='A' && 
c2
 ='P' && 
c3
 == 'A')

66 
s
->
comm™d
 = 
NGX_POP3_CAPA
;

68 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

70 
s
->
comm™d
 = 
NGX_POP3_AUTH
;

72 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

74 
s
->
comm™d
 = 
NGX_POP3_NOOP
;

75 #i‡(
NGX_MAIL_SSL
)

76 } i‡(
c0
 ='S' && 
c1
 ='T' && 
c2
 ='L' && 
c3
 == 'S')

78 
s
->
comm™d
 = 
NGX_POP3_STLS
;

81 
övÆid
;

85 
övÆid
;

88 
ch
) {

90 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

92 
CR
:

93 
°©e
 = 
sw_Æmo°_d⁄e
;

95 
LF
:

96 
d⁄e
;

101 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

102 
övÆid
;

107 
sw_•a˚s_bef‹e_¨gumít
:

108 
ch
) {

111 
CR
:

112 
°©e
 = 
sw_Æmo°_d⁄e
;

113 
s
->
¨g_íd
 = 
p
;

115 
LF
:

116 
s
->
¨g_íd
 = 
p
;

117 
d⁄e
;

119 i‡(
s
->
¨gs
.
√…s
 <= 2) {

120 
°©e
 = 
sw_¨gumít
;

121 
s
->
¨g_°¨t
 = 
p
;

124 
övÆid
;

128 
sw_¨gumít
:

129 
ch
) {

138 i‡(
s
->
comm™d
 =
NGX_POP3_USER


139 || 
s
->
comm™d
 =
NGX_POP3_PASS
)

146 
CR
:

147 
LF
:

148 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

149 i‡(
¨g
 =
NULL
) {

150  
NGX_ERROR
;

152 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

153 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

154 
s
->
¨g_°¨t
 = 
NULL
;

156 
ch
) {

158 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

160 
CR
:

161 
°©e
 = 
sw_Æmo°_d⁄e
;

163 
LF
:

164 
d⁄e
;

173 
sw_Æmo°_d⁄e
:

174 
ch
) {

175 
LF
:

176 
d⁄e
;

178 
övÆid
;

183 
s
->
buf„r
->
pos
 = 
p
;

184 
s
->
°©e
 = state;

186  
NGX_AGAIN
;

188 
d⁄e
:

190 
s
->
buf„r
->
pos
 = 
p
 + 1;

192 i‡(
s
->
¨g_°¨t
) {

193 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

194 i‡(
¨g
 =
NULL
) {

195  
NGX_ERROR
;

197 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

198 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

199 
s
->
¨g_°¨t
 = 
NULL
;

202 
s
->
°©e
 = (s->
comm™d
 !
NGX_POP3_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

204  
NGX_OK
;

206 
övÆid
:

208 
s
->
°©e
 = 
sw_°¨t
;

209 
s
->
¨g_°¨t
 = 
NULL
;

211  
NGX_MAIL_PARSE_INVALID_COMMAND
;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

218 
u_ch¨
 
ch
, *
p
, *
c
;

219 
ngx_°r_t
 *
¨g
;

221 
sw_°¨t
 = 0,

222 
sw_•a˚s_bef‹e_comm™d
,

223 
sw_comm™d
,

224 
sw_•a˚s_bef‹e_¨gumít
,

225 
sw_¨gumít
,

226 
sw_back¶ash
,

227 
sw_lôîÆ
,

228 
sw_no_sync_lôîÆ_¨gumít
,

229 
sw_°¨t_lôîÆ_¨gumít
,

230 
sw_lôîÆ_¨gumít
,

231 
sw_íd_lôîÆ_¨gumít
,

232 
sw_Æmo°_d⁄e


233 } 
°©e
;

235 
°©e
 = 
s
->state;

237 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

238 
ch
 = *
p
;

240 
°©e
) {

243 
sw_°¨t
:

244 
ch
) {

246 
s
->
èg
.
Àn
 = 
p
 - s->
buf„r
->
°¨t
 + 1;

247 
s
->
èg
.
d©a
 = s->
buf„r
->
°¨t
;

248 
°©e
 = 
sw_•a˚s_bef‹e_comm™d
;

250 
CR
:

251 
s
->
°©e
 = 
sw_°¨t
;

252  
NGX_MAIL_PARSE_INVALID_COMMAND
;

253 
LF
:

254 
s
->
°©e
 = 
sw_°¨t
;

255  
NGX_MAIL_PARSE_INVALID_COMMAND
;

259 
sw_•a˚s_bef‹e_comm™d
:

260 
ch
) {

263 
CR
:

264 
s
->
°©e
 = 
sw_°¨t
;

265  
NGX_MAIL_PARSE_INVALID_COMMAND
;

266 
LF
:

267 
s
->
°©e
 = 
sw_°¨t
;

268  
NGX_MAIL_PARSE_INVALID_COMMAND
;

270 
s
->
cmd_°¨t
 = 
p
;

271 
°©e
 = 
sw_comm™d
;

276 
sw_comm™d
:

277 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

279 
c
 = 
s
->
cmd_°¨t
;

281 
p
 - 
c
) {

284 i‡((
c
[0] == 'N' || c[0] == 'n')

285 && (
c
[1] == 'O'|| c[1] == 'o')

286 && (
c
[2] == 'O'|| c[2] == 'o')

287 && (
c
[3] == 'P'|| c[3] == 'p'))

289 
s
->
comm™d
 = 
NGX_IMAP_NOOP
;

292 
övÆid
;

297 i‡((
c
[0] == 'L'|| c[0] == 'l')

298 && (
c
[1] == 'O'|| c[1] == 'o')

299 && (
c
[2] == 'G'|| c[2] == 'g')

300 && (
c
[3] == 'I'|| c[3] == 'i')

301 && (
c
[4] == 'N'|| c[4] == 'n'))

303 
s
->
comm™d
 = 
NGX_IMAP_LOGIN
;

306 
övÆid
;

311 i‡((
c
[0] == 'L'|| c[0] == 'l')

312 && (
c
[1] == 'O'|| c[1] == 'o')

313 && (
c
[2] == 'G'|| c[2] == 'g')

314 && (
c
[3] == 'O'|| c[3] == 'o')

315 && (
c
[4] == 'U'|| c[4] == 'u')

316 && (
c
[5] == 'T'|| c[5] == 't'))

318 
s
->
comm™d
 = 
NGX_IMAP_LOGOUT
;

321 
övÆid
;

325 #i‡(
NGX_MAIL_SSL
)

327 i‡((
c
[0] == 'S'|| c[0] == 's')

328 && (
c
[1] == 'T'|| c[1] == 't')

329 && (
c
[2] == 'A'|| c[2] == 'a')

330 && (
c
[3] == 'R'|| c[3] == 'r')

331 && (
c
[4] == 'T'|| c[4] == 't')

332 && (
c
[5] == 'T'|| c[5] == 't')

333 && (
c
[6] == 'L'|| c[6] == 'l')

334 && (
c
[7] == 'S'|| c[7] == 's'))

336 
s
->
comm™d
 = 
NGX_IMAP_STARTTLS
;

339 
övÆid
;

345 i‡((
c
[0] == 'C'|| c[0] == 'c')

346 && (
c
[1] == 'A'|| c[1] == 'a')

347 && (
c
[2] == 'P'|| c[2] == 'p')

348 && (
c
[3] == 'A'|| c[3] == 'a')

349 && (
c
[4] == 'B'|| c[4] == 'b')

350 && (
c
[5] == 'I'|| c[5] == 'i')

351 && (
c
[6] == 'L'|| c[6] == 'l')

352 && (
c
[7] == 'I'|| c[7] == 'i')

353 && (
c
[8] == 'T'|| c[8] == 't')

354 && (
c
[9] == 'Y'|| c[9] == 'y'))

356 
s
->
comm™d
 = 
NGX_IMAP_CAPABILITY
;

359 
övÆid
;

364 i‡((
c
[0] == 'A'|| c[0] == 'a')

365 && (
c
[1] == 'U'|| c[1] == 'u')

366 && (
c
[2] == 'T'|| c[2] == 't')

367 && (
c
[3] == 'H'|| c[3] == 'h')

368 && (
c
[4] == 'E'|| c[4] == 'e')

369 && (
c
[5] == 'N'|| c[5] == 'n')

370 && (
c
[6] == 'T'|| c[6] == 't')

371 && (
c
[7] == 'I'|| c[7] == 'i')

372 && (
c
[8] == 'C'|| c[8] == 'c')

373 && (
c
[9] == 'A'|| c[9] == 'a')

374 && (
c
[10] == 'T'|| c[10] == 't')

375 && (
c
[11] == 'E'|| c[11] == 'e'))

377 
s
->
comm™d
 = 
NGX_IMAP_AUTHENTICATE
;

380 
övÆid
;

385 
övÆid
;

388 
ch
) {

390 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

392 
CR
:

393 
°©e
 = 
sw_Æmo°_d⁄e
;

395 
LF
:

396 
d⁄e
;

401 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

402 
övÆid
;

407 
sw_•a˚s_bef‹e_¨gumít
:

408 
ch
) {

411 
CR
:

412 
°©e
 = 
sw_Æmo°_d⁄e
;

413 
s
->
¨g_íd
 = 
p
;

415 
LF
:

416 
s
->
¨g_íd
 = 
p
;

417 
d⁄e
;

419 i‡(
s
->
¨gs
.
√…s
 <= 2) {

420 
s
->
quŸed
 = 1;

421 
s
->
¨g_°¨t
 = 
p
 + 1;

422 
°©e
 = 
sw_¨gumít
;

425 
övÆid
;

427 i‡(
s
->
¨gs
.
√…s
 <= 2) {

428 
°©e
 = 
sw_lôîÆ
;

431 
övÆid
;

433 i‡(
s
->
¨gs
.
√…s
 <= 2) {

434 
s
->
¨g_°¨t
 = 
p
;

435 
°©e
 = 
sw_¨gumít
;

438 
övÆid
;

442 
sw_¨gumít
:

443 i‡(
ch
 =' ' && 
s
->
quŸed
) {

447 
ch
) {

449 i‡(!
s
->
quŸed
) {

452 
s
->
quŸed
 = 0;

455 
CR
:

456 
LF
:

457 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

458 i‡(
¨g
 =
NULL
) {

459  
NGX_ERROR
;

461 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

462 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

463 
s
->
¨g_°¨t
 = 
NULL
;

465 
ch
) {

468 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

470 
CR
:

471 
°©e
 = 
sw_Æmo°_d⁄e
;

473 
LF
:

474 
d⁄e
;

478 i‡(
s
->
quŸed
) {

479 
s
->
back¶ash
 = 1;

480 
°©e
 = 
sw_back¶ash
;

486 
sw_back¶ash
:

487 
ch
) {

488 
CR
:

489 
LF
:

490 
övÆid
;

492 
°©e
 = 
sw_¨gumít
;

496 
sw_lôîÆ
:

497 i‡(
ch
 >= '0' && ch <= '9') {

498 
s
->
lôîÆ_Àn
 = s->lôîÆ_À¿* 10 + (
ch
 - '0');

501 i‡(
ch
 == '}') {

502 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

505 i‡(
ch
 == '+') {

506 
°©e
 = 
sw_no_sync_lôîÆ_¨gumít
;

509 
övÆid
;

511 
sw_no_sync_lôîÆ_¨gumít
:

512 i‡(
ch
 == '}') {

513 
s
->
no_sync_lôîÆ
 = 1;

514 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

517 
övÆid
;

519 
sw_°¨t_lôîÆ_¨gumít
:

520 
ch
) {

521 
CR
:

523 
LF
:

524 
s
->
buf„r
->
pos
 = 
p
 + 1;

525 
s
->
¨g_°¨t
 = 
p
 + 1;

526 i‡(
s
->
no_sync_lôîÆ
 == 0) {

527 
s
->
°©e
 = 
sw_lôîÆ_¨gumít
;

528  
NGX_IMAP_NEXT
;

530 
°©e
 = 
sw_lôîÆ_¨gumít
;

531 
s
->
no_sync_lôîÆ
 = 0;

534 
övÆid
;

538 
sw_lôîÆ_¨gumít
:

539 i‡(
s
->
lôîÆ_Àn
 && --s->literal_len) {

543 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

544 i‡(
¨g
 =
NULL
) {

545  
NGX_ERROR
;

547 
¨g
->
Àn
 = 
p
 + 1 - 
s
->
¨g_°¨t
;

548 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

549 
s
->
¨g_°¨t
 = 
NULL
;

550 
°©e
 = 
sw_íd_lôîÆ_¨gumít
;

554 
sw_íd_lôîÆ_¨gumít
:

555 
ch
) {

557 i‡(
s
->
¨gs
.
√…s
 <= 2) {

558 
°©e
 = 
sw_lôîÆ
;

561 
övÆid
;

562 
CR
:

563 
°©e
 = 
sw_Æmo°_d⁄e
;

565 
LF
:

566 
d⁄e
;

568 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

573 
sw_Æmo°_d⁄e
:

574 
ch
) {

575 
LF
:

576 
d⁄e
;

578 
övÆid
;

583 
s
->
buf„r
->
pos
 = 
p
;

584 
s
->
°©e
 = state;

586  
NGX_AGAIN
;

588 
d⁄e
:

590 
s
->
buf„r
->
pos
 = 
p
 + 1;

592 i‡(
s
->
¨g_°¨t
) {

593 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

594 i‡(
¨g
 =
NULL
) {

595  
NGX_ERROR
;

597 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

598 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

600 
s
->
¨g_°¨t
 = 
NULL
;

601 
s
->
cmd_°¨t
 = 
NULL
;

602 
s
->
quŸed
 = 0;

603 
s
->
no_sync_lôîÆ
 = 0;

604 
s
->
lôîÆ_Àn
 = 0;

607 
s
->
°©e
 = (s->
comm™d
 !
NGX_IMAP_AUTHENTICATE
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

609  
NGX_OK
;

611 
övÆid
:

613 
s
->
°©e
 = 
sw_°¨t
;

614 
s
->
quŸed
 = 0;

615 
s
->
no_sync_lôîÆ
 = 0;

616 
s
->
lôîÆ_Àn
 = 0;

618  
NGX_MAIL_PARSE_INVALID_COMMAND
;

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

625 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

626 
ngx_°r_t
 *
¨g
;

628 
sw_°¨t
 = 0,

629 
sw_•a˚s_bef‹e_¨gumít
,

630 
sw_¨gumít
,

631 
sw_Æmo°_d⁄e


632 } 
°©e
;

634 
°©e
 = 
s
->state;

636 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

637 
ch
 = *
p
;

639 
°©e
) {

642 
sw_°¨t
:

643 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

644 
c
 = 
s
->
buf„r
->
°¨t
;

646 i‡(
p
 - 
c
 == 4) {

648 
c0
 = 
	`ngx_touµî
(
c
[0]);

649 
c1
 = 
	`ngx_touµî
(
c
[1]);

650 
c2
 = 
	`ngx_touµî
(
c
[2]);

651 
c3
 = 
	`ngx_touµî
(
c
[3]);

653 i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'O')

655 
s
->
comm™d
 = 
NGX_SMTP_HELO
;

657 } i‡(
c0
 ='E' && 
c1
 ='H' && 
c2
 ='L' && 
c3
 == 'O')

659 
s
->
comm™d
 = 
NGX_SMTP_EHLO
;

661 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

663 
s
->
comm™d
 = 
NGX_SMTP_QUIT
;

665 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

667 
s
->
comm™d
 = 
NGX_SMTP_AUTH
;

669 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

671 
s
->
comm™d
 = 
NGX_SMTP_NOOP
;

673 } i‡(
c0
 ='M' && 
c1
 ='A' && 
c2
 ='I' && 
c3
 == 'L')

675 
s
->
comm™d
 = 
NGX_SMTP_MAIL
;

677 } i‡(
c0
 ='R' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'T')

679 
s
->
comm™d
 = 
NGX_SMTP_RSET
;

681 } i‡(
c0
 ='R' && 
c1
 ='C' && 
c2
 ='P' && 
c3
 == 'T')

683 
s
->
comm™d
 = 
NGX_SMTP_RCPT
;

685 } i‡(
c0
 ='V' && 
c1
 ='R' && 
c2
 ='F' && 
c3
 == 'Y')

687 
s
->
comm™d
 = 
NGX_SMTP_VRFY
;

689 } i‡(
c0
 ='E' && 
c1
 ='X' && 
c2
 ='P' && 
c3
 == 'N')

691 
s
->
comm™d
 = 
NGX_SMTP_EXPN
;

693 } i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'P')

695 
s
->
comm™d
 = 
NGX_SMTP_HELP
;

698 
övÆid
;

700 #i‡(
NGX_MAIL_SSL
)

701 } i‡(
p
 - 
c
 == 8) {

703 i‡((
c
[0] == 'S'|| c[0] == 's')

704 && (
c
[1] == 'T'|| c[1] == 't')

705 && (
c
[2] == 'A'|| c[2] == 'a')

706 && (
c
[3] == 'R'|| c[3] == 'r')

707 && (
c
[4] == 'T'|| c[4] == 't')

708 && (
c
[5] == 'T'|| c[5] == 't')

709 && (
c
[6] == 'L'|| c[6] == 'l')

710 && (
c
[7] == 'S'|| c[7] == 's'))

712 
s
->
comm™d
 = 
NGX_SMTP_STARTTLS
;

715 
övÆid
;

719 
övÆid
;

722 
ch
) {

724 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

726 
CR
:

727 
°©e
 = 
sw_Æmo°_d⁄e
;

729 
LF
:

730 
d⁄e
;

735 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

736 
övÆid
;

741 
sw_•a˚s_bef‹e_¨gumít
:

742 
ch
) {

745 
CR
:

746 
°©e
 = 
sw_Æmo°_d⁄e
;

747 
s
->
¨g_íd
 = 
p
;

749 
LF
:

750 
s
->
¨g_íd
 = 
p
;

751 
d⁄e
;

753 i‡(
s
->
¨gs
.
√…s
 <= 10) {

754 
°©e
 = 
sw_¨gumít
;

755 
s
->
¨g_°¨t
 = 
p
;

758 
övÆid
;

762 
sw_¨gumít
:

763 
ch
) {

765 
CR
:

766 
LF
:

767 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

768 i‡(
¨g
 =
NULL
) {

769  
NGX_ERROR
;

771 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

772 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

773 
s
->
¨g_°¨t
 = 
NULL
;

775 
ch
) {

777 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

779 
CR
:

780 
°©e
 = 
sw_Æmo°_d⁄e
;

782 
LF
:

783 
d⁄e
;

792 
sw_Æmo°_d⁄e
:

793 
ch
) {

794 
LF
:

795 
d⁄e
;

797 
övÆid
;

802 
s
->
buf„r
->
pos
 = 
p
;

803 
s
->
°©e
 = state;

805  
NGX_AGAIN
;

807 
d⁄e
:

809 
s
->
buf„r
->
pos
 = 
p
 + 1;

811 i‡(
s
->
¨g_°¨t
) {

812 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

813 i‡(
¨g
 =
NULL
) {

814  
NGX_ERROR
;

816 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

817 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

818 
s
->
¨g_°¨t
 = 
NULL
;

821 
s
->
°©e
 = (s->
comm™d
 !
NGX_SMTP_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

823  
NGX_OK
;

825 
övÆid
:

827 
s
->
°©e
 = 
sw_°¨t
;

828 
s
->
¨g_°¨t
 = 
NULL
;

830  
NGX_MAIL_PARSE_INVALID_COMMAND
;

831 
	}
}

834 
ngx_öt_t


835 
	$ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

837 
ngx_°r_t
 *
¨g
;

839 #i‡(
NGX_MAIL_SSL
)

840 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

841  
NGX_MAIL_PARSE_INVALID_COMMAND
;

845 
¨g
 = 
s
->
¨gs
.
ñts
;

847 i‡(
¨g
[0].
Àn
 == 5) {

849 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "LOGIN", 5) == 0) {

851 i‡(
s
->
¨gs
.
√…s
 == 1) {

852  
NGX_MAIL_AUTH_LOGIN
;

855 i‡(
s
->
¨gs
.
√…s
 == 2) {

856  
NGX_MAIL_AUTH_LOGIN_USERNAME
;

859  
NGX_MAIL_PARSE_INVALID_COMMAND
;

862 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "PLAIN", 5) == 0) {

864 i‡(
s
->
¨gs
.
√…s
 == 1) {

865  
NGX_MAIL_AUTH_PLAIN
;

868 i‡(
s
->
¨gs
.
√…s
 == 2) {

869  
	`ngx_maû_auth_∂aö
(
s
, 
c
, 1);

873  
NGX_MAIL_PARSE_INVALID_COMMAND
;

876 i‡(
¨g
[0].
Àn
 == 8) {

878 i‡(
s
->
¨gs
.
√…s
 != 1) {

879  
NGX_MAIL_PARSE_INVALID_COMMAND
;

882 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "CRAM-MD5", 8) == 0) {

883  
NGX_MAIL_AUTH_CRAM_MD5
;

887  
NGX_MAIL_PARSE_INVALID_COMMAND
;

888 
	}
}

	@src/mail/ngx_mail_pop3_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

16 
ngx_öt_t
 
ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

18 
ngx_öt_t
 
°ls
);

19 
ngx_öt_t
 
ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

20 
ngx_öt_t
 
ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
u_ch¨
 
	gp›3_gªëög
[] = "+OK POP3Ñódy" 
CRLF
;

25 
u_ch¨
 
	gp›3_ok
[] = "+OK" 
CRLF
;

26 
u_ch¨
 
	gp›3_√xt
[] = "+ " 
CRLF
;

27 
u_ch¨
 
	gp›3_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

28 
u_ch¨
 
	gp›3_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

29 
u_ch¨
 
	gp›3_övÆid_comm™d
[] = "-ERR invÆid comm™d" 
CRLF
;

33 
	$ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

35 
u_ch¨
 *
p
;

36 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

37 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

39 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

40 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

42 i‡(
pscf
->
auth_mëhods


43 & (
NGX_MAIL_AUTH_APOP_ENABLED
|
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
))

45 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

46 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

50 
s
->
out
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, (
p›3_gªëög
Ë+ s->
ß…
.
Àn
);

51 i‡(
s
->
out
.
d©a
 =
NULL
) {

52 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

56 
p
 = 
	`ngx_˝ymem
(
s
->
out
.
d©a
, 
p›3_gªëög
, (pop3_greeting) - 3);

57 *
p
++ = ' ';

58 
p
 = 
	`ngx_˝ymem
’, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

60 
s
->
out
.
Àn
 = 
p
 - s->out.
d©a
;

63 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_gªëög
);

66 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_öô_¥Ÿocﬁ
;

68 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

70 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

74 
	`ngx_maû_£nd
(
c
->
wrôe
);

75 
	}
}

79 
	$ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

81 
ngx_c⁄√˘i⁄_t
 *
c
;

82 
ngx_maû_£ssi⁄_t
 *
s
;

84 
c
 = 
ªv
->
d©a
;

86 
c
->
log
->
a˘i⁄
 = "ináuth state";

88 i‡(
ªv
->
timedout
) {

89 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

90 
c
->
timedout
 = 1;

91 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

95 
s
 = 
c
->
d©a
;

97 i‡(
s
->
buf„r
 =
NULL
) {

98 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

99 =
NGX_ERROR
)

101 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

105 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 128);

106 i‡(
s
->
buf„r
 =
NULL
) {

107 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

112 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

113 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_auth_°©e
;

115 
	`ngx_maû_p›3_auth_°©e
(
ªv
);

116 
	}
}

120 
	$ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
)

122 
ngx_öt_t
 
rc
;

123 
ngx_c⁄√˘i⁄_t
 *
c
;

124 
ngx_maû_£ssi⁄_t
 *
s
;

126 
c
 = 
ªv
->
d©a
;

127 
s
 = 
c
->
d©a
;

129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3áuth state");

131 i‡(
ªv
->
timedout
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

133 
c
->
timedout
 = 1;

134 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

138 i‡(
s
->
out
.
Àn
) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3 send handler busy");

140 
s
->
blocked
 = 1;

144 
s
->
blocked
 = 0;

146 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

148 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

152 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_ok
);

154 i‡(
rc
 =
NGX_OK
) {

155 
s
->
maû_°©e
) {

157 
ngx_p›3_°¨t
:

159 
s
->
comm™d
) {

161 
NGX_POP3_USER
:

162 
rc
 = 
	`ngx_maû_p›3_u£r
(
s
, 
c
);

165 
NGX_POP3_CAPA
:

166 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 1);

169 
NGX_POP3_APOP
:

170 
rc
 = 
	`ngx_maû_p›3_≠›
(
s
, 
c
);

173 
NGX_POP3_AUTH
:

174 
rc
 = 
	`ngx_maû_p›3_auth
(
s
, 
c
);

177 
NGX_POP3_QUIT
:

178 
s
->
quô
 = 1;

181 
NGX_POP3_NOOP
:

184 
NGX_POP3_STLS
:

185 
rc
 = 
	`ngx_maû_p›3_°ls
(
s
, 
c
);

189 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

195 
ngx_p›3_u£r
:

197 
s
->
comm™d
) {

199 
NGX_POP3_PASS
:

200 
rc
 = 
	`ngx_maû_p›3_∑ss
(
s
, 
c
);

203 
NGX_POP3_CAPA
:

204 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 0);

207 
NGX_POP3_QUIT
:

208 
s
->
quô
 = 1;

211 
NGX_POP3_NOOP
:

215 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

222 
ngx_p›3_∑sswd
:

225 
ngx_p›3_auth_logö_u£∫ame
:

226 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

228 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

229 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

232 
ngx_p›3_auth_logö_∑ssw‹d
:

233 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

236 
ngx_p›3_auth_∂aö
:

237 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

240 
ngx_p›3_auth_¸am_md5
:

241 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

246 
rc
) {

248 
NGX_DONE
:

249 
	`ngx_maû_auth
(
s
, 
c
);

252 
NGX_ERROR
:

253 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

256 
NGX_MAIL_PARSE_INVALID_COMMAND
:

257 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

258 
s
->
°©e
 = 0;

260 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_övÆid_comm™d
);

264 
NGX_OK
:

266 
s
->
¨gs
.
√…s
 = 0;

267 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

268 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

270 i‡(
s
->
°©e
) {

271 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

274 
	`ngx_maû_£nd
(
c
->
wrôe
);

276 
	}
}

278 
ngx_öt_t


279 
	$ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

281 
ngx_°r_t
 *
¨g
;

283 #i‡(
NGX_MAIL_SSL
)

284 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

285  
NGX_MAIL_PARSE_INVALID_COMMAND
;

289 i‡(
s
->
¨gs
.
√…s
 != 1) {

290  
NGX_MAIL_PARSE_INVALID_COMMAND
;

293 
¨g
 = 
s
->
¨gs
.
ñts
;

294 
s
->
logö
.
Àn
 = 
¨g
[0].len;

295 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

296 i‡(
s
->
logö
.
d©a
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

303 "p›3Üogö: \"%V\"", &
s
->
logö
);

305 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

307  
NGX_OK
;

308 
	}
}

311 
ngx_öt_t


312 
	$ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

314 
ngx_°r_t
 *
¨g
;

316 i‡(
s
->
¨gs
.
√…s
 != 1) {

317  
NGX_MAIL_PARSE_INVALID_COMMAND
;

320 
¨g
 = 
s
->
¨gs
.
ñts
;

321 
s
->
∑sswd
.
Àn
 = 
¨g
[0].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[0].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

331 "p›3Öasswd: \"%V\"", &
s
->
∑sswd
);

334  
NGX_DONE
;

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_öt_t
 
°ls
)

341 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

343 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

345 #i‡(
NGX_MAIL_SSL
)

347 i‡(
°ls
 && 
c
->
s¶
 =
NULL
) {

348 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

350 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

352 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

353 
s
->
out
 = 
pscf
->
°¨âls_ˇ∑bûôy
;

354  
NGX_OK
;

357 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

358 
s
->
out
 = 
pscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

359  
NGX_OK
;

365 
s
->
out
 = 
pscf
->
ˇ∑bûôy
;

366  
NGX_OK
;

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

373 #i‡(
NGX_MAIL_SSL
)

374 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

376 i‡(
c
->
s¶
 =
NULL
) {

377 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

378 i‡(
s¶cf
->
°¨âls
) {

379 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

380  
NGX_OK
;

386  
NGX_MAIL_PARSE_INVALID_COMMAND
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

393 
ngx_°r_t
 *
¨g
;

394 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

396 #i‡(
NGX_MAIL_SSL
)

397 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

398  
NGX_MAIL_PARSE_INVALID_COMMAND
;

402 i‡(
s
->
¨gs
.
√…s
 != 2) {

403  
NGX_MAIL_PARSE_INVALID_COMMAND
;

406 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

408 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_APOP_ENABLED
)) {

409  
NGX_MAIL_PARSE_INVALID_COMMAND
;

412 
¨g
 = 
s
->
¨gs
.
ñts
;

414 
s
->
logö
.
Àn
 = 
¨g
[0].len;

415 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

416 i‡(
s
->
logö
.
d©a
 =
NULL
) {

417  
NGX_ERROR
;

420 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

422 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

423 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

424 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

425  
NGX_ERROR
;

428 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

430 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "p›3áp›: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

433 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_APOP
;

435  
NGX_DONE
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

442 
ngx_öt_t
 
rc
;

443 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

445 #i‡(
NGX_MAIL_SSL
)

446 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

447  
NGX_MAIL_PARSE_INVALID_COMMAND
;

451 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

453 i‡(
s
->
¨gs
.
√…s
 == 0) {

454 
s
->
out
 = 
pscf
->
auth_ˇ∑bûôy
;

455 
s
->
°©e
 = 0;

457  
NGX_OK
;

460 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

462 
rc
) {

464 
NGX_MAIL_AUTH_LOGIN
:

466 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_u£∫ame
);

467 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_u£∫ame
;

469  
NGX_OK
;

471 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

473 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

476  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

478 
NGX_MAIL_AUTH_PLAIN
:

480 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_√xt
);

481 
s
->
maû_°©e
 = 
ngx_p›3_auth_∂aö
;

483  
NGX_OK
;

485 
NGX_MAIL_AUTH_CRAM_MD5
:

487 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

488  
NGX_MAIL_PARSE_INVALID_COMMAND
;

491 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

492 
s
->
maû_°©e
 = 
ngx_p›3_auth_¸am_md5
;

493  
NGX_OK
;

496  
NGX_ERROR
;

499  
rc
;

500 
	}
}

	@src/mail/ngx_mail_pop3_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 *
ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_p›3_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("TOP"),

22 
ngx_°rög
("USER"),

23 
ngx_°rög
("UIDL"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_p›3_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("≠›"), 
NGX_MAIL_AUTH_APOP_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_p›3_auth_∂aö_ˇ∑bûôy
 =

37 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


38 "LOGIN" 
CRLF


39 "PLAIN" 
CRLF


40 "." 
CRLF
);

43 
ngx_°r_t
 
	gngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
 =

44 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


45 "LOGIN" 
CRLF


46 "PLAIN" 
CRLF


47 "CRAM-MD5" 
CRLF


48 "." 
CRLF
);

51 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_p›3_¥Ÿocﬁ
 = {

52 
ngx_°rög
("pop3"),

54 
NGX_MAIL_POP3_PROTOCOL
,

56 
ngx_maû_p›3_öô_£ssi⁄
,

57 
ngx_maû_p›3_öô_¥Ÿocﬁ
,

58 
ngx_maû_p›3_∑r£_comm™d
,

59 
ngx_maû_p›3_auth_°©e
,

61 
ngx_°rög
("-ERR i¡î«»£rvîÉº‹" 
CRLF
)

65 
ngx_comm™d_t
 
	gngx_maû_p›3_comm™ds
[] = {

67 { 
ngx_°rög
("pop3_capabilities"),

68 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

69 
ngx_maû_ˇ∑bûôõs
,

70 
NGX_MAIL_SRV_CONF_OFFSET
,

71 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
ˇ∑bûôõs
),

72 
NULL
 },

74 { 
ngx_°rög
("pop3_auth"),

75 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

76 
ngx_c⁄f_£t_bômask_¶Ÿ
,

77 
NGX_MAIL_SRV_CONF_OFFSET
,

78 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
auth_mëhods
),

79 &
ngx_maû_p›3_auth_mëhods
 },

81 
ngx_nuŒ_comm™d


85 
ngx_maû_moduÀ_t
 
	gngx_maû_p›3_moduÀ_˘x
 = {

86 &
ngx_maû_p›3_¥Ÿocﬁ
,

88 
NULL
,

89 
NULL
,

91 
ngx_maû_p›3_¸óã_§v_c⁄f
,

92 
ngx_maû_p›3_mîge_§v_c⁄f


96 
ngx_moduÀ_t
 
	gngx_maû_p›3_moduÀ
 = {

97 
NGX_MODULE_V1
,

98 &
ngx_maû_p›3_moduÀ_˘x
,

99 
ngx_maû_p›3_comm™ds
,

100 
NGX_MAIL_MODULE
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NGX_MODULE_V1_PADDING


113 
	$ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

115 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

117 
pscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_p›3_§v_c⁄f_t
));

118 i‡(
pscf
 =
NULL
) {

119  
NULL
;

122 i‡(
	`ngx_¨øy_öô
(&
pscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

123 !
NGX_OK
)

125  
NULL
;

128  
pscf
;

129 
	}
}

133 
	$ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

135 
ngx_maû_p›3_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

136 
ngx_maû_p›3_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

138 
u_ch¨
 *
p
;

139 
size_t
 
size
, 
°ls_⁄ly_size
;

140 
ngx_°r_t
 *
c
, *
d
;

141 
ngx_uöt_t
 
i
;

143 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

144 
¥ev
->
auth_mëhods
,

145 (
NGX_CONF_BITMASK_SET


146 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

148 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

149 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

152 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

154 
d
 = 
ngx_maû_p›3_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

155 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

156 i‡(
c
 =
NULL
) {

157  
NGX_CONF_ERROR
;

160 *
c
 = *
d
;

164 
size
 = ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1

165 + ("." 
CRLF
) - 1;

167 
°ls_⁄ly_size
 = 
size
 + ("STLS" 
CRLF
) - 1;

169 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

170 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

171 
size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

173 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

177 
°ls_⁄ly_size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

180 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

181 
size
 +("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1;

184 
size
 +("SASL LOGIN PLAIN" 
CRLF
) - 1;

187 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

188 i‡(
p
 =
NULL
) {

189  
NGX_CONF_ERROR
;

192 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

193 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

195 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

196 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

200 *
p
++ = 
CR
; *p++ = 
LF
;

203 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

204 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN CRAM-MD5" 
CRLF
,

205 ("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1);

208 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN" 
CRLF
,

209 ("SASL LOGIN PLAIN" 
CRLF
) - 1);

212 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

215 
size
 +("STLS" 
CRLF
) - 1;

217 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

218 i‡(
p
 =
NULL
) {

219  
NGX_CONF_ERROR
;

222 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

223 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

225 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 - (("." 
CRLF
) - 1));

228 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

229 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

232 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

233 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
;

236 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_∂aö_ˇ∑bûôy
;

240 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
°ls_⁄ly_size
);

241 i‡(
p
 =
NULL
) {

242  
NGX_CONF_ERROR
;

245 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
°ls_⁄ly_size
;

246 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

248 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

249 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

251 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

252 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

256 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

257 *
p
++ = 
CR
; *p++ = 
LF
;

260 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

261 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

263  
NGX_CONF_OK
;

264 
	}
}

	@src/mail/ngx_mail_pop3_module.h

8 #i‚de‡
_NGX_MAIL_POP3_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_POP3_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
ngx_°r_t
 
	mˇ∑bûôy
;

19 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

20 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

21 
ngx_°r_t
 
	mauth_ˇ∑bûôy
;

23 
ngx_uöt_t
 
	mauth_mëhods
;

25 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

26 } 
	tngx_maû_p›3_§v_c⁄f_t
;

29 
ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

30 
ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

31 
ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
);

32 
ngx_öt_t
 
ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

35 
ngx_moduÀ_t
 
ngx_maû_p›3_moduÀ
;

	@src/mail/ngx_mail_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	m∑ss_îr‹_mesßge
;

18 
ngx_Êag_t
 
	mx˛õ¡
;

19 
size_t
 
	mbuf„r_size
;

20 
ngx_m£c_t
 
	mtimeout
;

21 } 
	tngx_maû_¥oxy_c⁄f_t
;

24 
ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
);

25 
ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
);

26 
ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
);

27 
ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
);

28 
ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

29 
ngx_öt_t
 
ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
,

30 
ngx_uöt_t
 
°©e
);

31 
ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

33 
ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

34 
ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
);

35 *
ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

40 
ngx_comm™d_t
 
	gngx_maû_¥oxy_comm™ds
[] = {

42 { 
ngx_°rög
("proxy"),

43 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

44 
ngx_c⁄f_£t_Êag_¶Ÿ
,

45 
NGX_MAIL_SRV_CONF_OFFSET
,

46 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
íabÀ
),

47 
NULL
 },

49 { 
ngx_°rög
("proxy_buffer"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

51 
ngx_c⁄f_£t_size_¶Ÿ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
buf„r_size
),

54 
NULL
 },

56 { 
ngx_°rög
("proxy_timeout"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
timeout
),

61 
NULL
 },

63 { 
ngx_°rög
("proxy_pass_error_message"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
∑ss_îr‹_mesßge
),

68 
NULL
 },

70 { 
ngx_°rög
("xclient"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
x˛õ¡
),

75 
NULL
 },

77 
ngx_nuŒ_comm™d


81 
ngx_maû_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ_˘x
 = {

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_maû_¥oxy_¸óã_c⁄f
,

88 
ngx_maû_¥oxy_mîge_c⁄f


92 
ngx_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_maû_¥oxy_moduÀ_˘x
,

95 
ngx_maû_¥oxy_comm™ds
,

96 
NGX_MAIL_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
u_ch¨
 
	gsmç_auth_ok
[] = "235 2.0.0 OK" 
CRLF
;

112 
	$ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
)

114 
kì∑live
;

115 
ngx_öt_t
 
rc
;

116 
ngx_maû_¥oxy_˘x_t
 *
p
;

117 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

118 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

120 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

122 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

124 i‡(
cscf
->
so_kì∑live
) {

125 
kì∑live
 = 1;

127 i‡(
	`£tsock›t
(
s
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

128 (c⁄° *Ë&
kì∑live
, ())

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_sockë_î∫o
,

136 
p
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_maû_¥oxy_˘x_t
));

137 i‡(
p
 =
NULL
) {

138 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

142 
s
->
¥oxy
 = 
p
;

144 
p
->
up°ªam
.
sockaddr
 = 
≥î
->sockaddr;

145 
p
->
up°ªam
.
sockÀn
 = 
≥î
->socklen;

146 
p
->
up°ªam
.
«me
 = &
≥î
->name;

147 
p
->
up°ªam
.
gë
 = 
ngx_evít_gë_≥î
;

148 
p
->
up°ªam
.
log
 = 
s
->
c⁄√˘i⁄
->log;

149 
p
->
up°ªam
.
log_îr‹
 = 
NGX_ERROR_ERR
;

151 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
p
->
up°ªam
);

153 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

154 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

158 
	`ngx_add_timî
(
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
, 
cscf
->
timeout
);

160 
p
->
up°ªam
.
c⁄√˘i⁄
->
d©a
 = 
s
;

161 
p
->
up°ªam
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

163 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_block_ªad
;

164 
p
->
up°ªam
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_dummy_h™dÀr
;

166 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

168 
s
->
¥oxy
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(s->
c⁄√˘i⁄
->
poﬁ
,

169 
pcf
->
buf„r_size
);

170 i‡(
s
->
¥oxy
->
buf„r
 =
NULL
) {

171 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

175 
s
->
out
.
Àn
 = 0;

177 
s
->
¥Ÿocﬁ
) {

179 
NGX_MAIL_POP3_PROTOCOL
:

180 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_p›3_h™dÀr
;

181 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

184 
NGX_MAIL_IMAP_PROTOCOL
:

185 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_im≠_h™dÀr
;

186 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

190 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_smç_h™dÀr
;

191 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

194 
	}
}

198 
	$ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
)

200 
ngx_c⁄√˘i⁄_t
 *
c
;

201 
ngx_maû_£ssi⁄_t
 *
s
;

203 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy blockÑead");

205 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

206 
c
 = 
ªv
->
d©a
;

207 
s
 = 
c
->
d©a
;

209 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

211 
	}
}

215 
	$ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
)

217 
u_ch¨
 *
p
;

218 
ngx_öt_t
 
rc
;

219 
ngx_°r_t
 
löe
;

220 
ngx_c⁄√˘i⁄_t
 *
c
;

221 
ngx_maû_£ssi⁄_t
 *
s
;

222 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

224 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

227 
c
 = 
ªv
->
d©a
;

228 
s
 = 
c
->
d©a
;

230 i‡(
ªv
->
timedout
) {

231 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

233 
c
->
timedout
 = 1;

234 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

238 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, 0);

240 i‡(
rc
 =
NGX_AGAIN
) {

244 i‡(
rc
 =
NGX_ERROR
) {

245 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

249 
s
->
maû_°©e
) {

251 
ngx_p›3_°¨t
:

252 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

254 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

256 
löe
.
Àn
 = ("USER "Ë- 1 + 
s
->
logö
.len + 2;

257 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

258 i‡(
löe
.
d©a
 =
NULL
) {

259 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

263 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "USER ", ("USER ") - 1);

264 
p
 = 
	`ngx_˝ymem
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

265 *
p
++ = 
CR
; *∞
LF
;

267 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

270 
ngx_p›3_u£r
:

271 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÖass");

273 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

275 
löe
.
Àn
 = ("PASS "Ë- 1 + 
s
->
∑sswd
.len + 2;

276 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

277 i‡(
löe
.
d©a
 =
NULL
) {

278 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

282 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "PASS ", ("PASS ") - 1);

283 
p
 = 
	`ngx_˝ymem
’, 
s
->
∑sswd
.
d©a
, s->∑sswd.
Àn
);

284 *
p
++ = 
CR
; *∞
LF
;

286 
s
->
maû_°©e
 = 
ngx_p›3_∑sswd
;

289 
ngx_p›3_∑sswd
:

290 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

291 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

292 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

293 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

295 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

296 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

297 
	`ngx_dñ_timî
(
c
->
ªad
);

299 
c
->
log
->
a˘i⁄
 = 
NULL
;

300 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

302 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

307 #i‡(
NGX_SUPPRESS_WARN
)

308 
	`ngx_°r_nuŒ
(&
löe
);

313 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

318 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

322 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

323 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

324 
	}
}

328 
	$ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
)

330 
u_ch¨
 *
p
;

331 
ngx_öt_t
 
rc
;

332 
ngx_°r_t
 
löe
;

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

335 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

337 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

340 
c
 = 
ªv
->
d©a
;

341 
s
 = 
c
->
d©a
;

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

346 
c
->
timedout
 = 1;

347 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

351 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

353 i‡(
rc
 =
NGX_AGAIN
) {

357 i‡(
rc
 =
NGX_ERROR
) {

358 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

362 
s
->
maû_°©e
) {

364 
ngx_im≠_°¨t
:

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

368 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending LOGIN commandÅo upstream";

370 
löe
.
Àn
 = 
s
->
èg
.len + ("LOGIN ") - 1

371 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

372 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

373 i‡(
löe
.
d©a
 =
NULL
) {

374 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

378 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%VLOGIN {%uz}" 
CRLF
,

379 &
s
->
èg
, s->
logö
.
Àn
)

380 - 
löe
.
d©a
;

382 
s
->
maû_°©e
 = 
ngx_im≠_logö
;

385 
ngx_im≠_logö
:

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

388 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

390 
löe
.
Àn
 = 
s
->
logö
.À¿+ 1 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

391 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

392 i‡(
löe
.
d©a
 =
NULL
) {

393 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

397 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%V {%uz}" 
CRLF
,

398 &
s
->
logö
, s->
∑sswd
.
Àn
)

399 - 
löe
.
d©a
;

401 
s
->
maû_°©e
 = 
ngx_im≠_u£r
;

404 
ngx_im≠_u£r
:

405 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

408 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

410 
löe
.
Àn
 = 
s
->
∑sswd
.len + 2;

411 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

412 i‡(
löe
.
d©a
 =
NULL
) {

413 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

417 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
∑sswd
.d©a, s->∑sswd.
Àn
);

418 *
p
++ = 
CR
; *∞
LF
;

420 
s
->
maû_°©e
 = 
ngx_im≠_∑sswd
;

423 
ngx_im≠_∑sswd
:

424 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

425 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

426 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

427 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

429 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

430 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

431 
	`ngx_dñ_timî
(
c
->
ªad
);

433 
c
->
log
->
a˘i⁄
 = 
NULL
;

434 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

436 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

441 #i‡(
NGX_SUPPRESS_WARN
)

442 
	`ngx_°r_nuŒ
(&
löe
);

447 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

452 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

456 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

457 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

458 
	}
}

462 
	$ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
)

464 
u_ch¨
 *
p
;

465 
ngx_öt_t
 
rc
;

466 
ngx_°r_t
 
löe
;

467 
ngx_buf_t
 *
b
;

468 
ngx_c⁄√˘i⁄_t
 *
c
;

469 
ngx_maû_£ssi⁄_t
 *
s
;

470 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

471 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

473 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

476 
c
 = 
ªv
->
d©a
;

477 
s
 = 
c
->
d©a
;

479 i‡(
ªv
->
timedout
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

482 
c
->
timedout
 = 1;

483 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

487 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

489 i‡(
rc
 =
NGX_AGAIN
) {

493 i‡(
rc
 =
NGX_ERROR
) {

494 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

498 
s
->
maû_°©e
) {

500 
ngx_smç_°¨t
:

501 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÉhlo");

503 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending HELO/EHLOÅo upstream";

505 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

507 
löe
.
Àn
 = ("HELO "Ë- 1 + 
cscf
->
£rvî_«me
.len + 2;

508 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

509 i‡(
löe
.
d©a
 =
NULL
) {

510 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

514 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

516 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
,

517 ((
s
->
esmç
 || 
pcf
->
x˛õ¡
) ? "EHLO " : "HELO "),

520 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

521 *
p
++ = 
CR
; *∞
LF
;

523 i‡(
pcf
->
x˛õ¡
) {

524 
s
->
maû_°©e
 = 
ngx_smç_hño_x˛õ¡
;

526 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

527 
s
->
maû_°©e
 = 
ngx_smç_hño_‰om
;

530 
s
->
maû_°©e
 = 
ngx_smç_hño
;

535 
ngx_smç_hño_x˛õ¡
:

536 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

539 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending XCLIENTÅo upstream";

541 
löe
.
Àn
 = ("XCLIENT ADDR= LOGIN= NAME="

542 
CRLF
) - 1

543 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
 + s->
logö
.À¿+ s->
ho°
.len;

545 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

546 i‡(
löe
.
d©a
 =
NULL
) {

547 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

551 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

552 "XCLIENT ADDR=%V%s%V NAME=%V" 
CRLF
,

553 &
s
->
c⁄√˘i⁄
->
addr_ãxt
,

554 (
s
->
logö
.
Àn
 ? " LOGIN=" : ""), &s->logö, &s->
ho°
)

555 - 
löe
.
d©a
;

557 i‡(
s
->
smç_hño
.
Àn
) {

558 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_hño
;

560 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

561 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_‰om
;

564 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡
;

569 
ngx_smç_x˛õ¡_hño
:

570 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

573 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending client HELO/EHLOÅo upstream";

575 
löe
.
Àn
 = ("HELO " 
CRLF
Ë- 1 + 
s
->
smç_hño
.len;

577 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

578 i‡(
löe
.
d©a
 =
NULL
) {

579 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

583 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

584 ((
s
->
esmç
Ë? "EHLO %V" 
CRLF
 : "HELO %V" CRLF),

585 &
s
->
smç_hño
)

586 - 
löe
.
d©a
;

588 
s
->
maû_°©e
 = (s->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) ?

589 
ngx_smç_hño_‰om
 : 
ngx_smç_hño
;

593 
ngx_smç_hño_‰om
:

594 
ngx_smç_x˛õ¡_‰om
:

595 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

598 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending MAIL FROMÅo upstream";

600 
löe
.
Àn
 = 
s
->
smç_‰om
.À¿+ (
CRLF
) - 1;

601 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

602 i‡(
löe
.
d©a
 =
NULL
) {

603 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

607 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_‰om
.d©a, s->smç_‰om.
Àn
);

608 *
p
++ = 
CR
; *∞
LF
;

610 
s
->
maû_°©e
 = 
ngx_smç_‰om
;

614 
ngx_smç_‰om
:

615 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

618 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending RCPT TOÅo upstream";

620 
löe
.
Àn
 = 
s
->
smç_to
.À¿+ (
CRLF
) - 1;

621 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

622 i‡(
löe
.
d©a
 =
NULL
) {

623 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

627 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_to
.d©a, s->smç_to.
Àn
);

628 *
p
++ = 
CR
; *∞
LF
;

630 
s
->
maû_°©e
 = 
ngx_smç_to
;

634 
ngx_smç_hño
:

635 
ngx_smç_x˛õ¡
:

636 
ngx_smç_to
:

638 
b
 = 
s
->
¥oxy
->
buf„r
;

640 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

641 
b
->
pos
 = b->
°¨t
;

644 
	`ngx_mem˝y
(
b
->
°¨t
, 
smç_auth_ok
, (smtp_auth_ok) - 1);

645 
b
->
œ°
 = b->
°¨t
 + (
smç_auth_ok
) - 1;

648 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

649 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

650 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

651 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

653 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

654 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

655 
	`ngx_dñ_timî
(
c
->
ªad
);

657 
c
->
log
->
a˘i⁄
 = 
NULL
;

658 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

660 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

665 #i‡(
NGX_SUPPRESS_WARN
)

666 
	`ngx_°r_nuŒ
(&
löe
);

671 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

676 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

680 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

681 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

682 
	}
}

686 
	$ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
wev
)

688 
ngx_c⁄√˘i⁄_t
 *
c
;

689 
ngx_maû_£ssi⁄_t
 *
s
;

691 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0, "mailÖroxy dummy handler");

693 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

694 
c
 = 
wev
->
d©a
;

695 
s
 = 
c
->
d©a
;

697 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

699 
	}
}

702 
ngx_öt_t


703 
	$ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
°©e
)

705 
u_ch¨
 *
p
;

706 
ssize_t
 
n
;

707 
ngx_buf_t
 *
b
;

708 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

710 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "readingÑesponse from upstream";

712 
b
 = 
s
->
¥oxy
->
buf„r
;

714 
n
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
	`ªcv
(s->proxy->upstream.connection,

715 
b
->
œ°
, b->
íd
 - b->last);

717 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

718  
NGX_ERROR
;

721 i‡(
n
 =
NGX_AGAIN
) {

722  
NGX_AGAIN
;

725 
b
->
œ°
 +
n
;

727 i‡(
b
->
œ°
 - b->
pos
 < 4) {

728  
NGX_AGAIN
;

731 i‡(*(
b
->
œ°
 - 2Ë!
CR
 || *(b->œ° - 1Ë!
LF
) {

732 i‡(
b
->
œ°
 =b->
íd
) {

733 *(
b
->
œ°
 - 1) = '\0';

734 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

736 
b
->
pos
);

737  
NGX_ERROR
;

740  
NGX_AGAIN
;

743 
p
 = 
b
->
pos
;

745 
s
->
¥Ÿocﬁ
) {

747 
NGX_MAIL_POP3_PROTOCOL
:

748 i‡(
p
[0] == '+' &&Ö[1] == 'O' &&Ö[2] == 'K') {

749  
NGX_OK
;

753 
NGX_MAIL_IMAP_PROTOCOL
:

754 
°©e
) {

756 
ngx_im≠_°¨t
:

757 i‡(
p
[0] == '*' &&Ö[1] == ' ' &&Ö[2] == 'O' &&Ö[3] == 'K') {

758  
NGX_OK
;

762 
ngx_im≠_logö
:

763 
ngx_im≠_u£r
:

764 i‡(
p
[0] == '+') {

765  
NGX_OK
;

769 
ngx_im≠_∑sswd
:

770 i‡(
	`ngx_°∫cmp
(
p
, 
s
->
èg
.
d©a
, s->èg.
Àn
) == 0) {

771 
p
 +
s
->
èg
.
Àn
;

772 i‡(
p
[0] == 'O' &&Ö[1] == 'K') {

773  
NGX_OK
;

782 
°©e
) {

784 
ngx_smç_°¨t
:

785 i‡(
p
[0] == '2' &&Ö[1] == '2' &&Ö[2] == '0') {

786  
NGX_OK
;

790 
ngx_smç_hño
:

791 
ngx_smç_hño_x˛õ¡
:

792 
ngx_smç_hño_‰om
:

793 
ngx_smç_‰om
:

794 i‡(
p
[0] == '2' &&Ö[1] == '5' &&Ö[2] == '0') {

795  
NGX_OK
;

799 
ngx_smç_x˛õ¡
:

800 
ngx_smç_x˛õ¡_‰om
:

801 
ngx_smç_x˛õ¡_hño
:

802 i‡(
p
[0] == '2' && (p[1] == '2' ||Ö[1] == '5') &&Ö[2] == '0') {

803  
NGX_OK
;

807 
ngx_smç_to
:

808  
NGX_OK
;

814 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

816 i‡(
pcf
->
∑ss_îr‹_mesßge
 == 0) {

817 *(
b
->
œ°
 - 2) = '\0';

818 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

819 "up°ªam síàövÆidÑe•⁄£: \"%s\"", 
p
);

820  
NGX_ERROR
;

823 
s
->
out
.
Àn
 = 
b
->
œ°
 - 
p
 - 2;

824 
s
->
out
.
d©a
 = 
p
;

826 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

827 "up°ªam síàövÆidÑe•⁄£: \"%V\"", &
s
->
out
);

829 
s
->
out
.
Àn
 = 
b
->
œ°
 - b->
pos
;

830 
s
->
out
.
d©a
 = 
b
->
pos
;

832  
NGX_ERROR
;

833 
	}
}

837 
	$ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
)

839 *
a˘i⁄
, *
ªcv_a˘i⁄
, *
£nd_a˘i⁄
;

840 
size_t
 
size
;

841 
ssize_t
 
n
;

842 
ngx_buf_t
 *
b
;

843 
ngx_uöt_t
 
do_wrôe
;

844 
ngx_c⁄√˘i⁄_t
 *
c
, *
§c
, *
d°
;

845 
ngx_maû_£ssi⁄_t
 *
s
;

846 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

848 
c
 = 
ev
->
d©a
;

849 
s
 = 
c
->
d©a
;

851 i‡(
ev
->
timedout
) {

852 
c
->
log
->
a˘i⁄
 = "proxying";

854 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

855 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

857 
c
->
timedout
 = 1;

860 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

864 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

868 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

869 i‡(
ev
->
wrôe
) {

870 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

871 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

872 
§c
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

873 
d°
 = 
c
;

874 
b
 = 
s
->
¥oxy
->
buf„r
;

877 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

878 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

879 
§c
 = 
c
;

880 
d°
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

881 
b
 = 
s
->
buf„r
;

885 i‡(
ev
->
wrôe
) {

886 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

887 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

888 
§c
 = 
s
->
c⁄√˘i⁄
;

889 
d°
 = 
c
;

890 
b
 = 
s
->
buf„r
;

893 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

894 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

895 
§c
 = 
c
;

896 
d°
 = 
s
->
c⁄√˘i⁄
;

897 
b
 = 
s
->
¥oxy
->
buf„r
;

901 
do_wrôe
 = 
ev
->
wrôe
 ? 1 : 0;

903 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

905 
do_wrôe
, 
§c
->
fd
, 
d°
->fd);

909 i‡(
do_wrôe
) {

911 
size
 = 
b
->
œ°
 - b->
pos
;

913 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

914 
c
->
log
->
a˘i⁄
 = 
£nd_a˘i⁄
;

916 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

918 i‡(
n
 =
NGX_ERROR
) {

919 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

923 i‡(
n
 > 0) {

924 
b
->
pos
 +
n
;

926 i‡(
b
->
pos
 =b->
œ°
) {

927 
b
->
pos
 = b->
°¨t
;

928 
b
->
œ°
 = b->
°¨t
;

934 
size
 = 
b
->
íd
 - b->
œ°
;

936 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

937 
c
->
log
->
a˘i⁄
 = 
ªcv_a˘i⁄
;

939 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

941 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

945 i‡(
n
 > 0) {

946 
do_wrôe
 = 1;

947 
b
->
œ°
 +
n
;

952 i‡(
n
 =
NGX_ERROR
) {

953 
§c
->
ªad
->
eof
 = 1;

960 
c
->
log
->
a˘i⁄
 = "proxying";

962 i‡((
s
->
c⁄√˘i⁄
->
ªad
->
eof
 && s->
buf„r
->
pos
 =s->buf„r->
œ°
)

963 || (
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof


964 && 
s
->
¥oxy
->
buf„r
->
pos
 =s->¥oxy->buf„r->
œ°
)

965 || (
s
->
c⁄√˘i⁄
->
ªad
->
eof


966 && 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof
))

968 
a˘i⁄
 = 
c
->
log
->action;

969 
c
->
log
->
a˘i⁄
 = 
NULL
;

970 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "proxied session done");

971 
c
->
log
->
a˘i⁄
 =áction;

973 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

977 i‡(
	`ngx_h™dÀ_wrôe_evít
(
d°
->
wrôe
, 0Ë!
NGX_OK
) {

978 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

982 i‡(
	`ngx_h™dÀ_ªad_evít
(
d°
->
ªad
, 0Ë!
NGX_OK
) {

983 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

987 i‡(
	`ngx_h™dÀ_wrôe_evít
(
§c
->
wrôe
, 0Ë!
NGX_OK
) {

988 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

992 i‡(
	`ngx_h™dÀ_ªad_evít
(
§c
->
ªad
, 0Ë!
NGX_OK
) {

993 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

997 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

998 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

999 
	`ngx_add_timî
(
c
->
ªad
, 
pcf
->
timeout
);

1001 
	}
}

1005 
	$ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1007 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1008 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1010 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1012 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1015 i‡(
s
->
out
.
Àn
 == 0) {

1016 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1020 
s
->
quô
 = 1;

1021 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

1022 
	}
}

1026 
	$ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1028 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1029 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1031 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1033 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1036 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1037 
	}
}

1041 
	$ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
)

1043 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1044 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1046 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1048 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1051 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
s
->
c⁄√˘i⁄
);

1052 
	}
}

1056 
	$ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1058 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

1060 
pcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_¥oxy_c⁄f_t
));

1061 i‡(
pcf
 =
NULL
) {

1062  
NULL
;

1065 
pcf
->
íabÀ
 = 
NGX_CONF_UNSET
;

1066 
pcf
->
∑ss_îr‹_mesßge
 = 
NGX_CONF_UNSET
;

1067 
pcf
->
x˛õ¡
 = 
NGX_CONF_UNSET
;

1068 
pcf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1069 
pcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1071  
pcf
;

1072 
	}
}

1076 
	$ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1078 
ngx_maû_¥oxy_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1079 
ngx_maû_¥oxy_c⁄f_t
 *
c⁄f
 = 
chûd
;

1081 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1082 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_îr‹_mesßge
, 
¥ev
->pass_error_message, 0);

1083 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
x˛õ¡
, 
¥ev
->xclient, 1);

1084 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1085 (
size_t
Ë
ngx_∑gesize
);

1086 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 24 * 60 * 60000);

1088  
NGX_CONF_OK
;

1089 
	}
}

	@src/mail/ngx_mail_smtp_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

16 
ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
);

17 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

18 
ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
);

20 
ngx_öt_t
 
ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
,

21 
ngx_c⁄√˘i⁄_t
 *
c
);

23 
ngx_öt_t
 
ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
ngx_öt_t
 
ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
ngx_öt_t
 
ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

26 
ngx_öt_t
 
ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

27 
ngx_c⁄√˘i⁄_t
 *
c
);

28 
ngx_öt_t
 
ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

29 
ngx_öt_t
 
ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_öt_t
 
ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

32 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

33 
ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

34 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

37 
u_ch¨
 
	gsmç_ok
[] = "250 2.0.0 OK" 
CRLF
;

38 
u_ch¨
 
	gsmç_bye
[] = "221 2.0.0 Bye" 
CRLF
;

39 
u_ch¨
 
	gsmç_°¨âls
[] = "220 2.0.0 Sèπ TLS" 
CRLF
;

40 
u_ch¨
 
	gsmç_√xt
[] = "334 " 
CRLF
;

41 
u_ch¨
 
	gsmç_u£∫ame
[] = "334 VXNlcm5hbWU6" 
CRLF
;

42 
u_ch¨
 
	gsmç_∑ssw‹d
[] = "334 UGFzc3dvcmQ6" 
CRLF
;

43 
u_ch¨
 
	gsmç_övÆid_comm™d
[] = "500 5.5.1 InvÆid comm™d" 
CRLF
;

44 
u_ch¨
 
	gsmç_övÆid_pùñöög
[] =

45 "503 5.5.0 Im¥›î u£ o‡SMTP comm™dÖùñöög" 
CRLF
;

46 
u_ch¨
 
	gsmç_övÆid_¨gumít
[] = "501 5.5.4 InvÆidárgumít" 
CRLF
;

47 
u_ch¨
 
	gsmç_auth_ªquúed
[] = "530 5.7.1 Authítiˇti⁄Ñequúed" 
CRLF
;

48 
u_ch¨
 
	gsmç_bad_£quí˚
[] = "503 5.5.1 Bad sequí˚ o‡comm™ds" 
CRLF
;

51 
ngx_°r_t
 
	gsmç_u«vaûabÀ
 = 
ngx_°rög
("[UNAVAILABLE]");

52 
ngx_°r_t
 
	gsmç_ãmpu«vaû
 = 
ngx_°rög
("[TEMPUNAVAIL]");

56 
	$ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

58 
sockaddr_ö
 *
sö
;

59 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

60 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

62 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

64 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

65 
s
->
ho°
 = 
smç_u«vaûabÀ
;

66 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

70 i‡(
c
->
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

71 
s
->
ho°
 = 
smç_ãmpu«vaû
;

72 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

76 
c
->
log
->
a˘i⁄
 = "inÑesolving clientáddress";

78 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

79 i‡(
˘x
 =
NULL
) {

80 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

86 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

88 
˘x
->
addr
 = 
sö
->
sö_addr
.
s_addr
;

89 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
;

90 
˘x
->
d©a
 = 
s
;

91 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

93 i‡(
	`ngx_ªsﬁve_addr
(
˘x
Ë!
NGX_OK
) {

94 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

96 
	}
}

100 
	$ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

102 
ngx_c⁄√˘i⁄_t
 *
c
;

103 
ngx_maû_£ssi⁄_t
 *
s
;

105 
s
 = 
˘x
->
d©a
;

106 
c
 = 
s
->
c⁄√˘i⁄
;

108 i‡(
˘x
->
°©e
) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

111 &
c
->
addr_ãxt
, 
˘x
->
°©e
,

112 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

114 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

115 
s
->
ho°
 = 
smç_u«vaûabÀ
;

118 
s
->
ho°
 = 
smç_ãmpu«vaû
;

121 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

123 
	`ngx_maû_smç_gªëög
(
s
, s->
c⁄√˘i⁄
);

128 
c
->
log
->
a˘i⁄
 = "inÑesolving client hostname";

130 
s
->
ho°
.
d©a
 = 
	`ngx_p°rdup
(
c
->
poﬁ
, &
˘x
->
«me
);

131 i‡(
s
->
ho°
.
d©a
 =
NULL
) {

132 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

133 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

137 
s
->
ho°
.
Àn
 = 
˘x
->
«me
.len;

139 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

141 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

142 "addªs†ªsﬁved: %V", &
s
->
ho°
);

144 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me
;

146 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

147 
	}
}

151 
	$ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
)

153 
ngx_c⁄√˘i⁄_t
 *
c
;

154 
ngx_maû_£ssi⁄_t
 *
s
;

155 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

156 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

158 
c
 = 
ªv
->
d©a
;

159 
s
 = 
c
->
d©a
;

161 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

163 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

164 i‡(
˘x
 =
NULL
) {

165 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

169 
˘x
->
«me
 = 
s
->
ho°
;

170 
˘x
->
ty≥
 = 
NGX_RESOLVE_A
;

171 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
;

172 
˘x
->
d©a
 = 
s
;

173 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

175 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

176 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

178 
	}
}

182 
	$ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

184 
ö_addr_t
 
addr
;

185 
ngx_uöt_t
 
i
;

186 
ngx_c⁄√˘i⁄_t
 *
c
;

187 
sockaddr_ö
 *
sö
;

188 
ngx_maû_£ssi⁄_t
 *
s
;

190 
s
 = 
˘x
->
d©a
;

191 
c
 = 
s
->
c⁄√˘i⁄
;

193 i‡(
˘x
->
°©e
) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

196 &
˘x
->
«me
, ctx->
°©e
,

197 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

199 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

200 
s
->
ho°
 = 
smç_u«vaûabÀ
;

203 
s
->
ho°
 = 
smç_ãmpu«vaû
;

210 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

212 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

214 
addr
 = 
˘x
->
addrs
[
i
];

216 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

218 (
	`¡ohl
(
addr
) >> 24) & 0xff,

219 (
	`¡ohl
(
addr
) >> 16) & 0xff,

220 (
	`¡ohl
(
addr
) >> 8) & 0xff,

221 
	`¡ohl
(
addr
) & 0xff);

223 i‡(
addr
 =
sö
->
sö_addr
.
s_addr
) {

224 
found
;

228 
s
->
ho°
 = 
smç_u«vaûabÀ
;

231 
found
:

233 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

235 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

236 
	}
}

240 
	$ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

242 
ngx_m£c_t
 
timeout
;

243 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

244 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

246 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

247 "smç gªëög f‹ \"%V\"", &
s
->
ho°
);

249 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

250 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

252 
timeout
 = 
sscf
->
gªëög_dñay
 ? sscf->gªëög_dñay : 
cscf
->timeout;

253 
	`ngx_add_timî
(
c
->
ªad
, 
timeout
);

255 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

256 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

259 i‡(
sscf
->
gªëög_dñay
) {

260 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_övÆid_pùñöög
;

264 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

266 
s
->
out
 = 
sscf
->
gªëög
;

268 
	`ngx_maû_£nd
(
c
->
wrôe
);

269 
	}
}

273 
	$ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
)

275 
ngx_c⁄√˘i⁄_t
 *
c
;

276 
ngx_maû_£ssi⁄_t
 *
s
;

277 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

278 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

280 
c
 = 
ªv
->
d©a
;

281 
s
 = 
c
->
d©a
;

283 
c
->
log
->
a˘i⁄
 = "in delayÖipelining state";

285 i‡(
ªv
->
timedout
) {

287 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "delay greeting");

289 
ªv
->
timedout
 = 0;

291 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

293 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

295 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

297 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

298 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

302 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

304 
s
->
out
 = 
sscf
->
gªëög
;

308 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "invalidÖipelining");

310 i‡(
s
->
buf„r
 =
NULL
) {

311 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

316 i‡(
	`ngx_maû_smç_disˇrd_comm™d
(
s
, 
c
,

318 !
NGX_OK
)

323 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_pùñöög
);

326 
	`ngx_maû_£nd
(
c
->
wrôe
);

327 
	}
}

331 
	$ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

336 
c
 = 
ªv
->
d©a
;

338 
c
->
log
->
a˘i⁄
 = "ináuth state";

340 i‡(
ªv
->
timedout
) {

341 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

342 
c
->
timedout
 = 1;

343 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

347 
s
 = 
c
->
d©a
;

349 i‡(
s
->
buf„r
 =
NULL
) {

350 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

355 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

356 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_auth_°©e
;

358 
	`ngx_maû_smç_auth_°©e
(
ªv
);

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

365 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

367 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
)Ë=
NGX_ERROR
) {

368 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

369  
NGX_ERROR
;

372 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

374 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
sscf
->
˛õ¡_buf„r_size
);

375 i‡(
s
->
buf„r
 =
NULL
) {

376 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

377  
NGX_ERROR
;

380  
NGX_OK
;

381 
	}
}

385 
	$ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
)

387 
ngx_öt_t
 
rc
;

388 
ngx_c⁄√˘i⁄_t
 *
c
;

389 
ngx_maû_£ssi⁄_t
 *
s
;

391 
c
 = 
ªv
->
d©a
;

392 
s
 = 
c
->
d©a
;

394 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtpáuth state");

396 i‡(
ªv
->
timedout
) {

397 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

398 
c
->
timedout
 = 1;

399 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

403 i‡(
s
->
out
.
Àn
) {

404 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtp send handler busy");

405 
s
->
blocked
 = 1;

409 
s
->
blocked
 = 0;

411 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

413 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

417 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

419 i‡(
rc
 =
NGX_OK
) {

420 
s
->
maû_°©e
) {

422 
ngx_smç_°¨t
:

424 
s
->
comm™d
) {

426 
NGX_SMTP_HELO
:

427 
NGX_SMTP_EHLO
:

428 
rc
 = 
	`ngx_maû_smç_hño
(
s
, 
c
);

431 
NGX_SMTP_AUTH
:

432 
rc
 = 
	`ngx_maû_smç_auth
(
s
, 
c
);

435 
NGX_SMTP_QUIT
:

436 
s
->
quô
 = 1;

437 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bye
);

440 
NGX_SMTP_MAIL
:

441 
rc
 = 
	`ngx_maû_smç_maû
(
s
, 
c
);

444 
NGX_SMTP_RCPT
:

445 
rc
 = 
	`ngx_maû_smç_r˝t
(
s
, 
c
);

448 
NGX_SMTP_RSET
:

449 
rc
 = 
	`ngx_maû_smç_r£t
(
s
, 
c
);

452 
NGX_SMTP_NOOP
:

455 
NGX_SMTP_STARTTLS
:

456 
rc
 = 
	`ngx_maû_smç_°¨âls
(
s
, 
c
);

457 
	`ngx_°r_£t
(&
s
->
out
, 
smç_°¨âls
);

461 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

467 
ngx_smç_auth_logö_u£∫ame
:

468 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

470 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

471 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

474 
ngx_smç_auth_logö_∑ssw‹d
:

475 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

478 
ngx_smç_auth_∂aö
:

479 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

482 
ngx_smç_auth_¸am_md5
:

483 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

488 
rc
) {

490 
NGX_DONE
:

491 
	`ngx_maû_auth
(
s
, 
c
);

494 
NGX_ERROR
:

495 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

498 
NGX_MAIL_PARSE_INVALID_COMMAND
:

499 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

500 
s
->
°©e
 = 0;

501 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_comm™d
);

505 
NGX_OK
:

506 
s
->
¨gs
.
√…s
 = 0;

507 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

508 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

510 i‡(
s
->
°©e
) {

511 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

514 
	`ngx_maû_£nd
(
c
->
wrôe
);

516 
	}
}

519 
ngx_öt_t


520 
	$ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

522 
ngx_°r_t
 *
¨g
;

523 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

525 i‡(
s
->
¨gs
.
√…s
 != 1) {

526 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

527 
s
->
°©e
 = 0;

528  
NGX_OK
;

531 
¨g
 = 
s
->
¨gs
.
ñts
;

533 
s
->
smç_hño
.
Àn
 = 
¨g
[0].len;

535 
s
->
smç_hño
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
¨g
[0].
Àn
);

536 i‡(
s
->
smç_hño
.
d©a
 =
NULL
) {

537  
NGX_ERROR
;

540 
	`ngx_mem˝y
(
s
->
smç_hño
.
d©a
, 
¨g
[0].d©a,árg[0].
Àn
);

542 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

543 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

545 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

547 i‡(
s
->
comm™d
 =
NGX_SMTP_HELO
) {

548 
s
->
out
 = 
sscf
->
£rvî_«me
;

551 
s
->
esmç
 = 1;

553 #i‡(
NGX_MAIL_SSL
)

555 i‡(
c
->
s¶
 =
NULL
) {

556 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

558 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

560 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

561 
s
->
out
 = 
sscf
->
°¨âls_ˇ∑bûôy
;

562  
NGX_OK
;

565 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

566 
s
->
out
 = 
sscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

567  
NGX_OK
;

572 
s
->
out
 = 
sscf
->
ˇ∑bûôy
;

575  
NGX_OK
;

576 
	}
}

579 
ngx_öt_t


580 
	$ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

582 
ngx_öt_t
 
rc
;

583 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

584 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

586 #i‡(
NGX_MAIL_SSL
)

587 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

588  
NGX_MAIL_PARSE_INVALID_COMMAND
;

592 i‡(
s
->
¨gs
.
√…s
 == 0) {

593 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

594 
s
->
°©e
 = 0;

595  
NGX_OK
;

598 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

600 
rc
) {

602 
NGX_MAIL_AUTH_LOGIN
:

604 
	`ngx_°r_£t
(&
s
->
out
, 
smç_u£∫ame
);

605 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_u£∫ame
;

607  
NGX_OK
;

609 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

611 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

612 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

614  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

616 
NGX_MAIL_AUTH_PLAIN
:

618 
	`ngx_°r_£t
(&
s
->
out
, 
smç_√xt
);

619 
s
->
maû_°©e
 = 
ngx_smç_auth_∂aö
;

621  
NGX_OK
;

623 
NGX_MAIL_AUTH_CRAM_MD5
:

625 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

627 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

628  
NGX_MAIL_PARSE_INVALID_COMMAND
;

631 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

632 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

634 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

635  
NGX_ERROR
;

639 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "334 ", 4Ë=
NGX_OK
) {

640 
s
->
maû_°©e
 = 
ngx_smç_auth_¸am_md5
;

641  
NGX_OK
;

644  
NGX_ERROR
;

647  
rc
;

648 
	}
}

651 
ngx_öt_t


652 
	$ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

654 
u_ch¨
 
ch
;

655 
ngx_°r_t
 
l
;

656 
ngx_uöt_t
 
i
;

657 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

659 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

661 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_NONE_ENABLED
)) {

662 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, "client wasÑejected: \"%V\"");

663 
	`ngx_°r_£t
(&
s
->
out
, 
smç_auth_ªquúed
);

664  
NGX_OK
;

669 i‡(
s
->
smç_‰om
.
Àn
) {

670 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

671  
NGX_OK
;

674 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

675 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

677 
i
 = 0; i < 
l
.
Àn
; i++) {

678 
ch
 = 
l
.
d©a
[
i
];

680 i‡(
ch
 !
CR
 && ch !
LF
) {

684 
l
.
d©a
[
i
] = ' ';

687 
i
) {

688 i‡(
l
.
d©a
[
i
 - 1] != ' ') {

692 
i
--;

695 
l
.
Àn
 = 
i
;

697 
s
->
smç_‰om
.
Àn
 = 
l
.len;

699 
s
->
smç_‰om
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
l
.
Àn
);

700 i‡(
s
->
smç_‰om
.
d©a
 =
NULL
) {

701  
NGX_ERROR
;

704 
	`ngx_mem˝y
(
s
->
smç_‰om
.
d©a
, 
l
.d©a,Ü.
Àn
);

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

707 "smç maû from:\"%V\"", &
s
->
smç_‰om
);

709 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

711  
NGX_OK
;

712 
	}
}

715 
ngx_öt_t


716 
	$ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

718 
u_ch¨
 
ch
;

719 
ngx_°r_t
 
l
;

720 
ngx_uöt_t
 
i
;

722 i‡(
s
->
smç_‰om
.
Àn
 == 0) {

723 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

724  
NGX_OK
;

727 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

728 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

730 
i
 = 0; i < 
l
.
Àn
; i++) {

731 
ch
 = 
l
.
d©a
[
i
];

733 i‡(
ch
 !
CR
 && ch !
LF
) {

737 
l
.
d©a
[
i
] = ' ';

740 
i
) {

741 i‡(
l
.
d©a
[
i
 - 1] != ' ') {

745 
i
--;

748 
l
.
Àn
 = 
i
;

750 
s
->
smç_to
.
Àn
 = 
l
.len;

752 
s
->
smç_to
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
l
.
Àn
);

753 i‡(
s
->
smç_to
.
d©a
 =
NULL
) {

754  
NGX_ERROR
;

757 
	`ngx_mem˝y
(
s
->
smç_to
.
d©a
, 
l
.d©a,Ü.
Àn
);

759 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

760 "smçÑ˝àto:\"%V\"", &
s
->
smç_to
);

762 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_NONE
;

764  
NGX_DONE
;

765 
	}
}

768 
ngx_öt_t


769 
	$ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

771 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

772 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

773 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

775  
NGX_OK
;

776 
	}
}

779 
ngx_öt_t


780 
	$ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

782 #i‡(
NGX_MAIL_SSL
)

783 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

785 i‡(
c
->
s¶
 =
NULL
) {

786 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

787 i‡(
s¶cf
->
°¨âls
) {

794 
	`ngx_°r_nuŒ
(&
s
->
smç_hño
);

795 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

796 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

798 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

799  
NGX_OK
;

805  
NGX_MAIL_PARSE_INVALID_COMMAND
;

806 
	}
}

809 
ngx_öt_t


810 
	$ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

811 *
îr
)

813 
ssize_t
 
n
;

815 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

817 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

818 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

819  
NGX_ERROR
;

822 i‡(
n
 > 0) {

823 
s
->
buf„r
->
œ°
 +
n
;

826 i‡(
n
 =
NGX_AGAIN
) {

827 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

828 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

829  
NGX_ERROR
;

832  
NGX_AGAIN
;

835 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, 
îr
);

837 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

838 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

840  
NGX_OK
;

841 
	}
}

845 
	$ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

846 *
îr
)

848 
u_ch¨
 
ch
;

849 
ngx_°r_t
 
cmd
;

850 
ngx_uöt_t
 
i
;

852 i‡(
c
->
log
->
log_Àvñ
 < 
NGX_LOG_INFO
) {

856 
cmd
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

857 
cmd
.
d©a
 = 
s
->
buf„r
->
°¨t
;

859 
i
 = 0; i < 
cmd
.
Àn
; i++) {

860 
ch
 = 
cmd
.
d©a
[
i
];

862 i‡(
ch
 !
CR
 && ch !
LF
) {

866 
cmd
.
d©a
[
i
] = '_';

869 
cmd
.
Àn
 = 
i
;

871 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, 
îr
, &
cmd
);

872 
	}
}

	@src/mail/ngx_mail_smtp_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 *
ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_c⁄f_bômask_t
 
	gngx_maû_smç_auth_mëhods
[] = {

21 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

22 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

23 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

24 { 
ngx_°rög
("n⁄e"), 
NGX_MAIL_AUTH_NONE_ENABLED
 },

25 { 
ngx_nuŒ_°rög
, 0 }

29 
ngx_°r_t
 
	gngx_maû_smç_auth_mëhods_«mes
[] = {

30 
ngx_°rög
("PLAIN"),

31 
ngx_°rög
("LOGIN"),

32 
ngx_nuŒ_°rög
,

33 
ngx_°rög
("CRAM-MD5"),

34 
ngx_nuŒ_°rög


38 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_smç_¥Ÿocﬁ
 = {

39 
ngx_°rög
("smtp"),

41 
NGX_MAIL_SMTP_PROTOCOL
,

43 
ngx_maû_smç_öô_£ssi⁄
,

44 
ngx_maû_smç_öô_¥Ÿocﬁ
,

45 
ngx_maû_smç_∑r£_comm™d
,

46 
ngx_maû_smç_auth_°©e
,

48 
ngx_°rög
("451 4.3.2 I¡î«»£rvîÉº‹" 
CRLF
)

52 
ngx_comm™d_t
 
	gngx_maû_smç_comm™ds
[] = {

54 { 
ngx_°rög
("smtp_client_buffer"),

55 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

56 
ngx_c⁄f_£t_size_¶Ÿ
,

57 
NGX_MAIL_SRV_CONF_OFFSET
,

58 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

59 
NULL
 },

61 { 
ngx_°rög
("smtp_greeting_delay"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_m£c_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
gªëög_dñay
),

66 
NULL
 },

68 { 
ngx_°rög
("smtp_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("smtp_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_smç_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_smç_moduÀ_˘x
 = {

87 &
ngx_maû_smç_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_smç_¸óã_§v_c⁄f
,

93 
ngx_maû_smç_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_smç_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_smç_moduÀ_˘x
,

100 
ngx_maû_smç_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

118 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_smç_§v_c⁄f_t
));

119 i‡(
sscf
 =
NULL
) {

120  
NULL
;

123 
sscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

124 
sscf
->
gªëög_dñay
 = 
NGX_CONF_UNSET_MSEC
;

126 i‡(
	`ngx_¨øy_öô
(&
sscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

127 !
NGX_OK
)

129  
NULL
;

132  
sscf
;

133 
	}
}

137 
	$ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

139 
ngx_maû_smç_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

140 
ngx_maû_smç_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

142 
u_ch¨
 *
p
, *
auth
, *
œ°
;

143 
size_t
 
size
;

144 
ngx_°r_t
 *
c
;

145 
ngx_uöt_t
 
i
, 
m
, 
auth_íabÀd
;

146 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

148 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

149 
¥ev
->
˛õ¡_buf„r_size
,

150 (
size_t
Ë
ngx_∑gesize
);

152 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
gªëög_dñay
,

153 
¥ev
->
gªëög_dñay
, 0);

155 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

156 
¥ev
->
auth_mëhods
,

157 (
NGX_CONF_BITMASK_SET


158 |
NGX_MAIL_AUTH_PLAIN_ENABLED


159 |
NGX_MAIL_AUTH_LOGIN_ENABLED
));

162 
cscf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

164 
size
 = ("220 ESMTPÑódy" 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

166 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

167 i‡(
p
 =
NULL
) {

168  
NGX_CONF_ERROR
;

171 
c⁄f
->
gªëög
.
Àn
 = 
size
;

172 
c⁄f
->
gªëög
.
d©a
 = 
p
;

174 *
p
++ = '2'; *p++ = '2'; *p++ = '0'; *p++ = ' ';

175 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

176 
	`ngx_mem˝y
(
p
, " ESMTPÑódy" 
CRLF
, (" ESMTPÑeady" CRLF) - 1);

179 
size
 = ("250 " 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

181 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

182 i‡(
p
 =
NULL
) {

183  
NGX_CONF_ERROR
;

186 
c⁄f
->
£rvî_«me
.
Àn
 = 
size
;

187 
c⁄f
->
£rvî_«me
.
d©a
 = 
p
;

189 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

190 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

191 *
p
++ = 
CR
; *∞
LF
;

194 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

195 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

198 
size
 = ("250-"Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
 + (
CRLF
) - 1;

200 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

201 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

202 
size
 +("250 "Ë- 1 + 
c
[
i
].
Àn
 + (
CRLF
) - 1;

205 
auth_íabÀd
 = 0;

207 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

208 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

209 
m
 <<1, 
i
++)

211 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

212 
size
 +1 + 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
;

213 
auth_íabÀd
 = 1;

217 i‡(
auth_íabÀd
) {

218 
size
 +("250 AUTH"Ë- 1 + (
CRLF
) - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

229 
œ°
 = 
p
;

231 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

232 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

233 *
p
++ = 
CR
; *p++ = 
LF
;

235 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

236 
œ°
 = 
p
;

237 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

238 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

239 *
p
++ = 
CR
; *p++ = 
LF
;

242 
auth
 = 
p
;

244 i‡(
auth_íabÀd
) {

245 
œ°
 = 
p
;

247 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

248 *
p
++ = 'A'; *p++ = 'U'; *p++ = 'T'; *p++ = 'H';

250 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

251 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

252 
m
 <<1, 
i
++)

254 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

255 *
p
++ = ' ';

256 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
d©a
,

257 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
);

261 *
p
++ = 
CR
; *∞
LF
;

264 
œ°
[3] = ' ';

267 
size
 +("250 STARTTLS" 
CRLF
) - 1;

269 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

270 i‡(
p
 =
NULL
) {

271  
NGX_CONF_ERROR
;

274 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

275 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

277 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, c⁄f->ˇ∑bûôy.
Àn
);

279 
p
 = 
	`ngx_˝ymem
’, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

280 *
p
++ = 
CR
; *∞
LF
;

282 
p
 = 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a


283 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

284 *
p
 = '-';

286 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
)

287 + ("250 STARTTLS" 
CRLF
) - 1;

289 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

290 i‡(
p
 =
NULL
) {

291  
NGX_CONF_ERROR
;

294 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

295 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

297 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, 
auth
 - conf->capability.data);

299 
	`ngx_mem˝y
(
p
, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

301 i‡(
œ°
 < 
auth
) {

302 
p
 = 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a


303 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

304 *
p
 = '-';

307  
NGX_CONF_OK
;

308 
	}
}

	@src/mail/ngx_mail_smtp_module.h

8 #i‚de‡
_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

15 
	~<ngx_maû_smç_moduÀ.h
>

19 
ngx_m£c_t
 
	mgªëög_dñay
;

21 
size_t
 
	m˛õ¡_buf„r_size
;

23 
ngx_°r_t
 
	mˇ∑bûôy
;

24 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

25 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

27 
ngx_°r_t
 
	m£rvî_«me
;

28 
ngx_°r_t
 
	mgªëög
;

30 
ngx_uöt_t
 
	mauth_mëhods
;

32 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

33 } 
	tngx_maû_smç_§v_c⁄f_t
;

36 
ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

37 
ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

38 
ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
);

39 
ngx_öt_t
 
ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

42 
ngx_moduÀ_t
 
ngx_maû_smç_moduÀ
;

	@src/mail/ngx_mail_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_maû.h
>

13 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

14 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

17 *
ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 *
ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

20 *
ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_hâp_°¨âls_°©e
[] = {

29 { 
ngx_°rög
("off"), 
NGX_MAIL_STARTTLS_OFF
 },

30 { 
ngx_°rög
("⁄"), 
NGX_MAIL_STARTTLS_ON
 },

31 { 
ngx_°rög
("⁄ly"), 
NGX_MAIL_STARTTLS_ONLY
 },

32 { 
ngx_nuŒ_°rög
, 0 }

37 
ngx_c⁄f_bômask_t
 
	gngx_maû_s¶_¥Ÿocﬁs
[] = {

38 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

39 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

40 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

41 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

42 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

43 { 
ngx_nuŒ_°rög
, 0 }

47 
ngx_comm™d_t
 
	gngx_maû_s¶_comm™ds
[] = {

49 { 
ngx_°rög
("ssl"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

51 
ngx_maû_s¶_íabÀ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
íabÀ
),

54 
NULL
 },

56 { 
ngx_°rög
("starttls"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_maû_s¶_°¨âls
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
°¨âls
),

61 
ngx_hâp_°¨âls_°©e
 },

63 { 
ngx_°rög
("ssl_certificate"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_°r_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã
),

68 
NULL
 },

70 { 
ngx_°rög
("ssl_certificate_key"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_°r_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã_key
),

75 
NULL
 },

77 { 
ngx_°rög
("ssl_dhparam"),

78 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_°r_¶Ÿ
,

80 
NGX_MAIL_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
dh∑øm
),

82 
NULL
 },

84 { 
ngx_°rög
("ssl_ecdh_curve"),

85 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_°r_¶Ÿ
,

87 
NGX_MAIL_SRV_CONF_OFFSET
,

88 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
ecdh_curve
),

89 
NULL
 },

91 { 
ngx_°rög
("ssl_protocols"),

92 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

93 
ngx_c⁄f_£t_bômask_¶Ÿ
,

94 
NGX_MAIL_SRV_CONF_OFFSET
,

95 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥Ÿocﬁs
),

96 &
ngx_maû_s¶_¥Ÿocﬁs
 },

98 { 
ngx_°rög
("ssl_ciphers"),

99 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_°r_¶Ÿ
,

101 
NGX_MAIL_SRV_CONF_OFFSET
,

102 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
cùhîs
),

103 
NULL
 },

105 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

106 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

107 
ngx_c⁄f_£t_Êag_¶Ÿ
,

108 
NGX_MAIL_SRV_CONF_OFFSET
,

109 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

110 
NULL
 },

112 { 
ngx_°rög
("ssl_session_cache"),

113 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

114 
ngx_maû_s¶_£ssi⁄_ˇche
,

115 
NGX_MAIL_SRV_CONF_OFFSET
,

117 
NULL
 },

119 { 
ngx_°rög
("ssl_session_timeout"),

120 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

121 
ngx_c⁄f_£t_£c_¶Ÿ
,

122 
NGX_MAIL_SRV_CONF_OFFSET
,

123 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_timeout
),

124 
NULL
 },

126 
ngx_nuŒ_comm™d


130 
ngx_maû_moduÀ_t
 
	gngx_maû_s¶_moduÀ_˘x
 = {

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
ngx_maû_s¶_¸óã_c⁄f
,

137 
ngx_maû_s¶_mîge_c⁄f


141 
ngx_moduÀ_t
 
	gngx_maû_s¶_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_maû_s¶_moduÀ_˘x
,

144 
ngx_maû_s¶_comm™ds
,

145 
NGX_MAIL_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


157 
ngx_°r_t
 
	gngx_maû_s¶_£ss_id_˘x
 = 
ngx_°rög
("MAIL");

161 
	$ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

163 
ngx_maû_s¶_c⁄f_t
 *
scf
;

165 
scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_s¶_c⁄f_t
));

166 i‡(
scf
 =
NULL
) {

167  
NULL
;

182 
scf
->
íabÀ
 = 
NGX_CONF_UNSET
;

183 
scf
->
°¨âls
 = 
NGX_CONF_UNSET_UINT
;

184 
scf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

185 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

186 
scf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

188  
scf
;

189 
	}
}

193 
	$ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

195 
ngx_maû_s¶_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

196 
ngx_maû_s¶_c⁄f_t
 *
c⁄f
 = 
chûd
;

198 *
mode
;

199 
ngx_poﬁ_˛ónup_t
 *
˛n
;

201 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

202 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°¨âls
, 
¥ev
->starttls,

203 
NGX_MAIL_STARTTLS_OFF
);

205 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

206 
¥ev
->
£ssi⁄_timeout
, 300);

208 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

209 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

211 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

212 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


213 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

215 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

216 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

218 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

220 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

221 
NGX_DEFAULT_ECDH_CURVE
);

223 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

226 
c⁄f
->
s¶
.
log
 = 
cf
->log;

228 i‡(
c⁄f
->
íabÀ
) {

229 
mode
 = "ssl";

231 } i‡(
c⁄f
->
°¨âls
 !
NGX_MAIL_STARTTLS_OFF
) {

232 
mode
 = "starttls";

235 
mode
 = "";

238 i‡(*
mode
) {

240 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

241 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

244 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

245  
NGX_CONF_ERROR
;

248 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

249 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

252 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

253  
NGX_CONF_ERROR
;

258 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

259  
NGX_CONF_OK
;

262 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

266 &
c⁄f
->
˚πifiˇã
);

267  
NGX_CONF_ERROR
;

271 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

272  
NGX_CONF_ERROR
;

275 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

276 i‡(
˛n
 =
NULL
) {

277  
NGX_CONF_ERROR
;

280 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

281 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

283 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

284 &
c⁄f
->
˚πifiˇã_key
)

285 !
NGX_OK
)

287  
NGX_CONF_ERROR
;

290 i‡(
c⁄f
->
cùhîs
.
Àn
) {

291 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

292 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

295 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

297 &
c⁄f
->
cùhîs
);

301 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

302 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

305 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

307 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

308  
NGX_CONF_ERROR
;

311 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

312 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

314 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

315 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

318 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_maû_s¶_£ss_id_˘x
,

319 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

320 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

321 !
NGX_OK
)

323  
NGX_CONF_ERROR
;

326  
NGX_CONF_OK
;

327 
	}
}

331 
	$ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

333 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

335 *
rv
;

337 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

339 i‡(
rv
 !
NGX_CONF_OK
) {

340  
rv
;

343 i‡(
scf
->
íabÀ
 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

344 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

346  
NGX_CONF_ERROR
;

349 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

350 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

352  
NGX_CONF_OK
;

353 
	}
}

357 
	$ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

359 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

361 *
rv
;

363 
rv
 = 
	`ngx_c⁄f_£t_íum_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

365 i‡(
rv
 !
NGX_CONF_OK
) {

366  
rv
;

369 i‡(
scf
->
íabÀ
 =1 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

370 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

372  
NGX_CONF_ERROR
;

375 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

376 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

378  
NGX_CONF_OK
;

379 
	}
}

383 
	$ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

385 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

387 
size_t
 
Àn
;

388 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

389 
ngx_öt_t
 
n
;

390 
ngx_uöt_t
 
i
, 
j
;

392 
vÆue
 = 
cf
->
¨gs
->
ñts
;

394 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

396 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

397 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

401 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

402 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

406 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

407 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

411 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

412 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

415 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

416 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

418 i‡(
n
 =
NGX_ERROR
) {

419 
övÆid
;

422 
scf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

427 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

428 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

431 
Àn
 = 0;

433 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

434 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

438 
Àn
++;

441 i‡(
Àn
 == 0) {

442 
övÆid
;

445 
«me
.
Àn
 =Üen;

446 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

448 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

449 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

451 
n
 = 
	`ngx_∑r£_size
(&
size
);

453 i‡(
n
 =
NGX_ERROR
) {

454 
övÆid
;

457 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

458 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

460 &
vÆue
[
i
]);

462  
NGX_CONF_ERROR
;

465 
scf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

466 &
ngx_maû_s¶_moduÀ
);

467 i‡(
scf
->
shm_z⁄e
 =
NULL
) {

468  
NGX_CONF_ERROR
;

471 
scf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

476 
övÆid
;

479 i‡(
scf
->
shm_z⁄e
 && scf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

480 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

483  
NGX_CONF_OK
;

485 
övÆid
:

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

488 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

490  
NGX_CONF_ERROR
;

491 
	}
}

	@src/mail/ngx_mail_ssl_module.h

8 #i‚de‡
_NGX_MAIL_SSL_H_INCLUDED_


9 
	#_NGX_MAIL_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

17 
	#NGX_MAIL_STARTTLS_OFF
 0

	)

18 
	#NGX_MAIL_STARTTLS_ON
 1

	)

19 
	#NGX_MAIL_STARTTLS_ONLY
 2

	)

23 
ngx_Êag_t
 
	míabÀ
;

24 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

26 
ngx_s¶_t
 
	ms¶
;

28 
ngx_uöt_t
 
	m°¨âls
;

29 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

40 
ngx_°r_t
 
	mcùhîs
;

42 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

44 
u_ch¨
 *
	mfûe
;

45 
ngx_uöt_t
 
	mlöe
;

46 } 
	tngx_maû_s¶_c⁄f_t
;

49 
ngx_moduÀ_t
 
ngx_maû_s¶_moduÀ
;

	@src/misc/ngx_cpp_test_module.cpp

5 
	~<ngx_c⁄fig.h
>

6 
	~<ngx_c‹e.h
>

7 
	~<ngx_evít.h
>

8 
	~<ngx_evít_c⁄√˘.h
>

9 
	~<ngx_evít_pùe.h
>

11 
	~<ngx_hâp.h
>

13 
	~<ngx_maû.h
>

14 
	~<ngx_maû_p›3_moduÀ.h
>

15 
	~<ngx_maû_im≠_moduÀ.h
>

16 
	~<ngx_maû_smç_moduÀ.h
>

23 
ngx_˝p_ã°_h™dÀr
(*
d©a
);

26 
	$ngx_˝p_ã°_h™dÀr
(*
d©a
)

29 
	}
}

	@src/misc/ngx_google_perftools_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

16 
ProfûîSèπ
(
u_ch¨
* 
‚ame
);

17 
ProfûîSt›
();

18 
ProfûîRegi°îThªad
();

21 *
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_öt_t
 
ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_°r_t
 
	m¥ofûes
;

27 } 
	tngx_googÀ_≥r·oﬁs_c⁄f_t
;

30 
ngx_comm™d_t
 
	gngx_googÀ_≥r·oﬁs_comm™ds
[] = {

32 { 
ngx_°rög
("google_perftools_profiles"),

33 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

34 
ngx_c⁄f_£t_°r_¶Ÿ
,

36 
off£tof
(
ngx_googÀ_≥r·oﬁs_c⁄f_t
, 
¥ofûes
),

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_c‹e_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ_˘x
 = {

44 
ngx_°rög
("google_perftools"),

45 
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_googÀ_≥r·oﬁs_moduÀ_˘x
,

53 
ngx_googÀ_≥r·oﬁs_comm™ds
,

54 
NGX_CORE_MODULE
,

55 
NULL
,

56 
NULL
,

57 
ngx_googÀ_≥r·oﬁs_w‹kî
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

69 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

71 
g±cf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_googÀ_≥r·oﬁs_c⁄f_t
));

72 i‡(
g±cf
 =
NULL
) {

73  
NULL
;

82  
g±cf
;

83 
	}
}

86 
ngx_öt_t


87 
	$ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

89 
u_ch¨
 *
¥ofûe
;

90 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

92 
g±cf
 = (
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *)

93 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_googÀ_≥r·oﬁs_moduÀ
);

95 i‡(
g±cf
->
¥ofûes
.
Àn
 == 0) {

96  
NGX_OK
;

99 
¥ofûe
 = 
	`ngx_Æloc
(
g±cf
->
¥ofûes
.
Àn
 + 
NGX_INT_T_LEN
 + 2, 
cy˛e
->
log
);

100 i‡(
¥ofûe
 =
NULL
) {

101  
NGX_OK
;

104 i‡(
	`gëív
("CPUPROFILE")) {

106 
	`ProfûîSt›
();

109 
	`ngx_•rötf
(
¥ofûe
, "%V.%d%Z", &
g±cf
->
¥ofûes
, 
ngx_pid
);

111 i‡(
	`ProfûîSèπ
(
¥ofûe
)) {

113 
	`ProfûîRegi°îThªad
();

116 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_î∫o
,

117 "ProfûîSèπ(%sËÁûed", 
¥ofûe
);

120 
	`ngx_‰ì
(
¥ofûe
);

122  
NGX_OK
;

123 
	}
}

	@src/os/unix/ngx_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(!
ªv
->
ªady
) {

25 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "secondáioÖost");

26  
NGX_AGAIN
;

29 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

30 "ªv->com∂ëe: %d", 
ªv
->
com∂ëe
);

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

32 "aiÿsize: %d", 
size
);

34 i‡(!
ªv
->
com∂ëe
) {

35 
	`ngx_memzîo
(&
ªv
->
aiocb
, (aiocb));

37 
ªv
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

38 
ªv
->
aiocb
.
aio_buf
 = 
buf
;

39 
ªv
->
aiocb
.
aio_nbyãs
 = 
size
;

41 #i‡(
NGX_HAVE_KQUEUE
)

42 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

43 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

44 
ªv
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 =Ñev;

47 i‡(
	`aio_ªad
(&
ªv
->
aiocb
) == -1) {

48 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ªv
->
log
, 
ngx_î∫o
,

50 
ªv
->
îr‹
 = 1;

51  
NGX_ERROR
;

54 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "aio_ªad: #%d OK", 
c
->
fd
);

57 
ªv
->
a˘ive
 = 1;

58 
ªv
->
ªady
 = 0;

61 
ªv
->
com∂ëe
 = 0;

63 
n
 = 
	`aio_îr‹
(&
ªv
->
aiocb
);

64 i‡(
n
 == -1) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
, "aio_error() failed");

66 
ªv
->
îr‹
 = 1;

67  
NGX_ERROR
;

70 i‡(
n
 != 0) {

71 i‡(
n
 =
NGX_EINPROGRESS
) {

72 i‡(
ªv
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
n
,

75 
ªv
->
ªady
 = 0;

77  
NGX_AGAIN
;

80 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
n
, "aio_read() failed");

81 
ªv
->
îr‹
 = 1;

82 
ªv
->
ªady
 = 0;

83  
NGX_ERROR
;

86 
n
 = 
	`aio_ªtu∫
(&
ªv
->
aiocb
);

87 i‡(
n
 == -1) {

88 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

91 
ªv
->
îr‹
 = 1;

92 
ªv
->
ªady
 = 0;

93  
NGX_ERROR
;

96 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

97 "aio_ªad: #%d %d", 
c
->
fd
, 
n
);

99 i‡(
n
 == 0) {

100 
ªv
->
eof
 = 1;

101 
ªv
->
ªady
 = 0;

103 
ªv
->
ªady
 = 1;

106 
ªv
->
a˘ive
 = 0;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_read_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

16 
n
;

17 
u_ch¨
 *
buf
, *
¥ev
;

18 
size_t
 
size
;

19 
ssize_t
 
tŸÆ
;

21 i‡(
c
->
ªad
->
≥ndög_eof
) {

22 
c
->
ªad
->
ªady
 = 0;

26 
tŸÆ
 = 0;

28 
˛
) {

32 i‡(!
c
->
ªad
->
ªady
) {

33  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

36 
buf
 = 
˛
->buf->
œ°
;

37 
¥ev
 = 
˛
->
buf
->
œ°
;

38 
size
 = 0;

42 
˛
 && 
¥ev
 =˛->
buf
->
œ°
) {

43 
size
 +
˛
->
buf
->
íd
 - cl->buf->
œ°
;

44 
¥ev
 = 
˛
->
buf
->
íd
;

45 
˛
 = cl->
√xt
;

48 
n
 = 
	`ngx_aio_ªad
(
c
, 
buf
, 
size
);

50 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ªad: %d", 
n
);

52 i‡(
n
 =
NGX_AGAIN
) {

53  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

56 i‡(
n
 =
NGX_ERROR
) {

57  
NGX_ERROR
;

60 i‡(
n
 == 0) {

61 
c
->
ªad
->
≥ndög_eof
 = 1;

62 i‡(
tŸÆ
) {

63 
c
->
ªad
->
eof
 = 0;

64 
c
->
ªad
->
ªady
 = 1;

66  
tŸÆ
;

69 i‡(
n
 > 0) {

70 
tŸÆ
 +
n
;

73 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

74 "aio_ªadÅŸÆ: %d", 
tŸÆ
);

77  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

78 
	}
}

	@src/os/unix/ngx_aio_write.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
wev
;

22 
wev
 = 
c
->
wrôe
;

24 i‡(!
wev
->
ªady
) {

25  
NGX_AGAIN
;

28 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

29 "aio: wev->com∂ëe: %d", 
wev
->
com∂ëe
);

31 i‡(!
wev
->
com∂ëe
) {

32 
	`ngx_memzîo
(&
wev
->
aiocb
, (aiocb));

34 
wev
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

35 
wev
->
aiocb
.
aio_buf
 = 
buf
;

36 
wev
->
aiocb
.
aio_nbyãs
 = 
size
;

38 #i‡(
NGX_HAVE_KQUEUE
)

39 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

40 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

41 
wev
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = wev;

44 i‡(
	`aio_wrôe
(&
wev
->
aiocb
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
,

47  
NGX_ERROR
;

50 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_write: OK");

52 
wev
->
a˘ive
 = 1;

53 
wev
->
ªady
 = 0;

56 
wev
->
com∂ëe
 = 0;

58 
n
 = 
	`aio_îr‹
(&
wev
->
aiocb
);

59 i‡(
n
 == -1) {

60 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
, "aio_error() failed");

61 
wev
->
îr‹
 = 1;

62  
NGX_ERROR
;

65 i‡(
n
 != 0) {

66 i‡(
n
 =
NGX_EINPROGRESS
) {

67 i‡(
wev
->
ªady
) {

68 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
n
,

70 
wev
->
ªady
 = 0;

72  
NGX_AGAIN
;

75 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_write() failed");

76 
wev
->
îr‹
 = 1;

77 
wev
->
ªady
 = 0;

80 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

81 i‡(
n
 == -1) {

82 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

86 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_return() %d",Ç);

89  
NGX_ERROR
;

92 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

93 i‡(
n
 == -1) {

94 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

97 
wev
->
îr‹
 = 1;

98 
wev
->
ªady
 = 0;

99  
NGX_ERROR
;

103 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_wrôe: %d", 
n
);

105 
wev
->
a˘ive
 = 0;

106 
wev
->
ªady
 = 1;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_write_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *

14 
	$ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

16 
u_ch¨
 *
buf
, *
¥ev
;

17 
off_t
 
£nd
, 
£¡
;

18 
size_t
 
Àn
;

19 
ssize_t
 
n
, 
size
;

20 
ngx_chaö_t
 *
˛
;

24 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

25 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

28 
£nd
 = 0;

29 
£¡
 = 0;

30 
˛
 = 
ö
;

32 
˛
) {

34 i‡(
˛
->
buf
->
pos
 =˛->buf->
œ°
) {

35 
˛
 = cl->
√xt
;

41 i‡(!
c
->
wrôe
->
ªady
) {

42  
˛
;

45 
buf
 = 
˛
->buf->
pos
;

46 
¥ev
 = 
buf
;

47 
Àn
 = 0;

51 
˛
 && 
¥ev
 =˛->
buf
->
pos
 && 
£nd
 < 
limô
) {

52 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

56 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

58 i‡(
£nd
 + 
size
 > 
limô
) {

59 
size
 = 
limô
 - 
£nd
;

62 
Àn
 +
size
;

63 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

64 
£nd
 +
size
;

65 
˛
 = cl->
√xt
;

68 
n
 = 
	`ngx_aio_wrôe
(
c
, 
buf
, 
Àn
);

70 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_wrôe: %z", 
n
);

72 i‡(
n
 =
NGX_ERROR
) {

73  
NGX_CHAIN_ERROR
;

76 i‡(
n
 > 0) {

77 
£¡
 +
n
;

78 
c
->
£¡
 +
n
;

81 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

82 "aio_wrôê£¡: %O", 
c
->
£¡
);

84 
˛
 = 
ö
; cl; c»˛->
√xt
) {

86 i‡(
£¡
 >
˛
->
buf
->
œ°
 - cl->buf->
pos
) {

87 
£¡
 -
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

93 
˛
->
buf
->
pos
 +
£¡
;

99  
˛
;

100 
	}
}

	@src/os/unix/ngx_alloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gngx_∑gesize
;

13 
ngx_uöt_t
 
	gngx_∑gesize_shi·
;

14 
ngx_uöt_t
 
	gngx_ˇchñöe_size
;

18 
	$ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

20 *
p
;

22 
p
 = 
	`mÆloc
(
size
);

23 i‡(
p
 =
NULL
) {

24 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

25 "mÆloc(%uzËÁûed", 
size
);

28 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0, "mÆloc: %p:%uz", 
p
, 
size
);

30  
p
;

31 
	}
}

35 
	$ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

37 *
p
;

39 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

41 i‡(
p
) {

42 
	`ngx_memzîo
(
p
, 
size
);

45  
p
;

46 
	}
}

49 #i‡(
NGX_HAVE_POSIX_MEMALIGN
)

52 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

54 *
p
;

55 
îr
;

57 
îr
 = 
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
);

59 i‡(
îr
) {

60 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

61 "posix_memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

62 
p
 = 
NULL
;

65 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

66 "posix_memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

68  
p
;

69 
	}
}

71 #ñi‡(
NGX_HAVE_MEMALIGN
)

74 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

76 *
p
;

78 
p
 = 
	`memÆign
(
Æignmít
, 
size
);

79 i‡(
p
 =
NULL
) {

80 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

81 "memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

84 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

85 "memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

87  
p
;

88 
	}
}

	@src/os/unix/ngx_alloc.h

8 #i‚de‡
_NGX_ALLOC_H_INCLUDED_


9 
	#_NGX_ALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 *
ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

17 *
ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

19 
	#ngx_‰ì
 
‰ì


	)

29 #i‡(
NGX_HAVE_POSIX_MEMALIGN
 || 
NGX_HAVE_MEMALIGN
)

31 *
ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
);

35 
	#ngx_memÆign
(
Æignmít
, 
size
, 
log
Ë
	`ngx_Æloc
(size,Üog)

	)

40 
ngx_uöt_t
 
ngx_∑gesize
;

41 
ngx_uöt_t
 
ngx_∑gesize_shi·
;

42 
ngx_uöt_t
 
ngx_ˇchñöe_size
;

	@src/os/unix/ngx_atomic.h

8 #i‚de‡
_NGX_ATOMIC_H_INCLUDED_


9 
	#_NGX_ATOMIC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_LIBATOMIC
)

18 
	#AO_REQUIRE_CAS


	)

19 
	~<©omic_›s.h
>

21 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

23 
	tngx_©omic_öt_t
;

24 
AO_t
 
	tngx_©omic_uöt_t
;

25 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

27 #i‡(
NGX_PTR_SIZE
 == 8)

28 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

30 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

33 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

34 
	`AO_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
√w
)

	)

35 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

36 
	`AO_„tch_™d_add
(
vÆue
, 
add
)

	)

37 
	#ngx_mem‹y_b¨rõr
(Ë
	`AO_n›
()

	)

38 
	#ngx_˝u_∑u£
()

	)

41 #ñi‡(
NGX_DARWIN_ATOMIC
)

48 
	~<libkîn/OSAtomic.h
>

52 #unde‡
boﬁ


56 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

58 #i‡(
NGX_PTR_SIZE
 == 8)

60 
öt64_t
 
	tngx_©omic_öt_t
;

61 
uöt64_t
 
	tngx_©omic_uöt_t
;

62 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

64 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

65 
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
ﬁd
, 
√w
, (
öt64_t
 *Ë
lock
)

	)

67 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

68 (
	`OSAtomicAdd64
(
add
, (
öt64_t
 *Ë
vÆue
Ë-ádd)

	)

72 
öt32_t
 
	tngx_©omic_öt_t
;

73 
uöt32_t
 
	tngx_©omic_uöt_t
;

74 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

76 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

77 
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
ﬁd
, 
√w
, (
öt32_t
 *Ë
lock
)

	)

79 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

80 (
	`OSAtomicAdd32
(
add
, (
öt32_t
 *Ë
vÆue
Ë-ádd)

	)

84 
	#ngx_mem‹y_b¨rõr
(Ë
	`OSMem‹yB¨rõr
()

	)

86 
	#ngx_˝u_∑u£
()

	)

88 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

91 #ñi‡(
NGX_HAVE_GCC_ATOMIC
)

95 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

97 
	tngx_©omic_öt_t
;

98 
	tngx_©omic_uöt_t
;

100 #i‡(
NGX_PTR_SIZE
 == 8)

101 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

103 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

106 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

109 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
£t
) \

110 
	`__sync_boﬁ_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
£t
)

	)

112 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

113 
	`__sync_„tch_™d_add
(
vÆue
, 
add
)

	)

115 
	#ngx_mem‹y_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

117 #i‡–
__i386__
 || 
__i386
 || 
__amd64__
 || 
__amd64
 )

118 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

120 
	#ngx_˝u_∑u£
()

	)

124 #ñi‡–
__i386__
 || 
__i386
 )

126 
öt32_t
 
	tngx_©omic_öt_t
;

127 
uöt32_t
 
	tngx_©omic_uöt_t
;

128 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

129 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

132 #i‡–
__SUNPRO_C
 )

134 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

136 
ngx_©omic_uöt_t


137 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

138 
ngx_©omic_uöt_t
 
£t
);

140 
ngx_©omic_öt_t


141 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

149 
ngx_˝u_∑u£
();

153 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

158 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

160 
	~"ngx_gcc_©omic_x86.h
"

165 #ñi‡–
__amd64__
 || 
__amd64
 )

167 
öt64_t
 
	tngx_©omic_öt_t
;

168 
uöt64_t
 
	tngx_©omic_uöt_t
;

169 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

170 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

173 #i‡–
__SUNPRO_C
 )

175 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

177 
ngx_©omic_uöt_t


178 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

179 
ngx_©omic_uöt_t
 
£t
);

181 
ngx_©omic_öt_t


182 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

190 
ngx_˝u_∑u£
();

194 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

199 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

201 
	~"ngx_gcc_©omic_amd64.h
"

206 #ñi‡–
__•¨c__
 || 
__•¨c
 || 
__•¨cv9
 )

208 #i‡(
NGX_PTR_SIZE
 == 8)

210 
öt64_t
 
	tngx_©omic_öt_t
;

211 
uöt64_t
 
	tngx_©omic_uöt_t
;

212 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

216 
öt32_t
 
	tngx_©omic_öt_t
;

217 
uöt32_t
 
	tngx_©omic_uöt_t
;

218 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

222 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

225 #i‡–
__SUNPRO_C
 )

227 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

229 
	~"ngx_su≈ro_©omic_•¨c64.h
"

234 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

236 
	~"ngx_gcc_©omic_•¨c64.h
"

241 #ñi‡–
__powîpc__
 || 
__POWERPC__
 )

243 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

245 #i‡(
NGX_PTR_SIZE
 == 8)

247 
öt64_t
 
	tngx_©omic_öt_t
;

248 
uöt64_t
 
	tngx_©omic_uöt_t
;

249 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

253 
öt32_t
 
	tngx_©omic_öt_t
;

254 
uöt32_t
 
	tngx_©omic_uöt_t
;

255 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

259 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

262 
	~"ngx_gcc_©omic_µc.h
"

267 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

269 
	#NGX_HAVE_ATOMIC_OPS
 0

	)

271 
öt32_t
 
	tngx_©omic_öt_t
;

272 
uöt32_t
 
	tngx_©omic_uöt_t
;

273 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

274 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

277 
ngx_ölöe
 
ngx_©omic_uöt_t


278 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

279 
ngx_©omic_uöt_t
 
£t
)

281 i‡(*
lock
 =
ﬁd
) {

282 *
lock
 = 
£t
;

287 
	}
}

290 
ngx_ölöe
 
ngx_©omic_öt_t


291 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

293 
ngx_©omic_öt_t
 
ﬁd
;

295 
ﬁd
 = *
vÆue
;

296 *
vÆue
 +
add
;

298  
ﬁd
;

299 
	}
}

301 
	#ngx_mem‹y_b¨rõr
()

	)

302 
	#ngx_˝u_∑u£
()

	)

307 
ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
);

309 
	#ngx_åylock
(
lock
Ë(*÷ockË=0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 1))

	)

310 
	#ngx_u∆ock
(
lock
Ë*÷ockË0

	)

	@src/os/unix/ngx_channel.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_ch™√l.h
>

13 
ngx_öt_t


14 
	$ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

15 
ngx_log_t
 *
log
)

17 
ssize_t
 
n
;

18 
ngx_îr_t
 
îr
;

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

22 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

25 
cmsghdr
 
cm
;

26 
•a˚
[
	`CMSG_SPACE
(())];

27 } 
cmsg
;

29 i‡(
ch
->
fd
 == -1) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

34 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

35 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

37 
cmsg
.
cm
.
cmsg_Àn
 = 
	`CMSG_LEN
(());

38 
cmsg
.
cm
.
cmsg_Àvñ
 = 
SOL_SOCKET
;

39 
cmsg
.
cm
.
cmsg_ty≥
 = 
SCM_RIGHTS
;

51 
	`ngx_mem˝y
(
	`CMSG_DATA
(&
cmsg
.
cm
), &
ch
->
fd
, ());

54 
msg
.
msg_Êags
 = 0;

58 i‡(
ch
->
fd
 == -1) {

59 
msg
.
msg_ac¸ights
 = 
NULL
;

60 
msg
.
msg_ac¸ight¶í
 = 0;

63 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
ch
->
fd
;

64 
msg
.
msg_ac¸ight¶í
 = ();

69 
iov
[0].
iov_ba£
 = (*Ë
ch
;

70 
iov
[0].
iov_Àn
 = 
size
;

72 
msg
.
msg_«me
 = 
NULL
;

73 
msg
.
msg_«mñí
 = 0;

74 
msg
.
msg_iov
 = 
iov
;

75 
msg
.
msg_iovÀn
 = 1;

77 
n
 = 
	`£ndmsg
(
s
, &
msg
, 0);

79 i‡(
n
 == -1) {

80 
îr
 = 
ngx_î∫o
;

81 i‡(
îr
 =
NGX_EAGAIN
) {

82  
NGX_AGAIN
;

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "sendmsg() failed");

86  
NGX_ERROR
;

89  
NGX_OK
;

90 
	}
}

93 
ngx_öt_t


94 
	$ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
, 
ngx_log_t
 *
log
)

96 
ssize_t
 
n
;

97 
ngx_îr_t
 
îr
;

98 
iovec
 
iov
[1];

99 
msghdr
 
msg
;

101 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

103 
cmsghdr
 
cm
;

104 
•a˚
[
	`CMSG_SPACE
(())];

105 } 
cmsg
;

107 
fd
;

110 
iov
[0].
iov_ba£
 = (*Ë
ch
;

111 
iov
[0].
iov_Àn
 = 
size
;

113 
msg
.
msg_«me
 = 
NULL
;

114 
msg
.
msg_«mñí
 = 0;

115 
msg
.
msg_iov
 = 
iov
;

116 
msg
.
msg_iovÀn
 = 1;

118 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

119 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

120 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

122 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
fd
;

123 
msg
.
msg_ac¸ight¶í
 = ();

126 
n
 = 
	`ªcvmsg
(
s
, &
msg
, 0);

128 i‡(
n
 == -1) {

129 
îr
 = 
ngx_î∫o
;

130 i‡(
îr
 =
NGX_EAGAIN
) {

131  
NGX_AGAIN
;

134 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "recvmsg() failed");

135  
NGX_ERROR
;

138 i‡(
n
 == 0) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "recvmsg()Ñeturned zero");

140  
NGX_ERROR
;

143 i‡((
size_t
Ë
n
 < (
ngx_ch™√l_t
)) {

144 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

145 "ªcvmsg(Ëªtu∫edÇŸÉnough d©a: %uz", 
n
);

146  
NGX_ERROR
;

149 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

151 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

153 i‡(
cmsg
.
cm
.
cmsg_Àn
 < (
sockÀn_t
Ë
	`CMSG_LEN
(())) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

156  
NGX_ERROR
;

159 i‡(
cmsg
.
cm
.
cmsg_Àvñ
 !
SOL_SOCKET
 || cmsg.cm.
cmsg_ty≥
 !
SCM_RIGHTS
)

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

164 
cmsg
.
cm
.
cmsg_Àvñ
, cmsg.cm.
cmsg_ty≥
);

165  
NGX_ERROR
;

170 
	`ngx_mem˝y
(&
ch
->
fd
, 
	`CMSG_DATA
(&
cmsg
.
cm
), ());

173 i‡(
msg
.
msg_Êags
 & (
MSG_TRUNC
|
MSG_CTRUNC
)) {

174 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

180 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

181 i‡(
msg
.
msg_ac¸ight¶í
 != ()) {

182 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

184  
NGX_ERROR
;

187 
ch
->
fd
 = fd;

192  
n
;

193 
	}
}

196 
ngx_öt_t


197 
	$ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
, 
ngx_öt_t
 
evít
,

198 
ngx_evít_h™dÀr_±
 
h™dÀr
)

200 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

201 
ngx_c⁄√˘i⁄_t
 *
c
;

203 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
fd
, 
cy˛e
->
log
);

205 i‡(
c
 =
NULL
) {

206  
NGX_ERROR
;

209 
c
->
poﬁ
 = 
cy˛e
->pool;

211 
ªv
 = 
c
->
ªad
;

212 
wev
 = 
c
->
wrôe
;

214 
ªv
->
log
 = 
cy˛e
->log;

215 
wev
->
log
 = 
cy˛e
->log;

217 #i‡(
NGX_THREADS
)

218 
ªv
->
lock
 = &
c
->lock;

219 
wev
->
lock
 = &
c
->lock;

220 
ªv
->
own_lock
 = &
c
->
lock
;

221 
wev
->
own_lock
 = &
c
->
lock
;

224 
ªv
->
ch™√l
 = 1;

225 
wev
->
ch™√l
 = 1;

227 
ev
 = (
evít
 =
NGX_READ_EVENT
Ë? 
ªv
 : 
wev
;

229 
ev
->
h™dÀr
 = handler;

231 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

232 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

233 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

234  
NGX_ERROR
;

238 i‡(
	`ngx_add_evít
(
ev
, 
evít
, 0Ë=
NGX_ERROR
) {

239 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

240  
NGX_ERROR
;

244  
NGX_OK
;

245 
	}
}

249 
	$ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
)

251 i‡(
	`˛o£
(
fd
[0]) == -1) {

252 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

255 i‡(
	`˛o£
(
fd
[1]) == -1) {

256 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

258 
	}
}

	@src/os/unix/ngx_channel.h

8 #i‚de‡
_NGX_CHANNEL_H_INCLUDED_


9 
	#_NGX_CHANNEL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

18 
ngx_uöt_t
 
	mcomm™d
;

19 
ngx_pid_t
 
	mpid
;

20 
ngx_öt_t
 
	m¶Ÿ
;

21 
ngx_fd_t
 
	mfd
;

22 } 
	tngx_ch™√l_t
;

25 
ngx_öt_t
 
ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

26 
ngx_log_t
 *
log
);

27 
ngx_öt_t
 
ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

28 
ngx_log_t
 *
log
);

29 
ngx_öt_t
 
ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
,

30 
ngx_öt_t
 
evít
, 
ngx_evít_h™dÀr_±
 
h™dÀr
);

31 
ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
);

	@src/os/unix/ngx_daemon.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t


13 
	$ngx_d´m⁄
(
ngx_log_t
 *
log
)

15 
fd
;

17 
	`f‹k
()) {

19 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "fork() failed");

20  
NGX_ERROR
;

26 
	`exô
(0);

29 
ngx_pid
 = 
	`ngx_gëpid
();

31 i‡(
	`£tsid
() == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "setsid() failed");

33  
NGX_ERROR
;

36 
	`umask
(0);

38 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

39 i‡(
fd
 == -1) {

40 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

42  
NGX_ERROR
;

45 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) == -1) {

46 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDIN) failed");

47  
NGX_ERROR
;

50 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) == -1) {

51 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDOUT) failed");

52  
NGX_ERROR
;

56 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) == -1) {

57 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDERR) failed");

58  
NGX_ERROR
;

62 i‡(
fd
 > 
STDERR_FILENO
) {

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "close() failed");

65  
NGX_ERROR
;

69  
NGX_OK
;

70 
	}
}

	@src/os/unix/ngx_darwin.h

8 #i‚de‡
_NGX_DARWIN_H_INCLUDED_


9 
	#_NGX_DARWIN_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_d¨wö_kîn_o§ñd©e
;

17 
ngx_d¨wö_hw_n˝u
;

18 
u_l⁄g
 
ngx_d¨wö_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_darwin_config.h

8 #i‚de‡
_NGX_DARWIN_CONFIG_H_INCLUDED_


9 
	#_NGX_DARWIN_CONFIG_H_INCLUDED_


	)

12 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
MAC_OS_X_VERSION_10_0


	)

15 
	~<sys/ty≥s.h
>

16 
	~<sys/time.h
>

17 
	~<uni°d.h
>

18 
	~<öây≥s.h
>

19 
	~<°d¨g.h
>

20 
	~<°ddef.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<î∫o.h
>

24 
	~<°rög.h
>

25 
	~<sig«l.h
>

26 
	~<pwd.h
>

27 
	~<gΩ.h
>

28 
	~<dúít.h
>

29 
	~<glob.h
>

30 
	~<sys/mou¡.h
>

32 
	~<sys/fûio.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/uio.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/mm™.h
>

40 
	~<sys/ªsour˚.h
>

41 
	~<sched.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<√töë/t˝.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

48 
	~<sys/un.h
>

50 
	~<sys/sys˘l.h
>

51 
	~<xloˇÀ.h
>

54 #i‚de‡
IOV_MAX


55 
	#IOV_MAX
 64

	)

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_POLL
)

68 
	~<pﬁl.h
>

72 #i‡(
NGX_HAVE_KQUEUE
)

73 
	~<sys/evít.h
>

77 
	#NGX_LISTEN_BACKLOG
 -1

	)

80 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


81 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

85 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


86 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

90 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

91 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

94 **
ívú⁄
;

	@src/os/unix/ngx_darwin_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_d¨wö_kîn_o°y≥
[16];

13 
	gngx_d¨wö_kîn_o§ñó£
[128];

14 
	gngx_d¨wö_hw_n˝u
;

15 
	gngx_d¨wö_kîn_ùc_somaxc⁄n
;

16 
u_l⁄g
 
	gngx_d¨wö_√t_öë_t˝_£nd•a˚
;

18 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

21 
ngx_os_io_t
 
	gngx_d¨wö_io
 = {

22 
ngx_unix_ªcv
,

23 
ngx_ªadv_chaö
,

24 
ngx_udp_unix_ªcv
,

25 
ngx_unix_£nd
,

26 #i‡(
NGX_HAVE_SENDFILE
)

27 
ngx_d¨wö_£ndfûe_chaö
,

28 
NGX_IO_SENDFILE


30 
ngx_wrôev_chaö
,

37 *
	m«me
;

38 *
	mvÆue
;

39 
size_t
 
	msize
;

40 
ngx_uöt_t
 
	mexi°s
;

41 } 
	tsys˘l_t
;

44 
sys˘l_t
 
	gsys˘ls
[] = {

46 &
ngx_d¨wö_hw_n˝u
,

47 (
ngx_d¨wö_hw_n˝u
), 0 },

50 &
ngx_d¨wö_√t_öë_t˝_£nd•a˚
,

51 (
ngx_d¨wö_√t_öë_t˝_£nd•a˚
), 0 },

54 &
ngx_d¨wö_kîn_ùc_somaxc⁄n
,

55 (
ngx_d¨wö_kîn_ùc_somaxc⁄n
), 0 },

57 { 
NULL
, NULL, 0, 0 }

62 
	$ngx_debug_öô
()

64 #i‡(
NGX_DEBUG_MALLOC
)

75 
	`£ãnv
("MallocScribble", "1", 0);

77 
ngx_debug_mÆloc
 = 1;

81 i‡(
	`gëív
("MallocScribble")) {

82 
ngx_debug_mÆloc
 = 1;

86 
	}
}

89 
ngx_öt_t


90 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

92 
size_t
 
size
;

93 
ngx_îr_t
 
îr
;

94 
ngx_uöt_t
 
i
;

96 
size
 = (
ngx_d¨wö_kîn_o°y≥
);

97 i‡(
	`sys˘lby«me
("kîn.o°y≥", 
ngx_d¨wö_kîn_o°y≥
, &
size
, 
NULL
, 0)

100 
îr
 = 
ngx_î∫o
;

102 i‡(
îr
 !
NGX_ENOENT
) {

104 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

107 i‡(
îr
 !
NGX_ENOMEM
) {

108  
NGX_ERROR
;

111 
ngx_d¨wö_kîn_o°y≥
[
size
 - 1] = '\0';

115 
size
 = (
ngx_d¨wö_kîn_o§ñó£
);

116 i‡(
	`sys˘lby«me
("kîn.o§ñó£", 
ngx_d¨wö_kîn_o§ñó£
, &
size
,

117 
NULL
, 0)

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 !
NGX_ENOENT
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

127 i‡(
îr
 !
NGX_ENOMEM
) {

128  
NGX_ERROR
;

131 
ngx_d¨wö_kîn_o§ñó£
[
size
 - 1] = '\0';

135 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

136 
size
 = 
sys˘ls
[
i
].size;

138 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

141 
sys˘ls
[
i
].
exi°s
 = 1;

145 
îr
 = 
ngx_î∫o
;

147 i‡(
îr
 =
NGX_ENOENT
) {

151 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

152 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

153  
NGX_ERROR
;

156 
ngx_n˝u
 = 
ngx_d¨wö_hw_n˝u
;

158 i‡(
ngx_d¨wö_kîn_ùc_somaxc⁄n
 > 32767) {

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

161  
NGX_ERROR
;

164 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

166 
ngx_os_io
 = 
ngx_d¨wö_io
;

168  
NGX_OK
;

169 
	}
}

173 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

175 
u_l⁄g
 
vÆue
;

176 
ngx_uöt_t
 
i
;

178 i‡(
ngx_d¨wö_kîn_o°y≥
[0]) {

179 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

180 
ngx_d¨wö_kîn_o°y≥
, 
ngx_d¨wö_kîn_o§ñó£
);

183 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

184 i‡(
sys˘ls
[
i
].
exi°s
) {

185 i‡(
sys˘ls
[
i
].
size
 == ()) {

186 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

189 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

192 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

193 
sys˘ls
[
i
].
«me
, 
vÆue
);

196 
	}
}

	@src/os/unix/ngx_darwin_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

32 
	#NGX_TRAILERS
 64

	)

34 
	#NGX_HEADERS
 
IOV_MAX


	)

35 
	#NGX_TRAILERS
 
IOV_MAX


	)

39 
ngx_chaö_t
 *

40 
	$ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

42 
rc
;

43 
u_ch¨
 *
¥ev
;

44 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

45 
off_t
 
hódî_size
, 
fûe_size
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_îr_t
 
îr
;

48 
ngx_buf_t
 *
fûe
;

49 
ngx_¨øy_t
 
hódî
, 
åaûî
;

50 
ngx_evít_t
 *
wev
;

51 
ngx_chaö_t
 *
˛
;

52 
sf_hdå
 
hdå
;

53 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

55 
wev
 = 
c
->
wrôe
;

57 i‡(!
wev
->
ªady
) {

58  
ö
;

61 #i‡(
NGX_HAVE_KQUEUE
)

63 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

64 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

66 
wev
->
îr‹
 = 1;

67  
NGX_CHAIN_ERROR
;

74 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

75 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

78 
£nd
 = 0;

80 
hódî
.
ñts
 = 
hódîs
;

81 
hódî
.
size
 = (
iovec
);

82 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

83 
hódî
.
poﬁ
 = 
c
->pool;

85 
åaûî
.
ñts
 = 
åaûîs
;

86 
åaûî
.
size
 = (
iovec
);

87 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

88 
åaûî
.
poﬁ
 = 
c
->pool;

91 
fûe
 = 
NULL
;

92 
fûe_size
 = 0;

93 
hódî_size
 = 0;

94 
eöå
 = 0;

95 
com∂ëe
 = 0;

96 
¥ev_£nd
 = 
£nd
;

98 
hódî
.
√…s
 = 0;

99 
åaûî
.
√…s
 = 0;

103 
¥ev
 = 
NULL
;

104 
iov
 = 
NULL
;

106 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

108 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

112 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

116 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

118 i‡(
£nd
 + 
size
 > 
limô
) {

119 
size
 = 
limô
 - 
£nd
;

122 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

123 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

126 i‡(
hódî
.
√…s
 >
IOV_MAX
) {

130 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

131 i‡(
iov
 =
NULL
) {

132  
NGX_CHAIN_ERROR
;

135 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

136 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

139 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

140 
hódî_size
 +
size
;

141 
£nd
 +
size
;

145 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

146 
fûe
 = 
˛
->
buf
;

151 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

153 i‡(
£nd
 + 
size
 > 
limô
) {

154 
size
 = 
limô
 - 
£nd
;

156 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

157 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

159 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

160 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

164 
fûe_size
 +
size
;

165 
£nd
 +
size
;

166 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

167 
˛
 = cl->
√xt
;

169 } 
˛


170 && 
˛
->
buf
->
ö_fûe


171 && 
£nd
 < 
limô


172 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

173 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

176 i‡(
fûe
 && 
hódî
.
√…s
 == 0) {

180 
¥ev
 = 
NULL
;

181 
iov
 = 
NULL
;

183 
˛
 && 
£nd
 < 
limô
) {

185 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

186 
˛
 = cl->
√xt
;

190 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

194 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

196 i‡(
£nd
 + 
size
 > 
limô
) {

197 
size
 = 
limô
 - 
£nd
;

200 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

201 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

204 i‡(
åaûî
.
√…s
 >
IOV_MAX
) {

208 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

209 i‡(
iov
 =
NULL
) {

210  
NGX_CHAIN_ERROR
;

213 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

214 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

217 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

218 
£nd
 +
size
;

219 
˛
 = cl->
√xt
;

223 i‡(
fûe
) {

230 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

231 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

232 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

233 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

235 
£¡
 = 
hódî_size
 + 
fûe_size
;

237 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

239 
fûe
->
fûe_pos
, 
£¡
, 
hódî_size
);

241 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

242 &
£¡
, &
hdå
, 0);

244 i‡(
rc
 == -1) {

245 
îr
 = 
ngx_î∫o
;

247 
îr
) {

248 
NGX_EAGAIN
:

251 
NGX_EINTR
:

252 
eöå
 = 1;

256 
wev
->
îr‹
 = 1;

257 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

258  
NGX_CHAIN_ERROR
;

261 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

262 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

265 i‡(
rc
 =0 && 
£¡
 == 0) {

273 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

275 
fûe
->fûe->
«me
.
d©a
);

277  
NGX_CHAIN_ERROR
;

280 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

282 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

285 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

287 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

288 "wrôev: %d o‡%uz", 
rc
, 
£nd
);

290 i‡(
rc
 == -1) {

291 
îr
 = 
ngx_î∫o
;

293 
îr
) {

294 
NGX_EAGAIN
:

297 
NGX_EINTR
:

298 
eöå
 = 1;

302 
wev
->
îr‹
 = 1;

303 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

304  
NGX_CHAIN_ERROR
;

307 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

311 
£¡
 = 
rc
 > 0 ?Ñc : 0;

314 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

315 
com∂ëe
 = 1;

318 
c
->
£¡
 += sent;

320 
˛
 = 
ö
; cl; c»˛->
√xt
) {

322 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

326 i‡(
£¡
 == 0) {

330 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

332 i‡(
£¡
 >
size
) {

333 
£¡
 -
size
;

335 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

336 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

339 i‡(
˛
->
buf
->
ö_fûe
) {

340 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

346 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

347 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

350 i‡(
˛
->
buf
->
ö_fûe
) {

351 
˛
->
buf
->
fûe_pos
 +
£¡
;

357 i‡(
eöå
) {

361 i‡(!
com∂ëe
) {

362 
wev
->
ªady
 = 0;

363  
˛
;

366 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

367  
˛
;

370 
ö
 = 
˛
;

372 
	}
}

	@src/os/unix/ngx_errno.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

28 
ngx_°r_t
 *
	gngx_sys_îæi°
;

29 
ngx_°r_t
 
	gngx_unknown_îr‹
 = 
ngx_°rög
("UnknownÉrror");

32 
u_ch¨
 *

33 
	$ngx_°ªº‹
(
ngx_îr_t
 
îr
, 
u_ch¨
 *
îr°r
, 
size_t
 
size
)

35 
ngx_°r_t
 *
msg
;

37 
msg
 = ((
ngx_uöt_t
Ë
îr
 < 
NGX_SYS_NERR
Ë? &
ngx_sys_îæi°
[err]:

38 &
ngx_unknown_îr‹
;

39 
size
 = 
	`ngx_mö
(size, 
msg
->
Àn
);

41  
	`ngx_˝ymem
(
îr°r
, 
msg
->
d©a
, 
size
);

42 
	}
}

45 
ngx_öt_t


46 
	$ngx_°ªº‹_öô
()

48 *
msg
;

49 
u_ch¨
 *
p
;

50 
size_t
 
Àn
;

51 
ngx_îr_t
 
îr
;

58 
Àn
 = 
NGX_SYS_NERR
 * (
ngx_°r_t
);

60 
ngx_sys_îæi°
 = 
	`mÆloc
(
Àn
);

61 i‡(
ngx_sys_îæi°
 =
NULL
) {

62 
Áûed
;

65 
îr
 = 0;Éº < 
NGX_SYS_NERR
;Érr++) {

66 
msg
 = 
	`°ªº‹
(
îr
);

67 
Àn
 = 
	`ngx_°æí
(
msg
);

69 
p
 = 
	`mÆloc
(
Àn
);

70 i‡(
p
 =
NULL
) {

71 
Áûed
;

74 
	`ngx_mem˝y
(
p
, 
msg
, 
Àn
);

75 
ngx_sys_îæi°
[
îr
].
Àn
 =Üen;

76 
ngx_sys_îæi°
[
îr
].
d©a
 = 
p
;

79  
NGX_OK
;

81 
Áûed
:

83 
îr
 = 
î∫o
;

84 
	`ngx_log_°dîr
(0, "mÆloc(%uzËÁûed (%d: %s)", 
Àn
, 
îr
, 
	`°ªº‹
(err));

86  
NGX_ERROR
;

87 
	}
}

	@src/os/unix/ngx_errno.h

8 #i‚de‡
_NGX_ERRNO_H_INCLUDED_


9 
	#_NGX_ERRNO_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_îr_t
;

18 
	#NGX_EPERM
 
EPERM


	)

19 
	#NGX_ENOENT
 
ENOENT


	)

20 
	#NGX_ENOPATH
 
ENOENT


	)

21 
	#NGX_ESRCH
 
ESRCH


	)

22 
	#NGX_EINTR
 
EINTR


	)

23 
	#NGX_ECHILD
 
ECHILD


	)

24 
	#NGX_ENOMEM
 
ENOMEM


	)

25 
	#NGX_EACCES
 
EACCES


	)

26 
	#NGX_EBUSY
 
EBUSY


	)

27 
	#NGX_EEXIST
 
EEXIST


	)

28 
	#NGX_EXDEV
 
EXDEV


	)

29 
	#NGX_ENOTDIR
 
ENOTDIR


	)

30 
	#NGX_EISDIR
 
EISDIR


	)

31 
	#NGX_EINVAL
 
EINVAL


	)

32 
	#NGX_ENFILE
 
ENFILE


	)

33 
	#NGX_EMFILE
 
EMFILE


	)

34 
	#NGX_ENOSPC
 
ENOSPC


	)

35 
	#NGX_EPIPE
 
EPIPE


	)

36 
	#NGX_EINPROGRESS
 
EINPROGRESS


	)

37 
	#NGX_EADDRINUSE
 
EADDRINUSE


	)

38 
	#NGX_ECONNABORTED
 
ECONNABORTED


	)

39 
	#NGX_ECONNRESET
 
ECONNRESET


	)

40 
	#NGX_ENOTCONN
 
ENOTCONN


	)

41 
	#NGX_ETIMEDOUT
 
ETIMEDOUT


	)

42 
	#NGX_ECONNREFUSED
 
ECONNREFUSED


	)

43 
	#NGX_ENAMETOOLONG
 
ENAMETOOLONG


	)

44 
	#NGX_ENETDOWN
 
ENETDOWN


	)

45 
	#NGX_ENETUNREACH
 
ENETUNREACH


	)

46 
	#NGX_EHOSTDOWN
 
EHOSTDOWN


	)

47 
	#NGX_EHOSTUNREACH
 
EHOSTUNREACH


	)

48 
	#NGX_ENOSYS
 
ENOSYS


	)

49 
	#NGX_ECANCELED
 
ECANCELED


	)

50 
	#NGX_EILSEQ
 
EILSEQ


	)

51 
	#NGX_ENOMOREFILES
 0

	)

53 #i‡(
NGX_HAVE_OPENAT
)

54 
	#NGX_EMLINK
 
EMLINK


	)

55 
	#NGX_ELOOP
 
ELOOP


	)

58 #i‡(
__hpux__
)

59 
	#NGX_EAGAIN
 
EWOULDBLOCK


	)

61 
	#NGX_EAGAIN
 
EAGAIN


	)

65 
	#ngx_î∫o
 
î∫o


	)

66 
	#ngx_sockë_î∫o
 
î∫o


	)

67 
	#ngx_£t_î∫o
(
îr
Ë
î∫o
 = 
	)
err

68 
	#ngx_£t_sockë_î∫o
(
îr
Ë
î∫o
 = 
	)
err

71 
u_ch¨
 *
ngx_°ªº‹
(
ngx_îr_t
 
îr
, u_ch¨ *
îr°r
, 
size_t
 
size
);

72 
ngx_öt_t
 
ngx_°ªº‹_öô
();

	@src/os/unix/ngx_file_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

31 
ngx_kqueue
;

34 
ssize_t
 
ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
,

35 
ngx_evít_t
 *
ev
);

36 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

39 
ssize_t


40 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

41 
ngx_poﬁ_t
 *
poﬁ
)

43 
n
;

44 
ngx_evít_t
 *
ev
;

45 
ngx_evít_aio_t
 *
aio
;

47 i‡(!
ngx_fûe_aio
) {

48  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

51 
aio
 = 
fûe
->aio;

53 i‡(
aio
 =
NULL
) {

54 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

55 i‡(
aio
 =
NULL
) {

56  
NGX_ERROR
;

59 
aio
->
fûe
 = file;

60 
aio
->
fd
 = 
fûe
->fd;

61 
aio
->
evít
.
d©a
 =áio;

62 
aio
->
evít
.
ªady
 = 1;

63 
aio
->
evít
.
log
 = 
fûe
->log;

64 #i‡(
NGX_HAVE_AIO_SENDFILE
)

65 
aio
->
œ°_off£t
 = -1;

67 
fûe
->
aio
 =áio;

70 
ev
 = &
aio
->
evít
;

72 i‡(!
ev
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

74 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

75  
NGX_AGAIN
;

78 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

80 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

82 i‡(
ev
->
com∂ëe
) {

83 
ev
->
com∂ëe
 = 0;

84 
	`ngx_£t_î∫o
(
aio
->
îr
);

86 i‡(
aio
->
îr
 == 0) {

87  
aio
->
nbyãs
;

90 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

91 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

93  
NGX_ERROR
;

96 
	`ngx_memzîo
(&
aio
->
aiocb
, (aiocb));

98 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

99 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

100 
aio
->
aiocb
.
aio_buf
 = 
buf
;

101 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

102 #i‡(
NGX_HAVE_KQUEUE
)

103 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

104 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

105 
aio
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = 
ev
;

107 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

109 
n
 = 
	`aio_ªad
(&
aio
->
aiocb
);

111 i‡(
n
 == -1) {

112 
n
 = 
ngx_î∫o
;

114 i‡(
n
 =
NGX_EAGAIN
) {

115  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

118 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
n
,

119 "aio_ªad(\"%V\"ËÁûed", &
fûe
->
«me
);

121 i‡(
n
 =
NGX_ENOSYS
) {

122 
ngx_fûe_aio
 = 0;

123  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

126  
NGX_ERROR
;

129 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

130 "aio_ªad: fd:%d %d", 
fûe
->
fd
, 
n
);

132 
ev
->
a˘ive
 = 1;

133 
ev
->
ªady
 = 0;

134 
ev
->
com∂ëe
 = 0;

136  
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
);

137 
	}
}

140 
ssize_t


141 
	$ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
, 
ngx_evít_t
 *
ev
)

143 
n
;

144 
ngx_îr_t
 
îr
;

146 
n
 = 
	`aio_îr‹
(&
aio
->
aiocb
);

148 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

149 "aio_îr‹: fd:%d %d", 
fûe
->
fd
, 
n
);

151 i‡(
n
 == -1) {

152 
îr
 = 
ngx_î∫o
;

153 
aio
->
îr
 =Érr;

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
îr
,

156 "aio_îr‹(\"%V\"ËÁûed", &
fûe
->
«me
);

157  
NGX_ERROR
;

160 i‡(
n
 =
NGX_EINPROGRESS
) {

161 i‡(
ev
->
ªady
) {

162 
ev
->
ªady
 = 0;

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
n
,

165 &
fûe
->
«me
);

168  
NGX_AGAIN
;

171 
n
 = 
	`aio_ªtu∫
(&
aio
->
aiocb
);

173 i‡(
n
 == -1) {

174 
îr
 = 
ngx_î∫o
;

175 
aio
->
îr
 =Érr;

176 
ev
->
ªady
 = 1;

178 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

179 "aio_ªtu∫(\"%V\"ËÁûed", &
fûe
->
«me
);

180  
NGX_ERROR
;

183 
aio
->
îr
 = 0;

184 
aio
->
nbyãs
 = 
n
;

185 
ev
->
ªady
 = 1;

186 
ev
->
a˘ive
 = 0;

188 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

189 "aio_ªtu∫: fd:%d %d", 
fûe
->
fd
, 
n
);

191  
n
;

192 
	}
}

196 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

198 
ngx_evít_aio_t
 *
aio
;

200 
aio
 = 
ev
->
d©a
;

202 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

203 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

205 i‡(
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
Ë!
NGX_AGAIN
) {

206 
aio
->
	`h™dÀr
(
ev
);

208 
	}
}

	@src/os/unix/ngx_files.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_FILE_AIO
)

14 
ngx_uöt_t
 
	gngx_fûe_aio
 = 1;

19 
ssize_t


20 
	$ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

22 
ssize_t
 
n
;

24 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

25 "ªad: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

27 #i‡(
NGX_HAVE_PREAD
)

29 
n
 = 
	`¥ód
(
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

31 i‡(
n
 == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

33 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

34  
NGX_ERROR
;

39 i‡(
fûe
->
sys_off£t
 !
off£t
) {

40 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

41 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

42 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

43  
NGX_ERROR
;

46 
fûe
->
sys_off£t
 = 
off£t
;

49 
n
 = 
	`ªad
(
fûe
->
fd
, 
buf
, 
size
);

51 i‡(
n
 == -1) {

52 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

53 "ªad(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

54  
NGX_ERROR
;

57 
fûe
->
sys_off£t
 +
n
;

61 
fûe
->
off£t
 +
n
;

63  
n
;

64 
	}
}

67 
ssize_t


68 
	$ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

70 
ssize_t
 
n
, 
wrôãn
;

72 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

73 "wrôe: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

75 
wrôãn
 = 0;

77 #i‡(
NGX_HAVE_PWRITE
)

80 
n
 = 
	`pwrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
, 
off£t
);

82 i‡(
n
 == -1) {

83 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

84 "pwrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

85  
NGX_ERROR
;

88 
fûe
->
off£t
 +
n
;

89 
wrôãn
 +
n
;

91 i‡((
size_t
Ë
n
 =
size
) {

92  
wrôãn
;

95 
off£t
 +
n
;

96 
size
 -
n
;

101 i‡(
fûe
->
sys_off£t
 !
off£t
) {

102 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

103 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

104 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

105  
NGX_ERROR
;

108 
fûe
->
sys_off£t
 = 
off£t
;

112 
n
 = 
	`wrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
);

114 i‡(
n
 == -1) {

115 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

116 "wrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

117  
NGX_ERROR
;

120 
fûe
->
off£t
 +
n
;

121 
wrôãn
 +
n
;

123 i‡((
size_t
Ë
n
 =
size
) {

124  
wrôãn
;

127 
size
 -
n
;

130 
	}
}

133 
ngx_fd_t


134 
	$ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
ac˚ss
)

136 
ngx_fd_t
 
fd
;

138 
fd
 = 
	`›í
((c⁄° *Ë
«me
, 
O_CREAT
|
O_EXCL
|
O_RDWR
,

139 
ac˚ss
 ?áccess : 0600);

141 i‡(
fd
 !-1 && !
≥rsi°ít
) {

142 (Ë
	`u∆ök
((c⁄° *Ë
«me
);

145  
fd
;

146 
	}
}

149 
	#NGX_IOVS
 8

	)

151 
ssize_t


152 
	$ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
, 
off_t
 
off£t
,

153 
ngx_poﬁ_t
 *
poﬁ
)

155 
u_ch¨
 *
¥ev
;

156 
size_t
 
size
;

157 
ssize_t
 
tŸÆ
, 
n
;

158 
ngx_¨øy_t
 
vec
;

159 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

163 i‡(
˛
->
√xt
 =
NULL
) {

164  
	`ngx_wrôe_fûe
(
fûe
, 
˛
->
buf
->
pos
,

165 (
size_t
Ë(
˛
->
buf
->
œ°
 - cl->buf->
pos
),

166 
off£t
);

169 
tŸÆ
 = 0;

171 
vec
.
ñts
 = 
iovs
;

172 
vec
.
size
 = (
iovec
);

173 
vec
.
«Œoc
 = 
NGX_IOVS
;

174 
vec
.
poﬁ
 =Öool;

177 
¥ev
 = 
NULL
;

178 
iov
 = 
NULL
;

179 
size
 = 0;

181 
vec
.
√…s
 = 0;

185 
˛
 && 
vec
.
√…s
 < 
IOV_MAX
) {

186 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

187 
iov
->
iov_Àn
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

190 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

191 i‡(
iov
 =
NULL
) {

192  
NGX_ERROR
;

195 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

196 
iov
->
iov_Àn
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

199 
size
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

200 
¥ev
 = 
˛
->
buf
->
œ°
;

201 
˛
 = cl->
√xt
;

206 i‡(
vec
.
√…s
 == 1) {

207 
iov
 = 
vec
.
ñts
;

209 
n
 = 
	`ngx_wrôe_fûe
(
fûe
, (
u_ch¨
 *Ë
iov
[0].
iov_ba£
,

210 
iov
[0].
iov_Àn
, 
off£t
);

212 i‡(
n
 =
NGX_ERROR
) {

213  
n
;

216  
tŸÆ
 + 
n
;

219 i‡(
fûe
->
sys_off£t
 !
off£t
) {

220 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

221 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

222 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

223  
NGX_ERROR
;

226 
fûe
->
sys_off£t
 = 
off£t
;

229 
n
 = 
	`wrôev
(
fûe
->
fd
, 
vec
.
ñts
, vec.
√…s
);

231 i‡(
n
 == -1) {

232 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

233 "wrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

234  
NGX_ERROR
;

237 i‡((
size_t
Ë
n
 !
size
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 0,

240 
fûe
->
«me
.
d©a
, 
n
, 
size
);

241  
NGX_ERROR
;

244 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

245 "wrôev: %d, %z", 
fûe
->
fd
, 
n
);

247 
fûe
->
sys_off£t
 +
n
;

248 
fûe
->
off£t
 +
n
;

249 
off£t
 +
n
;

250 
tŸÆ
 +
n
;

252 } 
˛
);

254  
tŸÆ
;

255 
	}
}

258 
ngx_öt_t


259 
	$ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
)

261 
timevÆ
 
tv
[2];

263 
tv
[0].
tv_£c
 = 
	`ngx_time
();

264 
tv
[0].
tv_u£c
 = 0;

265 
tv
[1].
tv_£c
 = 
s
;

266 
tv
[1].
tv_u£c
 = 0;

268 i‡(
	`utimes
((*Ë
«me
, 
tv
) != -1) {

269  
NGX_OK
;

272  
NGX_ERROR
;

273 
	}
}

276 
ngx_öt_t


277 
	$ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

279 
fm
->
fd
 = 
	`ngx_›í_fûe
(fm->
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

280 
NGX_FILE_DEFAULT_ACCESS
);

281 i‡(
fm
->
fd
 =
NGX_INVALID_FILE
) {

282 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

283 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

284  
NGX_ERROR
;

287 i‡(
	`·runˇã
(
fm
->
fd
, fm->
size
) == -1) {

288 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

289 "·runˇã(Ë\"%s\" faûed", 
fm
->
«me
);

290 
Áûed
;

293 
fm
->
addr
 = 
	`mm≠
(
NULL
, fm->
size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

294 
fm
->
fd
, 0);

295 i‡(
fm
->
addr
 !
MAP_FAILED
) {

296  
NGX_OK
;

299 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

300 "mm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

302 
Áûed
:

304 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

306 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

309  
NGX_ERROR
;

310 
	}
}

314 
	$ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

316 i‡(
	`munm≠
(
fm
->
addr
, fm->
size
) == -1) {

317 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

318 "munm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

321 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

322 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

323 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

325 
	}
}

328 
ngx_öt_t


329 
	$ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
)

331 
dú
->dú = 
	`›ídú
((c⁄° *Ë
«me
->
d©a
);

333 i‡(
dú
->dú =
NULL
) {

334  
NGX_ERROR
;

337 
dú
->
vÆid_öfo
 = 0;

339  
NGX_OK
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_ªad_dú
(
ngx_dú_t
 *
dú
)

346 
dú
->
de
 = 
	`ªaddú
(dir->dir);

348 i‡(
dú
->
de
) {

349 #i‡(
NGX_HAVE_D_TYPE
)

350 
dú
->
ty≥
 = dú->
de
->
d_ty≥
;

352 
dú
->
ty≥
 = 0;

354  
NGX_OK
;

357  
NGX_ERROR
;

358 
	}
}

361 
ngx_öt_t


362 
	$ngx_›í_glob
(
ngx_glob_t
 *
gl
)

364 
n
;

366 
n
 = 
	`glob
((*Ë
gl
->
∑âîn
, 0, 
NULL
, &gl->
pglob
);

368 i‡(
n
 == 0) {

369  
NGX_OK
;

372 #ifde‡
GLOB_NOMATCH


374 i‡(
n
 =
GLOB_NOMATCH
 && 
gl
->
ã°
) {

375  
NGX_OK
;

380  
NGX_ERROR
;

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
)

387 
size_t
 
cou¡
;

389 #ifde‡
GLOB_NOMATCH


390 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_∑thc
;

392 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_m©chc
;

395 i‡(
gl
->
n
 < 
cou¡
) {

397 
«me
->
Àn
 = (
size_t
Ë
	`ngx_°æí
(
gl
->
pglob
.
gl_∑thv
[gl->
n
]);

398 
«me
->
d©a
 = (
u_ch¨
 *Ë
gl
->
pglob
.
gl_∑thv
[gl->
n
];

399 
gl
->
n
++;

401  
NGX_OK
;

404  
NGX_DONE
;

405 
	}
}

409 
	$ngx_˛o£_glob
(
ngx_glob_t
 *
gl
)

411 
	`glob‰ì
(&
gl
->
pglob
);

412 
	}
}

415 
ngx_îr_t


416 
	$ngx_åylock_fd
(
ngx_fd_t
 
fd
)

418 
Êock
 
Ê
;

420 
	`ngx_memzîo
(&
Ê
, (
Êock
));

421 
Ê
.
l_ty≥
 = 
F_WRLCK
;

422 
Ê
.
l_whí˚
 = 
SEEK_SET
;

424 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

425  
ngx_î∫o
;

429 
	}
}

432 
ngx_îr_t


433 
	$ngx_lock_fd
(
ngx_fd_t
 
fd
)

435 
Êock
 
Ê
;

437 
	`ngx_memzîo
(&
Ê
, (
Êock
));

438 
Ê
.
l_ty≥
 = 
F_WRLCK
;

439 
Ê
.
l_whí˚
 = 
SEEK_SET
;

441 i‡(
	`f˙é
(
fd
, 
F_SETLKW
, &
Ê
) == -1) {

442  
ngx_î∫o
;

446 
	}
}

449 
ngx_îr_t


450 
	$ngx_u∆ock_fd
(
ngx_fd_t
 
fd
)

452 
Êock
 
Ê
;

454 
	`ngx_memzîo
(&
Ê
, (
Êock
));

455 
Ê
.
l_ty≥
 = 
F_UNLCK
;

456 
Ê
.
l_whí˚
 = 
SEEK_SET
;

458 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

459  
ngx_î∫o
;

463 
	}
}

466 #i‡(
NGX_HAVE_POSIX_FADVISE
Ë&& !(
NGX_HAVE_F_READAHEAD
)

468 
ngx_öt_t


469 
	$ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
)

471 
îr
;

473 
îr
 = 
	`posix_Ádvi£
(
fd
, 0, 0, 
POSIX_FADV_SEQUENTIAL
);

475 i‡(
îr
 == 0) {

479 
	`ngx_£t_î∫o
(
îr
);

480  
NGX_FILE_ERROR
;

481 
	}
}

486 #i‡(
NGX_HAVE_O_DIRECT
)

488 
ngx_öt_t


489 
	$ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
)

491 
Êags
;

493 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

495 i‡(
Êags
 == -1) {

496  
NGX_FILE_ERROR
;

499  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_DIRECT
);

500 
	}
}

503 
ngx_öt_t


504 
	$ngx_dúe˘io_off
(
ngx_fd_t
 
fd
)

506 
Êags
;

508 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

510 i‡(
Êags
 == -1) {

511  
NGX_FILE_ERROR
;

514  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_DIRECT
);

515 
	}
}

520 #i‡(
NGX_HAVE_STATFS
)

522 
size_t


523 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

525 
°©fs
 
fs
;

527 i‡(
	`°©fs
((*Ë
«me
, &
fs
) == -1) {

531 i‡((
fs
.
f_bsize
 % 512) != 0) {

535  (
size_t
Ë
fs
.
f_bsize
;

536 
	}
}

538 #ñi‡(
NGX_HAVE_STATVFS
)

540 
size_t


541 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

543 
°©vfs
 
fs
;

545 i‡(
	`°©vfs
((*Ë
«me
, &
fs
) == -1) {

549 i‡((
fs
.
f_‰size
 % 512) != 0) {

553  (
size_t
Ë
fs
.
f_‰size
;

554 
	}
}

558 
size_t


559 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

562 
	}
}

	@src/os/unix/ngx_files.h

8 #i‚de‡
_NGX_FILES_H_INCLUDED_


9 
	#_NGX_FILES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_fd_t
;

17 
°©
 
	tngx_fûe_öfo_t
;

18 
öo_t
 
	tngx_fûe_uniq_t
;

22 
u_ch¨
 *
	m«me
;

23 
size_t
 
	msize
;

24 *
	maddr
;

25 
ngx_fd_t
 
	mfd
;

26 
ngx_log_t
 *
	mlog
;

27 } 
	tngx_fûe_m≠pög_t
;

31 
DIR
 *
	mdú
;

32 
dúít
 *
	mde
;

33 
°©
 
	möfo
;

35 
	mty≥
:8;

36 
	mvÆid_öfo
:1;

37 } 
	tngx_dú_t
;

41 
size_t
 
	mn
;

42 
glob_t
 
	mpglob
;

43 
u_ch¨
 *
	m∑âîn
;

44 
ngx_log_t
 *
	mlog
;

45 
ngx_uöt_t
 
	mã°
;

46 } 
	tngx_glob_t
;

49 
	#NGX_INVALID_FILE
 -1

	)

50 
	#NGX_FILE_ERROR
 -1

	)

54 #ifde‡
__CYGWIN__


56 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

58 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

59 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
|
O_BINARY
, 
ac˚ss
)

	)

63 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

64 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

68 
	#ngx_›í_fûe_n
 "›í()"

	)

70 
	#NGX_FILE_RDONLY
 
O_RDONLY


	)

71 
	#NGX_FILE_WRONLY
 
O_WRONLY


	)

72 
	#NGX_FILE_RDWR
 
O_RDWR


	)

73 
	#NGX_FILE_CREATE_OR_OPEN
 
O_CREAT


	)

74 
	#NGX_FILE_OPEN
 0

	)

75 
	#NGX_FILE_TRUNCATE
 
O_CREAT
|
O_TRUNC


	)

76 
	#NGX_FILE_APPEND
 
O_WRONLY
|
O_APPEND


	)

77 
	#NGX_FILE_NONBLOCK
 
O_NONBLOCK


	)

79 #i‡(
NGX_HAVE_OPENAT
)

80 
	#NGX_FILE_NOFOLLOW
 
O_NOFOLLOW


	)

82 #i‡
deföed
(
O_DIRECTORY
)

83 
	#NGX_FILE_DIRECTORY
 
O_DIRECTORY


	)

85 
	#NGX_FILE_DIRECTORY
 0

	)

88 #i‡
deföed
(
O_SEARCH
)

89 
	#NGX_FILE_SEARCH
 
O_SEARCH
|
NGX_FILE_DIRECTORY


	)

91 #ñi‡
deföed
(
O_EXEC
)

92 
	#NGX_FILE_SEARCH
 
O_EXEC
|
NGX_FILE_DIRECTORY


	)

95 
	#NGX_FILE_SEARCH
 
O_RDONLY
|
NGX_FILE_DIRECTORY


	)

100 
	#NGX_FILE_DEFAULT_ACCESS
 0644

	)

101 
	#NGX_FILE_OWNER_ACCESS
 0600

	)

104 
	#ngx_˛o£_fûe
 
˛o£


	)

105 
	#ngx_˛o£_fûe_n
 "˛o£()"

	)

108 
	#ngx_dñëe_fûe
(
«me
Ë
	`u∆ök
((c⁄° *Ë«me)

	)

109 
	#ngx_dñëe_fûe_n
 "u∆ök()"

	)

112 
ngx_fd_t
 
ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,

113 
ngx_uöt_t
 
ac˚ss
);

114 
	#ngx_›í_ãmpfûe_n
 "›í()"

	)

117 
ssize_t
 
ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
);

118 #i‡(
NGX_HAVE_PREAD
)

119 
	#ngx_ªad_fûe_n
 "¥ód()"

	)

121 
	#ngx_ªad_fûe_n
 "ªad()"

	)

124 
ssize_t
 
ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

125 
off_t
 
off£t
);

127 
ssize_t
 
ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˚
,

128 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

131 
	#ngx_ªad_fd
 
ªad


	)

132 
	#ngx_ªad_fd_n
 "ªad()"

	)

139 
ngx_ölöe
 
ssize_t


140 
	$ngx_wrôe_fd
(
ngx_fd_t
 
fd
, *
buf
, 
size_t
 
n
)

142  
	`wrôe
(
fd
, 
buf
, 
n
);

143 
	}
}

145 
	#ngx_wrôe_fd_n
 "wrôe()"

	)

148 
	#ngx_wrôe_c⁄sﬁe
 
ngx_wrôe_fd


	)

151 
	#ngx_löe„ed
(
p
Ë*p++ = 
LF
;

	)

152 
	#NGX_LINEFEED_SIZE
 1

	)

153 
	#NGX_LINEFEED
 "\x0a"

	)

156 
	#ngx_ª«me_fûe
(
o
, 
n
Ë
	`ª«me
((c⁄° *Ëo, (c⁄° *Ën)

	)

157 
	#ngx_ª«me_fûe_n
 "ª«me()"

	)

160 
	#ngx_ch™ge_fûe_ac˚ss
(
n
, 
a
Ë
	`chmod
((c⁄° *Ën,á)

	)

161 
	#ngx_ch™ge_fûe_ac˚ss_n
 "chmod()"

	)

164 
ngx_öt_t
 
ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
);

165 
	#ngx_£t_fûe_time_n
 "utimes()"

	)

168 
	#ngx_fûe_öfo
(
fûe
, 
sb
Ë
	`°©
((c⁄° *Ëfûe, sb)

	)

169 
	#ngx_fûe_öfo_n
 "°©()"

	)

171 
	#ngx_fd_öfo
(
fd
, 
sb
Ë
	`f°©
(fd, sb)

	)

172 
	#ngx_fd_öfo_n
 "f°©()"

	)

174 
	#ngx_lök_öfo
(
fûe
, 
sb
Ë
	`l°©
((c⁄° *Ëfûe, sb)

	)

175 
	#ngx_lök_öfo_n
 "l°©()"

	)

177 
	#ngx_is_dú
(
sb
Ë(
	`S_ISDIR
((sb)->
°_mode
))

	)

178 
	#ngx_is_fûe
(
sb
Ë(
	`S_ISREG
((sb)->
°_mode
))

	)

179 
	#ngx_is_lök
(
sb
Ë(
	`S_ISLNK
((sb)->
°_mode
))

	)

180 
	#ngx_is_exec
(
sb
Ë(((sb)->
°_mode
 & 
S_IXUSR
Ë=S_IXUSR)

	)

181 
	#ngx_fûe_ac˚ss
(
sb
Ë((sb)->
°_mode
 & 0777)

	)

182 
	#ngx_fûe_size
(
sb
Ë(sb)->
°_size


	)

183 
	#ngx_fûe_fs_size
(
sb
Ë
	`ngx_max
((sb)->
°_size
, (sb)->
°_blocks
 * 512)

	)

184 
	#ngx_fûe_mtime
(
sb
Ë(sb)->
°_mtime


	)

185 
	#ngx_fûe_uniq
(
sb
Ë(sb)->
°_öo


	)

188 
ngx_öt_t
 
ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

189 
ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

192 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

194 
	#ngx_fûíame_cmp
(
s1
, 
s2
, 
n
Ë
	`°∫ˇ£cmp
((*Ës1, (*Ës2,Ç)

	)

198 
	#ngx_fûíame_cmp
 
ngx_memcmp


	)

203 
	#ngx_ªÆ∑th
(
p
, 
r
Ë(
u_ch¨
 *Ë
	`ªÆ∑th
((*Ëp, (*Ër)

	)

204 
	#ngx_ªÆ∑th_n
 "ªÆ∑th()"

	)

205 
	#ngx_gëcwd
(
buf
, 
size
Ë(
	`gëcwd
((*Ëbuf, sizeË!
NULL
)

	)

206 
	#ngx_gëcwd_n
 "gëcwd()"

	)

207 
	#ngx_∑th_£∑øt‹
(
c
Ë((cË='/')

	)

210 #i‡
deföed
(
PATH_MAX
)

212 
	#NGX_HAVE_MAX_PATH
 1

	)

213 
	#NGX_MAX_PATH
 
PATH_MAX


	)

217 
	#NGX_MAX_PATH
 4096

	)

222 
	#NGX_DIR_MASK_LEN
 0

	)

225 
ngx_öt_t
 
ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
);

226 
	#ngx_›í_dú_n
 "›ídú()"

	)

229 
	#ngx_˛o£_dú
(
d
Ë
	`˛o£dú
((d)->
dú
)

	)

230 
	#ngx_˛o£_dú_n
 "˛o£dú()"

	)

233 
ngx_öt_t
 
ngx_ªad_dú
(
ngx_dú_t
 *
dú
);

234 
	#ngx_ªad_dú_n
 "ªaddú()"

	)

237 
	#ngx_¸óã_dú
(
«me
, 
ac˚ss
Ë
	`mkdú
((c⁄° *Ë«me,ác˚ss)

	)

238 
	#ngx_¸óã_dú_n
 "mkdú()"

	)

241 
	#ngx_dñëe_dú
(
«me
Ë
	`rmdú
((c⁄° *Ë«me)

	)

242 
	#ngx_dñëe_dú_n
 "rmdú()"

	)

245 
	#ngx_dú_ac˚ss
(
a
Ë◊ | (®& 0444Ë>> 2)

	)

248 
	#ngx_de_«me
(
dú
Ë((
u_ch¨
 *Ë(dú)->
de
->
d_«me
)

	)

249 #i‡(
NGX_HAVE_D_NAMLEN
)

250 
	#ngx_de_«mñí
(
dú
Ë(dú)->
de
->
d_«mÀn


	)

252 
	#ngx_de_«mñí
(
dú
Ë
	`ngx_°æí
((dú)->
de
->
d_«me
)

	)

255 
ngx_ölöe
 
ngx_öt_t


256 
	$ngx_de_öfo
(
u_ch¨
 *
«me
, 
ngx_dú_t
 *
dú
)

258 
dú
->
ty≥
 = 0;

259  
	`°©
((c⁄° *Ë
«me
, &
dú
->
öfo
);

260 
	}
}

262 
	#ngx_de_öfo_n
 "°©()"

	)

263 
	#ngx_de_lök_öfo
(
«me
, 
dú
Ë
	`l°©
((c⁄° *Ë«me, &(dú)->
öfo
)

	)

264 
	#ngx_de_lök_öfo_n
 "l°©()"

	)

266 #i‡(
NGX_HAVE_D_TYPE
)

273 
	#ngx_de_is_dú
(
dú
) \

274 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_DIR
Ë: (
	`S_ISDIR
((dú)->
öfo
.
°_mode
)))

	)

275 
	#ngx_de_is_fûe
(
dú
) \

276 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_REG
Ë: (
	`S_ISREG
((dú)->
öfo
.
°_mode
)))

	)

277 
	#ngx_de_is_lök
(
dú
) \

278 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_LNK
Ë: (
	`S_ISLNK
((dú)->
öfo
.
°_mode
)))

	)

282 
	#ngx_de_is_dú
(
dú
Ë(
	`S_ISDIR
((dú)->
öfo
.
°_mode
))

	)

283 
	#ngx_de_is_fûe
(
dú
Ë(
	`S_ISREG
((dú)->
öfo
.
°_mode
))

	)

284 
	#ngx_de_is_lök
(
dú
Ë(
	`S_ISLNK
((dú)->
öfo
.
°_mode
))

	)

288 
	#ngx_de_ac˚ss
(
dú
Ë(((dú)->
öfo
.
°_mode
Ë& 0777)

	)

289 
	#ngx_de_size
(
dú
Ë(dú)->
öfo
.
°_size


	)

290 
	#ngx_de_fs_size
(
dú
) \

291 
	`ngx_max
((
dú
)->
öfo
.
°_size
, (dú)->öfo.
°_blocks
 * 512)

	)

292 
	#ngx_de_mtime
(
dú
Ë(dú)->
öfo
.
°_mtime


	)

295 
ngx_öt_t
 
ngx_›í_glob
(
ngx_glob_t
 *
gl
);

296 
	#ngx_›í_glob_n
 "glob()"

	)

297 
ngx_öt_t
 
ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
);

298 
ngx_˛o£_glob
(
ngx_glob_t
 *
gl
);

301 
ngx_îr_t
 
ngx_åylock_fd
(
ngx_fd_t
 
fd
);

302 
ngx_îr_t
 
ngx_lock_fd
(
ngx_fd_t
 
fd
);

303 
ngx_îr_t
 
ngx_u∆ock_fd
(
ngx_fd_t
 
fd
);

305 
	#ngx_åylock_fd_n
 "f˙é(F_SETLK, F_WRLCK)"

	)

306 
	#ngx_lock_fd_n
 "f˙é(F_SETLKW, F_WRLCK)"

	)

307 
	#ngx_u∆ock_fd_n
 "f˙é(F_SETLK, F_UNLCK)"

	)

310 #i‡(
NGX_HAVE_F_READAHEAD
)

312 
	#NGX_HAVE_READ_AHEAD
 1

	)

314 
	#ngx_ªad_ahód
(
fd
, 
n
Ë
	`f˙é
(fd, 
F_READAHEAD
, (Ën)

	)

315 
	#ngx_ªad_ahód_n
 "f˙é(fd, F_READAHEAD)"

	)

317 #ñi‡(
NGX_HAVE_POSIX_FADVISE
)

319 
	#NGX_HAVE_READ_AHEAD
 1

	)

321 
ngx_öt_t
 
ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
);

322 
	#ngx_ªad_ahód_n
 "posix_Ádvi£(POSIX_FADV_SEQUENTIAL)"

	)

326 
	#ngx_ªad_ahód
(
fd
, 
n
Ë0

	)

327 
	#ngx_ªad_ahód_n
 "ngx_ªad_ahód_n"

	)

332 #i‡(
NGX_HAVE_O_DIRECT
)

334 
ngx_öt_t
 
ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
);

335 
	#ngx_dúe˘io_⁄_n
 "f˙é(O_DIRECT)"

	)

337 
ngx_öt_t
 
ngx_dúe˘io_off
(
ngx_fd_t
 
fd
);

338 
	#ngx_dúe˘io_off_n
 "f˙é(!O_DIRECT)"

	)

340 #ñi‡(
NGX_HAVE_F_NOCACHE
)

342 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`f˙é
(fd, 
F_NOCACHE
, 1)

	)

343 
	#ngx_dúe˘io_⁄_n
 "f˙é(F_NOCACHE, 1)"

	)

345 #ñi‡(
NGX_HAVE_DIRECTIO
)

347 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`dúe˘io
(fd, 
DIRECTIO_ON
)

	)

348 
	#ngx_dúe˘io_⁄_n
 "dúe˘io(DIRECTIO_ON)"

	)

352 
	#ngx_dúe˘io_⁄
(
fd
Ë0

	)

353 
	#ngx_dúe˘io_⁄_n
 "ngx_dúe˘io_⁄_n"

	)

357 
size_t
 
ngx_fs_bsize
(
u_ch¨
 *
«me
);

360 #i‡(
NGX_HAVE_OPENAT
)

362 
	#ngx_›í©_fûe
(
fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

363 
	`›í©
(
fd
, (c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

365 
	#ngx_›í©_fûe_n
 "›í©()"

	)

367 
	#ngx_fûe_©_öfo
(
fd
, 
«me
, 
sb
, 
Êag
) \

368 
	`f°©©
(
fd
, (c⁄° *Ë
«me
, 
sb
, 
Êag
)

	)

370 
	#ngx_fûe_©_öfo_n
 "f°©©()"

	)

372 
	#NGX_AT_FDCWD
 (
ngx_fd_t
Ë
AT_FDCWD


	)

377 
	#ngx_°dîr
 
STDERR_FILENO


	)

378 
	#ngx_£t_°dîr
(
fd
Ë
	`dup2
(fd, 
STDERR_FILENO
)

	)

379 
	#ngx_£t_°dîr_n
 "dup2(STDERR_FILENO)"

	)

382 #i‡(
NGX_HAVE_FILE_AIO
)

384 
ssize_t
 
ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

385 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

387 
ngx_uöt_t
 
ngx_fûe_aio
;

	@src/os/unix/ngx_freebsd.h

8 #i‚de‡
_NGX_FREEBSD_H_INCLUDED_


9 
	#_NGX_FREEBSD_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_‰ìbsd_kîn_o§ñd©e
;

17 
ngx_‰ìbsd_hw_n˝u
;

18 
u_l⁄g
 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
;

21 
ngx_uöt_t
 
ngx_‰ìbsd_u£_t˝_n›ush
;

22 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_freebsd_config.h

8 #i‚de‡
_NGX_FREEBSD_CONFIG_H_INCLUDED_


9 
	#_NGX_FREEBSD_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

16 
	~<°ddef.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<sig«l.h
>

22 
	~<pwd.h
>

23 
	~<gΩ.h
>

24 
	~<dúít.h
>

25 
	~<glob.h
>

26 
	~<time.h
>

27 
	~<sys/∑øm.h
>

28 
	~<sys/mou¡.h
>

30 
	~<sys/fûio.h
>

31 
	~<sys/uio.h
>

32 
	~<sys/°©.h
>

33 
	~<f˙é.h
>

35 
	~<sys/waô.h
>

36 
	~<sys/mm™.h
>

37 
	~<sys/ªsour˚.h
>

38 
	~<sched.h
>

40 
	~<sys/sockë.h
>

41 
	~<√töë/ö.h
>

42 
	~<√töë/t˝.h
>

43 
	~<¨∑/öë.h
>

44 
	~<√tdb.h
>

45 
	~<sys/un.h
>

47 
	~<libutû.h
>

48 
	~<o§ñd©e.h
>

49 
	~<sys/sys˘l.h
>

52 #i‡
__FªeBSD_vîsi⁄
 < 400017

58 #unde‡
CMSG_SPACE


59 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

61 #unde‡
CMSG_LEN


62 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

64 #unde‡
CMSG_DATA


65 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

70 
	~<ngx_auto_c⁄fig.h
>

73 #i‡(
NGX_HAVE_POSIX_SEM
)

74 
	~<£m≠h‹e.h
>

78 #i‡(
NGX_HAVE_POLL
)

79 
	~<pﬁl.h
>

83 #i‡(
NGX_HAVE_KQUEUE
)

84 
	~<sys/evít.h
>

88 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_HAVE_AIO
)

89 
	~<aio.h
>

90 
aiocb
 
	tngx_aiocb_t
;

94 
	#NGX_LISTEN_BACKLOG
 -1

	)

97 #i‡(
__FªeBSD_vîsi⁄
 < 430000 || __FreeBSD_version < 500012)

99 
pid_t
 
rf‹k_thªad
(
Êags
, *
°ack
, (*
func
)(*
¨g
), *arg);

103 #i‚de‡
IOV_MAX


104 
	#IOV_MAX
 1024

	)

108 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


109 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

113 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

114 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

117 **
ívú⁄
;

118 *
mÆloc_›ti⁄s
;

	@src/os/unix/ngx_freebsd_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	gngx_‰ìbsd_kîn_o°y≥
[16];

14 
	gngx_‰ìbsd_kîn_o§ñó£
[128];

15 
	gngx_‰ìbsd_kîn_o§ñd©e
;

16 
	gngx_‰ìbsd_hw_n˝u
;

17 
	gngx_‰ìbsd_kîn_ùc_somaxc⁄n
;

18 
u_l⁄g
 
	gngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

21 
	gngx_‰ìbsd_machdï_h…_logiˇl_˝us
;

24 
ngx_uöt_t
 
	gngx_‰ìbsd_£ndfûe_nbyãs_bug
;

25 
ngx_uöt_t
 
	gngx_‰ìbsd_u£_t˝_n›ush
;

27 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

30 
ngx_os_io_t
 
	gngx_‰ìbsd_io
 = {

31 
ngx_unix_ªcv
,

32 
ngx_ªadv_chaö
,

33 
ngx_udp_unix_ªcv
,

34 
ngx_unix_£nd
,

35 #i‡(
NGX_HAVE_SENDFILE
)

36 
ngx_‰ìbsd_£ndfûe_chaö
,

37 
NGX_IO_SENDFILE


39 
ngx_wrôev_chaö
,

46 *
	m«me
;

47 *
	mvÆue
;

48 
size_t
 
	msize
;

49 
ngx_uöt_t
 
	mexi°s
;

50 } 
	tsys˘l_t
;

53 
sys˘l_t
 
	gsys˘ls
[] = {

55 &
ngx_‰ìbsd_hw_n˝u
,

56 (
ngx_‰ìbsd_hw_n˝u
), 0 },

59 &
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
,

60 (
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
), 0 },

63 &
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
,

64 (
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
), 0 },

67 &
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
,

68 (
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
), 0 },

70 { 
NULL
, NULL, 0, 0 }

75 
	$ngx_debug_öô
()

77 #i‡(
NGX_DEBUG_MALLOC
)

79 #i‡
__FªeBSD_vîsi⁄
 >= 500014 && __FreeBSD_version < 1000011

80 
_mÆloc_›ti⁄s
 = "J";

81 #ñi‡
__FªeBSD_vîsi⁄
 < 500014

82 
mÆloc_›ti⁄s
 = "J";

85 
ngx_debug_mÆloc
 = 1;

88 *
mo
;

90 
mo
 = 
	`gëív
("MALLOC_OPTIONS");

92 i‡(
mo
 && 
	`ngx_°rchr
(mo, 'J')) {

93 
ngx_debug_mÆloc
 = 1;

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

102 
vîsi⁄
;

103 
size_t
 
size
;

104 
ngx_îr_t
 
îr
;

105 
ngx_uöt_t
 
i
;

107 
size
 = (
ngx_‰ìbsd_kîn_o°y≥
);

108 i‡(
	`sys˘lby«me
("kern.ostype",

109 
ngx_‰ìbsd_kîn_o°y≥
, &
size
, 
NULL
, 0) == -1) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

113 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

114  
NGX_ERROR
;

117 
ngx_‰ìbsd_kîn_o°y≥
[
size
 - 1] = '\0';

120 
size
 = (
ngx_‰ìbsd_kîn_o§ñó£
);

121 i‡(
	`sys˘lby«me
("kern.osrelease",

122 
ngx_‰ìbsd_kîn_o§ñó£
, &
size
, 
NULL
, 0) == -1) {

123 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

126 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

127  
NGX_ERROR
;

130 
ngx_‰ìbsd_kîn_o§ñó£
[
size
 - 1] = '\0';

134 
size
 = ();

135 i‡(
	`sys˘lby«me
("kern.osreldate",

136 &
ngx_‰ìbsd_kîn_o§ñd©e
, &
size
, 
NULL
, 0) == -1) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
vîsi⁄
 = 
ngx_‰ìbsd_kîn_o§ñd©e
;

145 #i‡(
NGX_HAVE_SENDFILE
)

163 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 460102) \

164 || 
__FªeBSD_vîsi⁄
 == 460002 || __FreeBSD_version >= 500039

168 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 0;

174 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 1;

181 i‡((
vîsi⁄
 < 500000 && version >= 440003) || version >= 500017) {

182 
ngx_‰ìbsd_u£_t˝_n›ush
 = 1;

186 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

187 
size
 = 
sys˘ls
[
i
].size;

189 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

192 
sys˘ls
[
i
].
exi°s
 = 1;

196 
îr
 = 
ngx_î∫o
;

198 i‡(
îr
 =
NGX_ENOENT
) {

202 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

203 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

204  
NGX_ERROR
;

207 i‡(
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
) {

208 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
 / 2;

211 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
;

214 i‡(
vîsi⁄
 < 600008 && 
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
 > 32767) {

215 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

217  
NGX_ERROR
;

220 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

222 
ngx_os_io
 = 
ngx_‰ìbsd_io
;

224  
NGX_OK
;

225 
	}
}

229 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

231 
u_l⁄g
 
vÆue
;

232 
ngx_uöt_t
 
i
;

234 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

235 
ngx_‰ìbsd_kîn_o°y≥
, 
ngx_‰ìbsd_kîn_o§ñó£
);

237 #ifde‡
__Døg⁄Fly_vîsi⁄


238 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

240 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__Døg⁄Fly_vîsi⁄
);

242 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

244 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__FªeBSD_vîsi⁄
);

247 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

248 i‡(
sys˘ls
[
i
].
exi°s
) {

249 i‡(
sys˘ls
[
i
].
size
 == ()) {

250 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

253 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

256 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

257 
sys˘ls
[
i
].
«me
, 
vÆue
);

260 
	}
}

	@src/os/unix/ngx_freebsd_rfork_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

35 *
	gngx_‰ìbsd_kîn_u§°ack
;

36 
size_t
 
	gngx_thªad_°ack_size
;

39 
size_t
 
	grz_size
;

40 
size_t
 
	gußbÀ_°ack_size
;

41 *
	gœ°_°ack
;

43 
ngx_uöt_t
 
	g¡hªads
;

44 
ngx_uöt_t
 
	gmax_thªads
;

46 
ngx_uöt_t
 
	gnkeys
;

47 
ngx_tid_t
 *
	gtids
;

48 **
	gngx_és
;

52 
	gî∫o0
;

53 *
	gî∫os
;

56 
	$__îr‹
()

58 
tid
;

60 
tid
 = 
	`ngx_gëtid
();

62  
tid
 ? &
î∫os
[tid - 1] : &
î∫o0
;

63 
	}
}

75 
__i°hªaded
;

78 
	$_•ölock
(
ngx_©omic_t
 *
lock
)

80 
ngx_öt_t
 
åõs
;

82 
åõs
 = 0;

86 i‡(*
lock
) {

87 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

91 
	`sched_yõld
();

92 
åõs
 = 0;

95 i‡(
	`ngx_©omic_cmp_£t
(
lock
, 0, 1)) {

100 
	}
}

111 #i‚de‡
_•öu∆ock


114 
	$_•öu∆ock
(
ngx_©omic_t
 *
lock
)

116 *
lock
 = 0;

117 
	}
}

122 
ngx_îr_t


123 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

124 *
¨g
, 
ngx_log_t
 *
log
)

126 
ngx_pid_t
 
id
;

127 
ngx_îr_t
 
îr
;

128 *
°ack
, *
°ack_t›
;

130 i‡(
¡hªads
 >
max_thªads
) {

131 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

132 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

133  
NGX_ERROR
;

136 
œ°_°ack
 -
ngx_thªad_°ack_size
;

138 
°ack
 = 
	`mm≠
(
œ°_°ack
, 
ußbÀ_°ack_size
, 
PROT_READ
|
PROT_WRITE
,

139 
MAP_STACK
, -1, 0);

141 i‡(
°ack
 =
MAP_FAILED
) {

142 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

144 
œ°_°ack
, 
ußbÀ_°ack_size
);

145  
NGX_ERROR
;

148 i‡(
°ack
 !
œ°_°ack
) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

150 "°ack %∞addªs†wa†ch™gedÅÿ%p", 
œ°_°ack
, 
°ack
);

151  
NGX_ERROR
;

154 
°ack_t›
 = 
°ack
 + 
ußbÀ_°ack_size
;

156 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

157 "thªad sèck: %p-%p", 
°ack
, 
°ack_t›
);

159 
	`ngx_£t_î∫o
(0);

161 
id
 = 
	`rf‹k_thªad
(
RFPROC
|
RFTHREAD
|
RFMEM
, 
°ack_t›
,

162 (
ngx_rf‹k_thªad_func_±
Ë
func
, 
¨g
);

164 
îr
 = 
ngx_î∫o
;

166 i‡(
id
 == -1) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "rfork() failed");

170 *
tid
 = 
id
;

171 
¡hªads
 = (
ngx_‰ìbsd_kîn_u§°ack
 - 
°ack_t›
)

172 / 
ngx_thªad_°ack_size
;

173 
tids
[
¡hªads
] = 
id
;

175 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "rf‹k(ÎdÅhªad: %P", 
id
);

178  
îr
;

179 
	}
}

182 
ngx_öt_t


183 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

185 *
ªd_z⁄e
, *
z⁄e
;

186 
size_t
 
Àn
;

187 
ngx_öt_t
 
i
;

188 
siga˘i⁄
 
ß
;

190 
max_thªads
 = 
n
 + 1;

192 
i
 = 0; i < 
n
; i++) {

193 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

194 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

195 
	`sigem±y£t
(&
ß
.
ß_mask
);

196 i‡(
	`siga˘i⁄
(
NGX_CV_SIGNAL
, &
ß
, 
NULL
) == -1) {

197 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

198 "siga˘i⁄(%d, SIG_IGNËÁûed", 
NGX_CV_SIGNAL
);

199  
NGX_ERROR
;

203 
Àn
 = (
ngx_‰ìbsd_kîn_u§°ack
);

204 i‡(
	`sys˘lby«me
("kîn.u§°ack", &
ngx_‰ìbsd_kîn_u§°ack
, &
Àn
,

205 
NULL
, 0) == -1)

207 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

209  
NGX_ERROR
;

213 
rz_size
 = 
ngx_∑gesize
;

214 
ªd_z⁄e
 = 
ngx_‰ìbsd_kîn_u§°ack
 - (
size
 + 
rz_size
);

216 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

218 
ngx_‰ìbsd_kîn_u§°ack
, 
ªd_z⁄e
);

220 
z⁄e
 = 
	`mm≠
(
ªd_z⁄e
, 
rz_size
, 
PROT_NONE
, 
MAP_ANON
, -1, 0);

221 i‡(
z⁄e
 =
MAP_FAILED
) {

222 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

224 
ªd_z⁄e
, 
rz_size
);

225  
NGX_ERROR
;

228 i‡(
z⁄e
 !
ªd_z⁄e
) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

230 "ªd z⁄ê%∞addªs†wa†ch™gedÅÿ%p", 
ªd_z⁄e
, 
z⁄e
);

231  
NGX_ERROR
;

236 
î∫os
 = 
	`ngx_ˇŒoc
(
n
 * (), 
cy˛e
->
log
);

237 i‡(
î∫os
 =
NULL
) {

238  
NGX_ERROR
;

243 
tids
 = 
	`ngx_ˇŒoc
((
n
 + 1Ë* (
ngx_tid_t
), 
cy˛e
->
log
);

244 i‡(
tids
 =
NULL
) {

245  
NGX_ERROR
;

248 
tids
[0] = 
ngx_pid
;

252 
ngx_és
 = 
	`ngx_ˇŒoc
(
NGX_THREAD_KEYS_MAX
 * (
n
 + 1) * (*),

253 
cy˛e
->
log
);

254 i‡(
ngx_és
 =
NULL
) {

255  
NGX_ERROR
;

258 
¡hªads
 = 1;

260 
œ°_°ack
 = 
z⁄e
 + 
rz_size
;

261 
ußbÀ_°ack_size
 = 
size
;

262 
ngx_thªad_°ack_size
 = 
size
 + 
rz_size
;

265 
__i°hªaded
 = 1;

267 
ngx_thªaded
 = 1;

269  
NGX_OK
;

270 
	}
}

273 
ngx_tid_t


274 
	$ngx_thªad_£lf
()

276 
ngx_öt_t
 
tid
;

278 
tid
 = 
	`ngx_gëtid
();

280 i‡(
tids
 =
NULL
) {

281  
ngx_pid
;

284  
tids
[
tid
];

285 
	}
}

288 
ngx_îr_t


289 
	$ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
)

291 i‡(
nkeys
 >
NGX_THREAD_KEYS_MAX
) {

292  
NGX_ENOMEM
;

295 *
key
 = 
nkeys
++;

298 
	}
}

301 
ngx_îr_t


302 
	$ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
)

304 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

305  
NGX_EINVAL
;

308 
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()] = 
vÆue
;

310 
	}
}

313 
ngx_muãx_t
 *

314 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

316 
ngx_muãx_t
 *
m
;

317 
£mun
 
›
;

319 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

320 i‡(
m
 =
NULL
) {

321  
NULL
;

324 
m
->
lock
 = 0;

325 
m
->
log
 =Üog;

327 i‡(
Êags
 & 
NGX_MUTEX_LIGHT
) {

328 
m
->
£mid
 = -1;

329  
m
;

332 
m
->
£mid
 = 
	`£mgë
(
IPC_PRIVATE
, 1, 
SEM_R
|
SEM_A
);

333 i‡(
m
->
£mid
 == -1) {

334 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semget() failed");

335  
NULL
;

338 
›
.
vÆ
 = 0;

340 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
SETVAL
, 
›
) == -1) {

341 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semctl(SETVAL) failed");

343 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

348  
NULL
;

351  
m
;

352 
	}
}

356 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

358 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

359 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

363 
	`ngx_‰ì
((*Ë
m
);

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
, 
ngx_öt_t
 
åy
)

370 
uöt32_t
 
lock
, 
ﬁd
;

371 
ngx_uöt_t
 
åõs
;

372 
£mbuf
 
›
;

374 i‡(!
ngx_thªaded
) {

375  
NGX_OK
;

378 #i‡(
NGX_DEBUG
)

379 i‡(
åy
) {

380 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

381 "åyÜock muãx %∞lock:%XD", 
m
, m->
lock
);

383 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

384 "lock muãx %∞lock:%XD", 
m
, m->
lock
);

388 
ﬁd
 = 
m
->
lock
;

389 
åõs
 = 0;

392 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

394 i‡(
åy
) {

395  
NGX_AGAIN
;

398 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

402 
ﬁd
 = 
m
->
lock
;

406 i‡(
m
->
£mid
 == -1) {

407 
	`sched_yõld
();

409 
åõs
 = 0;

410 
ﬁd
 = 
m
->
lock
;

414 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

415 "muãx %∞lock:%XD", 
m
, m->
lock
);

422 
lock
 = 
ﬁd
 + 1;

424 i‡((
lock
 & ~
NGX_MUTEX_LOCK_BUSY
Ë> 
¡hªads
) {

425 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

428 
lock
 & ~
NGX_MUTEX_LOCK_BUSY
, 
m
, 
¡hªads
);

429 
	`ngx_ab‹t
();

432 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

434 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

435 "waô muãx %∞lock:%XD", 
m
, m->
lock
);

444 
›
.
£m_num
 = 0;

445 
›
.
£m_›
 = -1;

446 
›
.
£m_Êg
 = 0;

448 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

450 "£m›(ËÁûed whûêwaôög o¿muãx %p", 
m
);

451 
	`ngx_ab‹t
();

454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

455 "muãx waked u∞%∞lock:%XD", 
m
, m->
lock
);

457 
åõs
 = 0;

458 
ﬁd
 = 
m
->
lock
;

462 
ﬁd
 = 
m
->
lock
;

465 
lock
 = 
ﬁd
 | 
NGX_MUTEX_LOCK_BUSY
;

467 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

474 
ﬁd
 = 
m
->
lock
;

477 i‡(
åõs
++ > 1000) {

479 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

480 "muãx %∞i†c⁄ã°ed", 
m
);

484 
	`sched_yõld
();

486 
åõs
 = 0;

487 
ﬁd
 = 
m
->
lock
;

491 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

492 "muãx %∞i†locked,Üock:%XD", 
m
, m->
lock
);

494  
NGX_OK
;

495 
	}
}

499 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

501 
uöt32_t
 
lock
, 
ﬁd
;

502 
£mbuf
 
›
;

504 i‡(!
ngx_thªaded
) {

508 
ﬁd
 = 
m
->
lock
;

510 i‡(!(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
)) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 0,

512 "åyögÅÿu∆ockÅhê‰ì muãx %p", 
m
);

513 
	`ngx_ab‹t
();

519 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

520 "u∆ock muãx %∞lock:%XD", 
m
, 
ﬁd
);

524 
lock
 = 
ﬁd
 & ~
NGX_MUTEX_LOCK_BUSY
;

526 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

530 
ﬁd
 = 
m
->
lock
;

533 i‡(
m
->
£mid
 == -1) {

534 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

535 "muãx %∞i†u∆ocked", 
m
);

542 
ﬁd
 = 
m
->
lock
;

545 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

552 i‡(
ﬁd
 == 0) {

558 
lock
 = 
ﬁd
 - 1;

560 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

564 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

565 "wakêu∞muãx %p", 
m
);

567 
›
.
£m_num
 = 0;

568 
›
.
£m_›
 = 1;

569 
›
.
£m_Êg
 = 0;

571 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

572 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

573 "£m›(ËÁûed whûêwakög u∞⁄ muãx %p", 
m
);

574 
	`ngx_ab‹t
();

580 
ﬁd
 = 
m
->
lock
;

583 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

584 "muãx %∞i†u∆ocked", 
m
);

587 
	}
}

590 
ngx_c⁄d_t
 *

591 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

593 
ngx_c⁄d_t
 *
cv
;

595 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

596 i‡(
cv
 =
NULL
) {

597  
NULL
;

600 
cv
->
signo
 = 
NGX_CV_SIGNAL
;

601 
cv
->
tid
 = -1;

602 
cv
->
log
 =Üog;

603 
cv
->
kq
 = -1;

605  
cv
;

606 
	}
}

610 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

612 i‡(
	`˛o£
(
cv
->
kq
) == -1) {

613 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
,

617 
	`ngx_‰ì
(
cv
);

618 
	}
}

621 
ngx_öt_t


622 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

624 
n
;

625 
ngx_îr_t
 
îr
;

626 
kevít
 
kev
;

627 
time•ec
 
ts
;

629 i‡(
cv
->
kq
 == -1) {

639 
cv
->
kq
 = 
	`kqueue
();

640 i‡(
cv
->
kq
 == -1) {

641 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kqueue() failed");

642  
NGX_ERROR
;

645 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

646 "cv kq:%d signo:%d", 
cv
->
kq
, cv->
signo
);

648 
kev
.
idít
 = 
cv
->
signo
;

649 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

650 
kev
.
Êags
 = 
EV_ADD
;

651 
kev
.
fÊags
 = 0;

652 
kev
.
d©a
 = 0;

653 
kev
.
ud©a
 = 
NULL
;

655 
ts
.
tv_£c
 = 0;

656 
ts
.
tv_n£c
 = 0;

658 i‡(
	`kevít
(
cv
->
kq
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

659 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kevent() failed");

660  
NGX_ERROR
;

663 
cv
->
tid
 = 
	`ngx_thªad_£lf
();

666 
	`ngx_muãx_u∆ock
(
m
);

668 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

669 "cv %∞waô, kq:%d, signo:%d", 
cv
, cv->
kq
, cv->
signo
);

672 
n
 = 
	`kevít
(
cv
->
kq
, 
NULL
, 0, &
kev
, 1, NULL);

674 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

675 "cv %∞kevít: %d", 
cv
, 
n
);

677 i‡(
n
 == -1) {

678 
îr
 = 
ngx_î∫o
;

679 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

680 
cv
->
log
, 
ngx_î∫o
,

682 
cv
);

684 i‡(
îr
 =
NGX_EINTR
) {

688  
NGX_ERROR
;

691 i‡(
n
 == 0) {

692 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

695 
cv
);

699 i‡(
kev
.
fûãr
 !
EVFILT_SIGNAL
) {

700 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

703 
kev
.
fûãr
, 
cv
);

707 i‡(
kev
.
idít
 !(
uöçå_t
Ë
cv
->
signo
) {

708 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

711 
kev
.
idít
, 
cv
);

718 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

720 
	`ngx_muãx_lock
(
m
);

722  
NGX_OK
;

723 
	}
}

726 
ngx_öt_t


727 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

729 
ngx_îr_t
 
îr
;

731 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

733 
cv
, cv->
tid
, cv->
signo
);

735 i‡(
cv
->
tid
 == -1) {

736  
NGX_OK
;

739 i‡(
	`kûl
(
cv
->
tid
, cv->
signo
) == -1) {

741 
îr
 = 
ngx_î∫o
;

743 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

744 "kûl(ËÁûed whûêsig«lög c⁄dôi⁄ v¨übÀ %p", 
cv
);

746 i‡(
îr
 =
NGX_ESRCH
) {

747 
cv
->
tid
 = -1;

750  
NGX_ERROR
;

753 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

755  
NGX_OK
;

756 
	}
}

	@src/os/unix/ngx_freebsd_rfork_thread.h

8 #i‚de‡
_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


9 
	#_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


	)

12 
	~<sys/ùc.h
>

13 
	~<sys/£m.h
>

14 
	~<sched.h
>

16 
pid_t
 
	tngx_tid_t
;

18 
	#ngx_log_pid
 
	`ngx_thªad_£lf
()

	)

19 
	#ngx_log_tid
 0

	)

21 
	#NGX_TID_T_FMT
 "%P"

	)

24 
	#NGX_MUTEX_LIGHT
 1

	)

26 
	#NGX_MUTEX_LOCK_BUSY
 0x80000000

	)

29 
ngx_©omic_t
 
	mlock
;

30 
ngx_log_t
 *
	mlog
;

31 
	m£mid
;

32 } 
	tngx_muãx_t
;

35 
	#NGX_CV_SIGNAL
 64

	)

38 
	msigno
;

39 
	mkq
;

40 
ngx_tid_t
 
	mtid
;

41 
ngx_log_t
 *
	mlog
;

42 } 
	tngx_c⁄d_t
;

45 
	#ngx_thªad_sigmask
(
how
, 
£t
, 
o£t
) \

46 (
	`sig¥ocmask
(
how
, 
£t
, 
o£t
Ë=-1Ë? 
ngx_î∫o
 : 0

	)

48 
	#ngx_thªad_sigmask_n
 "sig¥ocmask()"

	)

50 
	#ngx_thªad_joö
(
t
, 
p
)

	)

52 
	#ngx_£âhπôÀ
(
n
Ë
	`£çro˘ôÀ
“)

	)

55 *
ngx_‰ìbsd_kîn_u§°ack
;

56 
size_t
 
ngx_thªad_°ack_size
;

59 
ngx_ölöe
 
ngx_öt_t


60 
	$ngx_gëtid
()

62 *
•
;

64 i‡(
ngx_thªad_°ack_size
 == 0) {

68 #i‡–
__i386__
 )

70 
__asm__
 vﬁ©ûê("mov %%e•, %0" : "=q" (
•
));

72 #ñi‡–
__amd64__
 )

74 
__asm__
 vﬁ©ûê("mov %%r•, %0" : "=q" (
•
));

82  (
ngx_‰ìbsd_kîn_u§°ack
 - 
•
Ë/ 
ngx_thªad_°ack_size
;

83 
	}
}

86 
ngx_tid_t
 
ngx_thªad_£lf
();

89 
ngx_uöt_t
 
	tngx_és_key_t
;

91 
	#NGX_THREAD_KEYS_MAX
 16

	)

93 **
ngx_és
;

95 
ngx_îr_t
 
ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
);

96 
	#ngx_thªad_key_¸óã_n
 "thêé†key cª©i⁄"

	)

98 
ngx_îr_t
 
ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
);

99 
	#ngx_thªad_£t_és_n
 "thêé†key sëtög"

	)

103 
	$ngx_thªad_gë_és
(
ngx_és_key_t
 
key
)

105 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

106  
NULL
;

109  
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()];

110 
	}
}

113 
	#ngx_muãx_åylock
(
m
Ë
	`ngx_muãx_dﬁock
(m, 1)

	)

114 
	#ngx_muãx_lock
(
m
Ë(Ë
	`ngx_muãx_dﬁock
(m, 0)

	)

115 
ngx_öt_t
 
ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
,Çgx_öt_à
åy
);

116 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

119 (*
	tngx_rf‹k_thªad_func_±
)(*
	t¨g
);

	@src/os/unix/ngx_freebsd_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

32 #i‡(
IOV_MAX
 > 64)

33 
	#NGX_HEADERS
 64

	)

34 
	#NGX_TRAILERS
 64

	)

36 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
	#NGX_TRAILERS
 
IOV_MAX


	)

41 
ngx_chaö_t
 *

42 
	$ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

44 
rc
, 
Êags
;

45 
u_ch¨
 *
¥ev
;

46 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

47 
size_t
 
hódî_size
, 
fûe_size
;

48 
ngx_uöt_t
 
eöå
, 
ógaö
, 
com∂ëe
;

49 
ngx_îr_t
 
îr
;

50 
ngx_buf_t
 *
fûe
;

51 
ngx_¨øy_t
 
hódî
, 
åaûî
;

52 
ngx_evít_t
 *
wev
;

53 
ngx_chaö_t
 *
˛
;

54 
sf_hdå
 
hdå
;

55 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

63 #i‡(
NGX_HAVE_KQUEUE
)

65 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

66 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

68 
wev
->
îr‹
 = 1;

69  
NGX_CHAIN_ERROR
;

76 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

77 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

80 
£nd
 = 0;

81 
ógaö
 = 0;

82 
Êags
 = 0;

84 
hódî
.
ñts
 = 
hódîs
;

85 
hódî
.
size
 = (
iovec
);

86 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

87 
hódî
.
poﬁ
 = 
c
->pool;

89 
åaûî
.
ñts
 = 
åaûîs
;

90 
åaûî
.
size
 = (
iovec
);

91 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

92 
åaûî
.
poﬁ
 = 
c
->pool;

95 
fûe
 = 
NULL
;

96 
fûe_size
 = 0;

97 
hódî_size
 = 0;

98 
eöå
 = 0;

99 
com∂ëe
 = 0;

100 
¥ev_£nd
 = 
£nd
;

102 
hódî
.
√…s
 = 0;

103 
åaûî
.
√…s
 = 0;

107 
¥ev
 = 
NULL
;

108 
iov
 = 
NULL
;

110 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

112 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

116 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

120 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

122 i‡(
£nd
 + 
size
 > 
limô
) {

123 
size
 = 
limô
 - 
£nd
;

126 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

127 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

130 i‡(
hódî
.
√…s
 >
IOV_MAX
){

134 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

135 i‡(
iov
 =
NULL
) {

136  
NGX_CHAIN_ERROR
;

139 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

140 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

143 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

144 
hódî_size
 +(
size_t
Ë
size
;

145 
£nd
 +
size
;

149 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

150 
fûe
 = 
˛
->
buf
;

155 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

157 i‡(
£nd
 + 
size
 > 
limô
) {

158 
size
 = 
limô
 - 
£nd
;

160 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

161 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

163 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

164 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

168 
fûe_size
 +(
size_t
Ë
size
;

169 
£nd
 +
size
;

170 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

171 
˛
 = cl->
√xt
;

173 } 
˛


174 && 
˛
->
buf
->
ö_fûe


175 && 
£nd
 < 
limô


176 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

177 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

181 i‡(
fûe
) {

185 
¥ev
 = 
NULL
;

186 
iov
 = 
NULL
;

188 
˛
 && 
£nd
 < 
limô
) {

190 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

191 
˛
 = cl->
√xt
;

195 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

199 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

201 i‡(
£nd
 + 
size
 > 
limô
) {

202 
size
 = 
limô
 - 
£nd
;

205 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

206 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

209 i‡(
åaûî
.
√…s
 >
IOV_MAX
){

213 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

214 i‡(
iov
 =
NULL
) {

215  
NGX_CHAIN_ERROR
;

218 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

219 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

222 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

223 
£nd
 +
size
;

224 
˛
 = cl->
√xt
;

228 i‡(
fûe
) {

230 i‡(
ngx_‰ìbsd_u£_t˝_n›ush


231 && 
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET
)

233 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

234 
îr
 = 
ngx_î∫o
;

241 i‡(
îr
 !
NGX_EINTR
) {

242 
wev
->
îr‹
 = 1;

243 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

244 
ngx_t˝_n›ush_n
 " failed");

245  
NGX_CHAIN_ERROR
;

249 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

261 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

262 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

263 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

264 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

271 i‡(!
ngx_‰ìbsd_£ndfûe_nbyãs_bug
) {

272 
hódî_size
 = 0;

275 
£¡
 = 0;

277 #i‡(
NGX_HAVE_AIO_SENDFILE
)

278 
Êags
 = 
c
->
aio_£ndfûe
 ? 
SF_NODISKIO
 : 0;

281 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

282 
fûe_size
 + 
hódî_size
, &
hdå
, &
£¡
, 
Êags
);

284 i‡(
rc
 == -1) {

285 
îr
 = 
ngx_î∫o
;

287 
îr
) {

288 
NGX_EAGAIN
:

289 
ógaö
 = 1;

292 
NGX_EINTR
:

293 
eöå
 = 1;

296 #i‡(
NGX_HAVE_AIO_SENDFILE
)

297 
NGX_EBUSY
:

298 
c
->
busy_£ndfûe
 = 
fûe
;

303 
wev
->
îr‹
 = 1;

304 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

305  
NGX_CHAIN_ERROR
;

308 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

309 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

316 } i‡(
rc
 >0 && 
£¡
 == 0) {

324 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

326 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

328  
NGX_CHAIN_ERROR
;

331 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

333 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

336 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

338 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

339 "wrôev: %d o‡%uz", 
rc
, 
hódî_size
);

341 i‡(
rc
 == -1) {

342 
îr
 = 
ngx_î∫o
;

344 
îr
) {

345 
NGX_EAGAIN
:

348 
NGX_EINTR
:

349 
eöå
 = 1;

353 
wev
->
îr‹
 = 1;

354 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

355  
NGX_CHAIN_ERROR
;

358 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

362 
£¡
 = 
rc
 > 0 ?Ñc : 0;

365 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

366 
com∂ëe
 = 1;

369 
c
->
£¡
 += sent;

371 
˛
 = 
ö
; cl; c»˛->
√xt
) {

373 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

377 i‡(
£¡
 == 0) {

381 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

383 i‡(
£¡
 >
size
) {

384 
£¡
 -
size
;

386 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

387 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

390 i‡(
˛
->
buf
->
ö_fûe
) {

391 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

397 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

398 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

401 i‡(
˛
->
buf
->
ö_fûe
) {

402 
˛
->
buf
->
fûe_pos
 +
£¡
;

408 #i‡(
NGX_HAVE_AIO_SENDFILE
)

409 i‡(
c
->
busy_£ndfûe
) {

410  
˛
;

414 i‡(
ógaö
) {

423 
wev
->
ªady
 = 0;

424  
˛
;

427 i‡(
eöå
) {

431 i‡(!
com∂ëe
) {

432 
wev
->
ªady
 = 0;

433  
˛
;

436 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

437  
˛
;

440 
ö
 = 
˛
;

442 
	}
}

	@src/os/unix/ngx_gcc_atomic_amd64.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

36 
ngx_ölöe
 
ngx_©omic_uöt_t


37 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

38 
ngx_©omic_uöt_t
 
£t
)

40 
u_ch¨
 
ªs
;

42 
__asm__
 volatile (

44 
NGX_SMP_LOCK


48 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

50  
ªs
;

51 
	}
}

66 
ngx_ölöe
 
ngx_©omic_öt_t


67 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

69 
__asm__
 volatile (

71 
NGX_SMP_LOCK


74 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

76  
add
;

77 
	}
}

80 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

	@src/os/unix/ngx_gcc_atomic_ppc.h

26 #i‡(
NGX_PTR_SIZE
 == 8)

28 
ngx_ölöe
 
ngx_©omic_uöt_t


29 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

30 
ngx_©omic_uöt_t
 
£t
)

32 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

34 
__asm__
 volatile (

50 : "=&b" (
ªs
), "=&b" (
ãmp
)

51 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

54  
ªs
;

55 
	}
}

58 
ngx_ölöe
 
ngx_©omic_öt_t


59 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

61 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

63 
__asm__
 volatile (

74 : "=&b" (
ªs
), "=&b" (
ãmp
)

75 : "b" (
vÆue
), "b" (
add
)

78  
ªs
;

79 
	}
}

82 #i‡(
NGX_SMP
)

83 
	#ngx_mem‹y_b¨rõr
() \

84 
__asm__
 vﬁ©ûê("isyn¯ \¿Üwsyn¯ \n" ::: "mem‹y")

	)

86 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

91 
ngx_ölöe
 
ngx_©omic_uöt_t


92 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

93 
ngx_©omic_uöt_t
 
£t
)

95 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

97 
__asm__
 volatile (

113 : "=&b" (
ªs
), "=&b" (
ãmp
)

114 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

117  
ªs
;

118 
	}
}

121 
ngx_ölöe
 
ngx_©omic_öt_t


122 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

124 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

126 
__asm__
 volatile (

137 : "=&b" (
ªs
), "=&b" (
ãmp
)

138 : "b" (
vÆue
), "b" (
add
)

141  
ªs
;

142 
	}
}

145 #i‡(
NGX_SMP
)

146 
	#ngx_mem‹y_b¨rõr
() \

147 
__asm__
 vﬁ©ûê("isyn¯ \¿Éõiÿ \n" ::: "mem‹y")

	)

149 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

155 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_sparc64.h

26 #i‡(
NGX_PTR_SIZE
 == 4)

27 
	#NGX_CASA
 "ˇß"

	)

29 
	#NGX_CASA
 "ˇsxa"

	)

33 
ngx_ölöe
 
ngx_©omic_uöt_t


34 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

35 
ngx_©omic_uöt_t
 
£t
)

37 
__asm__
 volatile (

39 
NGX_CASA
 " [%1] 0x80, %2, %0"

41 : "+r" (
£t
Ë: "r" (
lock
), "r" (
ﬁd
) : "memory");

43  (
£t
 =
ﬁd
);

44 
	}
}

47 
ngx_ölöe
 
ngx_©omic_öt_t


48 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

50 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

52 
ﬁd
 = *
vÆue
;

56 
ªs
 = 
ﬁd
 + 
add
;

58 
__asm__
 volatile (

60 
NGX_CASA
 " [%1] 0x80, %2, %0"

62 : "+r" (
ªs
Ë: "r" (
vÆue
), "r" (
ﬁd
) : "memory");

64 i‡(
ªs
 =
ﬁd
) {

65  
ªs
;

68 
ﬁd
 = 
ªs
;

70 
	}
}

73 #i‡(
NGX_SMP
)

74 
	#ngx_mem‹y_b¨rõr
() \

75 
__asm__
 volatile ( \

77 ::: "mem‹y")

	)

79 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_x86.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

37 
ngx_ölöe
 
ngx_©omic_uöt_t


38 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

39 
ngx_©omic_uöt_t
 
£t
)

41 
u_ch¨
 
ªs
;

43 
__asm__
 volatile (

45 
NGX_SMP_LOCK


49 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

51  
ªs
;

52 
	}
}

68 #i‡!(–
__GNUC__
 =2 && 
__GNUC_MINOR__
 <7 ) || ( 
__INTEL_COMPILER
 >= 800 ))

79 
ngx_ölöe
 
ngx_©omic_öt_t


80 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

82 
__asm__
 volatile (

84 
NGX_SMP_LOCK


87 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

89  
add
;

90 
	}
}

101 
ngx_ölöe
 
ngx_©omic_öt_t


102 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

104 
ngx_©omic_uöt_t
 
ﬁd
;

106 
__asm__
 volatile (

108 
NGX_SMP_LOCK


111 : "˜" (
ﬁd
Ë: "m" (*
vÆue
), "a" (
add
) : "cc", "memory");

113  
ﬁd
;

114 
	}
}

124 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

127 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 (".byã 0xf3, 0x90")

	)

	@src/os/unix/ngx_linux.h

8 #i‚de‡
_NGX_LINUX_H_INCLUDED_


9 
	#_NGX_LINUX_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_löux_πsig_max
;

	@src/os/unix/ngx_linux_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evítfd
;

14 
aio_c⁄ãxt_t
 
ngx_aio_˘x
;

17 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

21 
	$io_submô
(
aio_c⁄ãxt_t
 
˘x
, 
n
, 
iocb
 **
∑iocb
)

23  
	`sysˇŒ
(
SYS_io_submô
, 
˘x
, 
n
, 
∑iocb
);

24 
	}
}

27 
ssize_t


28 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

29 
ngx_poﬁ_t
 *
poﬁ
)

31 
ngx_îr_t
 
îr
;

32 
iocb
 *
piocb
[1];

33 
ngx_evít_t
 *
ev
;

34 
ngx_evít_aio_t
 *
aio
;

36 i‡(!
ngx_fûe_aio
) {

37  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

40 
aio
 = 
fûe
->aio;

42 i‡(
aio
 =
NULL
) {

43 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

44 i‡(
aio
 =
NULL
) {

45  
NGX_ERROR
;

48 
aio
->
fûe
 = file;

49 
aio
->
fd
 = 
fûe
->fd;

50 
aio
->
evít
.
d©a
 =áio;

51 
aio
->
evít
.
ªady
 = 1;

52 
aio
->
evít
.
log
 = 
fûe
->log;

53 
fûe
->
aio
 =áio;

56 
ev
 = &
aio
->
evít
;

58 i‡(!
ev
->
ªady
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

60 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

61  
NGX_AGAIN
;

64 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

66 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

68 i‡(
ev
->
com∂ëe
) {

69 
ev
->
a˘ive
 = 0;

70 
ev
->
com∂ëe
 = 0;

72 i‡(
aio
->
ªs
 >= 0) {

73 
	`ngx_£t_î∫o
(0);

74  
aio
->
ªs
;

77 
	`ngx_£t_î∫o
(-
aio
->
ªs
);

79 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

80 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

82  
NGX_ERROR
;

85 
	`ngx_memzîo
(&
aio
->
aiocb
, (
iocb
));

87 
aio
->
aiocb
.
aio_d©a
 = (
uöt64_t
Ë(
uöçå_t
Ë
ev
;

88 
aio
->
aiocb
.
aio_lio_›code
 = 
IOCB_CMD_PREAD
;

89 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

90 
aio
->
aiocb
.
aio_buf
 = (
uöt64_t
Ë(
uöçå_t
Ë
buf
;

91 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

92 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

93 
aio
->
aiocb
.
aio_Êags
 = 
IOCB_FLAG_RESFD
;

94 
aio
->
aiocb
.
aio_ªsfd
 = 
ngx_evítfd
;

96 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

98 
piocb
[0] = &
aio
->
aiocb
;

100 i‡(
	`io_submô
(
ngx_aio_˘x
, 1, 
piocb
) == 1) {

101 
ev
->
a˘ive
 = 1;

102 
ev
->
ªady
 = 0;

103 
ev
->
com∂ëe
 = 0;

105  
NGX_AGAIN
;

108 
îr
 = 
ngx_î∫o
;

110 i‡(
îr
 =
NGX_EAGAIN
) {

111  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

114 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

115 "io_submô(\"%V\"ËÁûed", &
fûe
->
«me
);

117 i‡(
îr
 =
NGX_ENOSYS
) {

118 
ngx_fûe_aio
 = 0;

119  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

122  
NGX_ERROR
;

123 
	}
}

127 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

129 
ngx_evít_aio_t
 *
aio
;

131 
aio
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

134 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

136 
aio
->
	`h™dÀr
(
ev
);

137 
	}
}

	@src/os/unix/ngx_linux_config.h

8 #i‚de‡
_NGX_LINUX_CONFIG_H_INCLUDED_


9 
	#_NGX_LINUX_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_GNU_SOURCE


13 
	#_GNU_SOURCE


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

28 
	~<pwd.h
>

29 
	~<gΩ.h
>

30 
	~<dúít.h
>

31 
	~<glob.h
>

32 
	~<sys/vfs.h
>

34 
	~<sys/uio.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/mm™.h
>

40 
	~<sys/ªsour˚.h
>

41 
	~<sched.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<√töë/t˝.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

48 
	~<sys/un.h
>

50 
	~<time.h
>

51 
	~<mÆloc.h
>

52 
	~<limôs.h
>

53 
	~<sys/io˘l.h
>

54 
	~<sys/sys˘l.h
>

55 
	~<¸y±.h
>

56 
	~<sys/ut¢ame.h
>

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_SYS_PRCTL_H
)

68 
	~<sys/¥˘l.h
>

72 #i‡(
NGX_HAVE_SENDFILE64
)

73 
	~<sys/£ndfûe.h
>

75 
ssize_t
 
£ndfûe
(
s
, 
fd
, 
öt32_t
 *
off£t
, 
size_t
 
size
);

76 
	#NGX_SENDFILE_LIMIT
 0x80000000

	)

80 #i‡(
NGX_HAVE_POLL
 || 
NGX_HAVE_RTSIG
)

81 
	~<pﬁl.h
>

85 #i‡(
NGX_HAVE_EPOLL
)

86 
	~<sys/ïﬁl.h
>

90 #i‡(
NGX_HAVE_FILE_AIO
)

91 
	~<sys/sysˇŒ.h
>

92 
	~<löux/aio_abi.h
>

93 
iocb
 
	tngx_aiocb_t
;

97 
	#NGX_LISTEN_BACKLOG
 511

	)

100 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


102 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

106 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


107 
	#NGX_HAVE_INHERITED_NONBLOCK
 0

	)

111 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

112 
	#ngx_debug_öô
()

	)

115 **
ívú⁄
;

	@src/os/unix/ngx_linux_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 
	gngx_löux_kîn_o°y≥
[50];

13 
u_ch¨
 
	gngx_löux_kîn_o§ñó£
[50];

15 
	gngx_löux_πsig_max
;

18 
ngx_os_io_t
 
	gngx_löux_io
 = {

19 
ngx_unix_ªcv
,

20 
ngx_ªadv_chaö
,

21 
ngx_udp_unix_ªcv
,

22 
ngx_unix_£nd
,

23 #i‡(
NGX_HAVE_SENDFILE
)

24 
ngx_löux_£ndfûe_chaö
,

25 
NGX_IO_SENDFILE


27 
ngx_wrôev_chaö
,

33 
ngx_öt_t


34 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

36 
ut¢ame
 
u
;

38 i‡(
	`u«me
(&
u
) == -1) {

39 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "uname() failed");

40  
NGX_ERROR
;

43 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o°y≥
, (
u_ch¨
 *Ë
u
.
sy¢ame
,

44 (
ngx_löux_kîn_o°y≥
));

46 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o§ñó£
, (
u_ch¨
 *Ë
u
.
ªÀa£
,

47 (
ngx_löux_kîn_o§ñó£
));

49 #i‡(
NGX_HAVE_RTSIG
)

51 
«me
[2];

52 
size_t
 
Àn
;

53 
ngx_îr_t
 
îr
;

55 
«me
[0] = 
CTL_KERN
;

56 
«me
[1] = 
KERN_RTSIGMAX
;

57 
Àn
 = (
ngx_löux_πsig_max
);

59 i‡(
	`sys˘l
(
«me
, 2, &
ngx_löux_πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

60 
îr
 = 
ngx_î∫o
;

62 i‡(
îr
 !
NGX_ENOTDIR
 &&Éº !
NGX_ENOSYS
) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

66  
NGX_ERROR
;

69 
ngx_löux_πsig_max
 = 0;

75 
ngx_os_io
 = 
ngx_löux_io
;

77  
NGX_OK
;

78 
	}
}

82 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

84 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

85 
ngx_löux_kîn_o°y≥
, 
ngx_löux_kîn_o§ñó£
);

87 #i‡(
NGX_HAVE_RTSIG
)

88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "sysctl(KERN_RTSIGMAX): %d",

89 
ngx_löux_πsig_max
);

91 
	}
}

	@src/os/unix/ngx_linux_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

27 
	#NGX_SENDFILE_LIMIT
 2147483647L

	)

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

33 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
ngx_chaö_t
 *

38 
	$ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

40 
rc
, 
t˝_nodñay
;

41 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

42 
u_ch¨
 *
¥ev
;

43 
size_t
 
fûe_size
;

44 
ngx_îr_t
 
îr
;

45 
ngx_buf_t
 *
fûe
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_¨øy_t
 
hódî
;

48 
ngx_evít_t
 *
wev
;

49 
ngx_chaö_t
 *
˛
;

50 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
];

51 #i‡(
NGX_HAVE_SENDFILE64
)

52 
off_t
 
off£t
;

54 
öt32_t
 
off£t
;

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

66 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_SENDFILE_LIMIT
 - 
ngx_∑gesize
)) {

67 
limô
 = 
NGX_SENDFILE_LIMIT
 - 
ngx_∑gesize
;

71 
£nd
 = 0;

73 
hódî
.
ñts
 = 
hódîs
;

74 
hódî
.
size
 = (
iovec
);

75 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

76 
hódî
.
poﬁ
 = 
c
->pool;

79 
fûe
 = 
NULL
;

80 
fûe_size
 = 0;

81 
eöå
 = 0;

82 
com∂ëe
 = 0;

83 
¥ev_£nd
 = 
£nd
;

85 
hódî
.
√…s
 = 0;

87 
¥ev
 = 
NULL
;

88 
iov
 = 
NULL
;

92 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

94 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

99 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
Ë&& !˛->buf->
ö_fûe
) {

100 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

103 
˛
->
buf
->
ãmp‹¨y
,

104 
˛
->
buf
->
ªcy˛ed
,

105 
˛
->
buf
->
ö_fûe
,

106 
˛
->
buf
->
°¨t
,

107 
˛
->
buf
->
pos
,

108 
˛
->
buf
->
œ°
,

109 
˛
->
buf
->
fûe
,

110 
˛
->
buf
->
fûe_pos
,

111 
˛
->
buf
->
fûe_œ°
);

113 
	`ngx_debug_poöt
();

115  
NGX_CHAIN_ERROR
;

119 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

123 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

125 i‡(
£nd
 + 
size
 > 
limô
) {

126 
size
 = 
limô
 - 
£nd
;

129 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

130 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

133 i‡(
hódî
.
√…s
 >
IOV_MAX
) {

137 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

138 i‡(
iov
 =
NULL
) {

139  
NGX_CHAIN_ERROR
;

142 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

143 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

146 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

147 
£nd
 +
size
;

152 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET


153 && 
hódî
.
√…s
 != 0

154 && 
˛


155 && 
˛
->
buf
->
ö_fûe
)

159 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_SET
) {

161 
t˝_nodñay
 = 0;

163 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

164 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

166 
îr
 = 
ngx_î∫o
;

174 i‡(
îr
 !
NGX_EINTR
) {

175 
wev
->
îr‹
 = 1;

176 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

178  
NGX_CHAIN_ERROR
;

182 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_UNSET
;

184 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

189 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

191 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

192 
îr
 = 
ngx_î∫o
;

199 i‡(
îr
 !
NGX_EINTR
) {

200 
wev
->
îr‹
 = 1;

201 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

202 
ngx_t˝_n›ush_n
 " failed");

203  
NGX_CHAIN_ERROR
;

207 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

209 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

217 i‡(
hódî
.
√…s
 =0 && 
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

218 
fûe
 = 
˛
->
buf
;

223 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

225 i‡(
£nd
 + 
size
 > 
limô
) {

226 
size
 = 
limô
 - 
£nd
;

228 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

229 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

231 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

232 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

236 
fûe_size
 +(
size_t
Ë
size
;

237 
£nd
 +
size
;

238 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

239 
˛
 = cl->
√xt
;

241 } 
˛


242 && 
˛
->
buf
->
ö_fûe


243 && 
£nd
 < 
limô


244 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

245 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

248 i‡(
fûe
) {

250 i‡(
fûe_size
 == 0) {

251 
	`ngx_debug_poöt
();

252  
NGX_CHAIN_ERROR
;

255 #i‡(
NGX_HAVE_SENDFILE64
)

256 
off£t
 = 
fûe
->
fûe_pos
;

258 
off£t
 = (
öt32_t
Ë
fûe
->
fûe_pos
;

261 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

262 "£ndfûe: @%O %uz", 
fûe
->
fûe_pos
, 
fûe_size
);

264 
rc
 = 
	`£ndfûe
(
c
->
fd
, 
fûe
->fûe->fd, &
off£t
, 
fûe_size
);

266 i‡(
rc
 == -1) {

267 
îr
 = 
ngx_î∫o
;

269 
îr
) {

270 
NGX_EAGAIN
:

273 
NGX_EINTR
:

274 
eöå
 = 1;

278 
wev
->
îr‹
 = 1;

279 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

280  
NGX_CHAIN_ERROR
;

283 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

287 
£¡
 = 
rc
 > 0 ?Ñc : 0;

289 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

291 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
);

294 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

296 i‡(
rc
 == -1) {

297 
îr
 = 
ngx_î∫o
;

299 
îr
) {

300 
NGX_EAGAIN
:

303 
NGX_EINTR
:

304 
eöå
 = 1;

308 
wev
->
îr‹
 = 1;

309 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

310  
NGX_CHAIN_ERROR
;

313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

317 
£¡
 = 
rc
 > 0 ?Ñc : 0;

319 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %O", 
£¡
);

322 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

323 
com∂ëe
 = 1;

326 
c
->
£¡
 += sent;

328 
˛
 = 
ö
; cl; c»˛->
√xt
) {

330 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

334 i‡(
£¡
 == 0) {

338 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

340 i‡(
£¡
 >
size
) {

341 
£¡
 -
size
;

343 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

344 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

347 i‡(
˛
->
buf
->
ö_fûe
) {

348 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

354 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

355 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

358 i‡(
˛
->
buf
->
ö_fûe
) {

359 
˛
->
buf
->
fûe_pos
 +
£¡
;

365 i‡(
eöå
) {

369 i‡(!
com∂ëe
) {

370 
wev
->
ªady
 = 0;

371  
˛
;

374 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

375  
˛
;

378 
ö
 = 
˛
;

380 
	}
}

	@src/os/unix/ngx_os.h

8 #i‚de‡
_NGX_OS_H_INCLUDED_


9 
	#_NGX_OS_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_IO_SENDFILE
 1

	)

19 
	$ssize_t
 (*
	tngx_ªcv_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

20 
	$ssize_t
 (*
	tngx_ªcv_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
);

21 
	$ssize_t
 (*
	tngx_£nd_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

22 
ngx_chaö_t
 *(*
	tngx_£nd_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

23 
	toff_t
 
	tlimô
);

26 
ngx_ªcv_±
 
ªcv
;

27 
ngx_ªcv_chaö_±
 
ªcv_chaö
;

28 
ngx_ªcv_±
 
udp_ªcv
;

29 
ngx_£nd_±
 
£nd
;

30 
ngx_£nd_chaö_±
 
£nd_chaö
;

31 
ngx_uöt_t
 
Êags
;

32 } 
	tngx_os_io_t
;

35 
ngx_öt_t
 
	`ngx_os_öô
(
ngx_log_t
 *
log
);

36 
	`ngx_os_°©us
(
ngx_log_t
 *
log
);

37 
ngx_öt_t
 
	`ngx_os_•ecific_öô
(
ngx_log_t
 *
log
);

38 
	`ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
);

39 
ngx_öt_t
 
	`ngx_d´m⁄
(
ngx_log_t
 *
log
);

40 
ngx_öt_t
 
	`ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
,Çgx_öt_à
pid
);

43 
ssize_t
 
	`ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

44 
ssize_t
 
	`ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
íåy
);

45 
ssize_t
 
	`ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

46 
ssize_t
 
	`ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

47 
ngx_chaö_t
 *
	`ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

48 
off_t
 
limô
);

50 #i‡(
NGX_HAVE_AIO
)

51 
ssize_t
 
	`ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

52 
ssize_t
 
	`ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

53 
ssize_t
 
	`ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

54 
ngx_chaö_t
 *
	`ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

55 
off_t
 
limô
);

59 
ngx_os_io_t
 
ngx_os_io
;

60 
ngx_öt_t
 
ngx_n˝u
;

61 
ngx_öt_t
 
ngx_max_sockës
;

62 
ngx_uöt_t
 
ngx_öhîôed_n⁄blockög
;

63 
ngx_uöt_t
 
ngx_t˝_nodñay_™d_t˝_n›ush
;

66 #i‡(
NGX_FREEBSD
)

67 
	~<ngx_‰ìbsd.h
>

70 #ñi‡(
NGX_LINUX
)

71 
	~<ngx_löux.h
>

74 #ñi‡(
NGX_SOLARIS
)

75 
	~<ngx_sﬁ¨is.h
>

78 #ñi‡(
NGX_DARWIN
)

79 
	~<ngx_d¨wö.h
>

	@src/os/unix/ngx_posix_config.h

8 #i‚de‡
_NGX_POSIX_CONFIG_H_INCLUDED_


9 
	#_NGX_POSIX_CONFIG_H_INCLUDED_


	)

12 #i‡(
NGX_HPUX
)

13 
	#_XOPEN_SOURCE


	)

14 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

15 
	#_HPUX_ALT_XOPEN_SOCKET_API


	)

19 #i‡(
NGX_TRU64
)

20 
	#_REENTRANT


	)

24 #ifde‡
__CYGWIN__


25 
	#timez⁄ev¨


	)

26 
	#NGX_BROKEN_SCM_RIGHTS
 1

	)

30 
	~<sys/ty≥s.h
>

31 
	~<sys/time.h
>

32 #i‡(
NGX_HAVE_UNISTD_H
)

33 
	~<uni°d.h
>

35 #i‡(
NGX_HAVE_INTTYPES_H
)

36 
	~<öây≥s.h
>

38 
	~<°d¨g.h
>

39 
	~<°ddef.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<î∫o.h
>

43 
	~<°rög.h
>

44 
	~<sig«l.h
>

45 
	~<pwd.h
>

46 
	~<gΩ.h
>

47 
	~<dúít.h
>

48 
	~<glob.h
>

49 
	~<time.h
>

50 #i‡(
NGX_HAVE_SYS_PARAM_H
)

51 
	~<sys/∑øm.h
>

53 #i‡(
NGX_HAVE_SYS_MOUNT_H
)

54 
	~<sys/mou¡.h
>

56 #i‡(
NGX_HAVE_SYS_STATVFS_H
)

57 
	~<sys/°©vfs.h
>

60 #i‡(
NGX_HAVE_SYS_FILIO_H
)

61 
	~<sys/fûio.h
>

63 
	~<sys/io˘l.h
>

65 
	~<sys/uio.h
>

66 
	~<sys/°©.h
>

67 
	~<f˙é.h
>

69 
	~<sys/waô.h
>

70 
	~<sys/mm™.h
>

71 
	~<sys/ªsour˚.h
>

72 
	~<sched.h
>

74 
	~<sys/sockë.h
>

75 
	~<√töë/ö.h
>

76 
	~<√töë/t˝.h
>

77 
	~<¨∑/öë.h
>

78 
	~<√tdb.h
>

79 
	~<sys/un.h
>

81 #i‡(
NGX_HAVE_LIMITS_H
)

82 
	~<limôs.h
>

85 #ifde‡
__CYGWIN__


86 
	~<mÆloc.h
>

89 #i‡(
NGX_HAVE_CRYPT_H
)

90 
	~<¸y±.h
>

94 #i‚de‡
IOV_MAX


95 
	#IOV_MAX
 16

	)

99 
	~<ngx_auto_c⁄fig.h
>

102 #i‡(
NGX_HAVE_POSIX_SEM
)

103 
	~<£m≠h‹e.h
>

107 #i‡(
NGX_HAVE_POLL
)

108 
	~<pﬁl.h
>

112 #i‡(
NGX_HAVE_KQUEUE
)

113 
	~<sys/evít.h
>

117 #i‡(
NGX_HAVE_DEVPOLL
)

118 
	~<sys/io˘l.h
>

119 
	~<sys/devpﬁl.h
>

123 #i‡(
NGX_HAVE_FILE_AIO
)

124 
	~<aio.h
>

125 
aiocb
 
	tngx_aiocb_t
;

129 
	#NGX_LISTEN_BACKLOG
 511

	)

131 
	#ngx_debug_öô
()

	)

134 #i‡(
__FªeBSD__
Ë&& (
__FªeBSD_vîsi⁄
 < 400017)

136 
	~<sys/∑øm.h
>

142 #unde‡
CMSG_SPACE


143 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

145 #unde‡
CMSG_LEN


146 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

148 #unde‡
CMSG_DATA


149 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

154 **
ívú⁄
;

	@src/os/unix/ngx_posix_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
	gngx_n˝u
;

14 
ngx_öt_t
 
	gngx_max_sockës
;

15 
ngx_uöt_t
 
	gngx_öhîôed_n⁄blockög
;

16 
ngx_uöt_t
 
	gngx_t˝_nodñay_™d_t˝_n›ush
;

19 
æimô
 
	gæmt
;

22 
ngx_os_io_t
 
	gngx_os_io
 = {

23 
ngx_unix_ªcv
,

24 
ngx_ªadv_chaö
,

25 
ngx_udp_unix_ªcv
,

26 
ngx_unix_£nd
,

27 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_öô
(
ngx_log_t
 *
log
)

35 
ngx_uöt_t
 
n
;

37 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

38 i‡(
	`ngx_os_•ecific_öô
(
log
Ë!
NGX_OK
) {

39  
NGX_ERROR
;

43 
	`ngx_öô_£çro˘ôÀ
(
log
);

45 
ngx_∑gesize
 = 
	`gë∑gesize
();

46 
ngx_ˇchñöe_size
 = 
NGX_CPU_CACHE_LINE
;

48 
n
 = 
ngx_∑gesize
;Ç >>1; 
ngx_∑gesize_shi·
++) { }

50 #i‡(
NGX_HAVE_SC_NPROCESSORS_ONLN
)

51 i‡(
ngx_n˝u
 == 0) {

52 
ngx_n˝u
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

56 i‡(
ngx_n˝u
 < 1) {

57 
ngx_n˝u
 = 1;

60 
	`ngx_˝uöfo
();

62 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
î∫o
,

65  
NGX_ERROR
;

68 
ngx_max_sockës
 = (
ngx_öt_t
Ë
æmt
.
æim_cur
;

70 #i‡(
NGX_HAVE_INHERITED_NONBLOCK
 || 
NGX_HAVE_ACCEPT4
)

71 
ngx_öhîôed_n⁄blockög
 = 1;

73 
ngx_öhîôed_n⁄blockög
 = 0;

76 
	`§™dom
(
	`ngx_time
());

78  
NGX_OK
;

79 
	}
}

83 
	$ngx_os_°©us
(
ngx_log_t
 *
log
)

85 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, 
NGINX_VER
);

87 #ifde‡
NGX_COMPILER


88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "buûàby " 
NGX_COMPILER
);

91 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

92 
	`ngx_os_•ecific_°©us
(
log
);

95 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

97 
æmt
.
æim_cur
,Ñlmt.
æim_max
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_posix_po°_c⁄f_öô
(
ngx_log_t
 *
log
)

106 
ngx_fd_t
 
µ
[2];

108 i‡(
	`pùe
(
µ
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "pipe() failed");

110  
NGX_ERROR
;

113 i‡(
	`dup2
(
µ
[1], 
STDERR_FILENO
) == -1) {

114 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "dup2(STDERR) failed");

115  
NGX_ERROR
;

118 i‡(
µ
[1] > 
STDERR_FILENO
) {

119 i‡(
	`˛o£
(
µ
[1]) == -1) {

120 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "close() failed");

121  
NGX_ERROR
;

125  
NGX_OK
;

126 
	}
}

	@src/os/unix/ngx_process.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

15 
	msigno
;

16 *
	msig«me
;

17 *
	m«me
;

18 (*
	mh™dÀr
)(
	msigno
);

19 } 
	tngx_sig«l_t
;

23 
ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

24 
ngx_sig«l_h™dÀr
(
signo
);

25 
ngx_¥o˚ss_gë_°©us
();

26 
ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
);

29 
	gngx_¨gc
;

30 **
	gngx_¨gv
;

31 **
	gngx_os_¨gv
;

33 
ngx_öt_t
 
	gngx_¥o˚ss_¶Ÿ
;

34 
ngx_sockë_t
 
	gngx_ch™√l
;

35 
ngx_öt_t
 
	gngx_œ°_¥o˚ss
;

36 
ngx_¥o˚ss_t
 
	gngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

39 
ngx_sig«l_t
 
	gsig«ls
[] = {

40 { 
ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

41 "SIG" 
ngx_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

43 
ngx_sig«l_h™dÀr
 },

45 { 
ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
),

46 "SIG" 
ngx_vÆue
(
NGX_REOPEN_SIGNAL
),

48 
ngx_sig«l_h™dÀr
 },

50 { 
ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
),

51 "SIG" 
ngx_vÆue
(
NGX_NOACCEPT_SIGNAL
),

53 
ngx_sig«l_h™dÀr
 },

55 { 
ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
),

56 "SIG" 
ngx_vÆue
(
NGX_TERMINATE_SIGNAL
),

58 
ngx_sig«l_h™dÀr
 },

60 { 
ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

61 "SIG" 
ngx_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

63 
ngx_sig«l_h™dÀr
 },

65 { 
ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

66 "SIG" 
ngx_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

68 
ngx_sig«l_h™dÀr
 },

70 { 
SIGALRM
, "SIGALRM", "", 
ngx_sig«l_h™dÀr
 },

72 { 
SIGINT
, "SIGINT", "", 
ngx_sig«l_h™dÀr
 },

74 { 
SIGIO
, "SIGIO", "", 
ngx_sig«l_h™dÀr
 },

76 { 
SIGCHLD
, "SIGCHLD", "", 
ngx_sig«l_h™dÀr
 },

78 { 
SIGSYS
, "SIGSYS, SIG_IGN", "", 
SIG_IGN
 },

80 { 
SIGPIPE
, "SIGPIPE, SIG_IGN", "", 
SIG_IGN
 },

82 { 0, 
NULL
, "", NULL }

86 
ngx_pid_t


87 
	$ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
,

88 *
«me
, 
ngx_öt_t
 
ª•awn
)

90 
u_l⁄g
 
⁄
;

91 
ngx_pid_t
 
pid
;

92 
ngx_öt_t
 
s
;

94 i‡(
ª•awn
 >= 0) {

95 
s
 = 
ª•awn
;

98 
s
 = 0; s < 
ngx_œ°_¥o˚ss
; s++) {

99 i‡(
ngx_¥o˚s£s
[
s
].
pid
 == -1) {

104 i‡(
s
 =
NGX_MAX_PROCESSES
) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

107 
NGX_MAX_PROCESSES
);

108  
NGX_INVALID_PID
;

113 i‡(
ª•awn
 !
NGX_PROCESS_DETACHED
) {

117 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ngx_¥o˚s£s
[
s
].
ch™√l
) == -1)

119 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

120 "sockë∑ú(ËÁûed whûê•awnög \"%s\"", 
«me
);

121  
NGX_INVALID_PID
;

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

126 
ngx_¥o˚s£s
[
s
].
ch™√l
[0],

127 
ngx_¥o˚s£s
[
s
].
ch™√l
[1]);

129 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0]) == -1) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

131 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

132 
«me
);

133 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

134  
NGX_INVALID_PID
;

137 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1]) == -1) {

138 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

140 
«me
);

141 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

142  
NGX_INVALID_PID
;

145 
⁄
 = 1;

146 i‡(
	`io˘l
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
FIOASYNC
, &
⁄
) == -1) {

147 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

148 "io˘l(FIOASYNCËÁûed whûê•awnög \"%s\"", 
«me
);

149 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

150  
NGX_INVALID_PID
;

153 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETOWN
, 
ngx_pid
) == -1) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

155 "f˙é(F_SETOWNËÁûed whûê•awnög \"%s\"", 
«me
);

156 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

157  
NGX_INVALID_PID
;

160 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

163 
«me
);

164 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

165  
NGX_INVALID_PID
;

168 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

169 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

171 
«me
);

172 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

173  
NGX_INVALID_PID
;

176 
ngx_ch™√l
 = 
ngx_¥o˚s£s
[
s
].
ch™√l
[1];

179 
ngx_¥o˚s£s
[
s
].
ch™√l
[0] = -1;

180 
ngx_¥o˚s£s
[
s
].
ch™√l
[1] = -1;

183 
ngx_¥o˚ss_¶Ÿ
 = 
s
;

186 
pid
 = 
	`f‹k
();

188 
pid
) {

191 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

192 "f‹k(ËÁûed whûê•awnög \"%s\"", 
«me
);

193 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

194  
NGX_INVALID_PID
;

197 
ngx_pid
 = 
	`ngx_gëpid
();

198 
	`¥oc
(
cy˛e
, 
d©a
);

205 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "°¨à%†%P", 
«me
, 
pid
);

207 
ngx_¥o˚s£s
[
s
].
pid
 =Öid;

208 
ngx_¥o˚s£s
[
s
].
exôed
 = 0;

210 i‡(
ª•awn
 >= 0) {

211  
pid
;

214 
ngx_¥o˚s£s
[
s
].
¥oc
 =Öroc;

215 
ngx_¥o˚s£s
[
s
].
d©a
 = data;

216 
ngx_¥o˚s£s
[
s
].
«me
 =Çame;

217 
ngx_¥o˚s£s
[
s
].
exôög
 = 0;

219 
ª•awn
) {

221 
NGX_PROCESS_NORESPAWN
:

222 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

223 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

224 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

227 
NGX_PROCESS_JUST_SPAWN
:

228 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

229 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

230 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

233 
NGX_PROCESS_RESPAWN
:

234 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

235 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

236 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

239 
NGX_PROCESS_JUST_RESPAWN
:

240 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

241 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

242 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

245 
NGX_PROCESS_DETACHED
:

246 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

247 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

248 
ngx_¥o˚s£s
[
s
].
dëached
 = 1;

252 i‡(
s
 =
ngx_œ°_¥o˚ss
) {

253 
ngx_œ°_¥o˚ss
++;

256  
pid
;

257 
	}
}

260 
ngx_pid_t


261 
	$ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
)

263  
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_execuã_¥oc
, 
˘x
, ctx->
«me
,

264 
NGX_PROCESS_DETACHED
);

265 
	}
}

269 
	$ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

271 
ngx_exec_˘x_t
 *
˘x
 = 
d©a
;

273 i‡(
	`execve
(
˘x
->
∑th
, ctx->
¨gv
, ctx->
ívp
) == -1) {

274 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

276 
˘x
->
«me
, ctx->
∑th
);

279 
	`exô
(1);

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_öô_sig«ls
(
ngx_log_t
 *
log
)

286 
ngx_sig«l_t
 *
sig
;

287 
siga˘i⁄
 
ß
;

289 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

290 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

291 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

292 
	`sigem±y£t
(&
ß
.
ß_mask
);

293 i‡(
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
) == -1) {

294 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

295 "siga˘i⁄(%sËÁûed", 
sig
->
sig«me
);

296  
NGX_ERROR
;

300  
NGX_OK
;

301 
	}
}

305 
	$ngx_sig«l_h™dÀr
(
signo
)

307 *
a˘i⁄
;

308 
ngx_öt_t
 
ign‹e
;

309 
ngx_îr_t
 
îr
;

310 
ngx_sig«l_t
 *
sig
;

312 
ign‹e
 = 0;

314 
îr
 = 
ngx_î∫o
;

316 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

317 i‡(
sig
->
signo
 == signo) {

322 
	`ngx_time_sigß„_upd©e
();

324 
a˘i⁄
 = "";

326 
ngx_¥o˚ss
) {

328 
NGX_PROCESS_MASTER
:

329 
NGX_PROCESS_SINGLE
:

330 
signo
) {

332 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

333 
ngx_quô
 = 1;

334 
a˘i⁄
 = ", shutting down";

337 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

338 
SIGINT
:

339 
ngx_ãrmö©e
 = 1;

340 
a˘i⁄
 = ",Éxiting";

343 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

344 i‡(
ngx_d´m⁄ized
) {

345 
ngx_nﬂc˚±
 = 1;

346 
a˘i⁄
 = ", stopáccepting connections";

350 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

351 
ngx_ªc⁄figuª
 = 1;

352 
a˘i⁄
 = ",Ñeconfiguring";

355 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

356 
ngx_ª›í
 = 1;

357 
a˘i⁄
 = ",ÑeopeningÜogs";

360 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

361 i‡(
	`gëµid
(Ë> 1 || 
ngx_√w_bö¨y
 > 0) {

370 
a˘i⁄
 = ", ignoring";

371 
ign‹e
 = 1;

375 
ngx_ch™ge_bö¨y
 = 1;

376 
a˘i⁄
 = ", changing binary";

379 
SIGALRM
:

380 
ngx_sigÆrm
 = 1;

383 
SIGIO
:

384 
ngx_sigio
 = 1;

387 
SIGCHLD
:

388 
ngx_ª≠
 = 1;

394 
NGX_PROCESS_WORKER
:

395 
NGX_PROCESS_HELPER
:

396 
signo
) {

398 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

399 i‡(!
ngx_d´m⁄ized
) {

402 
ngx_debug_quô
 = 1;

403 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

404 
ngx_quô
 = 1;

405 
a˘i⁄
 = ", shutting down";

408 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

409 
SIGINT
:

410 
ngx_ãrmö©e
 = 1;

411 
a˘i⁄
 = ",Éxiting";

414 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

415 
ngx_ª›í
 = 1;

416 
a˘i⁄
 = ",ÑeopeningÜogs";

419 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

420 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

421 
SIGIO
:

422 
a˘i⁄
 = ", ignoring";

429 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

430 "sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄
);

432 i‡(
ign‹e
) {

433 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 0,

439 i‡(
signo
 =
SIGCHLD
) {

440 
	`ngx_¥o˚ss_gë_°©us
();

443 
	`ngx_£t_î∫o
(
îr
);

444 
	}
}

448 
	$ngx_¥o˚ss_gë_°©us
()

450 
°©us
;

451 *
¥o˚ss
;

452 
ngx_pid_t
 
pid
;

453 
ngx_îr_t
 
îr
;

454 
ngx_öt_t
 
i
;

455 
ngx_uöt_t
 
⁄e
;

457 
⁄e
 = 0;

460 
pid
 = 
	`waôpid
(-1, &
°©us
, 
WNOHANG
);

462 i‡(
pid
 == 0) {

466 i‡(
pid
 == -1) {

467 
îr
 = 
ngx_î∫o
;

469 i‡(
îr
 =
NGX_EINTR
) {

473 i‡(
îr
 =
NGX_ECHILD
 && 
⁄e
) {

486 i‡(
îr
 =
NGX_ECHILD
) {

487 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ngx_cy˛e
->
log
, 
îr
,

492 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

498 
⁄e
 = 1;

499 
¥o˚ss
 = "unknownÖrocess";

501 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

502 i‡(
ngx_¥o˚s£s
[
i
].
pid
 ==Öid) {

503 
ngx_¥o˚s£s
[
i
].
°©us
 = status;

504 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

505 
¥o˚ss
 = 
ngx_¥o˚s£s
[
i
].
«me
;

510 i‡(
	`WTERMSIG
(
°©us
)) {

511 #ifde‡
WCOREDUMP


512 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

514 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
),

515 
	`WCOREDUMP
(
°©us
) ? " (core dumped)" : "");

517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

519 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
));

523 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

525 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

528 i‡(
	`WEXITSTATUS
(
°©us
Ë=2 && 
ngx_¥o˚s£s
[
i
].
ª•awn
) {

529 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

532 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

533 
ngx_¥o˚s£s
[
i
].
ª•awn
 = 0;

536 
	`ngx_u∆ock_muãxes
(
pid
);

538 
	}
}

542 
	$ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
)

544 
ngx_uöt_t
 
i
;

545 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

546 
ngx_li°_∑π_t
 *
∑π
;

547 
ngx_¶ab_poﬁ_t
 *
•
;

554 i‡(
ngx_ac˚±_muãx_±r
) {

555 (Ë
	`ngx_shmtx_f‹˚_u∆ock
(&
ngx_ac˚±_muãx
, 
pid
);

563 
∑π
 = (
ngx_li°_∑π_t
 *Ë&
ngx_cy˛e
->
sh¨ed_mem‹y
.part;

564 
shm_z⁄e
 = 
∑π
->
ñts
;

566 
i
 = 0; ; i++) {

568 i‡(
i
 >
∑π
->
√…s
) {

569 i‡(
∑π
->
√xt
 =
NULL
) {

572 
∑π
 =Ö¨t->
√xt
;

573 
shm_z⁄e
 = 
∑π
->
ñts
;

574 
i
 = 0;

577 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
[
i
].
shm
.
addr
;

579 i‡(
	`ngx_shmtx_f‹˚_u∆ock
(&
•
->
muãx
, 
pid
)) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

582 &
shm_z⁄e
[
i
].
shm
.
«me
, 
pid
);

585 
	}
}

589 
	$ngx_debug_poöt
()

591 
ngx_c‹e_c⁄f_t
 *
ccf
;

593 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

594 
ngx_c‹e_moduÀ
);

596 
ccf
->
debug_poöts
) {

598 
NGX_DEBUG_POINTS_STOP
:

599 
	`øi£
(
SIGSTOP
);

602 
NGX_DEBUG_POINTS_ABORT
:

603 
	`ngx_ab‹t
();

605 
	}
}

608 
ngx_öt_t


609 
	$ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
«me
, 
ngx_öt_t
 
pid
)

611 
ngx_sig«l_t
 *
sig
;

613 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

614 i‡(
	`ngx_°rcmp
(
«me
, 
sig
->name) == 0) {

615 i‡(
	`kûl
(
pid
, 
sig
->
signo
) != -1) {

619 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

620 "kûl(%P, %dËÁûed", 
pid
, 
sig
->
signo
);

625 
	}
}

	@src/os/unix/ngx_process.h

8 #i‚de‡
_NGX_PROCESS_H_INCLUDED_


9 
	#_NGX_PROCESS_H_INCLUDED_


	)

12 
	~<ngx_£èfföôy.h
>

13 
	~<ngx_£çro˘ôÀ.h
>

16 
pid_t
 
	tngx_pid_t
;

18 
	#NGX_INVALID_PID
 -1

	)

20 (*
	tngx_•awn_¥oc_±
Ë(
	tngx_cy˛e_t
 *
	tcy˛e
, *
	td©a
);

23 
ngx_pid_t
 
pid
;

24 
°©us
;

25 
ngx_sockë_t
 
ch™√l
[2];

27 
ngx_•awn_¥oc_±
 
¥oc
;

28 *
d©a
;

29 *
«me
;

31 
ª•awn
:1;

32 
ju°_•awn
:1;

33 
dëached
:1;

34 
exôög
:1;

35 
exôed
:1;

36 } 
	tngx_¥o˚ss_t
;

40 *
∑th
;

41 *
«me
;

42 *c⁄° *
¨gv
;

43 *c⁄° *
ívp
;

44 } 
	tngx_exec_˘x_t
;

47 
	#NGX_MAX_PROCESSES
 1024

	)

49 
	#NGX_PROCESS_NORESPAWN
 -1

	)

50 
	#NGX_PROCESS_JUST_SPAWN
 -2

	)

51 
	#NGX_PROCESS_RESPAWN
 -3

	)

52 
	#NGX_PROCESS_JUST_RESPAWN
 -4

	)

53 
	#NGX_PROCESS_DETACHED
 -5

	)

56 
	#ngx_gëpid
 
gëpid


	)

58 #i‚de‡
ngx_log_pid


59 
	#ngx_log_pid
 
ngx_pid


	)

63 
ngx_pid_t
 
	`ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
,

64 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
, *
«me
, 
ngx_öt_t
 
ª•awn
);

65 
ngx_pid_t
 
	`ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
	`ngx_öô_sig«ls
(
ngx_log_t
 *
log
);

67 
	`ngx_debug_poöt
();

70 #i‡(
NGX_HAVE_SCHED_YIELD
)

71 
	#ngx_sched_yõld
(Ë
	`sched_yõld
()

	)

73 
	#ngx_sched_yõld
(Ë
	`u¶ìp
(1)

	)

77 
ngx_¨gc
;

78 **
ngx_¨gv
;

79 **
ngx_os_¨gv
;

81 
ngx_pid_t
 
ngx_pid
;

82 
ngx_sockë_t
 
ngx_ch™√l
;

83 
ngx_öt_t
 
ngx_¥o˚ss_¶Ÿ
;

84 
ngx_öt_t
 
ngx_œ°_¥o˚ss
;

85 
ngx_¥o˚ss_t
 
ngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

	@src/os/unix/ngx_process_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

14 
ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,

15 
ngx_öt_t
 
ty≥
);

16 
ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
,

17 
ngx_uöt_t
 
ª•awn
);

18 
ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
);

19 
ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
);

20 
ngx_uöt_t
 
ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

23 
ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
);

24 
ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
);

26 #i‡(
NGX_THREADS
)

27 
ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
);

28 
ngx_thªad_vÆue_t
 
ngx_w‹kî_thªad_cy˛e
(*
d©a
);

30 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

31 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

35 
ngx_uöt_t
 
	gngx_¥o˚ss
;

36 
ngx_pid_t
 
	gngx_pid
;

37 
ngx_uöt_t
 
	gngx_thªaded
;

39 
sig_©omic_t
 
	gngx_ª≠
;

40 
sig_©omic_t
 
	gngx_sigio
;

41 
sig_©omic_t
 
	gngx_sigÆrm
;

42 
sig_©omic_t
 
	gngx_ãrmö©e
;

43 
sig_©omic_t
 
	gngx_quô
;

44 
sig_©omic_t
 
	gngx_debug_quô
;

45 
ngx_uöt_t
 
	gngx_exôög
;

46 
sig_©omic_t
 
	gngx_ªc⁄figuª
;

47 
sig_©omic_t
 
	gngx_ª›í
;

49 
sig_©omic_t
 
	gngx_ch™ge_bö¨y
;

50 
ngx_pid_t
 
	gngx_√w_bö¨y
;

51 
ngx_uöt_t
 
	gngx_öhîôed
;

52 
ngx_uöt_t
 
	gngx_d´m⁄ized
;

54 
sig_©omic_t
 
	gngx_nﬂc˚±
;

55 
ngx_uöt_t
 
	gngx_nﬂc˚±ög
;

56 
ngx_uöt_t
 
	gngx_ª°¨t
;

59 #i‡(
NGX_THREADS
)

60 vﬁ©ûê
ngx_thªad_t
 
	gngx_thªads
[
NGX_MAX_THREADS
];

61 
ngx_öt_t
 
	gngx_thªads_n
;

65 
u_ch¨
 
	gma°î_¥o˚ss
[] = "masterÖrocess";

68 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_m™agî_˘x
 = {

69 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
, "cache managerÖrocess", 0

72 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_lﬂdî_˘x
 = {

73 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
, "cacheÜoaderÖrocess", 60000

77 
ngx_cy˛e_t
 
	gngx_exô_cy˛e
;

78 
ngx_log_t
 
	gngx_exô_log
;

79 
ngx_›í_fûe_t
 
	gngx_exô_log_fûe
;

83 
	$ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

85 *
tôÀ
;

86 
u_ch¨
 *
p
;

87 
size_t
 
size
;

88 
ngx_öt_t
 
i
;

89 
ngx_uöt_t
 
n
, 
sigio
;

90 
sig£t_t
 
£t
;

91 
ôimîvÆ
 
ôv
;

92 
ngx_uöt_t
 
live
;

93 
ngx_m£c_t
 
dñay
;

94 
ngx_li°íög_t
 *
ls
;

95 
ngx_c‹e_c⁄f_t
 *
ccf
;

97 
	`sigem±y£t
(&
£t
);

98 
	`sigadd£t
(&
£t
, 
SIGCHLD
);

99 
	`sigadd£t
(&
£t
, 
SIGALRM
);

100 
	`sigadd£t
(&
£t
, 
SIGIO
);

101 
	`sigadd£t
(&
£t
, 
SIGINT
);

102 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

103 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

104 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
));

105 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

106 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

107 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

109 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

114 
	`sigem±y£t
(&
£t
);

117 
size
 = (
ma°î_¥o˚ss
);

119 
i
 = 0; i < 
ngx_¨gc
; i++) {

120 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

123 
tôÀ
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
size
);

125 
p
 = 
	`ngx_˝ymem
(
tôÀ
, 
ma°î_¥o˚ss
, (master_process) - 1);

126 
i
 = 0; i < 
ngx_¨gc
; i++) {

127 *
p
++ = ' ';

128 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
], 
size
);

131 
	`ngx_£çro˘ôÀ
(
tôÀ
);

134 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

136 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

137 
NGX_PROCESS_RESPAWN
);

138 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

140 
ngx_√w_bö¨y
 = 0;

141 
dñay
 = 0;

142 
sigio
 = 0;

143 
live
 = 1;

146 i‡(
dñay
) {

147 i‡(
ngx_sigÆrm
) {

148 
sigio
 = 0;

149 
dñay
 *= 2;

150 
ngx_sigÆrm
 = 0;

153 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

154 "ãrmö©i⁄ cy˛e: %d", 
dñay
);

156 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 0;

157 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = 0;

158 
ôv
.
ô_vÆue
.
tv_£c
 = 
dñay
 / 1000;

159 
ôv
.
ô_vÆue
.
tv_u£c
 = (
dñay
 % 1000 ) * 1000;

161 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

162 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

167 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "sigsuspend");

169 
	`sigsu•íd
(&
£t
);

171 
	`ngx_time_upd©e
();

173 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

174 "wakêup, sigiÿ%i", 
sigio
);

176 i‡(
ngx_ª≠
) {

177 
ngx_ª≠
 = 0;

178 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "reap children");

180 
live
 = 
	`ngx_ª≠_chûdªn
(
cy˛e
);

183 i‡(!
live
 && (
ngx_ãrmö©e
 || 
ngx_quô
)) {

184 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

187 i‡(
ngx_ãrmö©e
) {

188 i‡(
dñay
 == 0) {

189 
dñay
 = 50;

192 i‡(
sigio
) {

193 
sigio
--;

197 
sigio
 = 
ccf
->
w‹kî_¥o˚s£s
 + 2 ;

199 i‡(
dñay
 > 1000) {

200 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
, 
SIGKILL
);

202 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

203 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

209 i‡(
ngx_quô
) {

210 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

211 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

213 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

214 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

215 i‡(
	`ngx_˛o£_sockë
(
ls
[
n
].
fd
) == -1) {

216 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

217 
ngx_˛o£_sockë_n
 " %V failed",

218 &
ls
[
n
].
addr_ãxt
);

221 
cy˛e
->
li°íög
.
√…s
 = 0;

226 i‡(
ngx_ªc⁄figuª
) {

227 
ngx_ªc⁄figuª
 = 0;

229 i‡(
ngx_√w_bö¨y
) {

230 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

231 
NGX_PROCESS_RESPAWN
);

232 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

233 
ngx_nﬂc˚±ög
 = 0;

238 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

240 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

241 i‡(
cy˛e
 =
NULL
) {

242 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

246 
ngx_cy˛e
 = 
cy˛e
;

247 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

248 
ngx_c‹e_moduÀ
);

249 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

250 
NGX_PROCESS_JUST_RESPAWN
);

251 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 1);

254 
	`ngx_m¶ìp
(100);

256 
live
 = 1;

257 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

258 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

261 i‡(
ngx_ª°¨t
) {

262 
ngx_ª°¨t
 = 0;

263 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

264 
NGX_PROCESS_RESPAWN
);

265 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

266 
live
 = 1;

269 i‡(
ngx_ª›í
) {

270 
ngx_ª›í
 = 0;

271 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

272 
	`ngx_ª›í_fûes
(
cy˛e
, 
ccf
->
u£r
);

273 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

274 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

277 i‡(
ngx_ch™ge_bö¨y
) {

278 
ngx_ch™ge_bö¨y
 = 0;

279 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "changing binary");

280 
ngx_√w_bö¨y
 = 
	`ngx_exec_√w_bö¨y
(
cy˛e
, 
ngx_¨gv
);

283 i‡(
ngx_nﬂc˚±
) {

284 
ngx_nﬂc˚±
 = 0;

285 
ngx_nﬂc˚±ög
 = 1;

286 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

287 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

290 
	}
}

294 
	$ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

296 
ngx_uöt_t
 
i
;

298 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

300 
	`exô
(2);

303 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

304 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

305 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

307 
	`exô
(2);

313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

315 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

317 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

319 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

320 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

321 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

325 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

328 i‡(
ngx_ªc⁄figuª
) {

329 
ngx_ªc⁄figuª
 = 0;

330 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

332 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

333 i‡(
cy˛e
 =
NULL
) {

334 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

338 
ngx_cy˛e
 = 
cy˛e
;

341 i‡(
ngx_ª›í
) {

342 
ngx_ª›í
 = 0;

343 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

344 
	`ngx_ª›í_fûes
(
cy˛e
, (
ngx_uid_t
) -1);

347 
	}
}

351 
	$ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,Çgx_öt_à
ty≥
)

353 
ngx_öt_t
 
i
;

354 
ngx_ch™√l_t
 
ch
;

356 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "start workerÖrocesses");

358 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

360 
i
 = 0; i < 
n
; i++) {

362 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_w‹kî_¥o˚ss_cy˛e
,

363 (*Ë(
öçå_t
Ë
i
, "w‹kîÖro˚ss", 
ty≥
);

365 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

366 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

367 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

369 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

371 
	}
}

375 
	$ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ª•awn
)

377 
ngx_uöt_t
 
i
, 
m™agî
, 
lﬂdî
;

378 
ngx_∑th_t
 **
∑th
;

379 
ngx_ch™√l_t
 
ch
;

381 
m™agî
 = 0;

382 
lﬂdî
 = 0;

384 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

385 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

387 i‡(
∑th
[
i
]->
m™agî
) {

388 
m™agî
 = 1;

391 i‡(
∑th
[
i
]->
lﬂdî
) {

392 
lﬂdî
 = 1;

396 i‡(
m™agî
 == 0) {

400 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

401 &
ngx_ˇche_m™agî_˘x
, "cache managerÖrocess",

402 
ª•awn
 ? 
NGX_PROCESS_JUST_RESPAWN
 : 
NGX_PROCESS_RESPAWN
);

404 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

405 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

406 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

407 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

409 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

411 i‡(
lﬂdî
 == 0) {

415 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

416 &
ngx_ˇche_lﬂdî_˘x
, "cacheÜoaderÖrocess",

417 
ª•awn
 ? 
NGX_PROCESS_JUST_SPAWN
 : 
NGX_PROCESS_NORESPAWN
);

419 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

420 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

421 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

422 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

424 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

425 
	}
}

429 
	$ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
)

431 
ngx_öt_t
 
i
;

433 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

435 i‡(
i
 =
ngx_¥o˚ss_¶Ÿ


436 || 
ngx_¥o˚s£s
[
i
].
pid
 == -1

437 || 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] == -1)

442 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

444 
ch
->
¶Ÿ
, ch->
pid
, ch->
fd
,

445 
i
, 
ngx_¥o˚s£s
[i].
pid
,

446 
ngx_¥o˚s£s
[
i
].
ch™√l
[0]);

450 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

451 
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

453 
	}
}

457 
	$ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
)

459 
ngx_öt_t
 
i
;

460 
ngx_îr_t
 
îr
;

461 
ngx_ch™√l_t
 
ch
;

463 #i‡(
NGX_BROKEN_SCM_RIGHTS
)

465 
ch
.
comm™d
 = 0;

469 
signo
) {

471 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

472 
ch
.
comm™d
 = 
NGX_CMD_QUIT
;

475 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

476 
ch
.
comm™d
 = 
NGX_CMD_TERMINATE
;

479 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

480 
ch
.
comm™d
 = 
NGX_CMD_REOPEN
;

484 
ch
.
comm™d
 = 0;

489 
ch
.
fd
 = -1;

492 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

494 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

496 
i
,

497 
ngx_¥o˚s£s
[
i
].
pid
,

498 
ngx_¥o˚s£s
[
i
].
exôög
,

499 
ngx_¥o˚s£s
[
i
].
exôed
,

500 
ngx_¥o˚s£s
[
i
].
dëached
,

501 
ngx_¥o˚s£s
[
i
].
ª•awn
,

502 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

504 i‡(
ngx_¥o˚s£s
[
i
].
dëached
 ||Çgx_¥o˚s£s[i].
pid
 == -1) {

508 i‡(
ngx_¥o˚s£s
[
i
].
ju°_•awn
) {

509 
ngx_¥o˚s£s
[
i
].
ju°_•awn
 = 0;

513 i‡(
ngx_¥o˚s£s
[
i
].
exôög


514 && 
signo
 =
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
))

519 i‡(
ch
.
comm™d
) {

520 i‡(
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

521 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
)

522 =
NGX_OK
)

524 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

525 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

532 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

533 "kû»(%P, %d)" , 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

535 i‡(
	`kûl
(
ngx_¥o˚s£s
[
i
].
pid
, 
signo
) == -1) {

536 
îr
 = 
ngx_î∫o
;

537 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

538 "kûl(%P, %dËÁûed", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

540 i‡(
îr
 =
NGX_ESRCH
) {

541 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

542 
ngx_¥o˚s£s
[
i
].
exôög
 = 0;

543 
ngx_ª≠
 = 1;

549 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

550 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

553 
	}
}

556 
ngx_uöt_t


557 
	$ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
)

559 
ngx_öt_t
 
i
, 
n
;

560 
ngx_uöt_t
 
live
;

561 
ngx_ch™√l_t
 
ch
;

562 
ngx_c‹e_c⁄f_t
 *
ccf
;

564 
ch
.
comm™d
 = 
NGX_CMD_CLOSE_CHANNEL
;

565 
ch
.
fd
 = -1;

567 
live
 = 0;

568 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

570 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

572 
i
,

573 
ngx_¥o˚s£s
[
i
].
pid
,

574 
ngx_¥o˚s£s
[
i
].
exôög
,

575 
ngx_¥o˚s£s
[
i
].
exôed
,

576 
ngx_¥o˚s£s
[
i
].
dëached
,

577 
ngx_¥o˚s£s
[
i
].
ª•awn
,

578 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

580 i‡(
ngx_¥o˚s£s
[
i
].
pid
 == -1) {

584 i‡(
ngx_¥o˚s£s
[
i
].
exôed
) {

586 i‡(!
ngx_¥o˚s£s
[
i
].
dëached
) {

587 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
, 
cy˛e
->
log
);

589 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] = -1;

590 
ngx_¥o˚s£s
[
i
].
ch™√l
[1] = -1;

592 
ch
.
pid
 = 
ngx_¥o˚s£s
[
i
].pid;

593 
ch
.
¶Ÿ
 = 
i
;

595 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

596 i‡(
ngx_¥o˚s£s
[
n
].
exôed


597 || 
ngx_¥o˚s£s
[
n
].
pid
 == -1

598 || 
ngx_¥o˚s£s
[
n
].
ch™√l
[0] == -1)

603 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

605 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[
n
].pid);

609 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
n
].
ch™√l
[0],

610 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

614 i‡(
ngx_¥o˚s£s
[
i
].
ª•awn


615 && !
ngx_¥o˚s£s
[
i
].
exôög


616 && !
ngx_ãrmö©e


617 && !
ngx_quô
)

619 i‡(
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_¥o˚s£s
[
i
].
¥oc
,

620 
ngx_¥o˚s£s
[
i
].
d©a
,

621 
ngx_¥o˚s£s
[
i
].
«me
, i)

622 =
NGX_INVALID_PID
)

624 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

626 
ngx_¥o˚s£s
[
i
].
«me
);

631 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

632 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

633 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

634 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

636 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

638 
live
 = 1;

643 i‡(
ngx_¥o˚s£s
[
i
].
pid
 =
ngx_√w_bö¨y
) {

645 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

646 
ngx_c‹e_moduÀ
);

648 i‡(
	`ngx_ª«me_fûe
((*Ë
ccf
->
ﬁdpid
.
d©a
,

649 (*Ë
ccf
->
pid
.
d©a
)

650 =
NGX_FILE_ERROR
)

652 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

653 
ngx_ª«me_fûe_n
 " %s backÅo %s failed "

655 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
ngx_¨gv
[0]);

658 
ngx_√w_bö¨y
 = 0;

659 i‡(
ngx_nﬂc˚±ög
) {

660 
ngx_ª°¨t
 = 1;

661 
ngx_nﬂc˚±ög
 = 0;

665 i‡(
i
 =
ngx_œ°_¥o˚ss
 - 1) {

666 
ngx_œ°_¥o˚ss
--;

669 
ngx_¥o˚s£s
[
i
].
pid
 = -1;

672 } i‡(
ngx_¥o˚s£s
[
i
].
exôög
 || !ngx_¥o˚s£s[i].
dëached
) {

673 
live
 = 1;

677  
live
;

678 
	}
}

682 
	$ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

684 
ngx_uöt_t
 
i
;

686 
	`ngx_dñëe_pidfûe
(
cy˛e
);

688 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exit");

690 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

691 i‡(
ngx_moduÀs
[
i
]->
exô_ma°î
) {

692 
ngx_moduÀs
[
i
]->
	`exô_ma°î
(
cy˛e
);

696 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

705 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

707 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

708 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

710 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

711 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

712 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

713 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

715 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

717 
	`exô
(0);

718 
	}
}

722 
	$ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

724 
ngx_öt_t
 
w‹kî
 = (
öçå_t
Ë
d©a
;

726 
ngx_uöt_t
 
i
;

727 
ngx_c⁄√˘i⁄_t
 *
c
;

729 
ngx_¥o˚ss
 = 
NGX_PROCESS_WORKER
;

731 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, 
w‹kî
);

733 
	`ngx_£çro˘ôÀ
("workerÖrocess");

735 #i‡(
NGX_THREADS
)

737 
ngx_öt_t
 
n
;

738 
ngx_îr_t
 
îr
;

739 
ngx_c‹e_c⁄f_t
 *
ccf
;

741 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

743 i‡(
ngx_thªads_n
) {

744 i‡(
	`ngx_öô_thªads
(
ngx_thªads_n
, 
ccf
->
thªad_°ack_size
, 
cy˛e
)

745 =
NGX_ERROR
)

748 
	`exô
(2);

751 
îr
 = 
	`ngx_thªad_key_¸óã
(&
ngx_c‹e_és_key
);

752 i‡(
îr
 != 0) {

753 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

754 
ngx_thªad_key_¸óã_n
 " failed");

756 
	`exô
(2);

759 
n
 = 0;Ç < 
ngx_thªads_n
;Ç++) {

761 
ngx_thªads
[
n
].
cv
 = 
	`ngx_c⁄d_öô
(
cy˛e
->
log
);

763 i‡(
ngx_thªads
[
n
].
cv
 =
NULL
) {

765 
	`exô
(2);

768 i‡(
	`ngx_¸óã_thªad
((
ngx_tid_t
 *Ë&
ngx_thªads
[
n
].
tid
,

769 
ngx_w‹kî_thªad_cy˛e
,

770 (*Ë&
ngx_thªads
[
n
], 
cy˛e
->
log
)

774 
	`exô
(2);

783 i‡(
ngx_exôög
) {

785 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

787 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

791 i‡(
c
[
i
].
fd
 !-1 && c[i].
idÀ
) {

792 
c
[
i
].
˛o£
 = 1;

793 
c
[
i
].
ªad
->
	`h™dÀr
(c[i].read);

797 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =ngx_evít_timî_rbåì.
£¡öñ
)

799 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

801 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

805 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

807 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

809 i‡(
ngx_ãrmö©e
) {

810 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

812 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

815 i‡(
ngx_quô
) {

816 
ngx_quô
 = 0;

817 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

819 
	`ngx_£çro˘ôÀ
("workerÖrocess is shutting down");

821 i‡(!
ngx_exôög
) {

822 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

823 
ngx_exôög
 = 1;

827 i‡(
ngx_ª›í
) {

828 
ngx_ª›í
 = 0;

829 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

830 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

833 
	}
}

837 
	$ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
)

839 
sig£t_t
 
£t
;

840 
uöt64_t
 
˝u_afföôy
;

841 
ngx_öt_t
 
n
;

842 
ngx_uöt_t
 
i
;

843 
æimô
 
æmt
;

844 
ngx_c‹e_c⁄f_t
 *
ccf
;

845 
ngx_li°íög_t
 *
ls
;

847 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

849 
	`exô
(2);

852 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

854 i‡(
w‹kî
 >0 && 
ccf
->
¥i‹ôy
 != 0) {

855 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 
ccf
->
¥i‹ôy
) == -1) {

856 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

857 "£çri‹ôy(%dËÁûed", 
ccf
->
¥i‹ôy
);

861 i‡(
ccf
->
æimô_nofûe
 !
NGX_CONF_UNSET
) {

862 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

863 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

865 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

866 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

868 
ccf
->
æimô_nofûe
);

872 i‡(
ccf
->
æimô_c‹e
 !
NGX_CONF_UNSET
) {

873 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

874 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

876 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æmt
) == -1) {

877 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

879 
ccf
->
æimô_c‹e
);

883 #ifde‡
RLIMIT_SIGPENDING


884 i‡(
ccf
->
æimô_sig≥ndög
 !
NGX_CONF_UNSET
) {

885 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

886 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

888 i‡(
	`£ålimô
(
RLIMIT_SIGPENDING
, &
æmt
) == -1) {

889 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

891 
ccf
->
æimô_sig≥ndög
);

896 i‡(
	`gëeuid
() == 0) {

897 i‡(
	`£tgid
(
ccf
->
group
) == -1) {

898 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

899 "£tgid(%dËÁûed", 
ccf
->
group
);

901 
	`exô
(2);

904 i‡(
	`öôgroups
(
ccf
->
u£∫ame
, ccf->
group
) == -1) {

905 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

907 
ccf
->
u£∫ame
, ccf->
group
);

910 i‡(
	`£tuid
(
ccf
->
u£r
) == -1) {

911 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

912 "£tuid(%dËÁûed", 
ccf
->
u£r
);

914 
	`exô
(2);

918 i‡(
w‹kî
 >= 0) {

919 
˝u_afföôy
 = 
	`ngx_gë_˝u_afföôy
(
w‹kî
);

921 i‡(
˝u_afföôy
) {

922 
	`ngx_£èfföôy
(
˝u_afföôy
, 
cy˛e
->
log
);

926 #i‡(
NGX_HAVE_PR_SET_DUMPABLE
)

930 i‡(
	`¥˘l
(
PR_SET_DUMPABLE
, 1, 0, 0, 0) == -1) {

931 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

937 i‡(
ccf
->
w‹kög_dúe˘‹y
.
Àn
) {

938 i‡(
	`chdú
((*Ë
ccf
->
w‹kög_dúe˘‹y
.
d©a
) == -1) {

939 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

940 "chdú(\"%s\"ËÁûed", 
ccf
->
w‹kög_dúe˘‹y
.
d©a
);

942 
	`exô
(2);

946 
	`sigem±y£t
(&
£t
);

948 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
£t
, 
NULL
) == -1) {

949 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

957 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

958 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

959 
ls
[
i
].
¥evious
 = 
NULL
;

962 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

963 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

964 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

966 
	`exô
(2);

971 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

973 i‡(
ngx_¥o˚s£s
[
n
].
pid
 == -1) {

977 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
) {

981 i‡(
ngx_¥o˚s£s
[
n
].
ch™√l
[1] == -1) {

985 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
n
].
ch™√l
[1]) == -1) {

986 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

991 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0]) == -1) {

992 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

997 
ngx_œ°_¥o˚ss
 = 0;

1000 i‡(
	`ngx_add_ch™√l_evít
(
cy˛e
, 
ngx_ch™√l
, 
NGX_READ_EVENT
,

1001 
ngx_ch™√l_h™dÀr
)

1002 =
NGX_ERROR
)

1005 
	`exô
(2);

1007 
	}
}

1011 
	$ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1013 
ngx_uöt_t
 
i
;

1014 
ngx_c⁄√˘i⁄_t
 *
c
;

1016 #i‡(
NGX_THREADS
)

1017 
ngx_ãrmö©e
 = 1;

1019 
	`ngx_wakeup_w‹kî_thªads
(
cy˛e
);

1022 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1023 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

1024 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

1028 i‡(
ngx_exôög
) {

1029 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

1030 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

1031 i‡(
c
[
i
].
fd
 != -1

1032 && 
c
[
i
].
ªad


1033 && !
c
[
i
].
ªad
->
ac˚±


1034 && !
c
[
i
].
ªad
->
ch™√l


1035 && !
c
[
i
].
ªad
->
ªsﬁvî
)

1037 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

1039 
c
[
i
].
fd
, i);

1040 
ngx_debug_quô
 = 1;

1044 i‡(
ngx_debug_quô
) {

1045 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "aborting");

1046 
	`ngx_debug_poöt
();

1057 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

1059 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

1060 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

1062 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

1063 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

1064 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

1065 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

1067 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

1069 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0, "exit");

1071 
	`exô
(0);

1072 
	}
}

1076 
	$ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
)

1078 
ngx_öt_t
 
n
;

1079 
ngx_ch™√l_t
 
ch
;

1080 
ngx_c⁄√˘i⁄_t
 *
c
;

1082 i‡(
ev
->
timedout
) {

1083 
ev
->
timedout
 = 0;

1087 
c
 = 
ev
->
d©a
;

1089 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "channel handler");

1093 
n
 = 
	`ngx_ªad_ch™√l
(
c
->
fd
, &
ch
, (
ngx_ch™√l_t
), 
ev
->
log
);

1095 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "ch™√l: %i", 
n
);

1097 i‡(
n
 =
NGX_ERROR
) {

1099 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

1100 
	`ngx_dñ_c⁄n
(
c
, 0);

1103 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1107 i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

1108 i‡(
	`ngx_add_evít
(
ev
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

1113 i‡(
n
 =
NGX_AGAIN
) {

1117 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1118 "ch™√»comm™d: %d", 
ch
.
comm™d
);

1120 
ch
.
comm™d
) {

1122 
NGX_CMD_QUIT
:

1123 
ngx_quô
 = 1;

1126 
NGX_CMD_TERMINATE
:

1127 
ngx_ãrmö©e
 = 1;

1130 
NGX_CMD_REOPEN
:

1131 
ngx_ª›í
 = 1;

1134 
NGX_CMD_OPEN_CHANNEL
:

1136 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1138 
ch
.
¶Ÿ
, ch.
pid
, ch.
fd
);

1140 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
pid
 = ch.pid;

1141 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = ch.
fd
;

1144 
NGX_CMD_CLOSE_CHANNEL
:

1146 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1148 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[ch.slot].pid,

1149 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]);

1151 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]) == -1) {

1152 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

1156 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = -1;

1160 
	}
}

1163 #i‡(
NGX_THREADS
)

1166 
	$ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
)

1168 
ngx_öt_t
 
i
;

1169 
ngx_uöt_t
 
live
;

1173 
live
 = 0;

1175 
i
 = 0; i < 
ngx_thªads_n
; i++) {

1176 i‡(
ngx_thªads
[
i
].
°©e
 < 
NGX_THREAD_EXIT
) {

1177 i‡(
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
Ë=
NGX_ERROR
) {

1178 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1181 
live
 = 1;

1185 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_EXIT
) {

1186 
	`ngx_thªad_joö
(
ngx_thªads
[
i
].
tid
, 
NULL
);

1187 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1191 i‡(
live
 == 0) {

1192 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1196 
	`ngx_d⁄e_evíts
(
cy˛e
);

1197 
	`ngx_muãx_de°roy
(
ngx_evít_timî_muãx
);

1198 
	`ngx_muãx_de°roy
(
ngx_po°ed_evíts_muãx
);

1203 
	`ngx_sched_yõld
();

1205 
	}
}

1208 
ngx_thªad_vÆue_t


1209 
	$ngx_w‹kî_thªad_cy˛e
(*
d©a
)

1211 
ngx_thªad_t
 *
thr
 = 
d©a
;

1213 
sig£t_t
 
£t
;

1214 
ngx_îr_t
 
îr
;

1215 
ngx_c‹e_és_t
 *
és
;

1216 
ngx_cy˛e_t
 *
cy˛e
;

1218 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1220 
	`sigem±y£t
(&
£t
);

1221 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

1222 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

1223 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

1225 
îr
 = 
	`ngx_thªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
);

1226 i‡(
îr
) {

1227 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1228 
ngx_thªad_sigmask_n
 " failed");

1229  (
ngx_thªad_vÆue_t
) 1;

1232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1233 "thªad " 
NGX_TID_T_FMT
 " sèπed", 
	`ngx_thªad_£lf
());

1235 
	`ngx_£âhπôÀ
("workerÅhread");

1237 
és
 = 
	`ngx_ˇŒoc
((
ngx_c‹e_és_t
), 
cy˛e
->
log
);

1238 i‡(
és
 =
NULL
) {

1239  (
ngx_thªad_vÆue_t
) 1;

1242 
îr
 = 
	`ngx_thªad_£t_és
(
ngx_c‹e_és_key
, 
és
);

1243 i‡(
îr
 != 0) {

1244 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1245 
ngx_thªad_£t_és_n
 " failed");

1246  (
ngx_thªad_vÆue_t
) 1;

1249 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

1252 
thr
->
°©e
 = 
NGX_THREAD_FREE
;

1254 i‡(
	`ngx_c⁄d_waô
(
thr
->
cv
, 
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

1255  (
ngx_thªad_vÆue_t
) 1;

1258 i‡(
ngx_ãrmö©e
) {

1259 
thr
->
°©e
 = 
NGX_THREAD_EXIT
;

1261 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

1263 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1264 "thªad " 
NGX_TID_T_FMT
 " is done",

1265 
	`ngx_thªad_£lf
());

1267  (
ngx_thªad_vÆue_t
) 0;

1270 
thr
->
°©e
 = 
NGX_THREAD_BUSY
;

1272 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1273  (
ngx_thªad_vÆue_t
) 1;

1276 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1277  (
ngx_thªad_vÆue_t
) 1;

1280 i‡(
ngx_¥o˚ss_ch™ges
) {

1281 i‡(
	`ngx_¥o˚ss_ch™ges
(
cy˛e
, 1Ë=
NGX_ERROR
) {

1282  (
ngx_thªad_vÆue_t
) 1;

1286 
	}
}

1292 
	$ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

1294 
ngx_ˇche_m™agî_˘x_t
 *
˘x
 = 
d©a
;

1296 *
idít
[4];

1297 
ngx_evít_t
 
ev
;

1303 
ngx_¥o˚ss
 = 
NGX_PROCESS_HELPER
;

1305 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

1308 
cy˛e
->
c⁄√˘i⁄_n
 = 512;

1310 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, -1);

1312 
	`ngx_memzîo
(&
ev
, (
ngx_evít_t
));

1313 
ev
.
h™dÀr
 = 
˘x
->handler;

1314 
ev
.
d©a
 = 
idít
;

1315 
ev
.
log
 = 
cy˛e
->log;

1316 
idít
[3] = (*) -1;

1318 
ngx_u£_ac˚±_muãx
 = 0;

1320 
	`ngx_£çro˘ôÀ
(
˘x
->
«me
);

1322 
	`ngx_add_timî
(&
ev
, 
˘x
->
dñay
);

1326 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1327 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

1328 
	`exô
(0);

1331 i‡(
ngx_ª›í
) {

1332 
ngx_ª›í
 = 0;

1333 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

1334 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

1337 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

1339 
	}
}

1343 
	$ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1345 
time_t
 
√xt
, 
n
;

1346 
ngx_uöt_t
 
i
;

1347 
ngx_∑th_t
 **
∑th
;

1349 
√xt
 = 60 * 60;

1351 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

1352 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

1354 i‡(
∑th
[
i
]->
m™agî
) {

1355 
n
 = 
∑th
[
i
]->
	`m™agî
’©h[i]->
d©a
);

1357 
√xt
 = (
n
 <=Çext) ?Ç :Çext;

1359 
	`ngx_time_upd©e
();

1363 i‡(
√xt
 == 0) {

1364 
√xt
 = 1;

1367 
	`ngx_add_timî
(
ev
, 
√xt
 * 1000);

1368 
	}
}

1372 
	$ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1374 
ngx_uöt_t
 
i
;

1375 
ngx_∑th_t
 **
∑th
;

1376 
ngx_cy˛e_t
 *
cy˛e
;

1378 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1380 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

1381 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

1383 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1387 i‡(
∑th
[
i
]->
lﬂdî
) {

1388 
∑th
[
i
]->
	`lﬂdî
’©h[i]->
d©a
);

1389 
	`ngx_time_upd©e
();

1393 
	`exô
(0);

1394 
	}
}

	@src/os/unix/ngx_process_cycle.h

8 #i‚de‡
_NGX_PROCESS_CYCLE_H_INCLUDED_


9 
	#_NGX_PROCESS_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_CMD_OPEN_CHANNEL
 1

	)

17 
	#NGX_CMD_CLOSE_CHANNEL
 2

	)

18 
	#NGX_CMD_QUIT
 3

	)

19 
	#NGX_CMD_TERMINATE
 4

	)

20 
	#NGX_CMD_REOPEN
 5

	)

23 
	#NGX_PROCESS_SINGLE
 0

	)

24 
	#NGX_PROCESS_MASTER
 1

	)

25 
	#NGX_PROCESS_SIGNALLER
 2

	)

26 
	#NGX_PROCESS_WORKER
 3

	)

27 
	#NGX_PROCESS_HELPER
 4

	)

31 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

32 *
	m«me
;

33 
ngx_m£c_t
 
	mdñay
;

34 } 
	tngx_ˇche_m™agî_˘x_t
;

37 
ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

41 
ngx_uöt_t
 
ngx_¥o˚ss
;

42 
ngx_pid_t
 
ngx_pid
;

43 
ngx_pid_t
 
ngx_√w_bö¨y
;

44 
ngx_uöt_t
 
ngx_öhîôed
;

45 
ngx_uöt_t
 
ngx_d´m⁄ized
;

46 
ngx_uöt_t
 
ngx_thªaded
;

47 
ngx_uöt_t
 
ngx_exôög
;

49 
sig_©omic_t
 
ngx_ª≠
;

50 
sig_©omic_t
 
ngx_sigio
;

51 
sig_©omic_t
 
ngx_sigÆrm
;

52 
sig_©omic_t
 
ngx_quô
;

53 
sig_©omic_t
 
ngx_debug_quô
;

54 
sig_©omic_t
 
ngx_ãrmö©e
;

55 
sig_©omic_t
 
ngx_nﬂc˚±
;

56 
sig_©omic_t
 
ngx_ªc⁄figuª
;

57 
sig_©omic_t
 
ngx_ª›í
;

58 
sig_©omic_t
 
ngx_ch™ge_bö¨y
;

	@src/os/unix/ngx_pthread_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	g¡hªads
;

13 
ngx_uöt_t
 
	gmax_thªads
;

16 
±hªad_©å_t
 
	gthr_©å
;

19 
ngx_îr_t


20 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

21 *
¨g
, 
ngx_log_t
 *
log
)

23 
îr
;

25 i‡(
¡hªads
 >
max_thªads
) {

26 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

27 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

28  
NGX_ERROR
;

31 
îr
 = 
	`±hªad_¸óã
(
tid
, &
thr_©å
, 
func
, 
¨g
);

33 i‡(
îr
 != 0) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_create() failed");

35  
îr
;

38 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

39 "thªad i†¸óãd: " 
NGX_TID_T_FMT
, *
tid
);

41 
¡hªads
++;

43  
îr
;

44 
	}
}

47 
ngx_öt_t


48 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

50 
îr
;

52 
max_thªads
 = 
n
;

54 
îr
 = 
	`±hªad_©å_öô
(&
thr_©å
);

56 i‡(
îr
 != 0) {

57 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

59  
NGX_ERROR
;

62 
îr
 = 
	`±hªad_©å_£t°acksize
(&
thr_©å
, 
size
);

64 i‡(
îr
 != 0) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

67  
NGX_ERROR
;

70 
ngx_thªaded
 = 1;

72  
NGX_OK
;

73 
	}
}

76 
ngx_muãx_t
 *

77 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

79 
îr
;

80 
ngx_muãx_t
 *
m
;

82 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

83 i‡(
m
 =
NULL
) {

84  
NULL
;

87 
m
->
log
 =Üog;

89 
îr
 = 
	`±hªad_muãx_öô
(&
m
->
muãx
, 
NULL
);

91 i‡(
îr
 != 0) {

92 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

94  
NULL
;

97  
m
;

98 
	}
}

102 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

104 
îr
;

106 
îr
 = 
	`±hªad_muãx_de°roy
(&
m
->
muãx
);

108 i‡(
îr
 != 0) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

110 "±hªad_muãx_de°roy(%pËÁûed", 
m
);

113 
	`ngx_‰ì
(
m
);

114 
	}
}

118 
	$ngx_muãx_lock
(
ngx_muãx_t
 *
m
)

120 
îr
;

122 i‡(!
ngx_thªaded
) {

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "lock mutex %p", m);

128 
îr
 = 
	`±hªad_muãx_lock
(&
m
->
muãx
);

130 i‡(
îr
 != 0) {

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

132 "±hªad_muãx_lock(%pËÁûed", 
m
);

133 
	`ngx_ab‹t
();

136 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

139 
	}
}

142 
ngx_öt_t


143 
	$ngx_muãx_åylock
(
ngx_muãx_t
 *
m
)

145 
îr
;

147 i‡(!
ngx_thªaded
) {

148  
NGX_OK
;

151 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "tryÜock mutex %p", m);

153 
îr
 = 
	`±hªad_muãx_åylock
(&
m
->
muãx
);

155 i‡(
îr
 =
NGX_EBUSY
) {

156  
NGX_AGAIN
;

159 i‡(
îr
 != 0) {

160 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

161 "±hªad_muãx_åylock(%pËÁûed", 
m
);

162 
	`ngx_ab‹t
();

165 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

167  
NGX_OK
;

168 
	}
}

172 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

174 
îr
;

176 i‡(!
ngx_thªaded
) {

180 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "unlock mutex %p", m);

182 
îr
 = 
	`±hªad_muãx_u∆ock
(&
m
->
muãx
);

184 i‡(
îr
 != 0) {

185 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

186 "±hªad_muãx_u∆ock(%pËÁûed", 
m
);

187 
	`ngx_ab‹t
();

190 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p is unlocked", m);

193 
	}
}

196 
ngx_c⁄d_t
 *

197 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

199 
îr
;

200 
ngx_c⁄d_t
 *
cv
;

202 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

203 i‡(
cv
 =
NULL
) {

204  
NULL
;

207 
cv
->
log
 =Üog;

209 
îr
 = 
	`±hªad_c⁄d_öô
(&
cv
->
c⁄d
, 
NULL
);

211 i‡(
îr
 != 0) {

212 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

214  
NULL
;

217  
cv
;

218 
	}
}

222 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

224 
îr
;

226 
îr
 = 
	`±hªad_c⁄d_de°roy
(&
cv
->
c⁄d
);

228 i‡(
îr
 != 0) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

230 "±hªad_c⁄d_de°roy(%pËÁûed", 
cv
);

233 
	`ngx_‰ì
(
cv
);

234 
	}
}

237 
ngx_öt_t


238 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

240 
îr
;

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p wait", cv);

244 
îr
 = 
	`±hªad_c⁄d_waô
(&
cv
->
c⁄d
, &
m
->
muãx
);

246 i‡(
îr
 != 0) {

247 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

248 "±hªad_c⁄d_waô(%pËÁûed", 
cv
);

249  
NGX_ERROR
;

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

256  
NGX_OK
;

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

263 
îr
;

265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %pÅo signal", cv);

267 
îr
 = 
	`±hªad_c⁄d_sig«l
(&
cv
->
c⁄d
);

269 i‡(
îr
 != 0) {

270 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

271 "±hªad_c⁄d_sig«l(%pËÁûed", 
cv
);

272  
NGX_ERROR
;

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

277  
NGX_OK
;

278 
	}
}

	@src/os/unix/ngx_readv_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_IOVS
 16

	)

16 #i‡(
NGX_HAVE_KQUEUE
)

18 
ssize_t


19 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

21 
u_ch¨
 *
¥ev
;

22 
ssize_t
 
n
, 
size
;

23 
ngx_îr_t
 
îr
;

24 
ngx_¨øy_t
 
vec
;

25 
ngx_evít_t
 *
ªv
;

26 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

28 
ªv
 = 
c
->
ªad
;

30 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

31 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

33 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

35 i‡(
ªv
->
avaûabÀ
 == 0) {

36 i‡(
ªv
->
≥ndög_eof
) {

37 
ªv
->
ªady
 = 0;

38 
ªv
->
eof
 = 1;

40 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

43 i‡(
ªv
->
kq_î∫o
) {

44 
ªv
->
îr‹
 = 1;

45 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

46  
NGX_ERROR
;

52  
NGX_AGAIN
;

57 
¥ev
 = 
NULL
;

58 
iov
 = 
NULL
;

59 
size
 = 0;

61 
vec
.
ñts
 = 
iovs
;

62 
vec
.
√…s
 = 0;

63 
vec
.
size
 = (
iovec
);

64 
vec
.
«Œoc
 = 
NGX_IOVS
;

65 
vec
.
poﬁ
 = 
c
->pool;

69 
chaö
) {

70 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

71 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

74 i‡(
vec
.
√…s
 >
IOV_MAX
) {

78 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

79 i‡(
iov
 =
NULL
) {

80  
NGX_ERROR
;

83 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

84 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

87 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

88 
¥ev
 = 
chaö
->
buf
->
íd
;

89 
chaö
 = chaö->
√xt
;

92 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

93 "ªadv: %d,Üa°:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

95 
ªv
 = 
c
->
ªad
;

98 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

100 i‡(
n
 >= 0) {

101 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

102 
ªv
->
avaûabÀ
 -
n
;

109 i‡(
ªv
->
avaûabÀ
 <= 0) {

110 i‡(!
ªv
->
≥ndög_eof
) {

111 
ªv
->
ªady
 = 0;

114 i‡(
ªv
->
avaûabÀ
 < 0) {

115 
ªv
->
avaûabÀ
 = 0;

119 i‡(
n
 == 0) {

127 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

129 "%dávaûabÀ byãs", 
ªv
->
avaûabÀ
);

132 
ªv
->
eof
 = 1;

133 
ªv
->
avaûabÀ
 = 0;

136  
n
;

139 i‡(
n
 < 
size
) {

140 
ªv
->
ªady
 = 0;

143 i‡(
n
 == 0) {

144 
ªv
->
eof
 = 1;

147  
n
;

150 
îr
 = 
ngx_sockë_î∫o
;

152 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

153 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

155 
n
 = 
NGX_AGAIN
;

158 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

162 } 
îr
 =
NGX_EINTR
);

164 
ªv
->
ªady
 = 0;

166 i‡(
n
 =
NGX_ERROR
) {

167 
c
->
ªad
->
îr‹
 = 1;

170  
n
;

171 
	}
}

175 
ssize_t


176 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

178 
u_ch¨
 *
¥ev
;

179 
ssize_t
 
n
, 
size
;

180 
ngx_îr_t
 
îr
;

181 
ngx_¨øy_t
 
vec
;

182 
ngx_evít_t
 *
ªv
;

183 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

185 
¥ev
 = 
NULL
;

186 
iov
 = 
NULL
;

187 
size
 = 0;

189 
vec
.
ñts
 = 
iovs
;

190 
vec
.
√…s
 = 0;

191 
vec
.
size
 = (
iovec
);

192 
vec
.
«Œoc
 = 
NGX_IOVS
;

193 
vec
.
poﬁ
 = 
c
->pool;

197 
chaö
) {

198 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

199 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

202 i‡(
vec
.
√…s
 >
IOV_MAX
) {

206 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

207 i‡(
iov
 =
NULL
) {

208  
NGX_ERROR
;

211 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

212 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

215 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

216 
¥ev
 = 
chaö
->
buf
->
íd
;

217 
chaö
 = chaö->
√xt
;

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

221 "ªadv: %d:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

223 
ªv
 = 
c
->
ªad
;

226 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

228 i‡(
n
 == 0) {

229 
ªv
->
ªady
 = 0;

230 
ªv
->
eof
 = 1;

232  
n
;

234 } i‡(
n
 > 0) {

236 i‡(
n
 < 
size
 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
)) {

237 
ªv
->
ªady
 = 0;

240  
n
;

243 
îr
 = 
ngx_sockë_î∫o
;

245 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

246 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

248 
n
 = 
NGX_AGAIN
;

251 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

255 } 
îr
 =
NGX_EINTR
);

257 
ªv
->
ªady
 = 0;

259 i‡(
n
 =
NGX_ERROR
) {

260 
c
->
ªad
->
îr‹
 = 1;

263  
n
;

264 
	}
}

	@src/os/unix/ngx_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

25 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

27 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

29 i‡(
ªv
->
avaûabÀ
 == 0) {

30 i‡(
ªv
->
≥ndög_eof
) {

31 
ªv
->
ªady
 = 0;

32 
ªv
->
eof
 = 1;

34 i‡(
ªv
->
kq_î∫o
) {

35 
ªv
->
îr‹
 = 1;

36 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

38  
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ªv
->
kq_î∫o
,

45 
ªv
->
ªady
 = 0;

46  
NGX_AGAIN
;

52 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

54 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

57 i‡(
n
 >= 0) {

58 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

59 
ªv
->
avaûabÀ
 -
n
;

66 i‡(
ªv
->
avaûabÀ
 <= 0) {

67 i‡(!
ªv
->
≥ndög_eof
) {

68 
ªv
->
ªady
 = 0;

71 i‡(
ªv
->
avaûabÀ
 < 0) {

72 
ªv
->
avaûabÀ
 = 0;

76 i‡(
n
 == 0) {

83 
ªv
->
eof
 = 1;

84 
ªv
->
avaûabÀ
 = 0;

87  
n
;

90 i‡((
size_t
Ë
n
 < 
size
) {

91 
ªv
->
ªady
 = 0;

94 i‡(
n
 == 0) {

95 
ªv
->
eof
 = 1;

98  
n
;

101 
îr
 = 
ngx_sockë_î∫o
;

103 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

104 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

106 
n
 = 
NGX_AGAIN
;

109 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

113 } 
îr
 =
NGX_EINTR
);

115 
ªv
->
ªady
 = 0;

117 i‡(
n
 =
NGX_ERROR
) {

118 
ªv
->
îr‹
 = 1;

121  
n
;

122 
	}
}

126 
ssize_t


127 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

129 
ssize_t
 
n
;

130 
ngx_îr_t
 
îr
;

131 
ngx_evít_t
 *
ªv
;

133 
ªv
 = 
c
->
ªad
;

136 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

138 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

139 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

141 i‡(
n
 == 0) {

142 
ªv
->
ªady
 = 0;

143 
ªv
->
eof
 = 1;

144  
n
;

146 } i‡(
n
 > 0) {

148 i‡((
size_t
Ë
n
 < 
size


149 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

151 
ªv
->
ªady
 = 0;

154  
n
;

157 
îr
 = 
ngx_sockë_î∫o
;

159 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

160 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

162 
n
 = 
NGX_AGAIN
;

165 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

169 } 
îr
 =
NGX_EINTR
);

171 
ªv
->
ªady
 = 0;

173 i‡(
n
 =
NGX_ERROR
) {

174 
ªv
->
îr‹
 = 1;

177  
n
;

178 
	}
}

	@src/os/unix/ngx_send.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
wev
;

20 
wev
 = 
c
->
wrôe
;

22 #i‡(
NGX_HAVE_KQUEUE
)

24 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

25 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

27 
wev
->
îr‹
 = 1;

28  
NGX_ERROR
;

34 
n
 = 
	`£nd
(
c
->
fd
, 
buf
, 
size
, 0);

36 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

37 "£nd: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

39 i‡(
n
 > 0) {

40 i‡(
n
 < (
ssize_t
Ë
size
) {

41 
wev
->
ªady
 = 0;

44 
c
->
£¡
 +
n
;

46  
n
;

49 
îr
 = 
ngx_sockë_î∫o
;

51 i‡(
n
 == 0) {

52 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
îr
, "send()Ñeturned zero");

53 
wev
->
ªady
 = 0;

54  
n
;

57 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

58 
wev
->
ªady
 = 0;

60 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

63 i‡(
îr
 =
NGX_EAGAIN
) {

64  
NGX_AGAIN
;

68 
wev
->
îr‹
 = 1;

69 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "send() failed");

70  
NGX_ERROR
;

73 
	}
}

	@src/os/unix/ngx_setaffinity.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 #i‡(
NGX_HAVE_CPUSET_SETAFFINITY
)

13 
	~<sys/˝u£t.h
>

16 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

18 
˝u£t_t
 
mask
;

19 
ngx_uöt_t
 
i
;

21 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

22 "˝u£t_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

24 
	`CPU_ZERO
(&
mask
);

25 
i
 = 0;

27 i‡(
˝u_afföôy
 & 1) {

28 
	`CPU_SET
(
i
, &
mask
);

30 
i
++;

31 
˝u_afföôy
 >>= 1;

32 } 
˝u_afföôy
);

34 i‡(
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, -1,

35 (
˝u£t_t
), &
mask
) == -1)

37 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40 
	}
}

42 #ñi‡(
NGX_HAVE_SCHED_SETAFFINITY
)

45 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

47 
˝u_£t_t
 
mask
;

48 
ngx_uöt_t
 
i
;

50 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

51 "sched_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

53 
	`CPU_ZERO
(&
mask
);

54 
i
 = 0;

56 i‡(
˝u_afföôy
 & 1) {

57 
	`CPU_SET
(
i
, &
mask
);

59 
i
++;

60 
˝u_afföôy
 >>= 1;

61 } 
˝u_afföôy
);

63 i‡(
	`sched_£èfföôy
(0, (
˝u_£t_t
), &
mask
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

67 
	}
}

	@src/os/unix/ngx_setaffinity.h

6 #i‚de‡
_NGX_SETAFFINITY_H_INCLUDED_


7 
	#_NGX_SETAFFINITY_H_INCLUDED_


	)

10 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
 || 
NGX_HAVE_CPUSET_SETAFFINITY
)

12 
	#NGX_HAVE_CPU_AFFINITY
 1

	)

14 
ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
);

18 
	#ngx_£èfföôy
(
˝u_afföôy
, 
log
)

	)

	@src/os/unix/ngx_setproctitle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

30 **
ívú⁄
;

32 *
	gngx_os_¨gv_œ°
;

34 
ngx_öt_t


35 
	$ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
)

37 
u_ch¨
 *
p
;

38 
size_t
 
size
;

39 
ngx_uöt_t
 
i
;

41 
size
 = 0;

43 
i
 = 0; 
ívú⁄
[i]; i++) {

44 
size
 +
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

47 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

48 i‡(
p
 =
NULL
) {

49  
NGX_ERROR
;

52 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[0];

54 
i
 = 0; 
ngx_os_¨gv
[i]; i++) {

55 i‡(
ngx_os_¨gv_œ°
 =
ngx_os_¨gv
[
i
]) {

56 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[
i
] + 
	`ngx_°æí
(ngx_os_argv[i]) + 1;

60 
i
 = 0; 
ívú⁄
[i]; i++) {

61 i‡(
ngx_os_¨gv_œ°
 =
ívú⁄
[
i
]) {

63 
size
 = 
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

64 
ngx_os_¨gv_œ°
 = 
ívú⁄
[
i
] + 
size
;

66 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
ívú⁄
[
i
], 
size
);

67 
ívú⁄
[
i
] = (*Ë
p
;

68 
p
 +
size
;

72 
ngx_os_¨gv_œ°
--;

74  
NGX_OK
;

75 
	}
}

79 
	$ngx_£çro˘ôÀ
(*
tôÀ
)

81 
u_ch¨
 *
p
;

83 #i‡(
NGX_SOLARIS
)

85 
ngx_öt_t
 
i
;

86 
size_t
 
size
;

90 
ngx_os_¨gv
[1] = 
NULL
;

92 
p
 = 
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_os_¨gv
[0], (u_char *) "nginx: ",

93 
ngx_os_¨gv_œ°
 - 
ngx_os_¨gv
[0]);

95 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
tôÀ
, 
ngx_os_¨gv_œ°
 - (*)Ö);

97 #i‡(
NGX_SOLARIS
)

99 
size
 = 0;

101 
i
 = 0; i < 
ngx_¨gc
; i++) {

102 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

105 i‡(
size
 > (
size_t
Ë((*Ë
p
 - 
ngx_os_¨gv
[0])) {

112 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (", 
ngx_os_¨gv_œ°
 - (*)Ö);

114 
i
 = 0; i < 
ngx_¨gc
; i++) {

115 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
],

116 
ngx_os_¨gv_œ°
 - (*Ë
p
);

117 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" ", 
ngx_os_¨gv_œ°
 - (*)Ö);

120 i‡(*(
p
 - 1) == ' ') {

121 *(
p
 - 1) = ')';

127 i‡(
ngx_os_¨gv_œ°
 - (*Ë
p
) {

128 
	`ngx_mem£t
(
p
, 
NGX_SETPROCTITLE_PAD
, 
ngx_os_¨gv_œ°
 - (*)Ö);

131 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

132 "£çro˘ôÀ: \"%s\"", 
ngx_os_¨gv
[0]);

133 
	}
}

	@src/os/unix/ngx_setproctitle.h

8 #i‚de‡
_NGX_SETPROCTITLE_H_INCLUDED_


9 
	#_NGX_SETPROCTITLE_H_INCLUDED_


	)

12 #i‡(
NGX_HAVE_SETPROCTITLE
)

16 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

17 
	#ngx_£çro˘ôÀ
(
tôÀ
Ë
	`£çro˘ôÀ
("%s",ÅôÀ)

	)

22 #i‡!
deföed
 
NGX_SETPROCTITLE_USES_ENV


24 #i‡(
NGX_SOLARIS
)

26 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

27 
	#NGX_SETPROCTITLE_PAD
 ' '

	)

29 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

30 
ngx_£çro˘ôÀ
(*
tôÀ
);

32 #ñi‡(
NGX_LINUX
Ë|| (
NGX_DARWIN
)

34 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

35 
	#NGX_SETPROCTITLE_PAD
 '\0'

	)

37 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

38 
ngx_£çro˘ôÀ
(*
tôÀ
);

42 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

43 
	#ngx_£çro˘ôÀ
(
tôÀ
)

	)

	@src/os/unix/ngx_shmem.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_MAP_ANON
)

14 
ngx_öt_t


15 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

17 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
,

18 
PROT_READ
|
PROT_WRITE
,

19 
MAP_ANON
|
MAP_SHARED
, -1, 0);

21 i‡(
shm
->
addr
 =
MAP_FAILED
) {

22 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

23 "mm≠(MAP_ANON|MAP_SHARED, %uzËÁûed", 
shm
->
size
);

24  
NGX_ERROR
;

27  
NGX_OK
;

28 
	}
}

32 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

34 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

36 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

38 
	}
}

40 #ñi‡(
NGX_HAVE_MAP_DEVZERO
)

42 
ngx_öt_t


43 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

45 
ngx_fd_t
 
fd
;

47 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

49 i‡(
fd
 == -1) {

50 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

52  
NGX_ERROR
;

55 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
, 
PROT_READ
|
PROT_WRITE
,

56 
MAP_SHARED
, 
fd
, 0);

58 i‡(
shm
->
addr
 =
MAP_FAILED
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

60 "mm≠(/dev/zîo, MAP_SHARED, %uzËÁûed", 
shm
->
size
);

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

68  (
shm
->
addr
 =
MAP_FAILED
Ë? 
NGX_ERROR
 : 
NGX_OK
;

69 
	}
}

73 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

75 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

76 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

77 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

79 
	}
}

81 #ñi‡(
NGX_HAVE_SYSVSHM
)

83 
	~<sys/ùc.h
>

84 
	~<sys/shm.h
>

87 
ngx_öt_t


88 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

90 
id
;

92 
id
 = 
	`shmgë
(
IPC_PRIVATE
, 
shm
->
size
, (
SHM_R
|
SHM_W
|
IPC_CREAT
));

94 i‡(
id
 == -1) {

95 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

96 "shmgë(%uzËÁûed", 
shm
->
size
);

97  
NGX_ERROR
;

100 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
shm
->
log
, 0, "shmgë id: %d", 
id
);

102 
shm
->
addr
 = 
	`shm©
(
id
, 
NULL
, 0);

104 i‡(
shm
->
addr
 == (*) -1) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
, "shmat() failed");

108 i‡(
	`shm˘l
(
id
, 
IPC_RMID
, 
NULL
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

113  (
shm
->
addr
 =(*Ë-1Ë? 
NGX_ERROR
 : 
NGX_OK
;

114 
	}
}

118 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

120 i‡(
	`shmdt
(
shm
->
addr
) == -1) {

121 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

122 "shmdt(%pËÁûed", 
shm
->
addr
);

124 
	}
}

	@src/os/unix/ngx_shmem.h

8 #i‚de‡
_NGX_SHMEM_H_INCLUDED_


9 
	#_NGX_SHMEM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
u_ch¨
 *
	maddr
;

18 
size_t
 
	msize
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_log_t
 *
	mlog
;

21 
ngx_uöt_t
 
	mexi°s
;

22 } 
	tngx_shm_t
;

25 
ngx_öt_t
 
ngx_shm_Æloc
(
ngx_shm_t
 *
shm
);

26 
ngx_shm_‰ì
(
ngx_shm_t
 *
shm
);

	@src/os/unix/ngx_socket.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

24 #i‡(
NGX_HAVE_FIONBIO
)

27 
	$ngx_n⁄blockög
(
ngx_sockë_t
 
s
)

29 
nb
;

31 
nb
 = 1;

33  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

34 
	}
}

38 
	$ngx_blockög
(
ngx_sockë_t
 
s
)

40 
nb
;

42 
nb
 = 0;

44  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

45 
	}
}

50 #i‡(
NGX_FREEBSD
)

53 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

55 
t˝_n›ush
;

57 
t˝_n›ush
 = 1;

59  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

60 (c⁄° *Ë&
t˝_n›ush
, ());

61 
	}
}

65 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

67 
t˝_n›ush
;

69 
t˝_n›ush
 = 0;

71  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

72 (c⁄° *Ë&
t˝_n›ush
, ());

73 
	}
}

75 #ñi‡(
NGX_LINUX
)

79 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

81 
c‹k
;

83 
c‹k
 = 1;

85  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

86 (c⁄° *Ë&
c‹k
, ());

87 
	}
}

91 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

93 
c‹k
;

95 
c‹k
 = 0;

97  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

98 (c⁄° *Ë&
c‹k
, ());

99 
	}
}

104 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

107 
	}
}

111 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

114 
	}
}

	@src/os/unix/ngx_socket.h

8 #i‚de‡
_NGX_SOCKET_H_INCLUDED_


9 
	#_NGX_SOCKET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
	#NGX_WRITE_SHUTDOWN
 
SHUT_WR


	)

17 
	tngx_sockë_t
;

19 
	#ngx_sockë
 
sockë


	)

20 
	#ngx_sockë_n
 "sockë()"

	)

23 #i‡(
NGX_HAVE_FIONBIO
)

25 
ngx_n⁄blockög
(
ngx_sockë_t
 
s
);

26 
ngx_blockög
(
ngx_sockë_t
 
s
);

28 
	#ngx_n⁄blockög_n
 "io˘l(FIONBIO)"

	)

29 
	#ngx_blockög_n
 "io˘l(!FIONBIO)"

	)

33 
	#ngx_n⁄blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë| 
O_NONBLOCK
)

	)

34 
	#ngx_n⁄blockög_n
 "f˙é(O_NONBLOCK)"

	)

36 
	#ngx_blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë& ~
O_NONBLOCK
)

	)

37 
	#ngx_blockög_n
 "f˙é(!O_NONBLOCK)"

	)

41 
ngx_t˝_n›ush
(
ngx_sockë_t
 
s
);

42 
ngx_t˝_push
(
ngx_sockë_t
 
s
);

44 #i‡(
NGX_LINUX
)

46 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_CORK)"

	)

47 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_CORK)"

	)

51 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_NOPUSH)"

	)

52 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_NOPUSH)"

	)

57 
	#ngx_shutdown_sockë
 
shutdown


	)

58 
	#ngx_shutdown_sockë_n
 "shutdown()"

	)

60 
	#ngx_˛o£_sockë
 
˛o£


	)

61 
	#ngx_˛o£_sockë_n
 "˛o£(Ësockë"

	)

	@src/os/unix/ngx_solaris.h

8 #i‚de‡
_NGX_SOLARIS_H_INCLUDED_


9 
	#_NGX_SOLARIS_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@src/os/unix/ngx_solaris_config.h

8 #i‚de‡
_NGX_SOLARIS_CONFIG_H_INCLUDED_


9 
	#_NGX_SOLARIS_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_REENTRANT


13 
	#_REENTRANT


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

28 
	~<pwd.h
>

29 
	~<gΩ.h
>

30 
	~<dúít.h
>

31 
	~<glob.h
>

32 
	~<time.h
>

33 
	~<sys/°©vfs.h
>

35 
	~<sys/fûio.h
>

36 
	~<sys/uio.h
>

37 
	~<sys/°©.h
>

38 
	~<f˙é.h
>

40 
	~<sys/waô.h
>

41 
	~<sys/mm™.h
>

42 
	~<sys/ªsour˚.h
>

43 
	~<sched.h
>

45 
	~<sys/sockë.h
>

46 
	~<√töë/ö.h
>

47 
	~<√töë/t˝.h
>

48 
	~<¨∑/öë.h
>

49 
	~<√tdb.h
>

50 
	~<sys/un.h
>

52 
	~<sys/sy°emöfo.h
>

53 
	~<limôs.h
>

54 
	~<öây≥s.h
>

55 
	~<¸y±.h
>

57 
	#NGX_ALIGNMENT
 
_MAX_ALIGNMENT


	)

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_POLL
)

68 
	~<pﬁl.h
>

72 #i‡(
NGX_HAVE_DEVPOLL
)

73 
	~<sys/io˘l.h
>

74 
	~<sys/devpﬁl.h
>

78 #i‡(
NGX_HAVE_EVENTPORT
)

79 
	~<p‹t.h
>

83 #i‡(
NGX_HAVE_SENDFILE
)

84 
	~<sys/£ndfûe.h
>

88 
	#NGX_LISTEN_BACKLOG
 511

	)

91 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


92 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

96 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


98 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

102 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

103 
	#ngx_debug_öô
()

	)

106 **
ívú⁄
;

	@src/os/unix/ngx_solaris_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_sﬁ¨is_sy¢ame
[20];

13 
	gngx_sﬁ¨is_ªÀa£
[10];

14 
	gngx_sﬁ¨is_vîsi⁄
[50];

17 
ngx_os_io_t
 
	gngx_sﬁ¨is_io
 = {

18 
ngx_unix_ªcv
,

19 
ngx_ªadv_chaö
,

20 
ngx_udp_unix_ªcv
,

21 
ngx_unix_£nd
,

22 #i‡(
NGX_HAVE_SENDFILE
)

23 
ngx_sﬁ¨is_£ndfûev_chaö
,

24 
NGX_IO_SENDFILE


26 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

35 i‡(
	`sysöfo
(
SI_SYSNAME
, 
ngx_sﬁ¨is_sy¢ame
, (ngx_solaris_sysname))

38 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40  
NGX_ERROR
;

43 i‡(
	`sysöfo
(
SI_RELEASE
, 
ngx_sﬁ¨is_ªÀa£
, (ngx_solaris_release))

46 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

48  
NGX_ERROR
;

51 i‡(
	`sysöfo
(
SI_VERSION
, 
ngx_sﬁ¨is_vîsi⁄
, (ngx_solaris_version))

54 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

56  
NGX_ERROR
;

60 
ngx_os_io
 = 
ngx_sﬁ¨is_io
;

62  
NGX_OK
;

63 
	}
}

67 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

70 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

71 
ngx_sﬁ¨is_sy¢ame
, 
ngx_sﬁ¨is_ªÀa£
);

73 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "version: %s",

74 
ngx_sﬁ¨is_vîsi⁄
);

75 
	}
}

	@src/os/unix/ngx_solaris_sendfilev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_SOLARIS_SENDFILEV
)

17 
	s£ndfûevec
 {

18 
	msfv_fd
;

19 
u_öt
 
	msfv_Êag
;

20 
off_t
 
	msfv_off
;

21 
size_t
 
	msfv_Àn
;

22 } 
	t£ndfûevec_t
;

24 
	#SFV_FD_SELF
 -2

	)

26 
ssize_t
 
	$£ndfûev
(
fd
, c⁄° 
£ndfûevec
 *
vec
,

27 
sfv˙t
, 
size_t
 *
x„ºed
)

30 
	}
}

32 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

33 
off_t
 
limô
);

38 #i‡(
IOV_MAX
 > 64)

39 
	#NGX_SENDFILEVECS
 64

	)

41 
	#NGX_SENDFILEVECS
 
IOV_MAX


	)

46 
ngx_chaö_t
 *

47 
	$ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

49 
fd
;

50 
u_ch¨
 *
¥ev
;

51 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
Âªv
;

52 
size_t
 
£¡
;

53 
ssize_t
 
n
;

54 
ngx_öt_t
 
eöå
, 
com∂ëe
;

55 
ngx_îr_t
 
îr
;

56 
£ndfûevec_t
 *
sfv
, 
sfvs
[
NGX_SENDFILEVECS
];

57 
ngx_¨øy_t
 
vec
;

58 
ngx_evít_t
 *
wev
;

59 
ngx_chaö_t
 *
˛
;

61 
wev
 = 
c
->
wrôe
;

63 i‡(!
wev
->
ªady
) {

64  
ö
;

67 i‡(!
c
->
£ndfûe
) {

68  
	`ngx_wrôev_chaö
(
c
, 
ö
, 
limô
);

74 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

75 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

79 
£nd
 = 0;

81 
vec
.
ñts
 = 
sfvs
;

82 
vec
.
size
 = (
£ndfûevec_t
);

83 
vec
.
«Œoc
 = 
NGX_SENDFILEVECS
;

84 
vec
.
poﬁ
 = 
c
->pool;

87 
fd
 = 
SFV_FD_SELF
;

88 
¥ev
 = 
NULL
;

89 
Âªv
 = 0;

90 
sfv
 = 
NULL
;

91 
eöå
 = 0;

92 
com∂ëe
 = 0;

93 
£¡
 = 0;

94 
¥ev_£nd
 = 
£nd
;

96 
vec
.
√…s
 = 0;

100 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

102 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

106 i‡(
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

107 
fd
 = 
SFV_FD_SELF
;

109 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

111 i‡(
£nd
 + 
size
 > 
limô
) {

112 
size
 = 
limô
 - 
£nd
;

115 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

116 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

119 i‡(
vec
.
√…s
 >
IOV_MAX
) {

123 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

124 i‡(
sfv
 =
NULL
) {

125  
NGX_CHAIN_ERROR
;

128 
sfv
->
sfv_fd
 = 
SFV_FD_SELF
;

129 
sfv
->
sfv_Êag
 = 0;

130 
sfv
->
sfv_off
 = (
off_t
Ë(
uöçå_t
Ë
˛
->
buf
->
pos
;

131 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

134 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

135 
£nd
 +
size
;

138 
¥ev
 = 
NULL
;

140 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

142 i‡(
£nd
 + 
size
 > 
limô
) {

143 
size
 = 
limô
 - 
£nd
;

145 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

146 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

148 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

149 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

153 i‡(
fd
 =
˛
->
buf
->
fûe
->fd && 
Âªv
 =˛->buf->
fûe_pos
) {

154 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

157 i‡(
vec
.
√…s
 >
IOV_MAX
) {

161 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

162 i‡(
sfv
 =
NULL
) {

163  
NGX_CHAIN_ERROR
;

166 
fd
 = 
˛
->
buf
->
fûe
->fd;

167 
sfv
->
sfv_fd
 = 
fd
;

168 
sfv
->
sfv_Êag
 = 0;

169 
sfv
->
sfv_off
 = 
˛
->
buf
->
fûe_pos
;

170 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

173 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

174 
£nd
 +
size
;

178 
n
 = 
	`£ndfûev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
, &
£¡
);

180 i‡(
n
 == -1) {

181 
îr
 = 
ngx_î∫o
;

183 
îr
) {

184 
NGX_EAGAIN
:

187 
NGX_EINTR
:

188 
eöå
 = 1;

192 
wev
->
îr‹
 = 1;

193 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfilev() failed");

194  
NGX_CHAIN_ERROR
;

197 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

198 "£ndfûev(Ë£¡ o∆y %uz byãs", 
£¡
);

201 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

202 "£ndfûev: %z %z", 
n
, 
£¡
);

204 i‡(
£nd
 - 
¥ev_£nd
 =(
off_t
Ë
£¡
) {

205 
com∂ëe
 = 1;

208 
c
->
£¡
 += sent;

210 
˛
 = 
ö
; cl; c»˛->
√xt
) {

212 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

216 i‡(
£¡
 == 0) {

220 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

222 i‡((
off_t
Ë
£¡
 >
size
) {

223 
£¡
 = (
size_t
Ë((
off_t
Ë£¡ - 
size
);

225 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

226 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

229 i‡(
˛
->
buf
->
ö_fûe
) {

230 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

236 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

237 
˛
->
buf
->
pos
 +
£¡
;

240 i‡(
˛
->
buf
->
ö_fûe
) {

241 
˛
->
buf
->
fûe_pos
 +
£¡
;

247 i‡(
eöå
) {

251 i‡(!
com∂ëe
) {

252 
wev
->
ªady
 = 0;

253  
˛
;

256 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

257  
˛
;

260 
ö
 = 
˛
;

262 
	}
}

	@src/os/unix/ngx_sunpro_atomic_sparc64.h

8 #i‡(
NGX_PTR_SIZE
 == 4)

9 
	#NGX_CASA
 
ngx_ˇß


	)

11 
	#NGX_CASA
 
ngx_ˇsxa


	)

15 
ngx_©omic_uöt_t


16 
ngx_ˇß
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

18 
ngx_©omic_uöt_t


19 
ngx_ˇsxa
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

24 
ngx_ölöe
 
ngx_©omic_uöt_t


25 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

26 
ngx_©omic_uöt_t
 
£t
)

28 
£t
 = 
	`NGX_CASA
(£t, 
ﬁd
, 
lock
);

30  (
£t
 =
ﬁd
);

31 
	}
}

34 
ngx_ölöe
 
ngx_©omic_öt_t


35 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

37 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

39 
ﬁd
 = *
vÆue
;

43 
ªs
 = 
ﬁd
 + 
add
;

45 
ªs
 = 
	`NGX_CASA
‘es, 
ﬁd
, 
vÆue
);

47 i‡(
ªs
 =
ﬁd
) {

48  
ªs
;

51 
ﬁd
 = 
ªs
;

53 
	}
}

56 
	#ngx_mem‹y_b¨rõr
() \

57 
	`__asm
 (".volatile"); \

58 
	`__asm
 ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad"); \

59 
	`__asm
 (".n⁄vﬁ©ûe")

	)

61 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_thread.h

8 #i‚de‡
_NGX_THREAD_H_INCLUDED_


9 
	#_NGX_THREAD_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_THREADS
)

17 
	#NGX_MAX_THREADS
 128

	)

19 #i‡(
NGX_USE_RFORK
)

20 
	~<ngx_‰ìbsd_rf‹k_thªad.h
>

25 
	~<±hªad.h
>

27 
±hªad_t
 
	tngx_tid_t
;

29 
	#ngx_thªad_£lf
(Ë
	`±hªad_£lf
()

	)

30 
	#ngx_log_tid
 (Ë
	`ngx_thªad_£lf
()

	)

32 #i‡(
NGX_FREEBSD
Ë&& !(
NGX_LINUXTHREADS
)

33 
	#NGX_TID_T_FMT
 "%p"

	)

35 
	#NGX_TID_T_FMT
 "%d"

	)

39 
±hªad_key_t
 
	tngx_és_key_t
;

41 
	#ngx_thªad_key_¸óã
(
key
Ë
	`±hªad_key_¸óã
(key, 
NULL
)

	)

42 
	#ngx_thªad_key_¸óã_n
 "±hªad_key_¸óã()"

	)

43 
	#ngx_thªad_£t_és
 
±hªad_£t•ecific


	)

44 
	#ngx_thªad_£t_és_n
 "±hªad_£t•ecific()"

	)

45 
	#ngx_thªad_gë_és
 
±hªad_gë•ecific


	)

48 
	#NGX_MUTEX_LIGHT
 0

	)

51 
±hªad_muãx_t
 
	mmuãx
;

52 
ngx_log_t
 *
	mlog
;

53 } 
	tngx_muãx_t
;

56 
±hªad_c⁄d_t
 
	mc⁄d
;

57 
ngx_log_t
 *
	mlog
;

58 } 
	tngx_c⁄d_t
;

60 
	#ngx_thªad_sigmask
 
±hªad_sigmask


	)

61 
	#ngx_thªad_sigmask_n
 "±hªad_sigmask()"

	)

63 
	#ngx_thªad_joö
(
t
, 
p
Ë
	`±hªad_joö
—,Ö)

	)

65 
	#ngx_£âhπôÀ
(
n
)

	)

69 
ngx_öt_t
 
ngx_muãx_åylock
(
ngx_muãx_t
 *
m
);

70 
ngx_muãx_lock
(
ngx_muãx_t
 *
m
);

71 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

76 
	#ngx_thªad_vﬁ©ûe
 vﬁ©ûe

	)

80 
ngx_tid_t
 
	mtid
;

81 
ngx_c⁄d_t
 *
	mcv
;

82 
ngx_uöt_t
 
	m°©e
;

83 } 
	tngx_thªad_t
;

85 
	#NGX_THREAD_FREE
 1

	)

86 
	#NGX_THREAD_BUSY
 2

	)

87 
	#NGX_THREAD_EXIT
 3

	)

88 
	#NGX_THREAD_DONE
 4

	)

90 
ngx_öt_t
 
ngx_thªads_n
;

91 vﬁ©ûê
ngx_thªad_t
 
ngx_thªads
[
NGX_MAX_THREADS
];

94 * 
	tngx_thªad_vÆue_t
;

96 
ngx_öt_t
 
ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
);

97 
ngx_îr_t
 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
,

98 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
), *¨g, 
ngx_log_t
 *
log
);

100 
ngx_muãx_t
 *
	`ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
);

101 
	`ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
);

104 
ngx_c⁄d_t
 *
	`ngx_c⁄d_öô
(
ngx_log_t
 *
log
);

105 
	`ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
);

106 
ngx_öt_t
 
	`ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
);

107 
ngx_öt_t
 
	`ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
);

112 
	#ngx_thªad_vﬁ©ûe


	)

114 
	#ngx_log_tid
 0

	)

115 
	#NGX_TID_T_FMT
 "%d"

	)

117 
	#ngx_muãx_åylock
(
m
Ë
NGX_OK


	)

118 
	#ngx_muãx_lock
(
m
)

	)

119 
	#ngx_muãx_u∆ock
(
m
)

	)

121 
	#ngx_c⁄d_sig«l
(
cv
)

	)

123 
	#ngx_thªad_maö
(Ë1

	)

	@src/os/unix/ngx_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

25 
	$ngx_timez⁄e_upd©e
()

27 #i‡(
NGX_FREEBSD
)

29 i‡(
	`gëív
("TZ")) {

33 
	`puãnv
("TZ=UTC");

35 
	`tz£t
();

37 
	`un£ãnv
("TZ");

39 
	`tz£t
();

41 #ñi‡(
NGX_LINUX
)

42 
time_t
 
s
;

43 
tm
 *
t
;

44 
buf
[4];

46 
s
 = 
	`time
(0);

48 
t
 = 
	`loˇ…ime
(&
s
);

50 
	`°r·ime
(
buf
, 4, "%H", 
t
);

53 
	}
}

57 
	$ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
)

59 #i‡(
NGX_HAVE_LOCALTIME_R
)

60 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

63 
ngx_tm_t
 *
t
;

65 
t
 = 
	`loˇ…ime
(&
s
);

66 *
tm
 = *
t
;

70 
tm
->
ngx_tm_m⁄
++;

71 
tm
->
ngx_tm_yór
 += 1900;

72 
	}
}

76 
	$ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm)

78 #i‡(
NGX_HAVE_LOCALTIME_R
)

79 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

82 
tm
 *
t
;

84 
t
 = 
	`loˇ…ime
(&
s
);

85 *
tm
 = *
t
;

88 
	}
}

92 
	$ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm)

94 #i‡(
NGX_HAVE_LOCALTIME_R
)

95 (Ë
	`gmtime_r
(&
s
, 
tm
);

98 
tm
 *
t
;

100 
t
 = 
	`gmtime
(&
s
);

101 *
tm
 = *
t
;

104 
	}
}

	@src/os/unix/ngx_time.h

8 #i‚de‡
_NGX_TIME_H_INCLUDED_


9 
	#_NGX_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rbåì_key_t
 
	tngx_m£c_t
;

17 
ngx_rbåì_key_öt_t
 
	tngx_m£c_öt_t
;

19 
tm
 
	tngx_tm_t
;

21 
	#ngx_tm_£c
 
tm_£c


	)

22 
	#ngx_tm_mö
 
tm_mö


	)

23 
	#ngx_tm_hour
 
tm_hour


	)

24 
	#ngx_tm_mday
 
tm_mday


	)

25 
	#ngx_tm_m⁄
 
tm_m⁄


	)

26 
	#ngx_tm_yór
 
tm_yór


	)

27 
	#ngx_tm_wday
 
tm_wday


	)

28 
	#ngx_tm_isd°
 
tm_isd°


	)

30 
	#ngx_tm_£c_t
 

	)

31 
	#ngx_tm_mö_t
 

	)

32 
	#ngx_tm_hour_t
 

	)

33 
	#ngx_tm_mday_t
 

	)

34 
	#ngx_tm_m⁄_t
 

	)

35 
	#ngx_tm_yór_t
 

	)

36 
	#ngx_tm_wday_t
 

	)

39 #i‡(
NGX_HAVE_GMTOFF
)

40 
	#ngx_tm_gmtoff
 
tm_gmtoff


	)

41 
	#ngx_tm_z⁄e
 
tm_z⁄e


	)

45 #i‡(
NGX_SOLARIS
)

47 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
Ætz⁄e
 : 
timez⁄e
Ë/ 60)

	)

51 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
timez⁄e
 + 3600 :Åimez⁄eË/ 60)

	)

56 
ngx_timez⁄e_upd©e
();

57 
ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
);

58 
ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm);

59 
ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm);

61 
	#ngx_gëtimeofday
(
ç
Ë(Ë
	`gëtimeofday
—p, 
NULL
);

	)

62 
	#ngx_m¶ìp
(
ms
Ë(Ë
	`u¶ìp
(m†* 1000)

	)

63 
	#ngx_¶ìp
(
s
Ë(Ë
	`¶ìp
(s)

	)

	@src/os/unix/ngx_udp_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

25 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

27 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

28 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

30 i‡(
n
 >= 0) {

31 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

32 
ªv
->
avaûabÀ
 -
n
;

39 i‡(
ªv
->
avaûabÀ
 <= 0) {

40 
ªv
->
ªady
 = 0;

41 
ªv
->
avaûabÀ
 = 0;

45  
n
;

48 
îr
 = 
ngx_sockë_î∫o
;

50 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

51 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

53 
n
 = 
NGX_AGAIN
;

56 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

60 } 
îr
 =
NGX_EINTR
);

62 
ªv
->
ªady
 = 0;

64 i‡(
n
 =
NGX_ERROR
) {

65 
ªv
->
îr‹
 = 1;

68  
n
;

69 
	}
}

73 
ssize_t


74 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

76 
ssize_t
 
n
;

77 
ngx_îr_t
 
îr
;

78 
ngx_evít_t
 *
ªv
;

80 
ªv
 = 
c
->
ªad
;

83 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

85 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

86 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

88 i‡(
n
 >= 0) {

89  
n
;

92 
îr
 = 
ngx_sockë_î∫o
;

94 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

95 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

97 
n
 = 
NGX_AGAIN
;

100 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

104 } 
îr
 =
NGX_EINTR
);

106 
ªv
->
ªady
 = 0;

108 i‡(
n
 =
NGX_ERROR
) {

109 
ªv
->
îr‹
 = 1;

112  
n
;

113 
	}
}

	@src/os/unix/ngx_user.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

22 #i‡(
NGX_CRYPT
)

24 #i‡(
NGX_HAVE_GNU_CRYPT_R
)

26 
ngx_öt_t


27 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

29 *
vÆue
;

30 
size_t
 
Àn
;

31 
¸y±_d©a
 
cd
;

33 
cd
.
öôülized
 = 0;

35 
cd
.
cuºít_ß…
[0] = ~
ß…
[0];

37 
vÆue
 = 
	`¸y±_r
((*Ë
key
, (*Ë
ß…
, &
cd
);

39 i‡(
vÆue
) {

40 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

42 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

43 i‡(*
í¸y±ed
 =
NULL
) {

44  
NGX_ERROR
;

47 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

48  
NGX_OK
;

51 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
ngx_î∫o
, "crypt_r() failed");

53  
NGX_ERROR
;

54 
	}
}

58 
ngx_öt_t


59 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

61 *
vÆue
;

62 
size_t
 
Àn
;

63 
ngx_îr_t
 
îr
;

65 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

69 i‡(
	`ngx_muãx_åylock
(
ngx_¸y±_muãx
Ë!
NGX_OK
) {

70  
NGX_AGAIN
;

75 
vÆue
 = 
	`¸y±
((*Ë
key
, (*Ë
ß…
);

77 i‡(
vÆue
) {

78 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

80 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

81 i‡(*
í¸y±ed
 =
NULL
) {

82 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

83 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

85  
NGX_ERROR
;

88 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

89 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

90 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

92  
NGX_OK
;

95 
îr
 = 
ngx_î∫o
;

97 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

98 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

101 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
îr
, "crypt() failed");

103  
NGX_ERROR
;

104 
	}
}

	@src/os/unix/ngx_user.h

8 #i‚de‡
_NGX_USER_H_INCLUDED_


9 
	#_NGX_USER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uid_t
 
	tngx_uid_t
;

17 
gid_t
 
	tngx_gid_t
;

20 
ngx_öt_t
 
ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

	@src/os/unix/ngx_writev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
IOV_MAX
 > 64)

14 
	#NGX_IOVS
 64

	)

16 
	#NGX_IOVS
 
IOV_MAX


	)

20 
ngx_chaö_t
 *

21 
	$ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

23 
u_ch¨
 *
¥ev
;

24 
ssize_t
 
n
, 
size
, 
£¡
;

25 
off_t
 
£nd
, 
¥ev_£nd
;

26 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

27 
ngx_îr_t
 
îr
;

28 
ngx_¨øy_t
 
vec
;

29 
ngx_chaö_t
 *
˛
;

30 
ngx_evít_t
 *
wev
;

31 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

33 
wev
 = 
c
->
wrôe
;

35 i‡(!
wev
->
ªady
) {

36  
ö
;

39 #i‡(
NGX_HAVE_KQUEUE
)

41 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

42 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

44 
wev
->
îr‹
 = 1;

45  
NGX_CHAIN_ERROR
;

52 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

53 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

56 
£nd
 = 0;

58 
vec
.
ñts
 = 
iovs
;

59 
vec
.
size
 = (
iovec
);

60 
vec
.
«Œoc
 = 
NGX_IOVS
;

61 
vec
.
poﬁ
 = 
c
->pool;

64 
¥ev
 = 
NULL
;

65 
iov
 = 
NULL
;

66 
eöå
 = 0;

67 
com∂ëe
 = 0;

68 
¥ev_£nd
 = 
£nd
;

70 
vec
.
√…s
 = 0;

74 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

76 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

81 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

82 
	`ngx_debug_poöt
();

86 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 i‡(
£nd
 + 
size
 > 
limô
) {

89 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

92 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

93 
iov
->
iov_Àn
 +
size
;

96 i‡(
vec
.
√…s
 >
IOV_MAX
) {

100 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

101 i‡(
iov
 =
NULL
) {

102  
NGX_CHAIN_ERROR
;

105 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

106 
iov
->
iov_Àn
 = 
size
;

109 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

110 
£nd
 +
size
;

113 
n
 = 
	`wrôev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
);

115 i‡(
n
 == -1) {

116 
îr
 = 
ngx_î∫o
;

118 
îr
) {

119 
NGX_EAGAIN
:

122 
NGX_EINTR
:

123 
eöå
 = 1;

127 
wev
->
îr‹
 = 1;

128 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

129  
NGX_CHAIN_ERROR
;

132 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

136 
£¡
 = 
n
 > 0 ?Ç : 0;

138 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %z", 
£¡
);

140 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

141 
com∂ëe
 = 1;

144 
c
->
£¡
 += sent;

146 
˛
 = 
ö
; cl; c»˛->
√xt
) {

148 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

152 i‡(
£¡
 == 0) {

156 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

158 i‡(
£¡
 >
size
) {

159 
£¡
 -
size
;

160 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

165 
˛
->
buf
->
pos
 +
£¡
;

170 i‡(
eöå
) {

174 i‡(!
com∂ëe
) {

175 
wev
->
ªady
 = 0;

176  
˛
;

179 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

180  
˛
;

183 
ö
 = 
˛
;

185 
	}
}

	@/usr/include/aio.h

23 #i‚de‡
_AIO_H


24 
	#_AIO_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<f˙é.h
>

28 
	~<sig«l.h
>

29 
	~<time.h
>

30 
	~<sys/ty≥s.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__unu£d
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__unu£d
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (
__c⁄°
 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (
__c⁄°
 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

170 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (
__c⁄°
 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

201 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (
__c⁄°
 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (
__c⁄°
 
aiocb64
 *__c⁄° 
__li°
[], 
__√¡
,

237 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/crypt.h

25 #i‚de‡
_CRYPT_H


26 
	#_CRYPT_H
 1

	)

28 
	~<„©uªs.h
>

30 
__BEGIN_DECLS


33 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

37 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

41 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

43 #ifde‡
__USE_GNU


46 
	s¸y±_d©a


48 
keysched
[16 * 8];

49 
sb0
[32768];

50 
sb1
[32768];

51 
sb2
[32768];

52 
sb3
[32768];

54 
¸y±_3_buf
[14];

55 
cuºít_ß…
[2];

56 
cuºít_ß…bôs
;

57 
dúe˘i⁄
, 
öôülized
;

60 *
	$¸y±_r
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
,

61 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

62 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

64 
	$£tkey_r
 (
__c⁄°
 *
__key
,

65 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

66 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

68 
	$í¸y±_r
 (*
__block
, 
__edÊag
,

69 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

70 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

73 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_EACCESS
 0x200

	)

122 
f˙é
 (
__fd
, 
__cmd
, ...);

130 #i‚de‡
__USE_FILE_OFFSET64


131 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

133 #ifde‡
__REDIRECT


134 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

135 
	`__n⁄nuŒ
 ((1));

137 
	#›í
 
›í64


	)

140 #ifde‡
__USE_LARGEFILE64


141 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

144 #ifde‡
__USE_ATFILE


154 #i‚de‡
__USE_FILE_OFFSET64


155 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

156 
	`__n⁄nuŒ
 ((2));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

160 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

162 
	#›í©
 
›í©64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

167 
	`__n⁄nuŒ
 ((2));

176 #i‚de‡
__USE_FILE_OFFSET64


177 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

179 #ifde‡
__REDIRECT


180 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

181 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

183 
	#¸ót
 
¸ót64


	)

186 #ifde‡
__USE_LARGEFILE64


187 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

190 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

191 && !
deföed
 
__USE_POSIX
))

200 
	#F_ULOCK
 0

	)

201 
	#F_LOCK
 1

	)

202 
	#F_TLOCK
 2

	)

203 
	#F_TEST
 3

	)

205 #i‚de‡
__USE_FILE_OFFSET64


206 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

211 
	#lockf
 
lockf64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

219 #ifde‡
__USE_XOPEN2K


222 #i‚de‡
__USE_FILE_OFFSET64


223 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

224 
__advi£
Ë
__THROW
;

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

228 
__off64_t
 
__Àn
, 
__advi£
),

229 
posix_Ádvi£64
);

231 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

236 
__advi£
Ë
__THROW
;

244 #i‚de‡
__USE_FILE_OFFSET64


245 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

249 
__off64_t
 
__Àn
),

250 
posix_ÁŒoˇã64
);

252 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

262 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

263 && 
deföed
 
__va_¨g_∑ck_Àn


264 
	~<bôs/f˙é2.h
>

267 
__END_DECLS


	@/usr/include/glob.h

20 #i‚def 
_GLOB_H


21 
	#_GLOB_H
 1

	)

23 
	~<sys/cdefs.h
>

25 
	g__BEGIN_DECLS


28 #i‚de‡
__size_t


29 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

30 
__SIZE_TYPE__
 
	t__size_t
;

31 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


32 
__SIZE_TYPE__
 
	tsize_t
;

35 
	~<°ddef.h
>

36 #i‚de‡
__size_t


37 
	#__size_t
 
size_t


	)

43 #unde‡
__size_t


44 
	#__size_t
 
size_t


	)

48 
	#GLOB_ERR
 (1 << 0)

	)

49 
	#GLOB_MARK
 (1 << 1)

	)

50 
	#GLOB_NOSORT
 (1 << 2)

	)

51 
	#GLOB_DOOFFS
 (1 << 3)

	)

52 
	#GLOB_NOCHECK
 (1 << 4)

	)

53 
	#GLOB_APPEND
 (1 << 5)

	)

54 
	#GLOB_NOESCAPE
 (1 << 6)

	)

55 
	#GLOB_PERIOD
 (1 << 7)

	)

57 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_BSD
 || deföed 
__USE_GNU


58 
	#GLOB_MAGCHAR
 (1 << 8)

	)

59 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

60 
	#GLOB_BRACE
 (1 << 10)

	)

61 
	#GLOB_NOMAGIC
 (1 << 11)

	)

62 
	#GLOB_TILDE
 (1 << 12)

	)

63 
	#GLOB_ONLYDIR
 (1 << 13)

	)

64 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

66 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

67 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

68 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

69 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

71 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

72 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

73 
GLOB_PERIOD
)

	)

77 
	#GLOB_NOSPACE
 1

	)

78 
	#GLOB_ABORTED
 2

	)

79 
	#GLOB_NOMATCH
 3

	)

80 
	#GLOB_NOSYS
 4

	)

81 #ifde‡
__USE_GNU


84 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

88 #ifde‡
__USE_GNU


89 
	g°©
;

93 
__size_t
 
	mgl_∑thc
;

94 **
	mgl_∑thv
;

95 
__size_t
 
	mgl_offs
;

96 
	mgl_Êags
;

100 (*
	mgl_˛o£dú
) (*);

101 #ifde‡
__USE_GNU


102 
	mdúít
 *(*
	mgl_ªaddú
) (*);

104 *(*
	mgl_ªaddú
) (*);

106 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

107 #ifde‡
__USE_GNU


108 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

109 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

111 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

112 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

114 } 
	tglob_t
;

116 #ifde‡
__USE_LARGEFILE64


117 #ifde‡
__USE_GNU


118 
	g°©64
;

122 
__size_t
 
	mgl_∑thc
;

123 **
	mgl_∑thv
;

124 
__size_t
 
	mgl_offs
;

125 
	mgl_Êags
;

129 (*
	mgl_˛o£dú
) (*);

130 #ifde‡
__USE_GNU


131 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

133 *(*
	mgl_ªaddú
) (*);

135 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

136 #ifde‡
__USE_GNU


137 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

138 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

140 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

141 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

143 } 
	tglob64_t
;

146 #i‡
__USE_FILE_OFFSET64
 && 
__GNUC__
 < 2

147 
	#glob
 
glob64


	)

148 
	#glob‰ì
 
glob‰ì64


	)

159 #i‡!
deföed
 
__USE_FILE_OFFSET64
 || 
__GNUC__
 < 2

160 
glob
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

161 (*
__îrfunc
Ë(
__c⁄°
 *, ),

162 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

165 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

167 
	`__REDIRECT_NTH
 (
glob
, (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
,

168 
__Êags
,

169 (*
__îrfunc
Ë(
__c⁄°
 *, ),

170 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

172 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

175 #ifde‡
__USE_LARGEFILE64


176 
	`glob64
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

177 (*
__îrfunc
Ë(
__c⁄°
 *, ),

178 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

180 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

184 #ifde‡
__USE_GNU


190 
	$glob_∑âîn_p
 (
__c⁄°
 *
__∑âîn
, 
__quŸe
Ë
__THROW
;

193 
__END_DECLS


	@/usr/include/grp.h

24 #i‚def 
_GRP_H


25 
	#_GRP_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 
	#__√ed_size_t


	)

34 
	~<°ddef.h
>

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

44 
	sgroup


46 *
	mgr_«me
;

47 *
	mgr_∑sswd
;

48 
__gid_t
 
	mgr_gid
;

49 **
	mgr_mem
;

53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


54 
	#__√ed_FILE


	)

55 
	~<°dio.h
>

59 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


64 
£tgª¡
 ();

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

68 || 
deföed
 
__USE_XOPEN2K8


73 
ídgª¡
 ();

79 
group
 *
gëgª¡
 ();

82 #ifdef 
__USE_SVID


89 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

92 #ifde‡
__USE_GNU


99 
putgª¡
 (
__c⁄°
 
group
 *
__ª°ri˘
 
__p
,

100 
FILE
 *
__ª°ri˘
 
__f
);

107 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

113 
group
 *
gëg∫am
 (
__c⁄°
 *
__«me
);

115 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


117 #ifde‡
__USE_MISC


120 
	#NSS_BUFLEN_GROUP
 1024

	)

136 #ifde‡
__USE_GNU


137 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

138 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

139 
group
 **
__ª°ri˘
 
__ªsu…
);

146 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
group
 **
__ª°ri˘
 
__ªsu…
);

154 
gëg∫am_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

155 
group
 *
__ª°ri˘
 
__ªsu…buf
,

156 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

157 
group
 **
__ª°ri˘
 
__ªsu…
);

159 #ifdef 
__USE_SVID


167 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

168 
group
 *
__ª°ri˘
 
__ªsu…buf
,

169 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

170 
group
 **
__ª°ri˘
 
__ªsu…
);

176 #ifdef 
__USE_BSD


178 
	#__√ed_size_t


	)

179 
	~<°ddef.h
>

182 
	$£tgroups
 (
size_t
 
__n
, 
__c⁄°
 
__gid_t
 *
__groups
Ë
__THROW
;

192 
	`gëgrou∂i°
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
,

193 
__gid_t
 *
__groups
, *
__ngroups
);

203 
	`öôgroups
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
);

207 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/aio_abi.h

27 #i‚de‡
__LINUX__AIO_ABI_H


28 
	#__LINUX__AIO_ABI_H


	)

30 
	~<löux/ty≥s.h
>

31 
	~<asm/byã‹dî.h
>

33 
	taio_c⁄ãxt_t
;

36 
	mIOCB_CMD_PREAD
 = 0,

37 
	mIOCB_CMD_PWRITE
 = 1,

38 
	mIOCB_CMD_FSYNC
 = 2,

39 
	mIOCB_CMD_FDSYNC
 = 3,

44 
	mIOCB_CMD_NOOP
 = 6,

45 
	mIOCB_CMD_PREADV
 = 7,

46 
	mIOCB_CMD_PWRITEV
 = 8,

55 
	#IOCB_FLAG_RESFD
 (1 << 0)

	)

58 
	sio_evít
 {

59 
__u64
 
	md©a
;

60 
__u64
 
	mobj
;

61 
__s64
 
	mªs
;

62 
__s64
 
	mªs2
;

65 #i‡
deföed
(
__LITTLE_ENDIAN
)

66 
	#PADDED
(
x
,
y
Ëx, 
	)
y

67 #ñi‡
deföed
(
__BIG_ENDIAN
)

68 
	#PADDED
(
x
,
y
Ëy, 
	)
x

70 #îr‹ 
edô
 
your
 
odd
 
byã‹dî
.

79 
	siocb
 {

81 
__u64
 
	maio_d©a
;

82 
__u32
 
PADDED
(
aio_key
, 
aio_ª£rved1
);

86 
__u16
 
	maio_lio_›code
;

87 
__s16
 
	maio_ªq¥io
;

88 
__u32
 
	maio_fûdes
;

90 
__u64
 
	maio_buf
;

91 
__u64
 
	maio_nbyãs
;

92 
__s64
 
	maio_off£t
;

95 
__u64
 
	maio_ª£rved2
;

98 
__u32
 
	maio_Êags
;

104 
__u32
 
	maio_ªsfd
;

107 #unde‡
IFBIG


108 #unde‡
IFLITTLE


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


76 *
£˘i⁄
;

77 *
«me
;

78 *
vÆue
;

79 } 
	tCONF_VALUE
;

81 
DECLARE_STACK_OF
(
CONF_VALUE
)

82 
DECLARE_LHASH_OF
(
CONF_VALUE
);

84 
c⁄f_°
;

85 
c⁄f_mëhod_°
;

86 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

88 
	sc⁄f_mëhod_°


90 c⁄° *
«me
;

91 
CONF
 *(*
¸óã
)(
CONF_METHOD
 *
mëh
);

92 (*
öô
)(
CONF
 *
c⁄f
);

93 (*
de°roy
)(
CONF
 *
c⁄f
);

94 (*
de°roy_d©a
)(
CONF
 *
c⁄f
);

95 (*
lﬂd_bio
)(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

96 (*
dump
)(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

97 (*
is_numbî
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

98 (*
to_öt
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

99 (*
lﬂd
)(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

104 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

105 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

107 
DECLARE_STACK_OF
(
CONF_MODULE
)

108 
DECLARE_STACK_OF
(
CONF_IMODULE
)

111 
	tc⁄f_öô_func
(
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

112 
	tc⁄f_föish_func
(
	tCONF_IMODULE
 *
	tmd
);

114 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

115 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

116 
	#CONF_MFLAGS_SILENT
 0x4

	)

117 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

118 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

119 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

121 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

122 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
,
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

123 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
,c⁄° *
fûe
,

124 *
ñöe
);

125 #i‚de‡
OPENSSL_NO_FP_API


126 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

127 *
ñöe
);

129 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

130 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

131 c⁄° *
£˘i⁄
);

132 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

133 c⁄° *
«me
);

134 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

135 c⁄° *
«me
);

136 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

137 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

138 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

140 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

141 
OPENSSL_no_c⁄fig
();

146 
	sc⁄f_°


148 
CONF_METHOD
 *
mëh
;

149 *
mëh_d©a
;

150 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

153 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

154 
CONF_METHOD
 *
NCONF_deÁu…
();

155 
CONF_METHOD
 *
NCONF_WIN32
();

157 
CONF_METHOD
 *
NCONF_XML
();

159 
NCONF_‰ì
(
CONF
 *
c⁄f
);

160 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

162 
NCONF_lﬂd
(
CONF
 *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

163 #i‚de‡
OPENSSL_NO_FP_API


164 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

166 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

167 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
£˘i⁄
);

168 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

169 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
,

170 *
ªsu…
);

171 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

172 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

176 
NCONF_gë_numbî
(
CONF
 *
c⁄f
,*
group
,*
«me
);

178 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

183 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

184 
Êags
);

185 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

186 
Êags
);

187 
CONF_moduÀs_u∆ﬂd
(
Æl
);

188 
CONF_moduÀs_föish
();

189 
CONF_moduÀs_‰ì
();

190 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

191 
c⁄f_föish_func
 *
ffunc
);

193 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

194 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

195 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

196 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

197 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

198 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

199 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

200 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

201 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

203 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

205 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

206 (*
li°_cb
)(c⁄° *
ñem
, 
Àn
, *
u§
), *
¨g
);

208 
OPENSSL_lﬂd_buûtö_moduÀs
();

214 
ERR_lﬂd_CONF_°rögs
();

219 
	#CONF_F_CONF_DUMP_FP
 104

	)

220 
	#CONF_F_CONF_LOAD
 100

	)

221 
	#CONF_F_CONF_LOAD_BIO
 102

	)

222 
	#CONF_F_CONF_LOAD_FP
 103

	)

223 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

224 
	#CONF_F_CONF_PARSE_LIST
 119

	)

225 
	#CONF_F_DEF_LOAD
 120

	)

226 
	#CONF_F_DEF_LOAD_BIO
 121

	)

227 
	#CONF_F_MODULE_INIT
 115

	)

228 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

229 
	#CONF_F_MODULE_RUN
 118

	)

230 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

231 
	#CONF_F_NCONF_DUMP_FP
 106

	)

232 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

233 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

234 
	#CONF_F_NCONF_GET_SECTION
 108

	)

235 
	#CONF_F_NCONF_GET_STRING
 109

	)

236 
	#CONF_F_NCONF_LOAD
 113

	)

237 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

238 
	#CONF_F_NCONF_LOAD_FP
 114

	)

239 
	#CONF_F_NCONF_NEW
 111

	)

240 
	#CONF_F_STR_COPY
 101

	)

243 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

244 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

245 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

246 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

247 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

248 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

249 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

250 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

251 
	#CONF_R_NO_CONF
 105

	)

252 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

253 
	#CONF_R_NO_SECTION
 107

	)

254 
	#CONF_R_NO_SUCH_FILE
 114

	)

255 
	#CONF_R_NO_VALUE
 108

	)

256 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

257 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

258 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

260 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/engine.h

64 #i‚de‡
HEADER_ENGINE_H


65 
	#HEADER_ENGINE_H


	)

67 
	~<›ís¶/›ís¶c⁄f.h
>

69 #ifde‡
OPENSSL_NO_ENGINE


70 #îr‹ 
ENGINE
 
is
 
dißbÀd
.

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

75 #i‚de‡
OPENSSL_NO_RSA


76 
	~<›ís¶/rß.h
>

78 #i‚de‡
OPENSSL_NO_DSA


79 
	~<›ís¶/dß.h
>

81 #i‚de‡
OPENSSL_NO_DH


82 
	~<›ís¶/dh.h
>

84 
	~<›ís¶/ønd.h
>

85 
	~<›ís¶/ui.h
>

86 
	~<›ís¶/îr.h
>

89 
	~<›ís¶/os¶_typ.h
>

90 
	~<›ís¶/symhacks.h
>

92 
	~<›ís¶/x509.h
>

94 #ifde‡ 
__˝lu•lus


100 
	#ENGINE_METHOD_RSA
 ()0x0001

	)

101 
	#ENGINE_METHOD_DSA
 ()0x0002

	)

102 
	#ENGINE_METHOD_DH
 ()0x0004

	)

103 
	#ENGINE_METHOD_RAND
 ()0x0008

	)

104 
	#ENGINE_METHOD_ECDH
 ()0x0010

	)

105 
	#ENGINE_METHOD_ECDSA
 ()0x0020

	)

106 
	#ENGINE_METHOD_CIPHERS
 ()0x0040

	)

107 
	#ENGINE_METHOD_DIGESTS
 ()0x0080

	)

108 
	#ENGINE_METHOD_STORE
 ()0x0100

	)

109 
	#ENGINE_METHOD_PKEY_METHS
 ()0x0200

	)

110 
	#ENGINE_METHOD_PKEY_ASN1_METHS
 ()0x0400

	)

112 
	#ENGINE_METHOD_ALL
 ()0xFFFF

	)

113 
	#ENGINE_METHOD_NONE
 ()0x0000

	)

119 
	#ENGINE_TABLE_FLAG_NOINIT
 ()0x0001

	)

127 
	#ENGINE_FLAGS_MANUAL_CMD_CTRL
 ()0x0002

	)

136 
	#ENGINE_FLAGS_BY_ID_COPY
 ()0x0004

	)

149 
	#ENGINE_CMD_FLAG_NUMERIC
 ()0x0001

	)

152 
	#ENGINE_CMD_FLAG_STRING
 ()0x0002

	)

155 
	#ENGINE_CMD_FLAG_NO_INPUT
 ()0x0004

	)

159 
	#ENGINE_CMD_FLAG_INTERNAL
 ()0x0008

	)

174 
	#ENGINE_CTRL_SET_LOGSTREAM
 1

	)

175 
	#ENGINE_CTRL_SET_PASSWORD_CALLBACK
 2

	)

176 
	#ENGINE_CTRL_HUP
 3

	)

178 
	#ENGINE_CTRL_SET_USER_INTERFACE
 4

	)

179 
	#ENGINE_CTRL_SET_CALLBACK_DATA
 5

	)

183 
	#ENGINE_CTRL_LOAD_CONFIGURATION
 6

	)

186 
	#ENGINE_CTRL_LOAD_SECTION
 7

	)

207 
	#ENGINE_CTRL_HAS_CTRL_FUNCTION
 10

	)

210 
	#ENGINE_CTRL_GET_FIRST_CMD_TYPE
 11

	)

213 
	#ENGINE_CTRL_GET_NEXT_CMD_TYPE
 12

	)

216 
	#ENGINE_CTRL_GET_CMD_FROM_NAME
 13

	)

223 
	#ENGINE_CTRL_GET_NAME_LEN_FROM_CMD
 14

	)

224 
	#ENGINE_CTRL_GET_NAME_FROM_CMD
 15

	)

226 
	#ENGINE_CTRL_GET_DESC_LEN_FROM_CMD
 16

	)

227 
	#ENGINE_CTRL_GET_DESC_FROM_CMD
 17

	)

231 
	#ENGINE_CTRL_GET_CMD_FLAGS
 18

	)

235 
	#ENGINE_CMD_BASE
 200

	)

244 
	#ENGINE_CTRL_CHIL_SET_FORKCHECK
 100

	)

249 
	#ENGINE_CTRL_CHIL_NO_LOCKING
 101

	)

261 
	sENGINE_CMD_DEFN_°


263 
cmd_num
;

264 c⁄° *
cmd_«me
;

265 c⁄° *
cmd_desc
;

266 
cmd_Êags
;

267 } 
	tENGINE_CMD_DEFN
;

270 (*
ENGINE_GEN_FUNC_PTR
)();

272 (*
ENGINE_GEN_INT_FUNC_PTR
)(
	tENGINE
 *);

274 (*
ENGINE_CTRL_FUNC_PTR
)(
	tENGINE
 *, , , *, (*
	tf
)());

276 
EVP_PKEY
 * (*
	tENGINE_LOAD_KEY_PTR
)(
	tENGINE
 *, const *,

277 
	tUI_METHOD
 *
	tui_mëhod
, *
	tˇŒback_d©a
);

278 (*
ENGINE_SSL_CLIENT_CERT_PTR
)(
	tENGINE
 *, 
	tSSL
 *
	ts¶
,

279 
	tSTACK_OF
(
	tX509_NAME
Ë*
	tˇ_dn
, 
	tX509
 **
	tp˚π
, 
	tEVP_PKEY
 **
	tpkey
,

280 
	tSTACK_OF
(
	tX509
Ë**
	tpŸhî
, 
	tUI_METHOD
 *
	tui_mëhod
, *
	tˇŒback_d©a
);

293 (*
ENGINE_CIPHERS_PTR
)(
	tENGINE
 *, c⁄° 
	tEVP_CIPHER
 **, const **, );

294 (*
ENGINE_DIGESTS_PTR
)(
	tENGINE
 *, c⁄° 
	tEVP_MD
 **, const **, );

295 (*
ENGINE_PKEY_METHS_PTR
)(
	tENGINE
 *, 
	tEVP_PKEY_METHOD
 **, const **, );

296 (*
ENGINE_PKEY_ASN1_METHS_PTR
)(
	tENGINE
 *, 
	tEVP_PKEY_ASN1_METHOD
 **, const **, );

308 
ENGINE
 *
ENGINE_gë_fú°
();

309 
ENGINE
 *
ENGINE_gë_œ°
();

311 
ENGINE
 *
ENGINE_gë_√xt
(ENGINE *
e
);

312 
ENGINE
 *
ENGINE_gë_¥ev
(ENGINE *
e
);

314 
ENGINE_add
(
ENGINE
 *
e
);

316 
ENGINE_ªmove
(
ENGINE
 *
e
);

318 
ENGINE
 *
ENGINE_by_id
(c⁄° *
id
);

320 
ENGINE_lﬂd_›ís¶
();

321 
ENGINE_lﬂd_dy«mic
();

322 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


323 
ENGINE_lﬂd_4758cˇ
();

324 
ENGINE_lﬂd_´p
();

325 
ENGINE_lﬂd_©Æœ
();

326 
ENGINE_lﬂd_chû
();

327 
ENGINE_lﬂd_cswi·
();

328 
ENGINE_lﬂd_nur⁄
();

329 
ENGINE_lﬂd_suªw¨e
();

330 
ENGINE_lﬂd_ub£c
();

331 
ENGINE_lﬂd_∑dlock
();

332 
ENGINE_lﬂd_ˇpi
();

333 #i‚de‡
OPENSSL_NO_GMP


334 
ENGINE_lﬂd_gmp
();

336 #i‚de‡
OPENSSL_NO_GOST


337 
ENGINE_lﬂd_go°
();

340 
ENGINE_lﬂd_¸y±odev
();

341 
ENGINE_lﬂd_´¢i
();

342 
ENGINE_lﬂd_buûtö_ígöes
();

346 
ENGINE_gë_èbÀ_Êags
();

347 
ENGINE_£t_èbÀ_Êags
(
Êags
);

357 
ENGINE_ªgi°î_RSA
(
ENGINE
 *
e
);

358 
ENGINE_uƒegi°î_RSA
(
ENGINE
 *
e
);

359 
ENGINE_ªgi°î_Æl_RSA
();

361 
ENGINE_ªgi°î_DSA
(
ENGINE
 *
e
);

362 
ENGINE_uƒegi°î_DSA
(
ENGINE
 *
e
);

363 
ENGINE_ªgi°î_Æl_DSA
();

365 
ENGINE_ªgi°î_ECDH
(
ENGINE
 *
e
);

366 
ENGINE_uƒegi°î_ECDH
(
ENGINE
 *
e
);

367 
ENGINE_ªgi°î_Æl_ECDH
();

369 
ENGINE_ªgi°î_ECDSA
(
ENGINE
 *
e
);

370 
ENGINE_uƒegi°î_ECDSA
(
ENGINE
 *
e
);

371 
ENGINE_ªgi°î_Æl_ECDSA
();

373 
ENGINE_ªgi°î_DH
(
ENGINE
 *
e
);

374 
ENGINE_uƒegi°î_DH
(
ENGINE
 *
e
);

375 
ENGINE_ªgi°î_Æl_DH
();

377 
ENGINE_ªgi°î_RAND
(
ENGINE
 *
e
);

378 
ENGINE_uƒegi°î_RAND
(
ENGINE
 *
e
);

379 
ENGINE_ªgi°î_Æl_RAND
();

381 
ENGINE_ªgi°î_STORE
(
ENGINE
 *
e
);

382 
ENGINE_uƒegi°î_STORE
(
ENGINE
 *
e
);

383 
ENGINE_ªgi°î_Æl_STORE
();

385 
ENGINE_ªgi°î_cùhîs
(
ENGINE
 *
e
);

386 
ENGINE_uƒegi°î_cùhîs
(
ENGINE
 *
e
);

387 
ENGINE_ªgi°î_Æl_cùhîs
();

389 
ENGINE_ªgi°î_dige°s
(
ENGINE
 *
e
);

390 
ENGINE_uƒegi°î_dige°s
(
ENGINE
 *
e
);

391 
ENGINE_ªgi°î_Æl_dige°s
();

393 
ENGINE_ªgi°î_pkey_mëhs
(
ENGINE
 *
e
);

394 
ENGINE_uƒegi°î_pkey_mëhs
(
ENGINE
 *
e
);

395 
ENGINE_ªgi°î_Æl_pkey_mëhs
();

397 
ENGINE_ªgi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

398 
ENGINE_uƒegi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

399 
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
();

405 
ENGINE_ªgi°î_com∂ëe
(
ENGINE
 *
e
);

406 
ENGINE_ªgi°î_Æl_com∂ëe
();

415 
ENGINE_˘æ
(
ENGINE
 *
e
, 
cmd
, 
i
, *
p
, (*
f
)());

421 
ENGINE_cmd_is_execuèbÀ
(
ENGINE
 *
e
, 
cmd
);

427 
ENGINE_˘æ_cmd
(
ENGINE
 *
e
, c⁄° *
cmd_«me
,

428 
i
, *
p
, (*
f
)(), 
cmd_›ti⁄Æ
);

449 
ENGINE_˘æ_cmd_°rög
(
ENGINE
 *
e
, c⁄° *
cmd_«me
, c⁄° *
¨g
,

450 
cmd_›ti⁄Æ
);

458 
ENGINE
 *
ENGINE_√w
();

459 
ENGINE_‰ì
(
ENGINE
 *
e
);

460 
ENGINE_up_ªf
(
ENGINE
 *
e
);

461 
ENGINE_£t_id
(
ENGINE
 *
e
, c⁄° *
id
);

462 
ENGINE_£t_«me
(
ENGINE
 *
e
, c⁄° *
«me
);

463 
ENGINE_£t_RSA
(
ENGINE
 *
e
, c⁄° 
RSA_METHOD
 *
rß_mëh
);

464 
ENGINE_£t_DSA
(
ENGINE
 *
e
, c⁄° 
DSA_METHOD
 *
dß_mëh
);

465 
ENGINE_£t_ECDH
(
ENGINE
 *
e
, c⁄° 
ECDH_METHOD
 *
ecdh_mëh
);

466 
ENGINE_£t_ECDSA
(
ENGINE
 *
e
, c⁄° 
ECDSA_METHOD
 *
ecdß_mëh
);

467 
ENGINE_£t_DH
(
ENGINE
 *
e
, c⁄° 
DH_METHOD
 *
dh_mëh
);

468 
ENGINE_£t_RAND
(
ENGINE
 *
e
, c⁄° 
RAND_METHOD
 *
ønd_mëh
);

469 
ENGINE_£t_STORE
(
ENGINE
 *
e
, c⁄° 
STORE_METHOD
 *
°‹e_mëh
);

470 
ENGINE_£t_de°roy_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
de°roy_f
);

471 
ENGINE_£t_öô_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
öô_f
);

472 
ENGINE_£t_föish_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
föish_f
);

473 
ENGINE_£t_˘æ_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_CTRL_FUNC_PTR
 
˘æ_f
);

474 
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂd¥iv_f
);

475 
ENGINE_£t_lﬂd_pubkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂdpub_f
);

476 
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
(
ENGINE
 *
e
,

477 
ENGINE_SSL_CLIENT_CERT_PTR
 
lﬂds¶_f
);

478 
ENGINE_£t_cùhîs
(
ENGINE
 *
e
, 
ENGINE_CIPHERS_PTR
 
f
);

479 
ENGINE_£t_dige°s
(
ENGINE
 *
e
, 
ENGINE_DIGESTS_PTR
 
f
);

480 
ENGINE_£t_pkey_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_METHS_PTR
 
f
);

481 
ENGINE_£t_pkey_a¢1_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_ASN1_METHS_PTR
 
f
);

482 
ENGINE_£t_Êags
(
ENGINE
 *
e
, 
Êags
);

483 
ENGINE_£t_cmd_de‚s
(
ENGINE
 *
e
, c⁄° 
ENGINE_CMD_DEFN
 *
de‚s
);

485 
ENGINE_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

486 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

487 
ENGINE_£t_ex_d©a
(
ENGINE
 *
e
, 
idx
, *
¨g
);

488 *
ENGINE_gë_ex_d©a
(c⁄° 
ENGINE
 *
e
, 
idx
);

494 
ENGINE_˛ónup
();

500 c⁄° *
ENGINE_gë_id
(c⁄° 
ENGINE
 *
e
);

501 c⁄° *
ENGINE_gë_«me
(c⁄° 
ENGINE
 *
e
);

502 c⁄° 
RSA_METHOD
 *
ENGINE_gë_RSA
(c⁄° 
ENGINE
 *
e
);

503 c⁄° 
DSA_METHOD
 *
ENGINE_gë_DSA
(c⁄° 
ENGINE
 *
e
);

504 c⁄° 
ECDH_METHOD
 *
ENGINE_gë_ECDH
(c⁄° 
ENGINE
 *
e
);

505 c⁄° 
ECDSA_METHOD
 *
ENGINE_gë_ECDSA
(c⁄° 
ENGINE
 *
e
);

506 c⁄° 
DH_METHOD
 *
ENGINE_gë_DH
(c⁄° 
ENGINE
 *
e
);

507 c⁄° 
RAND_METHOD
 *
ENGINE_gë_RAND
(c⁄° 
ENGINE
 *
e
);

508 c⁄° 
STORE_METHOD
 *
ENGINE_gë_STORE
(c⁄° 
ENGINE
 *
e
);

509 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_de°roy_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

510 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_öô_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

511 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_föish_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

512 
ENGINE_CTRL_FUNC_PTR
 
ENGINE_gë_˘æ_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

513 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

514 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_pubkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

515 
ENGINE_SSL_CLIENT_CERT_PTR
 
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

516 
ENGINE_CIPHERS_PTR
 
ENGINE_gë_cùhîs
(c⁄° 
ENGINE
 *
e
);

517 
ENGINE_DIGESTS_PTR
 
ENGINE_gë_dige°s
(c⁄° 
ENGINE
 *
e
);

518 
ENGINE_PKEY_METHS_PTR
 
ENGINE_gë_pkey_mëhs
(c⁄° 
ENGINE
 *
e
);

519 
ENGINE_PKEY_ASN1_METHS_PTR
 
ENGINE_gë_pkey_a¢1_mëhs
(c⁄° 
ENGINE
 *
e
);

520 c⁄° 
EVP_CIPHER
 *
ENGINE_gë_cùhî
(
ENGINE
 *
e
, 
nid
);

521 c⁄° 
EVP_MD
 *
ENGINE_gë_dige°
(
ENGINE
 *
e
, 
nid
);

522 c⁄° 
EVP_PKEY_METHOD
 *
ENGINE_gë_pkey_mëh
(
ENGINE
 *
e
, 
nid
);

523 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh
(
ENGINE
 *
e
, 
nid
);

524 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh_°r
(
ENGINE
 *
e
,

525 c⁄° *
°r
, 
Àn
);

526 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_pkey_a¢1_föd_°r
(
ENGINE
 **
≥
,

527 c⁄° *
°r
, 
Àn
);

528 c⁄° 
ENGINE_CMD_DEFN
 *
ENGINE_gë_cmd_de‚s
(c⁄° 
ENGINE
 *
e
);

529 
ENGINE_gë_Êags
(c⁄° 
ENGINE
 *
e
);

546 
ENGINE_öô
(
ENGINE
 *
e
);

550 
ENGINE_föish
(
ENGINE
 *
e
);

555 
EVP_PKEY
 *
ENGINE_lﬂd_¥iv©e_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

556 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

557 
EVP_PKEY
 *
ENGINE_lﬂd_public_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

558 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

559 
ENGINE_lﬂd_s¶_˛õ¡_˚π
(
ENGINE
 *
e
, 
SSL
 *
s
,

560 
STACK_OF
(
X509_NAME
Ë*
ˇ_dn
, 
X509
 **
p˚π
, 
EVP_PKEY
 **
µkey
,

561 
STACK_OF
(
X509
Ë**
pŸhî
,

562 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

568 
ENGINE
 *
ENGINE_gë_deÁu…_RSA
();

570 
ENGINE
 *
ENGINE_gë_deÁu…_DSA
();

571 
ENGINE
 *
ENGINE_gë_deÁu…_ECDH
();

572 
ENGINE
 *
ENGINE_gë_deÁu…_ECDSA
();

573 
ENGINE
 *
ENGINE_gë_deÁu…_DH
();

574 
ENGINE
 *
ENGINE_gë_deÁu…_RAND
();

577 
ENGINE
 *
ENGINE_gë_cùhî_ígöe
(
nid
);

578 
ENGINE
 *
ENGINE_gë_dige°_ígöe
(
nid
);

579 
ENGINE
 *
ENGINE_gë_pkey_mëh_ígöe
(
nid
);

580 
ENGINE
 *
ENGINE_gë_pkey_a¢1_mëh_ígöe
(
nid
);

586 
ENGINE_£t_deÁu…_RSA
(
ENGINE
 *
e
);

587 
ENGINE_£t_deÁu…_°rög
(
ENGINE
 *
e
, c⁄° *
def_li°
);

589 
ENGINE_£t_deÁu…_DSA
(
ENGINE
 *
e
);

590 
ENGINE_£t_deÁu…_ECDH
(
ENGINE
 *
e
);

591 
ENGINE_£t_deÁu…_ECDSA
(
ENGINE
 *
e
);

592 
ENGINE_£t_deÁu…_DH
(
ENGINE
 *
e
);

593 
ENGINE_£t_deÁu…_RAND
(
ENGINE
 *
e
);

594 
ENGINE_£t_deÁu…_cùhîs
(
ENGINE
 *
e
);

595 
ENGINE_£t_deÁu…_dige°s
(
ENGINE
 *
e
);

596 
ENGINE_£t_deÁu…_pkey_mëhs
(
ENGINE
 *
e
);

597 
ENGINE_£t_deÁu…_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

604 
ENGINE_£t_deÁu…
(
ENGINE
 *
e
, 
Êags
);

606 
ENGINE_add_c⁄f_moduÀ
();

616 
	#OSSL_DYNAMIC_VERSION
 ()0x00020000

	)

619 
	#OSSL_DYNAMIC_OLDEST
 ()0x00020000

	)

630 *(*
	tdyn_MEM_mÆloc_cb
)(
	tsize_t
);

631 *(*
	tdyn_MEM_ªÆloc_cb
)(*, 
	tsize_t
);

632 (*
dyn_MEM_‰ì_cb
)(*);

633 
	s°_dy«mic_MEM_‚s
 {

634 
dyn_MEM_mÆloc_cb
 
mÆloc_cb
;

635 
dyn_MEM_ªÆloc_cb
 
ªÆloc_cb
;

636 
dyn_MEM_‰ì_cb
 
‰ì_cb
;

637 } 
	tdy«mic_MEM_‚s
;

640 (*
dyn_lock_lockög_cb
)(,,const *,);

641 (*
dyn_lock_add_lock_cb
)(*,,,const *,);

642 
CRYPTO_dy∆ock_vÆue
 *(*
	tdyn_dy∆ock_¸óã_cb
)(

644 (*
dyn_dy∆ock_lock_cb
)(,
	tCRYPTO_dy∆ock_vÆue
 *,

646 (*
dyn_dy∆ock_de°roy_cb
)(
	tCRYPTO_dy∆ock_vÆue
 *,

648 
	s°_dy«mic_LOCK_‚s
 {

649 
dyn_lock_lockög_cb
 
lock_lockög_cb
;

650 
dyn_lock_add_lock_cb
 
lock_add_lock_cb
;

651 
dyn_dy∆ock_¸óã_cb
 
dy∆ock_¸óã_cb
;

652 
dyn_dy∆ock_lock_cb
 
dy∆ock_lock_cb
;

653 
dyn_dy∆ock_de°roy_cb
 
dy∆ock_de°roy_cb
;

654 } 
	tdy«mic_LOCK_‚s
;

656 
	s°_dy«mic_‚s
 {

657 *
°©ic_°©e
;

658 c⁄° 
ERR_FNS
 *
îr_‚s
;

659 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
ex_d©a_‚s
;

660 
dy«mic_MEM_‚s
 
mem_‚s
;

661 
dy«mic_LOCK_‚s
 
lock_‚s
;

662 } 
	tdy«mic_‚s
;

673 (*
	tdy«mic_v_check_‚
)(
	tos¶_vîsi⁄
);

674 
	#IMPLEMENT_DYNAMIC_CHECK_FN
() \

675 
OPENSSL_EXPORT
 
	`v_check
(
v
); \

676 
OPENSSL_EXPORT
 
	`v_check
(
v
) { \

677 if(
v
 >
OSSL_DYNAMIC_OLDEST
Ë 
OSSL_DYNAMIC_VERSION
; \

678  0; }

	)

695 (*
dy«mic_böd_ígöe
)(
	tENGINE
 *
	te
, c⁄° *
	tid
,

696 c⁄° 
	tdy«mic_‚s
 *
	t‚s
);

697 
	#IMPLEMENT_DYNAMIC_BIND_FN
(
‚
) \

698 
OPENSSL_EXPORT
 \

699 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
); \

700 
OPENSSL_EXPORT
 \

701 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
) { \

702 if(
	`ENGINE_gë_°©ic_°©e
(Ë=
‚s
->
°©ic_°©e
Ë
skù_cbs
; \

703 if(!
	`CRYPTO_£t_mem_fun˘i⁄s
(
‚s
->
mem_‚s
.
mÆloc_cb
, \

704 
‚s
->
mem_‚s
.
ªÆloc_cb
, fns->mem_‚s.
‰ì_cb
)) \

706 
	`CRYPTO_£t_lockög_ˇŒback
(
‚s
->
lock_‚s
.
lock_lockög_cb
); \

707 
	`CRYPTO_£t_add_lock_ˇŒback
(
‚s
->
lock_‚s
.
lock_add_lock_cb
); \

708 
	`CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_¸óã_cb
); \

709 
	`CRYPTO_£t_dy∆ock_lock_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_lock_cb
); \

710 
	`CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_de°roy_cb
); \

711 if(!
	`CRYPTO_£t_ex_d©a_im∂emíèti⁄
(
‚s
->
ex_d©a_‚s
)) \

713 if(!
	`ERR_£t_im∂emíèti⁄
(
‚s
->
îr_‚s
))  0; \

714 
skù_cbs
: \

715 if(!
	`‚
(
e
,
id
))  0; \

716  1; }

	)

727 *
ENGINE_gë_°©ic_°©e
();

729 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
HAVE_CRYPTODEV
)

730 
ENGINE_£tup_bsd_¸y±odev
();

737 
ERR_lﬂd_ENGINE_°rögs
();

742 
	#ENGINE_F_DYNAMIC_CTRL
 180

	)

743 
	#ENGINE_F_DYNAMIC_GET_DATA_CTX
 181

	)

744 
	#ENGINE_F_DYNAMIC_LOAD
 182

	)

745 
	#ENGINE_F_DYNAMIC_SET_DATA_CTX
 183

	)

746 
	#ENGINE_F_ENGINE_ADD
 105

	)

747 
	#ENGINE_F_ENGINE_BY_ID
 106

	)

748 
	#ENGINE_F_ENGINE_CMD_IS_EXECUTABLE
 170

	)

749 
	#ENGINE_F_ENGINE_CTRL
 142

	)

750 
	#ENGINE_F_ENGINE_CTRL_CMD
 178

	)

751 
	#ENGINE_F_ENGINE_CTRL_CMD_STRING
 171

	)

752 
	#ENGINE_F_ENGINE_FINISH
 107

	)

753 
	#ENGINE_F_ENGINE_FREE_UTIL
 108

	)

754 
	#ENGINE_F_ENGINE_GET_CIPHER
 185

	)

755 
	#ENGINE_F_ENGINE_GET_DEFAULT_TYPE
 177

	)

756 
	#ENGINE_F_ENGINE_GET_DIGEST
 186

	)

757 
	#ENGINE_F_ENGINE_GET_NEXT
 115

	)

758 
	#ENGINE_F_ENGINE_GET_PKEY_ASN1_METH
 193

	)

759 
	#ENGINE_F_ENGINE_GET_PKEY_METH
 192

	)

760 
	#ENGINE_F_ENGINE_GET_PREV
 116

	)

761 
	#ENGINE_F_ENGINE_INIT
 119

	)

762 
	#ENGINE_F_ENGINE_LIST_ADD
 120

	)

763 
	#ENGINE_F_ENGINE_LIST_REMOVE
 121

	)

764 
	#ENGINE_F_ENGINE_LOAD_PRIVATE_KEY
 150

	)

765 
	#ENGINE_F_ENGINE_LOAD_PUBLIC_KEY
 151

	)

766 
	#ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT
 194

	)

767 
	#ENGINE_F_ENGINE_NEW
 122

	)

768 
	#ENGINE_F_ENGINE_REMOVE
 123

	)

769 
	#ENGINE_F_ENGINE_SET_DEFAULT_STRING
 189

	)

770 
	#ENGINE_F_ENGINE_SET_DEFAULT_TYPE
 126

	)

771 
	#ENGINE_F_ENGINE_SET_ID
 129

	)

772 
	#ENGINE_F_ENGINE_SET_NAME
 130

	)

773 
	#ENGINE_F_ENGINE_TABLE_REGISTER
 184

	)

774 
	#ENGINE_F_ENGINE_UNLOAD_KEY
 152

	)

775 
	#ENGINE_F_ENGINE_UNLOCKED_FINISH
 191

	)

776 
	#ENGINE_F_ENGINE_UP_REF
 190

	)

777 
	#ENGINE_F_INT_CTRL_HELPER
 172

	)

778 
	#ENGINE_F_INT_ENGINE_CONFIGURE
 188

	)

779 
	#ENGINE_F_INT_ENGINE_MODULE_INIT
 187

	)

780 
	#ENGINE_F_LOG_MESSAGE
 141

	)

783 
	#ENGINE_R_ALREADY_LOADED
 100

	)

784 
	#ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER
 133

	)

785 
	#ENGINE_R_CMD_NOT_EXECUTABLE
 134

	)

786 
	#ENGINE_R_COMMAND_TAKES_INPUT
 135

	)

787 
	#ENGINE_R_COMMAND_TAKES_NO_INPUT
 136

	)

788 
	#ENGINE_R_CONFLICTING_ENGINE_ID
 103

	)

789 
	#ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED
 119

	)

790 
	#ENGINE_R_DH_NOT_IMPLEMENTED
 139

	)

791 
	#ENGINE_R_DSA_NOT_IMPLEMENTED
 140

	)

792 
	#ENGINE_R_DSO_FAILURE
 104

	)

793 
	#ENGINE_R_DSO_NOT_FOUND
 132

	)

794 
	#ENGINE_R_ENGINES_SECTION_ERROR
 148

	)

795 
	#ENGINE_R_ENGINE_CONFIGURATION_ERROR
 102

	)

796 
	#ENGINE_R_ENGINE_IS_NOT_IN_LIST
 105

	)

797 
	#ENGINE_R_ENGINE_SECTION_ERROR
 149

	)

798 
	#ENGINE_R_FAILED_LOADING_PRIVATE_KEY
 128

	)

799 
	#ENGINE_R_FAILED_LOADING_PUBLIC_KEY
 129

	)

800 
	#ENGINE_R_FINISH_FAILED
 106

	)

801 
	#ENGINE_R_GET_HANDLE_FAILED
 107

	)

802 
	#ENGINE_R_ID_OR_NAME_MISSING
 108

	)

803 
	#ENGINE_R_INIT_FAILED
 109

	)

804 
	#ENGINE_R_INTERNAL_LIST_ERROR
 110

	)

805 
	#ENGINE_R_INVALID_ARGUMENT
 143

	)

806 
	#ENGINE_R_INVALID_CMD_NAME
 137

	)

807 
	#ENGINE_R_INVALID_CMD_NUMBER
 138

	)

808 
	#ENGINE_R_INVALID_INIT_VALUE
 151

	)

809 
	#ENGINE_R_INVALID_STRING
 150

	)

810 
	#ENGINE_R_NOT_INITIALISED
 117

	)

811 
	#ENGINE_R_NOT_LOADED
 112

	)

812 
	#ENGINE_R_NO_CONTROL_FUNCTION
 120

	)

813 
	#ENGINE_R_NO_INDEX
 144

	)

814 
	#ENGINE_R_NO_LOAD_FUNCTION
 125

	)

815 
	#ENGINE_R_NO_REFERENCE
 130

	)

816 
	#ENGINE_R_NO_SUCH_ENGINE
 116

	)

817 
	#ENGINE_R_NO_UNLOAD_FUNCTION
 126

	)

818 
	#ENGINE_R_PROVIDE_PARAMETERS
 113

	)

819 
	#ENGINE_R_RSA_NOT_IMPLEMENTED
 141

	)

820 
	#ENGINE_R_UNIMPLEMENTED_CIPHER
 146

	)

821 
	#ENGINE_R_UNIMPLEMENTED_DIGEST
 147

	)

822 
	#ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD
 101

	)

823 
	#ENGINE_R_VERSION_INCOMPATIBILITY
 145

	)

825 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifdef 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°


150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
,
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

240 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

241 (((()
f
)&0xfffL)*0x1000)| \

242 (((()
r
)&0xfffL)))

	)

243 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

244 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

245 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

246 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

264 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

265 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

266 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

267 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

268 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

269 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

270 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

271 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

272 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

273 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

274 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

275 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

276 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

277 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

278 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

279 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

280 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

281 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

282 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

283 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

284 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

285 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

286 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

287 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

288 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

289 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

290 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

291 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

292 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

294 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

295 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

296 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

297 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

298 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

299 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

302 
	#ERR_R_FATAL
 64

	)

303 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

304 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

305 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

306 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

307 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°


315 
îr‹
;

316 c⁄° *
°rög
;

317 } 
	tERR_STRING_DATA
;

319 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

320 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

322 
ERR_gë_îr‹
();

323 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

324 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

325 c⁄° **
d©a
, *
Êags
);

326 
ERR_≥ek_îr‹
();

327 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

328 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

329 c⁄° **
d©a
,*
Êags
);

330 
ERR_≥ek_œ°_îr‹
();

331 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

332 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

333 c⁄° **
d©a
,*
Êags
);

334 
ERR_˛ór_îr‹
();

335 *
ERR_îr‹_°rög
(
e
,*
buf
);

336 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

337 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

338 c⁄° *
ERR_func_îr‹_°rög
(
e
);

339 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

340 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

341 *
u
);

342 #i‚de‡
OPENSSL_NO_FP_API


343 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

345 #i‚de‡
OPENSSL_NO_BIO


346 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

347 
ERR_add_îr‹_d©a
(
num
, ...);

349 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

350 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

351 
ERR_lﬂd_ERR_°rögs
();

352 
ERR_lﬂd_¸y±o_°rögs
();

353 
ERR_‰ì_°rögs
();

355 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

356 #i‚de‡
OPENSSL_NO_DEPRECATED


357 
ERR_ªmove_°©e
(
pid
);

359 
ERR_STATE
 *
ERR_gë_°©e
();

361 #i‚de‡
OPENSSL_NO_LHASH


362 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

363 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

364 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

367 
ERR_gë_√xt_îr‹_libøry
();

369 
ERR_£t_m¨k
();

370 
ERR_p›_to_m¨k
();

376 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

379 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

381 #ifdef 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

78 #ifde‡
OPENSSL_FIPS


79 
	~<›ís¶/fùs.h
>

89 
	#EVP_MAX_MD_SIZE
 64

	)

90 
	#EVP_MAX_KEY_LENGTH
 32

	)

91 
	#EVP_MAX_IV_LENGTH
 16

	)

92 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

94 
	#PKCS5_SALT_LEN
 8

	)

96 
	#PKCS5_DEFAULT_ITER
 2048

	)

98 
	~<›ís¶/obje˘s.h
>

100 
	#EVP_PK_RSA
 0x0001

	)

101 
	#EVP_PK_DSA
 0x0002

	)

102 
	#EVP_PK_DH
 0x0004

	)

103 
	#EVP_PK_EC
 0x0008

	)

104 
	#EVP_PKT_SIGN
 0x0010

	)

105 
	#EVP_PKT_ENC
 0x0020

	)

106 
	#EVP_PKT_EXCH
 0x0040

	)

107 
	#EVP_PKS_RSA
 0x0100

	)

108 
	#EVP_PKS_DSA
 0x0200

	)

109 
	#EVP_PKS_EC
 0x0400

	)

110 
	#EVP_PKT_EXP
 0x1000

	)

112 
	#EVP_PKEY_NONE
 
NID_undef


	)

113 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

114 
	#EVP_PKEY_RSA2
 
NID_rß


	)

115 
	#EVP_PKEY_DSA
 
NID_dß


	)

116 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

117 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

118 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

119 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

120 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

121 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

122 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

124 #ifdef 
__˝lu•lus


131 
	sevp_pkey_°


133 
ty≥
;

134 
ßve_ty≥
;

135 
ª„ªn˚s
;

136 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

137 
ENGINE
 *
ígöe
;

139 *
±r
;

140 #i‚de‡
OPENSSL_NO_RSA


141 
rß_°
 *
rß
;

143 #i‚de‡
OPENSSL_NO_DSA


144 
dß_°
 *
dß
;

146 #i‚de‡
OPENSSL_NO_DH


147 
dh_°
 *
dh
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°


162 
ty≥
;

163 
pkey_ty≥
;

164 
md_size
;

165 
Êags
;

166 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

167 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

168 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

169 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

170 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

173 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 *
sigªt
, *
sigÀn
, *
key
);

175 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 c⁄° *
sigbuf
, 
sigÀn
,

177 *
key
);

178 
ªquúed_pkey_ty≥
[5];

179 
block_size
;

180 
˘x_size
;

182 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

185 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

186 
	tm_Àngth
,*
	tsigªt
,

187 *
	tsigÀn
, *
	tkey
);

188 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

189 
	tm_Àngth
,c⁄° *
	tsigbuf
,

190 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

195 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

202 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

204 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

208 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

212 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

216 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

220 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

224 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

225 
	#EVP_MD_CTRL_MICALG
 0x2

	)

229 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

231 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

233 #i‚de‡
OPENSSL_NO_DSA


234 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

235 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

236 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

237 
EVP_PKEY_DSA4
,0}

	)

239 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

243 #i‚de‡
OPENSSL_NO_RSA


244 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

245 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

246 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

247 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

248 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

249 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

250 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

252 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

253 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

258 
	sív_md_˘x_°


260 c⁄° 
EVP_MD
 *
dige°
;

261 
ENGINE
 *
ígöe
;

262 
Êags
;

263 *
md_d©a
;

265 
EVP_PKEY_CTX
 *
p˘x
;

267 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

272 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

274 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

276 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

278 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

285 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

286 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

287 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

288 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

289 
	#M_EVP_MD_CTX_FLAG_PSS_SALT
(
˘x
) \

290 ((
˘x
->
Êags
>>16Ë&0xFFFFË

	)

291 
	#EVP_MD_CTX_FLAG_PSS_MDLEN
 0xFFFF

	)

292 
	#EVP_MD_CTX_FLAG_PSS_MREC
 0xFFFE

	)

294 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

296 
	sevp_cùhî_°


298 
nid
;

299 
block_size
;

300 
key_Àn
;

301 
iv_Àn
;

302 
Êags
;

303 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

304 c⁄° *
iv
, 
íc
);

305 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

306 c⁄° *
ö
, 
size_t
 
öl
);

307 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

308 
˘x_size
;

309 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

310 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

311 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

312 *
≠p_d©a
;

319 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

320 
	#EVP_CIPH_ECB_MODE
 0x1

	)

321 
	#EVP_CIPH_CBC_MODE
 0x2

	)

322 
	#EVP_CIPH_CFB_MODE
 0x3

	)

323 
	#EVP_CIPH_OFB_MODE
 0x4

	)

324 
	#EVP_CIPH_MODE
 0xF0007

	)

326 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

328 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

330 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

332 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

334 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

336 
	#EVP_CIPH_NO_PADDING
 0x100

	)

338 
	#EVP_CIPH_RAND_KEY
 0x200

	)

340 
	#EVP_CIPH_FLAG_FIPS
 0x400

	)

342 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x800

	)

344 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

346 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

348 
	#EVP_CIPH_CUSTOM_COPY
 0x4000

	)

352 
	#EVP_CTRL_INIT
 0x0

	)

353 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

354 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

355 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

356 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

357 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

358 
	#EVP_CTRL_RAND_KEY
 0x6

	)

359 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

360 
	#EVP_CTRL_COPY
 0x8

	)

362 
	sevp_cùhî_öfo_°


364 c⁄° 
EVP_CIPHER
 *
cùhî
;

365 
iv
[
EVP_MAX_IV_LENGTH
];

366 } 
	tEVP_CIPHER_INFO
;

368 
	sevp_cùhî_˘x_°


370 c⁄° 
EVP_CIPHER
 *
cùhî
;

371 
ENGINE
 *
ígöe
;

372 
í¸y±
;

373 
buf_Àn
;

375 
oiv
[
EVP_MAX_IV_LENGTH
];

376 
iv
[
EVP_MAX_IV_LENGTH
];

377 
buf
[
EVP_MAX_BLOCK_LENGTH
];

378 
num
;

380 *
≠p_d©a
;

381 
key_Àn
;

382 
Êags
;

383 *
cùhî_d©a
;

384 
föÆ_u£d
;

385 
block_mask
;

386 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

389 
	sevp_Encode_Ctx_°


391 
num
;

392 
Àngth
;

397 
íc_d©a
[80];

398 
löe_num
;

399 
ex≥˘_∆
;

400 } 
	tEVP_ENCODE_CTX
;

403 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

404 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

405 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

407 #i‚de‡
OPENSSL_NO_RSA


408 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

409 (*)(
rß
))

	)

412 #i‚de‡
OPENSSL_NO_DSA


413 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

414 (*)(
dß
))

	)

417 #i‚de‡
OPENSSL_NO_DH


418 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

419 (*)(
dh
))

	)

424 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

425 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

426 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

427 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

429 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

430 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

431 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

432 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

433 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

434 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

435 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

437 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

438 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

439 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

440 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

442 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

443 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

444 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

445 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

446 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

447 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

448 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

450 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

451 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

452 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

453 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

454 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

455 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

456 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

457 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

458 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

459 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

460 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

462 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

463 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

465 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

466 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

467 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

468 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

469 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

470 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

471 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

472 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

473 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

474 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

476 #ifde‡
CONST_STRICT


477 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

479 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

481 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

482 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

483 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

484 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

485 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

487 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

488 *
out
,

489 c⁄° *
ö
,

490 
öl
);

492 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

493 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

494 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

495 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

496 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

497 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

498 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

499 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

501 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

502 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

503 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

504 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

505 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

506 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

507 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

508 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

509 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

510 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

511 
size_t
 
˙t
);

512 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

513 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

514 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

516 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

517 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

518 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

520 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

521 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

522 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

523 * 
EVP_gë_pw_¥om±
();

525 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

526 c⁄° *
ß…
, c⁄° *
d©a
,

527 
d©Æ
, 
cou¡
, *
key
,*
iv
);

529 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

530 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

531 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

533 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

534 c⁄° *
key
, c⁄° *
iv
);

535 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

536 c⁄° *
key
, c⁄° *
iv
);

537 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

538 *
oué
, c⁄° *
ö
, 
öl
);

539 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

540 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

542 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

543 c⁄° *
key
, c⁄° *
iv
);

544 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

545 c⁄° *
key
, c⁄° *
iv
);

546 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

547 *
oué
, c⁄° *
ö
, 
öl
);

548 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

549 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

551 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

552 c⁄° *
key
,c⁄° *
iv
,

553 
íc
);

554 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

555 c⁄° *
key
,c⁄° *
iv
,

556 
íc
);

557 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

558 *
oué
, c⁄° *
ö
, 
öl
);

559 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

560 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

562 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

563 
EVP_PKEY
 *
pkey
);

565 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

566 
sigÀn
,
EVP_PKEY
 *
pkey
);

568 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

569 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

570 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

571 *
sigªt
, 
size_t
 *
sigÀn
);

573 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

574 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

575 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

576 *
sig
, 
size_t
 
sigÀn
);

578 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

579 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

580 
EVP_PKEY
 *
¥iv
);

581 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

583 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

584 **
ek
, *
ekl
, *
iv
,

585 
EVP_PKEY
 **
pubk
, 
≈ubk
);

586 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

588 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

589 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

590 c⁄° *
ö
,
öl
);

591 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

592 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

594 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

595 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

596 c⁄° *
ö
, 
öl
);

597 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

598 *
out
, *
oué
);

599 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

601 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

602 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

603 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

604 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

605 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

606 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

607 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

608 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

610 #i‚de‡
OPENSSL_NO_BIO


611 
BIO_METHOD
 *
BIO_f_md
();

612 
BIO_METHOD
 *
BIO_f_ba£64
();

613 
BIO_METHOD
 *
BIO_f_cùhî
();

614 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

615 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

616 c⁄° *
i
, 
íc
);

619 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

620 #i‚de‡
OPENSSL_NO_MD2


621 c⁄° 
EVP_MD
 *
EVP_md2
();

623 #i‚de‡
OPENSSL_NO_MD4


624 c⁄° 
EVP_MD
 *
EVP_md4
();

626 #i‚de‡
OPENSSL_NO_MD5


627 c⁄° 
EVP_MD
 *
EVP_md5
();

629 #i‚de‡
OPENSSL_NO_SHA


630 c⁄° 
EVP_MD
 *
EVP_sha
();

631 c⁄° 
EVP_MD
 *
EVP_sha1
();

632 c⁄° 
EVP_MD
 *
EVP_dss
();

633 c⁄° 
EVP_MD
 *
EVP_dss1
();

634 c⁄° 
EVP_MD
 *
EVP_ecdß
();

636 #i‚de‡
OPENSSL_NO_SHA256


637 c⁄° 
EVP_MD
 *
EVP_sha224
();

638 c⁄° 
EVP_MD
 *
EVP_sha256
();

640 #i‚de‡
OPENSSL_NO_SHA512


641 c⁄° 
EVP_MD
 *
EVP_sha384
();

642 c⁄° 
EVP_MD
 *
EVP_sha512
();

644 #i‚de‡
OPENSSL_NO_MDC2


645 c⁄° 
EVP_MD
 *
EVP_mdc2
();

647 #i‚de‡
OPENSSL_NO_RIPEMD


648 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

650 #i‚de‡
OPENSSL_NO_WHIRLPOOL


651 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

653 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

654 #i‚de‡
OPENSSL_NO_DES


655 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

656 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

657 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

658 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

659 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

660 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

661 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

662 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

663 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

664 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

665 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

667 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

668 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

670 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

671 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

672 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

673 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

674 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

675 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

676 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

677 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

678 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

679 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

680 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

684 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


685 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

686 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

687 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

691 #i‚de‡
OPENSSL_NO_RC4


692 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

693 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

695 #i‚de‡
OPENSSL_NO_RC2


696 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

697 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

698 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

699 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

700 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

701 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

702 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

704 #i‚de‡
OPENSSL_NO_BF


705 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

706 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

707 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

708 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

709 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

711 #i‚de‡
OPENSSL_NO_CAST


712 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

713 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

714 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

715 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

716 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

718 #i‚de‡
OPENSSL_NO_AES


719 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

720 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

721 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

722 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

723 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

724 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

725 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

727 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

729 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

730 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

731 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

732 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

733 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

734 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

735 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

737 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

739 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

740 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

741 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

742 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

743 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

744 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

745 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

747 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

750 #i‚de‡
OPENSSL_NO_CAMELLIA


751 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

752 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

753 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

754 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

755 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

756 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

757 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

758 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

759 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

760 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

761 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

762 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

763 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

764 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

765 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

766 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

767 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

768 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

769 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

770 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

771 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

774 #i‚de‡
OPENSSL_NO_SEED


775 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

776 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

777 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

778 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

779 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

782 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

783 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

785 #ifde‡
OPENSSL_LOAD_CONF


786 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

787 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

789 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

790 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

793 
O≥nSSL_add_Æl_cùhîs
();

794 
O≥nSSL_add_Æl_dige°s
();

795 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

796 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

797 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

799 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

800 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

802 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

803 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

804 
EVP_˛ónup
();

806 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

807 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

808 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

809 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

811 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

812 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

813 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

814 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

816 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

817 c⁄° *
íc_key
,
íc_key_Àn
,

818 
EVP_PKEY
 *
¥iv©e_key
);

819 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

820 c⁄° *
key
,
key_Àn
,

821 
EVP_PKEY
 *
pub_key
);

822 
EVP_PKEY_ty≥
(
ty≥
);

823 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

824 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

825 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

826 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

827 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

828 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

829 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

830 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

832 #i‚de‡
OPENSSL_NO_RSA


833 
rß_°
;

834 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

835 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

837 #i‚de‡
OPENSSL_NO_DSA


838 
dß_°
;

839 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

840 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

842 #i‚de‡
OPENSSL_NO_DH


843 
dh_°
;

844 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

845 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

848 
EVP_PKEY
 * 
EVP_PKEY_√w
();

849 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

851 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

852 
Àngth
);

853 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

855 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

856 
Àngth
);

857 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

858 
Àngth
);

859 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

861 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

862 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

863 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

864 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

866 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

868 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

869 
ödít
, 
ASN1_PCTX
 *
p˘x
);

870 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

871 
ödít
, 
ASN1_PCTX
 *
p˘x
);

872 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

873 
ödít
, 
ASN1_PCTX
 *
p˘x
);

875 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

877 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

880 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

881 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

884 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

885 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

888 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

889 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

890 
í_de
);

891 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

892 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

893 
keyÀn
, *
out
);

894 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

895 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

896 c⁄° 
EVP_MD
 *
dige°
,

897 
keyÀn
, *
out
);

898 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

899 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

900 
í_de
);

902 
PKCS5_PBE_add
();

904 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

905 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

910 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

912 
	#EVP_PBE_TYPE_PRF
 0x1

	)

914 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

915 
EVP_PBE_KEYGEN
 *
keygí
);

916 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

917 
EVP_PBE_KEYGEN
 *
keygí
);

918 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

919 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

920 
EVP_PBE_˛ónup
();

922 
	#ASN1_PKEY_ALIAS
 0x1

	)

923 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

924 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

926 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

927 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

928 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

929 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

930 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

932 
EVP_PKEY_a¢1_gë_cou¡
();

933 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

934 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

935 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

936 c⁄° *
°r
, 
Àn
);

937 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

938 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

939 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

940 c⁄° **
pöfo
, c⁄° **
µem_°r
,

941 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

943 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

944 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

945 c⁄° *
≥m_°r
, c⁄° *
öfo
);

946 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

947 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

948 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

949 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

950 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

951 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

952 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

953 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

954 
ASN1_PCTX
 *
p˘x
),

955 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

956 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

957 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

958 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

959 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

960 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

961 
ASN1_PCTX
 *
p˘x
));

962 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

963 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

964 c⁄° **
pdî
, 
dîÀn
),

965 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

966 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

967 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

968 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

969 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

970 
ASN1_PCTX
 *
p˘x
));

972 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

973 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

974 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

975 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

976 
¨g1
, *
¨g2
));

979 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

980 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

981 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

982 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

983 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

984 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

985 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

986 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

987 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

988 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

989 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

991 
	#EVP_PKEY_OP_TYPE_SIG
 \

992 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

993 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

995 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

996 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

998 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

999 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1001 
	#EVP_PKEY_OP_TYPE_GEN
 \

1002 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1004 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1005 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1006 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1008 
	#EVP_PKEY_CTRL_MD
 1

	)

1009 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1011 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1012 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1014 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1016 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1018 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1021 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1023 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1024 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1025 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1027 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1030 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1032 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1033 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1034 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1035 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1037 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1038 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1039 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1040 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1042 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1043 
cmd
, 
p1
, *
p2
);

1044 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1045 c⁄° *
vÆue
);

1047 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1048 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1050 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1051 *
key
, 
keyÀn
);

1053 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1054 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1055 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1057 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1059 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1060 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1062 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1063 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1064 *
sig
, 
size_t
 *
sigÀn
,

1065 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1066 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1067 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1068 c⁄° *
sig
, 
size_t
 
sigÀn
,

1069 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1070 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1071 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1072 *
rout
, 
size_t
 *
rouéí
,

1073 c⁄° *
sig
, 
size_t
 
sigÀn
);

1074 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1075 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1076 *
out
, 
size_t
 *
ouéí
,

1077 c⁄° *
ö
, 
size_t
 
öÀn
);

1078 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1079 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1080 *
out
, 
size_t
 *
ouéí
,

1081 c⁄° *
ö
, 
size_t
 
öÀn
);

1083 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1084 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1085 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1087 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1089 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1090 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1091 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1092 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1094 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1095 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1097 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1099 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1100 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1102 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1103 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1105 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1106 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1108 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1109 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1110 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1112 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1113 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1114 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1116 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1117 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1118 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1119 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1121 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1122 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1123 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1124 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1126 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1127 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1128 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1129 *
sig
, 
size_t
 *
sigÀn
,

1130 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1132 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1133 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1134 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1135 
EVP_MD_CTX
 *
m˘x
));

1137 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1138 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1139 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1140 
EVP_MD_CTX
 *
m˘x
));

1142 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1143 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1144 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1145 c⁄° *
ö
, 
size_t
 
öÀn
));

1147 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1148 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1149 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1150 c⁄° *
ö
, 
size_t
 
öÀn
));

1152 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1153 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1154 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1156 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1157 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1158 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1159 c⁄° *
ty≥
, c⁄° *
vÆue
));

1165 
ERR_lﬂd_EVP_°rögs
();

1170 
	#EVP_F_AESNI_INIT_KEY
 163

	)

1171 
	#EVP_F_AES_INIT_KEY
 133

	)

1172 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1173 
	#EVP_F_D2I_PKEY
 100

	)

1174 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1175 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1176 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1177 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1178 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1179 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1180 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1181 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1182 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1183 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1184 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1185 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1186 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1187 
	#EVP_F_EVP_MD_SIZE
 162

	)

1188 
	#EVP_F_EVP_OPENINIT
 102

	)

1189 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1190 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1191 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1192 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1193 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1194 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1195 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1196 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1197 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1198 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1199 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1200 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1201 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1202 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1203 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1204 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1205 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1206 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1207 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1208 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1209 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1210 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1211 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1212 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1213 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1214 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1215 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1216 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1217 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1218 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1219 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1220 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1221 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1222 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1223 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1224 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1225 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1226 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1227 
	#EVP_F_INT_CTX_NEW
 157

	)

1228 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1229 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1230 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1231 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1232 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1233 
	#EVP_F_RC5_CTRL
 125

	)

1236 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1237 
	#EVP_R_ASN1_LIB
 140

	)

1238 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1239 
	#EVP_R_BAD_DECRYPT
 100

	)

1240 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1241 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1242 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1243 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1244 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1245 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1246 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1247 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1248 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1249 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1250 
	#EVP_R_DECODE_ERROR
 114

	)

1251 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1252 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1253 
	#EVP_R_DISABLED_FOR_FIPS
 160

	)

1254 
	#EVP_R_ENCODE_ERROR
 115

	)

1255 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1256 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1257 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1258 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1259 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1260 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1261 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1262 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1263 
	#EVP_R_INVALID_DIGEST
 152

	)

1264 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1265 
	#EVP_R_INVALID_OPERATION
 148

	)

1266 
	#EVP_R_IV_TOO_LARGE
 102

	)

1267 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1268 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1269 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1270 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1271 
	#EVP_R_NO_CIPHER_SET
 131

	)

1272 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1273 
	#EVP_R_NO_DIGEST_SET
 139

	)

1274 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1275 
	#EVP_R_NO_KEY_SET
 154

	)

1276 
	#EVP_R_NO_OPERATION_SET
 149

	)

1277 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1278 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1279 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1280 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1281 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1282 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1283 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1284 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1285 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1286 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1287 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1288 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1289 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1290 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1291 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1292 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1293 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1294 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1295 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1296 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1297 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1298 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1300 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/md5.h

59 #i‚de‡
HEADER_MD5_H


60 
	#HEADER_MD5_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_MD5


70 #îr‹ 
MD5
 
is
 
dißbÀd
.

80 #i‡
deföed
(
__LP32__
)

81 
	#MD5_LONG
 

	)

82 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

83 
	#MD5_LONG
 

	)

84 
	#MD5_LONG_LOG2
 3

	)

93 
	#MD5_LONG
 

	)

96 
	#MD5_CBLOCK
 64

	)

97 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

98 
	#MD5_DIGEST_LENGTH
 16

	)

100 
	sMD5°©e_°


102 
MD5_LONG
 
A
,
B
,
C
,
D
;

103 
MD5_LONG
 
Nl
,
Nh
;

104 
MD5_LONG
 
d©a
[
MD5_LBLOCK
];

105 
num
;

106 } 
	tMD5_CTX
;

108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_MD5_Inô
(
MD5_CTX
 *
c
);

111 
MD5_Inô
(
MD5_CTX
 *
c
);

112 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

114 *
MD5
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

70 #îr‹ 
SHA
 
is
 
dißbÀd
.

73 #i‡
deföed
(
OPENSSL_FIPS
)

74 
	#FIPS_SHA_SIZE_T
 
size_t


	)

84 #i‡
deföed
(
__LP32__
)

85 
	#SHA_LONG
 

	)

86 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

87 
	#SHA_LONG
 

	)

88 
	#SHA_LONG_LOG2
 3

	)

90 
	#SHA_LONG
 

	)

93 
	#SHA_LBLOCK
 16

	)

94 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

97 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

98 
	#SHA_DIGEST_LENGTH
 20

	)

100 
	sSHA°©e_°


102 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

103 
SHA_LONG
 
Nl
,
Nh
;

104 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

105 
num
;

106 } 
	tSHA_CTX
;

108 #i‚de‡
OPENSSL_NO_SHA0


109 #ifde‡
OPENSSL_FIPS


110 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

112 
SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

114 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

115 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

116 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

118 #i‚de‡
OPENSSL_NO_SHA1


119 
SHA1_Inô
(
SHA_CTX
 *
c
);

120 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

121 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

122 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

123 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

126 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

129 
	#SHA224_DIGEST_LENGTH
 28

	)

130 
	#SHA256_DIGEST_LENGTH
 32

	)

132 
	sSHA256°©e_°


134 
SHA_LONG
 
h
[8];

135 
SHA_LONG
 
Nl
,
Nh
;

136 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

137 
num
,
md_Àn
;

138 } 
	tSHA256_CTX
;

140 #i‚de‡
OPENSSL_NO_SHA256


141 
SHA224_Inô
(
SHA256_CTX
 *
c
);

142 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

143 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

144 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

145 
SHA256_Inô
(
SHA256_CTX
 *
c
);

146 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

147 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

148 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

149 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

152 
	#SHA384_DIGEST_LENGTH
 48

	)

153 
	#SHA512_DIGEST_LENGTH
 64

	)

155 #i‚de‡
OPENSSL_NO_SHA512


161 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

164 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

165 
	#SHA_LONG64
 
__öt64


	)

166 
	#U64
(
C
ËC##
UI64


	)

167 #ñi‡
deföed
(
__¨ch64__
)

168 
	#SHA_LONG64
 

	)

169 
	#U64
(
C
ËC##
UL


	)

171 
	#SHA_LONG64
 

	)

172 
	#U64
(
C
ËC##
ULL


	)

175 
	sSHA512°©e_°


177 
SHA_LONG64
 
h
[8];

178 
SHA_LONG64
 
Nl
,
Nh
;

180 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

181 
p
[
SHA512_CBLOCK
];

182 } 
u
;

183 
num
,
md_Àn
;

184 } 
	tSHA512_CTX
;

187 #i‚de‡
OPENSSL_NO_SHA512


188 
SHA384_Inô
(
SHA512_CTX
 *
c
);

189 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

190 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

191 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

192 
SHA512_Inô
(
SHA512_CTX
 *
c
);

193 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

194 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

195 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

196 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

199 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


177 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

180 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

181 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

183 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

185 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

186 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

188 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

193 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

194 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

195 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

196 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

197 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

198 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

199 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

200 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

202 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

203 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

204 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

205 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

206 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

207 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

209 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

210 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

211 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

214 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

215 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

217 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

218 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

220 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

221 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

222 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

227 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

228 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

229 
	#SSL_TXT_LOW
 "LOW"

	)

230 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

231 
	#SSL_TXT_HIGH
 "HIGH"

	)

232 
	#SSL_TXT_FIPS
 "FIPS"

	)

234 
	#SSL_TXT_kFZA
 "kFZA"

	)

235 
	#SSL_TXT_aFZA
 "aFZA"

	)

236 
	#SSL_TXT_eFZA
 "eFZA"

	)

237 
	#SSL_TXT_FZA
 "FZA"

	)

239 
	#SSL_TXT_aNULL
 "aNULL"

	)

240 
	#SSL_TXT_eNULL
 "eNULL"

	)

241 
	#SSL_TXT_NULL
 "NULL"

	)

243 
	#SSL_TXT_kRSA
 "kRSA"

	)

244 
	#SSL_TXT_kDHr
 "kDHr"

	)

245 
	#SSL_TXT_kDHd
 "kDHd"

	)

246 
	#SSL_TXT_kDH
 "kDH"

	)

247 
	#SSL_TXT_kEDH
 "kEDH"

	)

248 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

249 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

250 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

251 
	#SSL_TXT_kECDH
 "kECDH"

	)

252 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

253 
	#SSL_TXT_kPSK
 "kPSK"

	)

254 
	#SSL_TXT_kGOST
 "kGOST"

	)

256 
	#SSL_TXT_aRSA
 "aRSA"

	)

257 
	#SSL_TXT_aDSS
 "aDSS"

	)

258 
	#SSL_TXT_aDH
 "aDH"

	)

259 
	#SSL_TXT_aECDH
 "aECDH"

	)

260 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

261 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

262 
	#SSL_TXT_aPSK
 "aPSK"

	)

263 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

264 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

265 
	#SSL_TXT_aGOST
 "aGOST"

	)

267 
	#SSL_TXT_DSS
 "DSS"

	)

268 
	#SSL_TXT_DH
 "DH"

	)

269 
	#SSL_TXT_EDH
 "EDH"

	)

270 
	#SSL_TXT_ADH
 "ADH"

	)

271 
	#SSL_TXT_RSA
 "RSA"

	)

272 
	#SSL_TXT_ECDH
 "ECDH"

	)

273 
	#SSL_TXT_EECDH
 "EECDH"

	)

274 
	#SSL_TXT_AECDH
 "AECDH"

	)

275 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

276 
	#SSL_TXT_KRB5
 "KRB5"

	)

277 
	#SSL_TXT_PSK
 "PSK"

	)

279 
	#SSL_TXT_DES
 "DES"

	)

280 
	#SSL_TXT_3DES
 "3DES"

	)

281 
	#SSL_TXT_RC4
 "RC4"

	)

282 
	#SSL_TXT_RC2
 "RC2"

	)

283 
	#SSL_TXT_IDEA
 "IDEA"

	)

284 
	#SSL_TXT_SEED
 "SEED"

	)

285 
	#SSL_TXT_AES128
 "AES128"

	)

286 
	#SSL_TXT_AES256
 "AES256"

	)

287 
	#SSL_TXT_AES
 "AES"

	)

288 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

289 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

290 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

292 
	#SSL_TXT_MD5
 "MD5"

	)

293 
	#SSL_TXT_SHA1
 "SHA1"

	)

294 
	#SSL_TXT_SHA
 "SHA"

	)

295 
	#SSL_TXT_GOST94
 "GOST94"

	)

296 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

298 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

299 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

300 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

302 
	#SSL_TXT_EXP
 "EXP"

	)

303 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

305 
	#SSL_TXT_ALL
 "ALL"

	)

321 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

322 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

327 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!aNULL:!eNULL:!SSLv2"

	)

336 
	#SSL_SENT_SHUTDOWN
 1

	)

337 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

339 #ifde‡
__˝lu•lus


343 #ifde‡ 
__˝lu•lus


347 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

348 
	#OPENSSL_NO_SSL2


	)

351 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

352 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

357 
s¶_°
 *
	ts¶_¸ock_°
;

358 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

361 
	ss¶_cùhî_°


363 
vÆid
;

364 c⁄° *
«me
;

365 
id
;

368 
Æg‹ôhm_mkey
;

369 
Æg‹ôhm_auth
;

370 
Æg‹ôhm_íc
;

371 
Æg‹ôhm_mac
;

372 
Æg‹ôhm_s¶
;

374 
Ægo_°ªngth
;

375 
Æg‹ôhm2
;

376 
°ªngth_bôs
;

377 
Æg_bôs
;

378 } 
	tSSL_CIPHER
;

380 
DECLARE_STACK_OF
(
SSL_CIPHER
)

382 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
, 
	tÀn
, *
	t¨g
);

383 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
, 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
, SSL_CIPHER **
	tcùhî
, *
	t¨g
);

386 
	ss¶_mëhod_°


388 
vîsi⁄
;

389 (*
s¶_√w
)(
SSL
 *
s
);

390 (*
s¶_˛ór
)(
SSL
 *
s
);

391 (*
s¶_‰ì
)(
SSL
 *
s
);

392 (*
s¶_ac˚±
)(
SSL
 *
s
);

393 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

394 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

395 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

396 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

397 (*
s¶_shutdown
)(
SSL
 *
s
);

398 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

399 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

400 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

401 
max
, *
ok
);

402 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

403 
≥ek
);

404 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

405 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

406 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

407 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

408 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

409 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

410 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

411 (*
num_cùhîs
)();

412 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

413 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

414 (*
gë_timeout
)();

415 
s¶3_íc_mëhod
 *
s¶3_íc
;

416 (*
s¶_vîsi⁄
)();

417 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

418 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

419 } 
	tSSL_METHOD
;

443 
	ss¶_£ssi⁄_°


445 
s¶_vîsi⁄
;

449 
key_¨g_Àngth
;

450 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

451 
ma°î_key_Àngth
;

452 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

454 
£ssi⁄_id_Àngth
;

455 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

459 
sid_˘x_Àngth
;

460 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

462 #i‚de‡
OPENSSL_NO_KRB5


463 
krb5_˛õ¡_¥öc_Àn
;

464 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

466 #i‚de‡
OPENSSL_NO_PSK


467 *
psk_idítôy_höt
;

468 *
psk_idítôy
;

470 
nŸ_ªsumabÀ
;

473 
£ss_˚π_°
 *
£ss_˚π
;

479 
X509
 *
≥î
;

482 
vîify_ªsu…
;

484 
ª„ªn˚s
;

485 
timeout
;

486 
time
;

488 
com¥ess_mëh
;

490 c⁄° 
SSL_CIPHER
 *
cùhî
;

491 
cùhî_id
;

495 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

497 
CRYPTO_EX_DATA
 
ex_d©a
;

501 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

502 #i‚de‡
OPENSSL_NO_TLSEXT


503 *
é£xt_ho°«me
;

505 *
é£xt_tick
;

506 
size_t
 
é£xt_tickÀn
;

507 
é£xt_tick_li„time_höt
;

509 } 
	tSSL_SESSION
;

512 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

513 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

515 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

516 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

517 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

518 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

519 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

520 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

521 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

522 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

529 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

533 
	#SSL_OP_ALL
 0x80000FF7L

	)

536 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

538 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

540 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

542 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

545 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

547 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

549 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

551 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

553 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

556 
	#SSL_OP_EPHEMERAL_RSA
 0x00200000L

	)

559 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

564 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

566 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

567 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

568 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

572 
	#SSL_OP_PKCS1_CHECK_1
 0x08000000L

	)

573 
	#SSL_OP_PKCS1_CHECK_2
 0x10000000L

	)

574 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

575 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

580 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

584 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

589 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

592 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

594 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

598 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

603 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

604 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

605 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

606 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

607 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

608 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

609 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

610 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

611 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

612 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

613 
	#SSL_gë_›ti⁄s
(
s¶
) \

614 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

616 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

617 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

618 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

619 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

620 
	#SSL_CTX_gë_mode
(
˘x
) \

621 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

622 
	#SSL_˛ór_mode
(
s¶
,
›
) \

623 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

624 
	#SSL_£t_mode
(
s¶
,
›
) \

625 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

626 
	#SSL_gë_mode
(
s¶
) \

627 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

628 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

629 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

631 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

632 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

634 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

635 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

636 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

637 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

641 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

642 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

644 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

647 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

662 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

663 *
	tid_Àn
);

665 
	ss¶_comp_°


667 
id
;

668 c⁄° *
«me
;

669 #i‚de‡
OPENSSL_NO_COMP


670 
COMP_METHOD
 *
mëhod
;

672 *
mëhod
;

674 } 
	tSSL_COMP
;

676 
DECLARE_STACK_OF
(
SSL_COMP
)

677 
DECLARE_LHASH_OF
(
SSL_SESSION
);

679 
	ss¶_˘x_°


681 c⁄° 
SSL_METHOD
 *
mëhod
;

683 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

685 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

687 
x509_°‹e_°
 *
˚π_°‹e
;

688 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

691 
£ssi⁄_ˇche_size
;

692 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

693 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

700 
£ssi⁄_ˇche_mode
;

705 
£ssi⁄_timeout
;

715 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

716 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

717 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

718 *
d©a
,
Àn
,*
c›y
);

722 
£ss_c⁄√˘
;

723 
£ss_c⁄√˘_ª√gŸüã
;

724 
£ss_c⁄√˘_good
;

725 
£ss_ac˚±
;

726 
£ss_ac˚±_ª√gŸüã
;

727 
£ss_ac˚±_good
;

728 
£ss_miss
;

729 
£ss_timeout
;

730 
£ss_ˇche_fuŒ
;

731 
£ss_hô
;

732 
£ss_cb_hô
;

738 } 
°©s
;

740 
ª„ªn˚s
;

743 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

744 *
≠p_vîify_¨g
;

749 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

752 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

755 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

758 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

759 *
cookõ_Àn
);

762 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

763 
cookõ_Àn
);

765 
CRYPTO_EX_DATA
 
ex_d©a
;

767 c⁄° 
EVP_MD
 *
rß_md5
;

768 c⁄° 
EVP_MD
 *
md5
;

769 c⁄° 
EVP_MD
 *
sha1
;

771 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

772 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

777 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

780 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

785 
›ti⁄s
;

786 
mode
;

787 
max_˚π_li°
;

789 
˚π_°
 *
˚π
;

790 
ªad_ahód
;

793 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

794 *
msg_ˇŒback_¨g
;

796 
vîify_mode
;

797 
sid_˘x_Àngth
;

798 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

799 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

802 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

804 
X509_VERIFY_PARAM
 *
∑øm
;

807 
puΩo£
;

808 
åu°
;

811 
quõt_shutdown
;

817 
max_£nd_‰agmít
;

819 #i‚de‡
OPENSSL_ENGINE


822 
ENGINE
 *
˛õ¡_˚π_ígöe
;

825 #i‚de‡
OPENSSL_NO_TLSEXT


827 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

828 *
é£xt_£rvî«me_¨g
;

830 
é£xt_tick_key_«me
[16];

831 
é£xt_tick_hmac_key
[16];

832 
é£xt_tick_´s_key
[16];

834 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

835 *
«me
, *
iv
,

836 
EVP_CIPHER_CTX
 *
e˘x
,

837 
HMAC_CTX
 *
h˘x
, 
íc
);

841 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

842 *
é£xt_°©us_¨g
;

845 (*
é£xt_›aque_¥f_öput_ˇŒback
)(
SSL
 *, *
≥îöput
, 
size_t
 
Àn
, *
¨g
);

846 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

849 #i‚de‡
OPENSSL_NO_PSK


850 *
psk_idítôy_höt
;

851 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

852 
max_idítôy_Àn
, *
psk
,

853 
max_psk_Àn
);

854 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

855 *
psk
, 
max_psk_Àn
);

858 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


859 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

860 
‰ìli°_max_Àn
;

861 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

862 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

866 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

867 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

868 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

869 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

870 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

872 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

873 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

874 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

875 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

877 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

878 
	#SSL_CTX_£ss_numbî
(
˘x
) \

879 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

880 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

881 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

882 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

883 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

884 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

885 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

886 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

887 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

888 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

889 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

890 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

891 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

892 
	#SSL_CTX_£ss_hôs
(
˘x
) \

893 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

894 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

895 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

896 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

897 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

898 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

899 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

900 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

901 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

903 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

904 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

905 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

906 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

907 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

908 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

909 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

910 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

911 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

912 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

913 #i‚de‡
OPENSSL_NO_ENGINE


914 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

916 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

917 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

919 #i‚de‡
OPENSSL_NO_PSK


922 
	#PSK_MAX_IDENTITY_LEN
 128

	)

923 
	#PSK_MAX_PSK_LEN
 256

	)

924 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

925 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

926 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

927 
max_psk_Àn
));

928 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

929 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

930 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

931 
max_psk_Àn
));

932 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

933 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

934 *
psk
, 
max_psk_Àn
));

935 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

936 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

937 *
psk
, 
max_psk_Àn
));

938 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

939 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

940 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

941 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

944 
	#SSL_NOTHING
 1

	)

945 
	#SSL_WRITING
 2

	)

946 
	#SSL_READING
 3

	)

947 
	#SSL_X509_LOOKUP
 4

	)

950 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

951 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

952 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

953 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

955 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

956 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

958 
	ss¶_°


963 
vîsi⁄
;

964 
ty≥
;

966 c⁄° 
SSL_METHOD
 *
mëhod
;

972 #i‚de‡
OPENSSL_NO_BIO


973 
BIO
 *
rbio
;

974 
BIO
 *
wbio
;

975 
BIO
 *
bbio
;

978 *
rbio
;

979 *
wbio
;

980 *
bbio
;

986 
rw°©e
;

989 
ö_h™dshake
;

990 (*
h™dshake_func
)(
SSL
 *);

1000 
£rvî
;

1002 
√w_£ssi⁄
;

1008 
quõt_shutdown
;

1009 
shutdown
;

1011 
°©e
;

1012 
r°©e
;

1014 
BUF_MEM
 *
öô_buf
;

1015 *
öô_msg
;

1016 
öô_num
;

1017 
öô_off
;

1020 *
∑ckë
;

1021 
∑ckë_Àngth
;

1023 
s¶2_°©e_°
 *
s2
;

1024 
s¶3_°©e_°
 *
s3
;

1025 
dés1_°©e_°
 *
d1
;

1027 
ªad_ahód
;

1031 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1032 *
msg_ˇŒback_¨g
;

1034 
hô
;

1036 
X509_VERIFY_PARAM
 *
∑øm
;

1039 
puΩo£
;

1040 
åu°
;

1044 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1045 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1049 
mac_Êags
;

1050 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1051 
EVP_MD_CTX
 *
ªad_hash
;

1052 #i‚de‡
OPENSSL_NO_COMP


1053 
COMP_CTX
 *
ex∑nd
;

1055 *
ex∑nd
;

1058 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1059 
EVP_MD_CTX
 *
wrôe_hash
;

1060 #i‚de‡
OPENSSL_NO_COMP


1061 
COMP_CTX
 *
com¥ess
;

1063 *
com¥ess
;

1070 
˚π_°
 *
˚π
;

1074 
sid_˘x_Àngth
;

1075 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1078 
SSL_SESSION
 *
£ssi⁄
;

1081 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1084 
vîify_mode
;

1086 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1088 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1090 
îr‹
;

1091 
îr‹_code
;

1093 #i‚de‡
OPENSSL_NO_KRB5


1094 
KSSL_CTX
 *
ks¶_˘x
;

1097 #i‚de‡
OPENSSL_NO_PSK


1098 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

1099 
max_idítôy_Àn
, *
psk
,

1100 
max_psk_Àn
);

1101 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1102 *
psk
, 
max_psk_Àn
);

1105 
SSL_CTX
 *
˘x
;

1108 
debug
;

1111 
vîify_ªsu…
;

1112 
CRYPTO_EX_DATA
 
ex_d©a
;

1115 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1117 
ª„ªn˚s
;

1118 
›ti⁄s
;

1119 
mode
;

1120 
max_˚π_li°
;

1121 
fú°_∑ckë
;

1122 
˛õ¡_vîsi⁄
;

1124 
max_£nd_‰agmít
;

1125 #i‚de‡
OPENSSL_NO_TLSEXT


1127 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1128 *
d©a
, 
Àn
,

1129 *
¨g
);

1130 *
é£xt_debug_¨g
;

1131 *
é£xt_ho°«me
;

1132 
£rvî«me_d⁄e
;

1139 
é£xt_°©us_ty≥
;

1141 
é£xt_°©us_ex≥˘ed
;

1143 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1144 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1146 *
é£xt_oc•_ª•
;

1147 
é£xt_oc•_ª•Àn
;

1150 
é£xt_tickë_ex≥˘ed
;

1153 *
é£xt_›aque_¥f_öput
;

1154 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1157 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1160 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1161 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1164 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1165 *
és_£ssi⁄_£¸ë_cb_¨g
;

1167 
SSL_CTX
 * 
öôül_˘x
;

1168 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1170 
	#£ssi⁄_˘x
 
˘x


	)

1174 #ifde‡
__˝lu•lus


1178 
	~<›ís¶/s¶2.h
>

1179 
	~<›ís¶/s¶3.h
>

1180 
	~<›ís¶/és1.h
>

1181 
	~<›ís¶/dés1.h
>

1182 
	~<›ís¶/s¶23.h
>

1184 #ifde‡ 
__˝lu•lus


1189 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1190 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1191 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1192 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1193 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1194 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1203 
	#SSL_ST_CONNECT
 0x1000

	)

1204 
	#SSL_ST_ACCEPT
 0x2000

	)

1205 
	#SSL_ST_MASK
 0x0FFF

	)

1206 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1207 
	#SSL_ST_BEFORE
 0x4000

	)

1208 
	#SSL_ST_OK
 0x03

	)

1209 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1211 
	#SSL_CB_LOOP
 0x01

	)

1212 
	#SSL_CB_EXIT
 0x02

	)

1213 
	#SSL_CB_READ
 0x04

	)

1214 
	#SSL_CB_WRITE
 0x08

	)

1215 
	#SSL_CB_ALERT
 0x4000

	)

1216 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1217 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1218 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1219 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1220 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1221 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1222 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1223 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1226 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1227 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1228 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1229 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1230 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1231 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1235 
	#SSL_ST_READ_HEADER
 0xF0

	)

1236 
	#SSL_ST_READ_BODY
 0xF1

	)

1237 
	#SSL_ST_READ_DONE
 0xF2

	)

1243 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1244 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1248 
	#SSL_VERIFY_NONE
 0x00

	)

1249 
	#SSL_VERIFY_PEER
 0x01

	)

1250 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1251 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1253 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1254 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1258 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1259 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1260 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1261 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1262 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1265 
	#SSL_gë_cùhî
(
s
) \

1266 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1267 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1268 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1269 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1270 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1271 
	#SSL_gë_cùhî_«me
(
s
) \

1272 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1273 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1274 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1275 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1276 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1278 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1279 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1281 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1283 
	#SSL_AD_REASON_OFFSET
 1000

	)

1286 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1287 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1288 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1289 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1290 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1291 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1292 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1293 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1294 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1295 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1296 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1297 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1298 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1299 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1300 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1301 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1302 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1303 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1304 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1305 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1306 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1307 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1308 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1309 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1310 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1311 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1312 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1313 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1314 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1315 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1317 
	#SSL_ERROR_NONE
 0

	)

1318 
	#SSL_ERROR_SSL
 1

	)

1319 
	#SSL_ERROR_WANT_READ
 2

	)

1320 
	#SSL_ERROR_WANT_WRITE
 3

	)

1321 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1322 
	#SSL_ERROR_SYSCALL
 5

	)

1323 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1324 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1325 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1327 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1328 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1329 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1330 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1331 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1332 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1333 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1335 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1336 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1337 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1338 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1339 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1340 
	#SSL_CTRL_GET_FLAGS
 13

	)

1341 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1343 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1344 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1347 
	#SSL_CTRL_SET_MTU
 17

	)

1349 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1350 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1351 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1352 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1353 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1354 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1355 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1356 
	#SSL_CTRL_SESS_HIT
 27

	)

1357 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1358 
	#SSL_CTRL_SESS_MISSES
 29

	)

1359 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1360 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1361 
	#SSL_CTRL_OPTIONS
 32

	)

1362 
	#SSL_CTRL_MODE
 33

	)

1364 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1365 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1366 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1367 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1368 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1369 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1371 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1372 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1374 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1377 #i‚de‡
OPENSSL_NO_TLSEXT


1378 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1379 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1380 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1381 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1382 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1383 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1384 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1385 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1386 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1387 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1388 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1389 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1390 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1391 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1392 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1393 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1394 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1395 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1396 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1398 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1401 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1402 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1403 
	#DTLS_CTRL_LISTEN
 75

	)

1405 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1406 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1407 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1409 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1410 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1411 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1412 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1413 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1414 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1416 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1417 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1418 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1419 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1420 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1421 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1422 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1423 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1425 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1426 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1427 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1428 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1429 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1430 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1431 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1432 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1434 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1435 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1436 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1437 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1438 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1439 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1440 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1441 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1443 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1444 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1446 #i‚de‡
OPENSSL_NO_BIO


1447 
BIO_METHOD
 *
BIO_f_s¶
();

1448 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1449 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1450 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1451 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1452 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1456 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1457 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1458 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1459 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1460 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1461 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1462 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1463 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1464 
SSL_˛ór
(
SSL
 *
s
);

1466 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1468 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1469 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1470 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1471 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1473 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1474 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1475 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1476 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1477 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1478 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1479 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1480 #i‚de‡
OPENSSL_NO_SOCK


1481 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1482 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1483 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1485 #i‚de‡
OPENSSL_NO_BIO


1486 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1487 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1488 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1490 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1491 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1492 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1493 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1494 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1495 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1496 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1497 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1498 #i‚de‡
OPENSSL_NO_RSA


1499 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1501 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1502 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1503 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1504 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1505 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1507 #i‚de‡
OPENSSL_NO_STDIO


1508 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1509 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1510 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1511 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1512 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1513 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1514 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1515 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1516 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1517 c⁄° *
fûe
);

1518 #i‚de‡
OPENSSL_SYS_VMS


1519 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1520 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1521 c⁄° *
dú
);

1527 
SSL_lﬂd_îr‹_°rögs
();

1528 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1529 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1530 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1531 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1532 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1533 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1534 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1535 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1536 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1538 
SSL_SESSION
 *
SSL_SESSION_√w
();

1539 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1540 *
Àn
);

1541 #i‚de‡
OPENSSL_NO_FP_API


1542 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1544 #i‚de‡
OPENSSL_NO_BIO


1545 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1547 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1548 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1549 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1550 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1551 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1552 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1553 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1554 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1555 
id_Àn
);

1556 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1557 
Àngth
);

1559 #ifde‡
HEADER_X509_H


1560 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1563 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1565 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1566 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1567 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1568 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1569 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1570 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1571 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1572 #i‚de‡
OPENSSL_NO_RSA


1573 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1575 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1576 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1577 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1578 c⁄° *
d
, 
Àn
);

1579 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1580 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1582 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1583 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1585 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1586 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1588 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1589 
sid_˘x_Àn
);

1591 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1592 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1593 
sid_˘x_Àn
);

1595 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1596 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1597 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1598 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1600 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1601 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1603 
SSL_‰ì
(
SSL
 *
s¶
);

1604 
SSL_ac˚±
(
SSL
 *
s¶
);

1605 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1606 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1607 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1608 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1609 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1610 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1611 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1612 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1614 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1615 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1618 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1620 #i‚de‡
OPENSSL_NO_SSL2


1621 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

1622 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1623 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1626 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1627 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1628 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1630 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

1631 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1632 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1634 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

1635 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1636 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1638 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

1639 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1640 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1642 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1644 
SSL_do_h™dshake
(
SSL
 *
s
);

1645 
SSL_ª√gŸüã
(
SSL
 *
s
);

1646 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1647 
SSL_shutdown
(
SSL
 *
s
);

1649 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1650 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1651 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1652 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1653 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1654 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1656 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1657 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1658 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1659 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1660 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1661 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1663 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1664 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1666 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1668 
SSL_libøry_öô
();

1670 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1671 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1673 
SSL
 *
SSL_dup
(SSL *
s¶
);

1675 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1676  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1678 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1679 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1680 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1681 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1682 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1683 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1684 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1685 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1686 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1687 c⁄° *
CA∑th
);

1688 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1689 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1690 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1691 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1692 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1693 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1694 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1695 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1696 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1698 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1699 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1701 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1702 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1703 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1704 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1706 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1707 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1708 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1709 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1711 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1712 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1713 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1714 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1716 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1718 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1719 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1720 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1721 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1722 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1723 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1724 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1725 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1727 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1728 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1729 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1730 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1731 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1732 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1733 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1734 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1735 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1736 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1737 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1738 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1739 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1740 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1742 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

1743 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1744 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

1745 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1748 #i‚de‡
OPENSSL_NO_RSA


1749 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

1750 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1751 
keyÀngth
));

1753 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

1754 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

1755 
keyÀngth
));

1757 #i‚de‡
OPENSSL_NO_DH


1758 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

1759 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

1760 
keyÀngth
));

1761 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

1762 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

1763 
keyÀngth
));

1766 #i‚de‡
OPENSSL_NO_COMP


1767 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

1768 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

1769 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

1770 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

1771 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

1773 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

1774 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

1775 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

1776 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

1777 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

1781 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

1783 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

1784 *
¨g
);

1787 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
, 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
, *
¨g
);

1793 
ERR_lﬂd_SSL_°rögs
();

1798 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

1799 
	#SSL_F_CLIENT_FINISHED
 167

	)

1800 
	#SSL_F_CLIENT_HELLO
 101

	)

1801 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

1802 
	#SSL_F_D2I_SSL_SESSION
 103

	)

1803 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

1804 
	#SSL_F_DO_SSL3_WRITE
 104

	)

1805 
	#SSL_F_DTLS1_ACCEPT
 246

	)

1806 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

1807 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

1808 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

1809 
	#SSL_F_DTLS1_CONNECT
 249

	)

1810 
	#SSL_F_DTLS1_ENC
 250

	)

1811 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

1812 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

1813 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

1814 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

1815 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

1816 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

1817 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

1818 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

1819 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

1820 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

1821 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

1822 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

1823 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

1824 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

1825 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

1826 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

1827 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

1828 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

1829 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

1830 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

1831 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

1832 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

1833 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

1834 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

1835 
	#SSL_F_GET_SERVER_HELLO
 109

	)

1836 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

1837 
	#SSL_F_I2D_SSL_SESSION
 111

	)

1838 
	#SSL_F_READ_N
 112

	)

1839 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

1840 
	#SSL_F_SERVER_FINISH
 239

	)

1841 
	#SSL_F_SERVER_HELLO
 114

	)

1842 
	#SSL_F_SERVER_VERIFY
 240

	)

1843 
	#SSL_F_SSL23_ACCEPT
 115

	)

1844 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

1845 
	#SSL_F_SSL23_CONNECT
 117

	)

1846 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

1847 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

1848 
	#SSL_F_SSL23_PEEK
 237

	)

1849 
	#SSL_F_SSL23_READ
 120

	)

1850 
	#SSL_F_SSL23_WRITE
 121

	)

1851 
	#SSL_F_SSL2_ACCEPT
 122

	)

1852 
	#SSL_F_SSL2_CONNECT
 123

	)

1853 
	#SSL_F_SSL2_ENC_INIT
 124

	)

1854 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

1855 
	#SSL_F_SSL2_PEEK
 234

	)

1856 
	#SSL_F_SSL2_READ
 125

	)

1857 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

1858 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

1859 
	#SSL_F_SSL2_WRITE
 127

	)

1860 
	#SSL_F_SSL3_ACCEPT
 128

	)

1861 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

1862 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

1863 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

1864 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

1865 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

1866 
	#SSL_F_SSL3_CONNECT
 132

	)

1867 
	#SSL_F_SSL3_CTRL
 213

	)

1868 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

1869 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

1870 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

1871 
	#SSL_F_SSL3_ENC
 134

	)

1872 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

1873 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

1874 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

1875 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

1876 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

1877 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

1878 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

1879 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

1880 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

1881 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

1882 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

1883 
	#SSL_F_SSL3_GET_RECORD
 143

	)

1884 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

1885 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

1886 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

1887 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

1888 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

1889 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

1890 
	#SSL_F_SSL3_PEEK
 235

	)

1891 
	#SSL_F_SSL3_READ_BYTES
 148

	)

1892 
	#SSL_F_SSL3_READ_N
 149

	)

1893 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

1894 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

1895 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

1896 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

1897 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

1898 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

1899 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

1900 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

1901 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

1902 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

1903 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

1904 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

1905 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

1906 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

1907 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

1908 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

1909 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

1910 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

1911 
	#SSL_F_SSL_BAD_METHOD
 160

	)

1912 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

1913 
	#SSL_F_SSL_CERT_DUP
 221

	)

1914 
	#SSL_F_SSL_CERT_INST
 222

	)

1915 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

1916 
	#SSL_F_SSL_CERT_NEW
 162

	)

1917 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

1918 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

1919 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

1920 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

1921 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

1922 
	#SSL_F_SSL_CLEAR
 164

	)

1923 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

1924 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

1925 
	#SSL_F_SSL_CTRL
 232

	)

1926 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

1927 
	#SSL_F_SSL_CTX_NEW
 169

	)

1928 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

1929 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

1930 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

1931 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

1932 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

1933 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

1934 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

1935 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

1936 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

1937 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

1938 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

1939 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

1940 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

1941 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

1942 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

1943 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

1944 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

1945 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

1946 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

1947 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

1948 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

1949 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

1950 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

1951 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

1952 
	#SSL_F_SSL_NEW
 186

	)

1953 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

1954 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

1955 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

1956 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

1957 
	#SSL_F_SSL_PEEK
 270

	)

1958 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

1959 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

1960 
	#SSL_F_SSL_READ
 223

	)

1961 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

1962 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

1963 
	#SSL_F_SSL_SESSION_NEW
 189

	)

1964 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

1965 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

1966 
	#SSL_F_SSL_SET_CERT
 191

	)

1967 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

1968 
	#SSL_F_SSL_SET_FD
 192

	)

1969 
	#SSL_F_SSL_SET_PKEY
 193

	)

1970 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

1971 
	#SSL_F_SSL_SET_RFD
 194

	)

1972 
	#SSL_F_SSL_SET_SESSION
 195

	)

1973 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

1974 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

1975 
	#SSL_F_SSL_SET_TRUST
 228

	)

1976 
	#SSL_F_SSL_SET_WFD
 196

	)

1977 
	#SSL_F_SSL_SHUTDOWN
 224

	)

1978 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

1979 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

1980 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

1981 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

1982 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

1983 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

1984 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

1985 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

1986 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

1987 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

1988 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

1989 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

1990 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

1991 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

1992 
	#SSL_F_SSL_WRITE
 208

	)

1993 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

1994 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

1995 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

1996 
	#SSL_F_TLS1_ENC
 210

	)

1997 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

1998 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

1999 
	#SSL_F_TLS1_PRF
 284

	)

2000 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2001 
	#SSL_F_WRITE_PENDING
 212

	)

2004 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2005 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2006 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2007 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2008 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2009 
	#SSL_R_BAD_CHECKSUM
 104

	)

2010 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2011 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2012 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2013 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2014 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2015 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2016 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2017 
	#SSL_R_BAD_ECC_CERT
 304

	)

2018 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2019 
	#SSL_R_BAD_ECPOINT
 306

	)

2020 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2021 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2022 
	#SSL_R_BAD_LENGTH
 271

	)

2023 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2024 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2025 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2026 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2027 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2028 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2029 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2030 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2031 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2032 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2033 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2034 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2035 
	#SSL_R_BAD_SIGNATURE
 123

	)

2036 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2037 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2038 
	#SSL_R_BAD_STATE
 126

	)

2039 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2040 
	#SSL_R_BIO_NOT_SET
 128

	)

2041 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2042 
	#SSL_R_BN_LIB
 130

	)

2043 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2044 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2045 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2046 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2047 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2048 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2049 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2050 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2051 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2052 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2053 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2054 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2055 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2056 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2057 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2058 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2059 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2060 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2061 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2062 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2063 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2064 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2065 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2066 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2067 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2068 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2069 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2070 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2071 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2072 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2073 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2074 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2075 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2076 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2077 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2078 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2079 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2080 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2081 
	#SSL_R_HTTP_REQUEST
 156

	)

2082 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2083 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2084 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2085 
	#SSL_R_INVALID_COMMAND
 280

	)

2086 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2087 
	#SSL_R_INVALID_PURPOSE
 278

	)

2088 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2089 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2090 
	#SSL_R_INVALID_TRUST
 279

	)

2091 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2092 
	#SSL_R_KRB5
 285

	)

2093 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2094 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2095 
	#SSL_R_KRB5_C_INIT
 288

	)

2096 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2097 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2098 
	#SSL_R_KRB5_S_INIT
 291

	)

2099 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2100 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2101 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2102 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2103 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2104 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2105 
	#SSL_R_LIBRARY_BUG
 274

	)

2106 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2107 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2108 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2109 
	#SSL_R_MISSING_DH_KEY
 163

	)

2110 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2111 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2112 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2113 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2114 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2115 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2116 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2117 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2118 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2119 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2120 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2121 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2122 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2123 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2124 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2125 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2126 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2127 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2128 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2129 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2130 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2131 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2132 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2133 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2134 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2135 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2136 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2137 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2138 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2139 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2140 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2141 
	#SSL_R_NO_PUBLICKEY
 192

	)

2142 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2143 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2144 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2145 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2146 
	#SSL_R_NULL_SSL_CTX
 195

	)

2147 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2148 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2149 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2150 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2151 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

2152 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2153 
	#SSL_R_PARSE_TLSEXT
 227

	)

2154 
	#SSL_R_PATH_TOO_LONG
 270

	)

2155 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2156 
	#SSL_R_PEER_ERROR
 200

	)

2157 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2158 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2159 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2160 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2161 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2162 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2163 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2164 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2165 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2166 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2167 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2168 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2169 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2170 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2171 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2172 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2173 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2174 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2175 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2176 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2177 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2178 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2179 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2180 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

2181 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2182 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2183 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2184 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2185 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2186 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2187 
	#SSL_R_SHORT_READ
 219

	)

2188 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2189 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2190 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2191 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

2192 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2193 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2194 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2195 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2196 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2197 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2198 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2199 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2200 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2201 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2202 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2203 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2204 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2205 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2206 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2207 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2208 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2209 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2210 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2211 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2212 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2213 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2214 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2215 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2216 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2217 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2218 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2219 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2220 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2221 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2222 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2223 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2224 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2225 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2226 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2227 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2228 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2229 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2230 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2231 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2232 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2233 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2234 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2235 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2236 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2237 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2238 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2239 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2240 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2241 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2242 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2243 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2244 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2245 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2246 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2247 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2248 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2249 
	#SSL_R_UNINITIALIZED
 276

	)

2250 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2251 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2252 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2253 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2254 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2255 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2256 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2257 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2258 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2259 
	#SSL_R_UNKNOWN_STATE
 255

	)

2260 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2261 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2262 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2263 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

2264 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2265 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2266 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2267 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2268 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2269 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2270 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2271 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2272 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2273 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2274 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2275 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2276 
	#SSL_R_X509_LIB
 268

	)

2277 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2279 #ifde‡ 
__˝lu•lus


	@/usr/include/pcre.h

39 #i‚de‡
_PCRE_H


40 
	#_PCRE_H


	)

44 
	#PCRE_MAJOR
 8

	)

45 
	#PCRE_MINOR
 10

	)

46 
	#PCRE_PRERELEASE


	)

47 
	#PCRE_DATE
 2010-06-25

	)

54 #i‡
deföed
(
_WIN32
Ë&& !deföed(
PCRE_STATIC
)

55 #i‚de‡
PCRE_EXP_DECL


56 
	#PCRE_EXP_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

58 #ifde‡
__˝lu•lus


59 #i‚de‡
PCRECPP_EXP_DECL


60 
	#PCRECPP_EXP_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

62 #i‚de‡
PCRECPP_EXP_DEFN


63 
	#PCRECPP_EXP_DEFN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

70 #i‚de‡
PCRE_EXP_DECL


71 #ifde‡
__˝lu•lus


72 
	#PCRE_EXP_DECL
 "C"

	)

74 
	#PCRE_EXP_DECL
 

	)

78 #ifde‡
__˝lu•lus


79 #i‚de‡
PCRECPP_EXP_DECL


80 
	#PCRECPP_EXP_DECL
 

	)

82 #i‚de‡
PCRECPP_EXP_DEFN


83 
	#PCRECPP_EXP_DEFN


	)

90 
	~<°dlib.h
>

94 #ifde‡
__˝lu•lus


101 
	#PCRE_CASELESS
 0x00000001

	)

102 
	#PCRE_MULTILINE
 0x00000002

	)

103 
	#PCRE_DOTALL
 0x00000004

	)

104 
	#PCRE_EXTENDED
 0x00000008

	)

105 
	#PCRE_ANCHORED
 0x00000010

	)

106 
	#PCRE_DOLLAR_ENDONLY
 0x00000020

	)

107 
	#PCRE_EXTRA
 0x00000040

	)

108 
	#PCRE_NOTBOL
 0x00000080

	)

109 
	#PCRE_NOTEOL
 0x00000100

	)

110 
	#PCRE_UNGREEDY
 0x00000200

	)

111 
	#PCRE_NOTEMPTY
 0x00000400

	)

112 
	#PCRE_UTF8
 0x00000800

	)

113 
	#PCRE_NO_AUTO_CAPTURE
 0x00001000

	)

114 
	#PCRE_NO_UTF8_CHECK
 0x00002000

	)

115 
	#PCRE_AUTO_CALLOUT
 0x00004000

	)

116 
	#PCRE_PARTIAL_SOFT
 0x00008000

	)

117 
	#PCRE_PARTIAL
 0x00008000

	)

118 
	#PCRE_DFA_SHORTEST
 0x00010000

	)

119 
	#PCRE_DFA_RESTART
 0x00020000

	)

120 
	#PCRE_FIRSTLINE
 0x00040000

	)

121 
	#PCRE_DUPNAMES
 0x00080000

	)

122 
	#PCRE_NEWLINE_CR
 0x00100000

	)

123 
	#PCRE_NEWLINE_LF
 0x00200000

	)

124 
	#PCRE_NEWLINE_CRLF
 0x00300000

	)

125 
	#PCRE_NEWLINE_ANY
 0x00400000

	)

126 
	#PCRE_NEWLINE_ANYCRLF
 0x00500000

	)

127 
	#PCRE_BSR_ANYCRLF
 0x00800000

	)

128 
	#PCRE_BSR_UNICODE
 0x01000000

	)

129 
	#PCRE_JAVASCRIPT_COMPAT
 0x02000000

	)

130 
	#PCRE_NO_START_OPTIMIZE
 0x04000000

	)

131 
	#PCRE_NO_START_OPTIMISE
 0x04000000

	)

132 
	#PCRE_PARTIAL_HARD
 0x08000000

	)

133 
	#PCRE_NOTEMPTY_ATSTART
 0x10000000

	)

134 
	#PCRE_UCP
 0x20000000

	)

138 
	#PCRE_ERROR_NOMATCH
 (-1)

	)

139 
	#PCRE_ERROR_NULL
 (-2)

	)

140 
	#PCRE_ERROR_BADOPTION
 (-3)

	)

141 
	#PCRE_ERROR_BADMAGIC
 (-4)

	)

142 
	#PCRE_ERROR_UNKNOWN_OPCODE
 (-5)

	)

143 
	#PCRE_ERROR_UNKNOWN_NODE
 (-5Ë

	)

144 
	#PCRE_ERROR_NOMEMORY
 (-6)

	)

145 
	#PCRE_ERROR_NOSUBSTRING
 (-7)

	)

146 
	#PCRE_ERROR_MATCHLIMIT
 (-8)

	)

147 
	#PCRE_ERROR_CALLOUT
 (-9Ë

	)

148 
	#PCRE_ERROR_BADUTF8
 (-10)

	)

149 
	#PCRE_ERROR_BADUTF8_OFFSET
 (-11)

	)

150 
	#PCRE_ERROR_PARTIAL
 (-12)

	)

151 
	#PCRE_ERROR_BADPARTIAL
 (-13)

	)

152 
	#PCRE_ERROR_INTERNAL
 (-14)

	)

153 
	#PCRE_ERROR_BADCOUNT
 (-15)

	)

154 
	#PCRE_ERROR_DFA_UITEM
 (-16)

	)

155 
	#PCRE_ERROR_DFA_UCOND
 (-17)

	)

156 
	#PCRE_ERROR_DFA_UMLIMIT
 (-18)

	)

157 
	#PCRE_ERROR_DFA_WSSIZE
 (-19)

	)

158 
	#PCRE_ERROR_DFA_RECURSE
 (-20)

	)

159 
	#PCRE_ERROR_RECURSIONLIMIT
 (-21)

	)

160 
	#PCRE_ERROR_NULLWSLIMIT
 (-22Ë

	)

161 
	#PCRE_ERROR_BADNEWLINE
 (-23)

	)

165 
	#PCRE_INFO_OPTIONS
 0

	)

166 
	#PCRE_INFO_SIZE
 1

	)

167 
	#PCRE_INFO_CAPTURECOUNT
 2

	)

168 
	#PCRE_INFO_BACKREFMAX
 3

	)

169 
	#PCRE_INFO_FIRSTBYTE
 4

	)

170 
	#PCRE_INFO_FIRSTCHAR
 4

	)

171 
	#PCRE_INFO_FIRSTTABLE
 5

	)

172 
	#PCRE_INFO_LASTLITERAL
 6

	)

173 
	#PCRE_INFO_NAMEENTRYSIZE
 7

	)

174 
	#PCRE_INFO_NAMECOUNT
 8

	)

175 
	#PCRE_INFO_NAMETABLE
 9

	)

176 
	#PCRE_INFO_STUDYSIZE
 10

	)

177 
	#PCRE_INFO_DEFAULT_TABLES
 11

	)

178 
	#PCRE_INFO_OKPARTIAL
 12

	)

179 
	#PCRE_INFO_JCHANGED
 13

	)

180 
	#PCRE_INFO_HASCRORLF
 14

	)

181 
	#PCRE_INFO_MINLENGTH
 15

	)

186 
	#PCRE_CONFIG_UTF8
 0

	)

187 
	#PCRE_CONFIG_NEWLINE
 1

	)

188 
	#PCRE_CONFIG_LINK_SIZE
 2

	)

189 
	#PCRE_CONFIG_POSIX_MALLOC_THRESHOLD
 3

	)

190 
	#PCRE_CONFIG_MATCH_LIMIT
 4

	)

191 
	#PCRE_CONFIG_STACKRECURSE
 5

	)

192 
	#PCRE_CONFIG_UNICODE_PROPERTIES
 6

	)

193 
	#PCRE_CONFIG_MATCH_LIMIT_RECURSION
 7

	)

194 
	#PCRE_CONFIG_BSR
 8

	)

199 
	#PCRE_EXTRA_STUDY_DATA
 0x0001

	)

200 
	#PCRE_EXTRA_MATCH_LIMIT
 0x0002

	)

201 
	#PCRE_EXTRA_CALLOUT_DATA
 0x0004

	)

202 
	#PCRE_EXTRA_TABLES
 0x0008

	)

203 
	#PCRE_EXTRA_MATCH_LIMIT_RECURSION
 0x0010

	)

204 
	#PCRE_EXTRA_MARK
 0x0020

	)

208 
ªÆ_p¸e
;

209 
ªÆ_p¸e
 
	tp¸e
;

215 #i‚de‡
PCRE_SPTR


216 
	#PCRE_SPTR
 c⁄° *

	)

223 
	sp¸e_exåa
 {

224 
Êags
;

225 *
°udy_d©a
;

226 
m©ch_limô
;

227 *
ˇŒout_d©a
;

228 c⁄° *
èbÀs
;

229 
m©ch_limô_ªcursi⁄
;

230 **
m¨k
;

231 } 
	tp¸e_exåa
;

238 
	sp¸e_ˇŒout_block
 {

239 
vîsi⁄
;

241 
ˇŒout_numbî
;

242 *
off£t_ve˘‹
;

243 
PCRE_SPTR
 
subje˘
;

244 
subje˘_Àngth
;

245 
°¨t_m©ch
;

246 
cuºít_posôi⁄
;

247 
ˇ±uª_t›
;

248 
ˇ±uª_œ°
;

249 *
ˇŒout_d©a
;

251 
∑âîn_posôi⁄
;

252 
√xt_ôem_Àngth
;

254 } 
	tp¸e_ˇŒout_block
;

262 #i‚de‡
VPCOMPAT


263 
PCRE_EXP_DECL
 *(*
p¸e_mÆloc
)(
size_t
);

264 
PCRE_EXP_DECL
 (*
p¸e_‰ì
)(*);

265 
PCRE_EXP_DECL
 *(*
p¸e_°ack_mÆloc
)(
size_t
);

266 
PCRE_EXP_DECL
 (*
p¸e_°ack_‰ì
)(*);

267 
PCRE_EXP_DECL
 (*
p¸e_ˇŒout
)(
p¸e_ˇŒout_block
 *);

269 
PCRE_EXP_DECL
 *
p¸e_mÆloc
(
size_t
);

270 
PCRE_EXP_DECL
 
p¸e_‰ì
(*);

271 
PCRE_EXP_DECL
 *
p¸e_°ack_mÆloc
(
size_t
);

272 
PCRE_EXP_DECL
 
p¸e_°ack_‰ì
(*);

273 
PCRE_EXP_DECL
 
p¸e_ˇŒout
(
p¸e_ˇŒout_block
 *);

278 
PCRE_EXP_DECL
 
p¸e
 *
p¸e_compûe
(const *, , const **, *,

280 
PCRE_EXP_DECL
 
p¸e
 *
p¸e_compûe2
(const *, , *, const **,

282 
PCRE_EXP_DECL
 
p¸e_c⁄fig
(, *);

283 
PCRE_EXP_DECL
 
p¸e_c›y_«med_sub°rög
(c⁄° 
p¸e
 *, const *,

285 
PCRE_EXP_DECL
 
p¸e_c›y_sub°rög
(const *, *, , , *,

287 
PCRE_EXP_DECL
 
p¸e_dÁ_exec
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *,

289 
PCRE_EXP_DECL
 
p¸e_exec
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *, 
PCRE_SPTR
,

291 
PCRE_EXP_DECL
 
p¸e_‰ì_sub°rög
(const *);

292 
PCRE_EXP_DECL
 
p¸e_‰ì_sub°rög_li°
(const **);

293 
PCRE_EXP_DECL
 
p¸e_fuŒöfo
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *, ,

295 
PCRE_EXP_DECL
 
p¸e_gë_«med_sub°rög
(c⁄° 
p¸e
 *, const *,

297 
PCRE_EXP_DECL
 
p¸e_gë_°rögnumbî
(c⁄° 
p¸e
 *, const *);

298 
PCRE_EXP_DECL
 
p¸e_gë_°rögèbÀ_íåõs
(c⁄° 
p¸e
 *, const *,

300 
PCRE_EXP_DECL
 
p¸e_gë_sub°rög
(const *, *, , ,

302 
PCRE_EXP_DECL
 
p¸e_gë_sub°rög_li°
(const *, *, ,

304 
PCRE_EXP_DECL
 
p¸e_öfo
(c⁄° 
p¸e
 *, *, *);

305 
PCRE_EXP_DECL
 c⁄° *
p¸e_makëabÀs
();

306 
PCRE_EXP_DECL
 
p¸e_ªfcou¡
(
p¸e
 *, );

307 
PCRE_EXP_DECL
 
p¸e_exåa
 *
p¸e_°udy
(c⁄° 
p¸e
 *, , const **);

308 
PCRE_EXP_DECL
 c⁄° *
p¸e_vîsi⁄
();

310 #ifde‡
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROW
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROW
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
);

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT_NTH
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

509 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

510 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/epoll.h

19 #i‚def 
_SYS_EPOLL_H


20 
	#_SYS_EPOLL_H
 1

	)

22 
	~<°döt.h
>

23 
	~<sys/ty≥s.h
>

26 
	~<bôs/sig£t.h
>

28 #i‚de‡
__sig£t_t_deföed


29 
	#__sig£t_t_deföed


	)

30 
__sig£t_t
 
	tsig£t_t
;

37 
	mEPOLL_CLOEXEC
 = 02000000,

38 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

39 
	mEPOLL_NONBLOCK
 = 04000

40 
	#EPOLL_NONBLOCK
 
EPOLL_NONBLOCK


	)

44 
	eEPOLL_EVENTS


46 
	mEPOLLIN
 = 0x001,

47 
	#EPOLLIN
 
EPOLLIN


	)

48 
	mEPOLLPRI
 = 0x002,

49 
	#EPOLLPRI
 
EPOLLPRI


	)

50 
	mEPOLLOUT
 = 0x004,

51 
	#EPOLLOUT
 
EPOLLOUT


	)

52 
	mEPOLLRDNORM
 = 0x040,

53 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

54 
	mEPOLLRDBAND
 = 0x080,

55 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

56 
	mEPOLLWRNORM
 = 0x100,

57 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

58 
	mEPOLLWRBAND
 = 0x200,

59 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

60 
	mEPOLLMSG
 = 0x400,

61 
	#EPOLLMSG
 
EPOLLMSG


	)

62 
	mEPOLLERR
 = 0x008,

63 
	#EPOLLERR
 
EPOLLERR


	)

64 
	mEPOLLHUP
 = 0x010,

65 
	#EPOLLHUP
 
EPOLLHUP


	)

66 
	mEPOLLRDHUP
 = 0x2000,

67 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

68 
	mEPOLLONESHOT
 = (1 << 30),

69 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

70 
	mEPOLLET
 = (1 << 31)

71 
	#EPOLLET
 
EPOLLET


	)

76 
	#EPOLL_CTL_ADD
 1

	)

77 
	#EPOLL_CTL_DEL
 2

	)

78 
	#EPOLL_CTL_MOD
 3

	)

81 
	uïﬁl_d©a


83 *
	m±r
;

84 
	mfd
;

85 
uöt32_t
 
	mu32
;

86 
uöt64_t
 
	mu64
;

87 } 
	tïﬁl_d©a_t
;

89 
	sïﬁl_evít


91 
uöt32_t
 
	mevíts
;

92 
ïﬁl_d©a_t
 
	md©a
;

93 } 
__©åibuã__
 ((
__∑cked__
));

96 
__BEGIN_DECLS


102 
	$ïﬁl_¸óã
 (
__size
Ë
__THROW
;

106 
	$ïﬁl_¸óã1
 (
__Êags
Ë
__THROW
;

115 
	$ïﬁl_˘l
 (
__ïfd
, 
__›
, 
__fd
,

116 
ïﬁl_evít
 *
__evít
Ë
__THROW
;

129 
	`ïﬁl_waô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

130 
__maxevíts
, 
__timeout
);

138 
	`ïﬁl_pwaô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

139 
__maxevíts
, 
__timeout
,

140 
__c⁄°
 
__sig£t_t
 *
__ss
);

142 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/ipc.h

19 #i‚de‡
_SYS_IPC_H


20 
	#_SYS_IPC_H
 1

	)

22 
	~<„©uªs.h
>

24 #i‡!
deföed
 
__USE_SVID
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

29 
	~<bôs/ù˘y≥s.h
>

30 
	~<bôs/ùc.h
>

32 #i‚de‡
__uid_t_deföed


33 
__uid_t
 
	tuid_t
;

34 
	#__uid_t_deföed


	)

37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__mode_t_deföed


43 
__mode_t
 
	tmode_t
;

44 
	#__mode_t_deföed


	)

47 #i‚de‡
__key_t_deföed


48 
__key_t
 
	tkey_t
;

49 
	#__key_t_deföed


	)

52 
__BEGIN_DECLS


55 
key_t
 
	$·ok
 (
__c⁄°
 *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

57 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/mount.h

22 #i‚de‡
_SYS_MOUNT_H


23 
	#_SYS_MOUNT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/io˘l.h
>

28 
	#BLOCK_SIZE
 1024

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

36 
	mMS_RDONLY
 = 1,

37 
	#MS_RDONLY
 
MS_RDONLY


	)

38 
	mMS_NOSUID
 = 2,

39 
	#MS_NOSUID
 
MS_NOSUID


	)

40 
	mMS_NODEV
 = 4,

41 
	#MS_NODEV
 
MS_NODEV


	)

42 
	mMS_NOEXEC
 = 8,

43 
	#MS_NOEXEC
 
MS_NOEXEC


	)

44 
	mMS_SYNCHRONOUS
 = 16,

45 
	#MS_SYNCHRONOUS
 
MS_SYNCHRONOUS


	)

46 
	mMS_REMOUNT
 = 32,

47 
	#MS_REMOUNT
 
MS_REMOUNT


	)

48 
	mMS_MANDLOCK
 = 64,

49 
	#MS_MANDLOCK
 
MS_MANDLOCK


	)

50 
	mMS_DIRSYNC
 = 128,

51 
	#MS_DIRSYNC
 
MS_DIRSYNC


	)

52 
	mMS_NOATIME
 = 1024,

53 
	#MS_NOATIME
 
MS_NOATIME


	)

54 
	mMS_NODIRATIME
 = 2048,

55 
	#MS_NODIRATIME
 
MS_NODIRATIME


	)

56 
	mMS_BIND
 = 4096,

57 
	#MS_BIND
 
MS_BIND


	)

58 
	mMS_MOVE
 = 8192,

59 
	#MS_MOVE
 
MS_MOVE


	)

60 
	mMS_REC
 = 16384,

61 
	#MS_REC
 
MS_REC


	)

62 
	mMS_SILENT
 = 32768,

63 
	#MS_SILENT
 
MS_SILENT


	)

64 
	mMS_POSIXACL
 = 1 << 16,

65 
	#MS_POSIXACL
 
MS_POSIXACL


	)

66 
	mMS_UNBINDABLE
 = 1 << 17,

67 
	#MS_UNBINDABLE
 
MS_UNBINDABLE


	)

68 
	mMS_PRIVATE
 = 1 << 18,

69 
	#MS_PRIVATE
 
MS_PRIVATE


	)

70 
	mMS_SLAVE
 = 1 << 19,

71 
	#MS_SLAVE
 
MS_SLAVE


	)

72 
	mMS_SHARED
 = 1 << 20,

73 
	#MS_SHARED
 
MS_SHARED


	)

74 
	mMS_RELATIME
 = 1 << 21,

75 
	#MS_RELATIME
 
MS_RELATIME


	)

76 
	mMS_KERNMOUNT
 = 1 << 22,

77 
	#MS_KERNMOUNT
 
MS_KERNMOUNT


	)

78 
	mMS_I_VERSION
 = 1 << 23,

79 
	#MS_I_VERSION
 
MS_I_VERSION


	)

80 
	mMS_STRICTATIME
 = 1 << 24,

81 
	#MS_STRICTATIME
 
MS_STRICTATIME


	)

82 
	mMS_ACTIVE
 = 1 << 30,

83 
	#MS_ACTIVE
 
MS_ACTIVE


	)

84 
	mMS_NOUSER
 = 1 << 31

85 
	#MS_NOUSER
 
MS_NOUSER


	)

89 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

94 
	#MS_MGC_VAL
 0xc0ed0000

	)

95 
	#MS_MGC_MSK
 0xffff0000

	)

102 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

103 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

104 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

105 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

106 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

107 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

108 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

109 
	#BLKFRASET
 
	`_IO
(0x12,100Ë

	)

110 
	#BLKFRAGET
 
	`_IO
(0x12,101Ë

	)

111 
	#BLKSECTSET
 
	`_IO
(0x12,102Ë

	)

112 
	#BLKSECTGET
 
	`_IO
(0x12,103Ë

	)

113 
	#BLKSSZGET
 
	`_IO
(0x12,104Ë

	)

114 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

115 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

116 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

122 
	mMNT_FORCE
 = 1,

123 
	#MNT_FORCE
 
MNT_FORCE


	)

124 
	mMNT_DETACH
 = 2,

125 
	#MNT_DETACH
 
MNT_DETACH


	)

126 
	mMNT_EXPIRE
 = 4,

127 
	#MNT_EXPIRE
 
MNT_EXPIRE


	)

128 
	mUMOUNT_NOFOLLOW
 = 8

129 
	#UMOUNT_NOFOLLOW
 
UMOUNT_NOFOLLOW


	)

133 
__BEGIN_DECLS


136 
	$mou¡
 (
__c⁄°
 *
__•ecül_fûe
, __c⁄° *
__dú
,

137 
__c⁄°
 *
__f°y≥
, 
__rwÊag
,

138 
__c⁄°
 *
__d©a
Ë
__THROW
;

141 
	$umou¡
 (
__c⁄°
 *
__•ecül_fûe
Ë
__THROW
;

144 
	$umou¡2
 (
__c⁄°
 *
__•ecül_fûe
, 
__Êags
Ë
__THROW
;

146 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/prctl.h

19 #i‚de‡
_SYS_PRCTL_H


20 
	#_SYS_PRCTL_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<löux/¥˘l.h
>

25 
__BEGIN_DECLS


28 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

30 
__END_DECLS


	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/sem.h

19 #i‚de‡
_SYS_SEM_H


20 
	#_SYS_SEM_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<sys/ùc.h
>

31 
	~<bôs/£m.h
>

33 #ifde‡
__USE_GNU


34 
	#__√ed_time•ec


	)

35 
	~<time.h
>

42 
	s£mbuf


44 
	m£m_num
;

45 
	m£m_›
;

46 
	m£m_Êg
;

50 
__BEGIN_DECLS


53 
	$£m˘l
 (
__£mid
, 
__£mnum
, 
__cmd
, ...Ë
__THROW
;

56 
	$£mgë
 (
key_t
 
__key
, 
__n£ms
, 
__£mÊg
Ë
__THROW
;

59 
	$£m›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
Ë
__THROW
;

61 #ifde‡
__USE_GNU


63 
	$£mtimed›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
,

64 
__c⁄°
 
time•ec
 *
__timeout
Ë
__THROW
;

67 
__END_DECLS


	@/usr/include/sys/sendfile.h

20 #i‚de‡
_SYS_SENDFILE_H


21 
	#_SYS_SENDFILE_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


33 #i‚de‡
__USE_FILE_OFFSET64


34 
ssize_t
 
	$£ndfûe
 (
__out_fd
, 
__ö_fd
, 
off_t
 *
__off£t
,

35 
size_t
 
__cou¡
Ë
__THROW
;

37 #ifde‡
__REDIRECT_NTH


38 
ssize_t
 
	`__REDIRECT_NTH
 (
£ndfûe
,

39 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

40 
size_t
 
__cou¡
), 
£ndfûe64
);

42 
	#£ndfûe
 
£ndfûe64


	)

45 #ifde‡
__USE_LARGEFILE64


46 
ssize_t
 
	$£ndfûe64
 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

47 
size_t
 
__cou¡
Ë
__THROW
;

50 
__END_DECLS


	@/usr/include/sys/shm.h

19 #i‚de‡
_SYS_SHM_H


20 
	#_SYS_SHM_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<sys/ùc.h
>

31 
	~<bôs/shm.h
>

34 
	#__√ed_time_t


	)

35 
	~<time.h
>

37 #ifde‡
__USE_XOPEN


38 #i‚de‡
__pid_t_deföed


39 
__pid_t
 
	tpid_t
;

40 
	#__pid_t_deföed


	)

45 
__BEGIN_DECLS


51 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

54 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

57 *
	$shm©
 (
__shmid
, 
__c⁄°
 *
__shmaddr
, 
__shmÊg
)

58 
__THROW
;

61 
	$shmdt
 (
__c⁄°
 *
__shmaddr
Ë
__THROW
;

63 
__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/statvfs.h

20 #i‚def 
_SYS_STATVFS_H


21 
	#_SYS_STATVFS_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/°©vfs.h
>

28 #i‚de‡
__USE_FILE_OFFSET64


29 #i‚de‡
__fsblk˙t_t_deföed


30 
__fsblk˙t_t
 
	tfsblk˙t_t
;

31 
	#__fsblk˙t_t_deföed


	)

33 #i‚de‡
__fsfû˙t_t_deföed


34 
__fsfû˙t_t
 
	tfsfû˙t_t
;

35 
	#__fsfû˙t_t_deföed


	)

38 #i‚de‡
__fsblk˙t_t_deföed


39 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

40 
	#__fsblk˙t_t_deföed


	)

42 #i‚de‡
__fsfû˙t_t_deföed


43 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

44 
	#__fsfû˙t_t_deföed


	)

48 
	g__BEGIN_DECLS


51 #i‚de‡
__USE_FILE_OFFSET64


52 
	$°©vfs
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

53 
°©vfs
 *
__ª°ri˘
 
__buf
)

54 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

56 #ifde‡
__REDIRECT_NTH


57 
	`__REDIRECT_NTH
 (
°©vfs
,

58 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

59 
°©vfs
 *
__ª°ri˘
 
__buf
), 
°©vfs64
)

60 
	`__n⁄nuŒ
 ((1, 2));

62 
	#°©vfs
 
°©vfs64


	)

65 #ifde‡
__USE_LARGEFILE64


66 
	$°©vfs64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

67 
°©vfs64
 *
__ª°ri˘
 
__buf
)

68 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

73 #i‚de‡
__USE_FILE_OFFSET64


74 
	$f°©vfs
 (
__fûdes
, 
°©vfs
 *
__buf
)

75 
__THROW
 
	`__n⁄nuŒ
 ((2));

77 #ifde‡
__REDIRECT_NTH


78 
	`__REDIRECT_NTH
 (
f°©vfs
, (
__fûdes
, 
°©vfs
 *
__buf
),

79 
f°©vfs64
Ë
	`__n⁄nuŒ
 ((2));

81 
	#f°©vfs
 
f°©vfs64


	)

84 #ifde‡
__USE_LARGEFILE64


85 
	$f°©vfs64
 (
__fûdes
, 
°©vfs64
 *
__buf
)

86 
__THROW
 
	`__n⁄nuŒ
 ((2));

89 
__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysctl.h

19 #i‚def 
_SYS_SYSCTL_H


20 
	#_SYS_SYSCTL_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 #i‚de‡
_LINUX_KERNEL_H


27 
	#_LINUX_KERNEL_H
 1

	)

28 
	#__undef_LINUX_KERNEL_H


	)

30 #i‚de‡
_LINUX_TYPES_H


31 
	#_LINUX_TYPES_H
 1

	)

32 
	#__undef_LINUX_TYPES_H


	)

34 #i‚de‡
_LINUX_LIST_H


35 
	#_LINUX_LIST_H
 1

	)

36 
	#__undef_LINUX_LIST_H


	)

38 #i‚de‡
__LINUX_COMPILER_H


39 
	#__LINUX_COMPILER_H
 1

	)

40 
	#__u£r


	)

41 
	#__undef__LINUX_COMPILER_H


	)

44 
	~<löux/sys˘l.h
>

46 #ifde‡
__undef_LINUX_KERNEL_H


47 #unde‡
_LINUX_KERNEL_H


48 #unde‡
__undef_LINUX_KERNEL_H


50 #ifde‡
__undef_LINUX_TYPES_H


51 #unde‡
_LINUX_TYPES_H


52 #unde‡
__undef_LINUX_TYPES_H


54 #ifde‡
__undef_LINUX_LIST_H


55 #unde‡
_LINUX_LIST_H


56 #unde‡
__undef_LINUX_LIST_H


58 #ifde‡
__undef__LINUX_COMPILER_H


59 #unde‡
__LINUX_COMPILER_H


60 #unde‡
__u£r


61 #unde‡
__undef__LINUX_COMPILER_H


64 
__BEGIN_DECLS


67 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

68 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

70 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/sys/un.h

19 #i‚def 
_SYS_UN_H


20 
	#_SYS_UN_H
 1

	)

22 
	~<sys/cdefs.h
>

25 
	~<bôs/sockaddr.h
>

27 
__BEGIN_DECLS


30 
	ssockaddr_un


32 
__SOCKADDR_COMMON
 (
sun_
);

33 
	msun_∑th
[108];

37 #ifde‡
__USE_MISC


38 
	~<°rög.h
>

41 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

42 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

45 
	g__END_DECLS


	@/usr/include/sys/utsname.h

23 #i‚def 
_SYS_UTSNAME_H


24 
	#_SYS_UTSNAME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ut¢ame.h
>

32 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


33 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

35 #i‚de‡
_UTSNAME_NODENAME_LENGTH


36 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

38 #i‚de‡
_UTSNAME_RELEASE_LENGTH


39 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

41 #i‚de‡
_UTSNAME_VERSION_LENGTH


42 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

44 #i‚de‡
_UTSNAME_MACHINE_LENGTH


45 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

49 
	sut¢ame


52 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

55 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

58 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

60 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

63 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

65 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

67 #ifde‡
__USE_GNU


68 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

70 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

75 #ifde‡
__USE_SVID


77 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

82 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

85 
__END_DECLS


	@/usr/include/sys/vfs.h

4 
	~<sys/°©fs.h
>

	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.5"

	)

41 
	#ZLIB_VERNUM
 0x1250

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 5

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

352 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

391 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

499 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

578 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

579 c⁄° 
Byãf
 *
di˘i⁄¨y
,

580 
uI¡
 
di˘Lígth
));

617 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

618 
z_°ªamp
 
sour˚
));

635 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

646 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

647 
Àvñ
,

648 
°øãgy
));

667 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

668 
good_Àngth
,

669 
max_œzy
,

670 
ni˚_Àngth
,

671 
max_chaö
));

684 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

685 
uL⁄g
 
sour˚Lí
));

694 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

695 
bôs
,

696 
vÆue
));

710 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

711 
gz_hódîp
 
hód
));

784 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

785 c⁄° 
Byãf
 *
di˘i⁄¨y
,

786 
uI¡
 
di˘Lígth
));

806 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

821 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

822 
z_°ªamp
 
sour˚
));

837 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

847 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

848 
wödowBôs
));

859 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

860 
bôs
,

861 
vÆue
));

880 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

908 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

909 
gz_hódîp
 
hód
));

970 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

971 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

973 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

974 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

975 
out_func
 
out
, 
FAR
 *
out_desc
));

1042 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1050 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1102 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1103 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1116 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1117 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1118 
Àvñ
));

1132 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1139 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1140 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1165 
voidp
 
	tgzFûe
;

1190 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1209 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1226 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1235 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1251 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1252 
voidpc
 
buf
, 
Àn
));

1259 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1274 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1282 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1295 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1301 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1307 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1319 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1354 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1382 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1397 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1413 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1425 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1426 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1437 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1453 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1469 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1498 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1532 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1533 c⁄° *
vîsi⁄
, 
°ªam_size
));

1534 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1535 c⁄° *
vîsi⁄
, 
°ªam_size
));

1536 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1537 
wödowBôs
, 
memLevñ
,

1538 
°øãgy
, c⁄° *
vîsi⁄
,

1539 
°ªam_size
));

1540 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1541 c⁄° *
vîsi⁄
, 
°ªam_size
));

1542 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1543 
FAR
 *
wödow
,

1544 c⁄° *
vîsi⁄
,

1545 
°ªam_size
));

1546 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1547 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1548 
	#öÊ©eInô
(
°rm
) \

1549 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1550 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1551 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1552 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1553 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1554 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1555 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1556 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1557 
ZLIB_VERSION
, (
z_°ªam
))

	)

1565 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& 
_LFS64_LARGEFILE
-0

1566 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1567 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1568 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1569 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1570 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1571 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1574 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& 
_FILE_OFFSET_BITS
-0 =64 && 
_LFS64_LARGEFILE
-0

1575 
	#gz›í
 
gz›í64


	)

1576 
	#gz£ek
 
gz£ek64


	)

1577 
	#gzãŒ
 
gzãŒ64


	)

1578 
	#gzoff£t
 
gzoff£t64


	)

1579 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1580 
	#¸c32_comböe
 
¸c32_comböe64


	)

1581 #i‚de‡
_LARGEFILE64_SOURCE


1582 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1583 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1584 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1585 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1586 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1587 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1590 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1591 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1592 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1593 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1594 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1595 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1599 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1600 
	söã∫Æ_°©e
 {
dummy
;};

1604 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1605 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1606 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1607 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1609 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/unistd.h

1 #ifde‡
__i386__


2 
	~"uni°d_32.h
"

4 
	~"uni°d_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

120 
	#F_SETPIPE_SZ
 1031

	)

121 
	#F_GETPIPE_SZ
 1032

	)

123 #ifde‡
__USE_XOPEN2K8


124 
	#F_DUPFD_CLOEXEC
 1030

	)

129 
	#FD_CLOEXEC
 1

	)

132 
	#F_RDLCK
 0

	)

133 
	#F_WRLCK
 1

	)

134 
	#F_UNLCK
 2

	)

137 
	#F_EXLCK
 4

	)

138 
	#F_SHLCK
 8

	)

140 #ifde‡
__USE_BSD


142 
	#LOCK_SH
 1

	)

143 
	#LOCK_EX
 2

	)

144 
	#LOCK_NB
 4

	)

146 
	#LOCK_UN
 8

	)

149 #ifde‡
__USE_GNU


150 
	#LOCK_MAND
 32

	)

151 
	#LOCK_READ
 64

	)

152 
	#LOCK_WRITE
 128

	)

153 
	#LOCK_RW
 192

	)

156 #ifde‡
__USE_GNU


158 
	#DN_ACCESS
 0x00000001

	)

159 
	#DN_MODIFY
 0x00000002

	)

160 
	#DN_CREATE
 0x00000004

	)

161 
	#DN_DELETE
 0x00000008

	)

162 
	#DN_RENAME
 0x00000010

	)

163 
	#DN_ATTRIB
 0x00000020

	)

164 
	#DN_MULTISHOT
 0x80000000

	)

167 
	sÊock


169 
	ml_ty≥
;

170 
	ml_whí˚
;

171 #i‚de‡
__USE_FILE_OFFSET64


172 
__off_t
 
	ml_°¨t
;

173 
__off_t
 
	ml_Àn
;

175 
__off64_t
 
	ml_°¨t
;

176 
__off64_t
 
	ml_Àn
;

178 
__pid_t
 
	ml_pid
;

181 #ifde‡
__USE_LARGEFILE64


182 
	sÊock64


184 
	ml_ty≥
;

185 
	ml_whí˚
;

186 
__off64_t
 
	ml_°¨t
;

187 
__off64_t
 
	ml_Àn
;

188 
__pid_t
 
	ml_pid
;

192 #ifde‡
__USE_GNU


194 
	e__pid_ty≥


196 
	mF_OWNER_TID
 = 0,

197 
	mF_OWNER_PID
,

198 
	mF_OWNER_PGRP
,

199 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


203 
	sf_ow√r_ex


205 
__pid_ty≥
 
	mty≥
;

206 
__pid_t
 
	mpid
;

212 #ifdef 
__USE_BSD


213 
	#FAPPEND
 
O_APPEND


	)

214 
	#FFSYNC
 
O_FSYNC


	)

215 
	#FASYNC
 
O_ASYNC


	)

216 
	#FNONBLOCK
 
O_NONBLOCK


	)

217 
	#FNDELAY
 
O_NDELAY


	)

221 #ifde‡
__USE_XOPEN2K


222 
	#POSIX_FADV_NORMAL
 0

	)

223 
	#POSIX_FADV_RANDOM
 1

	)

224 
	#POSIX_FADV_SEQUENTIAL
 2

	)

225 
	#POSIX_FADV_WILLNEED
 3

	)

226 
	#POSIX_FADV_DONTNEED
 4

	)

227 
	#POSIX_FADV_NOREUSE
 5

	)

231 #ifde‡
__USE_GNU


233 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

236 
	#SYNC_FILE_RANGE_WRITE
 2

	)

239 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

244 
	#SPLICE_F_MOVE
 1

	)

245 
	#SPLICE_F_NONBLOCK
 2

	)

248 
	#SPLICE_F_MORE
 4

	)

249 
	#SPLICE_F_GIFT
 8

	)

252 
	g__BEGIN_DECLS


254 #ifde‡
__USE_GNU


257 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

258 
__THROW
;

262 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

263 
__Êags
);

267 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

268 
size_t
 
__cou¡
, 
__Êags
);

271 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

272 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

273 
__Êags
);

276 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

277 
__Êags
);

280 #i‚de‡
__USE_FILE_OFFSET64


281 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

283 #ifde‡
__REDIRECT


284 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

285 
__off64_t
 
__Àn
),

286 
ÁŒoˇã64
);

288 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

291 #ifde‡
__USE_LARGEFILE64


292 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

293 
__off64_t
 
__Àn
);

297 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

75 
	#IP_ORIGDSTADDR
 20

	)

76 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

78 
	#IP_MINTTL
 21

	)

82 
	#IP_PMTUDISC_DONT
 0

	)

83 
	#IP_PMTUDISC_WANT
 1

	)

84 
	#IP_PMTUDISC_DO
 2

	)

85 
	#IP_PMTUDISC_PROBE
 3

	)

88 
	#SOL_IP
 0

	)

90 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

91 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

92 
	#IP_MAX_MEMBERSHIPS
 20

	)

94 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


98 
	sù_›ts


100 
ö_addr
 
	mù_d°
;

101 
	mù_›ts
[40];

105 
	sù_mªqn


107 
ö_addr
 
	mimr_mu…üddr
;

108 
ö_addr
 
	mimr_addªss
;

109 
	mimr_ifödex
;

113 
	sö_pktöfo


115 
	mùi_ifödex
;

116 
ö_addr
 
	mùi_•ec_d°
;

117 
ö_addr
 
	mùi_addr
;

124 
	#IPV6_ADDRFORM
 1

	)

125 
	#IPV6_2292PKTINFO
 2

	)

126 
	#IPV6_2292HOPOPTS
 3

	)

127 
	#IPV6_2292DSTOPTS
 4

	)

128 
	#IPV6_2292RTHDR
 5

	)

129 
	#IPV6_2292PKTOPTIONS
 6

	)

130 
	#IPV6_CHECKSUM
 7

	)

131 
	#IPV6_2292HOPLIMIT
 8

	)

133 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

135 
	#IPV6_NEXTHOP
 9

	)

136 
	#IPV6_AUTHHDR
 10

	)

137 
	#IPV6_UNICAST_HOPS
 16

	)

138 
	#IPV6_MULTICAST_IF
 17

	)

139 
	#IPV6_MULTICAST_HOPS
 18

	)

140 
	#IPV6_MULTICAST_LOOP
 19

	)

141 
	#IPV6_JOIN_GROUP
 20

	)

142 
	#IPV6_LEAVE_GROUP
 21

	)

143 
	#IPV6_ROUTER_ALERT
 22

	)

144 
	#IPV6_MTU_DISCOVER
 23

	)

145 
	#IPV6_MTU
 24

	)

146 
	#IPV6_RECVERR
 25

	)

147 
	#IPV6_V6ONLY
 26

	)

148 
	#IPV6_JOIN_ANYCAST
 27

	)

149 
	#IPV6_LEAVE_ANYCAST
 28

	)

150 
	#IPV6_IPSEC_POLICY
 34

	)

151 
	#IPV6_XFRM_POLICY
 35

	)

153 
	#IPV6_RECVPKTINFO
 49

	)

154 
	#IPV6_PKTINFO
 50

	)

155 
	#IPV6_RECVHOPLIMIT
 51

	)

156 
	#IPV6_HOPLIMIT
 52

	)

157 
	#IPV6_RECVHOPOPTS
 53

	)

158 
	#IPV6_HOPOPTS
 54

	)

159 
	#IPV6_RTHDRDSTOPTS
 55

	)

160 
	#IPV6_RECVRTHDR
 56

	)

161 
	#IPV6_RTHDR
 57

	)

162 
	#IPV6_RECVDSTOPTS
 58

	)

163 
	#IPV6_DSTOPTS
 59

	)

165 
	#IPV6_RECVTCLASS
 66

	)

166 
	#IPV6_TCLASS
 67

	)

169 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

170 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

171 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

172 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

175 
	#IPV6_PMTUDISC_DONT
 0

	)

176 
	#IPV6_PMTUDISC_WANT
 1

	)

177 
	#IPV6_PMTUDISC_DO
 2

	)

178 
	#IPV6_PMTUDISC_PROBE
 3

	)

181 
	#SOL_IPV6
 41

	)

182 
	#SOL_ICMPV6
 58

	)

185 
	#IPV6_RTHDR_LOOSE
 0

	)

186 
	#IPV6_RTHDR_STRICT
 1

	)

188 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/ipc.h

19 #i‚de‡
_SYS_IPC_H


23 
	~<bôs/ty≥s.h
>

26 
	#IPC_CREAT
 01000

	)

27 
	#IPC_EXCL
 02000

	)

28 
	#IPC_NOWAIT
 04000

	)

31 
	#IPC_RMID
 0

	)

32 
	#IPC_SET
 1

	)

33 
	#IPC_STAT
 2

	)

34 #ifde‡
__USE_GNU


35 
	#IPC_INFO
 3

	)

39 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

43 
	sùc_≥rm


45 
__key_t
 
	m__key
;

46 
__uid_t
 
	muid
;

47 
__gid_t
 
	mgid
;

48 
__uid_t
 
	mcuid
;

49 
__gid_t
 
	mcgid
;

50 
	mmode
;

51 
	m__∑d1
;

52 
	m__£q
;

53 
	m__∑d2
;

54 
	m__unu£d1
;

55 
	m__unu£d2
;

	@/usr/include/bits/ipctypes.h

24 #i‚de‡
_BITS_IPCTYPES_H


25 
	#_BITS_IPCTYPES_H
 1

	)

27 
	~<bôs/ty≥s.h
>

30 #i‡
__WORDSIZE
 == 32

31 
	t__ùc_pid_t
;

33 
	t__ùc_pid_t
;

	@/usr/include/bits/mman.h

20 #i‚de‡
_SYS_MMAN_H


33 
	#PROT_READ
 0x1

	)

34 
	#PROT_WRITE
 0x2

	)

35 
	#PROT_EXEC
 0x4

	)

36 
	#PROT_NONE
 0x0

	)

37 
	#PROT_GROWSDOWN
 0x01000000

	)

39 
	#PROT_GROWSUP
 0x02000000

	)

43 
	#MAP_SHARED
 0x01

	)

44 
	#MAP_PRIVATE
 0x02

	)

45 #ifde‡
__USE_MISC


46 
	#MAP_TYPE
 0x0‡

	)

50 
	#MAP_FIXED
 0x10

	)

51 #ifde‡
__USE_MISC


52 
	#MAP_FILE
 0

	)

53 
	#MAP_ANONYMOUS
 0x20

	)

54 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

55 
	#MAP_32BIT
 0x40

	)

59 #ifde‡
__USE_MISC


60 
	#MAP_GROWSDOWN
 0x00100

	)

61 
	#MAP_DENYWRITE
 0x00800

	)

62 
	#MAP_EXECUTABLE
 0x01000

	)

63 
	#MAP_LOCKED
 0x02000

	)

64 
	#MAP_NORESERVE
 0x04000

	)

65 
	#MAP_POPULATE
 0x08000

	)

66 
	#MAP_NONBLOCK
 0x10000

	)

67 
	#MAP_STACK
 0x20000

	)

68 
	#MAP_HUGETLB
 0x40000

	)

72 
	#MS_ASYNC
 1

	)

73 
	#MS_SYNC
 4

	)

74 
	#MS_INVALIDATE
 2

	)

77 
	#MCL_CURRENT
 1

	)

78 
	#MCL_FUTURE
 2

	)

82 #ifde‡
__USE_GNU


83 
	#MREMAP_MAYMOVE
 1

	)

84 
	#MREMAP_FIXED
 2

	)

88 #ifde‡
__USE_BSD


89 
	#MADV_NORMAL
 0

	)

90 
	#MADV_RANDOM
 1

	)

91 
	#MADV_SEQUENTIAL
 2

	)

92 
	#MADV_WILLNEED
 3

	)

93 
	#MADV_DONTNEED
 4

	)

94 
	#MADV_REMOVE
 9

	)

95 
	#MADV_DONTFORK
 10

	)

96 
	#MADV_DOFORK
 11

	)

97 
	#MADV_MERGEABLE
 12

	)

98 
	#MADV_UNMERGEABLE
 13

	)

99 
	#MADV_HWPOISON
 100

	)

103 #ifde‡
__USE_XOPEN2K


104 
	#POSIX_MADV_NORMAL
 0

	)

105 
	#POSIX_MADV_RANDOM
 1

	)

106 
	#POSIX_MADV_SEQUENTIAL
 2

	)

107 
	#POSIX_MADV_WILLNEED
 3

	)

108 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

237 
	g__BEGIN_DECLS


239 #ifde‡
__USE_GNU


241 #i‚de‡
__USE_FILE_OFFSET64


242 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

243 
__c⁄°
 
æimô
 *
__√w_limô
,

244 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

246 #ifde‡
__REDIRECT_NTH


247 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

248 
__æimô_ªsour˚
 
__ªsour˚
,

249 
__c⁄°
 
æimô
 *
__√w_limô
,

250 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

252 
	#¥limô
 
¥limô64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

257 
__c⁄°
 
æimô64
 *
__√w_limô
,

258 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

262 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/sem.h

19 #i‚de‡
_SYS_SEM_H


23 
	~<sys/ty≥s.h
>

26 
	#SEM_UNDO
 0x1000

	)

29 
	#GETPID
 11

	)

30 
	#GETVAL
 12

	)

31 
	#GETALL
 13

	)

32 
	#GETNCNT
 14

	)

33 
	#GETZCNT
 15

	)

34 
	#SETVAL
 16

	)

35 
	#SETALL
 17

	)

39 
	s£mid_ds


41 
ùc_≥rm
 
	m£m_≥rm
;

42 
__time_t
 
	m£m_Ÿime
;

43 
	m__unu£d1
;

44 
__time_t
 
	m£m_˘ime
;

45 
	m__unu£d2
;

46 
	m£m_n£ms
;

47 
	m__unu£d3
;

48 
	m__unu£d4
;

65 
	#_SEM_SEMUN_UNDEFINED
 1

	)

67 #ifde‡
__USE_MISC


70 
	#SEM_STAT
 18

	)

71 
	#SEM_INFO
 19

	)

73 
	s£möfo


75 
	m£mm≠
;

76 
	m£mmni
;

77 
	m£mmns
;

78 
	m£mmnu
;

79 
	m£mm¶
;

80 
	m£m›m
;

81 
	m£mume
;

82 
	m£musz
;

83 
	m£mvmx
;

84 
	m£m´m
;

	@/usr/include/bits/semaphore.h

20 #i‚de‡
_SEMAPHORE_H


24 
	~<bôs/w‹dsize.h
>

26 #i‡
__WORDSIZE
 == 64

27 
	#__SIZEOF_SEM_T
 32

	)

29 
	#__SIZEOF_SEM_T
 16

	)

34 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

39 
	m__size
[
__SIZEOF_SEM_T
];

40 
	m__Æign
;

41 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/shm.h

20 #i‚de‡
_SYS_SHM_H


24 
	~<bôs/ty≥s.h
>

27 
	#SHM_R
 0400

	)

28 
	#SHM_W
 0200

	)

31 
	#SHM_RDONLY
 010000

	)

32 
	#SHM_RND
 020000

	)

33 
	#SHM_REMAP
 040000

	)

34 
	#SHM_EXEC
 0100000

	)

37 
	#SHM_LOCK
 11

	)

38 
	#SHM_UNLOCK
 12

	)

40 
	g__BEGIN_DECLS


43 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

44 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

48 
	tshm©t_t
;

51 
	sshmid_ds


53 
ùc_≥rm
 
shm_≥rm
;

54 
size_t
 
shm_£gsz
;

55 
__time_t
 
shm_©ime
;

56 #i‡
__WORDSIZE
 == 32

57 
__unu£d1
;

59 
__time_t
 
shm_dtime
;

60 #i‡
__WORDSIZE
 == 32

61 
__unu£d2
;

63 
__time_t
 
shm_˘ime
;

64 #i‡
__WORDSIZE
 == 32

65 
__unu£d3
;

67 
__pid_t
 
shm_˝id
;

68 
__pid_t
 
shm_Õid
;

69 
shm©t_t
 
shm_«âch
;

70 
__unu£d4
;

71 
__unu£d5
;

74 #ifde‡
__USE_MISC


77 
	#SHM_STAT
 13

	)

78 
	#SHM_INFO
 14

	)

81 
	#SHM_DEST
 01000

	)

82 
	#SHM_LOCKED
 02000

	)

83 
	#SHM_HUGETLB
 04000

	)

84 
	#SHM_NORESERVE
 010000

	)

86 
	sshmöfo


88 
shmmax
;

89 
shmmö
;

90 
shmmni
;

91 
shm£g
;

92 
shmÆl
;

93 
__unu£d1
;

94 
__unu£d2
;

95 
__unu£d3
;

96 
__unu£d4
;

99 
	sshm_öfo


101 
u£d_ids
;

102 
shm_tŸ
;

103 
shm_rss
;

104 
shm_swp
;

105 
sw≠_©ãm±s
;

106 
sw≠_suc˚s£s
;

111 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

235 
	mMSG_WAITFORONE
 = 0x10000,

236 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

238 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

241 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

247 
	smsghdr


249 *
	mmsg_«me
;

250 
sockÀn_t
 
	mmsg_«mñí
;

252 
iovec
 *
	mmsg_iov
;

253 
size_t
 
	mmsg_iovÀn
;

255 *
	mmsg_c⁄åﬁ
;

256 
size_t
 
	mmsg_c⁄åﬁÀn
;

261 
	mmsg_Êags
;

264 #ifde‡
__USE_GNU


266 
	smmsghdr


268 
msghdr
 
	mmsg_hdr
;

269 
	mmsg_Àn
;

274 
	scmsghdr


276 
size_t
 
	mcmsg_Àn
;

281 
	mcmsg_Àvñ
;

282 
	mcmsg_ty≥
;

283 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

284 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

292 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

294 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

295 
	#CMSG_FIRSTHDR
(
mhdr
) \

296 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

297 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

298 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

299 & (
size_t
Ë~( (size_tË- 1))

	)

300 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

301 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

302 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

304 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

305 
cmsghdr
 *
__cmsg
Ë
__THROW
;

306 #ifde‡
__USE_EXTERN_INLINES


307 #i‚de‡
_EXTERN_INLINE


308 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

310 
_EXTERN_INLINE
 
cmsghdr
 *

311 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

313 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

317 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

318 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

319 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


320 + 
__mhdr
->
msg_c⁄åﬁÀn
)

321 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

322 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

325  
__cmsg
;

326 
	}
}

333 
	mSCM_RIGHTS
 = 0x01

334 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

335 #ifde‡
__USE_GNU


336 , 
	mSCM_CREDENTIALS
 = 0x02

337 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

341 #ifde‡
__USE_GNU


343 
	su¸ed


345 
pid_t
 
	mpid
;

346 
uid_t
 
	muid
;

347 
gid_t
 
	mgid
;

352 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


353 #i‚de‡
FIOGETOWN


354 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

356 #i‚de‡
FIOSETOWN


357 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

359 #i‚de‡
SIOCATMARK


360 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

362 #i‚de‡
SIOCGPGRP


363 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

365 #i‚de‡
SIOCGSTAMP


366 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

368 #i‚de‡
SIOCGSTAMPNS


369 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

371 #i‚de‡
SIOCSPGRP


372 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

377 
	~<asm/sockë.h
>

379 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


380 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


381 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


382 #unde‡
FIOGETOWN


384 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


385 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


386 #unde‡
FIOSETOWN


388 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


389 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


390 #unde‡
SIOCATMARK


392 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


393 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


394 #unde‡
SIOCGPGRP


396 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


397 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


398 #unde‡
SIOCGSTAMP


400 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


401 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


402 #unde‡
SIOCGSTAMPNS


404 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


405 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


406 #unde‡
SIOCSPGRP


411 
	slögî


413 
	ml_⁄off
;

414 
	ml_lögî
;

418 
__BEGIN_DECLS


425 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

426 
__vÀn
, 
__Êags
,

427 
__c⁄°
 
time•ec
 *
__tmo
);

429 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statvfs.h

19 #i‚de‡
_SYS_STATVFS_H


23 
	~<bôs/ty≥s.h
>

25 #i‡
__WORDSIZE
 == 32

26 
	#_STATVFSBUF_F_UNUSED


	)

29 
	s°©vfs


31 
	mf_bsize
;

32 
	mf_‰size
;

33 #i‚de‡
__USE_FILE_OFFSET64


34 
__fsblk˙t_t
 
	mf_blocks
;

35 
__fsblk˙t_t
 
	mf_b‰ì
;

36 
__fsblk˙t_t
 
	mf_bavaû
;

37 
__fsfû˙t_t
 
	mf_fûes
;

38 
__fsfû˙t_t
 
	mf_f‰ì
;

39 
__fsfû˙t_t
 
	mf_Ávaû
;

41 
__fsblk˙t64_t
 
	mf_blocks
;

42 
__fsblk˙t64_t
 
	mf_b‰ì
;

43 
__fsblk˙t64_t
 
	mf_bavaû
;

44 
__fsfû˙t64_t
 
	mf_fûes
;

45 
__fsfû˙t64_t
 
	mf_f‰ì
;

46 
__fsfû˙t64_t
 
	mf_Ávaû
;

48 
	mf_fsid
;

49 #ifde‡
_STATVFSBUF_F_UNUSED


50 
	m__f_unu£d
;

52 
	mf_Êag
;

53 
	mf_«memax
;

54 
	m__f_•¨e
[6];

57 #ifde‡
__USE_LARGEFILE64


58 
	s°©vfs64


60 
	mf_bsize
;

61 
	mf_‰size
;

62 
__fsblk˙t64_t
 
	mf_blocks
;

63 
__fsblk˙t64_t
 
	mf_b‰ì
;

64 
__fsblk˙t64_t
 
	mf_bavaû
;

65 
__fsfû˙t64_t
 
	mf_fûes
;

66 
__fsfû˙t64_t
 
	mf_f‰ì
;

67 
__fsfû˙t64_t
 
	mf_Ávaû
;

68 
	mf_fsid
;

69 #ifde‡
_STATVFSBUF_F_UNUSED


70 
	m__f_unu£d
;

72 
	mf_Êag
;

73 
	mf_«memax
;

74 
	m__f_•¨e
[6];

82 
	mST_RDONLY
 = 1,

83 
	#ST_RDONLY
 
ST_RDONLY


	)

84 
	mST_NOSUID
 = 2

85 
	#ST_NOSUID
 
ST_NOSUID


	)

86 #ifde‡
__USE_GNU


88 
	mST_NODEV
 = 4,

89 
	#ST_NODEV
 
ST_NODEV


	)

90 
	mST_NOEXEC
 = 8,

91 
	#ST_NOEXEC
 
ST_NOEXEC


	)

92 
	mST_SYNCHRONOUS
 = 16,

93 
	#ST_SYNCHRONOUS
 
ST_SYNCHRONOUS


	)

94 
	mST_MANDLOCK
 = 64,

95 
	#ST_MANDLOCK
 
ST_MANDLOCK


	)

96 
	mST_WRITE
 = 128,

97 
	#ST_WRITE
 
ST_WRITE


	)

98 
	mST_APPEND
 = 256,

99 
	#ST_APPEND
 
ST_APPEND


	)

100 
	mST_IMMUTABLE
 = 512,

101 
	#ST_IMMUTABLE
 
ST_IMMUTABLE


	)

102 
	mST_NOATIME
 = 1024,

103 
	#ST_NOATIME
 
ST_NOATIME


	)

104 
	mST_NODIRATIME
 = 2048,

105 
	#ST_NODIRATIME
 
ST_NODIRATIME


	)

106 
	mST_RELATIME
 = 4096

107 
	#ST_RELATIME
 
ST_RELATIME


	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	~<bôs/w‹dsize.h
>

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_brk
 
__NR_brk


	)

17 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

18 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

19 
	#SYS_chdú
 
__NR_chdú


	)

20 
	#SYS_chmod
 
__NR_chmod


	)

21 
	#SYS_chown
 
__NR_chown


	)

22 
	#SYS_chroŸ
 
__NR_chroŸ


	)

23 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

24 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

25 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

26 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

27 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

28 
	#SYS_˛o£
 
__NR_˛o£


	)

29 
	#SYS_¸ót
 
__NR_¸ót


	)

30 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

31 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

32 
	#SYS_dup
 
__NR_dup


	)

33 
	#SYS_dup2
 
__NR_dup2


	)

34 
	#SYS_dup3
 
__NR_dup3


	)

35 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

36 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

37 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

38 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

39 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

40 
	#SYS_evítfd
 
__NR_evítfd


	)

41 
	#SYS_evítfd2
 
__NR_evítfd2


	)

42 
	#SYS_execve
 
__NR_execve


	)

43 
	#SYS_exô
 
__NR_exô


	)

44 
	#SYS_exô_group
 
__NR_exô_group


	)

45 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

46 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

47 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

48 
	#SYS_fchdú
 
__NR_fchdú


	)

49 
	#SYS_fchmod
 
__NR_fchmod


	)

50 
	#SYS_fchmod©
 
__NR_fchmod©


	)

51 
	#SYS_fchown
 
__NR_fchown


	)

52 
	#SYS_fchow«t
 
__NR_fchow«t


	)

53 
	#SYS_f˙é
 
__NR_f˙é


	)

54 
	#SYS_fd©async
 
__NR_fd©async


	)

55 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

56 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

57 
	#SYS_Êock
 
__NR_Êock


	)

58 
	#SYS_f‹k
 
__NR_f‹k


	)

59 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

60 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

61 
	#SYS_f°©
 
__NR_f°©


	)

62 
	#SYS_f°©fs
 
__NR_f°©fs


	)

63 
	#SYS_fsync
 
__NR_fsync


	)

64 
	#SYS_·runˇã
 
__NR_·runˇã


	)

65 
	#SYS_fuãx
 
__NR_fuãx


	)

66 
	#SYS_futimeßt
 
__NR_futimeßt


	)

67 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

68 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

69 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

70 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

71 
	#SYS_gëcwd
 
__NR_gëcwd


	)

72 
	#SYS_gëdíts
 
__NR_gëdíts


	)

73 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

74 
	#SYS_gëegid
 
__NR_gëegid


	)

75 
	#SYS_gëeuid
 
__NR_gëeuid


	)

76 
	#SYS_gëgid
 
__NR_gëgid


	)

77 
	#SYS_gëgroups
 
__NR_gëgroups


	)

78 
	#SYS_gëôimî
 
__NR_gëôimî


	)

79 
	#SYS_gëpgid
 
__NR_gëpgid


	)

80 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

81 
	#SYS_gëpid
 
__NR_gëpid


	)

82 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

83 
	#SYS_gëµid
 
__NR_gëµid


	)

84 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

85 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

86 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

87 
	#SYS_gëæimô
 
__NR_gëæimô


	)

88 
	#SYS_gërußge
 
__NR_gërußge


	)

89 
	#SYS_gësid
 
__NR_gësid


	)

90 
	#SYS_gëtid
 
__NR_gëtid


	)

91 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

92 
	#SYS_gëuid
 
__NR_gëuid


	)

93 
	#SYS_gëx©å
 
__NR_gëx©å


	)

94 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

95 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

96 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

97 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

98 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

99 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

100 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

101 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

102 
	#SYS_io_£tup
 
__NR_io_£tup


	)

103 
	#SYS_io_submô
 
__NR_io_submô


	)

104 
	#SYS_io˘l
 
__NR_io˘l


	)

105 
	#SYS_i›îm
 
__NR_i›îm


	)

106 
	#SYS_i›l
 
__NR_i›l


	)

107 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

108 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

109 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

110 
	#SYS_key˘l
 
__NR_key˘l


	)

111 
	#SYS_kûl
 
__NR_kûl


	)

112 
	#SYS_lchown
 
__NR_lchown


	)

113 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

114 
	#SYS_lök
 
__NR_lök


	)

115 
	#SYS_lök©
 
__NR_lök©


	)

116 
	#SYS_li°x©å
 
__NR_li°x©å


	)

117 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

118 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

119 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

120 
	#SYS_l£ek
 
__NR_l£ek


	)

121 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

122 
	#SYS_l°©
 
__NR_l°©


	)

123 
	#SYS_madvi£
 
__NR_madvi£


	)

124 
	#SYS_mböd
 
__NR_mböd


	)

125 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

126 
	#SYS_möc‹e
 
__NR_möc‹e


	)

127 
	#SYS_mkdú
 
__NR_mkdú


	)

128 
	#SYS_mkdú©
 
__NR_mkdú©


	)

129 
	#SYS_mknod
 
__NR_mknod


	)

130 
	#SYS_mknod©
 
__NR_mknod©


	)

131 
	#SYS_mlock
 
__NR_mlock


	)

132 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

133 
	#SYS_mm≠
 
__NR_mm≠


	)

134 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

135 
	#SYS_mou¡
 
__NR_mou¡


	)

136 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

137 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

138 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

139 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

140 
	#SYS_mq_›í
 
__NR_mq_›í


	)

141 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

142 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

143 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

144 
	#SYS_mªm≠
 
__NR_mªm≠


	)

145 
	#SYS_msync
 
__NR_msync


	)

146 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

147 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

148 
	#SYS_munm≠
 
__NR_munm≠


	)

149 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

150 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

151 
	#SYS_›í
 
__NR_›í


	)

152 
	#SYS_›í©
 
__NR_›í©


	)

153 
	#SYS_∑u£
 
__NR_∑u£


	)

154 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

155 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

156 
	#SYS_pùe
 
__NR_pùe


	)

157 
	#SYS_pùe2
 
__NR_pùe2


	)

158 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

159 
	#SYS_pﬁl
 
__NR_pﬁl


	)

160 
	#SYS_µﬁl
 
__NR_µﬁl


	)

161 
	#SYS_¥˘l
 
__NR_¥˘l


	)

162 
	#SYS_¥ód64
 
__NR_¥ód64


	)

163 
	#SYS_¥ódv
 
__NR_¥ódv


	)

164 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

165 
	#SYS_±ø˚
 
__NR_±ø˚


	)

166 
	#SYS_puçmsg
 
__NR_puçmsg


	)

167 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

168 
	#SYS_pwrôev
 
__NR_pwrôev


	)

169 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

170 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

171 
	#SYS_ªad
 
__NR_ªad


	)

172 
	#SYS_ªadahód
 
__NR_ªadahód


	)

173 
	#SYS_ªadlök
 
__NR_ªadlök


	)

174 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

175 
	#SYS_ªadv
 
__NR_ªadv


	)

176 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

177 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

178 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

179 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

180 
	#SYS_ª«me
 
__NR_ª«me


	)

181 
	#SYS_ª«mót
 
__NR_ª«mót


	)

182 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

183 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

184 
	#SYS_rmdú
 
__NR_rmdú


	)

185 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

186 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

187 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

188 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

189 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

190 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

191 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

192 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

193 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

194 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

195 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

196 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

197 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

198 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

199 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

200 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

201 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

202 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

203 
	#SYS_£À˘
 
__NR_£À˘


	)

204 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

205 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

206 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

207 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

208 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

209 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

210 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

211 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

212 
	#SYS_£tgid
 
__NR_£tgid


	)

213 
	#SYS_£tgroups
 
__NR_£tgroups


	)

214 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

215 
	#SYS_£tôimî
 
__NR_£tôimî


	)

216 
	#SYS_£çgid
 
__NR_£çgid


	)

217 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

218 
	#SYS_£åegid
 
__NR_£åegid


	)

219 
	#SYS_£åesgid
 
__NR_£åesgid


	)

220 
	#SYS_£åesuid
 
__NR_£åesuid


	)

221 
	#SYS_£åeuid
 
__NR_£åeuid


	)

222 
	#SYS_£ålimô
 
__NR_£ålimô


	)

223 
	#SYS_£tsid
 
__NR_£tsid


	)

224 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

225 
	#SYS_£tuid
 
__NR_£tuid


	)

226 
	#SYS_£tx©å
 
__NR_£tx©å


	)

227 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

228 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

229 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

230 
	#SYS_•li˚
 
__NR_•li˚


	)

231 
	#SYS_°©
 
__NR_°©


	)

232 
	#SYS_°©fs
 
__NR_°©fs


	)

233 
	#SYS_sw≠off
 
__NR_sw≠off


	)

234 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

235 
	#SYS_symlök
 
__NR_symlök


	)

236 
	#SYS_symlök©
 
__NR_symlök©


	)

237 
	#SYS_sync
 
__NR_sync


	)

238 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

239 
	#SYS_sysfs
 
__NR_sysfs


	)

240 
	#SYS_sysöfo
 
__NR_sysöfo


	)

241 
	#SYS_sy¶og
 
__NR_sy¶og


	)

242 
	#SYS_ãe
 
__NR_ãe


	)

243 
	#SYS_tgkûl
 
__NR_tgkûl


	)

244 
	#SYS_time
 
__NR_time


	)

245 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

246 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

247 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

248 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

249 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

250 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

251 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

252 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

253 
	#SYS_times
 
__NR_times


	)

254 
	#SYS_tkûl
 
__NR_tkûl


	)

255 
	#SYS_åunˇã
 
__NR_åunˇã


	)

256 
	#SYS_umask
 
__NR_umask


	)

257 
	#SYS_umou¡2
 
__NR_umou¡2


	)

258 
	#SYS_u«me
 
__NR_u«me


	)

259 
	#SYS_u∆ök
 
__NR_u∆ök


	)

260 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

261 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

262 
	#SYS_u£lib
 
__NR_u£lib


	)

263 
	#SYS_u°©
 
__NR_u°©


	)

264 
	#SYS_utime
 
__NR_utime


	)

265 
	#SYS_utimíßt
 
__NR_utimíßt


	)

266 
	#SYS_utimes
 
__NR_utimes


	)

267 
	#SYS_vf‹k
 
__NR_vf‹k


	)

268 
	#SYS_vh™gup
 
__NR_vh™gup


	)

269 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

270 
	#SYS_v£rvî
 
__NR_v£rvî


	)

271 
	#SYS_waô4
 
__NR_waô4


	)

272 
	#SYS_waôid
 
__NR_waôid


	)

273 
	#SYS_wrôe
 
__NR_wrôe


	)

274 
	#SYS_wrôev
 
__NR_wrôev


	)

275 #i‡
__WORDSIZE
 == 64

276 
	#SYS_ac˚±
 
__NR_ac˚±


	)

277 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

278 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

279 
	#SYS_böd
 
__NR_böd


	)

280 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

281 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

282 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

283 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

284 
	#SYS_gësock«me
 
__NR_gësock«me


	)

285 
	#SYS_gësock›t
 
__NR_gësock›t


	)

286 
	#SYS_li°í
 
__NR_li°í


	)

287 
	#SYS_msg˘l
 
__NR_msg˘l


	)

288 
	#SYS_msggë
 
__NR_msggë


	)

289 
	#SYS_msgrcv
 
__NR_msgrcv


	)

290 
	#SYS_msg¢d
 
__NR_msg¢d


	)

291 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

292 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

293 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

294 
	#SYS_£curôy
 
__NR_£curôy


	)

295 
	#SYS_£m˘l
 
__NR_£m˘l


	)

296 
	#SYS_£mgë
 
__NR_£mgë


	)

297 
	#SYS_£m›
 
__NR_£m›


	)

298 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

299 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

300 
	#SYS_£ndto
 
__NR_£ndto


	)

301 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

302 
	#SYS_shm©
 
__NR_shm©


	)

303 
	#SYS_shm˘l
 
__NR_shm˘l


	)

304 
	#SYS_shmdt
 
__NR_shmdt


	)

305 
	#SYS_shmgë
 
__NR_shmgë


	)

306 
	#SYS_shutdown
 
__NR_shutdown


	)

307 
	#SYS_sockë
 
__NR_sockë


	)

308 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

309 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

311 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

312 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

313 
	#SYS_bdÊush
 
__NR_bdÊush


	)

314 
	#SYS_bªak
 
__NR_bªak


	)

315 
	#SYS_chown32
 
__NR_chown32


	)

316 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

317 
	#SYS_fchown32
 
__NR_fchown32


	)

318 
	#SYS_f˙é64
 
__NR_f˙é64


	)

319 
	#SYS_f°©64
 
__NR_f°©64


	)

320 
	#SYS_f°©©64
 
__NR_f°©©64


	)

321 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

322 
	#SYS_·ime
 
__NR_·ime


	)

323 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

324 
	#SYS_gë˝u
 
__NR_gë˝u


	)

325 
	#SYS_gëegid32
 
__NR_gëegid32


	)

326 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

327 
	#SYS_gëgid32
 
__NR_gëgid32


	)

328 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

329 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

330 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

331 
	#SYS_gëuid32
 
__NR_gëuid32


	)

332 
	#SYS_gây
 
__NR_gây


	)

333 
	#SYS_idÀ
 
__NR_idÀ


	)

334 
	#SYS_ùc
 
__NR_ùc


	)

335 
	#SYS_lchown32
 
__NR_lchown32


	)

336 
	#SYS_lock
 
__NR_lock


	)

337 
	#SYS_l°©64
 
__NR_l°©64


	)

338 
	#SYS_madvi£1
 
__NR_madvi£1


	)

339 
	#SYS_mm≠2
 
__NR_mm≠2


	)

340 
	#SYS_mpx
 
__NR_mpx


	)

341 
	#SYS_ni˚
 
__NR_ni˚


	)

342 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

343 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

344 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

345 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

346 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

347 
	#SYS_¥of
 
__NR_¥of


	)

348 
	#SYS_¥ofû
 
__NR_¥ofû


	)

349 
	#SYS_ªaddú
 
__NR_ªaddú


	)

350 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

351 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

352 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

353 
	#SYS_£tgid32
 
__NR_£tgid32


	)

354 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

355 
	#SYS_£åegid32
 
__NR_£åegid32


	)

356 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

357 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

358 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

359 
	#SYS_£tuid32
 
__NR_£tuid32


	)

360 
	#SYS_sgëmask
 
__NR_sgëmask


	)

361 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

362 
	#SYS_sig«l
 
__NR_sig«l


	)

363 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

364 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

365 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

366 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

367 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

368 
	#SYS_s£tmask
 
__NR_s£tmask


	)

369 
	#SYS_°©64
 
__NR_°©64


	)

370 
	#SYS_°©fs64
 
__NR_°©fs64


	)

371 
	#SYS_°ime
 
__NR_°ime


	)

372 
	#SYS_°ty
 
__NR_°ty


	)

373 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

374 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

375 
	#SYS_ulimô
 
__NR_ulimô


	)

376 
	#SYS_umou¡
 
__NR_umou¡


	)

377 
	#SYS_vm86
 
__NR_vm86


	)

378 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

379 
	#SYS_waôpid
 
__NR_waôpid


	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/utsname.h

19 #i‚de‡
_SYS_UTSNAME_H


24 
	#_UTSNAME_LENGTH
 65

	)

29 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

6 
	#PR_SET_PDEATHSIG
 1

	)

7 
	#PR_GET_PDEATHSIG
 2

	)

10 
	#PR_GET_DUMPABLE
 3

	)

11 
	#PR_SET_DUMPABLE
 4

	)

14 
	#PR_GET_UNALIGN
 5

	)

15 
	#PR_SET_UNALIGN
 6

	)

16 
	#PR_UNALIGN_NOPRINT
 1

	)

17 
	#PR_UNALIGN_SIGBUS
 2

	)

21 
	#PR_GET_KEEPCAPS
 7

	)

22 
	#PR_SET_KEEPCAPS
 8

	)

25 
	#PR_GET_FPEMU
 9

	)

26 
	#PR_SET_FPEMU
 10

	)

27 
	#PR_FPEMU_NOPRINT
 1

	)

28 
	#PR_FPEMU_SIGFPE
 2

	)

31 
	#PR_GET_FPEXC
 11

	)

32 
	#PR_SET_FPEXC
 12

	)

33 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

34 
	#PR_FP_EXC_DIV
 0x010000

	)

35 
	#PR_FP_EXC_OVF
 0x020000

	)

36 
	#PR_FP_EXC_UND
 0x040000

	)

37 
	#PR_FP_EXC_RES
 0x080000

	)

38 
	#PR_FP_EXC_INV
 0x100000

	)

39 
	#PR_FP_EXC_DISABLED
 0

	)

40 
	#PR_FP_EXC_NONRECOV
 1

	)

41 
	#PR_FP_EXC_ASYNC
 2

	)

42 
	#PR_FP_EXC_PRECISE
 3

	)

46 
	#PR_GET_TIMING
 13

	)

47 
	#PR_SET_TIMING
 14

	)

48 
	#PR_TIMING_STATISTICAL
 0

	)

50 
	#PR_TIMING_TIMESTAMP
 1

	)

53 
	#PR_SET_NAME
 15

	)

54 
	#PR_GET_NAME
 16

	)

57 
	#PR_GET_ENDIAN
 19

	)

58 
	#PR_SET_ENDIAN
 20

	)

59 
	#PR_ENDIAN_BIG
 0

	)

60 
	#PR_ENDIAN_LITTLE
 1

	)

61 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

64 
	#PR_GET_SECCOMP
 21

	)

65 
	#PR_SET_SECCOMP
 22

	)

68 
	#PR_CAPBSET_READ
 23

	)

69 
	#PR_CAPBSET_DROP
 24

	)

72 
	#PR_GET_TSC
 25

	)

73 
	#PR_SET_TSC
 26

	)

74 
	#PR_TSC_ENABLE
 1

	)

75 
	#PR_TSC_SIGSEGV
 2

	)

78 
	#PR_GET_SECUREBITS
 27

	)

79 
	#PR_SET_SECUREBITS
 28

	)

85 
	#PR_SET_TIMERSLACK
 29

	)

86 
	#PR_GET_TIMERSLACK
 30

	)

88 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

89 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

95 
	#PR_MCE_KILL
 33

	)

96 
	#PR_MCE_KILL_CLEAR
 0

	)

97 
	#PR_MCE_KILL_SET
 1

	)

99 
	#PR_MCE_KILL_LATE
 0

	)

100 
	#PR_MCE_KILL_EARLY
 1

	)

101 
	#PR_MCE_KILL_DEFAULT
 2

	)

103 
	#PR_MCE_KILL_GET
 34

	)

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

163 
	mVM_UNUSED1
=1,

164 
	mVM_UNUSED2
=2,

165 
	mVM_UNUSED3
=3,

166 
	mVM_UNUSED4
=4,

167 
	mVM_OVERCOMMIT_MEMORY
=5,

168 
	mVM_UNUSED5
=6,

169 
	mVM_UNUSED7
=7,

170 
	mVM_UNUSED8
=8,

171 
	mVM_UNUSED9
=9,

172 
	mVM_PAGE_CLUSTER
=10,

173 
	mVM_DIRTY_BACKGROUND
=11,

174 
	mVM_DIRTY_RATIO
=12,

175 
	mVM_DIRTY_WB_CS
=13,

176 
	mVM_DIRTY_EXPIRE_CS
=14,

177 
	mVM_NR_PDFLUSH_THREADS
=15,

178 
	mVM_OVERCOMMIT_RATIO
=16,

179 
	mVM_PAGEBUF
=17,

180 
	mVM_HUGETLB_PAGES
=18,

181 
	mVM_SWAPPINESS
=19,

182 
	mVM_LOWMEM_RESERVE_RATIO
=20,

183 
	mVM_MIN_FREE_KBYTES
=21,

184 
	mVM_MAX_MAP_COUNT
=22,

185 
	mVM_LAPTOP_MODE
=23,

186 
	mVM_BLOCK_DUMP
=24,

187 
	mVM_HUGETLB_GROUP
=25,

188 
	mVM_VFS_CACHE_PRESSURE
=26,

189 
	mVM_LEGACY_VA_LAYOUT
=27,

190 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

191 
	mVM_DROP_PAGECACHE
=29,

192 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

193 
	mVM_ZONE_RECLAIM_MODE
=31,

194 
	mVM_MIN_UNMAPPED
=32,

195 
	mVM_PANIC_ON_OOM
=33,

196 
	mVM_VDSO_ENABLED
=34,

197 
	mVM_MIN_SLAB
=35,

204 
	mNET_CORE
=1,

205 
	mNET_ETHER
=2,

206 
	mNET_802
=3,

207 
	mNET_UNIX
=4,

208 
	mNET_IPV4
=5,

209 
	mNET_IPX
=6,

210 
	mNET_ATALK
=7,

211 
	mNET_NETROM
=8,

212 
	mNET_AX25
=9,

213 
	mNET_BRIDGE
=10,

214 
	mNET_ROSE
=11,

215 
	mNET_IPV6
=12,

216 
	mNET_X25
=13,

217 
	mNET_TR
=14,

218 
	mNET_DECNET
=15,

219 
	mNET_ECONET
=16,

220 
	mNET_SCTP
=17,

221 
	mNET_LLC
=18,

222 
	mNET_NETFILTER
=19,

223 
	mNET_DCCP
=20,

224 
	mNET_IRDA
=412,

230 
	mRANDOM_POOLSIZE
=1,

231 
	mRANDOM_ENTROPY_COUNT
=2,

232 
	mRANDOM_READ_THRESH
=3,

233 
	mRANDOM_WRITE_THRESH
=4,

234 
	mRANDOM_BOOT_ID
=5,

235 
	mRANDOM_UUID
=6

241 
	mPTY_MAX
=1,

242 
	mPTY_NR
=2

248 
	mBUS_ISA_MEM_BASE
=1,

249 
	mBUS_ISA_PORT_BASE
=2,

250 
	mBUS_ISA_PORT_SHIFT
=3

256 
	mNET_CORE_WMEM_MAX
=1,

257 
	mNET_CORE_RMEM_MAX
=2,

258 
	mNET_CORE_WMEM_DEFAULT
=3,

259 
	mNET_CORE_RMEM_DEFAULT
=4,

261 
	mNET_CORE_MAX_BACKLOG
=6,

262 
	mNET_CORE_FASTROUTE
=7,

263 
	mNET_CORE_MSG_COST
=8,

264 
	mNET_CORE_MSG_BURST
=9,

265 
	mNET_CORE_OPTMEM_MAX
=10,

266 
	mNET_CORE_HOT_LIST_LENGTH
=11,

267 
	mNET_CORE_DIVERT_VERSION
=12,

268 
	mNET_CORE_NO_CONG_THRESH
=13,

269 
	mNET_CORE_NO_CONG
=14,

270 
	mNET_CORE_LO_CONG
=15,

271 
	mNET_CORE_MOD_CONG
=16,

272 
	mNET_CORE_DEV_WEIGHT
=17,

273 
	mNET_CORE_SOMAXCONN
=18,

274 
	mNET_CORE_BUDGET
=19,

275 
	mNET_CORE_AEVENT_ETIME
=20,

276 
	mNET_CORE_AEVENT_RSEQTH
=21,

277 
	mNET_CORE_WARNINGS
=22,

288 
	mNET_UNIX_DESTROY_DELAY
=1,

289 
	mNET_UNIX_DELETE_DELAY
=2,

290 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

296 
	mNET_NF_CONNTRACK_MAX
=1,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

307 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

308 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

309 
	mNET_NF_CONNTRACK_BUCKETS
=14,

310 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

311 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

312 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

313 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

314 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

322 
	mNET_NF_CONNTRACK_COUNT
=27,

323 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

324 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

325 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

326 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

327 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

334 
	mNET_IPV4_FORWARD
=8,

335 
	mNET_IPV4_DYNADDR
=9,

337 
	mNET_IPV4_CONF
=16,

338 
	mNET_IPV4_NEIGH
=17,

339 
	mNET_IPV4_ROUTE
=18,

340 
	mNET_IPV4_FIB_HASH
=19,

341 
	mNET_IPV4_NETFILTER
=20,

343 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

344 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

345 
	mNET_IPV4_TCP_SACK
=35,

346 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

347 
	mNET_IPV4_DEFAULT_TTL
=37,

348 
	mNET_IPV4_AUTOCONFIG
=38,

349 
	mNET_IPV4_NO_PMTU_DISC
=39,

350 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

351 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

352 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

353 
	mNET_IPV4_IPFRAG_TIME
=43,

354 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

355 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

356 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

357 
	mNET_IPV4_TCP_RETRIES1
=47,

358 
	mNET_IPV4_TCP_RETRIES2
=48,

359 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

360 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

361 
	mNET_TCP_SYNCOOKIES
=51,

362 
	mNET_TCP_STDURG
=52,

363 
	mNET_TCP_RFC1337
=53,

364 
	mNET_TCP_SYN_TAILDROP
=54,

365 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

366 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

369 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

370 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

371 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

372 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

373 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

374 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

375 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

376 
	mNET_TCP_TW_RECYCLE
=66,

377 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

378 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

379 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

380 
	mNET_IPV4_INET_PEER_MINTTL
=70,

381 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

382 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

383 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

384 
	mNET_TCP_ORPHAN_RETRIES
=74,

385 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

386 
	mNET_TCP_SYNACK_RETRIES
=76,

387 
	mNET_TCP_MAX_ORPHANS
=77,

388 
	mNET_TCP_MAX_TW_BUCKETS
=78,

389 
	mNET_TCP_FACK
=79,

390 
	mNET_TCP_REORDERING
=80,

391 
	mNET_TCP_ECN
=81,

392 
	mNET_TCP_DSACK
=82,

393 
	mNET_TCP_MEM
=83,

394 
	mNET_TCP_WMEM
=84,

395 
	mNET_TCP_RMEM
=85,

396 
	mNET_TCP_APP_WIN
=86,

397 
	mNET_TCP_ADV_WIN_SCALE
=87,

398 
	mNET_IPV4_NONLOCAL_BIND
=88,

399 
	mNET_IPV4_ICMP_RATELIMIT
=89,

400 
	mNET_IPV4_ICMP_RATEMASK
=90,

401 
	mNET_TCP_TW_REUSE
=91,

402 
	mNET_TCP_FRTO
=92,

403 
	mNET_TCP_LOW_LATENCY
=93,

404 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

405 
	mNET_IPV4_IGMP_MAX_MSF
=96,

406 
	mNET_TCP_NO_METRICS_SAVE
=97,

407 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

408 
	mNET_TCP_MODERATE_RCVBUF
=106,

409 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

410 
	mNET_TCP_BIC_BETA
=108,

411 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

412 
	mNET_TCP_CONG_CONTROL
=110,

413 
	mNET_TCP_ABC
=111,

414 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

415 
	mNET_TCP_MTU_PROBING
=113,

416 
	mNET_TCP_BASE_MSS
=114,

417 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

418 
	mNET_TCP_DMA_COPYBREAK
=116,

419 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

420 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

421 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

422 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

423 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

424 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

425 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

426 
	mNET_TCP_MAX_SSTHRESH
=124,

427 
	mNET_TCP_FRTO_RESPONSE
=125,

431 
	mNET_IPV4_ROUTE_FLUSH
=1,

432 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

433 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

434 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

435 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

436 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

437 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

438 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

439 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

440 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

441 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

442 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

443 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

444 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

445 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

446 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

447 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

448 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

449 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

454 
	mNET_PROTO_CONF_ALL
=-2,

455 
	mNET_PROTO_CONF_DEFAULT
=-3

462 
	mNET_IPV4_CONF_FORWARDING
=1,

463 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

464 
	mNET_IPV4_CONF_PROXY_ARP
=3,

465 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

466 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

467 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

468 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

469 
	mNET_IPV4_CONF_RP_FILTER
=8,

470 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

471 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

472 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

473 
	mNET_IPV4_CONF_TAG
=12,

474 
	mNET_IPV4_CONF_ARPFILTER
=13,

475 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

476 
	mNET_IPV4_CONF_NOXFRM
=15,

477 
	mNET_IPV4_CONF_NOPOLICY
=16,

478 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

479 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

480 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

481 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

482 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

483 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

500 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

501 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

502 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

503 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

515 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

516 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

521 
	mNET_IPV6_CONF
=16,

522 
	mNET_IPV6_NEIGH
=17,

523 
	mNET_IPV6_ROUTE
=18,

524 
	mNET_IPV6_ICMP
=19,

525 
	mNET_IPV6_BINDV6ONLY
=20,

526 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

527 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

528 
	mNET_IPV6_IP6FRAG_TIME
=23,

529 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

530 
	mNET_IPV6_MLD_MAX_MSF
=25,

534 
	mNET_IPV6_ROUTE_FLUSH
=1,

535 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

536 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

537 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

538 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

539 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

540 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

541 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

542 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

543 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

547 
	mNET_IPV6_FORWARDING
=1,

548 
	mNET_IPV6_HOP_LIMIT
=2,

549 
	mNET_IPV6_MTU
=3,

550 
	mNET_IPV6_ACCEPT_RA
=4,

551 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

552 
	mNET_IPV6_AUTOCONF
=6,

553 
	mNET_IPV6_DAD_TRANSMITS
=7,

554 
	mNET_IPV6_RTR_SOLICITS
=8,

555 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

556 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

557 
	mNET_IPV6_USE_TEMPADDR
=11,

558 
	mNET_IPV6_TEMP_VALID_LFT
=12,

559 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

560 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

561 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

562 
	mNET_IPV6_MAX_ADDRESSES
=16,

563 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

564 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

565 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

566 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

567 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

568 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

569 
	mNET_IPV6_PROXY_NDP
=23,

570 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #ifde‡ 
__˝lu•lus


76 
	#BIO_TYPE_NONE
 0

	)

77 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

78 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

80 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

81 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

82 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

83 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

84 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

85 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

86 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

87 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

88 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

89 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

90 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

91 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

92 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

93 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

94 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

95 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

96 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

97 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

98 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

99 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

101 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

102 
	#BIO_TYPE_FILTER
 0x0200

	)

103 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

107 
	#BIO_NOCLOSE
 0x00

	)

108 
	#BIO_CLOSE
 0x01

	)

112 
	#BIO_CTRL_RESET
 1

	)

113 
	#BIO_CTRL_EOF
 2

	)

114 
	#BIO_CTRL_INFO
 3

	)

115 
	#BIO_CTRL_SET
 4

	)

116 
	#BIO_CTRL_GET
 5

	)

117 
	#BIO_CTRL_PUSH
 6

	)

118 
	#BIO_CTRL_POP
 7

	)

119 
	#BIO_CTRL_GET_CLOSE
 8

	)

120 
	#BIO_CTRL_SET_CLOSE
 9

	)

121 
	#BIO_CTRL_PENDING
 10

	)

122 
	#BIO_CTRL_FLUSH
 11

	)

123 
	#BIO_CTRL_DUP
 12

	)

124 
	#BIO_CTRL_WPENDING
 13

	)

126 
	#BIO_CTRL_SET_CALLBACK
 14

	)

127 
	#BIO_CTRL_GET_CALLBACK
 15

	)

129 
	#BIO_CTRL_SET_FILENAME
 30

	)

132 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

133 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

136 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

137 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

138 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

139 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

141 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

142 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

145 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

148 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

149 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

150 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

155 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

160 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

161 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

163 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

167 
	#BIO_FP_READ
 0x02

	)

168 
	#BIO_FP_WRITE
 0x04

	)

169 
	#BIO_FP_APPEND
 0x08

	)

170 
	#BIO_FP_TEXT
 0x10

	)

172 
	#BIO_FLAGS_READ
 0x01

	)

173 
	#BIO_FLAGS_WRITE
 0x02

	)

174 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

175 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

176 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

177 #i‚def 
BIO_FLAGS_UPLINK


180 
	#BIO_FLAGS_UPLINK
 0

	)

184 
	#BIO_GHBN_CTRL_HITS
 1

	)

185 
	#BIO_GHBN_CTRL_MISSES
 2

	)

186 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

187 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

188 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

197 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

202 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

204 
bio_°
 
	tBIO
;

206 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

207 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

208 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

210 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

211 
	#BIO_£t_ªåy_•ecül
(
b
) \

212 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

213 
	#BIO_£t_ªåy_ªad
(
b
) \

214 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

215 
	#BIO_£t_ªåy_wrôe
(
b
) \

216 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

219 
	#BIO_˛ór_ªåy_Êags
(
b
) \

220 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

221 
	#BIO_gë_ªåy_Êags
(
b
) \

222 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

225 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

226 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

227 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

228 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

229 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

237 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

239 
	#BIO_RR_CONNECT
 0x02

	)

241 
	#BIO_RR_ACCEPT
 0x03

	)

244 
	#BIO_CB_FREE
 0x01

	)

245 
	#BIO_CB_READ
 0x02

	)

246 
	#BIO_CB_WRITE
 0x03

	)

247 
	#BIO_CB_PUTS
 0x04

	)

248 
	#BIO_CB_GETS
 0x05

	)

249 
	#BIO_CB_CTRL
 0x06

	)

253 
	#BIO_CB_RETURN
 0x80

	)

254 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

255 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

256 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

258 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

259 
BIO_£t_ˇŒback
(
BIO
 *
b
,

260 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

261 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

262 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

264 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

265 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

267 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

269 
	sbio_mëhod_°


271 
ty≥
;

272 c⁄° *
«me
;

273 (*
bwrôe
)(
BIO
 *, const *, );

274 (*
bªad
)(
BIO
 *, *, );

275 (*
bputs
)(
BIO
 *, const *);

276 (*
bgës
)(
BIO
 *, *, );

277 (*
˘æ
)(
BIO
 *, , , *);

278 (*
¸óã
)(
BIO
 *);

279 (*
de°roy
)(
BIO
 *);

280 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

281 } 
	tBIO_METHOD
;

283 
	sbio_°


285 
BIO_METHOD
 *
mëhod
;

287 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

288 *
cb_¨g
;

290 
öô
;

291 
shutdown
;

292 
Êags
;

293 
ªåy_ªas⁄
;

294 
num
;

295 *
±r
;

296 
bio_°
 *
√xt_bio
;

297 
bio_°
 *
¥ev_bio
;

298 
ª„ªn˚s
;

299 
num_ªad
;

300 
num_wrôe
;

302 
CRYPTO_EX_DATA
 
ex_d©a
;

305 
DECLARE_STACK_OF
(
BIO
)

307 
	sbio_f_buf„r_˘x_°ru˘


310 
ibuf_size
;

311 
obuf_size
;

313 *
ibuf
;

314 
ibuf_Àn
;

315 
ibuf_off
;

317 *
obuf
;

318 
obuf_Àn
;

319 
obuf_off
;

320 } 
	tBIO_F_BUFFER_CTX
;

323 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

326 
	#BIO_CONN_S_BEFORE
 1

	)

327 
	#BIO_CONN_S_GET_IP
 2

	)

328 
	#BIO_CONN_S_GET_PORT
 3

	)

329 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

330 
	#BIO_CONN_S_CONNECT
 5

	)

331 
	#BIO_CONN_S_OK
 6

	)

332 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

333 
	#BIO_CONN_S_NBIO
 8

	)

336 
	#BIO_C_SET_CONNECT
 100

	)

337 
	#BIO_C_DO_STATE_MACHINE
 101

	)

338 
	#BIO_C_SET_NBIO
 102

	)

339 
	#BIO_C_SET_PROXY_PARAM
 103

	)

340 
	#BIO_C_SET_FD
 104

	)

341 
	#BIO_C_GET_FD
 105

	)

342 
	#BIO_C_SET_FILE_PTR
 106

	)

343 
	#BIO_C_GET_FILE_PTR
 107

	)

344 
	#BIO_C_SET_FILENAME
 108

	)

345 
	#BIO_C_SET_SSL
 109

	)

346 
	#BIO_C_GET_SSL
 110

	)

347 
	#BIO_C_SET_MD
 111

	)

348 
	#BIO_C_GET_MD
 112

	)

349 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

350 
	#BIO_C_SET_BUF_MEM
 114

	)

351 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

352 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

353 
	#BIO_C_SET_BUFF_SIZE
 117

	)

354 
	#BIO_C_SET_ACCEPT
 118

	)

355 
	#BIO_C_SSL_MODE
 119

	)

356 
	#BIO_C_GET_MD_CTX
 120

	)

357 
	#BIO_C_GET_PROXY_PARAM
 121

	)

358 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

359 
	#BIO_C_GET_CONNECT
 123

	)

360 
	#BIO_C_GET_ACCEPT
 124

	)

361 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

362 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

363 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

364 
	#BIO_C_FILE_SEEK
 128

	)

365 
	#BIO_C_GET_CIPHER_CTX
 129

	)

366 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

367 
	#BIO_C_SET_BIND_MODE
 131

	)

368 
	#BIO_C_GET_BIND_MODE
 132

	)

369 
	#BIO_C_FILE_TELL
 133

	)

370 
	#BIO_C_GET_SOCKS
 134

	)

371 
	#BIO_C_SET_SOCKS
 135

	)

373 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

374 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

375 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

376 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

377 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

378 
	#BIO_C_GET_READ_REQUEST
 141

	)

379 
	#BIO_C_SHUTDOWN_WR
 142

	)

380 
	#BIO_C_NREAD0
 143

	)

381 
	#BIO_C_NREAD
 144

	)

382 
	#BIO_C_NWRITE0
 145

	)

383 
	#BIO_C_NWRITE
 146

	)

384 
	#BIO_C_RESET_READ_REQUEST
 147

	)

385 
	#BIO_C_SET_MD_CTX
 148

	)

387 
	#BIO_C_SET_PREFIX
 149

	)

388 
	#BIO_C_GET_PREFIX
 150

	)

389 
	#BIO_C_SET_SUFFIX
 151

	)

390 
	#BIO_C_GET_SUFFIX
 152

	)

392 
	#BIO_C_SET_EX_ARG
 153

	)

393 
	#BIO_C_GET_EX_ARG
 154

	)

395 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

396 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

399 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

400 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

401 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

402 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

403 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

404 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

405 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

406 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

409 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

412 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

413 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

415 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

416 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

418 
	#BIO_BIND_NORMAL
 0

	)

419 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

420 
	#BIO_BIND_REUSEADDR
 2

	)

421 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

422 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

424 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

425 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

426 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

429 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

430 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

432 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

434 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

435 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

436 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

438 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

439 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

440 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

441 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

443 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

444 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

446 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

447 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

449 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

450 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

454 #ifde‡
CONST_STRICT


458 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

460 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

461 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

463 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

464 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

465 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

466 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

467 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

468 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

474 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

475 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

476 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

477 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

478 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

479 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

480 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

481 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

482 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

487 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

488 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

489 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

490 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

491 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

494 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

495 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

496 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

497 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

498 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

501 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

503 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

504 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

505 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

506 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

507 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

508 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

510 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

511 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

512 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

513 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

514 
cbp
)

	)

515 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

518 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

521 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

522 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

523 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

524 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

525 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

527 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

528 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

529 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

530 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

531 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

534 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

535 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

536 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

537 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

538 
	#BIO_dgøm_ªcv_timedout
(
b
) \

539 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

540 
	#BIO_dgøm_£nd_timedout
(
b
) \

541 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

542 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

543 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

544 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

545 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

550 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

551 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

552 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

553 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

554 
BIO_numbî_ªad
(
BIO
 *
bio
);

555 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

558 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

559 
a¢1_ps_func
 *
¥efix_‰ì
);

560 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

561 
a¢1_ps_func
 **
µªfix_‰ì
);

562 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

563 
a¢1_ps_func
 *
suffix_‰ì
);

564 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

565 
a¢1_ps_func
 **
psuffix_‰ì
);

567 #i‚de‡
OPENSSL_NO_FP_API


568 
BIO_METHOD
 *
BIO_s_fûe
();

569 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

570 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

571 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

573 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

574 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

575 
BIO_‰ì
(
BIO
 *
a
);

576 
BIO_v‰ì
(
BIO
 *
a
);

577 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

578 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

579 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

580 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

581 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

582 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

583 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

584 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

585 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

586 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

587 
BIO
 * 
BIO_p›
(BIO *
b
);

588 
BIO_‰ì_Æl
(
BIO
 *
a
);

589 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

590 
BIO
 * 
BIO_√xt
(BIO *
b
);

591 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

592 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

593 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

595 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

596 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

597 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

598 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

600 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

601 
¨gl
,
ªt
);

603 
BIO_METHOD
 *
BIO_s_mem
();

604 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

605 
BIO_METHOD
 *
BIO_s_sockë
();

606 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

607 
BIO_METHOD
 *
BIO_s_ac˚±
();

608 
BIO_METHOD
 *
BIO_s_fd
();

609 #i‚de‡
OPENSSL_SYS_OS2


610 
BIO_METHOD
 *
BIO_s_log
();

612 
BIO_METHOD
 *
BIO_s_bio
();

613 
BIO_METHOD
 *
BIO_s_nuŒ
();

614 
BIO_METHOD
 *
BIO_f_nuŒ
();

615 
BIO_METHOD
 *
BIO_f_buf„r
();

616 #ifde‡
OPENSSL_SYS_VMS


617 
BIO_METHOD
 *
BIO_f_löebuf„r
();

619 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

620 #i‚de‡
OPENSSL_NO_DGRAM


621 
BIO_METHOD
 *
BIO_s_d©agøm
();

626 
BIO_sock_should_ªåy
(
i
);

627 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

628 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

630 
BIO_fd_should_ªåy
(
i
);

631 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

632 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

633 *
u
, c⁄° *
s
, 
Àn
);

634 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

635 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

636 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

637 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

638 #i‚de‡
OPENSSL_NO_FP_API


639 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

640 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

642 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

651 
BIO_sock_îr‹
(
sock
);

652 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

653 
BIO_sockë_nbio
(
fd
,
mode
);

654 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

655 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

656 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

657 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

658 
BIO_sock_öô
();

659 
BIO_sock_˛ónup
();

660 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

662 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

663 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

664 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

665 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

666 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

668 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

669 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

675 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

679 #ifde‡
__GNUC__


680 
	#__bio_h__©å__
 
__©åibuã__


	)

682 
	#__bio_h__©å__
(
x
)

	)

684 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

685 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

686 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

687 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

688 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

689 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

690 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

691 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

692 #unde‡
__bio_h__©å__


698 
ERR_lﬂd_BIO_°rögs
();

703 
	#BIO_F_ACPT_STATE
 100

	)

704 
	#BIO_F_BIO_ACCEPT
 101

	)

705 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

706 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

707 
	#BIO_F_BIO_CTRL
 103

	)

708 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

709 
	#BIO_F_BIO_GETS
 104

	)

710 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

711 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

712 
	#BIO_F_BIO_GET_PORT
 107

	)

713 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

714 
	#BIO_F_BIO_NEW
 108

	)

715 
	#BIO_F_BIO_NEW_FILE
 109

	)

716 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

717 
	#BIO_F_BIO_NREAD
 123

	)

718 
	#BIO_F_BIO_NREAD0
 124

	)

719 
	#BIO_F_BIO_NWRITE
 125

	)

720 
	#BIO_F_BIO_NWRITE0
 122

	)

721 
	#BIO_F_BIO_PUTS
 110

	)

722 
	#BIO_F_BIO_READ
 111

	)

723 
	#BIO_F_BIO_SOCK_INIT
 112

	)

724 
	#BIO_F_BIO_WRITE
 113

	)

725 
	#BIO_F_BUFFER_CTRL
 114

	)

726 
	#BIO_F_CONN_CTRL
 127

	)

727 
	#BIO_F_CONN_STATE
 115

	)

728 
	#BIO_F_FILE_CTRL
 116

	)

729 
	#BIO_F_FILE_READ
 130

	)

730 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

731 
	#BIO_F_MEM_READ
 128

	)

732 
	#BIO_F_MEM_WRITE
 117

	)

733 
	#BIO_F_SSL_NEW
 118

	)

734 
	#BIO_F_WSASTARTUP
 119

	)

737 
	#BIO_R_ACCEPT_ERROR
 100

	)

738 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

739 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

740 
	#BIO_R_BROKEN_PIPE
 124

	)

741 
	#BIO_R_CONNECT_ERROR
 103

	)

742 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

743 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

744 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

745 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

746 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

747 
	#BIO_R_INVALID_ARGUMENT
 125

	)

748 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

749 
	#BIO_R_IN_USE
 123

	)

750 
	#BIO_R_KEEPALIVE
 109

	)

751 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

752 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

753 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

754 
	#BIO_R_NO_PORT_DEFINED
 113

	)

755 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

756 
	#BIO_R_NO_SUCH_FILE
 128

	)

757 
	#BIO_R_NULL_PARAMETER
 115

	)

758 
	#BIO_R_TAG_MISMATCH
 116

	)

759 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

760 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

761 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

762 
	#BIO_R_UNINITIALIZED
 120

	)

763 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

764 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

765 
	#BIO_R_WSASTARTUP
 122

	)

767 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<›ís¶/os¶_typ.h
>

133 
	~<›ís¶/¸y±o.h
>

135 #ifde‡ 
__˝lu•lus


151 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


152 
	#BN_MUL_COMBA


	)

153 
	#BN_SQR_COMBA


	)

154 
	#BN_RECURSION


	)

168 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

169 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

170 #i‚de‡
BN_DIV2W


171 
	#BN_DIV2W


	)

178 #ifde‡
SIXTY_FOUR_BIT_LONG


179 
	#BN_ULLONG
 

	)

180 
	#BN_ULONG
 

	)

181 
	#BN_LONG
 

	)

182 
	#BN_BITS
 128

	)

183 
	#BN_BYTES
 8

	)

184 
	#BN_BITS2
 64

	)

185 
	#BN_BITS4
 32

	)

186 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

187 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

188 
	#BN_MASK2l
 (0xffffffffL)

	)

189 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

190 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

191 
	#BN_TBIT
 (0x8000000000000000L)

	)

192 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

193 
	#BN_DEC_FMT1
 "%lu"

	)

194 
	#BN_DEC_FMT2
 "%019lu"

	)

195 
	#BN_DEC_NUM
 19

	)

196 
	#BN_HEX_FMT1
 "%lX"

	)

197 
	#BN_HEX_FMT2
 "%016lX"

	)

205 #ifde‡
SIXTY_FOUR_BIT


206 #unde‡
BN_LLONG


207 #unde‡
BN_ULLONG


208 
	#BN_ULONG
 

	)

209 
	#BN_LONG
 

	)

210 
	#BN_BITS
 128

	)

211 
	#BN_BYTES
 8

	)

212 
	#BN_BITS2
 64

	)

213 
	#BN_BITS4
 32

	)

214 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

215 
	#BN_MASK2l
 (0xffffffffL)

	)

216 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

217 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

218 
	#BN_TBIT
 (0x8000000000000000LL)

	)

219 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

220 
	#BN_DEC_FMT1
 "%Œu"

	)

221 
	#BN_DEC_FMT2
 "%019Œu"

	)

222 
	#BN_DEC_NUM
 19

	)

223 
	#BN_HEX_FMT1
 "%ŒX"

	)

224 
	#BN_HEX_FMT2
 "%016ŒX"

	)

227 #ifde‡
THIRTY_TWO_BIT


228 #ifde‡
BN_LLONG


229 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

230 
	#BN_ULLONG
 
__öt64


	)

231 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

233 
	#BN_ULLONG
 

	)

234 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

237 
	#BN_ULONG
 

	)

238 
	#BN_LONG
 

	)

239 
	#BN_BITS
 64

	)

240 
	#BN_BYTES
 4

	)

241 
	#BN_BITS2
 32

	)

242 
	#BN_BITS4
 16

	)

243 
	#BN_MASK2
 (0xffffffffL)

	)

244 
	#BN_MASK2l
 (0xffff)

	)

245 
	#BN_MASK2h1
 (0xffff8000L)

	)

246 
	#BN_MASK2h
 (0xffff0000L)

	)

247 
	#BN_TBIT
 (0x80000000L)

	)

248 
	#BN_DEC_CONV
 (1000000000L)

	)

249 
	#BN_DEC_FMT1
 "%u"

	)

250 
	#BN_DEC_FMT2
 "%09u"

	)

251 
	#BN_DEC_NUM
 9

	)

252 
	#BN_HEX_FMT1
 "%X"

	)

253 
	#BN_HEX_FMT2
 "%08X"

	)

264 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

265 #i‡
__INITIAL_POINTER_SIZE
 == 64

266 
	#PTR_SIZE_INT
 

	)

268 
	#PTR_SIZE_INT
 

	)

271 
	#PTR_SIZE_INT
 
size_t


	)

274 
	#BN_DEFAULT_BITS
 1280

	)

276 
	#BN_FLG_MALLOCED
 0x01

	)

277 
	#BN_FLG_STATIC_DATA
 0x02

	)

278 
	#BN_FLG_CONSTTIME
 0x04

	)

284 #i‚de‡
OPENSSL_NO_DEPRECATED


285 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

290 #i‚de‡
OPENSSL_NO_DEPRECATED


291 
	#BN_FLG_FREE
 0x8000

	)

293 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

294 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

298 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

299 (
de°
)->
t›
=(
b
)->top, \

300 (
de°
)->
dmax
=(
b
)->dmax, \

301 (
de°
)->
√g
=(
b
)->neg, \

302 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

303 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

304 | 
BN_FLG_STATIC_DATA
 \

305 | (
n
)))

	)

309 
bignum_°
 
	tBIGNUM
;

311 
bignum_˘x
 
	tBN_CTX
;

312 
bn_blödög_°
 
	tBN_BLINDING
;

313 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

314 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

315 
bn_gícb_°
 
	tBN_GENCB
;

318 
	sbignum_°


320 
BN_ULONG
 *
d
;

321 
t›
;

323 
dmax
;

324 
√g
;

325 
Êags
;

329 
	sbn_m⁄t_˘x_°


331 
ri
;

332 
BIGNUM
 
RR
;

333 
BIGNUM
 
N
;

334 
BIGNUM
 
Ni
;

336 
BN_ULONG
 
n0
[2];

338 
Êags
;

344 
	sbn_ª˝_˘x_°


346 
BIGNUM
 
N
;

347 
BIGNUM
 
Nr
;

348 
num_bôs
;

349 
shi·
;

350 
Êags
;

354 
	sbn_gícb_°


356 
vî
;

357 *
¨g
;

361 (*
cb_1
)(, , *);

363 (*
cb_2
)(, , 
BN_GENCB
 *);

364 } 
cb
;

367 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

369 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

370 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

371 
tmp_gícb
->
vî
 = 1; \

372 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

373 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

375 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

376 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

377 
tmp_gícb
->
vî
 = 2; \

378 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

379 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

381 
	#BN_¥ime_checks
 0

	)

389 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

390 (
b
) >= 850 ? 3 : \

391 (
b
) >= 650 ? 4 : \

392 (
b
) >= 550 ? 5 : \

393 (
b
) >= 450 ? 6 : \

394 (
b
) >= 400 ? 7 : \

395 (
b
) >= 350 ? 8 : \

396 (
b
) >= 300 ? 9 : \

397 (
b
) >= 250 ? 12 : \

398 (
b
) >= 200 ? 15 : \

399 (
b
) >= 150 ? 18 : \

400  27)

	)

402 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

405 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

406 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

407 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

408 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

409 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

410 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

412 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

413 
	#BN_zîo_ex
(
a
) \

415 
BIGNUM
 *
_tmp_bn
 = (
a
); \

416 
_tmp_bn
->
t›
 = 0; \

417 
_tmp_bn
->
√g
 = 0; \

418 } 0)

	)

419 #ifde‡
OPENSSL_NO_DEPRECATED


420 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

422 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

425 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

426 * 
	`BN_›ti⁄s
();

427 
BN_CTX
 *
	`BN_CTX_√w
();

428 #i‚de‡
OPENSSL_NO_DEPRECATED


429 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

431 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

432 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

433 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

434 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

435 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

436 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

438 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

440 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

441 
BIGNUM
 *
	`BN_√w
();

442 
	`BN_öô
(
BIGNUM
 *);

443 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

444 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

445 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

446 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

447 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

448 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

449 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

450 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

451 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

455 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

460 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

465 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

467 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

468 
BN_CTX
 *
˘x
);

469 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

470 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

471 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

473 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

474 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

475 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

477 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

480 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

481 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

483 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

484 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

486 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

491 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

492 
	`BN_‰ì
(
BIGNUM
 *
a
);

493 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

494 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

495 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

496 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

498 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

499 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

500 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

501 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

502 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

503 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

504 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

505 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

506 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

507 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

508 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

509 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

510 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

512 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

513 #i‚de‡
OPENSSL_NO_FP_API


514 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

516 #ifde‡
HEADER_BIO_H


517 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

519 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

521 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

522 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

523 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

524 
	`BN_˛ór
(
BIGNUM
 *
a
);

525 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

526 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

527 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

528 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

529 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

530 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

531 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

532 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

535 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

537 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

538 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

539 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

542 #i‚de‡
OPENSSL_NO_DEPRECATED


543 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

544 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

545 (*
ˇŒback
)(,,*),*
cb_¨g
);

546 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

547 (*
ˇŒback
)(,,*),

548 
BN_CTX
 *
˘x
,*
cb_¨g
);

549 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

550 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

551 
do_åül_divisi⁄
);

555 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

556 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

557 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

558 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

559 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

561 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

563 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

564 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

565 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

566 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

567 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

568 c⁄° 
BIGNUM
 *
Xp
,

569 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

570 
BN_GENCB
 *
cb
);

572 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

573 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

574 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

575 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

576 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

577 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

578 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

579 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

580 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

581 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

582 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

583 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

584 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

587 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

588 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

590 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

591 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

592 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

593 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

594 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

595 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

596 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

597 #i‚de‡
OPENSSL_NO_DEPRECATED


598 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

599 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

601 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

602 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

603 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

604 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

605 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

606 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

607 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

608 
BN_MONT_CTX
 *
m_˘x
);

610 #i‚de‡
OPENSSL_NO_DEPRECATED


611 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

612 
	`BN_gë_∑øms
(
which
);

615 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

616 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

617 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

618 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

619 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

620 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

621 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

622 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

623 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

624 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

635 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

636 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

637 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

638 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

639 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

640 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

641 
BN_CTX
 *
˘x
);

642 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

643 
BN_CTX
 *
˘x
);

644 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

645 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

646 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

647 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

648 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

649 
BN_CTX
 *
˘x
);

650 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

651 
BN_CTX
 *
˘x
);

652 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

658 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

660 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

661 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

662 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

663 
BN_CTX
 *
˘x
);

664 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

665 
BN_CTX
 *
˘x
);

666 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

667 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

668 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

669 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

670 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

671 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

672 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

673 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

674 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

675 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

679 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

680 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

681 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

682 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

683 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

685 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

686 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

687 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

688 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

689 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

693 
	#bn_ex∑nd
(
a
,
bôs
Ë((((((bôs+
BN_BITS2
-1))/BN_BITS2)Ë<◊)->
dmax
)?\

694 (
a
):
	`bn_ex∑nd2
(◊),(
bôs
+
BN_BITS2
-1)/BN_BITS2))

	)

695 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

696 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

697 #i‚de‡
OPENSSL_NO_DEPRECATED


698 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

729 #ifde‡
BN_DEBUG


732 
	~<as£π.h
>

734 #ifde‡
BN_DEBUG_RAND


736 #i‚de‡
RAND_p£udo_byãs


737 
	`RAND_p£udo_byãs
(*
buf
,
num
);

738 
	#BN_DEBUG_TRIX


	)

740 
	#bn_pﬁluã
(
a
) \

742 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

743 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

744 
_tmp_ch¨
; \

748 
BN_ULONG
 *
_nŸ_c⁄°
; \

749 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

750 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

751 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

752 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

754 } 0)

	)

755 #ifde‡
BN_DEBUG_TRIX


756 #unde‡
RAND_p£udo_byãs


759 
	#bn_pﬁluã
(
a
)

	)

761 
	#bn_check_t›
(
a
) \

763 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

764 i‡(
_bnum2
 !
NULL
) { \

765 
	`as£π
((
_bnum2
->
t›
 == 0) || \

766 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

767 
	`bn_pﬁluã
(
_bnum2
); \

769 } 0)

	)

771 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

775 
	#bn_pﬁluã
(
a
)

	)

776 
	#bn_check_t›
(
a
)

	)

777 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

781 
	#bn_c‹ª˘_t›
(
a
) \

783 
BN_ULONG
 *
·l
; \

784 
tmp_t›
 = (
a
)->
t›
; \

785 i‡(
tmp_t›
 > 0) \

787 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

788 i‡(*(
·l
--)) ; \

789 (
a
)->
t›
 = 
tmp_t›
; \

791 
	`bn_pﬁluã
(
a
); \

792 }

	)

794 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

795 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

796 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

797 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

798 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

799 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

802 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

803 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

806 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

807 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

808 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

809 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

810 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

811 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

813 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

819 
	`ERR_lﬂd_BN_°rögs
();

824 
	#BN_F_BNRAND
 127

	)

825 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

826 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

827 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

828 
	#BN_F_BN_BLINDING_NEW
 102

	)

829 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

830 
	#BN_F_BN_BN2DEC
 104

	)

831 
	#BN_F_BN_BN2HEX
 105

	)

832 
	#BN_F_BN_CTX_GET
 116

	)

833 
	#BN_F_BN_CTX_NEW
 106

	)

834 
	#BN_F_BN_CTX_START
 129

	)

835 
	#BN_F_BN_DIV
 107

	)

836 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

837 
	#BN_F_BN_DIV_RECP
 130

	)

838 
	#BN_F_BN_EXP
 123

	)

839 
	#BN_F_BN_EXPAND2
 108

	)

840 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

841 
	#BN_F_BN_GF2M_MOD
 131

	)

842 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

843 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

844 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

845 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

846 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

847 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

848 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

849 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

850 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

851 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

852 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

853 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

854 
	#BN_F_BN_MOD_INVERSE
 110

	)

855 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

856 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

857 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

858 
	#BN_F_BN_MOD_SQRT
 121

	)

859 
	#BN_F_BN_MPI2BN
 112

	)

860 
	#BN_F_BN_NEW
 113

	)

861 
	#BN_F_BN_RAND
 114

	)

862 
	#BN_F_BN_RAND_RANGE
 122

	)

863 
	#BN_F_BN_USUB
 115

	)

866 
	#BN_R_ARG2_LT_ARG3
 100

	)

867 
	#BN_R_BAD_RECIPROCAL
 101

	)

868 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

869 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

870 
	#BN_R_DIV_BY_ZERO
 103

	)

871 
	#BN_R_ENCODING_ERROR
 104

	)

872 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

873 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

874 
	#BN_R_INVALID_LENGTH
 106

	)

875 
	#BN_R_INVALID_RANGE
 115

	)

876 
	#BN_R_NOT_A_SQUARE
 111

	)

877 
	#BN_R_NOT_INITIALIZED
 107

	)

878 
	#BN_R_NO_INVERSE
 108

	)

879 
	#BN_R_NO_SOLUTION
 116

	)

880 
	#BN_R_P_IS_NOT_PRIME
 112

	)

881 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

882 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

884 #ifde‡ 
__˝lu•lus


885 
	}
}

	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

551 #ifde‡
OPENSSL_FIPS


552 
	#FIPS_ERROR_IGNORED
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

553 
Æg
 "Öªviou†FIPS f‹biddíálg‹ôhmÉº‹ ign‹ed");

	)

555 
	#FIPS_BAD_ABORT
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

556 #Æg " Alg‹ôhm f‹biddí i¿FIPS mode");

	)

558 #ifde‡
OPENSSL_FIPS_STRICT


559 
	#FIPS_BAD_ALGORITHM
(
Æg
Ë
	`FIPS_BAD_ABORT
◊lg)

	)

561 
	#FIPS_BAD_ALGORITHM
(
Æg
) \

563 
	`FIPSîr
(
FIPS_F_HASH_FINAL
,
FIPS_R_NON_FIPS_METHOD
); \

564 
	`ERR_add_îr‹_d©a
(2, "Algorithm=", #alg); \

566 }

	)

571 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

572 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
) \

574 i‡(
	`FIPS_mode
()) \

575 
	`FIPS_BAD_ALGORITHM
(
Æg
) \

576  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

578 
¥iv©e_
##
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

585 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

586 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
) \

588 i‡(
	`FIPS_mode
()) \

589 
	`FIPS_BAD_ABORT
(
Æg
) \

590 
¥iv©e_
##
Æg
##
	`_£t_key
(
key
, 
Àn
, 
d©a
); \

592 
¥iv©e_
##
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, \

593 c⁄° *
d©a
)

	)

597 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

598 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
)

	)

600 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

601 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

609 
ERR_lﬂd_CRYPTO_°rögs
();

611 
	#OPENSSL_HAVE_INIT
 1

	)

612 
OPENSSL_öô_libøry
();

617 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

618 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

619 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

620 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

621 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

622 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

623 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

624 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

625 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

628 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

630 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

82 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

83 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

91 #ifde‡ 
__˝lu•lus


99 
	sdh_mëhod


101 c⁄° *
«me
;

103 (*
gíî©e_key
)(
DH
 *
dh
);

104 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

105 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

106 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

107 
BN_MONT_CTX
 *
m_˘x
);

109 (*
öô
)(
DH
 *
dh
);

110 (*
föish
)(
DH
 *
dh
);

111 
Êags
;

112 *
≠p_d©a
;

114 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

117 
	sdh_°


121 
∑d
;

122 
vîsi⁄
;

123 
BIGNUM
 *
p
;

124 
BIGNUM
 *
g
;

125 
Àngth
;

126 
BIGNUM
 *
pub_key
;

127 
BIGNUM
 *
¥iv_key
;

129 
Êags
;

130 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

132 
BIGNUM
 *
q
;

133 
BIGNUM
 *
j
;

134 *
£ed
;

135 
£edÀn
;

136 
BIGNUM
 *
cou¡î
;

138 
ª„ªn˚s
;

139 
CRYPTO_EX_DATA
 
ex_d©a
;

140 c⁄° 
DH_METHOD
 *
mëh
;

141 
ENGINE
 *
ígöe
;

144 
	#DH_GENERATOR_2
 2

	)

146 
	#DH_GENERATOR_5
 5

	)

149 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

150 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

151 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

152 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

155 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

156 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

160 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

162 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

163 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

164 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

165 (*)(
x
))

	)

166 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

167 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

169 
DH
 *
DH∑øms_dup
(DH *);

171 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

173 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

174 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

175 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

176 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

178 
DH
 * 
DH_√w
();

179 
DH_‰ì
(
DH
 *
dh
);

180 
DH_up_ªf
(
DH
 *
dh
);

181 
DH_size
(c⁄° 
DH
 *
dh
);

182 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

183 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

184 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

185 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

188 #i‚de‡
OPENSSL_NO_DEPRECATED


189 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

190 (*
ˇŒback
)(,,*),*
cb_¨g
);

194 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

196 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

197 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

198 
DH_gíî©e_key
(
DH
 *
dh
);

199 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

200 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

201 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

202 #i‚de‡
OPENSSL_NO_FP_API


203 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

205 #i‚de‡
OPENSSL_NO_BIO


206 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

208 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

211 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

212 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

213 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

215 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

216 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

217 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

219 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

220 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

227 
ERR_lﬂd_DH_°rögs
();

232 
	#DH_F_COMPUTE_KEY
 102

	)

233 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

234 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

235 
	#DH_F_DH_NEW_METHOD
 105

	)

236 
	#DH_F_DH_PARAM_DECODE
 107

	)

237 
	#DH_F_DH_PRIV_DECODE
 110

	)

238 
	#DH_F_DH_PRIV_ENCODE
 111

	)

239 
	#DH_F_DH_PUB_DECODE
 108

	)

240 
	#DH_F_DH_PUB_ENCODE
 109

	)

241 
	#DH_F_DO_DH_PRINT
 100

	)

242 
	#DH_F_GENERATE_KEY
 103

	)

243 
	#DH_F_GENERATE_PARAMETERS
 104

	)

244 
	#DH_F_PKEY_DH_DERIVE
 112

	)

245 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

246 
	#DH_F_DH_COMPUTE_KEY
 114

	)

247 
	#DH_F_DH_GENERATE_KEY
 115

	)

250 
	#DH_R_BAD_GENERATOR
 101

	)

251 
	#DH_R_BN_DECODE_ERROR
 109

	)

252 
	#DH_R_BN_ERROR
 106

	)

253 
	#DH_R_DECODE_ERROR
 104

	)

254 
	#DH_R_INVALID_PUBKEY
 102

	)

255 
	#DH_R_KEYS_NOT_SET
 108

	)

256 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

257 
	#DH_R_NO_PARAMETERS_SET
 107

	)

258 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

259 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

260 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

262 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

93 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

94 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

108 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

115 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

117 #ifde‡ 
__˝lu•lus


125 
	sDSA_SIG_°


127 
BIGNUM
 *
r
;

128 
BIGNUM
 *
s
;

129 } 
	tDSA_SIG
;

131 
	sdß_mëhod


133 c⁄° *
«me
;

134 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

135 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

136 
BIGNUM
 **
Ω
);

137 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

138 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

139 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

140 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

141 
BN_MONT_CTX
 *
ö_m⁄t
);

142 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

143 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

144 
BN_MONT_CTX
 *
m_˘x
);

145 (*
öô
)(
DSA
 *
dß
);

146 (*
föish
)(
DSA
 *
dß
);

147 
Êags
;

148 *
≠p_d©a
;

150 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

151 c⁄° *
£ed
, 
£ed_Àn
,

152 *
cou¡î_ªt
, *
h_ªt
,

153 
BN_GENCB
 *
cb
);

155 (*
dß_keygí
)(
DSA
 *
dß
);

158 
	sdß_°


162 
∑d
;

163 
vîsi⁄
;

164 
wrôe_∑øms
;

165 
BIGNUM
 *
p
;

166 
BIGNUM
 *
q
;

167 
BIGNUM
 *
g
;

169 
BIGNUM
 *
pub_key
;

170 
BIGNUM
 *
¥iv_key
;

172 
BIGNUM
 *
köv
;

173 
BIGNUM
 *
r
;

175 
Êags
;

177 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

178 
ª„ªn˚s
;

179 
CRYPTO_EX_DATA
 
ex_d©a
;

180 c⁄° 
DSA_METHOD
 *
mëh
;

182 
ENGINE
 *
ígöe
;

185 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

186 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

187 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

188 (*)(
x
))

	)

189 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

190 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

193 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

194 
DSA_SIG
 * 
DSA_SIG_√w
();

195 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

196 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

197 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

199 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

200 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

201 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

203 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

205 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

206 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

207 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

209 
DSA
 * 
DSA_√w
();

210 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

211 
DSA_‰ì
 (
DSA
 *
r
);

213 
DSA_up_ªf
(
DSA
 *
r
);

214 
DSA_size
(c⁄° 
DSA
 *);

216 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

217 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

218 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

219 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

220 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

221 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

222 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

223 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

224 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

226 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

227 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

228 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

231 #i‚de‡
OPENSSL_NO_DEPRECATED


232 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

233 *
£ed
,
£ed_Àn
,

234 *
cou¡î_ªt
, *
h_ªt
,

235 (*
ˇŒback
)(, , *),*
cb_¨g
);

239 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

240 c⁄° *
£ed
,
£ed_Àn
,

241 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

243 
DSA_gíî©e_key
(
DSA
 *
a
);

244 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

245 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

246 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

248 #i‚de‡
OPENSSL_NO_BIO


249 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

250 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

252 #i‚de‡
OPENSSL_NO_FP_API


253 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

254 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

257 
	#DSS_¥ime_checks
 50

	)

260 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

261 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

263 #i‚de‡
OPENSSL_NO_DH


266 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

269 #ifde‡
OPENSSL_FIPS


270 
FIPS_dß_buûtö_∑ømgí
(
DSA
 *
ªt
, 
size_t
 
bôs
, size_à
qbôs
,

271 c⁄° 
EVP_MD
 *
evpmd
, c⁄° *
£ed_ö
, 
size_t
 
£ed_Àn
,

272 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

273 
FIPS_dß_gíî©e_pq
(
BN_CTX
 *
˘x
, 
size_t
 
bôs
, size_à
qbôs
,

274 c⁄° 
EVP_MD
 *
evpmd
, *
£ed
, 
£ed_Àn
,

275 
BIGNUM
 **
p_ªt
, BIGNUM **
q_ªt
, *
cou¡î_ªt
, 
BN_GENCB
 *
cb
);

276 
FIPS_dß_gíî©e_g
(
BN_CTX
 *
˘x
, 
BIGNUM
 *
p
, BIGNUM *
q
,

277 
BIGNUM
 **
g_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

280 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

281 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

282 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

284 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

285 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

286 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

292 
ERR_lﬂd_DSA_°rögs
();

297 
	#DSA_F_D2I_DSA_SIG
 110

	)

298 
	#DSA_F_DO_DSA_PRINT
 104

	)

299 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

300 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

301 
	#DSA_F_DSA_BUILTIN_KEYGEN
 124

	)

302 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 123

	)

303 
	#DSA_F_DSA_DO_SIGN
 112

	)

304 
	#DSA_F_DSA_DO_VERIFY
 113

	)

305 
	#DSA_F_DSA_GENERATE_PARAMETERS
 125

	)

306 
	#DSA_F_DSA_NEW_METHOD
 103

	)

307 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

308 
	#DSA_F_DSA_PRINT_FP
 105

	)

309 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

310 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

311 
	#DSA_F_DSA_PUB_DECODE
 117

	)

312 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

313 
	#DSA_F_DSA_SIGN
 106

	)

314 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

315 
	#DSA_F_DSA_SIG_NEW
 109

	)

316 
	#DSA_F_DSA_VERIFY
 108

	)

317 
	#DSA_F_I2D_DSA_SIG
 111

	)

318 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

319 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

320 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

321 
	#DSA_F_SIG_CB
 114

	)

324 
	#DSA_R_BAD_Q_VALUE
 102

	)

325 
	#DSA_R_BN_DECODE_ERROR
 108

	)

326 
	#DSA_R_BN_ERROR
 109

	)

327 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

328 
	#DSA_R_DECODE_ERROR
 104

	)

329 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

330 
	#DSA_R_KEY_SIZE_INVALID
 113

	)

331 
	#DSA_R_KEY_SIZE_TOO_SMALL
 110

	)

332 
	#DSA_R_MISSING_PARAMETERS
 101

	)

333 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

334 
	#DSA_R_NON_FIPS_METHOD
 111

	)

335 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

336 
	#DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 112

	)

337 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

339 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 
	~<sys/time.h
>

78 #ifde‡ 
__˝lu•lus


82 
	#DTLS1_VERSION
 0xFEFF

	)

83 
	#DTLS1_BAD_VER
 0x0100

	)

87 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

91 
	#DTLS1_COOKIE_LENGTH
 256

	)

93 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

95 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

97 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

98 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

100 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

102 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


103 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

105 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

109 
	sdés1_bôm≠_°


111 
m≠
;

113 
max_£q_num
[8];

116 } 
	tDTLS1_BITMAP
;

118 
	sdés1_ªå™smô_°©e


120 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

121 
EVP_MD_CTX
 *
wrôe_hash
;

122 #i‚de‡
OPENSSL_NO_COMP


123 
COMP_CTX
 *
com¥ess
;

125 *
com¥ess
;

127 
SSL_SESSION
 *
£ssi⁄
;

128 
ïoch
;

131 
	shm_hódî_°


133 
ty≥
;

134 
msg_Àn
;

135 
£q
;

136 
‰ag_off
;

137 
‰ag_Àn
;

138 
is_ccs
;

139 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

142 
	sccs_hódî_°


144 
ty≥
;

145 
£q
;

148 
	sdés1_timeout_°


151 
ªad_timeouts
;

154 
wrôe_timeouts
;

157 
num_Æîts
;

160 
	sªc‹d_pqueue_°


162 
ïoch
;

163 
pqueue
 
q
;

164 } 
	tªc‹d_pqueue
;

166 
	shm_‰agmít_°


168 
hm_hódî_°
 
msg_hódî
;

169 *
‰agmít
;

170 *
ªas£mbly
;

171 } 
	thm_‰agmít
;

173 
	sdés1_°©e_°


175 
£nd_cookõ
;

176 
cookõ
[
DTLS1_COOKIE_LENGTH
];

177 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

178 
cookõ_Àn
;

185 
r_ïoch
;

186 
w_ïoch
;

189 
DTLS1_BITMAP
 
bôm≠
;

192 
DTLS1_BITMAP
 
√xt_bôm≠
;

195 
h™dshake_wrôe_£q
;

196 
√xt_h™dshake_wrôe_£q
;

198 
h™dshake_ªad_£q
;

201 
œ°_wrôe_£quí˚
[8];

204 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

205 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

208 
pqueue
 
buf„ªd_mesßges
;

211 
pqueue
 
£¡_mesßges
;

218 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

220 
mtu
;

222 
hm_hódî_°
 
w_msg_hdr
;

223 
hm_hódî_°
 
r_msg_hdr
;

225 
dés1_timeout_°
 
timeout
;

228 
timevÆ
 
√xt_timeout
;

231 
timeout_duøti⁄
;

235 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

236 
Æît_‰agmít_Àn
;

237 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

238 
h™dshake_‰agmít_Àn
;

240 
ªå™smôtög
;

241 
ch™ge_cùhî_•ec_ok
;

244 
li°í
;

246 } 
	tDTLS1_STATE
;

248 
	sdés1_ªc‹d_d©a_°


250 *
∑ckë
;

251 
∑ckë_Àngth
;

252 
SSL3_BUFFER
 
rbuf
;

253 
SSL3_RECORD
 
ºec
;

254 } 
	tDTLS1_RECORD_DATA
;

258 
	#DTLS1_TMO_READ_COUNT
 2

	)

259 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

261 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

263 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #ifde‡
OPENSSL_SYSNAME_VOS


197 
	#OPENSSL_SYS_VOS


	)

201 #ifde‡
OPENSSL_SYSNAME_VXWORKS


202 
	#OPENSSL_SYS_VXWORKS


	)

206 #i‡
deföed
(
__BEOS__
)

207 
	#OPENSSL_SYS_BEOS


	)

208 
	~<sys/sockë.h
>

209 #i‡
deföed
(
BONE_VERSION
)

210 
	#OPENSSL_SYS_BEOS_BONE


	)

212 
	#OPENSSL_SYS_BEOS_R5


	)

222 #ifde‡
OPENSSL_SYS_MSDOS


223 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

224 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

226 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

227 
	#OPENSSL_DECLARE_EXIT


	)

249 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

250 
	#OPENSSL_EXPORT
 
globÆªf


	)

251 
	#OPENSSL_IMPORT
 
globÆªf


	)

252 
	#OPENSSL_GLOBAL
 
globÆdef


	)

253 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

254 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

255 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

256 
	#OPENSSL_GLOBAL


	)

258 
	#OPENSSL_EXPORT
 

	)

259 
	#OPENSSL_IMPORT
 

	)

260 
	#OPENSSL_GLOBAL


	)

262 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

274 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


275 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

276 
ty≥
 *
_shadow_
##
	`«me
() \

277 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

278 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

279 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

282 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

283 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

286 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/fips.h

50 
	~<›ís¶/›ís¶c⁄f.h
>

52 #i‚de‡
OPENSSL_FIPS


53 #îr‹ 
FIPS
 
is
 
dißbÀd
.

56 #ifde‡
OPENSSL_FIPS


58 #ifde‡ 
__˝lu•lus


62 
dß_°
;

63 
evp_pkey_°
;

64 
ív_md_°
;

65 
evp_cùhî_°
;

66 
evp_cùhî_˘x_°
;

68 
FIPS_mode_£t
(
⁄off
);

69 
FIPS_mode
();

70 c⁄° *
FIPS_ønd_check
();

71 
FIPS_£l·e°_Áûed
();

72 
FIPS_£l·e°_check
();

73 
FIPS_c‹ru±_sha1
();

74 
FIPS_£l·e°_sha1
();

75 
FIPS_c‹ru±_´s
();

76 
FIPS_£l·e°_´s
();

77 
FIPS_c‹ru±_des
();

78 
FIPS_£l·e°_des
();

79 
FIPS_c‹ru±_rß
();

80 
FIPS_c‹ru±_rß_keygí
();

81 
FIPS_£l·e°_rß
();

82 
FIPS_c‹ru±_dß
();

83 
FIPS_c‹ru±_dß_keygí
();

84 
FIPS_£l·e°_dß
();

85 
FIPS_c‹ru±_∫g
();

86 
FIPS_∫g_°ick
();

87 
FIPS_£l·e°_∫g
();

88 
FIPS_£l·e°_hmac
();

90 
fùs_pkey_sig«tuª_ã°
(
evp_pkey_°
 *
pkey
,

91 c⁄° *
tbs
, 
tb¶í
,

92 c⁄° *
k©
, 
k©Àn
,

93 c⁄° 
ív_md_°
 *
dige°
, 
md_Êags
,

94 c⁄° *
Áû_°r
);

96 
fùs_cùhî_ã°
(
evp_cùhî_˘x_°
 *
˘x
,

97 c⁄° 
evp_cùhî_°
 *
cùhî
,

98 c⁄° *
key
,

99 c⁄° *
iv
,

100 c⁄° *
∂aöãxt
,

101 c⁄° *
cùhîãxt
,

102 
Àn
);

108 
ERR_lﬂd_FIPS_°rögs
();

113 
	#FIPS_F_DH_BUILTIN_GENPARAMS
 100

	)

114 
	#FIPS_F_DSA_BUILTIN_PARAMGEN
 101

	)

115 
	#FIPS_F_DSA_DO_SIGN
 102

	)

116 
	#FIPS_F_DSA_DO_VERIFY
 103

	)

117 
	#FIPS_F_EVP_CIPHERINIT_EX
 124

	)

118 
	#FIPS_F_EVP_DIGESTINIT_EX
 125

	)

119 
	#FIPS_F_FIPS_CHECK_DSA
 104

	)

120 
	#FIPS_F_FIPS_CHECK_INCORE_FINGERPRINT
 105

	)

121 
	#FIPS_F_FIPS_CHECK_RSA
 106

	)

122 
	#FIPS_F_FIPS_DSA_CHECK
 107

	)

123 
	#FIPS_F_FIPS_MODE_SET
 108

	)

124 
	#FIPS_F_FIPS_PKEY_SIGNATURE_TEST
 109

	)

125 
	#FIPS_F_FIPS_SELFTEST_AES
 110

	)

126 
	#FIPS_F_FIPS_SELFTEST_DES
 111

	)

127 
	#FIPS_F_FIPS_SELFTEST_DSA
 112

	)

128 
	#FIPS_F_FIPS_SELFTEST_HMAC
 113

	)

129 
	#FIPS_F_FIPS_SELFTEST_RNG
 114

	)

130 
	#FIPS_F_FIPS_SELFTEST_SHA1
 115

	)

131 
	#FIPS_F_HASH_FINAL
 123

	)

132 
	#FIPS_F_RSA_BUILTIN_KEYGEN
 116

	)

133 
	#FIPS_F_RSA_EAY_PRIVATE_DECRYPT
 117

	)

134 
	#FIPS_F_RSA_EAY_PRIVATE_ENCRYPT
 118

	)

135 
	#FIPS_F_RSA_EAY_PUBLIC_DECRYPT
 119

	)

136 
	#FIPS_F_RSA_EAY_PUBLIC_ENCRYPT
 120

	)

137 
	#FIPS_F_RSA_X931_GENERATE_KEY_EX
 121

	)

138 
	#FIPS_F_SSLEAY_RAND_BYTES
 122

	)

141 
	#FIPS_R_CANNOT_READ_EXE
 103

	)

142 
	#FIPS_R_CANNOT_READ_EXE_DIGEST
 104

	)

143 
	#FIPS_R_CONTRADICTING_EVIDENCE
 114

	)

144 
	#FIPS_R_EXE_DIGEST_DOES_NOT_MATCH
 105

	)

145 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH
 110

	)

146 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_NONPIC_RELOCATED
 111

	)

147 
	#FIPS_R_FINGERPRINT_DOES_NOT_MATCH_SEGMENT_ALIASING
 112

	)

148 
	#FIPS_R_FIPS_MODE_ALREADY_SET
 102

	)

149 
	#FIPS_R_FIPS_SELFTEST_FAILED
 106

	)

150 
	#FIPS_R_INVALID_KEY_LENGTH
 109

	)

151 
	#FIPS_R_KEY_TOO_SHORT
 108

	)

152 
	#FIPS_R_NON_FIPS_METHOD
 100

	)

153 
	#FIPS_R_PAIRWISE_TEST_FAILED
 107

	)

154 
	#FIPS_R_RSA_DECRYPT_ERROR
 115

	)

155 
	#FIPS_R_RSA_ENCRYPT_ERROR
 116

	)

156 
	#FIPS_R_SELFTEST_FAILED
 101

	)

157 
	#FIPS_R_TEST_FAILURE
 117

	)

158 
	#FIPS_R_UNSUPPORTED_PLATFORM
 113

	)

160 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

102 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

104 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

74 #ifde‡ 
__˝lu•lus


82 #ifde‡
KRB5_HEIMDAL


83 
	tkrb5_o˘ë
;

84 
	#FAR


	)

87 #i‚de‡
FAR


88 
	#FAR


	)

99 #i‚def 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #i‚def 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

107 #i‚de‡
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #i‚de‡
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #i‚de‡
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_îr_°
 {

121 
	gªas⁄
;

122 
	gãxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_˘x_°


133 *
	g£rvi˚_«me
;

134 *
	g£rvi˚_ho°
;

135 *
	g˛õ¡_¥öc
;

136 *
	gkeyèb_fûe
;

137 *
	g¸ed_ˇche
;

138 
krb5_í˘y≥
 
	gí˘y≥
;

139 
	gÀngth
;

140 
krb5_o˘ë
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

154 
KSSL_CTX
 *
ks¶_˘x_√w
();

155 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

156 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

157 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

158 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

159 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

160 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

161 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

162 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

163 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

164 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

165 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

167 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

168 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

169 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickë_times
 *
âimes
);

171 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

172 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

173 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

175 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

7 #ifde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


10 
	#›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	)

12 #i‡
deföed
(
__i386__
)

13 
	~"›ís¶c⁄f-i386.h
"

14 #ñi‡
deföed
(
__ü64__
)

15 
	~"›ís¶c⁄f-ü64.h
"

16 #ñi‡
deföed
(
__powîpc64__
)

17 
	~"›ís¶c⁄f-µc64.h
"

18 #ñi‡
deföed
(
__powîpc__
)

19 
	~"›ís¶c⁄f-µc.h
"

20 #ñi‡
deföed
(
__s390x__
)

21 
	~"›ís¶c⁄f-s390x.h
"

22 #ñi‡
deföed
(
__s390__
)

23 
	~"›ís¶c⁄f-s390.h
"

24 #ñi‡
deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

25 
	~"›ís¶c⁄f-•¨c64.h
"

26 #ñi‡
deföed
(
__•¨c__
)

27 
	~"›ís¶c⁄f-•¨c.h
"

28 #ñi‡
deföed
(
__x86_64__
)

29 
	~"›ís¶c⁄f-x86_64.h
"

34 #unde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
	tASN1_BOOLEAN
;

95 
	tASN1_NULL
;

98 
a¢1_p˘x_°
 
	tASN1_PCTX
;

100 #ifde‡
OPENSSL_SYS_WIN32


101 #unde‡
X509_NAME


102 #unde‡
X509_EXTENSIONS


103 #unde‡
X509_CERT_PAIR


104 #unde‡
PKCS7_ISSUER_AND_SERIAL


105 #unde‡
OCSP_REQUEST


106 #unde‡
OCSP_RESPONSE


109 #ifde‡
BIGNUM


110 #unde‡
BIGNUM


112 
bignum_°
 
	tBIGNUM
;

113 
bignum_˘x
 
	tBN_CTX
;

114 
bn_blödög_°
 
	tBN_BLINDING
;

115 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

116 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

117 
bn_gícb_°
 
	tBN_GENCB
;

119 
buf_mem_°
 
	tBUF_MEM
;

121 
evp_cùhî_°
 
	tEVP_CIPHER
;

122 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

123 
ív_md_°
 
	tEVP_MD
;

124 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

125 
evp_pkey_°
 
	tEVP_PKEY
;

127 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

129 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

130 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

132 
dh_°
 
	tDH
;

133 
dh_mëhod
 
	tDH_METHOD
;

135 
dß_°
 
	tDSA
;

136 
dß_mëhod
 
	tDSA_METHOD
;

138 
rß_°
 
	tRSA
;

139 
rß_mëh_°
 
	tRSA_METHOD
;

141 
ønd_mëh_°
 
	tRAND_METHOD
;

143 
ecdh_mëhod
 
	tECDH_METHOD
;

144 
ecdß_mëhod
 
	tECDSA_METHOD
;

146 
x509_°
 
	tX509
;

147 
X509_Æg‹_°
 
	tX509_ALGOR
;

148 
X509_¸l_°
 
	tX509_CRL
;

149 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

150 
x509_ªvoked_°
 
	tX509_REVOKED
;

151 
X509_«me_°
 
	tX509_NAME
;

152 
X509_pubkey_°
 
	tX509_PUBKEY
;

153 
x509_°‹e_°
 
	tX509_STORE
;

154 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

156 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

158 
v3_ext_˘x
 
	tX509V3_CTX
;

159 
c⁄f_°
 
	tCONF
;

161 
°‹e_°
 
	tSTORE
;

162 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

164 
ui_°
 
	tUI
;

165 
ui_mëhod_°
 
	tUI_METHOD
;

167 
°_ERR_FNS
 
	tERR_FNS
;

169 
ígöe_°
 
	tENGINE
;

170 
s¶_°
 
	tSSL
;

171 
s¶_˘x_°
 
	tSSL_CTX
;

173 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

174 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

175 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

176 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

178 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

179 
DIST_POINT_°
 
	tDIST_POINT
;

180 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

181 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

184 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

185 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

189 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

190 
	tidx
, 
	t¨gl
, *
	t¨gp
);

191 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

196 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

197 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

198 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

498 #i‚de‡
OPENSSL_NO_DH


500 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

504 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

506 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

508 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

509 *
k°r
, 
kÀn
,

510 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

511 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

512 *, , 
≥m_∑ssw‹d_cb
 *, *);

513 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

517 *
k°r
, 
kÀn
,

518 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

519 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

525 *
k°r
, 
kÀn
,

526 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

527 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

528 *
k°r
, 
kÀn
,

529 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

531 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

533 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

534 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

536 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

537 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

540 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

541 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

542 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

543 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

544 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

545 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

546 #i‚de‡
OPENSSL_NO_RC4


547 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

548 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

549 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

557 
ERR_lﬂd_PEM_°rögs
();

562 
	#PEM_F_B2I_DSS
 127

	)

563 
	#PEM_F_B2I_PVK_BIO
 128

	)

564 
	#PEM_F_B2I_RSA
 129

	)

565 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

566 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

567 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

568 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

569 
	#PEM_F_DO_B2I
 132

	)

570 
	#PEM_F_DO_B2I_BIO
 133

	)

571 
	#PEM_F_DO_BLOB_HEADER
 134

	)

572 
	#PEM_F_DO_PK8PKEY
 126

	)

573 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

574 
	#PEM_F_DO_PVK_BODY
 135

	)

575 
	#PEM_F_DO_PVK_HEADER
 136

	)

576 
	#PEM_F_I2B_PVK
 137

	)

577 
	#PEM_F_I2B_PVK_BIO
 138

	)

578 
	#PEM_F_LOAD_IV
 101

	)

579 
	#PEM_F_PEM_ASN1_READ
 102

	)

580 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

581 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

582 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

583 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

584 
	#PEM_F_PEM_DO_HEADER
 106

	)

585 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

586 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

587 
	#PEM_F_PEM_PK8PKEY
 119

	)

588 
	#PEM_F_PEM_READ
 108

	)

589 
	#PEM_F_PEM_READ_BIO
 109

	)

590 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

591 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

592 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

593 
	#PEM_F_PEM_SEALFINAL
 110

	)

594 
	#PEM_F_PEM_SEALINIT
 111

	)

595 
	#PEM_F_PEM_SIGNFINAL
 112

	)

596 
	#PEM_F_PEM_WRITE
 113

	)

597 
	#PEM_F_PEM_WRITE_BIO
 114

	)

598 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

599 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

600 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

601 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

604 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

605 
	#PEM_R_BAD_DECRYPT
 101

	)

606 
	#PEM_R_BAD_END_LINE
 102

	)

607 
	#PEM_R_BAD_IV_CHARS
 103

	)

608 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

609 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

610 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

611 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

612 
	#PEM_R_CIPHER_IS_NULL
 127

	)

613 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

614 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

615 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

616 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

617 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

618 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

619 
	#PEM_R_NOT_DEK_INFO
 105

	)

620 
	#PEM_R_NOT_ENCRYPTED
 106

	)

621 
	#PEM_R_NOT_PROC_TYPE
 107

	)

622 
	#PEM_R_NO_START_LINE
 108

	)

623 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

624 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

625 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

626 
	#PEM_R_PVK_TOO_SHORT
 125

	)

627 
	#PEM_R_READ_KEY
 111

	)

628 
	#PEM_R_SHORT_HEADER
 112

	)

629 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

630 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

631 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

633 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sønd_mëh_°


83 (*
£ed
)(c⁄° *
buf
, 
num
);

84 (*
byãs
)(*
buf
, 
num
);

85 (*
˛ónup
)();

86 (*
add
)(c⁄° *
buf
, 
num
, 
íå›y
);

87 (*
p£ud‹™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifde‡
BN_DEBUG


92 
ønd_¥edi˘abÀ
;

95 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

96 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

97 #i‚de‡
OPENSSL_NO_ENGINE


98 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

100 
RAND_METHOD
 *
RAND_SSLóy
();

101 
RAND_˛ónup
();

102 
RAND_byãs
(*
buf
,
num
);

103 
RAND_p£udo_byãs
(*
buf
,
num
);

104 
RAND_£ed
(c⁄° *
buf
,
num
);

105 
RAND_add
(c⁄° *
buf
,
num
,
íå›y
);

106 
RAND_lﬂd_fûe
(c⁄° *
fûe
,
max_byãs
);

107 
RAND_wrôe_fûe
(c⁄° *
fûe
);

108 c⁄° *
RAND_fûe_«me
(*
fûe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

111 
RAND_egd
(c⁄° *
∑th
);

112 
RAND_egd_byãs
(c⁄° *
∑th
,
byãs
);

113 
RAND_pﬁl
();

115 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

117 
RAND_s¸ìn
();

118 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

126 
ERR_lﬂd_RAND_°rögs
();

131 
	#RAND_F_ENG_RAND_GET_RAND_METHOD
 108

	)

132 
	#RAND_F_FIPS_RAND
 103

	)

133 
	#RAND_F_FIPS_RAND_BYTES
 102

	)

134 
	#RAND_F_FIPS_RAND_SET_DT
 106

	)

135 
	#RAND_F_FIPS_SET_DT
 104

	)

136 
	#RAND_F_FIPS_SET_PRNG_SEED
 107

	)

137 
	#RAND_F_FIPS_SET_TEST_MODE
 105

	)

138 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

139 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

142 
	#RAND_R_NON_FIPS_METHOD
 105

	)

143 
	#RAND_R_NOT_IN_TEST_MODE
 106

	)

144 
	#RAND_R_NO_KEY_SET
 107

	)

145 
	#RAND_R_PRNG_ASKING_FOR_TOO_MUCH
 101

	)

146 
	#RAND_R_PRNG_ERROR
 108

	)

147 
	#RAND_R_PRNG_KEYED
 109

	)

148 
	#RAND_R_PRNG_NOT_REKEYED
 102

	)

149 
	#RAND_R_PRNG_NOT_RESEEDED
 103

	)

150 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

151 
	#RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY
 110

	)

152 
	#RAND_R_PRNG_STUCK
 104

	)

154 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

83 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

90 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

92 #ifde‡ 
__˝lu•lus


100 
	srß_mëh_°


102 c⁄° *
«me
;

103 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

104 *
to
,

105 
RSA
 *
rß
,
∑ddög
);

106 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

107 *
to
,

108 
RSA
 *
rß
,
∑ddög
);

109 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

110 *
to
,

111 
RSA
 *
rß
,
∑ddög
);

112 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

113 *
to
,

114 
RSA
 *
rß
,
∑ddög
);

115 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

116 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

117 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

118 
BN_MONT_CTX
 *
m_˘x
);

119 (*
öô
)(
RSA
 *
rß
);

120 (*
föish
)(
RSA
 *
rß
);

121 
Êags
;

122 *
≠p_d©a
;

130 (*
rß_sign
)(
ty≥
,

131 c⁄° *
m
, 
m_Àngth
,

132 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

133 (*
rß_vîify
)(
dty≥
,

134 c⁄° *
m
, 
m_Àngth
,

135 c⁄° *
sigbuf
, 
sigÀn
,

136 c⁄° 
RSA
 *
rß
);

141 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

144 
	srß_°


148 
∑d
;

149 
vîsi⁄
;

150 c⁄° 
RSA_METHOD
 *
mëh
;

152 
ENGINE
 *
ígöe
;

153 
BIGNUM
 *
n
;

154 
BIGNUM
 *
e
;

155 
BIGNUM
 *
d
;

156 
BIGNUM
 *
p
;

157 
BIGNUM
 *
q
;

158 
BIGNUM
 *
dmp1
;

159 
BIGNUM
 *
dmq1
;

160 
BIGNUM
 *
iqmp
;

162 
CRYPTO_EX_DATA
 
ex_d©a
;

163 
ª„ªn˚s
;

164 
Êags
;

167 
BN_MONT_CTX
 *
_mëhod_mod_n
;

168 
BN_MONT_CTX
 *
_mëhod_mod_p
;

169 
BN_MONT_CTX
 *
_mëhod_mod_q
;

173 *
bignum_d©a
;

174 
BN_BLINDING
 *
blödög
;

175 
BN_BLINDING
 *
mt_blödög
;

178 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


179 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

182 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

184 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


185 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

187 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


188 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

191 
	#RSA_3
 0x3L

	)

192 
	#RSA_F4
 0x10001L

	)

194 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

196 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

197 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

198 
	#RSA_FLAG_BLINDING
 0x0008

	)

199 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

205 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

209 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

211 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

216 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

226 #i‚de‡
OPENSSL_NO_DEPRECATED


227 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

238 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

239 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

240 
∑d
, 
NULL
)

	)

242 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

243 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

244 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

245 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

246 
Àn
, 
NULL
)

	)

248 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

249 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

250 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

252 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

253 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

254 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

256 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

257 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

259 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

260 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

262 
	#RSA_PKCS1_PADDING
 1

	)

263 
	#RSA_SSLV23_PADDING
 2

	)

264 
	#RSA_NO_PADDING
 3

	)

265 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

266 
	#RSA_X931_PADDING
 5

	)

268 
	#RSA_PKCS1_PSS_PADDING
 6

	)

270 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

272 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

273 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

275 
RSA
 * 
RSA_√w
();

276 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

277 
RSA_size
(c⁄° 
RSA
 *);

280 #i‚de‡
OPENSSL_NO_DEPRECATED


281 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

282 (*
ˇŒback
)(,,*),*
cb_¨g
);

286 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

287 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
, BIGNUM *
q2
,

288 c⁄° 
BIGNUM
 *
Xp1
, c⁄° BIGNUM *
Xp2
, c⁄° BIGNUM *
Xp
,

289 c⁄° 
BIGNUM
 *
Xq1
, c⁄° BIGNUM *
Xq2
, c⁄° BIGNUM *
Xq
,

290 c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

291 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

293 
RSA_check_key
(c⁄° 
RSA
 *);

295 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

296 *
to
, 
RSA
 *
rß
,
∑ddög
);

297 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

298 *
to
, 
RSA
 *
rß
,
∑ddög
);

299 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

300 *
to
, 
RSA
 *
rß
,
∑ddög
);

301 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

302 *
to
, 
RSA
 *
rß
,
∑ddög
);

303 
RSA_‰ì
 (
RSA
 *
r
);

305 
RSA_up_ªf
(
RSA
 *
r
);

307 
RSA_Êags
(c⁄° 
RSA
 *
r
);

309 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

310 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

311 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

312 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

315 
RSA_mem‹y_lock
(
RSA
 *
r
);

318 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

320 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

322 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

323 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

325 #i‚de‡
OPENSSL_NO_FP_API


326 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

329 #i‚de‡
OPENSSL_NO_BIO


330 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

333 #i‚de‡
OPENSSL_NO_RC4


334 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

335 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

336 
sgckey
);

337 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

338 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

339 
sgckey
);

341 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

342 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

343 
vîify
));

344 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

345 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

346 
vîify
));

351 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

352 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

353 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

354 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

358 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

359 c⁄° *
m
, 
m_Àngth
,

360 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

361 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

362 c⁄° *
m
, 
m_Àngth
,

363 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

365 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

366 
RSA_blödög_off
(
RSA
 *
rß
);

367 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

369 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

370 c⁄° *
f
,
Ê
);

371 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

372 c⁄° *
f
,
Ê
,
rß_Àn
);

373 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

374 c⁄° *
f
,
Ê
);

375 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

376 c⁄° *
f
,
Ê
,
rß_Àn
);

377 
PKCS1_MGF1
(*
mask
, 
Àn
,

378 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

379 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

380 c⁄° *
f
,
Ê
,

381 c⁄° *
p
,
∂
);

382 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

383 c⁄° *
f
,
Ê
,
rß_Àn
,

384 c⁄° *
p
,
∂
);

385 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

386 c⁄° *
f
,
Ê
);

387 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

388 c⁄° *
f
,
Ê
,
rß_Àn
);

389 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

390 c⁄° *
f
,
Ê
);

391 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

392 c⁄° *
f
,
Ê
,
rß_Àn
);

393 
RSA_∑ddög_add_X931
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
);

395 
RSA_∑ddög_check_X931
(*
to
,
éí
,

396 c⁄° *
f
,
Ê
,
rß_Àn
);

397 
RSA_X931_hash_id
(
nid
);

399 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

400 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

401 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

402 c⁄° *
mHash
,

403 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

405 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

406 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

407 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

408 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

410 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

411 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

417 
ERR_lﬂd_RSA_°rögs
();

422 
	#RSA_F_CHECK_PADDING_MD
 140

	)

423 
	#RSA_F_DO_RSA_PRINT
 146

	)

424 
	#RSA_F_INT_RSA_VERIFY
 145

	)

425 
	#RSA_F_MEMORY_LOCK
 100

	)

426 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

427 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

428 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

429 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

430 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

431 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

432 
	#RSA_F_RSA_CHECK_KEY
 123

	)

433 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

434 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

435 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

436 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

437 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

438 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

439 
	#RSA_F_RSA_NEW_METHOD
 106

	)

440 
	#RSA_F_RSA_NULL
 124

	)

441 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

442 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

443 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

444 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

445 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

446 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

447 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

448 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

449 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

450 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

451 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

452 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

453 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

454 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

455 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

456 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

457 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

458 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

459 
	#RSA_F_RSA_PRINT
 115

	)

460 
	#RSA_F_RSA_PRINT_FP
 116

	)

461 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

462 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

463 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 148

	)

464 
	#RSA_F_RSA_PUB_DECODE
 139

	)

465 
	#RSA_F_RSA_PUBLIC_DECRYPT
 149

	)

466 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

467 
	#RSA_F_RSA_SET_DEFAULT_METHOD
 150

	)

468 
	#RSA_F_RSA_SET_METHOD
 151

	)

469 
	#RSA_F_RSA_SIGN
 117

	)

470 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

471 
	#RSA_F_RSA_VERIFY
 119

	)

472 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

473 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

476 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

477 
	#RSA_R_BAD_E_VALUE
 101

	)

478 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

479 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

480 
	#RSA_R_BAD_SIGNATURE
 104

	)

481 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

482 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

483 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

484 
	#RSA_R_DATA_TOO_LARGE
 109

	)

485 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

486 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

487 
	#RSA_R_DATA_TOO_SMALL
 111

	)

488 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

489 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

490 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

491 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

492 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

493 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

494 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

495 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

496 
	#RSA_R_INVALID_HEADER
 137

	)

497 
	#RSA_R_INVALID_KEYBITS
 145

	)

498 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

499 
	#RSA_R_INVALID_PADDING
 138

	)

500 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

501 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

502 
	#RSA_R_INVALID_TRAILER
 139

	)

503 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

504 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

505 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

506 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

507 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

508 
	#RSA_R_NON_FIPS_METHOD
 149

	)

509 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

510 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

511 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

512 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

513 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 150

	)

514 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

515 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

516 
	#RSA_R_P_NOT_PRIME
 128

	)

517 
	#RSA_R_Q_NOT_PRIME
 129

	)

518 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

519 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

520 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

521 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

522 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

523 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

524 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

525 
	#RSA_R_VALUE_MISSING
 147

	)

526 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

528 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #i‚de‡
CHECKED_PTR_OF


61 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

62 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

70 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

71 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

73 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

74 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

76 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

77 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

79 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

81 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

83 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

84 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

86 
	#DECLARE_STACK_OF
(
ty≥
) \

87 
	`STACK_OF
(
ty≥
) \

89 
_STACK
 
°ack
; \

90 };

	)

91 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

97 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

113 *
	tOPENSSL_STRING
;

115 c⁄° *
	tOPENSSL_CSTRING
;

125 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

131 *
	tOPENSSL_BLOCK
;

132 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

136 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

137 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

138 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

139 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

140 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

141 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

142 
	#SKM_sk_num
(
ty≥
, 
°
) \

143 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

144 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

145 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

146 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

147 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

148 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

149 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

151 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

153 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

154 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

158 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

159 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

160 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

161 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

162 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

163 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

164 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

165 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

166 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

167 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

168 
	#SKM_sk_dup
(
ty≥
, 
°
) \

169 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

170 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

171 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

172 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

173 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›
(
ty≥
, 
°
) \

175 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

176 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

177 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

178 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

179 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

181 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

182 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

183 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

184 
µ
, 
Àngth
, \

185 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

186 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

187 
ex_èg
, 
ex_˛ass
)

	)

189 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

190 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

191 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

192 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

194 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

195 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

196 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

198 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

199 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

201 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

202 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

203 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

204 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

205 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

208 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

209 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

210 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

211 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

212 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

213 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

214 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

216 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

217 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

219 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

221 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

222 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

223 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

224 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

225 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

227 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

228 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

231 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

232 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

233 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

234 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

235 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

236 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

238 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

239 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

241 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

243 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

244 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

245 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

246 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

247 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

249 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

250 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

253 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

254 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

255 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

257 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

258 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

260 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

261 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

263 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

265 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

266 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

267 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

268 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

269 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

271 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

272 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

275 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

276 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

277 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

278 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

279 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

280 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

282 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

283 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

285 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

287 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

288 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

289 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

290 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

291 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

293 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

294 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

297 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

298 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

299 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

300 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

301 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

302 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

304 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

305 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

307 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

309 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

310 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

311 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

312 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

313 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

315 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

316 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

319 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

320 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

321 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

323 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

324 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

326 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

327 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

329 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

331 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

332 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

333 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

334 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

335 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

337 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

338 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

341 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

342 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

343 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

344 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

345 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

346 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

348 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

349 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

350 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

351 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

353 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

354 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

355 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

356 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

357 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

359 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

360 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

363 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

364 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

365 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

367 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

368 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

370 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

371 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

373 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

374 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

375 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

376 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

377 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

378 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

379 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

380 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

381 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

382 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

385 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

386 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

389 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

390 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

392 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

393 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

394 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

395 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

396 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

397 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

398 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

399 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

400 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

401 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

402 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

403 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

404 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

406 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

407 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

408 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

409 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

410 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

411 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

412 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

413 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

414 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

415 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

416 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

417 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

418 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

419 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

420 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

421 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

422 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

423 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

424 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

425 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

426 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

428 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

429 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

430 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

431 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

433 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

434 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

436 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

437 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

439 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

440 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

441 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

442 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

443 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

444 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

445 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

446 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

447 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

448 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

451 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

452 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

453 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

454 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

455 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

456 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

458 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

459 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

461 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

462 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

463 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

464 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

465 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

466 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

467 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

468 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

469 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

470 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

473 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

474 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

475 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

495 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

496 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

497 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

499 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

500 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

502 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

503 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

505 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

506 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

507 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

508 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

509 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

510 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

511 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

512 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

513 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

514 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

517 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

518 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

519 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

539 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

540 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

541 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

543 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

544 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

546 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

547 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

549 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

550 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

551 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

552 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

553 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

554 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

555 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

556 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

557 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

558 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

561 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

562 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

563 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

564 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

565 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

566 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

568 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

569 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

570 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

571 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

572 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

573 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

574 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

575 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

576 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

577 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

578 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

579 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

580 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

583 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

584 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

585 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

586 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

587 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

588 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

590 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

591 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

592 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

593 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

594 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

595 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

596 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

597 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

598 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

599 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

600 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

601 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

602 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

605 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

606 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

607 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

608 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

609 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

610 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

612 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

613 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

614 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

615 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

616 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

617 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

618 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

619 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

620 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

621 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

622 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

623 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

624 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

626 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

627 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

628 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

629 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

649 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

650 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

651 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

653 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

654 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

656 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

657 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

659 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

660 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

661 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

662 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

663 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

664 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

665 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

666 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

667 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

668 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

671 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

672 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

673 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

674 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

675 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

676 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

678 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

679 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

680 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

681 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

682 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

683 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

684 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

685 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

686 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

687 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

688 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

689 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

690 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

692 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

693 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

694 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

695 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

696 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

697 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

698 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

700 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

701 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

702 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

703 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

704 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

705 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

706 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

707 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

708 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

709 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

710 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

711 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

712 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

715 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

716 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

717 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

737 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

738 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

739 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

740 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

741 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

742 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

744 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

745 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

747 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

748 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

749 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

750 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

751 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

752 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

753 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

754 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

755 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

756 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

759 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

760 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

761 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

762 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

763 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

764 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

766 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

767 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

768 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

769 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

770 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

771 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

772 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

773 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

774 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

775 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

776 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

777 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

778 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

781 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

782 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

783 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

784 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

785 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

786 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

788 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

789 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

791 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

792 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

793 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

794 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

795 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

796 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

797 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

798 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

799 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

800 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

803 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

804 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

805 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

825 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

826 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

827 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

829 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

830 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

832 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

833 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

835 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

836 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

837 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

838 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

839 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

840 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

841 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

842 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

843 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

844 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

847 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

848 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

849 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

850 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

851 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

852 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

854 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

855 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

856 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

857 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

858 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

859 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

860 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

861 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

862 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

863 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

864 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

865 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

866 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

869 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

870 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

871 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

872 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

873 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

874 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

876 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

877 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

879 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

880 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

881 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

882 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

883 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

884 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

885 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

886 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

887 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

888 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

891 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

892 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

893 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

895 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

896 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

898 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

899 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

901 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

902 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

903 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

904 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

905 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

906 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

907 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

908 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

909 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

910 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

913 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

914 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

915 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

916 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

917 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

918 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

920 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

921 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

923 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

924 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

925 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

926 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

927 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

928 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

929 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

930 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

931 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

932 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

935 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

936 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

937 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

939 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

940 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

942 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

943 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

945 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

946 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

947 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

948 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

949 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

950 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

951 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

952 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

953 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

954 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

957 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

958 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

959 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

960 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

961 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

962 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

964 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

965 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

967 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

968 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

969 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

970 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

971 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

972 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

973 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

974 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

975 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

976 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

979 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

980 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

981 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

983 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

984 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

986 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

987 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

989 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

990 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

991 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

992 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

993 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

994 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

995 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

996 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

997 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

998 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1001 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1002 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1003 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1005 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1006 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1008 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1009 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1011 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1012 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1013 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1014 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1016 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1017 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1018 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1019 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1020 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1023 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1024 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1025 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1027 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1028 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1030 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1031 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1033 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1034 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1035 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1036 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1037 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1038 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1039 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1040 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1041 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1042 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1045 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1046 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1047 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1049 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1050 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1052 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1053 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1055 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1056 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1057 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1058 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1059 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1060 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1061 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1062 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1063 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1064 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1067 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1068 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1069 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1071 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1072 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1074 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1075 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1077 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1078 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1079 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1080 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1081 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1082 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1083 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1084 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1085 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1086 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1089 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1090 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1091 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1093 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1094 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1096 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1097 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1099 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1100 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1101 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1102 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1103 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1104 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1105 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1106 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1107 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1108 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1111 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1112 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1113 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1115 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1116 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1118 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1119 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1121 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1122 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1123 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1124 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1125 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1126 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1127 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1128 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1129 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1130 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1133 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1134 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1135 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1137 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1138 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1140 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1141 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1143 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1144 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1145 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1146 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1147 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1148 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1149 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1150 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1151 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1152 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1155 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1156 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1157 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1158 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1159 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1160 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1162 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1163 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1164 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1165 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1166 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1167 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1168 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1169 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1170 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1171 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1172 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1173 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1174 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1177 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1178 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1179 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1180 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1181 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1182 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1184 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1185 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1186 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1187 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1188 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1189 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1190 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1191 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1192 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1193 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1194 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1195 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1196 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1198 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1199 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1200 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1201 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1202 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1203 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1204 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1206 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1207 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1209 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1210 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1211 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1212 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1213 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1214 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1215 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1216 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1217 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1218 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1221 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1222 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1223 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1224 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1225 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1226 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1228 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1229 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1231 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1232 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1233 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1234 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1235 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1236 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1237 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1238 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1239 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1240 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1243 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1244 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1245 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1247 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1248 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1250 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1251 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1253 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1254 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1255 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1256 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1257 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1258 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1259 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1260 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1261 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1262 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1265 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1266 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1267 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1268 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1269 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1270 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1272 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1273 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1275 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1276 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1277 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1278 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1279 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1280 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1281 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1282 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1283 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1284 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1287 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1288 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1289 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1291 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1292 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1294 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1295 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1297 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1298 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1299 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1300 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1301 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1302 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1303 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1304 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1305 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1306 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1309 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1310 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1311 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1313 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1314 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1316 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1317 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1319 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1320 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1321 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1322 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1323 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1324 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1325 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1326 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1327 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1328 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1331 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1332 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1333 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1334 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1335 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1336 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1338 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1339 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1340 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1341 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1342 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1343 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1344 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1345 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1346 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1347 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1348 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1349 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1350 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1353 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1354 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1355 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1357 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1358 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1360 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1361 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1363 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1364 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1365 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1366 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1368 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1369 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1370 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1371 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1372 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1375 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1376 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1377 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1380 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1390 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1394 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1397 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1398 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1399 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1400 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1401 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1402 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1404 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1405 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1406 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1407 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1408 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1409 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1410 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1411 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1412 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1413 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1414 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1415 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1416 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1419 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1420 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1421 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1423 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1424 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1426 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1427 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1429 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1430 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1431 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1432 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1433 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1434 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1435 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1436 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1437 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1438 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1441 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1442 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1443 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1444 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1445 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1446 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1448 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1449 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1451 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1452 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1453 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1454 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1455 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1456 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1457 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1458 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1459 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1460 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1463 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1464 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1465 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1466 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1467 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1468 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1469 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1470 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1471 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1472 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1473 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1474 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1475 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1476 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1477 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1478 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1479 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1480 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1481 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1482 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1484 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1485 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1486 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1487 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1488 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1489 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1490 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1491 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1492 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1493 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1494 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1495 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1496 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1497 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1498 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1499 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1500 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1501 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1502 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1503 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1504 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1506 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1507 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1508 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1509 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1510 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1511 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1512 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1513 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1514 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1515 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1516 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1517 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1518 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1519 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1520 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1521 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1522 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1523 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1524 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1525 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1526 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1528 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1529 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1530 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1531 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1532 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1533 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1534 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1535 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1536 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1537 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1538 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1539 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1540 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1541 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1542 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1543 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1544 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1545 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1546 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1547 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1548 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1550 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1551 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1552 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1553 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1554 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1555 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1556 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1557 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1558 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1559 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1560 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1561 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1562 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1563 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1564 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1565 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1566 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1567 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1568 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1569 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1570 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1572 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1573 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1574 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1575 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1576 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1577 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1578 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1579 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1580 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1581 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1582 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1583 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1584 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1585 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1586 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1587 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1588 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1589 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1590 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1591 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1592 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1594 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1595 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1596 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1597 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1598 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1599 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1600 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1601 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1602 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1603 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1604 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1605 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1606 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1607 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1608 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1609 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1610 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1611 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1612 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1613 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1614 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1616 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1617 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1618 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1619 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1620 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1621 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1622 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1623 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1624 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1625 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1626 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1627 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1628 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1629 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1630 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1631 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1632 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1633 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1634 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1635 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1636 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1638 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1639 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1640 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1641 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1642 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1643 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1644 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1645 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1646 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1647 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1648 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1649 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1650 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1651 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1652 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1653 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1654 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1655 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1656 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1657 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1658 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1660 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1661 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1662 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1663 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1664 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1665 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1666 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1667 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1668 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1669 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1670 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1671 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1672 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1673 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1674 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1675 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1676 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1677 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1678 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1679 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1680 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1682 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1683 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1684 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1685 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1686 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1687 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1688 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1689 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1690 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1691 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1692 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1693 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1694 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1695 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1696 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1697 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1698 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1699 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1700 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1701 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1702 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1704 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1705 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1706 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1707 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1708 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1709 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1710 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1711 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1712 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1713 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1714 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1715 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1716 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1717 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1718 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1719 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1720 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1721 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1722 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1723 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1724 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1726 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1727 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1728 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1729 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1730 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1731 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1732 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1733 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1734 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1735 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1736 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1737 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1738 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1739 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1740 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1741 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1742 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1743 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1744 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1745 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1746 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1748 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1749 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1750 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1751 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1752 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1753 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1754 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1755 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1756 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1757 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1758 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1759 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1760 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1761 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1762 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1763 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1764 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1765 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1766 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1767 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1768 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1770 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1771 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1772 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1773 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1774 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1775 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1776 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1777 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1778 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1779 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1780 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1781 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1782 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1783 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1784 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1785 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1786 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1787 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1788 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1789 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1790 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1792 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1793 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1794 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1795 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1796 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1797 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1798 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1799 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1800 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1801 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1802 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1803 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1804 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1805 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1806 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1807 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1808 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1809 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1810 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1811 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1812 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1814 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1815 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1816 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1817 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1818 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1819 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1820 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1821 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1822 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1823 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1824 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1825 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1826 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1827 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1828 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1829 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1830 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1831 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1832 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1833 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1834 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1836 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1837 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1838 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1839 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1840 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1841 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1842 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1843 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1844 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1845 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1846 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1847 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1848 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1849 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1850 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1851 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1852 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1853 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1854 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1855 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1856 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1858 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1859 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1860 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1861 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1862 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1863 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1864 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1865 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1866 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1867 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1868 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1869 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1870 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1871 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1872 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1873 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1874 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1875 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1876 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1877 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1878 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1880 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1881 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1882 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1883 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1884 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1885 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1886 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1887 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1888 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1889 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1890 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1891 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1892 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1893 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1894 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1895 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1896 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1897 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1898 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1899 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1900 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1902 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1903 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1904 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1905 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1906 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1907 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1908 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1909 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1910 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1911 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

1912 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

1913 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

1914 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

1915 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

1916 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

1917 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

1918 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

1919 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

1920 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

1921 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

1922 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

1924 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

1925 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

1926 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

1927 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

1928 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

1929 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

1930 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

1931 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

1932 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

1933 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

1934 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

1935 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

1936 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

1937 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

1938 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

1939 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

1940 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

1941 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

1942 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

1943 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

1944 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

1946 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

1947 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

1948 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

1949 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

1950 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

1951 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

1952 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

1953 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

1954 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

1955 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

1956 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

1957 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

1958 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

1959 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

1960 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

1961 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

1962 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

1963 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

1964 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

1965 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

1966 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

1968 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

1969 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

1970 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

1971 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

1972 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

1973 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

1974 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

1975 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1976 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1977 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1978 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1979 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

1980 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

1981 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

1982 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

1983 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

1984 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

1985 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

1986 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

1987 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

1988 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

1990 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

1991 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

1992 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

1993 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

1994 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

1995 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

1996 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

1997 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

1998 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

1999 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2000 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2001 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2002 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2003 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2004 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2005 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2006 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2007 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2008 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2009 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2010 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2012 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2013 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2014 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2015 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2016 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2017 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2018 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2019 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2020 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2021 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2022 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2023 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2024 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2025 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2026 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2027 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2028 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2029 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2030 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2031 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2032 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2034 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2035 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2036 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2037 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2038 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2039 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2040 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2041 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2042 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2043 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2044 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2045 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2046 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2047 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2048 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2049 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2051 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2052 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2053 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2054 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2055 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2056 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2059 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2060 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2061 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2062 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2063 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2064 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2065 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2066 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2067 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2068 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2069 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2070 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2071 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2072 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2073 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2074 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2075 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2076 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2077 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2078 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2079 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2080 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2081 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2084 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2085 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2086 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2087 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2088 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2089 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2090 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2091 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2092 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2093 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2094 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2095 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2096 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2097 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2098 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2099 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2101 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2102 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2103 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2104 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2105 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2106 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2109 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2110 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2111 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2112 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2113 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2114 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2115 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2116 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2118 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2119 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2120 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2121 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2122 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2123 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2124 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2125 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2127 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2128 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2129 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2130 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2131 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2132 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2133 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2134 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2136 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2137 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2138 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2139 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2140 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2141 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2142 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2143 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2145 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2146 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2147 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2148 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2149 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2150 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2151 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2152 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2154 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2155 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2156 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2157 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2158 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2159 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2160 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2161 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2163 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2164 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2165 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2166 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2167 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2168 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2169 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2170 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2172 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2173 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2174 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2175 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2176 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2177 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2178 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2179 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2181 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2182 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2183 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2184 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2185 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2186 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2187 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2188 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2190 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2191 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2192 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2193 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2194 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2195 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2196 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2197 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2199 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2200 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2201 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2202 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2203 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2204 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2205 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2206 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2208 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2209 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2210 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2211 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2212 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2213 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2214 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2215 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2217 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2218 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2219 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2220 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2221 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2222 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2223 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2224 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2226 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2227 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2228 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2229 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2230 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2231 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2232 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2233 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2235 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2236 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2237 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2238 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2239 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2240 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2241 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2242 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2244 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2245 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2246 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2247 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2248 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2249 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2250 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2251 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2253 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2254 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2255 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2256 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2257 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2258 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2259 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2260 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2262 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2263 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2264 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2265 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2266 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2267 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2268 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2269 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2271 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2272 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2273 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2274 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2275 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2276 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2277 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2278 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2280 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2281 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2282 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2283 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2284 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2285 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2286 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2287 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2289 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2290 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2291 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2292 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2293 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2294 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2295 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2296 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2298 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2299 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2300 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2301 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2302 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2303 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2304 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2305 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2307 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2308 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2309 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2310 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2311 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2312 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2313 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2314 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2316 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2317 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2318 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2319 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2320 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2321 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2322 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2323 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2325 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2326 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2327 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2328 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2329 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2330 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2331 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2332 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2334 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2335 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2337 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2338 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2340 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2341 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2342 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2343 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2344 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2345 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2346 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2347 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2348 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2349 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2350 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2351 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2352 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2353 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2354 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2355 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2356 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2358 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2359 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2360 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2361 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2362 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2363 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2364 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2365 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2366 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2367 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2368 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2369 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2370 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2371 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2372 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2373 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2374 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2376 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2377 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2378 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2379 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2380 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2381 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2382 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2383 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2384 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2385 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2386 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2387 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2388 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2389 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2390 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2391 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2392 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2394 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2395 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2396 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2397 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2398 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2399 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2400 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2401 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2402 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2403 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2404 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2405 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2406 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2407 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2408 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2409 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2410 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2412 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2413 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2414 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2415 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2416 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2417 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2418 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2419 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2420 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2421 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2422 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2423 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2424 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2425 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2426 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2427 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2428 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2430 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2431 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2432 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2433 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2434 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2435 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2436 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2437 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2438 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2439 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2440 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2441 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2442 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2444 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2445 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2446 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2448 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2449 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2450 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2451 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2452 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2453 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2454 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2455 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2456 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2457 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2458 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2460 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2462 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2463 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2464 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2466 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2467 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2468 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2469 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2470 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2471 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2472 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2473 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2474 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2475 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2476 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2477 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2478 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2480 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2481 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2482 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2484 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2485 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2486 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2487 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2488 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2489 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2490 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2491 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2492 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2493 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2494 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2496 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2498 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2499 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2500 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2502 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2503 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2504 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2505 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2506 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2507 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2508 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2509 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2510 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2511 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2512 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2513 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2514 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2516 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2517 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2518 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2520 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2521 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2522 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2523 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2524 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2525 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2526 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2527 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2528 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2529 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2530 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2532 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2534 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2535 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2536 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2538 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2539 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2540 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2541 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2542 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2543 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2544 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2545 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2546 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2547 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2548 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2549 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2550 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2552 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2553 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2554 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2556 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2557 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2558 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2559 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2560 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2561 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2562 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2563 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2564 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2565 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2566 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2567 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2568 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2570 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2571 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2572 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 
	ss¶2_°©e_°


160 
thªe_byã_hódî
;

161 
˛ór_ãxt
;

162 
esˇ≥
;

163 
s¶2_rﬁlback
;

167 
wnum
;

168 
w≥nd_tŸ
;

169 c⁄° *
w≥nd_buf
;

171 
w≥nd_off
;

172 
w≥nd_Àn
;

173 
w≥nd_ªt
;

176 
rbuf_À·
;

177 
rbuf_offs
;

178 *
rbuf
;

179 *
wbuf
;

181 *
wrôe_±r
;

184 
∑ddög
;

185 
æígth
;

186 
ø˘_d©a_Àngth
;

187 
wÀngth
;

188 
wa˘_d©a_Àngth
;

189 *
ø˘_d©a
;

190 *
wa˘_d©a
;

191 *
mac_d©a
;

193 *
ªad_key
;

194 *
wrôe_key
;

197 
chÆÀnge_Àngth
;

198 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

199 
c⁄n_id_Àngth
;

200 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

201 
key_m©îül_Àngth
;

202 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

204 
ªad_£quí˚
;

205 
wrôe_£quí˚
;

208 
c⁄n_id_Àngth
;

209 
˚π_ty≥
;

210 
˚π_Àngth
;

211 
c¶
;

212 
˛ór
;

213 
íc
;

214 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

215 
cùhî_•ec_Àngth
;

216 
£ssi⁄_id_Àngth
;

217 
˛í
;

218 
æí
;

219 } 
tmp
;

220 } 
	tSSL2_STATE
;

224 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

225 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

226 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

227 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

228 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

244 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

245 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

246 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

247 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

264 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


132 
	#SSL3_CK_SCSV
 0x030000FF

	)

134 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

135 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

136 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

137 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

138 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

139 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

140 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

141 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

142 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

143 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

145 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

146 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

147 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

148 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

149 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

150 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

152 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

153 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

154 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

155 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

156 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

157 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

159 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

160 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

161 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

162 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

163 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

166 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

167 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

171 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

177 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

178 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

179 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

180 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

181 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

182 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

183 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

184 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

186 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

187 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

188 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

189 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

190 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

191 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

193 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

194 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

195 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

196 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

197 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

198 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

199 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

200 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

201 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

202 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

204 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

205 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

206 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

207 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

208 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

209 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

211 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

212 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

213 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

214 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

215 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

216 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

218 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

219 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

220 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

222 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

225 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

226 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

227 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

230 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

231 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

232 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

233 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

234 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

235 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

236 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

237 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

239 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

240 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

241 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

242 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

243 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

244 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

246 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

247 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

249 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

250 
	#SSL3_RANDOM_SIZE
 32

	)

251 
	#SSL3_SESSION_ID_SIZE
 32

	)

252 
	#SSL3_RT_HEADER_LENGTH
 5

	)

254 #i‚de‡
SSL3_ALIGN_PAYLOAD


261 
	#SSL3_ALIGN_PAYLOAD
 8

	)

263 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

265 #unde‡
SSL3_ALIGN_PAYLOAD


274 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

279 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

281 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

284 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

286 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

292 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

298 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

299 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

303 #ifde‡
OPENSSL_NO_COMP


304 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

306 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

307 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

309 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

310 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

311 
	#SSL3_RT_MAX_PACKET_SIZE
 \

312 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

314 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

315 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

317 
	#SSL3_VERSION
 0x0300

	)

318 
	#SSL3_VERSION_MAJOR
 0x03

	)

319 
	#SSL3_VERSION_MINOR
 0x00

	)

321 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

322 
	#SSL3_RT_ALERT
 21

	)

323 
	#SSL3_RT_HANDSHAKE
 22

	)

324 
	#SSL3_RT_APPLICATION_DATA
 23

	)

326 
	#SSL3_AL_WARNING
 1

	)

327 
	#SSL3_AL_FATAL
 2

	)

329 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

330 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

331 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

332 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

333 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

334 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

335 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

336 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

337 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

338 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

339 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

340 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

342 
	ss¶3_ªc‹d_°


344  
ty≥
;

345  
Àngth
;

346  
off
;

347  *
d©a
;

348  *
öput
;

349  *
comp
;

350  
ïoch
;

351  
£q_num
[8];

352 } 
	tSSL3_RECORD
;

354 
	ss¶3_buf„r_°


356 *
buf
;

358 
size_t
 
Àn
;

359 
off£t
;

360 
À·
;

361 } 
	tSSL3_BUFFER
;

363 
	#SSL3_CT_RSA_SIGN
 1

	)

364 
	#SSL3_CT_DSS_SIGN
 2

	)

365 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

366 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

367 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

368 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

369 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

374 
	#SSL3_CT_NUMBER
 9

	)

377 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

378 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

379 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

380 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

381 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

383 
	ss¶3_°©e_°


385 
Êags
;

386 
dñay_buf_p›_ªt
;

388 
ªad_£quí˚
[8];

389 
ªad_mac_£¸ë_size
;

390 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

391 
wrôe_£quí˚
[8];

392 
wrôe_mac_£¸ë_size
;

393 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

395 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

396 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

399 
√ed_em±y_‰agmíts
;

400 
em±y_‰agmít_d⁄e
;

403 
öô_exåa
;

405 
SSL3_BUFFER
 
rbuf
;

406 
SSL3_BUFFER
 
wbuf
;

408 
SSL3_RECORD
 
ºec
;

409 
SSL3_RECORD
 
wªc
;

413 
Æît_‰agmít
[2];

414 
Æît_‰agmít_Àn
;

415 
h™dshake_‰agmít
[4];

416 
h™dshake_‰agmít_Àn
;

419 
wnum
;

420 
w≥nd_tŸ
;

421 
w≥nd_ty≥
;

422 
w≥nd_ªt
;

423 c⁄° *
w≥nd_buf
;

426 
BIO
 *
h™dshake_buf„r
;

430 
EVP_MD_CTX
 **
h™dshake_dg°
;

433 
ch™ge_cùhî_•ec
;

435 
w¨n_Æît
;

436 
Áèl_Æît
;

439 
Æît_di•©ch
;

440 
£nd_Æît
[2];

444 
ª√gŸüã
;

445 
tŸÆ_ª√gŸüti⁄s
;

446 
num_ª√gŸüti⁄s
;

448 
ö_ªad_≠p_d©a
;

453 *
˛õ¡_›aque_¥f_öput
;

454 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

455 *
£rvî_›aque_¥f_öput
;

456 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

460 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

463 
föish_md
[
EVP_MAX_MD_SIZE
*2];

464 
föish_md_Àn
;

465 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

466 
≥î_föish_md_Àn
;

468 
mesßge_size
;

469 
mesßge_ty≥
;

472 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

473 #i‚de‡
OPENSSL_NO_DH


474 
DH
 *
dh
;

479 
√xt_°©e
;

481 
ªu£_mesßge
;

484 
˚π_ªq
;

485 
˘y≥_num
;

486 
˘y≥
[
SSL3_CT_NUMBER
];

487 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

489 
u£_rß_tmp
;

491 
key_block_Àngth
;

492 *
key_block
;

494 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

495 c⁄° 
EVP_MD
 *
√w_hash
;

496 
√w_mac_pkey_ty≥
;

497 
√w_mac_£¸ë_size
;

498 #i‚de‡
OPENSSL_NO_COMP


499 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

501 *
√w_com¥essi⁄
;

503 
˚π_ªque°
;

504 } 
tmp
;

507 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

508 
¥evious_˛õ¡_föished_Àn
;

509 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

510 
¥evious_£rvî_föished_Àn
;

511 
£nd_c⁄√˘i⁄_bödög
;

512 } 
	tSSL3_STATE
;

518 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

520 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

521 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

523 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

524 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

525 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

526 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

527 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

528 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

529 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

530 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

531 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

532 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

533 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

534 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

536 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

537 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

538 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

539 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

540 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

541 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

542 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

543 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

544 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

545 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

546 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

547 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

549 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

550 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

551 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

552 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

553 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

554 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

555 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

556 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

560 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

563 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

564 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

565 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

567 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

568 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

569 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

570 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

571 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

572 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

573 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

574 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

575 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

576 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

577 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

578 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

579 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

580 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

581 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

583 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

584 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

585 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

586 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

587 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

588 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

589 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

590 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

591 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

592 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

594 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

595 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

596 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

597 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

598 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

599 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

600 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

601 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

603 
	#SSL3_MT_HELLO_REQUEST
 0

	)

604 
	#SSL3_MT_CLIENT_HELLO
 1

	)

605 
	#SSL3_MT_SERVER_HELLO
 2

	)

606 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

607 
	#SSL3_MT_CERTIFICATE
 11

	)

608 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

609 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

610 
	#SSL3_MT_SERVER_DONE
 14

	)

611 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

612 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

613 
	#SSL3_MT_FINISHED
 20

	)

614 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

615 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

618 
	#SSL3_MT_CCS
 1

	)

621 
	#SSL3_CC_READ
 0x01

	)

622 
	#SSL3_CC_WRITE
 0x02

	)

623 
	#SSL3_CC_CLIENT
 0x10

	)

624 
	#SSL3_CC_SERVER
 0x20

	)

625 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

626 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

627 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

628 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

630 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

180 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


181 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

182 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


183 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

184 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


185 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

186 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


187 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

190 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


191 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

192 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


193 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

194 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


195 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

196 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


197 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

198 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


199 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

200 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


201 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

202 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


203 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

204 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


205 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

206 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


207 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

208 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

209 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


210 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

213 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


214 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

215 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


216 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

217 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


218 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

221 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


222 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

223 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


224 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

227 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


228 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

229 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


230 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

231 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


232 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

235 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


236 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

237 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


238 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

239 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


240 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

241 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


242 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

243 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

244 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


245 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

246 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

247 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


248 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

249 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


250 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

251 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


252 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

253 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


254 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

255 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


256 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

257 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


258 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

259 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

260 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


261 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

262 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


263 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

264 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


265 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

266 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


267 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

268 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


269 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

270 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


271 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

272 
ec_GF2m_smp_±_£t_af_co‹ds


	)

273 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


274 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

275 
ec_GF2m_smp_±_gë_af_co‹ds


	)

276 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


277 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

278 
ec_GF2m_smp_£t_com¥_co‹ds


	)

279 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


280 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

281 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


282 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

283 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


284 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

285 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


286 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

287 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


288 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

289 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


290 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

291 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


292 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

293 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


294 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

295 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


296 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

297 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


298 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

299 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


300 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

301 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

302 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


303 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

304 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

305 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


306 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

307 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

308 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


309 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

310 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

311 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


312 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

313 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

314 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


315 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

316 
ec_GFp_smp_±_£t_af_co‹ds


	)

317 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


318 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

319 
ec_GFp_smp_±_gë_af_co‹ds


	)

320 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


321 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

322 
ec_GFp_smp_£t_com¥_co‹ds


	)

323 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


324 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

327 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


328 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

329 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


330 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

331 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


332 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

333 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


334 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

335 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


336 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

337 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


338 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

339 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


340 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

341 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


342 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

343 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


344 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

345 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


346 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

347 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


348 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

349 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


350 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

351 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


352 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

353 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


354 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

355 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


356 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

357 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


358 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

359 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


360 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

361 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


362 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

363 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


364 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

365 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


366 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

367 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


368 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

369 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


370 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

371 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


372 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

373 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


374 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

377 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


378 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

379 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


380 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

381 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


382 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

385 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


386 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

387 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


388 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

389 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


390 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

391 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


392 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

393 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


394 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

395 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


396 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

399 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


400 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

403 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


404 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

405 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


406 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

412 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

413 #unde‡
ERR_lﬂd_CRYPTO_°rögs


414 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

415 #unde‡
OCSP_¸lID_√w


416 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

418 #unde‡
d2i_ECPARAMETERS


419 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

420 #unde‡
i2d_ECPARAMETERS


421 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

422 #unde‡
d2i_ECPKPARAMETERS


423 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

424 #unde‡
i2d_ECPKPARAMETERS


425 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

433 #unde‡
X509v3_˛ónup_exãnsi⁄s


434 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

435 #unde‡
X509v3_add_exãnsi⁄


436 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

437 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


438 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

439 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


440 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

443 #unde‡
cms_D©a_¸óã


444 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_VERSION
 0x0301

	)

163 
	#TLS1_VERSION_MAJOR
 0x03

	)

164 
	#TLS1_VERSION_MINOR
 0x01

	)

166 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

167 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

168 
	#TLS1_AD_UNKNOWN_CA
 48

	)

169 
	#TLS1_AD_ACCESS_DENIED
 49

	)

170 
	#TLS1_AD_DECODE_ERROR
 50

	)

171 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

172 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

173 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

174 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

175 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

176 
	#TLS1_AD_USER_CANCELLED
 90

	)

177 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

179 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

180 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

181 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

182 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

183 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

184 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

187 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

188 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

189 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

190 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

191 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

192 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

194 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

195 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

196 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

201 
	#TLSEXT_TYPE_›aque_¥f_öput
 ?? */

	)

205 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

208 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

210 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

213 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

214 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

215 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

216 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

217 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

219 #i‚de‡
OPENSSL_NO_TLSEXT


221 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

223 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
) ;

224 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
) ;

226 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

227 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

229 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

230 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

232 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

233 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

235 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

236 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

238 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

239 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

241 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

242 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

244 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

245 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

247 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

248 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

250 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

251 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

253 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

254 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

256 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

257 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

259 
	#SSL_TLSEXT_ERR_OK
 0

	)

260 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

261 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

262 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

264 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

265 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

267 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

268 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

269 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

270 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

272 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

273 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

275 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

276 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

278 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

279 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

280 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

281 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

282 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

283 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

285 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

286 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

291 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

292 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

293 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

294 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

301 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

302 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

303 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

304 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

305 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

306 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

307 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

311 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

312 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

313 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

314 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

315 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

316 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

318 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

319 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

320 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

321 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

322 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

323 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

326 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

327 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

328 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

329 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

330 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

331 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

333 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

334 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

335 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

336 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

337 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

338 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

341 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

342 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

343 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

344 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

345 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

346 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

349 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

350 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

351 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

352 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

353 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

355 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

356 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

357 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

358 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

359 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

361 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

362 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

363 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

364 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

365 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

367 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

368 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

369 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

370 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

371 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

373 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

374 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

375 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

376 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

377 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

386 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

387 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

388 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

389 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

390 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

391 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

392 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

395 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

396 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

397 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

398 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

399 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

400 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

402 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

403 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

404 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

405 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

406 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

407 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

410 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

411 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

412 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

413 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

414 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

416 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

417 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

418 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

419 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

420 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

422 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

423 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

424 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

425 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

426 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

428 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

429 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

430 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

431 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

432 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

434 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

435 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

436 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

437 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

438 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

441 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

442 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

443 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

444 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

447 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

448 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

449 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

450 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

451 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

452 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

454 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

455 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

456 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

457 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

458 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

459 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

462 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

463 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

464 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

465 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

466 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

467 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

470 
	#TLS_CT_RSA_SIGN
 1

	)

471 
	#TLS_CT_DSS_SIGN
 2

	)

472 
	#TLS_CT_RSA_FIXED_DH
 3

	)

473 
	#TLS_CT_DSS_FIXED_DH
 4

	)

474 
	#TLS_CT_ECDSA_SIGN
 64

	)

475 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

476 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

477 
	#TLS_CT_GOST94_SIGN
 21

	)

478 
	#TLS_CT_GOST01_SIGN
 22

	)

481 
	#TLS_CT_NUMBER
 9

	)

483 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

485 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

486 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

487 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

488 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

489 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

490 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

491 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

492 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

493 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

494 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

495 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

496 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

497 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

498 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

499 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

500 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

501 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

503 #ifde‡
CHARSET_EBCDIC


504 #unde‡
TLS_MD_CLIENT_FINISH_CONST


505 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

506 #unde‡
TLS_MD_SERVER_FINISH_CONST


507 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

508 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


509 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

510 #unde‡
TLS_MD_KEY_EXPANSION_CONST


511 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

512 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


513 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

514 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


515 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

516 #unde‡
TLS_MD_IV_BLOCK_CONST


517 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

518 #unde‡
TLS_MD_MASTER_SECRET_CONST


519 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

523 
	sés_£ssi⁄_tickë_ext_°


525 
Àngth
;

526 *
d©a
;

529 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui.h

59 #i‚de‡
HEADER_UI_H


60 
	#HEADER_UI_H


	)

62 #i‚de‡
OPENSSL_NO_DEPRECATED


63 
	~<›ís¶/¸y±o.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/os¶_typ.h
>

68 #ifde‡ 
__˝lu•lus


83 
UI
 *
UI_√w
();

84 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

85 
UI_‰ì
(
UI
 *
ui
);

130 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

131 *
ªsu…_buf
, 
mösize
, 
maxsize
);

132 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

133 *
ªsu…_buf
, 
mösize
, 
maxsize
);

134 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

135 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

136 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

137 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

138 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

139 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

140 
Êags
, *
ªsu…_buf
);

141 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

142 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

143 
Êags
, *
ªsu…_buf
);

144 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

145 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

146 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

147 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

151 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

157 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

168 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

188 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

189 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

201 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

203 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

206 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

209 
UI_¥o˚ss
(
UI
 *
ui
);

214 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
)());

220 
	#UI_CTRL_PRINT_ERRORS
 1

	)

224 
	#UI_CTRL_IS_REDOABLE
 2

	)

228 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

229 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

230 
UI_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

231 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

232 
UI_£t_ex_d©a
(
UI
 *
r
,
idx
,*
¨g
);

233 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

236 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

237 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

238 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

239 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

242 
UI_METHOD
 *
UI_O≥nSSL
();

290 
ui_°rög_°
 
	tUI_STRING
;

291 
DECLARE_STACK_OF
(
UI_STRING
)

295 
	eUI_°rög_ty≥s


297 
UIT_NONE
=0,

298 
UIT_PROMPT
,

299 
UIT_VERIFY
,

300 
UIT_BOOLEAN
,

301 
UIT_INFO
,

302 
UIT_ERROR


306 
UI_METHOD
 *
UI_¸óã_mëhod
(*
«me
);

307 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

308 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
)(
UI
 *
ui
));

309 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
, (*
wrôî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

310 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
)(
UI
 *
ui
));

311 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
, (*
ªadî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

312 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
)(
UI
 *
ui
));

313 
UI_mëhod_£t_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
, *(*
¥om±_c⁄°ru˘‹
)(
UI
* 
ui
, c⁄° * 
obje˘_desc
, c⁄° * 
obje˘_«me
));

314 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
))(
UI
*);

315 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

316 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
))(
UI
*);

317 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

318 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
))(
UI
*);

319 * (*
UI_mëhod_gë_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
))(
UI
*, const *, const *);

325 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

327 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

329 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

331 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

333 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

335 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

337 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

339 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

341 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

345 
UI_UTIL_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

346 
UI_UTIL_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

353 
ERR_lﬂd_UI_°rögs
();

358 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

359 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

360 
	#UI_F_GENERAL_ALLOCATE_STRING
 100

	)

361 
	#UI_F_UI_CTRL
 111

	)

362 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

363 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

364 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

365 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

366 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

367 
	#UI_F_UI_GET0_RESULT
 107

	)

368 
	#UI_F_UI_NEW_METHOD
 104

	)

369 
	#UI_F_UI_SET_RESULT
 105

	)

372 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

373 
	#UI_R_INDEX_TOO_LARGE
 102

	)

374 
	#UI_R_INDEX_TOO_SMALL
 103

	)

375 
	#UI_R_NO_RESULT_BUFFER
 105

	)

376 
	#UI_R_RESULT_TOO_LARGE
 100

	)

377 
	#UI_R_RESULT_TOO_SMALL
 101

	)

378 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

380 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

85 #i‚de‡
OPENSSL_NO_DEPRECATED


86 #i‚de‡
OPENSSL_NO_RSA


87 
	~<›ís¶/rß.h
>

89 #i‚de‡
OPENSSL_NO_DSA


90 
	~<›ís¶/dß.h
>

92 #i‚de‡
OPENSSL_NO_DH


93 
	~<›ís¶/dh.h
>

97 #i‚de‡
OPENSSL_NO_SHA


98 
	~<›ís¶/sha.h
>

100 
	~<›ís¶/os¶_typ.h
>

102 #ifde‡ 
__˝lu•lus


106 #ifde‡
OPENSSL_SYS_WIN32


108 #unde‡
X509_NAME


109 #unde‡
X509_CERT_PAIR


110 #unde‡
X509_EXTENSIONS


113 
	#X509_FILETYPE_PEM
 1

	)

114 
	#X509_FILETYPE_ASN1
 2

	)

115 
	#X509_FILETYPE_DEFAULT
 3

	)

117 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

118 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

119 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

120 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

121 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

122 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

123 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

124 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

125 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

126 
	#X509v3_KU_UNDEF
 0xffff

	)

128 
	sX509_obje˘s_°


130 
nid
;

131 (*
a2i
)();

132 (*
i2a
)();

133 } 
	tX509_OBJECTS
;

135 
	sX509_Æg‹_°


137 
ASN1_OBJECT
 *
Æg‹ôhm
;

138 
ASN1_TYPE
 *
∑ømëî
;

141 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

143 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

145 
	sX509_vÆ_°


147 
ASN1_TIME
 *
nŸBef‹e
;

148 
ASN1_TIME
 *
nŸA·î
;

149 } 
	tX509_VAL
;

151 
	sX509_pubkey_°


153 
X509_ALGOR
 *
Æg‹
;

154 
ASN1_BIT_STRING
 *
public_key
;

155 
EVP_PKEY
 *
pkey
;

158 
	sX509_sig_°


160 
X509_ALGOR
 *
Æg‹
;

161 
ASN1_OCTET_STRING
 *
dige°
;

162 } 
	tX509_SIG
;

164 
	sX509_«me_íåy_°


166 
ASN1_OBJECT
 *
obje˘
;

167 
ASN1_STRING
 *
vÆue
;

168 
£t
;

169 
size
;

170 } 
	tX509_NAME_ENTRY
;

172 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

173 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

176 
	sX509_«me_°


178 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

179 
modifõd
;

180 #i‚de‡
OPENSSL_NO_BUFFER


181 
BUF_MEM
 *
byãs
;

183 *
byãs
;

186 *
ˇn⁄_íc
;

187 
ˇn⁄_í˛í
;

190 
DECLARE_STACK_OF
(
X509_NAME
)

192 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

193 
	#X509_EX_V_INIT
 0x0001

	)

194 
	sX509_exãnsi⁄_°


196 
ASN1_OBJECT
 *
obje˘
;

197 
ASN1_BOOLEAN
 
¸ôiˇl
;

198 
ASN1_OCTET_STRING
 *
vÆue
;

199 } 
	tX509_EXTENSION
;

201 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

203 
DECLARE_STACK_OF
(
X509_EXTENSION
)

204 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

207 
	sx509_©åibuãs_°


209 
ASN1_OBJECT
 *
obje˘
;

210 
sögÀ
;

212 *
±r
;

213  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

214  
ASN1_TYPE
 *
sögÀ
;

215 } 
vÆue
;

216 } 
	tX509_ATTRIBUTE
;

218 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

219 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

222 
	sX509_ªq_öfo_°


224 
ASN1_ENCODING
 
íc
;

225 
ASN1_INTEGER
 *
vîsi⁄
;

226 
X509_NAME
 *
subje˘
;

227 
X509_PUBKEY
 *
pubkey
;

229 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

230 } 
	tX509_REQ_INFO
;

232 
	sX509_ªq_°


234 
X509_REQ_INFO
 *
ªq_öfo
;

235 
X509_ALGOR
 *
sig_Æg
;

236 
ASN1_BIT_STRING
 *
sig«tuª
;

237 
ª„ªn˚s
;

238 } 
	tX509_REQ
;

240 
	sx509_cöf_°


242 
ASN1_INTEGER
 *
vîsi⁄
;

243 
ASN1_INTEGER
 *
£rülNumbî
;

244 
X509_ALGOR
 *
sig«tuª
;

245 
X509_NAME
 *
issuî
;

246 
X509_VAL
 *
vÆidôy
;

247 
X509_NAME
 *
subje˘
;

248 
X509_PUBKEY
 *
key
;

249 
ASN1_BIT_STRING
 *
issuîUID
;

250 
ASN1_BIT_STRING
 *
subje˘UID
;

251 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

252 
ASN1_ENCODING
 
íc
;

253 } 
	tX509_CINF
;

261 
	sx509_˚π_aux_°


263 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

264 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

265 
ASN1_UTF8STRING
 *
Æüs
;

266 
ASN1_OCTET_STRING
 *
keyid
;

267 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

268 } 
	tX509_CERT_AUX
;

270 
	sx509_°


272 
X509_CINF
 *
˚π_öfo
;

273 
X509_ALGOR
 *
sig_Æg
;

274 
ASN1_BIT_STRING
 *
sig«tuª
;

275 
vÆid
;

276 
ª„ªn˚s
;

277 *
«me
;

278 
CRYPTO_EX_DATA
 
ex_d©a
;

280 
ex_∑thÀn
;

281 
ex_p˝©hÀn
;

282 
ex_Êags
;

283 
ex_kußge
;

284 
ex_xkußge
;

285 
ex_ns˚π
;

286 
ASN1_OCTET_STRING
 *
skid
;

287 
AUTHORITY_KEYID
 *
akid
;

288 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

289 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

290 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

291 
NAME_CONSTRAINTS
 *
nc
;

292 #i‚de‡
OPENSSL_NO_RFC3779


293 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

294 
ASIdítifõrs_°
 *
rfc3779_asid
;

296 #i‚de‡
OPENSSL_NO_SHA


297 
sha1_hash
[
SHA_DIGEST_LENGTH
];

299 
X509_CERT_AUX
 *
aux
;

302 
DECLARE_STACK_OF
(
X509
)

303 
DECLARE_ASN1_SET_OF
(
X509
)

307 
	sx509_åu°_°
 {

308 
åu°
;

309 
Êags
;

310 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

311 *
«me
;

312 
¨g1
;

313 *
¨g2
;

314 } 
	tX509_TRUST
;

316 
DECLARE_STACK_OF
(
X509_TRUST
)

318 
	sx509_˚π_∑ú_°
 {

319 
X509
 *
f‹w¨d
;

320 
X509
 *
ªvî£
;

321 } 
	tX509_CERT_PAIR
;

325 
	#X509_TRUST_DEFAULT
 -1

	)

327 
	#X509_TRUST_COMPAT
 1

	)

328 
	#X509_TRUST_SSL_CLIENT
 2

	)

329 
	#X509_TRUST_SSL_SERVER
 3

	)

330 
	#X509_TRUST_EMAIL
 4

	)

331 
	#X509_TRUST_OBJECT_SIGN
 5

	)

332 
	#X509_TRUST_OCSP_SIGN
 6

	)

333 
	#X509_TRUST_OCSP_REQUEST
 7

	)

334 
	#X509_TRUST_TSA
 8

	)

337 
	#X509_TRUST_MIN
 1

	)

338 
	#X509_TRUST_MAX
 8

	)

342 
	#X509_TRUST_DYNAMIC
 1

	)

343 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

347 
	#X509_TRUST_TRUSTED
 1

	)

348 
	#X509_TRUST_REJECTED
 2

	)

349 
	#X509_TRUST_UNTRUSTED
 3

	)

353 
	#X509_FLAG_COMPAT
 0

	)

354 
	#X509_FLAG_NO_HEADER
 1L

	)

355 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

356 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

357 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

358 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

359 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

360 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

361 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

362 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

363 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

364 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

365 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

371 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

373 
	#XN_FLAG_COMPAT
 0

	)

374 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

375 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

376 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

377 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

379 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

383 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

385 
	#XN_FLAG_FN_SN
 0

	)

386 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

387 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

388 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

390 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

396 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

398 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

402 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

403 
XN_FLAG_SEP_COMMA_PLUS
 | \

404 
XN_FLAG_DN_REV
 | \

405 
XN_FLAG_FN_SN
 | \

406 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

410 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

411 
ASN1_STRFLGS_ESC_QUOTE
 | \

412 
XN_FLAG_SEP_CPLUS_SPC
 | \

413 
XN_FLAG_SPC_EQ
 | \

414 
XN_FLAG_FN_SN
)

	)

418 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

419 
ASN1_STRFLGS_ESC_MSB
 | \

420 
XN_FLAG_SEP_MULTILINE
 | \

421 
XN_FLAG_SPC_EQ
 | \

422 
XN_FLAG_FN_LN
 | \

423 
XN_FLAG_FN_ALIGN
)

	)

425 
	sx509_ªvoked_°


427 
ASN1_INTEGER
 *
£rülNumbî
;

428 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

429 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

431 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

433 
ªas⁄
;

434 
£quí˚
;

437 
DECLARE_STACK_OF
(
X509_REVOKED
)

438 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

440 
	sX509_¸l_öfo_°


442 
ASN1_INTEGER
 *
vîsi⁄
;

443 
X509_ALGOR
 *
sig_Æg
;

444 
X509_NAME
 *
issuî
;

445 
ASN1_TIME
 *
œ°Upd©e
;

446 
ASN1_TIME
 *
√xtUpd©e
;

447 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

448 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

449 
ASN1_ENCODING
 
íc
;

450 } 
	tX509_CRL_INFO
;

452 
	sX509_¸l_°


455 
X509_CRL_INFO
 *
¸l
;

456 
X509_ALGOR
 *
sig_Æg
;

457 
ASN1_BIT_STRING
 *
sig«tuª
;

458 
ª„ªn˚s
;

459 
Êags
;

461 
AUTHORITY_KEYID
 *
akid
;

462 
ISSUING_DIST_POINT
 *
idp
;

464 
idp_Êags
;

465 
idp_ªas⁄s
;

467 
ASN1_INTEGER
 *
¸l_numbî
;

468 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

469 #i‚de‡
OPENSSL_NO_SHA


470 
sha1_hash
[
SHA_DIGEST_LENGTH
];

472 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

473 c⁄° 
X509_CRL_METHOD
 *
mëh
;

474 *
mëh_d©a
;

477 
DECLARE_STACK_OF
(
X509_CRL
)

478 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

480 
	s¥iv©e_key_°


482 
vîsi⁄
;

484 
X509_ALGOR
 *
íc_Æg‹
;

485 
ASN1_OCTET_STRING
 *
íc_pkey
;

488 
EVP_PKEY
 *
dec_pkey
;

491 
key_Àngth
;

492 *
key_d©a
;

493 
key_‰ì
;

496 
EVP_CIPHER_INFO
 
cùhî
;

498 
ª„ªn˚s
;

499 } 
	tX509_PKEY
;

501 #i‚de‡
OPENSSL_NO_EVP


502 
	sX509_öfo_°


504 
X509
 *
x509
;

505 
X509_CRL
 *
¸l
;

506 
X509_PKEY
 *
x_pkey
;

508 
EVP_CIPHER_INFO
 
íc_cùhî
;

509 
íc_Àn
;

510 *
íc_d©a
;

512 
ª„ªn˚s
;

513 } 
	tX509_INFO
;

515 
DECLARE_STACK_OF
(
X509_INFO
)

522 
	sNësˇ≥_•kac_°


524 
X509_PUBKEY
 *
pubkey
;

525 
ASN1_IA5STRING
 *
chÆÀnge
;

526 } 
	tNETSCAPE_SPKAC
;

528 
	sNësˇ≥_•ki_°


530 
NETSCAPE_SPKAC
 *
•kac
;

531 
X509_ALGOR
 *
sig_Æg‹
;

532 
ASN1_BIT_STRING
 *
sig«tuª
;

533 } 
	tNETSCAPE_SPKI
;

536 
	sNësˇ≥_˚πifiˇã_£quí˚


538 
ASN1_OBJECT
 *
ty≥
;

539 
STACK_OF
(
X509
Ë*
˚πs
;

540 } 
	tNETSCAPE_CERT_SEQUENCE
;

551 
	sPBEPARAM_°
 {

552 
ASN1_OCTET_STRING
 *
ß…
;

553 
ASN1_INTEGER
 *
ôî
;

554 } 
	tPBEPARAM
;

558 
	sPBE2PARAM_°
 {

559 
X509_ALGOR
 *
keyfunc
;

560 
X509_ALGOR
 *
í¸y±i⁄
;

561 } 
	tPBE2PARAM
;

563 
	sPBKDF2PARAM_°
 {

564 
ASN1_TYPE
 *
ß…
;

565 
ASN1_INTEGER
 *
ôî
;

566 
ASN1_INTEGER
 *
keyÀngth
;

567 
X509_ALGOR
 *
¥f
;

568 } 
	tPBKDF2PARAM
;

573 
	spkcs8_¥iv_key_öfo_°


575 
brokí
;

576 
	#PKCS8_OK
 0

	)

577 
	#PKCS8_NO_OCTET
 1

	)

578 
	#PKCS8_EMBEDDED_PARAM
 2

	)

579 
	#PKCS8_NS_DB
 3

	)

580 
	#PKCS8_NEG_PRIVKEY
 4

	)

581 
ASN1_INTEGER
 *
vîsi⁄
;

582 
X509_ALGOR
 *
pkeyÆg
;

583 
ASN1_TYPE
 *
pkey
;

584 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

587 #ifde‡ 
__˝lu•lus


591 
	~<›ís¶/x509_vfy.h
>

592 
	~<›ís¶/pkcs7.h
>

594 #ifde‡ 
__˝lu•lus


598 
	#X509_EXT_PACK_UNKNOWN
 1

	)

599 
	#X509_EXT_PACK_STRING
 2

	)

601 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

603 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

604 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

605 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

606 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

607 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

608 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

609 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

610 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

612 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

613 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

614 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

615 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

616 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

618 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

619 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

620 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

621 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

622 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

623 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

624 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

625 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

627 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

628 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

632 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

635 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

637 #i‚de‡
OPENSSL_NO_EVP


638 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

640 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

641 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

642 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

644 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

645 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

646 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

647 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

649 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

651 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

653 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

654 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

655 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

656 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

658 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

659 *
md
, *
Àn
);

660 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

661 *
md
, *
Àn
);

662 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

663 *
md
, *
Àn
);

664 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

665 *
md
, *
Àn
);

666 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

667 *
md
, *
Àn
);

670 #i‚de‡
OPENSSL_NO_FP_API


671 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

672 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

673 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

674 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

675 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

676 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

677 #i‚de‡
OPENSSL_NO_RSA


678 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

679 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

680 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

681 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

682 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

683 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

685 #i‚de‡
OPENSSL_NO_DSA


686 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

687 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

688 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

689 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

691 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

692 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

693 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

694 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

695 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

696 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

697 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

698 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

699 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

700 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

703 #i‚de‡
OPENSSL_NO_BIO


704 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

705 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

706 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

707 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

708 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

709 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

710 #i‚de‡
OPENSSL_NO_RSA


711 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

712 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

713 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

714 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

715 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

716 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

718 #i‚de‡
OPENSSL_NO_DSA


719 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

720 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

721 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

722 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

724 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

725 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

726 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

727 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

728 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

729 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

730 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

731 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

732 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

733 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

736 
X509
 *
X509_dup
(X509 *
x509
);

737 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

738 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

739 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

740 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

741 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

742 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

743 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

744 
X509_ALGOR
 *
Æg‹
);

746 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

747 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

749 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

750 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

751 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

752 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

753 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

754 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

756 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

757 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

758 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

759 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

760 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

761 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

763 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

764 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

766 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

767 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

768 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

770 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

772 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

773 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

774 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

775 
STACK_OF
(
X509
Ë*
chaö
);

776 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

777 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

778 
Àngth
);

779 #i‚de‡
OPENSSL_NO_RSA


780 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

781 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

782 
Àngth
);

784 #i‚de‡
OPENSSL_NO_DSA


785 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

786 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

787 
Àngth
);

790 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

791 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

792 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

794 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

795 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

797 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

798 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

800 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

802 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

804 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

806 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

808 
DECLARE_ASN1_FUNCTIONS
(
X509
)

809 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

811 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

813 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

814 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

815 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

816 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

817 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

818 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

820 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

821 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

822 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

823 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

824 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

825 
X509_TRUST_£t
(*
t
, 
åu°
);

826 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

827 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

828 
X509_åu°_˛ór
(
X509
 *
x
);

829 
X509_ªje˘_˛ór
(
X509
 *
x
);

831 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

832 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

833 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

835 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

836 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

837 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

838 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

840 
X509_PKEY
 * 
X509_PKEY_√w
();

841 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

842 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

843 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

845 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

846 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

847 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

849 #i‚de‡
OPENSSL_NO_EVP


850 
X509_INFO
 * 
X509_INFO_√w
();

851 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

852 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

854 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

855 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

857 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

858 *
md
,*
Àn
);

860 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

861 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

862 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

864 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

865 *
md
,*
Àn
);

867 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

868 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

870 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

871 
ASN1_BIT_STRING
 *
sig«tuª
,

872 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

875 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

876 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

877 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

878 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

879 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

880 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

881 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

882 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

883 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

884 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

885 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

886 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

887 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

889 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

890 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

891 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

892 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

893 
X509_REQ_exãnsi⁄_nid
(
nid
);

894 * 
X509_REQ_gë_exãnsi⁄_nids
();

895 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

896 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

897 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

898 
nid
);

899 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

900 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

901 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

902 
œ°pos
);

903 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

904 
œ°pos
);

905 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

906 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

907 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

908 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

909 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

910 c⁄° *
byãs
, 
Àn
);

911 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

912 
nid
, 
ty≥
,

913 c⁄° *
byãs
, 
Àn
);

914 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

915 c⁄° *
©å«me
, 
ty≥
,

916 c⁄° *
byãs
, 
Àn
);

918 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

919 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

920 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

921 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

922 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

924 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

925 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

927 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

929 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

931 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

932 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

934 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

935 
X509_issuî_«me_hash
(
X509
 *
a
);

937 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

938 
X509_subje˘_«me_hash
(
X509
 *
x
);

940 #i‚de‡
OPENSSL_NO_MD5


941 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

942 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

945 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

946 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

947 
X509_NAME_hash
(
X509_NAME
 *
x
);

948 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

950 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

951 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

952 #i‚de‡
OPENSSL_NO_FP_API


953 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

954 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

955 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

956 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

957 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

960 #i‚de‡
OPENSSL_NO_BIO


961 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

962 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

963 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

964 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

965 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

966 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

967 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

968 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

969 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

972 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

973 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

974 *
buf
,
Àn
);

975 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

976 *
buf
,
Àn
);

980 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

981 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

982 
œ°pos
);

983 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

984 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

985 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

986 
loc
, 
£t
);

987 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

988 *
byãs
, 
Àn
, 
loc
, 
£t
);

989 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

990 *
byãs
, 
Àn
, 
loc
, 
£t
);

991 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

992 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

993 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

994 
ty≥
,*
byãs
, 
Àn
);

995 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

996 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

997 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

998 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

999 
Àn
);

1000 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1001 
ASN1_OBJECT
 *
obj
);

1002 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1003 c⁄° *
byãs
, 
Àn
);

1004 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1005 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1007 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1008 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1009 
nid
, 
œ°pos
);

1010 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1011 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1012 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1013 
¸ô
, 
œ°pos
);

1014 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1015 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1016 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1017 
X509_EXTENSION
 *
ex
, 
loc
);

1019 
X509_gë_ext_cou¡
(
X509
 *
x
);

1020 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1021 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1022 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1023 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1024 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1025 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1026 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1027 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1028 
Êags
);

1030 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1031 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1032 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1033 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1034 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1035 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1036 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1037 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1038 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1039 
Êags
);

1041 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1042 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1043 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1044 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1045 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1046 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1047 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1048 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1049 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1050 
Êags
);

1052 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1053 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1054 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1055 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1056 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1057 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1058 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1059 
ASN1_OCTET_STRING
 *
d©a
);

1060 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1061 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1062 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1064 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1065 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1066 
œ°pos
);

1067 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1068 
œ°pos
);

1069 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1070 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1071 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1072 
X509_ATTRIBUTE
 *
©å
);

1073 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1074 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1075 c⁄° *
byãs
, 
Àn
);

1076 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1077 
nid
, 
ty≥
,

1078 c⁄° *
byãs
, 
Àn
);

1079 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1080 c⁄° *
©å«me
, 
ty≥
,

1081 c⁄° *
byãs
, 
Àn
);

1082 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1083 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1084 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1085 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1086 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1087 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1088 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1089 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1090 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1091 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1092 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1093 
©πy≥
, *
d©a
);

1094 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1095 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1096 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1098 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1099 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1100 
œ°pos
);

1101 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1102 
œ°pos
);

1103 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1104 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1105 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1106 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1107 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1108 c⁄° *
byãs
, 
Àn
);

1109 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1110 
nid
, 
ty≥
,

1111 c⁄° *
byãs
, 
Àn
);

1112 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1113 c⁄° *
©å«me
, 
ty≥
,

1114 c⁄° *
byãs
, 
Àn
);

1116 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1119 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1120 
ASN1_INTEGER
 *
£rül
);

1121 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1123 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1124 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1125 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1127 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1128 c⁄° *
ß…
, 
ß…Àn
);

1130 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1131 c⁄° *
ß…
, 
ß…Àn
);

1132 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1133 *
ß…
, 
ß…Àn
);

1134 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1135 *
ß…
, 
ß…Àn
,

1136 *
aiv
, 
¥f_nid
);

1140 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1142 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1143 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1144 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1145 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1147 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1148 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1149 *
≥nc
, 
≥n˛í
);

1150 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1151 c⁄° **
pk
, *
µkÀn
,

1152 
X509_ALGOR
 **
∑
,

1153 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1155 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1156 
±y≥
, *
pvÆ
,

1157 *
≥nc
, 
≥n˛í
);

1158 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1159 c⁄° **
pk
, *
µkÀn
,

1160 
X509_ALGOR
 **
∑
,

1161 
X509_PUBKEY
 *
pub
);

1163 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1164 
X509_TRUST_gë_cou¡
();

1165 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1166 
X509_TRUST_gë_by_id
(
id
);

1167 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1168 *
«me
, 
¨g1
, *
¨g2
);

1169 
X509_TRUST_˛ónup
();

1170 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1171 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1172 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1178 
ERR_lﬂd_X509_°rögs
();

1183 
	#X509_F_ADD_CERT_DIR
 100

	)

1184 
	#X509_F_BY_FILE_CTRL
 101

	)

1185 
	#X509_F_CHECK_POLICY
 145

	)

1186 
	#X509_F_DIR_CTRL
 102

	)

1187 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1188 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1189 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1190 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1191 
	#X509_F_X509V3_ADD_EXT
 104

	)

1192 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1193 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1194 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1195 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1196 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1197 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1198 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1199 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1200 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1201 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1202 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1203 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1204 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1205 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1206 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1207 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1208 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1209 
	#X509_F_X509_NAME_ONELINE
 116

	)

1210 
	#X509_F_X509_NAME_PRINT
 117

	)

1211 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1212 
	#X509_F_X509_PUBKEY_GET
 119

	)

1213 
	#X509_F_X509_PUBKEY_SET
 120

	)

1214 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1215 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1216 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1217 
	#X509_F_X509_REQ_TO_X509
 123

	)

1218 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1219 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1220 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1221 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1222 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1223 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1224 
	#X509_F_X509_TO_X509_REQ
 126

	)

1225 
	#X509_F_X509_TRUST_ADD
 133

	)

1226 
	#X509_F_X509_TRUST_SET
 141

	)

1227 
	#X509_F_X509_VERIFY_CERT
 127

	)

1230 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1231 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1232 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1233 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1234 
	#X509_R_ERR_ASN1_LIB
 102

	)

1235 
	#X509_R_INVALID_DIRECTORY
 113

	)

1236 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1237 
	#X509_R_INVALID_TRUST
 123

	)

1238 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1239 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1240 
	#X509_R_LOADING_CERT_DIR
 103

	)

1241 
	#X509_R_LOADING_DEFAULTS
 104

	)

1242 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1243 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1244 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1245 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1246 
	#X509_R_SHOULD_RETRY
 106

	)

1247 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1248 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1249 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1250 
	#X509_R_UNKNOWN_NID
 109

	)

1251 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1252 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1253 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1254 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1255 
	#X509_R_WRONG_TYPE
 122

	)

1257 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/poll.h

20 #i‚def 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/pﬁl.h
>

27 #ifde‡
__USE_GNU


29 
	~<bôs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spﬁlfd


42 
	mfd
;

43 
	mevíts
;

44 
	mªvíts
;

48 
__BEGIN_DECLS


58 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifde‡
__USE_GNU


67 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__c⁄°
 
time•ec
 *
__timeout
,

69 
__c⁄°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/statfs.h

20 #i‚def 
_SYS_STATFS_H


21 
	#_SYS_STATFS_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/°©fs.h
>

28 
	g__BEGIN_DECLS


31 #i‚de‡
__USE_FILE_OFFSET64


32 
	$°©fs
 (
__c⁄°
 *
__fûe
, 
°©fs
 *
__buf
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

35 #ifde‡
__REDIRECT_NTH


36 
	`__REDIRECT_NTH
 (
°©fs
,

37 (
__c⁄°
 *
__fûe
, 
°©fs
 *
__buf
),

38 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

40 
	#°©fs
 
°©fs64


	)

43 #ifde‡
__USE_LARGEFILE64


44 
	$°©fs64
 (
__c⁄°
 *
__fûe
, 
°©fs64
 *
__buf
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

52 
__THROW
 
	`__n⁄nuŒ
 ((2));

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

56 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

58 
	#f°©fs
 
f°©fs64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

63 
__THROW
 
	`__n⁄nuŒ
 ((2));

66 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Àngth_code
 
z__Àngth_code


	)

22 
	#_å_Æign
 
z__å_Æign


	)

23 
	#_å_Êush_block
 
z__å_Êush_block


	)

24 
	#_å_öô
 
z__å_öô


	)

25 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

26 
	#_å_èŒy
 
z__å_èŒy


	)

27 
	#adÀr32
 
z_adÀr32


	)

28 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

29 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

30 
	#com¥ess
 
z_com¥ess


	)

31 
	#com¥ess2
 
z_com¥ess2


	)

32 
	#com¥essBound
 
z_com¥essBound


	)

33 
	#¸c32
 
z_¸c32


	)

34 
	#¸c32_comböe
 
z_¸c32_comböe


	)

35 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

36 
	#deÊ©e
 
z_deÊ©e


	)

37 
	#deÊ©eBound
 
z_deÊ©eBound


	)

38 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

39 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

40 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

41 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

42 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

43 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

44 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

45 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

46 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

47 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

48 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

49 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

50 
	#gz_îr‹
 
z_gz_îr‹


	)

51 
	#gz_ötmax
 
z_gz_ötmax


	)

52 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

53 
	#gzbuf„r
 
z_gzbuf„r


	)

54 
	#gz˛óªº
 
z_gz˛óªº


	)

55 
	#gz˛o£
 
z_gz˛o£


	)

56 
	#gz˛o£_r
 
z_gz˛o£_r


	)

57 
	#gz˛o£_w
 
z_gz˛o£_w


	)

58 
	#gzdúe˘
 
z_gzdúe˘


	)

59 
	#gzd›í
 
z_gzd›í


	)

60 
	#gzeof
 
z_gzeof


	)

61 
	#gzîr‹
 
z_gzîr‹


	)

62 
	#gzÊush
 
z_gzÊush


	)

63 
	#gzgëc
 
z_gzgëc


	)

64 
	#gzgës
 
z_gzgës


	)

65 
	#gzoff£t
 
z_gzoff£t


	)

66 
	#gzoff£t64
 
z_gzoff£t64


	)

67 
	#gz›í
 
z_gz›í


	)

68 
	#gz›í64
 
z_gz›í64


	)

69 
	#gz¥ötf
 
z_gz¥ötf


	)

70 
	#gzputc
 
z_gzputc


	)

71 
	#gzputs
 
z_gzputs


	)

72 
	#gzªad
 
z_gzªad


	)

73 
	#gzªwöd
 
z_gzªwöd


	)

74 
	#gz£ek
 
z_gz£ek


	)

75 
	#gz£ek64
 
z_gz£ek64


	)

76 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

77 
	#gzãŒ
 
z_gzãŒ


	)

78 
	#gzãŒ64
 
z_gzãŒ64


	)

79 
	#gzungëc
 
z_gzungëc


	)

80 
	#gzwrôe
 
z_gzwrôe


	)

81 
	#öÊ©e
 
z_öÊ©e


	)

82 
	#öÊ©eBack
 
z_öÊ©eBack


	)

83 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

84 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

85 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

86 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

87 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

88 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

89 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

90 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

91 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

92 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

93 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

94 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

95 
	#öÊ©eSync
 
z_öÊ©eSync


	)

96 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

97 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

98 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

99 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

100 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

101 
	#uncom¥ess
 
z_uncom¥ess


	)

102 
	#zEº‹
 
z_zEº‹


	)

103 
	#zˇŒoc
 
z_zˇŒoc


	)

104 
	#zc‰ì
 
z_zc‰ì


	)

105 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

106 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

109 
	#Byã
 
z_Byã


	)

110 
	#Byãf
 
z_Byãf


	)

111 
	#Æloc_func
 
z_Æloc_func


	)

112 
	#ch¨f
 
z_ch¨f


	)

113 
	#‰ì_func
 
z_‰ì_func


	)

114 
	#gzFûe
 
z_gzFûe


	)

115 
	#gz_hódî
 
z_gz_hódî


	)

116 
	#gz_hódîp
 
z_gz_hódîp


	)

117 
	#ö_func
 
z_ö_func


	)

118 
	#ötf
 
z_ötf


	)

119 
	#out_func
 
z_out_func


	)

120 
	#uI¡
 
z_uI¡


	)

121 
	#uI¡f
 
z_uI¡f


	)

122 
	#uL⁄g
 
z_uL⁄g


	)

123 
	#uL⁄gf
 
z_uL⁄gf


	)

124 
	#voidp
 
z_voidp


	)

125 
	#voidpc
 
z_voidpc


	)

126 
	#voidpf
 
z_voidpf


	)

129 
	#gz_hódî_s
 
z_gz_hódî_s


	)

130 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

134 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

135 
	#MSDOS


	)

137 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

138 
	#OS2


	)

140 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

141 
	#WINDOWS


	)

143 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

144 #i‚de‡
WIN32


145 
	#WIN32


	)

148 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

149 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

150 #i‚de‡
SYS16BIT


151 
	#SYS16BIT


	)

160 #ifde‡
SYS16BIT


161 
	#MAXSEG_64K


	)

163 #ifde‡
MSDOS


164 
	#UNALIGNED_OK


	)

167 #ifde‡
__STDC_VERSION__


168 #i‚de‡
STDC


169 
	#STDC


	)

171 #i‡
__STDC_VERSION__
 >= 199901L

172 #i‚de‡
STDC99


173 
	#STDC99


	)

177 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

178 
	#STDC


	)

180 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

181 
	#STDC


	)

183 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

184 
	#STDC


	)

186 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

187 
	#STDC


	)

190 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

191 
	#STDC


	)

194 #i‚de‡
STDC


196 c⁄°

	)

201 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

202 
	#NO_DUMMY_DECL


	)

206 #i‚de‡
MAX_MEM_LEVEL


207 #ifde‡
MAXSEG_64K


208 
	#MAX_MEM_LEVEL
 8

	)

210 
	#MAX_MEM_LEVEL
 9

	)

219 #i‚de‡
MAX_WBITS


220 
	#MAX_WBITS
 15

	)

238 #i‚de‡
OF


239 #ifde‡
STDC


240 
	#OF
(
¨gs
Ë
	)
args

242 
	#OF
(
¨gs
Ë()

	)

252 #ifde‡
SYS16BIT


253 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

255 
	#SMALL_MEDIUM


	)

256 #ifde‡
_MSC_VER


257 
	#FAR
 
_Ár


	)

259 
	#FAR
 
Ár


	)

262 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

264 
	#SMALL_MEDIUM


	)

265 #ifde‡
__BORLANDC__


266 
	#FAR
 
_Ár


	)

268 
	#FAR
 
Ár


	)

273 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

277 #ifde‡
ZLIB_DLL


278 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

279 #ifde‡
ZLIB_INTERNAL


280 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

282 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

290 #ifde‡
ZLIB_WINAPI


291 #ifde‡
FAR


292 #unde‡
FAR


294 
	~<wödows.h
>

297 
	#ZEXPORT
 
WINAPI


	)

298 #ifde‡
WIN32


299 
	#ZEXPORTVA
 
WINAPIV


	)

301 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

306 #i‡
deföed
 (
__BEOS__
)

307 #ifde‡
ZLIB_DLL


308 #ifde‡
ZLIB_INTERNAL


309 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

310 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

312 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

313 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

318 #i‚de‡
ZEXTERN


319 
	#ZEXTERN
 

	)

321 #i‚de‡
ZEXPORT


322 
	#ZEXPORT


	)

324 #i‚de‡
ZEXPORTVA


325 
	#ZEXPORTVA


	)

328 #i‚de‡
FAR


329 
	#FAR


	)

332 #i‡!
deföed
(
__MACTYPES__
)

333 
	tByã
;

335 
	tuI¡
;

336 
	tuL⁄g
;

338 #ifde‡
SMALL_MEDIUM


340 
	#Byãf
 
Byã
 
FAR


	)

342 
Byã
 
	tFAR
 
	tByãf
;

344 
	tFAR
 
	tch¨f
;

345 
	tFAR
 
	tötf
;

346 
uI¡
 
	tFAR
 
	tuI¡f
;

347 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

349 #ifde‡
STDC


350 c⁄° *
	tvoidpc
;

351 
	tFAR
 *
	tvoidpf
;

352 *
	tvoidp
;

354 
Byã
 c⁄° *
	tvoidpc
;

355 
Byã
 
	tFAR
 *
	tvoidpf
;

356 
Byã
 *
	tvoidp
;

360 
	#Z_HAVE_UNISTD_H


	)

363 #ifde‡
STDC


364 
	~<sys/ty≥s.h
>

373 #i‡-
_LARGEFILE64_SOURCE
 - -1 == 1

374 #unde‡
_LARGEFILE64_SOURCE


377 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

378 
	~<uni°d.h
>

379 #ifde‡
VMS


380 
	~<unixio.h
>

382 #i‚de‡
z_off_t


383 
	#z_off_t
 
off_t


	)

387 #i‚de‡
SEEK_SET


388 
	#SEEK_SET
 0

	)

389 
	#SEEK_CUR
 1

	)

390 
	#SEEK_END
 2

	)

393 #i‚de‡
z_off_t


394 
	#z_off_t
 

	)

397 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& 
_LFS64_LARGEFILE
-0

398 
	#z_off64_t
 
off64_t


	)

400 
	#z_off64_t
 
z_off_t


	)

403 #i‡
deföed
(
__OS400__
)

404 
	#NO_v¢¥ötf


	)

407 #i‡
deföed
(
__MVS__
)

408 
	#NO_v¢¥ötf


	)

412 #i‡
deföed
(
__MVS__
)

413 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

414 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

415 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

416 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

417 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

418 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

419 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

420 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

421 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

422 #¥agm®
m≠
(
com¥essBound
,"CMBND")

423 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

424 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

425 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/poll.h

19 #i‚de‡
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifde‡
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/statfs.h

19 #i‚de‡
_SYS_STATFS_H


23 
	~<bôs/ty≥s.h
>

25 
	s°©fs


27 
__SWORD_TYPE
 
	mf_ty≥
;

28 
__SWORD_TYPE
 
	mf_bsize
;

29 #i‚de‡
__USE_FILE_OFFSET64


30 
__fsblk˙t_t
 
	mf_blocks
;

31 
__fsblk˙t_t
 
	mf_b‰ì
;

32 
__fsblk˙t_t
 
	mf_bavaû
;

33 
__fsfû˙t_t
 
	mf_fûes
;

34 
__fsfû˙t_t
 
	mf_f‰ì
;

36 
__fsblk˙t64_t
 
	mf_blocks
;

37 
__fsblk˙t64_t
 
	mf_b‰ì
;

38 
__fsblk˙t64_t
 
	mf_bavaû
;

39 
__fsfû˙t64_t
 
	mf_fûes
;

40 
__fsfû˙t64_t
 
	mf_f‰ì
;

42 
__fsid_t
 
	mf_fsid
;

43 
__SWORD_TYPE
 
	mf_«mñí
;

44 
__SWORD_TYPE
 
	mf_‰size
;

45 
__SWORD_TYPE
 
	mf_Êags
;

46 
__SWORD_TYPE
 
	mf_•¨e
[4];

49 #ifde‡
__USE_LARGEFILE64


50 
	s°©fs64


52 
__SWORD_TYPE
 
	mf_ty≥
;

53 
__SWORD_TYPE
 
	mf_bsize
;

54 
__fsblk˙t64_t
 
	mf_blocks
;

55 
__fsblk˙t64_t
 
	mf_b‰ì
;

56 
__fsblk˙t64_t
 
	mf_bavaû
;

57 
__fsfû˙t64_t
 
	mf_fûes
;

58 
__fsfû˙t64_t
 
	mf_f‰ì
;

59 
__fsid_t
 
	mf_fsid
;

60 
__SWORD_TYPE
 
	mf_«mñí
;

61 
__SWORD_TYPE
 
	mf_‰size
;

62 
__SWORD_TYPE
 
	mf_Êags
;

63 
__SWORD_TYPE
 
	mf_•¨e
[4];

68 
	#_STATFS_F_NAMELEN


	)

69 
	#_STATFS_F_FRSIZE


	)

70 
	#_STATFS_F_FLAGS


	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/krb5.h

8 
	~<krb5/krb5.h
>

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

7 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

8 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#SI_LOAD_SHIFT
 16

	)

13 
	ssysöfo
 {

14 
	mu±ime
;

15 
	mlﬂds
[3];

16 
	mtŸÆøm
;

17 
	m‰ìøm
;

18 
	msh¨edøm
;

19 
	mbuf„ºam
;

20 
	mtŸÆsw≠
;

21 
	m‰ìsw≠
;

22 
	m¥ocs
;

23 
	m∑d
;

24 
	mtŸÆhigh
;

25 
	m‰ìhigh
;

26 
	mmem_unô
;

27 
	m_f
[20-2*()-()];

31 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

34 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

37 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

38 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

44 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

45 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

48 
	#__FUNCTION__
 (
__func__
)

	)

51 #ifde‡
CONFIG_NUMA


52 
	#NUMA_BUILD
 1

	)

54 
	#NUMA_BUILD
 0

	)

58 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


59 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_NEG
 0x100

	)

101 
	#V_ASN1_UNDEF
 -1

	)

102 
	#V_ASN1_EOC
 0

	)

103 
	#V_ASN1_BOOLEAN
 1

	)

104 
	#V_ASN1_INTEGER
 2

	)

105 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

106 
	#V_ASN1_BIT_STRING
 3

	)

107 
	#V_ASN1_OCTET_STRING
 4

	)

108 
	#V_ASN1_NULL
 5

	)

109 
	#V_ASN1_OBJECT
 6

	)

110 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

111 
	#V_ASN1_EXTERNAL
 8

	)

112 
	#V_ASN1_REAL
 9

	)

113 
	#V_ASN1_ENUMERATED
 10

	)

114 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

115 
	#V_ASN1_UTF8STRING
 12

	)

116 
	#V_ASN1_SEQUENCE
 16

	)

117 
	#V_ASN1_SET
 17

	)

118 
	#V_ASN1_NUMERICSTRING
 18

	)

119 
	#V_ASN1_PRINTABLESTRING
 19

	)

120 
	#V_ASN1_T61STRING
 20

	)

121 
	#V_ASN1_TELETEXSTRING
 20

	)

122 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

123 
	#V_ASN1_IA5STRING
 22

	)

124 
	#V_ASN1_UTCTIME
 23

	)

125 
	#V_ASN1_GENERALIZEDTIME
 24

	)

126 
	#V_ASN1_GRAPHICSTRING
 25

	)

127 
	#V_ASN1_ISO64STRING
 26

	)

128 
	#V_ASN1_VISIBLESTRING
 26

	)

129 
	#V_ASN1_GENERALSTRING
 27

	)

130 
	#V_ASN1_UNIVERSALSTRING
 28

	)

131 
	#V_ASN1_BMPSTRING
 30

	)

134 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

135 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

136 
	#B_ASN1_T61STRING
 0x0004

	)

137 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

138 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

139 
	#B_ASN1_IA5STRING
 0x0010

	)

140 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

141 
	#B_ASN1_ISO64STRING
 0x0040

	)

142 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

143 
	#B_ASN1_GENERALSTRING
 0x0080

	)

144 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

145 
	#B_ASN1_OCTET_STRING
 0x0200

	)

146 
	#B_ASN1_BIT_STRING
 0x0400

	)

147 
	#B_ASN1_BMPSTRING
 0x0800

	)

148 
	#B_ASN1_UNKNOWN
 0x1000

	)

149 
	#B_ASN1_UTF8STRING
 0x2000

	)

150 
	#B_ASN1_UTCTIME
 0x4000

	)

151 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

152 
	#B_ASN1_SEQUENCE
 0x10000

	)

155 
	#MBSTRING_FLAG
 0x1000

	)

156 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

157 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

158 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

159 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

161 
	#SMIME_OLDMIME
 0x400

	)

162 
	#SMIME_CRLFEOL
 0x800

	)

163 
	#SMIME_STREAM
 0x1000

	)

165 
X509_Æg‹_°
;

166 
DECLARE_STACK_OF
(
X509_ALGOR
)

168 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

169 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

175 
	sa¢1_˘x_°


177 *
p
;

178 
eos
;

179 
îr‹
;

180 
öf
;

181 
èg
;

182 
x˛ass
;

183 
¶í
;

184 *
max
;

185 *
q
;

186 **
µ
;

187 
löe
;

188 } 
	tASN1_CTX
;

190 
	sa¢1_c⁄°_˘x_°


192 c⁄° *
p
;

193 
eos
;

194 
îr‹
;

195 
öf
;

196 
èg
;

197 
x˛ass
;

198 
¶í
;

199 c⁄° *
max
;

200 c⁄° *
q
;

201 c⁄° **
µ
;

202 
löe
;

203 } 
	tASN1_c⁄°_CTX
;

207 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

208 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

209 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

210 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

211 
	sa¢1_obje˘_°


213 c⁄° *
¢
,*
 
;

214 
nid
;

215 
Àngth
;

216 c⁄° *
d©a
;

217 
Êags
;

218 } 
	tASN1_OBJECT
;

220 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

225 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

232 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

236 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

238 
	sa¢1_°rög_°


240 
Àngth
;

241 
ty≥
;

242 *
d©a
;

247 
Êags
;

248 } 
	tASN1_STRING
;

255 
	sASN1_ENCODING_°


257 *
íc
;

258 
Àn
;

259 
modifõd
;

260 } 
	tASN1_ENCODING
;

263 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

265 
	#STABLE_FLAGS_MALLOC
 0x01

	)

266 
	#STABLE_NO_MASK
 0x02

	)

267 
	#DIRSTRING_TYPE
 \

268 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

269 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

271 
	sa¢1_°rög_èbÀ_°
 {

272 
nid
;

273 
mösize
;

274 
maxsize
;

275 
mask
;

276 
Êags
;

277 } 
	tASN1_STRING_TABLE
;

279 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

283 
	#ub_«me
 32768

	)

284 
	#ub_comm⁄_«me
 64

	)

285 
	#ub_loˇlôy_«me
 128

	)

286 
	#ub_°©e_«me
 128

	)

287 
	#ub_‹g™iz©i⁄_«me
 64

	)

288 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

289 
	#ub_tôÀ
 64

	)

290 
	#ub_emaû_addªss
 128

	)

295 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

296 
ASN1_ITEM_°
 
	tASN1_ITEM
;

297 
ASN1_TLC_°
 
	tASN1_TLC
;

299 
ASN1_VALUE_°
 
	tASN1_VALUE
;

303 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

305 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

306 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

308 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

309 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

310 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

312 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

313 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

314 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

316 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

317 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

318 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

319 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

321 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

322 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

323 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

324 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

326 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

327 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

329 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

330 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

331 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

333 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

334 
ty≥
 *
«me
##
	`_√w
(); \

335 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

337 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

338 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

340 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

341 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

342 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

344 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

345 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

346 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

348 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

349 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

350 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

351 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

352 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

353 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

354 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

355 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

356 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

357 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

359 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

360 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

361 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

363 
TYPEDEF_D2I2D_OF
();

400 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


403 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

406 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

409 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

411 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

413 
	#DECLARE_ASN1_ITEM
(
«me
) \

414 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

423 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

426 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

429 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

431 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

433 
	#DECLARE_ASN1_ITEM
(
«me
) \

434 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

445 
	#ASN1_STRFLGS_ESC_2253
 1

	)

446 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

447 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

455 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

461 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

463 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

465 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

475 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

482 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

485 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

495 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

496 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

503 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

510 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

511 
ASN1_STRFLGS_ESC_CTRL
 | \

512 
ASN1_STRFLGS_ESC_MSB
 | \

513 
ASN1_STRFLGS_UTF8_CONVERT
 | \

514 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

515 
ASN1_STRFLGS_DUMP_DER
)

	)

517 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

518 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

520 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

522 
	sa¢1_ty≥_°


524 
ty≥
;

526 *
±r
;

527 
ASN1_BOOLEAN
 
boﬁón
;

528 
ASN1_STRING
 * 
a¢1_°rög
;

529 
ASN1_OBJECT
 * 
obje˘
;

530 
ASN1_INTEGER
 * 
öãgî
;

531 
ASN1_ENUMERATED
 * 
íumî©ed
;

532 
ASN1_BIT_STRING
 * 
bô_°rög
;

533 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

534 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

535 
ASN1_T61STRING
 * 
t61°rög
;

536 
ASN1_IA5STRING
 * 
ü5°rög
;

537 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

538 
ASN1_BMPSTRING
 * 
bmp°rög
;

539 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

540 
ASN1_UTCTIME
 * 
ut˘ime
;

541 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

542 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

543 
ASN1_UTF8STRING
 * 
utf8°rög
;

546 
ASN1_STRING
 * 
£t
;

547 
ASN1_STRING
 * 
£quí˚
;

548 
ASN1_VALUE
 * 
a¢1_vÆue
;

549 } 
vÆue
;

550 } 
	tASN1_TYPE
;

552 
DECLARE_STACK_OF
(
ASN1_TYPE
)

553 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

555 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

557 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

558 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

560 
	sNETSCAPE_X509_°


562 
ASN1_OCTET_STRING
 *
hódî
;

563 
X509
 *
˚π
;

564 } 
	tNETSCAPE_X509
;

567 
	sBIT_STRING_BITNAME_°
 {

568 
bônum
;

569 c⁄° *
 ame
;

570 c⁄° *
¢ame
;

571 } 
	tBIT_STRING_BITNAME
;

574 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

575 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

576 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

577 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

580 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

581 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

582 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

583 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

584 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

585 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

586 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

587 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

589 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

590 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

591 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

592 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

593 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

594 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

595 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

597 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

598 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

599 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

600 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

601 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

602 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

603 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

605 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

606 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

607 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

608 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

609 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

610 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

611 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

612 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

613 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

614 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

615 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

616 
V_ASN1_UNIVERSAL
)

	)

618 
	#B_ASN1_TIME
 \

619 
B_ASN1_UTCTIME
 | \

620 
B_ASN1_GENERALIZEDTIME


	)

622 
	#B_ASN1_PRINTABLE
 \

623 
B_ASN1_NUMERICSTRING
| \

624 
B_ASN1_PRINTABLESTRING
| \

625 
B_ASN1_T61STRING
| \

626 
B_ASN1_IA5STRING
| \

627 
B_ASN1_BIT_STRING
| \

628 
B_ASN1_UNIVERSALSTRING
|\

629 
B_ASN1_BMPSTRING
|\

630 
B_ASN1_UTF8STRING
|\

631 
B_ASN1_SEQUENCE
|\

632 
B_ASN1_UNKNOWN


	)

634 
	#B_ASN1_DIRECTORYSTRING
 \

635 
B_ASN1_PRINTABLESTRING
| \

636 
B_ASN1_TELETEXSTRING
|\

637 
B_ASN1_BMPSTRING
|\

638 
B_ASN1_UNIVERSALSTRING
|\

639 
B_ASN1_UTF8STRING


	)

641 
	#B_ASN1_DISPLAYTEXT
 \

642 
B_ASN1_IA5STRING
| \

643 
B_ASN1_VISIBLESTRING
| \

644 
B_ASN1_BMPSTRING
|\

645 
B_ASN1_UTF8STRING


	)

647 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

648 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

649 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

650 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

651 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

652 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

653 
B_ASN1_PRINTABLE
)

	)

655 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

656 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

657 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

658 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

659 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

660 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

661 
B_ASN1_DIRECTORYSTRING
)

	)

663 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

664 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

665 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

666 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

667 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

668 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

669 
B_ASN1_DISPLAYTEXT
)

	)

671 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

672 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

673 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

674 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

675 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

676 
V_ASN1_UNIVERSAL
)

	)

677 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

678 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

679 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

681 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

682 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

683 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

684 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

685 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

686 
V_ASN1_UNIVERSAL
)

	)

687 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

688 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

689 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

691 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

692 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

693 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

694 
	#M_ASN1_IA5STRING_dup
(
a
) \

695 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

696 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

697 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

698 
V_ASN1_UNIVERSAL
)

	)

699 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

700 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

701 
B_ASN1_IA5STRING
)

	)

703 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

704 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

705 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

706 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

707 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

709 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

710 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

711 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

712 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

713 (c⁄° 
ASN1_STRING
 *)
a
)

	)

715 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

716 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

717 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

718 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

719 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

721 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

722 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

723 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

724 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

725 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

726 
V_ASN1_UNIVERSAL
)

	)

727 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

728 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

729 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

731 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

732 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

733 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

734 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

735 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

736 
V_ASN1_UNIVERSAL
)

	)

737 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

738 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

739 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

741 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

742 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

743 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

744 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

745 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

746 
V_ASN1_UNIVERSAL
)

	)

747 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

748 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

749 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

751 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

752 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

753 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

754 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

755 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

756 
V_ASN1_UNIVERSAL
)

	)

757 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

758 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

759 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

761 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

762 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

763 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

764 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

765 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

766 
V_ASN1_UNIVERSAL
)

	)

767 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

768 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

769 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

772 
	#IS_SEQUENCE
 0

	)

773 
	#IS_SET
 1

	)

775 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

777 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

778 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

779 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

780 
ASN1_TYPE_cmp
(
ASN1_TYPE
 *
a
, ASN1_TYPE *
b
);

782 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

783 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

784 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

785 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

786 
Àngth
);

787 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

788 
Àngth
);

790 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

792 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

793 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

795 
ASN1_STRING
 * 
ASN1_STRING_√w
();

796 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

797 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

798 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

799 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

800 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

803 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

804 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

805 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

806 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

807 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

808 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

810 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

811 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

812 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

813 
Àngth
);

814 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

815 
Àngth
 );

816 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

817 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

818 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

819 *
Êags
, 
Êags_Àn
);

821 #i‚de‡
OPENSSL_NO_BIO


822 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

823 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

825 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

826 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

827 
BIT_STRING_BITNAME
 *
tbl
);

829 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

830 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

832 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

833 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

834 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

835 
Àngth
);

836 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

837 
Àngth
);

838 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

839 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

841 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

843 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

844 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

845 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

846 
off£t_day
, 
off£t_£c
);

847 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

848 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

850 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

853 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

854 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

855 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

856 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

857 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

859 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

860 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

861 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

862 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

864 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

866 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

867 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

868 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

870 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

871 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

873 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

875 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

876 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

877 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

878 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

879 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

880 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

881 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

882 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

883 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

885 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

887 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

888 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

889 
off£t_day
, 
off£t_£c
);

890 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

891 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

892 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

894 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

895 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

896 
is_£t
);

897 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

898 c⁄° **
µ
,

899 
Àngth
, 
d2i_of_void
 *
d2i
,

900 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

901 
ex_˛ass
);

903 #i‚de‡
OPENSSL_NO_BIO


904 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

905 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

906 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

907 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

908 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

909 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

910 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

912 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

914 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

915 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

916 c⁄° *
¢
, c⁄° *
 
);

918 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

919 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

920 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

921 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

923 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

924 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

925 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

926 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

930 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

932 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

933 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

934 
Àngth
, 
Pèg
, 
P˛ass
);

935 
ASN1_èg2bô
(
èg
);

937 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

938 
Àngth
,
ty≥
);

941 
a¢1_Föish
(
ASN1_CTX
 *
c
);

942 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

945 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

946 *
p˛ass
, 
omax
);

947 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

948 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

949 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

950 
èg
, 
x˛ass
);

951 
ASN1_put_eoc
(**
µ
);

952 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

955 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

957 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

958 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

959 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

960 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

962 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

963 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

964 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

965 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

967 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

971 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

972 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

973 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

975 #i‚de‡
OPENSSL_NO_FP_API


976 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

978 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

979 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

980 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

981 
ö
, \

982 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

984 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

985 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

987 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

988 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

989 
out
, \

990 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

992 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

993 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

994 
out
, \

995 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

997 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

998 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1001 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1003 #i‚de‡
OPENSSL_NO_BIO


1004 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1006 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1007 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1008 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1009 
ö
, \

1010 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1012 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1013 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1015 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1016 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1017 
out
, \

1018 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1020 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1021 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1022 
out
, \

1023 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1025 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1026 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1027 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1028 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1029 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1030 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1031 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1032 *
buf
, 
off
);

1033 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1034 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1036 c⁄° *
ASN1_èg2°r
(
èg
);

1040 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1042 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1044 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1045 *
d©a
, 
Àn
);

1046 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1047 *
d©a
, 
max_Àn
);

1048 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1049 *
d©a
, 
Àn
);

1050 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1051 *
d©a
, 
max_Àn
);

1053 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1054 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1055 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1056 **
buf
, *
Àn
 );

1057 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1058 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1059 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1060 
ASN1_OCTET_STRING
 **
o˘
);

1062 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1063 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1064 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1065 
o˘
))

	)

1067 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1069 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1070 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1071 
ASN1_STRING_gë_deÁu…_mask
();

1072 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1073 
öf‹m
, 
mask
);

1074 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1075 
öf‹m
, 
mask
,

1076 
mösize
, 
maxsize
);

1078 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1079 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1080 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1081 
ASN1_STRING_TABLE_add
(, , , , );

1082 
ASN1_STRING_TABLE_˛ónup
();

1087 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1088 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1089 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1090 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1091 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1093 
ASN1_add_oid_moduÀ
();

1095 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1096 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1101 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1103 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1105 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1107 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1109 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1111 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1113 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1115 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1117 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1119 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1120 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1121 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1122 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1123 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1124 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1125 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1126 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1127 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1128 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1129 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1130 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1131 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1132 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1134 
BIO_METHOD
 *
BIO_f_a¢1
();

1136 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1138 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1139 c⁄° 
ASN1_ITEM
 *
ô
);

1140 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1141 c⁄° *
hdr
,

1142 c⁄° 
ASN1_ITEM
 *
ô
);

1143 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1144 
˘y≥_nid
, 
ec⁄t_nid
,

1145 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1146 c⁄° 
ASN1_ITEM
 *
ô
);

1147 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1148 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1149 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1155 
ERR_lﬂd_ASN1_°rögs
();

1160 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1161 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1162 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1163 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1164 
	#ASN1_F_APPEND_EXP
 176

	)

1165 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1166 
	#ASN1_F_ASN1_CB
 177

	)

1167 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1168 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1169 
	#ASN1_F_ASN1_COLLECT
 106

	)

1170 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1171 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1172 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1173 
	#ASN1_F_ASN1_DIGEST
 184

	)

1174 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1175 
	#ASN1_F_ASN1_DUP
 111

	)

1176 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1177 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1178 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1179 
	#ASN1_F_ASN1_FIND_END
 190

	)

1180 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1181 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1182 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1183 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1184 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1185 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1186 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1187 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1188 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1189 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1190 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1191 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1192 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1193 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1194 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1195 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1196 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1197 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1198 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1199 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1200 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1201 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1202 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1203 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1204 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1205 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1206 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1207 
	#ASN1_F_ASN1_SIGN
 128

	)

1208 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1209 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1210 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1211 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1212 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1213 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1214 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1215 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1216 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1217 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1218 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1219 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1220 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1221 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1222 
	#ASN1_F_ASN1_VERIFY
 137

	)

1223 
	#ASN1_F_B64_READ_ASN1
 209

	)

1224 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1225 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1226 
	#ASN1_F_BITSTR_CB
 180

	)

1227 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1228 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1229 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1230 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1231 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1232 
	#ASN1_F_COLLECT_DATA
 140

	)

1233 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1234 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1235 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1236 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1237 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1238 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1239 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1240 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1241 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1242 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1243 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1244 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1245 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1246 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1247 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1248 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1249 
	#ASN1_F_D2I_RSA_NET
 200

	)

1250 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1251 
	#ASN1_F_D2I_X509
 156

	)

1252 
	#ASN1_F_D2I_X509_CINF
 157

	)

1253 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1254 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1255 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1256 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1257 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1258 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1259 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1260 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1261 
	#ASN1_F_I2D_RSA_NET
 162

	)

1262 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1263 
	#ASN1_F_LONG_C2I
 166

	)

1264 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1265 
	#ASN1_F_PARSE_TAGGING
 182

	)

1266 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1267 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1268 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1269 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1270 
	#ASN1_F_SMIME_TEXT
 213

	)

1271 
	#ASN1_F_X509_CINF_NEW
 168

	)

1272 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1273 
	#ASN1_F_X509_INFO_NEW
 170

	)

1274 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1275 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1276 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1277 
	#ASN1_F_X509_NEW
 172

	)

1278 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1281 
	#ASN1_R_ADDING_OBJECT
 171

	)

1282 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1283 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1284 
	#ASN1_R_AUX_ERROR
 100

	)

1285 
	#ASN1_R_BAD_CLASS
 101

	)

1286 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1287 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1288 
	#ASN1_R_BAD_TAG
 104

	)

1289 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1290 
	#ASN1_R_BN_LIB
 105

	)

1291 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1292 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1293 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1294 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1295 
	#ASN1_R_DECODE_ERROR
 110

	)

1296 
	#ASN1_R_DECODING_ERROR
 111

	)

1297 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1298 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1299 
	#ASN1_R_ENCODE_ERROR
 112

	)

1300 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1301 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1302 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1303 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1304 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1305 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1306 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1307 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1308 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1309 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1310 
	#ASN1_R_FIELD_MISSING
 121

	)

1311 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1312 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1313 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1314 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1315 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1316 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1317 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1318 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1319 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1320 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1321 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1322 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1323 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1324 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1325 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1326 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1327 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1328 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1329 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1330 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1331 
	#ASN1_R_INVALID_DIGIT
 130

	)

1332 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1333 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1334 
	#ASN1_R_INVALID_NUMBER
 187

	)

1335 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1336 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1337 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1338 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1339 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1340 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1341 
	#ASN1_R_LENGTH_ERROR
 136

	)

1342 
	#ASN1_R_LIST_ERROR
 188

	)

1343 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1344 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1345 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1346 
	#ASN1_R_MISSING_EOC
 137

	)

1347 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1348 
	#ASN1_R_MISSING_VALUE
 189

	)

1349 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1350 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1351 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1352 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1353 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1354 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1355 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1356 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1357 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1358 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1359 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1360 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1361 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1362 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1363 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1364 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1365 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1366 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1367 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1368 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1369 
	#ASN1_R_SHORT_LINE
 150

	)

1370 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1371 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1372 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1373 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1374 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1375 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1376 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1377 
	#ASN1_R_TOO_LONG
 155

	)

1378 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1379 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1380 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1381 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1382 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1383 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1384 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1385 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1386 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1387 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1388 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1389 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1390 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1391 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1392 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1393 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1394 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1395 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1396 
	#ASN1_R_WRONG_TAG
 168

	)

1397 
	#ASN1_R_WRONG_TYPE
 169

	)

1399 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

584 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

585 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

586 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

588 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

589 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

590 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

591 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

593 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

594 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

595 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

596 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

598 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

599 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

601 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

603 
	#SN_pkcs3
 "pkcs3"

	)

604 
	#NID_pkcs3
 27

	)

605 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

607 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

608 
	#NID_dhKeyAgªemít
 28

	)

609 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

611 
	#SN_pkcs5
 "pkcs5"

	)

612 
	#NID_pkcs5
 187

	)

613 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

615 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

616 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

617 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

618 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

620 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

621 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

622 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

623 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

625 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

626 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

627 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

628 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

630 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

631 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

632 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

633 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

635 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

636 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

637 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

638 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

640 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

641 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

642 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

643 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

645 
	#LN_id_pbkdf2
 "PBKDF2"

	)

646 
	#NID_id_pbkdf2
 69

	)

647 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

649 
	#LN_pbes2
 "PBES2"

	)

650 
	#NID_pbes2
 161

	)

651 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

653 
	#LN_pbmac1
 "PBMAC1"

	)

654 
	#NID_pbmac1
 162

	)

655 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

657 
	#SN_pkcs7
 "pkcs7"

	)

658 
	#NID_pkcs7
 20

	)

659 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

661 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

662 
	#NID_pkcs7_d©a
 21

	)

663 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

665 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

666 
	#NID_pkcs7_sig√d
 22

	)

667 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

669 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

670 
	#NID_pkcs7_ívñ›ed
 23

	)

671 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

673 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

674 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

675 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

677 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

678 
	#NID_pkcs7_dige°
 25

	)

679 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

681 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

682 
	#NID_pkcs7_í¸y±ed
 26

	)

683 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

685 
	#SN_pkcs9
 "pkcs9"

	)

686 
	#NID_pkcs9
 47

	)

687 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

689 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

690 
	#NID_pkcs9_emaûAddªss
 48

	)

691 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

693 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

694 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

695 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

697 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

698 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

699 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

701 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

702 
	#NID_pkcs9_mesßgeDige°
 51

	)

703 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

705 
	#LN_pkcs9_signögTime
 "signögTime"

	)

706 
	#NID_pkcs9_signögTime
 52

	)

707 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

709 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

710 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

711 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

713 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

714 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

715 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

717 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

718 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

719 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

721 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

722 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

723 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

725 
	#SN_ext_ªq
 "extReq"

	)

726 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

727 
	#NID_ext_ªq
 172

	)

728 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

730 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

731 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

732 
	#NID_SMIMEC≠abûôõs
 167

	)

733 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

735 
	#SN_SMIME
 "SMIME"

	)

736 
	#LN_SMIME
 "S/MIME"

	)

737 
	#NID_SMIME
 188

	)

738 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

740 
	#SN_id_smime_mod
 "id-smime-mod"

	)

741 
	#NID_id_smime_mod
 189

	)

742 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

744 
	#SN_id_smime_˘
 "id-smime-˘"

	)

745 
	#NID_id_smime_˘
 190

	)

746 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

748 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

749 
	#NID_id_smime_Ø
 191

	)

750 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

752 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

753 
	#NID_id_smime_Æg
 192

	)

754 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

756 
	#SN_id_smime_cd
 "id-smime-cd"

	)

757 
	#NID_id_smime_cd
 193

	)

758 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

760 
	#SN_id_smime_•q
 "id-smime-•q"

	)

761 
	#NID_id_smime_•q
 194

	)

762 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

764 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

765 
	#NID_id_smime_˘i
 195

	)

766 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

768 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

769 
	#NID_id_smime_mod_cms
 196

	)

770 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

772 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

773 
	#NID_id_smime_mod_ess
 197

	)

774 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

776 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

777 
	#NID_id_smime_mod_oid
 198

	)

778 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

780 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

781 
	#NID_id_smime_mod_msg_v3
 199

	)

782 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

784 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

785 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

786 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

788 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

789 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

790 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

792 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

793 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

794 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

796 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

797 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

798 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

800 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

801 
	#NID_id_smime_˘_ª˚ùt
 204

	)

802 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

804 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

805 
	#NID_id_smime_˘_authD©a
 205

	)

806 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

808 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

809 
	#NID_id_smime_˘_publishCît
 206

	)

810 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

812 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

813 
	#NID_id_smime_˘_TSTInfo
 207

	)

814 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

816 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

817 
	#NID_id_smime_˘_TDTInfo
 208

	)

818 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

820 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

821 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

822 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

824 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

825 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

826 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

828 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

829 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

830 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

832 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

833 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

834 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

836 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

837 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

838 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

840 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

841 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

842 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

844 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

845 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

846 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

848 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

849 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

850 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

852 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

853 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

854 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

856 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

857 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

858 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

860 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

861 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

862 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

864 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

865 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

866 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

868 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

869 
	#NID_id_smime_Ø_macVÆue
 219

	)

870 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

872 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

873 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

874 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

876 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

877 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

878 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

880 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

881 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

882 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

884 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

885 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

886 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

888 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

889 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

890 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

892 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

893 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

894 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

896 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

897 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

898 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

900 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

901 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

902 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

904 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

905 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

906 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

908 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

909 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

910 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

912 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

913 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

914 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

916 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

917 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

918 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

920 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

921 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

922 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

924 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

925 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

926 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

928 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

929 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

930 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

932 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

933 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

934 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

936 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

937 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

938 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

940 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

941 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

942 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

944 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

945 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

946 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

948 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

949 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

950 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

952 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

953 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

954 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

956 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

957 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

958 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

960 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

961 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

962 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

964 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

965 
	#NID_id_smime_Æg_3DESwøp
 243

	)

966 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

968 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

969 
	#NID_id_smime_Æg_RC2wøp
 244

	)

970 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

972 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

973 
	#NID_id_smime_Æg_ESDH
 245

	)

974 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

976 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

977 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

978 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

980 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

981 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

982 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

984 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

985 
	#NID_id_smime_cd_ld≠
 248

	)

986 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

988 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

989 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

990 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

992 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

993 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

994 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

996 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

997 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

998 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1000 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1001 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1002 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1004 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1005 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1006 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1008 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1009 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1010 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1012 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1013 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1014 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1016 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1017 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1018 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1020 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1021 
	#NID_‰õndlyName
 156

	)

1022 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1024 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1025 
	#NID_loˇlKeyID
 157

	)

1026 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1028 
	#SN_ms_c•_«me
 "CSPName"

	)

1029 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1030 
	#NID_ms_c•_«me
 417

	)

1031 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1033 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1034 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1035 
	#NID_LoˇlKeySë
 856

	)

1036 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1038 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1040 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1041 
	#NID_x509Cîtifiˇã
 158

	)

1042 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1044 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1045 
	#NID_sdsiCîtifiˇã
 159

	)

1046 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1048 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1050 
	#LN_x509Cæ
 "x509Cæ"

	)

1051 
	#NID_x509Cæ
 160

	)

1052 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1054 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1056 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1058 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1059 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1060 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1061 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1063 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1064 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1065 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1066 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1068 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1069 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1070 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1071 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1073 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1074 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1075 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1076 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1078 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1079 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1080 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1081 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1083 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1084 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1085 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1086 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1088 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1090 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1092 
	#LN_keyBag
 "keyBag"

	)

1093 
	#NID_keyBag
 150

	)

1094 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1096 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1097 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1098 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1100 
	#LN_˚πBag
 "˚πBag"

	)

1101 
	#NID_˚πBag
 152

	)

1102 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1104 
	#LN_¸lBag
 "¸lBag"

	)

1105 
	#NID_¸lBag
 153

	)

1106 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1108 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1109 
	#NID_£¸ëBag
 154

	)

1110 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1112 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1113 
	#NID_ß„C⁄ã¡sBag
 155

	)

1114 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1116 
	#SN_md2
 "MD2"

	)

1117 
	#LN_md2
 "md2"

	)

1118 
	#NID_md2
 3

	)

1119 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1121 
	#SN_md4
 "MD4"

	)

1122 
	#LN_md4
 "md4"

	)

1123 
	#NID_md4
 257

	)

1124 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1126 
	#SN_md5
 "MD5"

	)

1127 
	#LN_md5
 "md5"

	)

1128 
	#NID_md5
 4

	)

1129 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1131 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1132 
	#LN_md5_sha1
 "md5-sha1"

	)

1133 
	#NID_md5_sha1
 114

	)

1135 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1136 
	#NID_hmacWôhMD5
 797

	)

1137 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1139 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1140 
	#NID_hmacWôhSHA1
 163

	)

1141 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1143 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1144 
	#NID_hmacWôhSHA224
 798

	)

1145 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1147 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1148 
	#NID_hmacWôhSHA256
 799

	)

1149 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1151 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1152 
	#NID_hmacWôhSHA384
 800

	)

1153 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1155 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1156 
	#NID_hmacWôhSHA512
 801

	)

1157 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1159 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1160 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1161 
	#NID_rc2_cbc
 37

	)

1162 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1164 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1165 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1166 
	#NID_rc2_ecb
 38

	)

1168 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1169 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1170 
	#NID_rc2_cfb64
 39

	)

1172 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1173 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1174 
	#NID_rc2_ofb64
 40

	)

1176 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1177 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1178 
	#NID_rc2_40_cbc
 98

	)

1180 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1181 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1182 
	#NID_rc2_64_cbc
 166

	)

1184 
	#SN_rc4
 "RC4"

	)

1185 
	#LN_rc4
 "rc4"

	)

1186 
	#NID_rc4
 5

	)

1187 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1189 
	#SN_rc4_40
 "RC4-40"

	)

1190 
	#LN_rc4_40
 "rc4-40"

	)

1191 
	#NID_rc4_40
 97

	)

1193 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1194 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1195 
	#NID_des_ede3_cbc
 44

	)

1196 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1198 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1199 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1200 
	#NID_rc5_cbc
 120

	)

1201 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1203 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1204 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1205 
	#NID_rc5_ecb
 121

	)

1207 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1208 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1209 
	#NID_rc5_cfb64
 122

	)

1211 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1212 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1213 
	#NID_rc5_ofb64
 123

	)

1215 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1216 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1217 
	#NID_ms_ext_ªq
 171

	)

1218 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1220 
	#SN_ms_code_öd
 "msCodeInd"

	)

1221 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1222 
	#NID_ms_code_öd
 134

	)

1223 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1225 
	#SN_ms_code_com
 "msCodeCom"

	)

1226 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1227 
	#NID_ms_code_com
 135

	)

1228 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1230 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1231 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1232 
	#NID_ms_˘l_sign
 136

	)

1233 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1235 
	#SN_ms_sgc
 "msSGC"

	)

1236 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1237 
	#NID_ms_sgc
 137

	)

1238 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1240 
	#SN_ms_efs
 "msEFS"

	)

1241 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1242 
	#NID_ms_efs
 138

	)

1243 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1245 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1246 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1247 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1248 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1250 
	#SN_ms_u≤
 "msUPN"

	)

1251 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1252 
	#NID_ms_u≤
 649

	)

1253 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1255 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1256 
	#LN_idó_cbc
 "idó-cbc"

	)

1257 
	#NID_idó_cbc
 34

	)

1258 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1260 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1261 
	#LN_idó_ecb
 "idó-ecb"

	)

1262 
	#NID_idó_ecb
 36

	)

1264 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1265 
	#LN_idó_cfb64
 "idó-cfb"

	)

1266 
	#NID_idó_cfb64
 35

	)

1268 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1269 
	#LN_idó_ofb64
 "idó-ofb"

	)

1270 
	#NID_idó_ofb64
 46

	)

1272 
	#SN_bf_cbc
 "BF-CBC"

	)

1273 
	#LN_bf_cbc
 "bf-cbc"

	)

1274 
	#NID_bf_cbc
 91

	)

1275 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1277 
	#SN_bf_ecb
 "BF-ECB"

	)

1278 
	#LN_bf_ecb
 "bf-ecb"

	)

1279 
	#NID_bf_ecb
 92

	)

1281 
	#SN_bf_cfb64
 "BF-CFB"

	)

1282 
	#LN_bf_cfb64
 "bf-cfb"

	)

1283 
	#NID_bf_cfb64
 93

	)

1285 
	#SN_bf_ofb64
 "BF-OFB"

	)

1286 
	#LN_bf_ofb64
 "bf-ofb"

	)

1287 
	#NID_bf_ofb64
 94

	)

1289 
	#SN_id_pkix
 "PKIX"

	)

1290 
	#NID_id_pkix
 127

	)

1291 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1293 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1294 
	#NID_id_pkix_mod
 258

	)

1295 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1297 
	#SN_id_≥
 "id-≥"

	)

1298 
	#NID_id_≥
 175

	)

1299 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1301 
	#SN_id_qt
 "id-qt"

	)

1302 
	#NID_id_qt
 259

	)

1303 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1305 
	#SN_id_kp
 "id-kp"

	)

1306 
	#NID_id_kp
 128

	)

1307 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1309 
	#SN_id_ô
 "id-ô"

	)

1310 
	#NID_id_ô
 260

	)

1311 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1313 
	#SN_id_pkù
 "id-pkù"

	)

1314 
	#NID_id_pkù
 261

	)

1315 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1317 
	#SN_id_Æg
 "id-Æg"

	)

1318 
	#NID_id_Æg
 262

	)

1319 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1321 
	#SN_id_cmc
 "id-cmc"

	)

1322 
	#NID_id_cmc
 263

	)

1323 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1325 
	#SN_id_⁄
 "id-⁄"

	)

1326 
	#NID_id_⁄
 264

	)

1327 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1329 
	#SN_id_pda
 "id-pda"

	)

1330 
	#NID_id_pda
 265

	)

1331 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1333 
	#SN_id_aˇ
 "id-aˇ"

	)

1334 
	#NID_id_aˇ
 266

	)

1335 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1337 
	#SN_id_qcs
 "id-qcs"

	)

1338 
	#NID_id_qcs
 267

	)

1339 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1341 
	#SN_id_c˘
 "id-c˘"

	)

1342 
	#NID_id_c˘
 268

	)

1343 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1345 
	#SN_id_µl
 "id-µl"

	)

1346 
	#NID_id_µl
 662

	)

1347 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1349 
	#SN_id_ad
 "id-ad"

	)

1350 
	#NID_id_ad
 176

	)

1351 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1353 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1354 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1355 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1357 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1358 
	#NID_id_pkix1_im∂icô_88
 270

	)

1359 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1361 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1362 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1363 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1365 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1366 
	#NID_id_pkix1_im∂icô_93
 272

	)

1367 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1369 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1370 
	#NID_id_mod_¸mf
 273

	)

1371 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1373 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1374 
	#NID_id_mod_cmc
 274

	)

1375 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1377 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1378 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1379 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1381 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1382 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1383 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1385 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1386 
	#NID_id_mod_cmp
 277

	)

1387 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1389 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1390 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1391 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1393 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1394 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1395 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1397 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1398 
	#NID_id_mod_©åibuã_˚π
 280

	)

1399 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1401 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1402 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1403 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1405 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1406 
	#NID_id_mod_oc•
 282

	)

1407 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1409 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1410 
	#NID_id_mod_dvcs
 283

	)

1411 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1413 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1414 
	#NID_id_mod_cmp2000
 284

	)

1415 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1417 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1418 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1419 
	#NID_öfo_ac˚ss
 177

	)

1420 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1422 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1423 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1424 
	#NID_biomëricInfo
 285

	)

1425 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1427 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1428 
	#NID_qcSèãmíts
 286

	)

1429 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1431 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1432 
	#NID_ac_audôE¡ôy
 287

	)

1433 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1435 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1436 
	#NID_ac_èrgëög
 288

	)

1437 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1439 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1440 
	#NID_ØC⁄åﬁs
 289

	)

1441 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1443 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1444 
	#NID_sbgp_ùAddrBlock
 290

	)

1445 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1447 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1448 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1449 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1451 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1452 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1453 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1455 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1456 
	#NID_ac_¥oxyög
 397

	)

1457 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1459 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1460 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1461 
	#NID_söfo_ac˚ss
 398

	)

1462 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1464 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1465 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1466 
	#NID_¥oxyCîtInfo
 663

	)

1467 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1469 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1470 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1471 
	#NID_id_qt_˝s
 164

	)

1472 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1474 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1475 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1476 
	#NID_id_qt_unŸi˚
 165

	)

1477 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1479 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1480 
	#NID_ãxtNŸi˚
 293

	)

1481 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1483 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1484 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1485 
	#NID_£rvî_auth
 129

	)

1486 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1488 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1489 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1490 
	#NID_˛õ¡_auth
 130

	)

1491 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1493 
	#SN_code_sign
 "codeSignög"

	)

1494 
	#LN_code_sign
 "CodêSignög"

	)

1495 
	#NID_code_sign
 131

	)

1496 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1498 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1499 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1500 
	#NID_emaû_¥Ÿe˘
 132

	)

1501 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1503 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1504 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1505 
	#NID_ù£cEndSy°em
 294

	)

1506 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1508 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1509 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1510 
	#NID_ù£cTu¬ñ
 295

	)

1511 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1513 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1514 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1515 
	#NID_ù£cU£r
 296

	)

1516 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1518 
	#SN_time_°amp
 "timeSèmpög"

	)

1519 
	#LN_time_°amp
 "TimêSèmpög"

	)

1520 
	#NID_time_°amp
 133

	)

1521 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1523 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1524 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1525 
	#NID_OCSP_sign
 180

	)

1526 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1528 
	#SN_dvcs
 "DVCS"

	)

1529 
	#LN_dvcs
 "dvcs"

	)

1530 
	#NID_dvcs
 297

	)

1531 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1533 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1534 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1535 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1537 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1538 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1539 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1541 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1542 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1543 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1545 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1546 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1547 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1549 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1550 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1551 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1553 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1554 
	#NID_id_ô_cuºítCRL
 303

	)

1555 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1557 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1558 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1559 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1561 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1562 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1563 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1565 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1566 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1567 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1569 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1570 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1571 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1573 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1574 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1575 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1577 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1578 
	#NID_id_ô_ªvPas•hø£
 309

	)

1579 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1581 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1582 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1583 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1585 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1586 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1587 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1589 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1590 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1591 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1593 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1594 
	#NID_id_ô_suµL™gTags
 784

	)

1595 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1597 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1598 
	#NID_id_ªgCål
 313

	)

1599 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1601 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1602 
	#NID_id_ªgInfo
 314

	)

1603 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1605 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1606 
	#NID_id_ªgCål_ªgTokí
 315

	)

1607 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1609 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1610 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1611 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1613 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1614 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1615 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1617 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1618 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1619 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1621 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1622 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1623 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1625 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1626 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1627 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1629 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1630 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1631 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1633 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1634 
	#NID_id_ªgInfo_˚πReq
 322

	)

1635 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1637 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1638 
	#NID_id_Æg_des40
 323

	)

1639 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1641 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1642 
	#NID_id_Æg_noSig«tuª
 324

	)

1643 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1645 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1646 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1647 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1649 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1650 
	#NID_id_Æg_dh_p›
 326

	)

1651 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1653 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1654 
	#NID_id_cmc_°©usInfo
 327

	)

1655 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1657 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1658 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1659 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1661 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1662 
	#NID_id_cmc_idítôyProof
 329

	)

1663 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1665 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1666 
	#NID_id_cmc_d©aRëu∫
 330

	)

1667 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1669 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1670 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1671 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1673 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1674 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1675 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1677 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1678 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1679 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1681 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1682 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1683 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1685 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1686 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1687 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1689 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1690 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1691 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1693 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1694 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1695 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1697 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1698 
	#NID_id_cmc_gëCît
 338

	)

1699 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1701 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1702 
	#NID_id_cmc_gëCRL
 339

	)

1703 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1705 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1706 
	#NID_id_cmc_ªvokeReque°
 340

	)

1707 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1709 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1710 
	#NID_id_cmc_ªgInfo
 341

	)

1711 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1713 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1714 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1715 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1717 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1718 
	#NID_id_cmc_quîyPídög
 343

	)

1719 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1721 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1722 
	#NID_id_cmc_p›LökR™dom
 344

	)

1723 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1725 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1726 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1727 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1729 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1730 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1731 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1733 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1734 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1735 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1737 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1738 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1739 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1740 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1742 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1743 
	#NID_id_pda_d©eOfBúth
 348

	)

1744 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1746 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1747 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1748 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1750 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1751 
	#NID_id_pda_gídî
 351

	)

1752 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1754 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1755 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1756 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1758 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1759 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1760 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1762 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1763 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1764 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1766 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1767 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1768 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1770 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1771 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1772 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1774 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1775 
	#NID_id_aˇ_group
 357

	)

1776 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1778 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1779 
	#NID_id_aˇ_rﬁe
 358

	)

1780 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1782 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1783 
	#NID_id_aˇ_ícAârs
 399

	)

1784 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1786 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1787 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1788 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1790 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1791 
	#NID_id_c˘_¸s
 360

	)

1792 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1794 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1795 
	#NID_id_c˘_PKID©a
 361

	)

1796 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1798 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1799 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1800 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1802 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1803 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1804 
	#NID_id_µl_™yL™guage
 664

	)

1805 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1807 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1808 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1809 
	#NID_id_µl_öhîôAŒ
 665

	)

1810 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1812 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1813 
	#LN_Indïídít
 "Indïídít"

	)

1814 
	#NID_Indïídít
 667

	)

1815 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1817 
	#SN_ad_OCSP
 "OCSP"

	)

1818 
	#LN_ad_OCSP
 "OCSP"

	)

1819 
	#NID_ad_OCSP
 178

	)

1820 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1822 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1823 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1824 
	#NID_ad_ˇ_issuîs
 179

	)

1825 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1827 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1828 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1829 
	#NID_ad_timeSèmpög
 363

	)

1830 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1832 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1833 
	#LN_ad_dvcs
 "ad dvcs"

	)

1834 
	#NID_ad_dvcs
 364

	)

1835 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1837 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1838 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1839 
	#NID_ˇRïosô‹y
 785

	)

1840 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1842 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1844 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1845 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1846 
	#NID_id_pkix_OCSP_basic
 365

	)

1847 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1849 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1850 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1851 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1852 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1854 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1855 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1856 
	#NID_id_pkix_OCSP_CæID
 367

	)

1857 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1859 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1860 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1861 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1862 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1864 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1865 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1866 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1867 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1869 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1870 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1871 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1872 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1874 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1875 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1876 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1877 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1879 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1880 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1881 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1882 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1884 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1885 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1886 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1888 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1889 
	#NID_id_pkix_OCSP_∑th
 374

	)

1890 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1892 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1893 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1894 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1895 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1897 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1898 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1899 
	#NID_Æg‹ôhm
 376

	)

1900 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1902 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1903 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1904 
	#NID_md5WôhRSA
 104

	)

1905 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1907 
	#SN_des_ecb
 "DES-ECB"

	)

1908 
	#LN_des_ecb
 "des-ecb"

	)

1909 
	#NID_des_ecb
 29

	)

1910 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1912 
	#SN_des_cbc
 "DES-CBC"

	)

1913 
	#LN_des_cbc
 "des-cbc"

	)

1914 
	#NID_des_cbc
 31

	)

1915 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1917 
	#SN_des_ofb64
 "DES-OFB"

	)

1918 
	#LN_des_ofb64
 "des-ofb"

	)

1919 
	#NID_des_ofb64
 45

	)

1920 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1922 
	#SN_des_cfb64
 "DES-CFB"

	)

1923 
	#LN_des_cfb64
 "des-cfb"

	)

1924 
	#NID_des_cfb64
 30

	)

1925 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1927 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1928 
	#NID_rßSig«tuª
 377

	)

1929 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1931 
	#SN_dß_2
 "DSA-ﬁd"

	)

1932 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1933 
	#NID_dß_2
 67

	)

1934 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1936 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1937 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1938 
	#NID_dßWôhSHA
 66

	)

1939 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1941 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1942 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1943 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1944 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1946 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1947 
	#LN_des_ede_ecb
 "des-ede"

	)

1948 
	#NID_des_ede_ecb
 32

	)

1949 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1951 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1952 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1953 
	#NID_des_ede3_ecb
 33

	)

1955 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1956 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1957 
	#NID_des_ede_cbc
 43

	)

1959 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1960 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1961 
	#NID_des_ede_cfb64
 60

	)

1963 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1964 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1965 
	#NID_des_ede3_cfb64
 61

	)

1967 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1968 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1969 
	#NID_des_ede_ofb64
 62

	)

1971 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1972 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1973 
	#NID_des_ede3_ofb64
 63

	)

1975 
	#SN_desx_cbc
 "DESX-CBC"

	)

1976 
	#LN_desx_cbc
 "desx-cbc"

	)

1977 
	#NID_desx_cbc
 80

	)

1979 
	#SN_sha
 "SHA"

	)

1980 
	#LN_sha
 "sha"

	)

1981 
	#NID_sha
 41

	)

1982 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

1984 
	#SN_sha1
 "SHA1"

	)

1985 
	#LN_sha1
 "sha1"

	)

1986 
	#NID_sha1
 64

	)

1987 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

1989 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

1990 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

1991 
	#NID_dßWôhSHA1_2
 70

	)

1992 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

1994 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

1995 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

1996 
	#NID_sha1WôhRSA
 115

	)

1997 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

1999 
	#SN_rùemd160
 "RIPEMD160"

	)

2000 
	#LN_rùemd160
 "rùemd160"

	)

2001 
	#NID_rùemd160
 117

	)

2002 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2004 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2005 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2006 
	#NID_rùemd160WôhRSA
 119

	)

2007 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2009 
	#SN_sx√t
 "SXNëID"

	)

2010 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2011 
	#NID_sx√t
 143

	)

2012 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2014 
	#SN_X500
 "X500"

	)

2015 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2016 
	#NID_X500
 11

	)

2017 
	#OBJ_X500
 2L,5L

	)

2019 
	#SN_X509
 "X509"

	)

2020 
	#NID_X509
 12

	)

2021 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2023 
	#SN_comm⁄Name
 "CN"

	)

2024 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2025 
	#NID_comm⁄Name
 13

	)

2026 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2028 
	#SN_su∫ame
 "SN"

	)

2029 
	#LN_su∫ame
 "su∫ame"

	)

2030 
	#NID_su∫ame
 100

	)

2031 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2033 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2034 
	#NID_£rülNumbî
 105

	)

2035 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2037 
	#SN_cou¡ryName
 "C"

	)

2038 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2039 
	#NID_cou¡ryName
 14

	)

2040 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2042 
	#SN_loˇlôyName
 "L"

	)

2043 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2044 
	#NID_loˇlôyName
 15

	)

2045 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2047 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2048 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2049 
	#NID_°©eOrProvö˚Name
 16

	)

2050 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2052 
	#SN_°ªëAddªss
 "°ªë"

	)

2053 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2054 
	#NID_°ªëAddªss
 660

	)

2055 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2057 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2058 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2059 
	#NID_‹g™iz©i⁄Name
 17

	)

2060 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2062 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2063 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2064 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2065 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2067 
	#SN_tôÀ
 "tôÀ"

	)

2068 
	#LN_tôÀ
 "tôÀ"

	)

2069 
	#NID_tôÀ
 106

	)

2070 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2072 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2073 
	#NID_des¸ùti⁄
 107

	)

2074 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2076 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2077 
	#NID_£¨chGuide
 859

	)

2078 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2080 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2081 
	#NID_busöessC©eg‹y
 860

	)

2082 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2084 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2085 
	#NID_po°ÆAddªss
 861

	)

2086 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2088 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2089 
	#NID_po°ÆCode
 661

	)

2090 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2092 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2093 
	#NID_po°Offi˚Box
 862

	)

2094 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2096 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2097 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2098 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2100 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2101 
	#NID_ãÀph⁄eNumbî
 864

	)

2102 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2104 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2105 
	#NID_ãÀxNumbî
 865

	)

2106 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2108 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2109 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2110 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2112 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2113 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2114 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2116 
	#LN_x121Addªss
 "x121Addªss"

	)

2117 
	#NID_x121Addªss
 868

	)

2118 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2120 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2121 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2122 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2124 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2125 
	#NID_ªgi°îedAddªss
 870

	)

2126 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2128 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2129 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2130 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2132 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2133 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2134 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2136 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2137 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2138 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2140 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2141 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2142 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2144 
	#SN_membî
 "membî"

	)

2145 
	#NID_membî
 875

	)

2146 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2148 
	#SN_ow√r
 "ow√r"

	)

2149 
	#NID_ow√r
 876

	)

2150 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2152 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2153 
	#NID_rﬁeOccu∑¡
 877

	)

2154 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2156 
	#SN_£eAlso
 "£eAlso"

	)

2157 
	#NID_£eAlso
 878

	)

2158 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2160 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2161 
	#NID_u£rPassw‹d
 879

	)

2162 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2164 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2165 
	#NID_u£rCîtifiˇã
 880

	)

2166 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2168 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2169 
	#NID_cACîtifiˇã
 881

	)

2170 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2172 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2173 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2174 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2176 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2177 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2178 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2180 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2181 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2182 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2184 
	#SN_«me
 "«me"

	)

2185 
	#LN_«me
 "«me"

	)

2186 
	#NID_«me
 173

	)

2187 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2189 
	#SN_givíName
 "GN"

	)

2190 
	#LN_givíName
 "givíName"

	)

2191 
	#NID_givíName
 99

	)

2192 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2194 
	#SN_öôüls
 "öôüls"

	)

2195 
	#LN_öôüls
 "öôüls"

	)

2196 
	#NID_öôüls
 101

	)

2197 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2199 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2200 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2201 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2203 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2204 
	#NID_x500UniqueIdítifõr
 503

	)

2205 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2207 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2208 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2209 
	#NID_dnQuÆifõr
 174

	)

2210 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2212 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2213 
	#NID_íh™˚dSórchGuide
 885

	)

2214 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2216 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2217 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2218 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2220 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2221 
	#NID_di°öguishedName
 887

	)

2222 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2224 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2225 
	#NID_uniqueMembî
 888

	)

2226 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2228 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2229 
	#NID_hou£Idítifõr
 889

	)

2230 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2232 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2233 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2234 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2236 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2237 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2238 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2240 
	#SN_dmdName
 "dmdName"

	)

2241 
	#NID_dmdName
 892

	)

2242 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2244 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2245 
	#NID_p£ud⁄ym
 510

	)

2246 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2248 
	#SN_rﬁe
 "rﬁe"

	)

2249 
	#LN_rﬁe
 "rﬁe"

	)

2250 
	#NID_rﬁe
 400

	)

2251 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2253 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2254 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2255 
	#NID_X500Æg‹ôhms
 378

	)

2256 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2258 
	#SN_rß
 "RSA"

	)

2259 
	#LN_rß
 "rß"

	)

2260 
	#NID_rß
 19

	)

2261 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2263 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2264 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2265 
	#NID_mdc2WôhRSA
 96

	)

2266 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2268 
	#SN_mdc2
 "MDC2"

	)

2269 
	#LN_mdc2
 "mdc2"

	)

2270 
	#NID_mdc2
 95

	)

2271 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2273 
	#SN_id_˚
 "id-˚"

	)

2274 
	#NID_id_˚
 81

	)

2275 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2277 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2278 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2279 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2280 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2282 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2283 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2284 
	#NID_subje˘_key_idítifõr
 82

	)

2285 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2287 
	#SN_key_ußge
 "keyUßge"

	)

2288 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2289 
	#NID_key_ußge
 83

	)

2290 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2292 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2293 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2294 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2295 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2297 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2298 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2299 
	#NID_subje˘_Æt_«me
 85

	)

2300 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2302 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2303 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2304 
	#NID_issuî_Æt_«me
 86

	)

2305 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2307 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2308 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2309 
	#NID_basic_c⁄°øöts
 87

	)

2310 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2312 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2313 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2314 
	#NID_¸l_numbî
 88

	)

2315 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2317 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2318 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2319 
	#NID_¸l_ªas⁄
 141

	)

2320 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2322 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2323 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2324 
	#NID_övÆidôy_d©e
 142

	)

2325 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2327 
	#SN_dñè_¸l
 "dñèCRL"

	)

2328 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2329 
	#NID_dñè_¸l
 140

	)

2330 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2332 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2333 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2334 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2335 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2337 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2338 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2339 
	#NID_˚πifiˇã_issuî
 771

	)

2340 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2342 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2343 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2344 
	#NID_«me_c⁄°øöts
 666

	)

2345 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2347 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2348 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2349 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2350 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2352 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2353 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2354 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2355 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2357 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2358 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2359 
	#NID_™y_pﬁicy
 746

	)

2360 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2362 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2363 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2364 
	#NID_pﬁicy_m≠pögs
 747

	)

2365 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2367 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2368 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2369 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2370 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2372 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2373 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2374 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2375 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2377 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2378 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2379 
	#NID_ext_key_ußge
 126

	)

2380 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2382 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2383 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2384 
	#NID_‰eshe°_¸l
 857

	)

2385 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2387 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2388 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2389 
	#NID_öhibô_™y_pﬁicy
 748

	)

2390 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2392 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2393 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2394 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2395 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2397 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2398 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2399 
	#NID_no_ªv_avaû
 403

	)

2400 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2402 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2403 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2404 
	#NID_√tsˇ≥
 57

	)

2405 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2407 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2408 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2409 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2410 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2412 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2413 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2414 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2415 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2417 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2418 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2419 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2420 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2422 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2423 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2424 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2425 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2427 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2428 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2429 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2430 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2432 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2433 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2434 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2435 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2437 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2438 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2439 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2440 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2442 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2443 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2444 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2445 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2447 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2448 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2449 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2450 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2452 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2453 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2454 
	#NID_√tsˇ≥_commít
 78

	)

2455 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2457 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2458 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2459 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2460 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2462 
	#SN_ns_sgc
 "nsSGC"

	)

2463 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2464 
	#NID_ns_sgc
 139

	)

2465 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2467 
	#SN_‹g
 "ORG"

	)

2468 
	#LN_‹g
 "‹g"

	)

2469 
	#NID_‹g
 379

	)

2470 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2472 
	#SN_dod
 "DOD"

	)

2473 
	#LN_dod
 "dod"

	)

2474 
	#NID_dod
 380

	)

2475 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2477 
	#SN_ü«
 "IANA"

	)

2478 
	#LN_ü«
 "ü«"

	)

2479 
	#NID_ü«
 381

	)

2480 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2482 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2484 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2485 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2486 
	#NID_Dúe˘‹y
 382

	)

2487 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2489 
	#SN_M™agemít
 "mgmt"

	)

2490 
	#LN_M™agemít
 "M™agemít"

	)

2491 
	#NID_M™agemít
 383

	)

2492 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2494 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2495 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2496 
	#NID_Ex≥rimíèl
 384

	)

2497 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2499 
	#SN_Priv©e
 "¥iv©e"

	)

2500 
	#LN_Priv©e
 "Priv©e"

	)

2501 
	#NID_Priv©e
 385

	)

2502 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2504 
	#SN_Securôy
 "£curôy"

	)

2505 
	#LN_Securôy
 "Securôy"

	)

2506 
	#NID_Securôy
 386

	)

2507 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2509 
	#SN_SNMPv2
 "¢mpv2"

	)

2510 
	#LN_SNMPv2
 "SNMPv2"

	)

2511 
	#NID_SNMPv2
 387

	)

2512 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2514 
	#LN_Maû
 "Maû"

	)

2515 
	#NID_Maû
 388

	)

2516 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2518 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2519 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2520 
	#NID_E¡î¥i£s
 389

	)

2521 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2523 
	#SN_dcObje˘
 "dcobje˘"

	)

2524 
	#LN_dcObje˘
 "dcObje˘"

	)

2525 
	#NID_dcObje˘
 390

	)

2526 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2528 
	#SN_mime_mhs
 "mime-mhs"

	)

2529 
	#LN_mime_mhs
 "MIME MHS"

	)

2530 
	#NID_mime_mhs
 504

	)

2531 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2533 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2534 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2535 
	#NID_mime_mhs_hódögs
 505

	)

2536 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2538 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2539 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2540 
	#NID_mime_mhs_bodõs
 506

	)

2541 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2543 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2544 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2545 
	#NID_id_hex_∑πül_mesßge
 507

	)

2546 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2548 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2549 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2550 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2551 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2553 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2554 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2555 
	#NID_æe_com¥essi⁄
 124

	)

2556 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2558 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2559 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2560 
	#NID_zlib_com¥essi⁄
 125

	)

2561 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2563 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2565 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2567 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2569 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2570 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2571 
	#NID_´s_128_ecb
 418

	)

2572 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2574 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2575 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2576 
	#NID_´s_128_cbc
 419

	)

2577 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2579 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2580 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2581 
	#NID_´s_128_ofb128
 420

	)

2582 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2584 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2585 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2586 
	#NID_´s_128_cfb128
 421

	)

2587 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2589 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2590 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2591 
	#NID_´s_192_ecb
 422

	)

2592 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2594 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2595 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2596 
	#NID_´s_192_cbc
 423

	)

2597 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2599 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2600 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2601 
	#NID_´s_192_ofb128
 424

	)

2602 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2604 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2605 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2606 
	#NID_´s_192_cfb128
 425

	)

2607 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2609 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2610 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2611 
	#NID_´s_256_ecb
 426

	)

2612 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2614 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2615 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2616 
	#NID_´s_256_cbc
 427

	)

2617 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2619 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2620 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2621 
	#NID_´s_256_ofb128
 428

	)

2622 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2624 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2625 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2626 
	#NID_´s_256_cfb128
 429

	)

2627 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2629 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2630 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2631 
	#NID_´s_128_cfb1
 650

	)

2633 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2634 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2635 
	#NID_´s_192_cfb1
 651

	)

2637 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2638 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2639 
	#NID_´s_256_cfb1
 652

	)

2641 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2642 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2643 
	#NID_´s_128_cfb8
 653

	)

2645 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2646 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2647 
	#NID_´s_192_cfb8
 654

	)

2649 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2650 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2651 
	#NID_´s_256_cfb8
 655

	)

2653 
	#SN_des_cfb1
 "DES-CFB1"

	)

2654 
	#LN_des_cfb1
 "des-cfb1"

	)

2655 
	#NID_des_cfb1
 656

	)

2657 
	#SN_des_cfb8
 "DES-CFB8"

	)

2658 
	#LN_des_cfb8
 "des-cfb8"

	)

2659 
	#NID_des_cfb8
 657

	)

2661 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2662 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2663 
	#NID_des_ede3_cfb1
 658

	)

2665 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2666 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2667 
	#NID_des_ede3_cfb8
 659

	)

2669 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2670 
	#NID_id_´s128_wøp
 788

	)

2671 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2673 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2674 
	#NID_id_´s192_wøp
 789

	)

2675 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2677 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2678 
	#NID_id_´s256_wøp
 790

	)

2679 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2681 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2683 
	#SN_sha256
 "SHA256"

	)

2684 
	#LN_sha256
 "sha256"

	)

2685 
	#NID_sha256
 672

	)

2686 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2688 
	#SN_sha384
 "SHA384"

	)

2689 
	#LN_sha384
 "sha384"

	)

2690 
	#NID_sha384
 673

	)

2691 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2693 
	#SN_sha512
 "SHA512"

	)

2694 
	#LN_sha512
 "sha512"

	)

2695 
	#NID_sha512
 674

	)

2696 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2698 
	#SN_sha224
 "SHA224"

	)

2699 
	#LN_sha224
 "sha224"

	)

2700 
	#NID_sha224
 675

	)

2701 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2703 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2705 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2706 
	#NID_dß_wôh_SHA224
 802

	)

2707 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2709 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2710 
	#NID_dß_wôh_SHA256
 803

	)

2711 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2713 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2714 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2715 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2716 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2718 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2720 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2721 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2722 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2723 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2725 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2726 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2727 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2728 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2730 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2731 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2732 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2733 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2735 
	#SN_d©a
 "d©a"

	)

2736 
	#NID_d©a
 434

	)

2737 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2739 
	#SN_pss
 "pss"

	)

2740 
	#NID_pss
 435

	)

2741 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2743 
	#SN_u˛
 "u˛"

	)

2744 
	#NID_u˛
 436

	)

2745 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2747 
	#SN_pûŸ
 "pûŸ"

	)

2748 
	#NID_pûŸ
 437

	)

2749 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2751 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2752 
	#NID_pûŸAâribuãTy≥
 438

	)

2753 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2755 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2756 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2757 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2759 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2760 
	#NID_pûŸObje˘Cœss
 440

	)

2761 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2763 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2764 
	#NID_pûŸGroups
 441

	)

2765 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2767 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2768 
	#NID_iA5SåögSy¡ax
 442

	)

2769 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2771 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2772 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2773 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2775 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2776 
	#NID_pûŸObje˘
 444

	)

2777 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2779 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2780 
	#NID_pûŸPîs⁄
 445

	)

2781 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2783 
	#SN_accou¡
 "accou¡"

	)

2784 
	#NID_accou¡
 446

	)

2785 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2787 
	#SN_documít
 "documít"

	)

2788 
	#NID_documít
 447

	)

2789 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2791 
	#SN_room
 "room"

	)

2792 
	#NID_room
 448

	)

2793 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2795 
	#LN_documítSîõs
 "documítSîõs"

	)

2796 
	#NID_documítSîõs
 449

	)

2797 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2799 
	#SN_Domaö
 "domaö"

	)

2800 
	#LN_Domaö
 "Domaö"

	)

2801 
	#NID_Domaö
 392

	)

2802 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2804 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2805 
	#NID_rFC822loˇlP¨t
 450

	)

2806 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2808 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2809 
	#NID_dNSDomaö
 451

	)

2810 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2812 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2813 
	#NID_domaöRñ©edObje˘
 452

	)

2814 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2816 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2817 
	#NID_‰õndlyCou¡ry
 453

	)

2818 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2820 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2821 
	#NID_sim∂eSecurôyObje˘
 454

	)

2822 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2824 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2825 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2826 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2828 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2829 
	#NID_pûŸDSA
 456

	)

2830 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2832 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2833 
	#NID_quÆôyLabñÀdD©a
 457

	)

2834 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2836 
	#SN_u£rId
 "UID"

	)

2837 
	#LN_u£rId
 "u£rId"

	)

2838 
	#NID_u£rId
 458

	)

2839 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2841 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2842 
	#NID_ãxtEncodedORAddªss
 459

	)

2843 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2845 
	#SN_rfc822Maûbox
 "maû"

	)

2846 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2847 
	#NID_rfc822Maûbox
 460

	)

2848 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2850 
	#SN_öfo
 "öfo"

	)

2851 
	#NID_öfo
 461

	)

2852 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2854 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2855 
	#NID_ÁvourôeDrök
 462

	)

2856 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2858 
	#LN_roomNumbî
 "roomNumbî"

	)

2859 
	#NID_roomNumbî
 463

	)

2860 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2862 
	#SN_phŸo
 "phŸo"

	)

2863 
	#NID_phŸo
 464

	)

2864 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2866 
	#LN_u£rCœss
 "u£rCœss"

	)

2867 
	#NID_u£rCœss
 465

	)

2868 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2870 
	#SN_ho°
 "ho°"

	)

2871 
	#NID_ho°
 466

	)

2872 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2874 
	#SN_m™agî
 "m™agî"

	)

2875 
	#NID_m™agî
 467

	)

2876 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2878 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2879 
	#NID_documítIdítifõr
 468

	)

2880 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2882 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2883 
	#NID_documítTôÀ
 469

	)

2884 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2886 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2887 
	#NID_documítVîsi⁄
 470

	)

2888 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2890 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2891 
	#NID_documítAuth‹
 471

	)

2892 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2894 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2895 
	#NID_documítLoˇti⁄
 472

	)

2896 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2898 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2899 
	#NID_homeTñïh⁄eNumbî
 473

	)

2900 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2902 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2903 
	#NID_£¸ë¨y
 474

	)

2904 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2906 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2907 
	#NID_ŸhîMaûbox
 475

	)

2908 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2910 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2911 
	#NID_œ°ModifõdTime
 476

	)

2912 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

2914 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

2915 
	#NID_œ°ModifõdBy
 477

	)

2916 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

2918 
	#SN_domaöComp⁄ít
 "DC"

	)

2919 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

2920 
	#NID_domaöComp⁄ít
 391

	)

2921 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

2923 
	#LN_aRec‹d
 "aRec‹d"

	)

2924 
	#NID_aRec‹d
 478

	)

2925 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

2927 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

2928 
	#NID_pûŸAâribuãTy≥27
 479

	)

2929 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

2931 
	#LN_mXRec‹d
 "mXRec‹d"

	)

2932 
	#NID_mXRec‹d
 480

	)

2933 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

2935 
	#LN_nSRec‹d
 "nSRec‹d"

	)

2936 
	#NID_nSRec‹d
 481

	)

2937 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

2939 
	#LN_sOARec‹d
 "sOARec‹d"

	)

2940 
	#NID_sOARec‹d
 482

	)

2941 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

2943 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

2944 
	#NID_cNAMERec‹d
 483

	)

2945 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

2947 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

2948 
	#NID_assocüãdDomaö
 484

	)

2949 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

2951 
	#LN_assocüãdName
 "assocüãdName"

	)

2952 
	#NID_assocüãdName
 485

	)

2953 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

2955 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

2956 
	#NID_homePo°ÆAddªss
 486

	)

2957 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

2959 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

2960 
	#NID_≥rs⁄ÆTôÀ
 487

	)

2961 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

2963 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

2964 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

2965 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

2967 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

2968 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

2969 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

2971 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

2972 
	#NID_‰õndlyCou¡ryName
 490

	)

2973 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

2975 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

2976 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

2977 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

2979 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

2980 
	#NID_j™ëMaûbox
 492

	)

2981 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

2983 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

2984 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

2985 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

2987 
	#LN_buûdögName
 "buûdögName"

	)

2988 
	#NID_buûdögName
 494

	)

2989 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

2991 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

2992 
	#NID_dSAQuÆôy
 495

	)

2993 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

2995 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

2996 
	#NID_sögÀLevñQuÆôy
 496

	)

2997 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

2999 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3000 
	#NID_subåìMöimumQuÆôy
 497

	)

3001 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3003 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3004 
	#NID_subåìMaximumQuÆôy
 498

	)

3005 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3007 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3008 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3009 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3011 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3012 
	#NID_dITRedúe˘
 500

	)

3013 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3015 
	#SN_audio
 "audio"

	)

3016 
	#NID_audio
 501

	)

3017 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3019 
	#LN_documítPublishî
 "documítPublishî"

	)

3020 
	#NID_documítPublishî
 502

	)

3021 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3023 
	#SN_id_£t
 "id-£t"

	)

3024 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3025 
	#NID_id_£t
 512

	)

3026 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3028 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3029 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3030 
	#NID_£t_˘y≥
 513

	)

3031 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3033 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3034 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3035 
	#NID_£t_msgExt
 514

	)

3036 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3038 
	#SN_£t_©å
 "£t-©å"

	)

3039 
	#NID_£t_©å
 515

	)

3040 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3042 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3043 
	#NID_£t_pﬁicy
 516

	)

3044 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3046 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3047 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3048 
	#NID_£t_˚πExt
 517

	)

3049 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3051 
	#SN_£t_bønd
 "£t-bønd"

	)

3052 
	#NID_£t_bønd
 518

	)

3053 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3055 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3056 
	#NID_£t˘_PAND©a
 519

	)

3057 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3059 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3060 
	#NID_£t˘_PANTokí
 520

	)

3061 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3063 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3064 
	#NID_£t˘_PANO∆y
 521

	)

3065 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3067 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3068 
	#NID_£t˘_OID©a
 522

	)

3069 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3071 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3072 
	#NID_£t˘_PI
 523

	)

3073 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3075 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3076 
	#NID_£t˘_PID©a
 524

	)

3077 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3079 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3080 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3081 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3083 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3084 
	#NID_£t˘_HODI≈ut
 526

	)

3085 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3087 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3088 
	#NID_£t˘_AuthResBaggage
 527

	)

3089 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3091 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3092 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3093 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3095 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3096 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3097 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3099 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3100 
	#NID_£t˘_C≠TokíSeq
 530

	)

3101 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3103 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3104 
	#NID_£t˘_PInôResD©a
 531

	)

3105 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3107 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3108 
	#NID_£t˘_PI_TBS
 532

	)

3109 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3111 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3112 
	#NID_£t˘_PResD©a
 533

	)

3113 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3115 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3116 
	#NID_£t˘_AuthReqTBS
 534

	)

3117 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3119 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3120 
	#NID_£t˘_AuthResTBS
 535

	)

3121 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3123 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3124 
	#NID_£t˘_AuthResTBSX
 536

	)

3125 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3127 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3128 
	#NID_£t˘_AuthTokíTBS
 537

	)

3129 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3131 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3132 
	#NID_£t˘_C≠TokíD©a
 538

	)

3133 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3135 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3136 
	#NID_£t˘_C≠TokíTBS
 539

	)

3137 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3139 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3140 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3141 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3143 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3144 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3145 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3147 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3148 
	#NID_£t˘_AuthRevResD©a
 542

	)

3149 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3151 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3152 
	#NID_£t˘_AuthRevResTBS
 543

	)

3153 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3155 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3156 
	#NID_£t˘_C≠ReqTBS
 544

	)

3157 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3159 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3160 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3161 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3163 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3164 
	#NID_£t˘_C≠ResD©a
 546

	)

3165 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3167 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3168 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3169 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3171 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3172 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3173 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3175 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3176 
	#NID_£t˘_C≠RevResD©a
 549

	)

3177 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3179 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3180 
	#NID_£t˘_CªdReqTBS
 550

	)

3181 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3183 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3184 
	#NID_£t˘_CªdReqTBSX
 551

	)

3185 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3187 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3188 
	#NID_£t˘_CªdResD©a
 552

	)

3189 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3191 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3192 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3193 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3195 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3196 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3197 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3199 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3200 
	#NID_£t˘_CªdRevResD©a
 555

	)

3201 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3203 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3204 
	#NID_£t˘_PCîtReqD©a
 556

	)

3205 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3207 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3208 
	#NID_£t˘_PCîtResTBS
 557

	)

3209 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3211 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3212 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3213 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3215 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3216 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3217 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3219 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3220 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3221 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3223 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3224 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3225 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3227 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3228 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3229 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3231 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3232 
	#NID_£t˘_CîtReqD©a
 563

	)

3233 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3235 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3236 
	#NID_£t˘_CîtReqTBS
 564

	)

3237 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3239 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3240 
	#NID_£t˘_CîtResD©a
 565

	)

3241 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3243 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3244 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3245 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3247 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3248 
	#NID_£t˘_Eº‹TBS
 567

	)

3249 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3251 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3252 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3253 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3255 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3256 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3257 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3259 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3260 
	#NID_£t˘_AuthReqTBE
 570

	)

3261 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3263 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3264 
	#NID_£t˘_AuthResTBE
 571

	)

3265 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3267 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3268 
	#NID_£t˘_AuthResTBEX
 572

	)

3269 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3271 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3272 
	#NID_£t˘_AuthTokíTBE
 573

	)

3273 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3275 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3276 
	#NID_£t˘_C≠TokíTBE
 574

	)

3277 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3279 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3280 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3281 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3283 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3284 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3285 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3287 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3288 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3289 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3291 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3292 
	#NID_£t˘_AuthRevResTBE
 578

	)

3293 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3295 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3296 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3297 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3299 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3300 
	#NID_£t˘_C≠ReqTBE
 580

	)

3301 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3303 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3304 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3305 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3307 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3308 
	#NID_£t˘_C≠ResTBE
 582

	)

3309 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3311 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3312 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3313 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3315 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3316 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3317 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3319 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3320 
	#NID_£t˘_C≠RevResTBE
 585

	)

3321 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3323 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3324 
	#NID_£t˘_CªdReqTBE
 586

	)

3325 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3327 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3328 
	#NID_£t˘_CªdReqTBEX
 587

	)

3329 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3331 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3332 
	#NID_£t˘_CªdResTBE
 588

	)

3333 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3335 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3336 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3337 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3339 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3340 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3341 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3343 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3344 
	#NID_£t˘_CªdRevResTBE
 591

	)

3345 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3347 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3348 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3349 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3351 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3352 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3353 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3355 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3356 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3357 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3359 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3360 
	#NID_£t˘_CîtReqTBE
 595

	)

3361 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3363 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3364 
	#NID_£t˘_CîtReqTBEX
 596

	)

3365 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3367 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3368 
	#NID_£t˘_CîtResTBE
 597

	)

3369 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3371 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3372 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3373 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3375 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3376 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3377 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3379 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3380 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3381 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3383 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3384 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3385 
	#NID_£ãxt_gíCry±
 601

	)

3386 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3388 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3389 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3390 
	#NID_£ãxt_miAuth
 602

	)

3391 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3393 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3394 
	#NID_£ãxt_pöSecuª
 603

	)

3395 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3397 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3398 
	#NID_£ãxt_pöAny
 604

	)

3399 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3401 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3402 
	#NID_£ãxt_åack2
 605

	)

3403 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3405 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3406 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3407 
	#NID_£ãxt_cv
 606

	)

3408 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3410 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3411 
	#NID_£t_pﬁicy_roŸ
 607

	)

3412 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3414 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3415 
	#NID_£tCext_hashedRoŸ
 608

	)

3416 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3418 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3419 
	#NID_£tCext_˚πTy≥
 609

	)

3420 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3422 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3423 
	#NID_£tCext_mîchD©a
 610

	)

3424 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3426 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3427 
	#NID_£tCext_cCîtRequúed
 611

	)

3428 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3430 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3431 
	#NID_£tCext_tu¬ñög
 612

	)

3432 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3434 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3435 
	#NID_£tCext_£tExt
 613

	)

3436 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3438 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3439 
	#NID_£tCext_£tQuÆf
 614

	)

3440 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3442 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3443 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3444 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3446 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3447 
	#NID_£tCext_TokíIdítifõr
 616

	)

3448 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3450 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3451 
	#NID_£tCext_Tøck2D©a
 617

	)

3452 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3454 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3455 
	#NID_£tCext_TokíTy≥
 618

	)

3456 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3458 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3459 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3460 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3462 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3463 
	#NID_£tAâr_Cît
 620

	)

3464 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3466 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3467 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3468 
	#NID_£tAâr_PGWYˇp
 621

	)

3469 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3471 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3472 
	#NID_£tAâr_TokíTy≥
 622

	)

3473 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3475 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3476 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3477 
	#NID_£tAâr_IssC≠
 623

	)

3478 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3480 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3481 
	#NID_£t_roŸKeyThumb
 624

	)

3482 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3484 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3485 
	#NID_£t_addPﬁicy
 625

	)

3486 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3488 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3489 
	#NID_£tAâr_Tokí_EMV
 626

	)

3490 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3492 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3493 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3494 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3496 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3497 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3498 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3500 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3501 
	#NID_£tAâr_IssC≠_T2
 629

	)

3502 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3504 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3505 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3506 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3508 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3509 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3510 
	#NID_£tAâr_GíCry±grm
 631

	)

3511 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3513 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3514 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3515 
	#NID_£tAâr_T2Enc
 632

	)

3516 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3518 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3519 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3520 
	#NID_£tAâr_T2˛óπxt
 633

	)

3521 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3523 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3524 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3525 
	#NID_£tAâr_TokICCsig
 634

	)

3526 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3528 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3529 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3530 
	#NID_£tAâr_SecDevSig
 635

	)

3531 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3533 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3534 
	#NID_£t_bønd_IATA_ATA
 636

	)

3535 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3537 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3538 
	#NID_£t_bønd_Döîs
 637

	)

3539 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3541 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3542 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3543 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3545 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3546 
	#NID_£t_bønd_JCB
 639

	)

3547 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3549 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3550 
	#NID_£t_bønd_Viß
 640

	)

3551 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3553 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3554 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3555 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3557 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3558 
	#NID_£t_bønd_Novus
 642

	)

3559 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3561 
	#SN_des_cdmf
 "DES-CDMF"

	)

3562 
	#LN_des_cdmf
 "des-cdmf"

	)

3563 
	#NID_des_cdmf
 643

	)

3564 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3566 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3567 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3568 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3570 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3571 
	#LN_ù£c3
 "ù£c3"

	)

3572 
	#NID_ù£c3
 749

	)

3574 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3575 
	#LN_ù£c4
 "ù£c4"

	)

3576 
	#NID_ù£c4
 750

	)

3578 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3579 
	#NID_whúÕoﬁ
 804

	)

3580 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3582 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3583 
	#NID_¸y±›ro
 805

	)

3584 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3586 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3587 
	#NID_¸y±ocom
 806

	)

3588 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3590 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3591 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3592 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3593 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3595 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3596 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3597 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3598 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3600 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3601 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3602 
	#NID_id_Go°R3411_94
 809

	)

3603 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3605 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3606 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3607 
	#NID_id_HMACGo°R3411_94
 810

	)

3608 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3610 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3611 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3612 
	#NID_id_Go°R3410_2001
 811

	)

3613 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3615 
	#SN_id_Go°R3410_94
 "go°94"

	)

3616 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3617 
	#NID_id_Go°R3410_94
 812

	)

3618 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3620 
	#SN_id_Go°28147_89
 "go°89"

	)

3621 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3622 
	#NID_id_Go°28147_89
 813

	)

3623 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3625 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3626 
	#NID_go°89_˙t
 814

	)

3628 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3629 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3630 
	#NID_id_Go°28147_89_MAC
 815

	)

3631 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3633 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3634 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3635 
	#NID_id_Go°R3411_94_¥f
 816

	)

3636 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3638 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3639 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3640 
	#NID_id_Go°R3410_2001DH
 817

	)

3641 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3643 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3644 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3645 
	#NID_id_Go°R3410_94DH
 818

	)

3646 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3648 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3649 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3650 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3652 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3653 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3654 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3656 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3657 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3658 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3660 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3661 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3662 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3664 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3665 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3666 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3668 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3669 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3670 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3672 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3673 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3674 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3676 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3677 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3678 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3680 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3681 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3682 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3684 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3685 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3686 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3688 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3689 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3690 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3692 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3693 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3694 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3696 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3697 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3698 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3700 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3701 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3702 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3704 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3705 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3706 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3708 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3709 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3710 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3712 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3713 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3714 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3716 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3717 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3718 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3720 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3721 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3722 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3724 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3725 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3726 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3728 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3729 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3730 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3732 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3733 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3734 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3736 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3737 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3738 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3740 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3741 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3742 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3744 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3745 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3746 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3748 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3749 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3750 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3752 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3753 
	#NID_id_Go°R3410_94_a
 845

	)

3754 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3756 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3757 
	#NID_id_Go°R3410_94_aBis
 846

	)

3758 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3760 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3761 
	#NID_id_Go°R3410_94_b
 847

	)

3762 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3764 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3765 
	#NID_id_Go°R3410_94_bBis
 848

	)

3766 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3768 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3769 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3770 
	#NID_id_Go°28147_89_cc
 849

	)

3771 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3773 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3774 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3775 
	#NID_id_Go°R3410_94_cc
 850

	)

3776 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3778 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3779 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3780 
	#NID_id_Go°R3410_2001_cc
 851

	)

3781 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3783 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3784 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3785 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3786 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3788 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3789 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3790 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3791 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3793 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3794 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3795 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3796 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3798 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3799 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3800 
	#NID_ˇmñlü_128_cbc
 751

	)

3801 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3803 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3804 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3805 
	#NID_ˇmñlü_192_cbc
 752

	)

3806 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3808 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3809 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3810 
	#NID_ˇmñlü_256_cbc
 753

	)

3811 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3813 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3815 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3817 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3818 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3819 
	#NID_ˇmñlü_128_ecb
 754

	)

3820 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3822 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3823 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3824 
	#NID_ˇmñlü_128_ofb128
 766

	)

3825 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3827 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3828 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3829 
	#NID_ˇmñlü_128_cfb128
 757

	)

3830 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3832 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3833 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3834 
	#NID_ˇmñlü_192_ecb
 755

	)

3835 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3837 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3838 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3839 
	#NID_ˇmñlü_192_ofb128
 767

	)

3840 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3842 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3843 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3844 
	#NID_ˇmñlü_192_cfb128
 758

	)

3845 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3847 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3848 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3849 
	#NID_ˇmñlü_256_ecb
 756

	)

3850 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3852 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3853 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3854 
	#NID_ˇmñlü_256_ofb128
 768

	)

3855 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3857 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3858 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3859 
	#NID_ˇmñlü_256_cfb128
 759

	)

3860 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3862 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3863 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3864 
	#NID_ˇmñlü_128_cfb1
 760

	)

3866 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3867 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3868 
	#NID_ˇmñlü_192_cfb1
 761

	)

3870 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3871 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3872 
	#NID_ˇmñlü_256_cfb1
 762

	)

3874 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3875 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3876 
	#NID_ˇmñlü_128_cfb8
 763

	)

3878 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3879 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3880 
	#NID_ˇmñlü_192_cfb8
 764

	)

3882 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3883 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3884 
	#NID_ˇmñlü_256_cfb8
 765

	)

3886 
	#SN_kiß
 "KISA"

	)

3887 
	#LN_kiß
 "kiß"

	)

3888 
	#NID_kiß
 773

	)

3889 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3891 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3892 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3893 
	#NID_£ed_ecb
 776

	)

3894 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3896 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3897 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3898 
	#NID_£ed_cbc
 777

	)

3899 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3901 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

3902 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

3903 
	#NID_£ed_cfb128
 779

	)

3904 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

3906 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

3907 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

3908 
	#NID_£ed_ofb128
 778

	)

3909 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

3911 
	#SN_hmac
 "HMAC"

	)

3912 
	#LN_hmac
 "hmac"

	)

3913 
	#NID_hmac
 855

	)

	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

29 
	#OPENSSL_VERSION_NUMBER
 0x10000003

	)

30 #ifde‡
OPENSSL_FIPS


31 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.0e-fù†6 Sï 2011"

	)

33 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.0ê6 Sï 2011"

	)

35 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

86 
	#SHLIB_VERSION_HISTORY
 ""

	)

87 
	#SHLIB_VERSION_NUMBER
 "1.0.0e"

	)

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

236 
	#PKCS7_ty≥_is_í¸y±ed
(
a
) \

237 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

239 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

241 
	#PKCS7_£t_dëached
(
p
,
v
) \

242 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

243 
	#PKCS7_gë_dëached
(
p
) \

244 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

246 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

250 
	#PKCS7_TEXT
 0x1

	)

251 
	#PKCS7_NOCERTS
 0x2

	)

252 
	#PKCS7_NOSIGS
 0x4

	)

253 
	#PKCS7_NOCHAIN
 0x8

	)

254 
	#PKCS7_NOINTERN
 0x10

	)

255 
	#PKCS7_NOVERIFY
 0x20

	)

256 
	#PKCS7_DETACHED
 0x40

	)

257 
	#PKCS7_BINARY
 0x80

	)

258 
	#PKCS7_NOATTR
 0x100

	)

259 
	#PKCS7_NOSMIMECAP
 0x200

	)

260 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

261 
	#PKCS7_CRLFEOL
 0x800

	)

262 
	#PKCS7_STREAM
 0x1000

	)

263 
	#PKCS7_NOCRL
 0x2000

	)

264 
	#PKCS7_PARTIAL
 0x4000

	)

265 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

269 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

270 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

271 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

272 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

273 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

274 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

275 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

276 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

277 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

281 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

282 *
md
,*
Àn
);

283 #i‚de‡
OPENSSL_NO_FP_API


284 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

285 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

287 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

288 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

289 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

290 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

291 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

303 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

304 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

306 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

307 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

309 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

311 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

312 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

313 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

314 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

315 c⁄° 
EVP_MD
 *
dg°
);

316 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

317 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

318 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

319 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

320 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

321 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

322 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

323 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

324 
X509
 *
x509
);

326 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

327 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

328 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

331 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

332 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

333 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

334 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

335 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

337 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

338 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

339 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

340 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

341 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

342 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

343 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

344 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

346 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

347 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

348 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

349 *
d©a
);

350 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

351 *
vÆue
);

352 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

353 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

354 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

355 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

359 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

360 
BIO
 *
d©a
, 
Êags
);

362 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

363 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

364 
Êags
);

366 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

367 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

368 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

369 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

370 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

371 
Êags
);

372 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

374 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

375 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

376 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

377 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

379 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

380 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

381 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

382 c⁄° *
md
, 
mdÀn
);

384 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

385 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

387 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

394 
ERR_lﬂd_PKCS7_°rögs
();

399 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

400 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

401 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

402 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

403 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

404 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

405 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

406 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

407 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

408 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

409 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

410 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

411 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

412 
	#PKCS7_F_PKCS7_CTRL
 104

	)

413 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

414 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

415 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

416 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

417 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

418 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

419 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

420 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

421 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

422 
	#PKCS7_F_PKCS7_FINAL
 134

	)

423 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

424 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

425 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

426 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

427 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

428 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

429 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

430 
	#PKCS7_F_PKCS7_SIGN
 116

	)

431 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

432 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

433 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

434 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

435 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

436 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

437 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

438 
	#PKCS7_F_SMIME_TEXT
 123

	)

441 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

442 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

443 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

444 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

445 
	#PKCS7_R_CTRL_ERROR
 152

	)

446 
	#PKCS7_R_DECODE_ERROR
 130

	)

447 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

448 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

449 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

450 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

451 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

452 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

453 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

454 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

455 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

456 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

457 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

458 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

459 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

460 
	#PKCS7_R_NO_CONTENT
 122

	)

461 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

462 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

463 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

464 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

465 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

466 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

467 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

468 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

469 
	#PKCS7_R_NO_SIGNERS
 142

	)

470 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

471 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

472 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

473 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

474 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

475 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

476 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

477 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

478 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

479 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

480 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

481 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

482 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

483 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

484 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

485 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

486 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

487 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

488 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

489 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

490 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

491 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

492 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

493 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

494 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 
_pqueue
 *
	tpqueue
;

69 
	s_pôem


71 
	m¥i‹ôy
[8];

72 *
	md©a
;

73 
_pôem
 *
	m√xt
;

74 } 
	tpôem
;

76 
_pôem
 *
	tpôî©‹
;

78 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

79 
pôem_‰ì
(
pôem
 *
ôem
);

81 
pqueue
 
pqueue_√w
();

82 
pqueue_‰ì
(
pqueue
 
pq
);

84 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

85 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

87 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

88 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

91 
pqueue_¥öt
(
pqueue
 
pq
);

92 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

394 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

395 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

396 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

397 
	#X509_VP_FLAG_LOCKED
 0x8

	)

398 
	#X509_VP_FLAG_ONCE
 0x10

	)

401 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

402 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

403 | 
X509_V_FLAG_INHIBIT_ANY
 \

404 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

406 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

407 
X509_NAME
 *
«me
);

408 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

409 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

410 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

411 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

412 
X509_STORE
 *
X509_STORE_√w
();

413 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

415 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

416 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

417 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

418 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

419 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

420 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

422 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

423 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

425 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

427 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

429 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

430 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

431 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

432 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

433 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

435 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

437 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

438 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

440 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

441 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

443 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

444 
X509_OBJECT
 *
ªt
);

446 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

447 
¨gl
, **
ªt
);

449 #i‚de‡
OPENSSL_NO_STDIO


450 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

451 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

452 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

456 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

457 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

458 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

459 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

460 
X509_OBJECT
 *
ªt
);

461 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

462 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

463 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

464 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

465 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

466 
Àn
, 
X509_OBJECT
 *
ªt
);

467 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

469 #i‚de‡
OPENSSL_NO_STDIO


470 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

471 c⁄° *
fûe
, c⁄° *
dú
);

472 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

475 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

476 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

477 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

478 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

479 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

480 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

481 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

482 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

483 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

484 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

486 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

487 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

488 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

489 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

490 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

491 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

492 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

493 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

494 
puΩo£
, 
åu°
);

495 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

496 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

497 
time_t
 
t
);

498 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

499 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

501 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

502 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

504 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

505 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

506 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

510 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

511 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

512 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

513 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

514 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

515 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

516 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

517 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

518 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

519 
Êags
);

520 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

521 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

522 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

523 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

524 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

525 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

526 
ASN1_OBJECT
 *
pﬁicy
);

527 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

528 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

529 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

531 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

532 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

533 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

535 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

536 
STACK_OF
(
X509
Ë*
˚πs
,

537 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

538 
Êags
);

540 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

542 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

543 
X509_POLICY_LEVEL
 *

544 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

546 
STACK_OF
(
X509_POLICY_NODE
) *

547 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

549 
STACK_OF
(
X509_POLICY_NODE
) *

550 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

552 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

554 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

556 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

558 
STACK_OF
(
POLICYQUALINFO
) *

559 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

560 c⁄° 
X509_POLICY_NODE
 *

561 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

563 #ifde‡ 
__˝lu•lus


	@/usr/include/sys/timeb.h

19 #i‚de‡
_SYS_TIMEB_H


20 
	#_SYS_TIMEB_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

28 
__BEGIN_DECLS


32 
	stimeb


34 
time_t
 
	mtime
;

35 
	mmûlôm
;

36 
	mtimez⁄e
;

37 
	md°Êag
;

42 
·ime
 (
timeb
 *
__timebuf
);

44 
	g__END_DECLS


	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_ÁnŸify_öô


	)

13 
	#__°ub_ÁnŸify_m¨k


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_¥limô


	)

21 
	#__°ub_¥limô64


	)

22 
	#__°ub_putmsg


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

	@/usr/include/krb5/krb5.h

2 #i‚de‡
KRB5_KRB5_H_INCLUDED


3 
	#KRB5_KRB5_H_INCLUDED


	)

59 #i‚de‡
KRB5_GENERAL__


60 
	#KRB5_GENERAL__


	)

63 #i‚de‡
KRB5_DEPRECATED


64 
	#KRB5_DEPRECATED
 0

	)

67 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

68 
	~<T¨gëC⁄dôi⁄Æs.h
>

69 #i‡
TARGET_RT_MAC_CFM


74 #i‡
deföed
(
_MSDOS
Ë|| deföed(
_WIN32
)

75 
	~<wö-mac.h
>

78 #i‚de‡
KRB5_CONFIG__


79 #i‚de‡
KRB5_CALLCONV


80 
	#KRB5_CALLCONV


	)

81 
	#KRB5_CALLCONV_C


	)

85 #i‚de‡
KRB5_CALLCONV_WRONG


86 
	#KRB5_CALLCONV_WRONG


	)

89 #i‚de‡
THREEPARAMOPEN


90 
	#THREEPARAMOPEN
(
x
,
y
,
z
Ë
	`›í
(x,y,z)

	)

93 #i‡
KRB5_PRIVATE


94 #i‚de‡
WRITABLEFOPEN


95 
	#WRITABLEFOPEN
(
x
,
y
Ë
	`f›í
(x,y)

	)

99 
	#KRB5_OLD_CRYPTO


	)

101 
	~<°dlib.h
>

102 
	~<limôs.h
>

103 
	~<°d¨g.h
>

105 #i‚de‡
KRB5INT_BEGIN_DECLS


106 #i‡
deföed
(
__˝lu•lus
)

107 
	#KRB5INT_BEGIN_DECLS
 "C" {

	)

108 
	#KRB5INT_END_DECLS
 }

	)

110 
	#KRB5INT_BEGIN_DECLS


	)

111 
	#KRB5INT_END_DECLS


	)

115 
KRB5INT_BEGIN_DECLS


117 #i‡
TARGET_OS_MAC


118 #¥agm®
∑ck
(
push
,2)

121 #i‡(
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
) >= 30203

122 
	#KRB5_ATTR_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

123 #ñi‡
deföed
 
_WIN32


124 
	#KRB5_ATTR_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

126 
	#KRB5_ATTR_DEPRECATED


	)

130 
_¥ofûe_t
;

141 
	tkrb5_o˘ë
;

143 #i‡
INT_MAX
 == 0x7fff

144 
	tkrb5_öt16
;

145 
	tkrb5_ui_2
;

146 #ñi‡
SHRT_MAX
 == 0x7fff

147 
	tkrb5_öt16
;

148 
	tkrb5_ui_2
;

150 #îr‹ 
undeföed
 16 
bô
 
ty≥


153 #i‡
INT_MAX
 == 0x7fffffffL

154 
	tkrb5_öt32
;

155 
	tkrb5_ui_4
;

156 #ñi‡
LONG_MAX
 == 0x7fffffffL

157 
	tkrb5_öt32
;

158 
	tkrb5_ui_4
;

159 #ñi‡
SHRT_MAX
 == 0x7fffffffL

160 
	tkrb5_öt32
;

161 
	tkrb5_ui_4
;

163 #îr‹: 
undeföed
 32 
bô
 
ty≥


166 
	#VALID_INT_BITS
 
INT_MAX


	)

167 
	#VALID_UINT_BITS
 
UINT_MAX


	)

169 
	#KRB5_INT32_MAX
 2147483647

	)

172 
	#KRB5_INT32_MIN
 (-
KRB5_INT32_MAX
-1)

	)

174 
	#KRB5_INT16_MAX
 65535

	)

177 
	#KRB5_INT16_MIN
 (-
KRB5_INT16_MAX
-1)

	)

191 #i‚de‡
FALSE


192 
	#FALSE
 0

	)

194 #i‚de‡
TRUE


195 
	#TRUE
 1

	)

198 
	tkrb5_boﬁón
;

199 
	tkrb5_msgty≥
;

200 
	tkrb5_kvno
;

202 
krb5_öt32
 
	tkrb5_addπy≥
;

203 
krb5_öt32
 
	tkrb5_í˘y≥
;

204 
krb5_öt32
 
	tkrb5_cksumty≥
;

205 
krb5_öt32
 
	tkrb5_authd©©y≥
;

206 
krb5_öt32
 
	tkrb5_keyußge
;

207 
krb5_öt32
 
	tkrb5_¸y±Ÿy≥
;

209 
krb5_öt32
 
	tkrb5_¥óuthty≥
;

210 
krb5_öt32
 
	tkrb5_Êags
;

211 
krb5_öt32
 
	tkrb5_time°amp
;

212 
krb5_öt32
 
	tkrb5_îr‹_code
;

213 
krb5_öt32
 
	tkrb5_dñèt
;

215 
krb5_îr‹_code
 
	tkrb5_magic
;

217 
	s_krb5_d©a
 {

218 
krb5_magic
 
	mmagic
;

219 
	mÀngth
;

220 *
	md©a
;

221 } 
	tkrb5_d©a
;

223 
	s_krb5_o˘ë_d©a
 {

224 
krb5_magic
 
	mmagic
;

225 
	mÀngth
;

226 
krb5_o˘ë
 *
	md©a
;

227 } 
	tkrb5_o˘ë_d©a
;

235 
	#SALT_TYPE_AFS_LENGTH
 
UINT_MAX


	)

236 
	#SALT_TYPE_NO_LENGTH
 
UINT_MAX


	)

238 * 
	tkrb5_poöãr
;

239 c⁄° * 
	tkrb5_c⁄°_poöãr
;

241 
	skrb5_¥öcùÆ_d©a
 {

242 
krb5_magic
 
	mmagic
;

243 
krb5_d©a
 
	mªÆm
;

244 
krb5_d©a
 *
	md©a
;

245 
krb5_öt32
 
	mÀngth
;

246 
krb5_öt32
 
	mty≥
;

247 } 
	tkrb5_¥öcùÆ_d©a
;

249 
krb5_¥öcùÆ_d©a
 * 
	tkrb5_¥öcùÆ
;

256 
	#KRB5_NT_UNKNOWN
 0

	)

258 
	#KRB5_NT_PRINCIPAL
 1

	)

260 
	#KRB5_NT_SRV_INST
 2

	)

262 
	#KRB5_NT_SRV_HST
 3

	)

264 
	#KRB5_NT_SRV_XHST
 4

	)

266 
	#KRB5_NT_UID
 5

	)

268 
	#KRB5_NT_X500_PRINCIPAL
 6

	)

270 
	#KRB5_NT_SMTP_NAME
 7

	)

272 
	#KRB5_NT_ENTERPRISE_PRINCIPAL
 10

	)

273 
	#KRB5_NT_WELLKNOWN
 11

	)

275 
	#KRB5_WELLKNOWN_NAMESTR
 "WELLKNOWN"

	)

277 
	#KRB5_NT_MS_PRINCIPAL
 -128

	)

279 
	#KRB5_NT_MS_PRINCIPAL_AND_ID
 -129

	)

281 
	#KRB5_NT_ENT_PRINCIPAL_AND_ID
 -130

	)

284 c⁄° 
	tkrb5_¥öcùÆ_d©a
 *
	tkrb5_c⁄°_¥öcùÆ
;

286 
	#krb5_¥öc_ªÆm
(
c⁄ãxt
, 
¥öc
Ë(&’röc)->
ªÆm
)

	)

287 
	#krb5_¥öc_£t_ªÆm
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë(’röc)->
ªÆm
 = *(vÆue))

	)

288 
	#krb5_¥öc_£t_ªÆm_Àngth
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
Àngth
 = (vÆue)

	)

289 
	#krb5_¥öc_£t_ªÆm_d©a
(
c⁄ãxt
, 
¥öc
,
vÆue
Ë’röc)->
ªÆm
.
d©a
 = (vÆue)

	)

290 
	#krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
Ë’röc)->
Àngth


	)

291 
	#krb5_¥öc_ty≥
(
c⁄ãxt
, 
¥öc
Ë’röc)->
ty≥


	)

292 
	#krb5_¥öc_«me
(
c⁄ãxt
, 
¥öc
Ë’röc)->
d©a


	)

293 
	#krb5_¥öc_comp⁄ít
(
c⁄ãxt
, 
¥öc
,
i
) \

294 (((
i
Ë< 
	`krb5_¥öc_size
(
c⁄ãxt
, 
¥öc
)) \

295 ? (
¥öc
)->
d©a
 + (
i
) \

296 : 
NULL
)

	)

301 
	#KRB5_REFERRAL_REALM
 ""

	)

306 
krb5_boﬁón
 
KRB5_CALLCONV
 
krb5_is_ª„ºÆ_ªÆm
(c⁄° 
krb5_d©a
 *);

309 c⁄° 
krb5_d©a
 *
KRB5_CALLCONV
 
krb5_™⁄ymous_ªÆm
();

310 
krb5_c⁄°_¥öcùÆ
 
KRB5_CALLCONV
 
krb5_™⁄ymous_¥öcùÆ
();

312 
	#KRB5_ANONYMOUS_REALMSTR
 "WELLKNOWN:ANONYMOUS"

	)

313 
	#KRB5_ANONYMOUS_PRINCSTR
 "ANONYMOUS"

	)

323 
	s_krb5_addªss
 {

324 
krb5_magic
 
	mmagic
;

325 
krb5_addπy≥
 
	maddπy≥
;

326 
	mÀngth
;

327 
krb5_o˘ë
 *
	mc⁄ã¡s
;

328 } 
	tkrb5_addªss
;

331 
	#ADDRTYPE_INET
 0x0002

	)

332 
	#ADDRTYPE_CHAOS
 0x0005

	)

333 
	#ADDRTYPE_XNS
 0x0006

	)

334 
	#ADDRTYPE_ISO
 0x0007

	)

335 
	#ADDRTYPE_DDP
 0x0010

	)

336 
	#ADDRTYPE_NETBIOS
 0x0014

	)

337 
	#ADDRTYPE_INET6
 0x0018

	)

339 
	#ADDRTYPE_ADDRPORT
 0x0100

	)

340 
	#ADDRTYPE_IPPORT
 0x0101

	)

343 
	#ADDRTYPE_IS_LOCAL
(
addπy≥
Ë◊ddπy≥ & 0x8000)

	)

350 
	g_krb5_c⁄ãxt
;

351 
_krb5_c⁄ãxt
 * 
	tkrb5_c⁄ãxt
;

353 
	g_krb5_auth_c⁄ãxt
;

354 
_krb5_auth_c⁄ãxt
 * 
	tkrb5_auth_c⁄ãxt
;

356 
	g_krb5_¸y±osy°em_íåy
;

363 
	s_krb5_keyblock
 {

364 
krb5_magic
 
	mmagic
;

365 
krb5_í˘y≥
 
	mí˘y≥
;

366 
	mÀngth
;

367 
krb5_o˘ë
 *
	mc⁄ã¡s
;

368 } 
	tkrb5_keyblock
;

377 
	gkrb5_key_°
;

378 
krb5_key_°
 *
	tkrb5_key
;

380 #ifde‡
KRB5_OLD_CRYPTO


381 
	s_krb5_í¸y±_block
 {

382 
krb5_magic
 
	mmagic
;

383 
krb5_í˘y≥
 
	m¸y±o_íåy
;

386 
krb5_keyblock
 *
	mkey
;

387 } 
	tkrb5_í¸y±_block
;

390 
	s_krb5_checksum
 {

391 
krb5_magic
 
	mmagic
;

392 
krb5_cksumty≥
 
	mchecksum_ty≥
;

393 
	mÀngth
;

394 
krb5_o˘ë
 *
	mc⁄ã¡s
;

395 } 
	tkrb5_checksum
;

397 
	s_krb5_íc_d©a
 {

398 
krb5_magic
 
	mmagic
;

399 
krb5_í˘y≥
 
	mí˘y≥
;

400 
krb5_kvno
 
	mkvno
;

401 
krb5_d©a
 
	mcùhîãxt
;

402 } 
	tkrb5_íc_d©a
;

404 
	s_krb5_¸y±o_iov
 {

405 
krb5_¸y±Ÿy≥
 
	mÊags
;

406 
krb5_d©a
 
	md©a
;

407 } 
	tkrb5_¸y±o_iov
;

410 
	#ENCTYPE_NULL
 0x0000

	)

411 
	#ENCTYPE_DES_CBC_CRC
 0x0001

	)

412 
	#ENCTYPE_DES_CBC_MD4
 0x0002

	)

413 
	#ENCTYPE_DES_CBC_MD5
 0x0003

	)

414 
	#ENCTYPE_DES_CBC_RAW
 0x0004

	)

416 
	#ENCTYPE_DES3_CBC_SHA
 0x0005

	)

417 
	#ENCTYPE_DES3_CBC_RAW
 0x0006

	)

418 
	#ENCTYPE_DES_HMAC_SHA1
 0x0008

	)

420 
	#ENCTYPE_DSA_SHA1_CMS
 0x0009

	)

421 
	#ENCTYPE_MD5_RSA_CMS
 0x000®

	)

422 
	#ENCTYPE_SHA1_RSA_CMS
 0x000b

	)

423 
	#ENCTYPE_RC2_CBC_ENV
 0x000¯

	)

424 
	#ENCTYPE_RSA_ENV
 0x000d

	)

425 
	#ENCTYPE_RSA_ES_OAEP_ENV
 0x000ê

	)

426 
	#ENCTYPE_DES3_CBC_ENV
 0x000‡

	)

428 
	#ENCTYPE_DES3_CBC_SHA1
 0x0010

	)

429 
	#ENCTYPE_AES128_CTS_HMAC_SHA1_96
 0x0011

	)

430 
	#ENCTYPE_AES256_CTS_HMAC_SHA1_96
 0x0012

	)

431 
	#ENCTYPE_ARCFOUR_HMAC
 0x0017

	)

432 
	#ENCTYPE_ARCFOUR_HMAC_EXP
 0x0018

	)

433 
	#ENCTYPE_UNKNOWN
 0x01ff

	)

435 
	#CKSUMTYPE_CRC32
 0x0001

	)

436 
	#CKSUMTYPE_RSA_MD4
 0x0002

	)

437 
	#CKSUMTYPE_RSA_MD4_DES
 0x0003

	)

438 
	#CKSUMTYPE_DESCBC
 0x0004

	)

441 
	#CKSUMTYPE_RSA_MD5
 0x0007

	)

442 
	#CKSUMTYPE_RSA_MD5_DES
 0x0008

	)

443 
	#CKSUMTYPE_NIST_SHA
 0x0009

	)

444 
	#CKSUMTYPE_HMAC_SHA1_DES3
 0x000c

	)

445 
	#CKSUMTYPE_HMAC_SHA1_96_AES128
 0x000f

	)

446 
	#CKSUMTYPE_HMAC_SHA1_96_AES256
 0x0010

	)

447 
	#CKSUMTYPE_MD5_HMAC_ARCFOUR
 -137

	)

448 
	#CKSUMTYPE_HMAC_MD5_ARCFOUR
 -138

	)

459 
	mKRB5_C_RANDSOURCE_OLDAPI
 = 0,

460 
	mKRB5_C_RANDSOURCE_OSRAND
 = 1,

461 
	mKRB5_C_RANDSOURCE_TRUSTEDPARTY
 = 2,

466 
	mKRB5_C_RANDSOURCE_TIMING
 = 3,

467 
	mKRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL
 = 4,

468 
	mKRB5_C_RANDSOURCE_MAX
 = 5

471 #i‚de‡
krb5_roundup


473 
	#krb5_roundup
(
x
, 
y
Ë((((xË+ (yË- 1)/(y))*(y))

	)

479 
	#krb5_x
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),1))

	)

480 
	#krb5_xc
(
±r
,
¨gs
Ë(’å)?((*’å)Ë¨gs):(
	`ab‹t
(),(*)0))

	)

482 
	#krb5_x
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

483 
	#krb5_xc
(
±r
,
¨gs
Ë((*’å)Ë¨gs)

	)

486 
krb5_îr‹_code
 
KRB5_CALLCONV


487 
krb5_c_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

488 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

489 c⁄° 
krb5_d©a
 *
öput
, 
krb5_íc_d©a
 *
ouçut
);

491 
krb5_îr‹_code
 
KRB5_CALLCONV


492 
krb5_c_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

493 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

494 c⁄° 
krb5_íc_d©a
 *
öput
, 
krb5_d©a
 *
ouçut
);

496 
krb5_îr‹_code
 
KRB5_CALLCONV


497 
krb5_c_í¸y±_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

498 
size_t
 
öpuéí
, size_à*
Àngth
);

500 
krb5_îr‹_code
 
KRB5_CALLCONV


501 
krb5_c_block_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

502 
size_t
 *
blocksize
);

504 
krb5_îr‹_code
 
KRB5_CALLCONV


505 
krb5_c_keyÀngths
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

506 
size_t
 *
keybyãs
, size_à*
keyÀngth
);

508 
krb5_îr‹_code
 
KRB5_CALLCONV


509 
krb5_c_öô_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

510 
krb5_keyußge
 
ußge
, 
krb5_d©a
 *
√w_°©e
);

512 
krb5_îr‹_code
 
KRB5_CALLCONV


513 
krb5_c_‰ì_°©e
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

514 
krb5_d©a
 *
°©e
);

516 
krb5_îr‹_code
 
KRB5_CALLCONV


517 
krb5_c_¥f
(
krb5_c⁄ãxt
, c⁄° 
krb5_keyblock
 *, 
krb5_d©a
 *
ö
, krb5_d©®*
out
);

519 
krb5_îr‹_code
 
KRB5_CALLCONV


520 
krb5_c_¥f_Àngth
(
krb5_c⁄ãxt
, 
krb5_í˘y≥
, 
size_t
 *
ouéí
);

522 
krb5_îr‹_code
 
KRB5_CALLCONV


523 
krb5_c_fx_cf2_sim∂e
(
krb5_c⁄ãxt
 
c⁄ãxt
,

524 
krb5_keyblock
 *
k1
, c⁄° *
≥µî1
,

525 
krb5_keyblock
 *
k2
, c⁄° *
≥µî2
,

526 
krb5_keyblock
 **
out
);

537 
krb5_îr‹_code
 
KRB5_CALLCONV


538 
krb5_c_make_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

539 
krb5_keyblock
 *
k5_øndom_key
);

541 
krb5_îr‹_code
 
KRB5_CALLCONV


542 
krb5_c_øndom_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

543 
krb5_d©a
 *
øndom_d©a
, 
krb5_keyblock
 *
k5_øndom_key
);

550 
krb5_îr‹_code
 
KRB5_CALLCONV


551 
krb5_c_øndom_add_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
øndsour˚_id
,

552 c⁄° 
krb5_d©a
 *
d©a
);

554 
krb5_îr‹_code
 
KRB5_CALLCONV


555 
krb5_c_øndom_make_o˘ës
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

566 
krb5_îr‹_code
 
KRB5_CALLCONV


567 
krb5_c_øndom_os_íå›y
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
°r⁄g
, *
suc˚ss
);

569  
krb5_îr‹_code
 
KRB5_CALLCONV


570 
krb5_c_øndom_£ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

572 
krb5_îr‹_code
 
KRB5_CALLCONV


573 
krb5_c_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

574 c⁄° 
krb5_d©a
 *
°rög
, c⁄° krb5_d©®*
ß…
,

575 
krb5_keyblock
 *
key
);

577 
krb5_îr‹_code
 
KRB5_CALLCONV


578 
krb5_c_°rög_to_key_wôh_∑øms
(
krb5_c⁄ãxt
 
c⁄ãxt
,

579 
krb5_í˘y≥
 
í˘y≥
,

580 c⁄° 
krb5_d©a
 *
°rög
,

581 c⁄° 
krb5_d©a
 *
ß…
,

582 c⁄° 
krb5_d©a
 *
∑øms
,

583 
krb5_keyblock
 *
key
);

585 
krb5_îr‹_code
 
KRB5_CALLCONV


586 
krb5_c_í˘y≥_com∑ª
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
e1
, krb5_í˘y≥ 
e2
,

587 
krb5_boﬁón
 *
simû¨
);

589 
krb5_îr‹_code
 
KRB5_CALLCONV


590 
krb5_c_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

591 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

592 c⁄° 
krb5_d©a
 *
öput
, 
krb5_checksum
 *
cksum
);

594 
krb5_îr‹_code
 
KRB5_CALLCONV


595 
krb5_c_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

596 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
d©a
,

597 c⁄° 
krb5_checksum
 *
cksum
, 
krb5_boﬁón
 *
vÆid
);

599 
krb5_îr‹_code
 
KRB5_CALLCONV


600 
krb5_c_checksum_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

601 
size_t
 *
Àngth
);

603 
krb5_îr‹_code
 
KRB5_CALLCONV


604 
krb5_c_keyed_checksum_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

605 *
cou¡
, 
krb5_cksumty≥
 **
cksumty≥s
);

607 
	#KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS
 1

	)

608 
	#KRB5_KEYUSAGE_KDC_REP_TICKET
 2

	)

609 
	#KRB5_KEYUSAGE_AS_REP_ENCPART
 3

	)

610 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY
 4

	)

611 
	#KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY
 5

	)

612 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM
 6

	)

613 
	#KRB5_KEYUSAGE_TGS_REQ_AUTH
 7

	)

614 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY
 8

	)

615 
	#KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY
 9

	)

616 
	#KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM
 10

	)

617 
	#KRB5_KEYUSAGE_AP_REQ_AUTH
 11

	)

618 
	#KRB5_KEYUSAGE_AP_REP_ENCPART
 12

	)

619 
	#KRB5_KEYUSAGE_KRB_PRIV_ENCPART
 13

	)

620 
	#KRB5_KEYUSAGE_KRB_CRED_ENCPART
 14

	)

621 
	#KRB5_KEYUSAGE_KRB_SAFE_CKSUM
 15

	)

622 
	#KRB5_KEYUSAGE_APP_DATA_ENCRYPT
 16

	)

623 
	#KRB5_KEYUSAGE_APP_DATA_CKSUM
 17

	)

624 
	#KRB5_KEYUSAGE_KRB_ERROR_CKSUM
 18

	)

625 
	#KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM
 19

	)

626 
	#KRB5_KEYUSAGE_AD_MTE
 20

	)

627 
	#KRB5_KEYUSAGE_AD_ITE
 21

	)

631 
	#KRB5_KEYUSAGE_GSS_TOK_MIC
 22

	)

632 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG
 23

	)

633 
	#KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV
 24

	)

637 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_CKSUM
 25

	)

638 
	#KRB5_KEYUSAGE_PA_SAM_CHALLENGE_TRACKID
 26

	)

639 
	#KRB5_KEYUSAGE_PA_SAM_RESPONSE
 27

	)

642 
	#KRB5_KEYUSAGE_PA_REFERRAL
 26

	)

645 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REQUEST
 26

	)

646 
	#KRB5_KEYUSAGE_PA_S4U_X509_USER_REPLY
 27

	)

648 
	#KRB5_KEYUSAGE_AD_SIGNEDPATH
 -21

	)

649 
	#KRB5_KEYUSAGE_PA_PKINIT_KX
 44

	)

651 
	#KRB5_KEYUSAGE_FAST_REQ_CHKSUM
 50

	)

652 
	#KRB5_KEYUSAGE_FAST_ENC
 51

	)

653 
	#KRB5_KEYUSAGE_FAST_REP
 52

	)

654 
	#KRB5_KEYUSAGE_FAST_FINISHED
 53

	)

655 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_CLIENT
 54

	)

656 
	#KRB5_KEYUSAGE_ENC_CHALLENGE_KDC
 55

	)

657 
	#KRB5_KEYUSAGE_AS_REQ
 56

	)

659 
krb5_boﬁón
 
KRB5_CALLCONV
 
krb5_c_vÆid_í˘y≥
(
krb5_í˘y≥
 
kty≥
);

660 
krb5_boﬁón
 
KRB5_CALLCONV
 
krb5_c_vÆid_cksumty≥
(
krb5_cksumty≥
 
˘y≥
);

661 
krb5_boﬁón
 
KRB5_CALLCONV
 
krb5_c_is_cﬁl_¥oof_cksum
(
krb5_cksumty≥
 
˘y≥
);

662 
krb5_boﬁón
 
KRB5_CALLCONV
 
krb5_c_is_keyed_cksum
(
krb5_cksumty≥
 
˘y≥
);

665 
	#KRB5_CRYPTO_TYPE_EMPTY
 0

	)

666 
	#KRB5_CRYPTO_TYPE_HEADER
 1

	)

667 
	#KRB5_CRYPTO_TYPE_DATA
 2

	)

668 
	#KRB5_CRYPTO_TYPE_SIGN_ONLY
 3

	)

669 
	#KRB5_CRYPTO_TYPE_PADDING
 4

	)

670 
	#KRB5_CRYPTO_TYPE_TRAILER
 5

	)

671 
	#KRB5_CRYPTO_TYPE_CHECKSUM
 6

	)

672 
	#KRB5_CRYPTO_TYPE_STREAM
 7

	)

674 
krb5_îr‹_code
 
KRB5_CALLCONV


675 
krb5_c_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

676 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

677 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

679 
krb5_îr‹_code
 
KRB5_CALLCONV


680 
krb5_c_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

681 c⁄° 
krb5_keyblock
 *
key
, 
krb5_keyußge
 
ußge
,

682 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

683 
krb5_boﬁón
 *
vÆid
);

685 
krb5_îr‹_code
 
KRB5_CALLCONV


686 
krb5_c_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

687 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

688 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

690 
krb5_îr‹_code
 
KRB5_CALLCONV


691 
krb5_c_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key
,

692 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
cùhî_°©e
,

693 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

695 
krb5_îr‹_code
 
KRB5_CALLCONV


696 
krb5_c_¸y±o_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

697 
krb5_¸y±Ÿy≥
 
ty≥
, *
size
);

699 
krb5_îr‹_code
 
KRB5_CALLCONV


700 
krb5_c_¸y±o_Àngth_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

701 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

703 
krb5_îr‹_code
 
KRB5_CALLCONV


704 
krb5_c_∑ddög_Àngth
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
,

705 
size_t
 
d©a_Àngth
, *
size
);

707 
krb5_îr‹_code
 
KRB5_CALLCONV


708 
krb5_k_¸óã_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyblock
 *
key_d©a
,

709 
krb5_key
 *
out
);

712 
KRB5_CALLCONV
 
krb5_k_ª„ªn˚_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

715 
KRB5_CALLCONV
 
krb5_k_‰ì_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

717 
krb5_îr‹_code
 
KRB5_CALLCONV


718 
krb5_k_key_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
,

719 
krb5_keyblock
 **
key_d©a
);

721 
krb5_í˘y≥
 
KRB5_CALLCONV


722 
krb5_k_key_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
);

724 
krb5_îr‹_code
 
KRB5_CALLCONV


725 
krb5_k_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

726 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° krb5_d©®*
öput
,

727 
krb5_íc_d©a
 *
ouçut
);

729 
krb5_îr‹_code
 
KRB5_CALLCONV


730 
krb5_k_í¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

731 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

732 
size_t
 
num_d©a
);

734 
krb5_îr‹_code
 
KRB5_CALLCONV


735 
krb5_k_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

736 c⁄° 
krb5_d©a
 *
cùhî_°©e
, c⁄° 
krb5_íc_d©a
 *
öput
,

737 
krb5_d©a
 *
ouçut
);

739 
krb5_îr‹_code
 
KRB5_CALLCONV


740 
krb5_k_de¸y±_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

741 c⁄° 
krb5_d©a
 *
cùhî_°©e
, 
krb5_¸y±o_iov
 *
d©a
,

742 
size_t
 
num_d©a
);

744 
krb5_îr‹_code
 
KRB5_CALLCONV


745 
krb5_k_make_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

746 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
, c⁄° 
krb5_d©a
 *
öput
,

747 
krb5_checksum
 *
cksum
);

749 
krb5_îr‹_code
 
KRB5_CALLCONV


750 
krb5_k_make_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

751 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

752 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
);

754 
krb5_îr‹_code
 
KRB5_CALLCONV


755 
krb5_k_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

756 c⁄° 
krb5_d©a
 *
d©a
, c⁄° 
krb5_checksum
 *
cksum
,

757 
krb5_boﬁón
 *
vÆid
);

759 
krb5_îr‹_code
 
KRB5_CALLCONV


760 
krb5_k_vîify_checksum_iov
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
cksumty≥
,

761 
krb5_key
 
key
, 
krb5_keyußge
 
ußge
,

762 c⁄° 
krb5_¸y±o_iov
 *
d©a
, 
size_t
 
num_d©a
,

763 
krb5_boﬁón
 *
vÆid
);

765 
krb5_îr‹_code
 
KRB5_CALLCONV


766 
krb5_k_¥f
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_key
 
key
, 
krb5_d©a
 *
ö
, krb5_d©®*
out
);

768 #ifde‡
KRB5_OLD_CRYPTO


773 
krb5_îr‹_code
 
KRB5_CALLCONV


774 
krb5_í¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

775 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

776 
krb5_poöãr
 
ivec
);

778 
krb5_îr‹_code
 
KRB5_CALLCONV


779 
krb5_de¸y±
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_poöãr
 
ö±r
,

780 
krb5_poöãr
 
ouçå
, 
size_t
 
size
, 
krb5_í¸y±_block
 *
eblock
,

781 
krb5_poöãr
 
ivec
);

783 
krb5_îr‹_code
 
KRB5_CALLCONV


784 
krb5_¥o˚ss_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

785 c⁄° 
krb5_keyblock
 * 
key
);

787 
krb5_îr‹_code
 
KRB5_CALLCONV


788 
krb5_föish_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 * 
eblock
);

790 
krb5_îr‹_code
 
KRB5_CALLCONV


791 
krb5_°rög_to_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

792 
krb5_keyblock
 * 
keyblock
, c⁄° 
krb5_d©a
 *
d©a
,

793 c⁄° 
krb5_d©a
 *
ß…
);

795 
krb5_îr‹_code
 
KRB5_CALLCONV


796 
krb5_öô_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

797 c⁄° 
krb5_keyblock
 *
keyblock
, 
krb5_poöãr
 *
±r
);

799 
krb5_îr‹_code
 
KRB5_CALLCONV


800 
krb5_föish_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

801 
krb5_poöãr
 *
±r
);

803 
krb5_îr‹_code
 
KRB5_CALLCONV


804 
krb5_øndom_key
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
,

805 
krb5_poöãr
 
±r
, 
krb5_keyblock
 **
keyblock
);

807 
krb5_í˘y≥
 
KRB5_CALLCONV


808 
krb5_eblock_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_í¸y±_block
 *
eblock
);

810 
krb5_îr‹_code
 
KRB5_CALLCONV


811 
krb5_u£_í˘y≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_í¸y±_block
 *
eblock
,

812 
krb5_í˘y≥
 
í˘y≥
);

814 
size_t
 
KRB5_CALLCONV


815 
krb5_í¸y±_size
(
size_t
 
Àngth
, 
krb5_í˘y≥
 
¸y±o
);

817 
size_t
 
KRB5_CALLCONV


818 
krb5_checksum_size
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
);

820 
krb5_îr‹_code
 
KRB5_CALLCONV


821 
krb5_ˇlcuœã_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

822 
krb5_c⁄°_poöãr
 
ö
, 
size_t
 
ö_Àngth
,

823 
krb5_c⁄°_poöãr
 
£ed
, 
size_t
 
£ed_Àngth
,

824 
krb5_checksum
 * 
outcksum
);

826 
krb5_îr‹_code
 
KRB5_CALLCONV


827 
krb5_vîify_checksum
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cksumty≥
 
˘y≥
,

828 c⁄° 
krb5_checksum
 * 
cksum
, 
krb5_c⁄°_poöãr
 
ö
,

829 
size_t
 
ö_Àngth
, 
krb5_c⁄°_poöãr
 
£ed
,

830 
size_t
 
£ed_Àngth
);

846 
	#KDC_OPT_FORWARDABLE
 0x40000000

	)

847 
	#KDC_OPT_FORWARDED
 0x20000000

	)

848 
	#KDC_OPT_PROXIABLE
 0x10000000

	)

849 
	#KDC_OPT_PROXY
 0x08000000

	)

850 
	#KDC_OPT_ALLOW_POSTDATE
 0x04000000

	)

851 
	#KDC_OPT_POSTDATED
 0x02000000

	)

853 
	#KDC_OPT_RENEWABLE
 0x00800000

	)

859 
	#KDC_OPT_CNAME_IN_ADDL_TKT
 0x00020000

	)

860 
	#KDC_OPT_CANONICALIZE
 0x00010000

	)

861 
	#KDC_OPT_REQUEST_ANONYMOUS
 0x00008000

	)

871 
	#KDC_OPT_DISABLE_TRANSITED_CHECK
 0x00000020

	)

872 
	#KDC_OPT_RENEWABLE_OK
 0x00000010

	)

873 
	#KDC_OPT_ENC_TKT_IN_SKEY
 0x00000008

	)

875 
	#KDC_OPT_RENEW
 0x00000002

	)

876 
	#KDC_OPT_VALIDATE
 0x00000001

	)

885 
	#KDC_TKT_COMMON_MASK
 0x54800000

	)

890 
	#AP_OPTS_RESERVED
 0x80000000

	)

891 
	#AP_OPTS_USE_SESSION_KEY
 0x40000000

	)

892 
	#AP_OPTS_MUTUAL_REQUIRED
 0x20000000

	)

920 
	#AP_OPTS_ETYPE_NEGOTIATION
 0x00000002

	)

921 
	#AP_OPTS_USE_SUBKEY
 0x00000001

	)

923 
	#AP_OPTS_WIRE_MASK
 0xfffffff0

	)

926 
	#AD_TYPE_RESERVED
 0x8000

	)

927 
	#AD_TYPE_EXTERNAL
 0x4000

	)

928 
	#AD_TYPE_REGISTERED
 0x2000

	)

930 
	#AD_TYPE_FIELD_TYPE_MASK
 0x1fff

	)

936 
	#TKT_FLG_FORWARDABLE
 0x40000000

	)

937 
	#TKT_FLG_FORWARDED
 0x20000000

	)

938 
	#TKT_FLG_PROXIABLE
 0x10000000

	)

939 
	#TKT_FLG_PROXY
 0x08000000

	)

940 
	#TKT_FLG_MAY_POSTDATE
 0x04000000

	)

941 
	#TKT_FLG_POSTDATED
 0x02000000

	)

942 
	#TKT_FLG_INVALID
 0x01000000

	)

943 
	#TKT_FLG_RENEWABLE
 0x00800000

	)

944 
	#TKT_FLG_INITIAL
 0x00400000

	)

945 
	#TKT_FLG_PRE_AUTH
 0x00200000

	)

946 
	#TKT_FLG_HW_AUTH
 0x00100000

	)

947 
	#TKT_FLG_TRANSIT_POLICY_CHECKED
 0x00080000

	)

948 
	#TKT_FLG_OK_AS_DELEGATE
 0x00040000

	)

949 
	#TKT_FLG_ENC_PA_REP
 0x00010000

	)

950 
	#TKT_FLG_ANONYMOUS
 0x00008000

	)

968 
	#LR_TYPE_THIS_SERVER_ONLY
 0x8000

	)

970 
	#LR_TYPE_INTERPRETATION_MASK
 0x7fff

	)

973 
	#MSEC_DIRBIT
 0x8000

	)

974 
	#MSEC_VAL_MASK
 0x7fff

	)

985 
	#KRB5_PVNO
 5

	)

989 
	#KRB5_AS_REQ
 ((
krb5_msgty≥
)10Ë

	)

990 
	#KRB5_AS_REP
 ((
krb5_msgty≥
)11Ë

	)

991 
	#KRB5_TGS_REQ
 ((
krb5_msgty≥
)12Ë

	)

992 
	#KRB5_TGS_REP
 ((
krb5_msgty≥
)13Ë

	)

993 
	#KRB5_AP_REQ
 ((
krb5_msgty≥
)14Ë

	)

994 
	#KRB5_AP_REP
 ((
krb5_msgty≥
)15Ë

	)

995 
	#KRB5_SAFE
 ((
krb5_msgty≥
)20Ë

	)

996 
	#KRB5_PRIV
 ((
krb5_msgty≥
)21Ë

	)

997 
	#KRB5_CRED
 ((
krb5_msgty≥
)22Ë

	)

998 
	#KRB5_ERROR
 ((
krb5_msgty≥
)30Ë

	)

1001 
	#KRB5_LRQ_NONE
 0

	)

1002 
	#KRB5_LRQ_ALL_LAST_TGT
 1

	)

1003 
	#KRB5_LRQ_ONE_LAST_TGT
 (-1)

	)

1004 
	#KRB5_LRQ_ALL_LAST_INITIAL
 2

	)

1005 
	#KRB5_LRQ_ONE_LAST_INITIAL
 (-2)

	)

1006 
	#KRB5_LRQ_ALL_LAST_TGT_ISSUED
 3

	)

1007 
	#KRB5_LRQ_ONE_LAST_TGT_ISSUED
 (-3)

	)

1008 
	#KRB5_LRQ_ALL_LAST_RENEWAL
 4

	)

1009 
	#KRB5_LRQ_ONE_LAST_RENEWAL
 (-4)

	)

1010 
	#KRB5_LRQ_ALL_LAST_REQ
 5

	)

1011 
	#KRB5_LRQ_ONE_LAST_REQ
 (-5)

	)

1012 
	#KRB5_LRQ_ALL_PW_EXPTIME
 6

	)

1013 
	#KRB5_LRQ_ONE_PW_EXPTIME
 (-6)

	)

1016 
	#KRB5_PADATA_NONE
 0

	)

1017 
	#KRB5_PADATA_AP_REQ
 1

	)

1018 
	#KRB5_PADATA_TGS_REQ
 
KRB5_PADATA_AP_REQ


	)

1019 
	#KRB5_PADATA_ENC_TIMESTAMP
 2

	)

1020 
	#KRB5_PADATA_PW_SALT
 3

	)

1022 
	#KRB5_PADATA_ENC_ENCKEY
 4

	)

1024 
	#KRB5_PADATA_ENC_UNIX_TIME
 5

	)

1025 
	#KRB5_PADATA_ENC_SANDIA_SECURID
 6

	)

1026 
	#KRB5_PADATA_SESAME
 7

	)

1027 
	#KRB5_PADATA_OSF_DCE
 8

	)

1028 
	#KRB5_CYBERSAFE_SECUREID
 9

	)

1029 
	#KRB5_PADATA_AFS3_SALT
 10

	)

1030 
	#KRB5_PADATA_ETYPE_INFO
 11

	)

1031 
	#KRB5_PADATA_SAM_CHALLENGE
 12

	)

1032 
	#KRB5_PADATA_SAM_RESPONSE
 13

	)

1033 
	#KRB5_PADATA_PK_AS_REQ_OLD
 14

	)

1034 
	#KRB5_PADATA_PK_AS_REP_OLD
 15

	)

1035 
	#KRB5_PADATA_PK_AS_REQ
 16

	)

1036 
	#KRB5_PADATA_PK_AS_REP
 17

	)

1037 
	#KRB5_PADATA_ETYPE_INFO2
 19

	)

1038 
	#KRB5_PADATA_USE_SPECIFIED_KVNO
 20

	)

1039 
	#KRB5_PADATA_SVR_REFERRAL_INFO
 20

	)

1040 
	#KRB5_PADATA_SAM_REDIRECT
 21

	)

1041 
	#KRB5_PADATA_GET_FROM_TYPED_DATA
 22

	)

1042 
	#KRB5_PADATA_REFERRAL
 25

	)

1043 
	#KRB5_PADATA_SAM_CHALLENGE_2
 30

	)

1044 
	#KRB5_PADATA_SAM_RESPONSE_2
 31

	)

1045 
	#KRB5_PADATA_PAC_REQUEST
 128

	)

1046 
	#KRB5_PADATA_FOR_USER
 129

	)

1047 
	#KRB5_PADATA_S4U_X509_USER
 130

	)

1048 
	#KRB5_PADATA_FX_COOKIE
 133

	)

1049 
	#KRB5_PADATA_FX_FAST
 136

	)

1050 
	#KRB5_PADATA_FX_ERROR
 137

	)

1051 
	#KRB5_PADATA_ENCRYPTED_CHALLENGE
 138

	)

1052 
	#KRB5_PADATA_PKINIT_KX
 147

	)

1053 
	#KRB5_ENCPADATA_REQ_ENC_PA_REP
 149

	)

1055 
	#KRB5_SAM_USE_SAD_AS_KEY
 0x80000000

	)

1056 
	#KRB5_SAM_SEND_ENCRYPTED_SAD
 0x40000000

	)

1057 
	#KRB5_SAM_MUST_PK_ENCRYPT_SAD
 0x20000000

	)

1060 
	#KRB5_PADATA_DASS
 16

	)

1063 
	#KRB5_DOMAIN_X500_COMPRESS
 1

	)

1066 
	#KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE
 64

	)

1069 
	#KRB5_AUTHDATA_IF_RELEVANT
 1

	)

1070 
	#KRB5_AUTHDATA_KDC_ISSUED
 4

	)

1071 
	#KRB5_AUTHDATA_AND_OR
 5

	)

1072 
	#KRB5_AUTHDATA_MANDATORY_FOR_KDC
 8

	)

1073 
	#KRB5_AUTHDATA_INITIAL_VERIFIED_CAS
 9

	)

1074 
	#KRB5_AUTHDATA_OSF_DCE
 64

	)

1075 
	#KRB5_AUTHDATA_SESAME
 65

	)

1076 
	#KRB5_AUTHDATA_WIN2K_PAC
 128

	)

1077 
	#KRB5_AUTHDATA_ETYPE_NEGOTIATION
 129

	)

1078 
	#KRB5_AUTHDATA_SIGNTICKET
 512

	)

1079 
	#KRB5_AUTHDATA_FX_ARMOR
 71

	)

1082 
	#KRB5_KPASSWD_SUCCESS
 0

	)

1083 
	#KRB5_KPASSWD_MALFORMED
 1

	)

1084 
	#KRB5_KPASSWD_HARDERROR
 2

	)

1085 
	#KRB5_KPASSWD_AUTHERROR
 3

	)

1086 
	#KRB5_KPASSWD_SOFTERROR
 4

	)

1089 
	#KRB5_KPASSWD_ACCESSDENIED
 5

	)

1090 
	#KRB5_KPASSWD_BAD_VERSION
 6

	)

1091 
	#KRB5_KPASSWD_INITIAL_FLAG_NEEDED
 7

	)

1098 
	s_krb5_tickë_times
 {

1099 
krb5_time°amp
 
	mauthtime
;

1101 
krb5_time°amp
 
	m°¨âime
;

1103 
krb5_time°amp
 
	mídtime
;

1104 
krb5_time°amp
 
	mª√w_tûl
;

1105 } 
	tkrb5_tickë_times
;

1108 
	s_krb5_authd©a
 {

1109 
krb5_magic
 
	mmagic
;

1110 
krb5_authd©©y≥
 
	mad_ty≥
;

1111 
	mÀngth
;

1112 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1113 } 
	tkrb5_authd©a
;

1116 
	s_krb5_å™sôed
 {

1117 
krb5_magic
 
	mmagic
;

1118 
krb5_o˘ë
 
	må_ty≥
;

1119 
krb5_d©a
 
	må_c⁄ã¡s
;

1120 } 
	tkrb5_å™sôed
;

1122 
	s_krb5_íc_tkt_∑π
 {

1123 
krb5_magic
 
	mmagic
;

1125 
krb5_Êags
 
	mÊags
;

1126 
krb5_keyblock
 *
	m£ssi⁄
;

1127 
krb5_¥öcùÆ
 
	m˛õ¡
;

1128 
krb5_å™sôed
 
	må™sôed
;

1129 
krb5_tickë_times
 
	mtimes
;

1130 
krb5_addªss
 **
	mˇddrs
;

1131 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1132 } 
	tkrb5_íc_tkt_∑π
;

1134 
	s_krb5_tickë
 {

1135 
krb5_magic
 
	mmagic
;

1137 
krb5_¥öcùÆ
 
	m£rvî
;

1138 
krb5_íc_d©a
 
	míc_∑π
;

1140 
krb5_íc_tkt_∑π
 *
	míc_∑π2
;

1142 } 
	tkrb5_tickë
;

1145 
	s_krb5_authítiˇt‹
 {

1146 
krb5_magic
 
	mmagic
;

1147 
krb5_¥öcùÆ
 
	m˛õ¡
;

1148 
krb5_checksum
 *
	mchecksum
;

1149 
krb5_öt32
 
	mcu£c
;

1150 
krb5_time°amp
 
	m˘ime
;

1151 
krb5_keyblock
 *
	msubkey
;

1152 
krb5_ui_4
 
	m£q_numbî
;

1153 
krb5_authd©a
 **
	mauth‹iz©i⁄_d©a
;

1154 } 
	tkrb5_authítiˇt‹
;

1156 
	s_krb5_tkt_authít
 {

1157 
krb5_magic
 
	mmagic
;

1158 
krb5_tickë
 *
	mtickë
;

1159 
krb5_authítiˇt‹
 *
	mauthítiˇt‹
;

1160 
krb5_Êags
 
	m≠_›ti⁄s
;

1161 } 
	tkrb5_tkt_authít
;

1164 
	s_krb5_¸eds
 {

1165 
krb5_magic
 
	mmagic
;

1166 
krb5_¥öcùÆ
 
	m˛õ¡
;

1167 
krb5_¥öcùÆ
 
	m£rvî
;

1168 
krb5_keyblock
 
	mkeyblock
;

1169 
krb5_tickë_times
 
	mtimes
;

1170 
krb5_boﬁón
 
	mis_skey
;

1172 
krb5_Êags
 
	mtickë_Êags
;

1173 
krb5_addªss
 **
	maddªs£s
;

1174 
krb5_d©a
 
	mtickë
;

1175 
krb5_d©a
 
	m£c⁄d_tickë
;

1178 
krb5_authd©a
 **
	mauthd©a
;

1179 } 
	tkrb5_¸eds
;

1182 
	s_krb5_œ°_ªq_íåy
 {

1183 
krb5_magic
 
	mmagic
;

1184 
krb5_öt32
 
	mÃ_ty≥
;

1185 
krb5_time°amp
 
	mvÆue
;

1186 } 
	tkrb5_œ°_ªq_íåy
;

1189 
	s_krb5_∑_d©a
 {

1190 
krb5_magic
 
	mmagic
;

1191 
krb5_¥óuthty≥
 
	m∑_ty≥
;

1192 
	mÀngth
;

1193 
krb5_o˘ë
 *
	mc⁄ã¡s
;

1194 } 
	tkrb5_∑_d©a
;

1202 
	s_krb5_ty≥d_d©a
 {

1203 
krb5_magic
 
	mmagic
;

1204 
krb5_öt32
 
	mty≥
;

1205 
	mÀngth
;

1206 
krb5_o˘ë
 *
	md©a
;

1207 } 
	tkrb5_ty≥d_d©a
;

1209 
	s_krb5_kdc_ªq
 {

1210 
krb5_magic
 
	mmagic
;

1211 
krb5_msgty≥
 
	mmsg_ty≥
;

1212 
krb5_∑_d©a
 **
	m∑d©a
;

1214 
krb5_Êags
 
	mkdc_›ti⁄s
;

1215 
krb5_¥öcùÆ
 
	m˛õ¡
;

1216 
krb5_¥öcùÆ
 
	m£rvî
;

1218 
krb5_time°amp
 
	m‰om
;

1219 
krb5_time°amp
 
	mtûl
;

1220 
krb5_time°amp
 
	mπime
;

1221 
krb5_öt32
 
	mn⁄˚
;

1222 
	mnkty≥s
;

1223 
krb5_í˘y≥
 *
	mkty≥
;

1224 
krb5_addªss
 **
	maddªs£s
;

1225 
krb5_íc_d©a
 
	mauth‹iz©i⁄_d©a
;

1226 
krb5_authd©a
 **
	mu√nc_authd©a
;

1228 
krb5_tickë
 **
	m£c⁄d_tickë
;

1235 * 
	mkdc_°©e
;

1236 } 
	tkrb5_kdc_ªq
;

1238 
	s_krb5_íc_kdc_ªp_∑π
 {

1239 
krb5_magic
 
	mmagic
;

1241 
krb5_msgty≥
 
	mmsg_ty≥
;

1242 
krb5_keyblock
 *
	m£ssi⁄
;

1243 
krb5_œ°_ªq_íåy
 **
	mœ°_ªq
;

1244 
krb5_öt32
 
	mn⁄˚
;

1245 
krb5_time°amp
 
	mkey_exp
;

1246 
krb5_Êags
 
	mÊags
;

1247 
krb5_tickë_times
 
	mtimes
;

1248 
krb5_¥öcùÆ
 
	m£rvî
;

1249 
krb5_addªss
 **
	mˇddrs
;

1251 
krb5_∑_d©a
 **
	míc_∑d©a
;

1252 } 
	tkrb5_íc_kdc_ªp_∑π
;

1254 
	s_krb5_kdc_ªp
 {

1255 
krb5_magic
 
	mmagic
;

1257 
krb5_msgty≥
 
	mmsg_ty≥
;

1258 
krb5_∑_d©a
 **
	m∑d©a
;

1259 
krb5_¥öcùÆ
 
	m˛õ¡
;

1260 
krb5_tickë
 *
	mtickë
;

1261 
krb5_íc_d©a
 
	míc_∑π
;

1263 
krb5_íc_kdc_ªp_∑π
 *
	míc_∑π2
;

1264 } 
	tkrb5_kdc_ªp
;

1267 
	s_krb5_îr‹
 {

1268 
krb5_magic
 
	mmagic
;

1270 
krb5_time°amp
 
	m˘ime
;

1271 
krb5_öt32
 
	mcu£c
;

1272 
krb5_öt32
 
	msu£c
;

1273 
krb5_time°amp
 
	m°ime
;

1274 
krb5_ui_4
 
	mîr‹
;

1275 
krb5_¥öcùÆ
 
	m˛õ¡
;

1277 
krb5_¥öcùÆ
 
	m£rvî
;

1278 
krb5_d©a
 
	mãxt
;

1279 
krb5_d©a
 
	me_d©a
;

1280 } 
	tkrb5_îr‹
;

1282 
	s_krb5_≠_ªq
 {

1283 
krb5_magic
 
	mmagic
;

1284 
krb5_Êags
 
	m≠_›ti⁄s
;

1285 
krb5_tickë
 *
	mtickë
;

1286 
krb5_íc_d©a
 
	mauthítiˇt‹
;

1287 } 
	tkrb5_≠_ªq
;

1289 
	s_krb5_≠_ªp
 {

1290 
krb5_magic
 
	mmagic
;

1291 
krb5_íc_d©a
 
	míc_∑π
;

1292 } 
	tkrb5_≠_ªp
;

1294 
	s_krb5_≠_ªp_íc_∑π
 {

1295 
krb5_magic
 
	mmagic
;

1296 
krb5_time°amp
 
	m˘ime
;

1297 
krb5_öt32
 
	mcu£c
;

1298 
krb5_keyblock
 *
	msubkey
;

1299 
krb5_ui_4
 
	m£q_numbî
;

1300 } 
	tkrb5_≠_ªp_íc_∑π
;

1302 
	s_krb5_ª•⁄£
 {

1303 
krb5_magic
 
	mmagic
;

1304 
krb5_o˘ë
 
	mmesßge_ty≥
;

1305 
krb5_d©a
 
	mª•⁄£
;

1306 
krb5_öt32
 
	mex≥˘ed_n⁄˚
;

1307 
krb5_time°amp
 
	mªque°_time
;

1308 } 
	tkrb5_ª•⁄£
;

1310 
	s_krb5_¸ed_öfo
 {

1311 
krb5_magic
 
	mmagic
;

1312 
krb5_keyblock
 *
	m£ssi⁄
;

1314 
krb5_¥öcùÆ
 
	m˛õ¡
;

1315 
krb5_¥öcùÆ
 
	m£rvî
;

1316 
krb5_Êags
 
	mÊags
;

1317 
krb5_tickë_times
 
	mtimes
;

1319 
krb5_addªss
 **
	mˇddrs
;

1320 } 
	tkrb5_¸ed_öfo
;

1322 
	s_krb5_¸ed_íc_∑π
 {

1323 
krb5_magic
 
	mmagic
;

1324 
krb5_öt32
 
	mn⁄˚
;

1325 
krb5_time°amp
 
	mtime°amp
;

1326 
krb5_öt32
 
	mu£c
;

1327 
krb5_addªss
 *
	ms_addªss
;

1328 
krb5_addªss
 *
	mr_addªss
;

1329 
krb5_¸ed_öfo
 **
	mtickë_öfo
;

1330 } 
	tkrb5_¸ed_íc_∑π
;

1332 
	s_krb5_¸ed
 {

1333 
krb5_magic
 
	mmagic
;

1334 
krb5_tickë
 **
	mtickës
;

1335 
krb5_íc_d©a
 
	míc_∑π
;

1336 
krb5_¸ed_íc_∑π
 *
	míc_∑π2
;

1337 } 
	tkrb5_¸ed
;

1340 
	s_∑sswd_phø£_ñemít
 {

1341 
krb5_magic
 
	mmagic
;

1342 
krb5_d©a
 *
	m∑sswd
;

1343 
krb5_d©a
 *
	mphø£
;

1344 } 
	t∑sswd_phø£_ñemít
;

1346 
	s_krb5_pwd_d©a
 {

1347 
krb5_magic
 
	mmagic
;

1348 
	m£quí˚_cou¡
;

1349 
∑sswd_phø£_ñemít
 **
	mñemít
;

1350 } 
	tkrb5_pwd_d©a
;

1357 
	s_krb5_∑_svr_ª„ºÆ_d©a
 {

1359 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

1360 } 
	tkrb5_∑_svr_ª„ºÆ_d©a
;

1362 
	s_krb5_∑_£rvî_ª„ºÆ_d©a
 {

1363 
krb5_d©a
 *
	mª„ºed_ªÆm
;

1364 
krb5_¥öcùÆ
 
	måue_¥öcùÆ_«me
;

1365 
krb5_¥öcùÆ
 
	mªque°ed_¥öcùÆ_«me
;

1366 
krb5_time°amp
 
	mª„ºÆ_vÆid_u¡û
;

1367 
krb5_checksum
 
	mªp_cksum
;

1368 } 
	tkrb5_∑_£rvî_ª„ºÆ_d©a
;

1370 
	s_krb5_∑_∑c_ªq
 {

1372 
krb5_boﬁón
 
	mö˛ude_∑c
;

1373 } 
	tkrb5_∑_∑c_ªq
;

1379 
	#KRB5_AUTH_CONTEXT_DO_TIME
 0x00000001

	)

1380 
	#KRB5_AUTH_CONTEXT_RET_TIME
 0x00000002

	)

1381 
	#KRB5_AUTH_CONTEXT_DO_SEQUENCE
 0x00000004

	)

1382 
	#KRB5_AUTH_CONTEXT_RET_SEQUENCE
 0x00000008

	)

1383 
	#KRB5_AUTH_CONTEXT_PERMIT_ALL
 0x00000010

	)

1384 
	#KRB5_AUTH_CONTEXT_USE_SUBKEY
 0x00000020

	)

1386 
	skrb5_ª∂ay_d©a
 {

1387 
krb5_time°amp
 
	mtime°amp
;

1388 
krb5_öt32
 
	mu£c
;

1389 
krb5_ui_4
 
	m£q
;

1390 } 
	tkrb5_ª∂ay_d©a
;

1393 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR
 0x00000001

	)

1394 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR
 0x00000002

	)

1395 
	#KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR
 0x00000004

	)

1396 
	#KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR
 0x00000008

	)

1401 
	gkrb5_îr‹_code


1402 (
	tKRB5_CALLCONV
 * 
	tkrb5_mk_ªq_checksum_func
Ë(
	tkrb5_c⁄ãxt
, 
	tkrb5_auth_c⁄ãxt
 , *,

1403 
	tkrb5_d©a
 **);

1414 
krb5_poöãr
 
	tkrb5_cc_curs‹
;

1416 
	g_krb5_cˇche
;

1417 
_krb5_cˇche
 *
	tkrb5_cˇche
;

1418 
	g_krb5_cc_›s
;

1419 
_krb5_cc_›s
 
	tkrb5_cc_›s
;

1424 
	g_krb5_cccﬁ_curs‹
;

1425 
_krb5_cccﬁ_curs‹
 *
	tkrb5_cccﬁ_curs‹
;

1428 
	#KRB5_TC_MATCH_TIMES
 0x00000001

	)

1429 
	#KRB5_TC_MATCH_IS_SKEY
 0x00000002

	)

1430 
	#KRB5_TC_MATCH_FLAGS
 0x00000004

	)

1431 
	#KRB5_TC_MATCH_TIMES_EXACT
 0x00000008

	)

1432 
	#KRB5_TC_MATCH_FLAGS_EXACT
 0x00000010

	)

1433 
	#KRB5_TC_MATCH_AUTHDATA
 0x00000020

	)

1434 
	#KRB5_TC_MATCH_SRV_NAMEONLY
 0x00000040

	)

1435 
	#KRB5_TC_MATCH_2ND_TKT
 0x00000080

	)

1436 
	#KRB5_TC_MATCH_KTYPE
 0x00000100

	)

1437 
	#KRB5_TC_SUPPORTED_KTYPES
 0x00000200

	)

1440 
	#KRB5_TC_OPENCLOSE
 0x00000001

	)

1441 
	#KRB5_TC_NOTICKET
 0x00000002

	)

1443 c⁄° * 
KRB5_CALLCONV


1444 
krb5_cc_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

1446 
krb5_îr‹_code
 
KRB5_CALLCONV


1447 
krb5_cc_gí_√w
 (
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 *
ˇche
);

1449 
krb5_îr‹_code
 
KRB5_CALLCONV


1450 
krb5_cc_öôülize
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

1451 
krb5_¥öcùÆ
 
¥öcùÆ
);

1453 
krb5_îr‹_code
 
KRB5_CALLCONV


1454 
krb5_cc_de°roy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

1456 
krb5_îr‹_code
 
KRB5_CALLCONV


1457 
krb5_cc_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

1459 
krb5_îr‹_code
 
KRB5_CALLCONV


1460 
krb5_cc_°‹e_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_¸eds
 *
¸eds
);

1462 
krb5_îr‹_code
 
KRB5_CALLCONV


1463 
krb5_cc_ªåõve_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

1464 
krb5_Êags
 
Êags
, 
krb5_¸eds
 *
m¸eds
,

1465 
krb5_¸eds
 *
¸eds
);

1467 
krb5_îr‹_code
 
KRB5_CALLCONV


1468 
krb5_cc_gë_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

1469 
krb5_¥öcùÆ
 *
¥öcùÆ
);

1471 
krb5_îr‹_code
 
KRB5_CALLCONV


1472 
krb5_cc_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

1473 
krb5_cc_curs‹
 *
curs‹
);

1475 
krb5_îr‹_code
 
KRB5_CALLCONV


1476 
krb5_cc_√xt_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

1477 
krb5_cc_curs‹
 *
curs‹
, 
krb5_¸eds
 *
¸eds
);

1479 
krb5_îr‹_code
 
KRB5_CALLCONV


1480 
krb5_cc_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
,

1481 
krb5_cc_curs‹
 *
curs‹
);

1483 
krb5_îr‹_code
 
KRB5_CALLCONV


1484 
krb5_cc_ªmove_¸ed
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
,

1485 
krb5_¸eds
 *
¸eds
);

1487 
krb5_îr‹_code
 
KRB5_CALLCONV


1488 
krb5_cc_£t_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 
Êags
);

1490 
krb5_îr‹_code
 
KRB5_CALLCONV


1491 
krb5_cc_gë_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
, 
krb5_Êags
 *
Êags
);

1493 c⁄° * 
KRB5_CALLCONV


1494 
krb5_cc_gë_ty≥
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
ˇche
);

1496 
krb5_îr‹_code
 
KRB5_CALLCONV


1497 
krb5_cc_move
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
§c
, krb5_cˇchê
d°
);

1499 
krb5_îr‹_code
 
KRB5_CALLCONV


1500 
krb5_cc_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

1501 
krb5_time°amp
 *
ch™ge_time
);

1503 
krb5_îr‹_code
 
KRB5_CALLCONV


1504 
krb5_cc_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

1506 
krb5_îr‹_code
 
KRB5_CALLCONV


1507 
krb5_cc_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
);

1509 
krb5_îr‹_code
 
KRB5_CALLCONV


1510 
krb5_cccﬁ_curs‹_√w
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

1512 
krb5_îr‹_code
 
KRB5_CALLCONV


1513 
krb5_cccﬁ_curs‹_√xt
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 
curs‹
,

1514 
krb5_cˇche
 *
cˇche
);

1516 
krb5_îr‹_code
 
KRB5_CALLCONV


1517 
krb5_cccﬁ_curs‹_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cccﬁ_curs‹
 *
curs‹
);

1519 
krb5_îr‹_code
 
KRB5_CALLCONV


1520 
krb5_cccﬁ_œ°_ch™ge_time
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_time°amp
 *
ch™ge_time
);

1522 
krb5_îr‹_code
 
KRB5_CALLCONV


1523 
krb5_cccﬁ_lock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

1525 
krb5_îr‹_code
 
KRB5_CALLCONV


1526 
krb5_cccﬁ_u∆ock
(
krb5_c⁄ãxt
 
c⁄ãxt
);

1528 
krb5_îr‹_code
 
KRB5_CALLCONV


1529 
krb5_cc_√w_unique
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
ty≥
, c⁄° *
höt
,

1530 
krb5_cˇche
 *
id
);

1540 
	gkrb5_rc_°
;

1541 
krb5_rc_°
 *
	tkrb5_rˇche
;

1553 
	#MAX_KEYTAB_NAME_LEN
 1100

	)

1555 
krb5_poöãr
 
	tkrb5_kt_curs‹
;

1557 
	skrb5_keyèb_íåy_°
 {

1558 
krb5_magic
 
	mmagic
;

1559 
krb5_¥öcùÆ
 
	m¥öcùÆ
;

1560 
krb5_time°amp
 
	mtime°amp
;

1561 
krb5_kvno
 
	mvno
;

1562 
krb5_keyblock
 
	mkey
;

1563 } 
	tkrb5_keyèb_íåy
;

1565 
	g_krb5_kt
;

1566 
_krb5_kt
 *
	tkrb5_keyèb
;

1568 c⁄° * 
KRB5_CALLCONV


1569 
krb5_kt_gë_ty≥
(
krb5_c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

1571 
krb5_îr‹_code
 
KRB5_CALLCONV


1572 
krb5_kt_gë_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
, *
«me
,

1573 
«mñí
);

1575 
krb5_îr‹_code
 
KRB5_CALLCONV


1576 
krb5_kt_˛o£
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
);

1578 
krb5_îr‹_code
 
KRB5_CALLCONV


1579 
krb5_kt_gë_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

1580 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
, 
krb5_kvno
 
vno
,

1581 
krb5_í˘y≥
 
í˘y≥
, 
krb5_keyèb_íåy
 *
íåy
);

1583 
krb5_îr‹_code
 
KRB5_CALLCONV


1584 
krb5_kt_°¨t_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

1585 
krb5_kt_curs‹
 *
curs‹
);

1587 
krb5_îr‹_code
 
KRB5_CALLCONV


1588 
krb5_kt_√xt_íåy
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

1589 
krb5_keyèb_íåy
 *
íåy
, 
krb5_kt_curs‹
 *
curs‹
);

1591 
krb5_îr‹_code
 
KRB5_CALLCONV


1592 
krb5_kt_íd_£q_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_keyèb
 
keyèb
,

1593 
krb5_kt_curs‹
 *
curs‹
);

1603 
krb5_îr‹_code
 
KRB5_CALLCONV
 
krb5_öô_c⁄ãxt
(
krb5_c⁄ãxt
 *);

1604 
krb5_îr‹_code
 
KRB5_CALLCONV
 
krb5_öô_£cuª_c⁄ãxt
(
krb5_c⁄ãxt
 *);

1605 
KRB5_CALLCONV
 
krb5_‰ì_c⁄ãxt
(
krb5_c⁄ãxt
);

1606 
krb5_îr‹_code
 
KRB5_CALLCONV
 
krb5_c›y_c⁄ãxt
(
krb5_c⁄ãxt
, krb5_context *);

1608 
krb5_îr‹_code
 
KRB5_CALLCONV


1609 
krb5_£t_deÁu…_tgs_í˘y≥s
(
krb5_c⁄ãxt
, c⁄° 
krb5_í˘y≥
 *);

1611 
krb5_îr‹_code
 
KRB5_CALLCONV


1612 
krb5_gë_≥rmôãd_í˘y≥s
(
krb5_c⁄ãxt
, 
krb5_í˘y≥
 **);

1614 
krb5_boﬁón
 
KRB5_CALLCONV
 
krb5_is_thªad_ß„
();

1618 
krb5_îr‹_code
 
KRB5_CALLCONV


1619 
krb5_£rvî_de¸y±_tickë_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_keyèb
 
kt
,

1620 
krb5_tickë
 *
tickë
);

1622 
KRB5_CALLCONV
 
krb5_‰ì_tgt_¸eds
(
krb5_c⁄ãxt
, 
krb5_¸eds
 **);

1624 
	#KRB5_GC_USER_USER
 1

	)

1625 
	#KRB5_GC_CACHED
 2

	)

1626 
	#KRB5_GC_CANONICALIZE
 4

	)

1627 
	#KRB5_GC_NO_STORE
 8

	)

1628 
	#KRB5_GC_FORWARDABLE
 16

	)

1629 
	#KRB5_GC_NO_TRANSIT_CHECK
 32

	)

1630 
	#KRB5_GC_CONSTRAINED_DELEGATION
 64

	)

1632 
krb5_îr‹_code
 
KRB5_CALLCONV


1633 
krb5_gë_¸edítüls
(
krb5_c⁄ãxt
, 
krb5_Êags
, 
krb5_cˇche
, 
krb5_¸eds
 *,

1634 
krb5_¸eds
 **);

1636 
krb5_îr‹_code
 
KRB5_CALLCONV


1637 
krb5_gë_¸edítüls_vÆid©e
(
krb5_c⁄ãxt
, 
krb5_Êags
, 
krb5_cˇche
,

1638 
krb5_¸eds
 *, krb5_creds **);

1640 
krb5_îr‹_code
 
KRB5_CALLCONV


1641 
krb5_gë_¸edítüls_ª√w
(
krb5_c⁄ãxt
, 
krb5_Êags
, 
krb5_cˇche
, 
krb5_¸eds
 *,

1642 
krb5_¸eds
 **);

1644 
krb5_îr‹_code
 
KRB5_CALLCONV


1645 
krb5_mk_ªq
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *, 
krb5_Êags
, *, *,

1646 
krb5_d©a
 *, 
krb5_cˇche
, krb5_data *);

1648 
krb5_îr‹_code
 
KRB5_CALLCONV


1649 
krb5_mk_ªq_exãnded
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *, 
krb5_Êags
,

1650 
krb5_d©a
 *, 
krb5_¸eds
 *, krb5_data * );

1652 
krb5_îr‹_code
 
KRB5_CALLCONV


1653 
krb5_mk_ªp
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_d©a
 *);

1655 
krb5_îr‹_code
 
KRB5_CALLCONV


1656 
krb5_mk_ªp_d˚
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_d©a
 *);

1658 
krb5_îr‹_code
 
KRB5_CALLCONV


1659 
krb5_rd_ªp
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, c⁄° 
krb5_d©a
 *,

1660 
krb5_≠_ªp_íc_∑π
 **);

1662 
krb5_îr‹_code
 
KRB5_CALLCONV


1663 
krb5_rd_ªp_d˚
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, c⁄° 
krb5_d©a
 *,

1664 
krb5_ui_4
 *);

1666 
krb5_îr‹_code
 
KRB5_CALLCONV


1667 
krb5_mk_îr‹
(
krb5_c⁄ãxt
, c⁄° 
krb5_îr‹
 *, 
krb5_d©a
 *);

1669 
krb5_îr‹_code
 
KRB5_CALLCONV


1670 
krb5_rd_îr‹
(
krb5_c⁄ãxt
, c⁄° 
krb5_d©a
 *, 
krb5_îr‹
 **);

1672 
krb5_îr‹_code
 
KRB5_CALLCONV


1673 
krb5_rd_ß„
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, c⁄° 
krb5_d©a
 *, krb5_data *,

1674 
krb5_ª∂ay_d©a
 *);

1676 
krb5_îr‹_code
 
KRB5_CALLCONV


1677 
krb5_rd_¥iv
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, c⁄° 
krb5_d©a
 *, krb5_data *,

1678 
krb5_ª∂ay_d©a
 *);

1680 
krb5_îr‹_code
 
KRB5_CALLCONV


1681 
krb5_∑r£_«me
(
krb5_c⁄ãxt
, c⁄° *, 
krb5_¥öcùÆ
 *);

1683 
	#KRB5_PRINCIPAL_PARSE_NO_REALM
 0x1

	)

1684 
	#KRB5_PRINCIPAL_PARSE_REQUIRE_REALM
 0x2

	)

1685 
	#KRB5_PRINCIPAL_PARSE_ENTERPRISE
 0x4

	)

1686 
krb5_îr‹_code
 
KRB5_CALLCONV


1687 
krb5_∑r£_«me_Êags
(
krb5_c⁄ãxt
, c⁄° *, , 
krb5_¥öcùÆ
 *);

1689 
krb5_îr‹_code
 
KRB5_CALLCONV


1690 
krb5_u≈¨£_«me
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, **);

1692 
krb5_îr‹_code
 
KRB5_CALLCONV


1693 
krb5_u≈¨£_«me_ext
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, **,

1696 
	#KRB5_PRINCIPAL_UNPARSE_SHORT
 0x1

	)

1697 
	#KRB5_PRINCIPAL_UNPARSE_NO_REALM
 0x2

	)

1698 
	#KRB5_PRINCIPAL_UNPARSE_DISPLAY
 0x4

	)

1699 
krb5_îr‹_code
 
KRB5_CALLCONV


1700 
krb5_u≈¨£_«me_Êags
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, , **);

1702 
krb5_îr‹_code
 
KRB5_CALLCONV


1703 
krb5_u≈¨£_«me_Êags_ext
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, ,

1706 
krb5_îr‹_code
 
KRB5_CALLCONV


1707 
krb5_£t_¥öcùÆ_ªÆm
(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
, const *);

1709 
krb5_boﬁón
 
KRB5_CALLCONV_WRONG


1710 
krb5_addªss_£¨ch
(
krb5_c⁄ãxt
, c⁄° 
krb5_addªss
 *, krb5_address *const *);

1712 
krb5_boﬁón
 
KRB5_CALLCONV


1713 
krb5_addªss_com∑ª
(
krb5_c⁄ãxt
, c⁄° 
krb5_addªss
 *, const krb5_address *);

1715 
KRB5_CALLCONV


1716 
krb5_addªss_‹dî
(
krb5_c⁄ãxt
, c⁄° 
krb5_addªss
 *, const krb5_address *);

1718 
krb5_boﬁón
 
KRB5_CALLCONV


1719 
krb5_ªÆm_com∑ª
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, krb5_const_principal);

1721 
krb5_boﬁón
 
KRB5_CALLCONV


1722 
krb5_¥öcùÆ_com∑ª
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
,

1723 
krb5_c⁄°_¥öcùÆ
);

1725 
krb5_boﬁón
 
KRB5_CALLCONV


1726 
krb5_¥öcùÆ_com∑ª_™y_ªÆm
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
,

1727 
krb5_c⁄°_¥öcùÆ
);

1729 
	#KRB5_PRINCIPAL_COMPARE_IGNORE_REALM
 1

	)

1730 
	#KRB5_PRINCIPAL_COMPARE_ENTERPRISE
 2

	)

1731 
	#KRB5_PRINCIPAL_COMPARE_CASEFOLD
 4

	)

1732 
	#KRB5_PRINCIPAL_COMPARE_UTF8
 8

	)

1734 
krb5_boﬁón
 
KRB5_CALLCONV


1735 
krb5_¥öcùÆ_com∑ª_Êags
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
,

1736 
krb5_c⁄°_¥öcùÆ
, );

1738 
krb5_îr‹_code
 
KRB5_CALLCONV


1739 
krb5_öô_keyblock
(
krb5_c⁄ãxt
, 
krb5_í˘y≥
 
í˘y≥
, 
size_t
 
Àngth
,

1740 
krb5_keyblock
 **
out
);

1748 
krb5_îr‹_code
 
KRB5_CALLCONV


1749 
krb5_c›y_keyblock
(
krb5_c⁄ãxt
, c⁄° 
krb5_keyblock
 *, krb5_keyblock **);

1751 
krb5_îr‹_code
 
KRB5_CALLCONV


1752 
krb5_c›y_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
, c⁄° 
krb5_keyblock
 *,

1753 
krb5_keyblock
 *);

1755 
krb5_îr‹_code
 
KRB5_CALLCONV


1756 
krb5_c›y_¸eds
(
krb5_c⁄ãxt
, c⁄° 
krb5_¸eds
 *, krb5_creds **);

1758 
krb5_îr‹_code
 
KRB5_CALLCONV


1759 
krb5_c›y_d©a
(
krb5_c⁄ãxt
, c⁄° 
krb5_d©a
 *, krb5_data **);

1761 
krb5_îr‹_code
 
KRB5_CALLCONV


1762 
krb5_c›y_¥öcùÆ
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, 
krb5_¥öcùÆ
 *);

1764 
krb5_îr‹_code
 
KRB5_CALLCONV


1765 
krb5_c›y_addªs£s
(
krb5_c⁄ãxt
, 
krb5_addªss
 * const *, krb5_address ***);

1767 
krb5_îr‹_code
 
KRB5_CALLCONV


1768 
krb5_c›y_tickë
(
krb5_c⁄ãxt
, c⁄° 
krb5_tickë
 *, krb5_ticket **);

1770 
krb5_îr‹_code
 
KRB5_CALLCONV


1771 
krb5_c›y_authd©a
(
krb5_c⁄ãxt
, 
krb5_authd©a
 * const *, krb5_authdata ***);

1775 
krb5_îr‹_code
 
KRB5_CALLCONV


1776 
krb5_mîge_authd©a
(
krb5_c⁄ãxt
, 
krb5_authd©a
 * const *,

1777 
krb5_authd©a
 *const *, krb5_authdata ***);

1779 
krb5_îr‹_code
 
KRB5_CALLCONV


1780 
krb5_c›y_authítiˇt‹
(
krb5_c⁄ãxt
, c⁄° 
krb5_authítiˇt‹
 *,

1781 
krb5_authítiˇt‹
 **);

1783 
krb5_îr‹_code
 
KRB5_CALLCONV


1784 
krb5_c›y_checksum
(
krb5_c⁄ãxt
, c⁄° 
krb5_checksum
 *, krb5_checksum **);

1786 
krb5_îr‹_code
 
KRB5_CALLCONV


1787 
krb5_gë_£rvî_rˇche
(
krb5_c⁄ãxt
, c⁄° 
krb5_d©a
 *, 
krb5_rˇche
 *);

1789 
krb5_îr‹_code
 
KRB5_CALLCONV_C


1790 
krb5_buûd_¥öcùÆ_ext
(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
 *, ,

1793 
krb5_îr‹_code
 
KRB5_CALLCONV_C


1794 
	$krb5_buûd_¥öcùÆ
(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
 *, ,

1796 #i‡
__GNUC__
 >= 4

1797 
	`__©åibuã__
 ((
£¡öñ
))

1800 #i‡
KRB5_DEPRECATED


1801 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


1802 
	`krb5_buûd_¥öcùÆ_va
(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
, ,

1803 c⁄° *, 
va_li°
);

1807 
krb5_îr‹_code
 
KRB5_CALLCONV


1808 
	`krb5_buûd_¥öcùÆ_Æloc_va
(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
 *, ,

1809 c⁄° *, 
va_li°
);

1811 
krb5_îr‹_code
 
KRB5_CALLCONV


1812 
	`krb5_425_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
, c⁄° *
«me
, c⁄° *
ö°™˚
,

1813 c⁄° *
ªÆm
, 
krb5_¥öcùÆ
 *
¥öc
);

1815 
krb5_îr‹_code
 
KRB5_CALLCONV


1816 
	`krb5_524_c⁄v_¥öcùÆ
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
 
¥öc
,

1817 *
«me
, *
ö°
, *
ªÆm
);

1819 
¸edítüls
;

1820 
KRB5_CALLCONV


1821 
	`krb5_524_c⁄vît_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
v5¸eds
,

1822 
¸edítüls
 *
v4¸eds
);

1823 #i‡
KRB5_DEPRECATED


1824 
	#krb524_c⁄vît_¸eds_kdc
 
krb5_524_c⁄vît_¸eds


	)

1825 
	#krb524_öô_ës
(
x
Ë(0)

	)

1829 
krb5_îr‹_code
 
KRB5_CALLCONV


1830 
	`krb5_kt_ªsﬁve
(
krb5_c⁄ãxt
, c⁄° *, 
krb5_keyèb
 *);

1832 
krb5_îr‹_code
 
KRB5_CALLCONV


1833 
	`krb5_kt_deÁu…_«me
(
krb5_c⁄ãxt
, *, );

1835 
krb5_îr‹_code
 
KRB5_CALLCONV


1836 
	`krb5_kt_deÁu…
(
krb5_c⁄ãxt
, 
krb5_keyèb
 * );

1838 
krb5_îr‹_code
 
KRB5_CALLCONV


1839 
	`krb5_‰ì_keyèb_íåy_c⁄ã¡s
(
krb5_c⁄ãxt
, 
krb5_keyèb_íåy
 *);

1843 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_kt_‰ì_íåy
(
krb5_c⁄ãxt
,

1844 
krb5_keyèb_íåy
 * );

1848 
krb5_îr‹_code
 
KRB5_CALLCONV


1849 
	`krb5_kt_ªmove_íåy
(
krb5_c⁄ãxt
, 
krb5_keyèb
, 
krb5_keyèb_íåy
 *);

1851 
krb5_îr‹_code
 
KRB5_CALLCONV


1852 
	`krb5_kt_add_íåy
(
krb5_c⁄ãxt
, 
krb5_keyèb
, 
krb5_keyèb_íåy
 *);

1854 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


1855 
	`krb5_¥öcùÆ2ß…
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, 
krb5_d©a
 *);

1859 
krb5_îr‹_code
 
KRB5_CALLCONV


1860 
	`krb5_cc_ªsﬁve
(
krb5_c⁄ãxt
, c⁄° *, 
krb5_cˇche
 *);

1862 c⁄° *
KRB5_CALLCONV


1863 
	`krb5_cc_deÁu…_«me
(
krb5_c⁄ãxt
);

1865 
krb5_îr‹_code
 
KRB5_CALLCONV


1866 
	`krb5_cc_£t_deÁu…_«me
(
krb5_c⁄ãxt
, const *);

1868 
krb5_îr‹_code
 
KRB5_CALLCONV


1869 
	`krb5_cc_deÁu…
(
krb5_c⁄ãxt
, 
krb5_cˇche
 *);

1871 
krb5_îr‹_code
 
KRB5_CALLCONV


1872 
	`krb5_cc_c›y_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
öcc
, krb5_cˇchê
outcc
);

1874 
krb5_îr‹_code
 
KRB5_CALLCONV


1875 
	`krb5_cc_gë_c⁄fig
(
krb5_c⁄ãxt
, 
krb5_cˇche
,

1876 
krb5_c⁄°_¥öcùÆ
,

1877 c⁄° *, 
krb5_d©a
 *);

1879 
krb5_îr‹_code
 
KRB5_CALLCONV


1880 
	`krb5_cc_£t_c⁄fig
(
krb5_c⁄ãxt
, 
krb5_cˇche
,

1881 
krb5_c⁄°_¥öcùÆ
,

1882 c⁄° *, 
krb5_d©a
 *);

1884 
krb5_boﬁón
 
KRB5_CALLCONV


1885 
	`krb5_is_c⁄fig_¥öcùÆ
(
krb5_c⁄ãxt
,

1886 
krb5_c⁄°_¥öcùÆ
);

1889 
KRB5_CALLCONV
 
	`krb5_‰ì_¥öcùÆ
(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
 );

1890 
KRB5_CALLCONV
 
	`krb5_‰ì_authítiˇt‹
(
krb5_c⁄ãxt
,

1891 
krb5_authítiˇt‹
 * );

1892 
KRB5_CALLCONV
 
	`krb5_‰ì_addªs£s
(
krb5_c⁄ãxt
, 
krb5_addªss
 ** );

1893 
KRB5_CALLCONV
 
	`krb5_‰ì_authd©a
(
krb5_c⁄ãxt
, 
krb5_authd©a
 ** );

1894 
KRB5_CALLCONV
 
	`krb5_‰ì_tickë
(
krb5_c⁄ãxt
, 
krb5_tickë
 * );

1895 
KRB5_CALLCONV
 
	`krb5_‰ì_îr‹
(
krb5_c⁄ãxt
, 
krb5_îr‹
 * );

1896 
KRB5_CALLCONV
 
	`krb5_‰ì_¸eds
(
krb5_c⁄ãxt
, 
krb5_¸eds
 *);

1897 
KRB5_CALLCONV
 
	`krb5_‰ì_¸ed_c⁄ã¡s
(
krb5_c⁄ãxt
, 
krb5_¸eds
 *);

1898 
KRB5_CALLCONV
 
	`krb5_‰ì_checksum
(
krb5_c⁄ãxt
, 
krb5_checksum
 *);

1899 
KRB5_CALLCONV
 
	`krb5_‰ì_checksum_c⁄ã¡s
(
krb5_c⁄ãxt
, 
krb5_checksum
 *);

1900 
KRB5_CALLCONV
 
	`krb5_‰ì_keyblock
(
krb5_c⁄ãxt
, 
krb5_keyblock
 *);

1901 
KRB5_CALLCONV
 
	`krb5_‰ì_keyblock_c⁄ã¡s
(
krb5_c⁄ãxt
, 
krb5_keyblock
 *);

1902 
KRB5_CALLCONV
 
	`krb5_‰ì_≠_ªp_íc_∑π
(
krb5_c⁄ãxt
,

1903 
krb5_≠_ªp_íc_∑π
 *);

1904 
KRB5_CALLCONV
 
	`krb5_‰ì_d©a
(
krb5_c⁄ãxt
, 
krb5_d©a
 *);

1905 
KRB5_CALLCONV
 
	`krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
, 
krb5_d©a
 *);

1906 
KRB5_CALLCONV
 
	`krb5_‰ì_u≈¨£d_«me
(
krb5_c⁄ãxt
, *);

1907 
KRB5_CALLCONV
 
	`krb5_‰ì_cksumty≥s
(
krb5_c⁄ãxt
, 
krb5_cksumty≥
 *);

1910 
krb5_îr‹_code
 
KRB5_CALLCONV


1911 
	`krb5_us_timeofday
(
krb5_c⁄ãxt
, 
krb5_time°amp
 *, 
krb5_öt32
 *);

1913 
krb5_îr‹_code
 
KRB5_CALLCONV


1914 
	`krb5_timeofday
(
krb5_c⁄ãxt
, 
krb5_time°amp
 *);

1917 
krb5_îr‹_code
 
KRB5_CALLCONV


1918 
	`krb5_os_loˇœddr
(
krb5_c⁄ãxt
, 
krb5_addªss
 ***);

1920 
krb5_îr‹_code
 
KRB5_CALLCONV


1921 
	`krb5_gë_deÁu…_ªÆm
(
krb5_c⁄ãxt
, **);

1923 
krb5_îr‹_code
 
KRB5_CALLCONV


1924 
	`krb5_£t_deÁu…_ªÆm
(
krb5_c⁄ãxt
, const * );

1926 
KRB5_CALLCONV


1927 
	`krb5_‰ì_deÁu…_ªÆm
(
krb5_c⁄ãxt
, * );

1929 
krb5_îr‹_code
 
KRB5_CALLCONV


1930 
	`krb5_¢ame_to_¥öcùÆ
(
krb5_c⁄ãxt
, c⁄° *, c⁄° *, 
krb5_öt32
,

1931 
krb5_¥öcùÆ
 *);

1933 
krb5_îr‹_code
 
KRB5_CALLCONV


1934 
	`krb5_ch™ge_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

1935 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

1936 
krb5_d©a
 *
ªsu…_°rög
);

1938 
krb5_îr‹_code
 
KRB5_CALLCONV


1939 
	`krb5_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
, *
√wpw
,

1940 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
, *
ªsu…_code
,

1941 
krb5_d©a
 *
ªsu…_code_°rög
, krb5_d©®*
ªsu…_°rög
);

1943 
krb5_îr‹_code
 
KRB5_CALLCONV


1944 
	`krb5_£t_∑ssw‹d_usög_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_cˇche
 
cˇche
,

1945 *
√wpw
, 
krb5_¥öcùÆ
 
ch™ge_∑ssw‹d_f‹
,

1946 *
ªsu…_code
, 
krb5_d©a
 *
ªsu…_code_°rög
,

1947 
krb5_d©a
 *
ªsu…_°rög
);

1949 
krb5_îr‹_code
 
KRB5_CALLCONV


1950 
	`krb5_gë_¥ofûe
(
krb5_c⁄ãxt
, 
_¥ofûe_t
 * *);

1952 #i‡
KRB5_DEPRECATED


1953 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


1954 
	`krb5_gë_ö_tkt
(
krb5_c⁄ãxt
, 
krb5_Êags
, 
krb5_addªss
 *const *,

1955 
krb5_í˘y≥
 *, 
krb5_¥óuthty≥
 *,

1956 
	$krb5_îr‹_code
 (*)(
krb5_c⁄ãxt
, 
krb5_í˘y≥
, 
krb5_d©a
 *,

1957 
krb5_c⁄°_poöãr
, 
krb5_keyblock
 **),

1958 
krb5_c⁄°_poöãr
,

1959 
	$krb5_îr‹_code
 (*)(
krb5_c⁄ãxt
, c⁄° 
krb5_keyblock
 *,

1960 
krb5_c⁄°_poöãr
, 
krb5_kdc_ªp
 * ),

1961 
krb5_c⁄°_poöãr
, 
krb5_¸eds
 *, 
krb5_cˇche
,

1962 
krb5_kdc_ªp
 **);

1964 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


1965 
	`krb5_gë_ö_tkt_wôh_∑ssw‹d
(
krb5_c⁄ãxt
, 
krb5_Êags
, 
krb5_addªss
 *const *,

1966 
krb5_í˘y≥
 *, 
krb5_¥óuthty≥
 *, const *,

1967 
krb5_cˇche
, 
krb5_¸eds
 *, 
krb5_kdc_ªp
 **);

1969 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


1970 
	`krb5_gë_ö_tkt_wôh_skey
(
krb5_c⁄ãxt
, 
krb5_Êags
, 
krb5_addªss
 *const *,

1971 
krb5_í˘y≥
 *, 
krb5_¥óuthty≥
 *,

1972 c⁄° 
krb5_keyblock
 *, 
krb5_cˇche
, 
krb5_¸eds
 *,

1973 
krb5_kdc_ªp
 **);

1975 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


1976 
	`krb5_gë_ö_tkt_wôh_keyèb
(
krb5_c⁄ãxt
, 
krb5_Êags
, 
krb5_addªss
 *const *,

1977 
krb5_í˘y≥
 *, 
krb5_¥óuthty≥
 *, 
krb5_keyèb
,

1978 
krb5_cˇche
, 
krb5_¸eds
 *, 
krb5_kdc_ªp
 ** );

1981 
krb5_îr‹_code
 
KRB5_CALLCONV


1982 
	`krb5_rd_ªq
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *, c⁄° 
krb5_d©a
 *,

1983 
krb5_c⁄°_¥öcùÆ
, 
krb5_keyèb
, 
krb5_Êags
 *, 
krb5_tickë
 **);

1985 
krb5_îr‹_code
 
KRB5_CALLCONV


1986 
	`krb5_kt_ªad_£rvi˚_key
(
krb5_c⁄ãxt
, 
krb5_poöãr
, 
krb5_¥öcùÆ
, 
krb5_kvno
,

1987 
krb5_í˘y≥
, 
krb5_keyblock
 **);

1989 
krb5_îr‹_code
 
KRB5_CALLCONV


1990 
	`krb5_mk_ß„
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, c⁄° 
krb5_d©a
 *, krb5_data *,

1991 
krb5_ª∂ay_d©a
 *);

1993 
krb5_îr‹_code
 
KRB5_CALLCONV


1994 
	`krb5_mk_¥iv
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, c⁄° 
krb5_d©a
 *, krb5_data *,

1995 
krb5_ª∂ay_d©a
 *);

1997 
krb5_îr‹_code
 
KRB5_CALLCONV


1998 
	`krb5_£ndauth
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *, 
krb5_poöãr
, *,

1999 
krb5_¥öcùÆ
, krb5_¥öcùÆ, 
krb5_Êags
, 
krb5_d©a
 *,

2000 
krb5_¸eds
 *, 
krb5_cˇche
, 
krb5_îr‹
 **,

2001 
krb5_≠_ªp_íc_∑π
 **, 
krb5_¸eds
 **);

2003 
krb5_îr‹_code
 
KRB5_CALLCONV


2004 
	`krb5_ªcvauth
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *, 
krb5_poöãr
, *,

2005 
krb5_¥öcùÆ
, 
krb5_öt32
, 
krb5_keyèb
, 
krb5_tickë
 **);

2007 
krb5_îr‹_code
 
KRB5_CALLCONV


2008 
	`krb5_ªcvauth_vîsi⁄
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *, 
krb5_poöãr
,

2009 
krb5_¥öcùÆ
, 
krb5_öt32
, 
krb5_keyèb
, 
krb5_tickë
 **,

2010 
krb5_d©a
 *);

2012 
krb5_îr‹_code
 
KRB5_CALLCONV


2013 
	`krb5_mk_n¸ed
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_¸eds
 **, 
krb5_d©a
 **,

2014 
krb5_ª∂ay_d©a
 *);

2016 
krb5_îr‹_code
 
KRB5_CALLCONV


2017 
	`krb5_mk_1¸ed
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_¸eds
 *, 
krb5_d©a
 **,

2018 
krb5_ª∂ay_d©a
 *);

2020 
krb5_îr‹_code
 
KRB5_CALLCONV


2021 
	`krb5_rd_¸ed
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_d©a
 *, 
krb5_¸eds
 ***,

2022 
krb5_ª∂ay_d©a
 *);

2024 
krb5_îr‹_code
 
KRB5_CALLCONV


2025 
	`krb5_fwd_tgt_¸eds
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, *, 
krb5_¥öcùÆ
,

2026 
krb5_¥öcùÆ
, 
krb5_cˇche
, 
f‹w¨dabÀ
, 
krb5_d©a
 *);

2028 
krb5_îr‹_code
 
KRB5_CALLCONV


2029 
	`krb5_auth_c⁄_öô
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
 *);

2031 
krb5_îr‹_code
 
KRB5_CALLCONV


2032 
	`krb5_auth_c⁄_‰ì
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
);

2034 
krb5_îr‹_code
 
KRB5_CALLCONV


2035 
	`krb5_auth_c⁄_£tÊags
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_öt32
);

2037 
krb5_îr‹_code
 
KRB5_CALLCONV


2038 
	`krb5_auth_c⁄_gëÊags
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_öt32
 *);

2040 
krb5_îr‹_code
 
KRB5_CALLCONV


2041 
	`krb5_auth_c⁄_£t_checksum_func
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
,

2042 
krb5_mk_ªq_checksum_func
, *);

2044 
krb5_îr‹_code
 
KRB5_CALLCONV


2045 
	`krb5_auth_c⁄_gë_checksum_func
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
,

2046 
krb5_mk_ªq_checksum_func
 *, **);

2048 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


2049 
	`krb5_auth_c⁄_£èddrs
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_addªss
 *,

2050 
krb5_addªss
 *);

2052 
krb5_îr‹_code
 
KRB5_CALLCONV


2053 
	`krb5_auth_c⁄_gëaddrs
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_addªss
 **,

2054 
krb5_addªss
 **);

2056 
krb5_îr‹_code
 
KRB5_CALLCONV


2057 
	`krb5_auth_c⁄_£ç‹ts
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_addªss
 *,

2058 
krb5_addªss
 *);

2060 
krb5_îr‹_code
 
KRB5_CALLCONV


2061 
	`krb5_auth_c⁄_£tu£ru£rkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_keyblock
 *);

2063 
krb5_îr‹_code
 
KRB5_CALLCONV


2064 
	`krb5_auth_c⁄_gëkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_keyblock
 **);

2066 
krb5_îr‹_code
 
KRB5_CALLCONV


2067 
	`krb5_auth_c⁄_gëkey_k
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_key
 *);

2069 
krb5_îr‹_code
 
KRB5_CALLCONV


2070 
	`krb5_auth_c⁄_gë£ndsubkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_keyblock
 **);

2072 
krb5_îr‹_code
 
KRB5_CALLCONV


2073 
	`krb5_auth_c⁄_gë£ndsubkey_k
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_key
 *);

2075 
krb5_îr‹_code
 
KRB5_CALLCONV


2076 
	`krb5_auth_c⁄_gëªcvsubkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_keyblock
 **);

2078 
krb5_îr‹_code
 
KRB5_CALLCONV


2079 
	`krb5_auth_c⁄_gëªcvsubkey_k
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_key
 *);

2081 
krb5_îr‹_code
 
KRB5_CALLCONV


2082 
	`krb5_auth_c⁄_£t£ndsubkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_keyblock
 *);

2084 
krb5_îr‹_code
 
KRB5_CALLCONV


2085 
	`krb5_auth_c⁄_£åecvsubkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_keyblock
 *);

2087 #i‡
KRB5_DEPRECATED


2088 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


2089 
	`krb5_auth_c⁄_gëloˇlsubkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
,

2090 
krb5_keyblock
 **);

2092 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


2093 
	`krb5_auth_c⁄_gëªmŸesubkey
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
,

2094 
krb5_keyblock
 **);

2097 
krb5_îr‹_code
 
KRB5_CALLCONV


2098 
	`krb5_auth_c⁄_gëloˇl£qnumbî
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_öt32
 *);

2100 
krb5_îr‹_code
 
KRB5_CALLCONV


2101 
	`krb5_auth_c⁄_gëªmŸe£qnumbî
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
,

2102 
krb5_öt32
 *);

2104 #i‡
KRB5_DEPRECATED


2105 
KRB5_ATTR_DEPRECATED
 
krb5_îr‹_code
 
KRB5_CALLCONV


2106 
	`krb5_auth_c⁄_öôive˘‹
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
);

2109 
krb5_îr‹_code
 
KRB5_CALLCONV


2110 
	`krb5_auth_c⁄_£åˇche
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_rˇche
);

2112 
krb5_îr‹_code
 
KRB5_CALLCONV_WRONG


2113 
	`krb5_auth_c⁄_gërˇche
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, 
krb5_rˇche
 *);

2115 
krb5_îr‹_code
 
KRB5_CALLCONV


2116 
	`krb5_auth_c⁄_gëauthítiˇt‹
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
,

2117 
krb5_authítiˇt‹
 **);

2119 
krb5_îr‹_code
 
KRB5_CALLCONV


2120 
	`krb5_auth_c⁄_£t_ªq_cksumty≥
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
,

2121 
krb5_cksumty≥
);

2123 
	#KRB5_REALM_BRANCH_CHAR
 '.'

	)

2133 
krb5_îr‹_code
 
KRB5_CALLCONV


2134 
	`krb5_ªad_∑ssw‹d
(
krb5_c⁄ãxt
, const *, const *, *,

2137 
krb5_îr‹_code
 
KRB5_CALLCONV


2138 
	`krb5_™ame_to_loˇ ame
(
krb5_c⁄ãxt
, 
krb5_c⁄°_¥öcùÆ
, , *);

2140 
krb5_îr‹_code
 
KRB5_CALLCONV


2141 
	`krb5_gë_ho°_ªÆm
(
krb5_c⁄ãxt
, const *, ***);

2143 
krb5_îr‹_code
 
KRB5_CALLCONV


2144 
	`krb5_gë_ÁŒback_ho°_ªÆm
(
krb5_c⁄ãxt
, 
krb5_d©a
 *, ***);

2146 
krb5_îr‹_code
 
KRB5_CALLCONV


2147 
	`krb5_‰ì_ho°_ªÆm
(
krb5_c⁄ãxt
, * const * );

2149 
krb5_boﬁón
 
KRB5_CALLCONV


2150 
	`krb5_ku£rok
(
krb5_c⁄ãxt
, 
krb5_¥öcùÆ
, const *);

2152 
krb5_îr‹_code
 
KRB5_CALLCONV


2153 
	`krb5_auth_c⁄_gíaddrs
(
krb5_c⁄ãxt
, 
krb5_auth_c⁄ãxt
, , );

2155 
krb5_îr‹_code
 
KRB5_CALLCONV


2156 
	`krb5_£t_ªÆ_time
(
krb5_c⁄ãxt
, 
krb5_time°amp
, 
krb5_öt32
);

2158 
krb5_îr‹_code
 
KRB5_CALLCONV


2159 
	`krb5_gë_time_off£ts
(
krb5_c⁄ãxt
, 
krb5_time°amp
 *, 
krb5_öt32
 *);

2162 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_°rög_to_í˘y≥
(*, 
krb5_í˘y≥
 *);

2163 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_°rög_to_ß…ty≥
(*, 
krb5_öt32
 *);

2164 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_°rög_to_cksumty≥
(*,

2165 
krb5_cksumty≥
 *);

2166 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_°rög_to_time°amp
(*,

2167 
krb5_time°amp
 *);

2168 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_°rög_to_dñèt
(*, 
krb5_dñèt
 *);

2169 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_í˘y≥_to_°rög
(
krb5_í˘y≥
, *,

2170 
size_t
);

2171 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_ß…ty≥_to_°rög
(
krb5_öt32
, *,

2172 
size_t
);

2173 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_cksumty≥_to_°rög
(
krb5_cksumty≥
, *,

2174 
size_t
);

2175 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_time°amp_to_°rög
(
krb5_time°amp
, *,

2176 
size_t
);

2177 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_time°amp_to_sf°rög
(
krb5_time°amp
,

2178 *, 
size_t
,

2180 
krb5_îr‹_code
 
KRB5_CALLCONV
 
	`krb5_dñèt_to_°rög
(
krb5_dñèt
, *,

2181 
size_t
);

2186 
	#KRB5_TGS_NAME
 "krbtgt"

	)

2187 
	#KRB5_TGS_NAME_SIZE
 6

	)

2190 
	#KRB5_RECVAUTH_SKIP_VERSION
 0x0001

	)

2191 
	#KRB5_RECVAUTH_BADAUTHVERS
 0x0002

	)

2194 
	s_krb5_¥om±
 {

2195 *
¥om±
;

2196 
hiddí
;

2197 
krb5_d©a
 *
ª∂y
;

2198 } 
	tkrb5_¥om±
;

2200 
krb5_îr‹_code


2201 (
	tKRB5_CALLCONV
 *
	tkrb5_¥om±î_f˘
)(
	tkrb5_c⁄ãxt
 
	tc⁄ãxt
, *
	td©a
,

2202 c⁄° *
	t«me
, c⁄° *
	tb™√r
,

2203 
	tnum_¥om±s
, 
	tkrb5_¥om±
 
	t¥om±s
[]);

2205 
krb5_îr‹_code
 
KRB5_CALLCONV


2206 
	`krb5_¥om±î_posix
(
krb5_c⁄ãxt
 
c⁄ãxt
, *
d©a
, c⁄° *
«me
,

2207 c⁄° *
b™√r
, 
num_¥om±s
,

2208 
krb5_¥om±
 
¥om±s
[]);

2210 
	s_krb5_gë_öô_¸eds_›t
 {

2211 
krb5_Êags
 
Êags
;

2212 
krb5_dñèt
 
tkt_li„
;

2213 
krb5_dñèt
 
ª√w_li„
;

2214 
f‹w¨dabÀ
;

2215 
¥oxübÀ
;

2216 
krb5_í˘y≥
 *
ëy≥_li°
;

2217 
ëy≥_li°_Àngth
;

2218 
krb5_addªss
 **
addªss_li°
;

2219 
krb5_¥óuthty≥
 *
¥óuth_li°
;

2220 
¥óuth_li°_Àngth
;

2221 
krb5_d©a
 *
ß…
;

2222 } 
	tkrb5_gë_öô_¸eds_›t
;

2224 
	#KRB5_GET_INIT_CREDS_OPT_TKT_LIFE
 0x0001

	)

2225 
	#KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE
 0x0002

	)

2226 
	#KRB5_GET_INIT_CREDS_OPT_FORWARDABLE
 0x0004

	)

2227 
	#KRB5_GET_INIT_CREDS_OPT_PROXIABLE
 0x0008

	)

2228 
	#KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST
 0x0010

	)

2229 
	#KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST
 0x0020

	)

2230 
	#KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST
 0x0040

	)

2231 
	#KRB5_GET_INIT_CREDS_OPT_SALT
 0x0080

	)

2232 
	#KRB5_GET_INIT_CREDS_OPT_CHG_PWD_PRMPT
 0x0100

	)

2233 
	#KRB5_GET_INIT_CREDS_OPT_CANONICALIZE
 0x0200

	)

2234 
	#KRB5_GET_INIT_CREDS_OPT_ANONYMOUS
 0x0400

	)

2237 
krb5_îr‹_code
 
KRB5_CALLCONV


2238 
	`krb5_gë_öô_¸eds_›t_Æloc
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2239 
krb5_gë_öô_¸eds_›t
 **
›t
);

2241 
KRB5_CALLCONV


2242 
	`krb5_gë_öô_¸eds_›t_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2243 
krb5_gë_öô_¸eds_›t
 *
›t
);

2245 
KRB5_CALLCONV


2246 
	`krb5_gë_öô_¸eds_›t_öô
(
krb5_gë_öô_¸eds_›t
 *
›t
);

2248 
KRB5_CALLCONV


2249 
	`krb5_gë_öô_¸eds_›t_£t_tkt_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2250 
krb5_dñèt
 
tkt_li„
);

2252 
KRB5_CALLCONV


2253 
	`krb5_gë_öô_¸eds_›t_£t_ª√w_li„
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2254 
krb5_dñèt
 
ª√w_li„
);

2256 
KRB5_CALLCONV


2257 
	`krb5_gë_öô_¸eds_›t_£t_f‹w¨dabÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2258 
f‹w¨dabÀ
);

2260 
KRB5_CALLCONV


2261 
	`krb5_gë_öô_¸eds_›t_£t_¥oxübÀ
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2262 
¥oxübÀ
);

2264 
KRB5_CALLCONV


2265 
	`krb5_gë_öô_¸eds_›t_£t_ˇn⁄iˇlize
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2266 
ˇn⁄iˇlize
);

2279 
KRB5_CALLCONV


2280 
	`krb5_gë_öô_¸eds_›t_£t_™⁄ymous
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2281 
™⁄ymous
);

2283 
KRB5_CALLCONV


2284 
	`krb5_gë_öô_¸eds_›t_£t_ëy≥_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2285 
krb5_í˘y≥
 *
ëy≥_li°
,

2286 
ëy≥_li°_Àngth
);

2288 
KRB5_CALLCONV


2289 
	`krb5_gë_öô_¸eds_›t_£t_addªss_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2290 
krb5_addªss
 **
addªs£s
);

2292 
KRB5_CALLCONV


2293 
	`krb5_gë_öô_¸eds_›t_£t_¥óuth_li°
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2294 
krb5_¥óuthty≥
 *
¥óuth_li°
,

2295 
¥óuth_li°_Àngth
);

2297 
KRB5_CALLCONV


2298 
	`krb5_gë_öô_¸eds_›t_£t_ß…
(
krb5_gë_öô_¸eds_›t
 *
›t
,

2299 
krb5_d©a
 *
ß…
);

2301 
KRB5_CALLCONV


2302 
	`krb5_gë_öô_¸eds_›t_£t_ch™ge_∑ssw‹d_¥om±
(
krb5_gë_öô_¸eds_›t


2303 *
›t
, 
¥om±
);

2306 
	s_krb5_gic_›t_∑_d©a
 {

2307 *
©å
;

2308 *
vÆue
;

2309 } 
	tkrb5_gic_›t_∑_d©a
;

2319 
krb5_îr‹_code
 
KRB5_CALLCONV


2320 
	`krb5_gë_öô_¸eds_›t_£t_∑
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2321 
krb5_gë_öô_¸eds_›t
 *
›t
, c⁄° *
©å
,

2322 c⁄° *
vÆue
);

2335 
krb5_îr‹_code
 
KRB5_CALLCONV


2336 
	`krb5_gë_öô_¸eds_›t_£t_Á°_cˇche_«me
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2337 
krb5_gë_öô_¸eds_›t
 *
›t
,

2338 c⁄° *
Á°_cˇche_«me
);

2347 
krb5_îr‹_code
 
KRB5_CALLCONV


2348 
	`krb5_gë_öô_¸eds_›t_£t_out_cˇche
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2349 
krb5_gë_öô_¸eds_›t
 *
›t
,

2350 
krb5_cˇche
 
cˇche
);

2352 
krb5_îr‹_code
 
KRB5_CALLCONV


2353 
	`krb5_gë_öô_¸eds_›t_£t_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2354 
krb5_gë_öô_¸eds_›t
 *
›t
,

2355 
krb5_Êags
 
Êags
);

2357 
krb5_îr‹_code
 
KRB5_CALLCONV


2358 
	`krb5_gë_öô_¸eds_›t_gë_Á°_Êags
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2359 
krb5_gë_öô_¸eds_›t
 *
›t
,

2360 
krb5_Êags
 *
out_Êags
);

2363 
	#KRB5_FAST_REQUIRED
 1l<<0

	)

2365 
krb5_îr‹_code
 
KRB5_CALLCONV


2366 
	`krb5_gë_öô_¸eds_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

2367 
krb5_¥öcùÆ
 
˛õ¡
, *
∑ssw‹d
,

2368 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

2369 
krb5_dñèt
 
°¨t_time
, *
ö_tkt_£rvi˚
,

2370 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

2372 
_krb5_öô_¸eds_c⁄ãxt
;

2373 
_krb5_öô_¸eds_c⁄ãxt
 *
	tkrb5_öô_¸eds_c⁄ãxt
;

2375 
KRB5_CALLCONV


2376 
	`krb5_öô_¸eds_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

2378 
krb5_îr‹_code
 
KRB5_CALLCONV


2379 
	`krb5_öô_¸eds_gë
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
);

2381 
krb5_îr‹_code
 
KRB5_CALLCONV


2382 
	`krb5_öô_¸eds_gë_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2383 
krb5_¸eds
 *
¸eds
);

2385 
krb5_îr‹_code
 
KRB5_CALLCONV


2386 
	`krb5_öô_¸eds_gë_îr‹
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2387 
krb5_îr‹
 **
îr‹
);

2389 
krb5_îr‹_code
 
KRB5_CALLCONV


2390 
	`krb5_öô_¸eds_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¥öcùÆ
 
˛õ¡
,

2391 
krb5_¥om±î_f˘
 
¥om±î
, *
d©a
,

2392 
krb5_dñèt
 
°¨t_time
, 
krb5_gë_öô_¸eds_›t
 *
›ti⁄s
,

2393 
krb5_öô_¸eds_c⁄ãxt
 *
˘x
);

2395 
krb5_îr‹_code
 
KRB5_CALLCONV


2396 
	`krb5_öô_¸eds_£t_keyblock
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2397 
krb5_keyblock
 *
keyblock
);

2399 
krb5_îr‹_code
 
KRB5_CALLCONV


2400 
	`krb5_öô_¸eds_£t_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2401 
krb5_keyèb
 
keyèb
);

2403 
krb5_îr‹_code
 
KRB5_CALLCONV


2404 
	`krb5_öô_¸eds_°ï
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2405 
krb5_d©a
 *
ö
, krb5_d©®*
out
, krb5_d©®*
ªÆm
,

2406 *
Êags
);

2408 
krb5_îr‹_code
 
KRB5_CALLCONV


2409 
	`krb5_öô_¸eds_£t_∑ssw‹d
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2410 c⁄° *
∑ssw‹d
);

2412 
krb5_îr‹_code
 
KRB5_CALLCONV


2413 
	`krb5_öô_¸eds_£t_£rvi˚
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2414 c⁄° *
£rvi˚
);

2416 
krb5_îr‹_code
 
KRB5_CALLCONV


2417 
	`krb5_öô_¸eds_gë_times
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_öô_¸eds_c⁄ãxt
 
˘x
,

2418 
krb5_tickë_times
 *
times
);

2420 
krb5_îr‹_code
 
KRB5_CALLCONV


2421 
	`krb5_gë_öô_¸eds_keyèb
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

2422 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_keyèb
 
¨g_keyèb
,

2423 
krb5_dñèt
 
°¨t_time
, *
ö_tkt_£rvi˚
,

2424 
krb5_gë_öô_¸eds_›t
 *
k5_gic_›ti⁄s
);

2426 
	s_krb5_vîify_öô_¸eds_›t
 {

2427 
krb5_Êags
 
Êags
;

2428 
≠_ªq_noÁû
;

2429 } 
	tkrb5_vîify_öô_¸eds_›t
;

2431 
	#KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL
 0x0001

	)

2433 
KRB5_CALLCONV


2434 
	`krb5_vîify_öô_¸eds_›t_öô
(
krb5_vîify_öô_¸eds_›t
 *
k5_vic_›ti⁄s
);

2436 
KRB5_CALLCONV


2437 
	`krb5_vîify_öô_¸eds_›t_£t_≠_ªq_noÁû
(
krb5_vîify_öô_¸eds_›t
 *

2438 
k5_vic_›ti⁄s
,

2439 
≠_ªq_noÁû
);

2441 
krb5_îr‹_code
 
KRB5_CALLCONV


2442 
	`krb5_vîify_öô_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

2443 
krb5_¥öcùÆ
 
≠_ªq_£rvî
, 
krb5_keyèb
 
≠_ªq_keyèb
,

2444 
krb5_cˇche
 *
cˇche
,

2445 
krb5_vîify_öô_¸eds_›t
 *
k5_vic_›ti⁄s
);

2447 
krb5_îr‹_code
 
KRB5_CALLCONV


2448 
	`krb5_gë_vÆid©ed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

2449 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

2450 *
ö_tkt_£rvi˚
);

2452 
krb5_îr‹_code
 
KRB5_CALLCONV


2453 
	`krb5_gë_ª√wed_¸eds
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_¸eds
 *
¸eds
,

2454 
krb5_¥öcùÆ
 
˛õ¡
, 
krb5_cˇche
 
cˇche
,

2455 *
ö_tkt_£rvi˚
);

2457 
krb5_îr‹_code
 
KRB5_CALLCONV


2458 
	`krb5_decode_tickë
(c⁄° 
krb5_d©a
 *
code
, 
krb5_tickë
 **
ªp
);

2460 
KRB5_CALLCONV


2461 
	`krb5_≠pdeÁu…_°rög
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

2462 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

2463 c⁄° *
deÁu…_vÆue
, ** 
ªt_vÆue
);

2465 
KRB5_CALLCONV


2466 
	`krb5_≠pdeÁu…_boﬁón
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
≠≤ame
,

2467 c⁄° 
krb5_d©a
 *
ªÆm
, c⁄° *
›ti⁄
,

2468 
deÁu…_vÆue
, *
ªt_vÆue
);

2474 
	#KRB5_PROMPT_TYPE_PASSWORD
 0x1

	)

2475 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD
 0x2

	)

2476 
	#KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN
 0x3

	)

2477 
	#KRB5_PROMPT_TYPE_PREAUTH
 0x4

	)

2479 
krb5_öt32
 
	tkrb5_¥om±_ty≥
;

2481 
krb5_¥om±_ty≥
* 
KRB5_CALLCONV
 
	`krb5_gë_¥om±_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
);

2484 
KRB5_CALLCONV_C


2485 
	$krb5_£t_îr‹_mesßge
(
krb5_c⁄ãxt
, 
krb5_îr‹_code
, const *, ...)

2486 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

2487 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 4)))

2490 
KRB5_CALLCONV


2491 
	$krb5_v£t_îr‹_mesßge
(
krb5_c⁄ãxt
, 
krb5_îr‹_code
, c⁄° *, 
va_li°
)

2492 #i‡!
	`deföed
(
__˝lu•lus
Ë&& (
__GNUC__
 > 2)

2493 
	`__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 0)))

2496 
KRB5_CALLCONV


2497 
	`krb5_c›y_îr‹_mesßge
(
krb5_c⁄ãxt
, krb5_context);

2509 c⁄° * 
KRB5_CALLCONV


2510 
	`krb5_gë_îr‹_mesßge
(
krb5_c⁄ãxt
, 
krb5_îr‹_code
);

2511 
KRB5_CALLCONV


2512 
	`krb5_‰ì_îr‹_mesßge
(
krb5_c⁄ãxt
, const *);

2513 
KRB5_CALLCONV


2514 
	`krb5_˛ór_îr‹_mesßge
(
krb5_c⁄ãxt
);

2516 
krb5_îr‹_code
 
KRB5_CALLCONV


2517 
	`krb5_decode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2518 
krb5_authd©©y≥
 
ty≥
,

2519 c⁄° 
krb5_authd©a
 *
c⁄èöî
,

2520 
krb5_authd©a
 ***
authd©a
);

2522 
krb5_îr‹_code
 
KRB5_CALLCONV


2523 
	`krb5_ícode_authd©a_c⁄èöî
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2524 
krb5_authd©©y≥
 
ty≥
,

2525 
krb5_authd©a
 * c⁄°*
authd©a
,

2526 
krb5_authd©a
 ***
c⁄èöî
);

2531 
krb5_îr‹_code
 
KRB5_CALLCONV


2532 
	`krb5_make_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2533 c⁄° 
krb5_keyblock
 *
key
,

2534 
krb5_c⁄°_¥öcùÆ
 
issuî
,

2535 
krb5_authd©a
 *c⁄° *
authd©a
,

2536 
krb5_authd©a
 ***
ad_kdcissued
);

2538 
krb5_îr‹_code
 
KRB5_CALLCONV


2539 
	`krb5_vîify_authd©a_kdc_issued
(
krb5_c⁄ãxt
 
c⁄ãxt
,

2540 c⁄° 
krb5_keyblock
 *
key
,

2541 c⁄° 
krb5_authd©a
 *
ad_kdcissued
,

2542 
krb5_¥öcùÆ
 *
issuî
,

2543 
krb5_authd©a
 ***
authd©a
);

2548 
krb5_∑c_d©a
;

2549 
krb5_∑c_d©a
 *
	tkrb5_∑c
;

2551 
krb5_îr‹_code
 
KRB5_CALLCONV


2552 
	`krb5_∑c_add_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

2553 c⁄° 
krb5_d©a
 *
d©a
);

2555 
KRB5_CALLCONV


2556 
	`krb5_∑c_‰ì
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
);

2558 
krb5_îr‹_code
 
KRB5_CALLCONV


2559 
	`krb5_∑c_gë_buf„r
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
krb5_ui_4
 
ty≥
,

2560 
krb5_d©a
 *
d©a
);

2562 
krb5_îr‹_code
 
KRB5_CALLCONV


2563 
	`krb5_∑c_gë_ty≥s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 
∑c
, 
size_t
 *
Àn
,

2564 
krb5_ui_4
 **
ty≥s
);

2566 
krb5_îr‹_code
 
KRB5_CALLCONV


2567 
	`krb5_∑c_öô
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_∑c
 *
∑c
);

2569 
krb5_îr‹_code
 
KRB5_CALLCONV


2570 
	`krb5_∑c_∑r£
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° *
±r
, 
size_t
 
Àn
,

2571 
krb5_∑c
 *
∑c
);

2573 
krb5_îr‹_code
 
KRB5_CALLCONV


2574 
	`krb5_∑c_vîify
(
krb5_c⁄ãxt
 
c⁄ãxt
, c⁄° 
krb5_∑c
 
∑c
,

2575 
krb5_time°amp
 
authtime
, 
krb5_c⁄°_¥öcùÆ
 
¥öcùÆ
,

2576 c⁄° 
krb5_keyblock
 *
£rvî
, c⁄° krb5_keyblock *
¥ivsvr
);

2580 
krb5_îr‹_code
 
KRB5_CALLCONV


2581 
	`krb5_Ælow_wók_¸y±o
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_boﬁón
 
íabÀ
);

2583 #i‡
TARGET_OS_MAC


2584 #¥agm®
	`∑ck
(
p›
)

2587 
KRB5INT_END_DECLS


2591 
	#krb5_c⁄°
 c⁄°

	)

2593 #unde‡
KRB5_ATTR_DEPRECATED


2601 
	~<ë/com_îr.h
>

2603 
	#KRB5KDC_ERR_NONE
 (-1765328384L)

	)

2604 
	#KRB5KDC_ERR_NAME_EXP
 (-1765328383L)

	)

2605 
	#KRB5KDC_ERR_SERVICE_EXP
 (-1765328382L)

	)

2606 
	#KRB5KDC_ERR_BAD_PVNO
 (-1765328381L)

	)

2607 
	#KRB5KDC_ERR_C_OLD_MAST_KVNO
 (-1765328380L)

	)

2608 
	#KRB5KDC_ERR_S_OLD_MAST_KVNO
 (-1765328379L)

	)

2609 
	#KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN
 (-1765328378L)

	)

2610 
	#KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN
 (-1765328377L)

	)

2611 
	#KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE
 (-1765328376L)

	)

2612 
	#KRB5KDC_ERR_NULL_KEY
 (-1765328375L)

	)

2613 
	#KRB5KDC_ERR_CANNOT_POSTDATE
 (-1765328374L)

	)

2614 
	#KRB5KDC_ERR_NEVER_VALID
 (-1765328373L)

	)

2615 
	#KRB5KDC_ERR_POLICY
 (-1765328372L)

	)

2616 
	#KRB5KDC_ERR_BADOPTION
 (-1765328371L)

	)

2617 
	#KRB5KDC_ERR_ETYPE_NOSUPP
 (-1765328370L)

	)

2618 
	#KRB5KDC_ERR_SUMTYPE_NOSUPP
 (-1765328369L)

	)

2619 
	#KRB5KDC_ERR_PADATA_TYPE_NOSUPP
 (-1765328368L)

	)

2620 
	#KRB5KDC_ERR_TRTYPE_NOSUPP
 (-1765328367L)

	)

2621 
	#KRB5KDC_ERR_CLIENT_REVOKED
 (-1765328366L)

	)

2622 
	#KRB5KDC_ERR_SERVICE_REVOKED
 (-1765328365L)

	)

2623 
	#KRB5KDC_ERR_TGT_REVOKED
 (-1765328364L)

	)

2624 
	#KRB5KDC_ERR_CLIENT_NOTYET
 (-1765328363L)

	)

2625 
	#KRB5KDC_ERR_SERVICE_NOTYET
 (-1765328362L)

	)

2626 
	#KRB5KDC_ERR_KEY_EXP
 (-1765328361L)

	)

2627 
	#KRB5KDC_ERR_PREAUTH_FAILED
 (-1765328360L)

	)

2628 
	#KRB5KDC_ERR_PREAUTH_REQUIRED
 (-1765328359L)

	)

2629 
	#KRB5KDC_ERR_SERVER_NOMATCH
 (-1765328358L)

	)

2630 
	#KRB5KDC_ERR_MUST_USE_USER2USER
 (-1765328357L)

	)

2631 
	#KRB5KDC_ERR_PATH_NOT_ACCEPTED
 (-1765328356L)

	)

2632 
	#KRB5KDC_ERR_SVC_UNAVAILABLE
 (-1765328355L)

	)

2633 
	#KRB5PLACEHOLD_30
 (-1765328354L)

	)

2634 
	#KRB5KRB_AP_ERR_BAD_INTEGRITY
 (-1765328353L)

	)

2635 
	#KRB5KRB_AP_ERR_TKT_EXPIRED
 (-1765328352L)

	)

2636 
	#KRB5KRB_AP_ERR_TKT_NYV
 (-1765328351L)

	)

2637 
	#KRB5KRB_AP_ERR_REPEAT
 (-1765328350L)

	)

2638 
	#KRB5KRB_AP_ERR_NOT_US
 (-1765328349L)

	)

2639 
	#KRB5KRB_AP_ERR_BADMATCH
 (-1765328348L)

	)

2640 
	#KRB5KRB_AP_ERR_SKEW
 (-1765328347L)

	)

2641 
	#KRB5KRB_AP_ERR_BADADDR
 (-1765328346L)

	)

2642 
	#KRB5KRB_AP_ERR_BADVERSION
 (-1765328345L)

	)

2643 
	#KRB5KRB_AP_ERR_MSG_TYPE
 (-1765328344L)

	)

2644 
	#KRB5KRB_AP_ERR_MODIFIED
 (-1765328343L)

	)

2645 
	#KRB5KRB_AP_ERR_BADORDER
 (-1765328342L)

	)

2646 
	#KRB5KRB_AP_ERR_ILL_CR_TKT
 (-1765328341L)

	)

2647 
	#KRB5KRB_AP_ERR_BADKEYVER
 (-1765328340L)

	)

2648 
	#KRB5KRB_AP_ERR_NOKEY
 (-1765328339L)

	)

2649 
	#KRB5KRB_AP_ERR_MUT_FAIL
 (-1765328338L)

	)

2650 
	#KRB5KRB_AP_ERR_BADDIRECTION
 (-1765328337L)

	)

2651 
	#KRB5KRB_AP_ERR_METHOD
 (-1765328336L)

	)

2652 
	#KRB5KRB_AP_ERR_BADSEQ
 (-1765328335L)

	)

2653 
	#KRB5KRB_AP_ERR_INAPP_CKSUM
 (-1765328334L)

	)

2654 
	#KRB5KRB_AP_PATH_NOT_ACCEPTED
 (-1765328333L)

	)

2655 
	#KRB5KRB_ERR_RESPONSE_TOO_BIG
 (-1765328332L)

	)

2656 
	#KRB5PLACEHOLD_53
 (-1765328331L)

	)

2657 
	#KRB5PLACEHOLD_54
 (-1765328330L)

	)

2658 
	#KRB5PLACEHOLD_55
 (-1765328329L)

	)

2659 
	#KRB5PLACEHOLD_56
 (-1765328328L)

	)

2660 
	#KRB5PLACEHOLD_57
 (-1765328327L)

	)

2661 
	#KRB5PLACEHOLD_58
 (-1765328326L)

	)

2662 
	#KRB5PLACEHOLD_59
 (-1765328325L)

	)

2663 
	#KRB5KRB_ERR_GENERIC
 (-1765328324L)

	)

2664 
	#KRB5KRB_ERR_FIELD_TOOLONG
 (-1765328323L)

	)

2665 
	#KRB5KDC_ERR_CLIENT_NOT_TRUSTED
 (-1765328322L)

	)

2666 
	#KRB5KDC_ERR_KDC_NOT_TRUSTED
 (-1765328321L)

	)

2667 
	#KRB5KDC_ERR_INVALID_SIG
 (-1765328320L)

	)

2668 
	#KRB5KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED
 (-1765328319L)

	)

2669 
	#KRB5KDC_ERR_CERTIFICATE_MISMATCH
 (-1765328318L)

	)

2670 
	#KRB5KRB_AP_ERR_NO_TGT
 (-1765328317L)

	)

2671 
	#KRB5KDC_ERR_WRONG_REALM
 (-1765328316L)

	)

2672 
	#KRB5KRB_AP_ERR_USER_TO_USER_REQUIRED
 (-1765328315L)

	)

2673 
	#KRB5KDC_ERR_CANT_VERIFY_CERTIFICATE
 (-1765328314L)

	)

2674 
	#KRB5KDC_ERR_INVALID_CERTIFICATE
 (-1765328313L)

	)

2675 
	#KRB5KDC_ERR_REVOKED_CERTIFICATE
 (-1765328312L)

	)

2676 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNKNOWN
 (-1765328311L)

	)

2677 
	#KRB5KDC_ERR_REVOCATION_STATUS_UNAVAILABLE
 (-1765328310L)

	)

2678 
	#KRB5KDC_ERR_CLIENT_NAME_MISMATCH
 (-1765328309L)

	)

2679 
	#KRB5KDC_ERR_KDC_NAME_MISMATCH
 (-1765328308L)

	)

2680 
	#KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE
 (-1765328307L)

	)

2681 
	#KRB5KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED
 (-1765328306L)

	)

2682 
	#KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED
 (-1765328305L)

	)

2683 
	#KRB5KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED
 (-1765328304L)

	)

2684 
	#KRB5KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED
 (-1765328303L)

	)

2685 
	#KRB5PLACEHOLD_82
 (-1765328302L)

	)

2686 
	#KRB5PLACEHOLD_83
 (-1765328301L)

	)

2687 
	#KRB5PLACEHOLD_84
 (-1765328300L)

	)

2688 
	#KRB5PLACEHOLD_85
 (-1765328299L)

	)

2689 
	#KRB5PLACEHOLD_86
 (-1765328298L)

	)

2690 
	#KRB5PLACEHOLD_87
 (-1765328297L)

	)

2691 
	#KRB5PLACEHOLD_88
 (-1765328296L)

	)

2692 
	#KRB5PLACEHOLD_89
 (-1765328295L)

	)

2693 
	#KRB5PLACEHOLD_90
 (-1765328294L)

	)

2694 
	#KRB5PLACEHOLD_91
 (-1765328293L)

	)

2695 
	#KRB5PLACEHOLD_92
 (-1765328292L)

	)

2696 
	#KRB5KDC_ERR_UNKNOWN_CRITICAL_FAST_OPTION
 (-1765328291L)

	)

2697 
	#KRB5PLACEHOLD_94
 (-1765328290L)

	)

2698 
	#KRB5PLACEHOLD_95
 (-1765328289L)

	)

2699 
	#KRB5PLACEHOLD_96
 (-1765328288L)

	)

2700 
	#KRB5PLACEHOLD_97
 (-1765328287L)

	)

2701 
	#KRB5PLACEHOLD_98
 (-1765328286L)

	)

2702 
	#KRB5PLACEHOLD_99
 (-1765328285L)

	)

2703 
	#KRB5PLACEHOLD_100
 (-1765328284L)

	)

2704 
	#KRB5PLACEHOLD_101
 (-1765328283L)

	)

2705 
	#KRB5PLACEHOLD_102
 (-1765328282L)

	)

2706 
	#KRB5PLACEHOLD_103
 (-1765328281L)

	)

2707 
	#KRB5PLACEHOLD_104
 (-1765328280L)

	)

2708 
	#KRB5PLACEHOLD_105
 (-1765328279L)

	)

2709 
	#KRB5PLACEHOLD_106
 (-1765328278L)

	)

2710 
	#KRB5PLACEHOLD_107
 (-1765328277L)

	)

2711 
	#KRB5PLACEHOLD_108
 (-1765328276L)

	)

2712 
	#KRB5PLACEHOLD_109
 (-1765328275L)

	)

2713 
	#KRB5PLACEHOLD_110
 (-1765328274L)

	)

2714 
	#KRB5PLACEHOLD_111
 (-1765328273L)

	)

2715 
	#KRB5PLACEHOLD_112
 (-1765328272L)

	)

2716 
	#KRB5PLACEHOLD_113
 (-1765328271L)

	)

2717 
	#KRB5PLACEHOLD_114
 (-1765328270L)

	)

2718 
	#KRB5PLACEHOLD_115
 (-1765328269L)

	)

2719 
	#KRB5PLACEHOLD_116
 (-1765328268L)

	)

2720 
	#KRB5PLACEHOLD_117
 (-1765328267L)

	)

2721 
	#KRB5PLACEHOLD_118
 (-1765328266L)

	)

2722 
	#KRB5PLACEHOLD_119
 (-1765328265L)

	)

2723 
	#KRB5PLACEHOLD_120
 (-1765328264L)

	)

2724 
	#KRB5PLACEHOLD_121
 (-1765328263L)

	)

2725 
	#KRB5PLACEHOLD_122
 (-1765328262L)

	)

2726 
	#KRB5PLACEHOLD_123
 (-1765328261L)

	)

2727 
	#KRB5PLACEHOLD_124
 (-1765328260L)

	)

2728 
	#KRB5PLACEHOLD_125
 (-1765328259L)

	)

2729 
	#KRB5PLACEHOLD_126
 (-1765328258L)

	)

2730 
	#KRB5PLACEHOLD_127
 (-1765328257L)

	)

2731 
	#KRB5_ERR_RCSID
 (-1765328256L)

	)

2732 
	#KRB5_LIBOS_BADLOCKFLAG
 (-1765328255L)

	)

2733 
	#KRB5_LIBOS_CANTREADPWD
 (-1765328254L)

	)

2734 
	#KRB5_LIBOS_BADPWDMATCH
 (-1765328253L)

	)

2735 
	#KRB5_LIBOS_PWDINTR
 (-1765328252L)

	)

2736 
	#KRB5_PARSE_ILLCHAR
 (-1765328251L)

	)

2737 
	#KRB5_PARSE_MALFORMED
 (-1765328250L)

	)

2738 
	#KRB5_CONFIG_CANTOPEN
 (-1765328249L)

	)

2739 
	#KRB5_CONFIG_BADFORMAT
 (-1765328248L)

	)

2740 
	#KRB5_CONFIG_NOTENUFSPACE
 (-1765328247L)

	)

2741 
	#KRB5_BADMSGTYPE
 (-1765328246L)

	)

2742 
	#KRB5_CC_BADNAME
 (-1765328245L)

	)

2743 
	#KRB5_CC_UNKNOWN_TYPE
 (-1765328244L)

	)

2744 
	#KRB5_CC_NOTFOUND
 (-1765328243L)

	)

2745 
	#KRB5_CC_END
 (-1765328242L)

	)

2746 
	#KRB5_NO_TKT_SUPPLIED
 (-1765328241L)

	)

2747 
	#KRB5KRB_AP_WRONG_PRINC
 (-1765328240L)

	)

2748 
	#KRB5KRB_AP_ERR_TKT_INVALID
 (-1765328239L)

	)

2749 
	#KRB5_PRINC_NOMATCH
 (-1765328238L)

	)

2750 
	#KRB5_KDCREP_MODIFIED
 (-1765328237L)

	)

2751 
	#KRB5_KDCREP_SKEW
 (-1765328236L)

	)

2752 
	#KRB5_IN_TKT_REALM_MISMATCH
 (-1765328235L)

	)

2753 
	#KRB5_PROG_ETYPE_NOSUPP
 (-1765328234L)

	)

2754 
	#KRB5_PROG_KEYTYPE_NOSUPP
 (-1765328233L)

	)

2755 
	#KRB5_WRONG_ETYPE
 (-1765328232L)

	)

2756 
	#KRB5_PROG_SUMTYPE_NOSUPP
 (-1765328231L)

	)

2757 
	#KRB5_REALM_UNKNOWN
 (-1765328230L)

	)

2758 
	#KRB5_SERVICE_UNKNOWN
 (-1765328229L)

	)

2759 
	#KRB5_KDC_UNREACH
 (-1765328228L)

	)

2760 
	#KRB5_NO_LOCALNAME
 (-1765328227L)

	)

2761 
	#KRB5_MUTUAL_FAILED
 (-1765328226L)

	)

2762 
	#KRB5_RC_TYPE_EXISTS
 (-1765328225L)

	)

2763 
	#KRB5_RC_MALLOC
 (-1765328224L)

	)

2764 
	#KRB5_RC_TYPE_NOTFOUND
 (-1765328223L)

	)

2765 
	#KRB5_RC_UNKNOWN
 (-1765328222L)

	)

2766 
	#KRB5_RC_REPLAY
 (-1765328221L)

	)

2767 
	#KRB5_RC_IO
 (-1765328220L)

	)

2768 
	#KRB5_RC_NOIO
 (-1765328219L)

	)

2769 
	#KRB5_RC_PARSE
 (-1765328218L)

	)

2770 
	#KRB5_RC_IO_EOF
 (-1765328217L)

	)

2771 
	#KRB5_RC_IO_MALLOC
 (-1765328216L)

	)

2772 
	#KRB5_RC_IO_PERM
 (-1765328215L)

	)

2773 
	#KRB5_RC_IO_IO
 (-1765328214L)

	)

2774 
	#KRB5_RC_IO_UNKNOWN
 (-1765328213L)

	)

2775 
	#KRB5_RC_IO_SPACE
 (-1765328212L)

	)

2776 
	#KRB5_TRANS_CANTOPEN
 (-1765328211L)

	)

2777 
	#KRB5_TRANS_BADFORMAT
 (-1765328210L)

	)

2778 
	#KRB5_LNAME_CANTOPEN
 (-1765328209L)

	)

2779 
	#KRB5_LNAME_NOTRANS
 (-1765328208L)

	)

2780 
	#KRB5_LNAME_BADFORMAT
 (-1765328207L)

	)

2781 
	#KRB5_CRYPTO_INTERNAL
 (-1765328206L)

	)

2782 
	#KRB5_KT_BADNAME
 (-1765328205L)

	)

2783 
	#KRB5_KT_UNKNOWN_TYPE
 (-1765328204L)

	)

2784 
	#KRB5_KT_NOTFOUND
 (-1765328203L)

	)

2785 
	#KRB5_KT_END
 (-1765328202L)

	)

2786 
	#KRB5_KT_NOWRITE
 (-1765328201L)

	)

2787 
	#KRB5_KT_IOERR
 (-1765328200L)

	)

2788 
	#KRB5_NO_TKT_IN_RLM
 (-1765328199L)

	)

2789 
	#KRB5DES_BAD_KEYPAR
 (-1765328198L)

	)

2790 
	#KRB5DES_WEAK_KEY
 (-1765328197L)

	)

2791 
	#KRB5_BAD_ENCTYPE
 (-1765328196L)

	)

2792 
	#KRB5_BAD_KEYSIZE
 (-1765328195L)

	)

2793 
	#KRB5_BAD_MSIZE
 (-1765328194L)

	)

2794 
	#KRB5_CC_TYPE_EXISTS
 (-1765328193L)

	)

2795 
	#KRB5_KT_TYPE_EXISTS
 (-1765328192L)

	)

2796 
	#KRB5_CC_IO
 (-1765328191L)

	)

2797 
	#KRB5_FCC_PERM
 (-1765328190L)

	)

2798 
	#KRB5_FCC_NOFILE
 (-1765328189L)

	)

2799 
	#KRB5_FCC_INTERNAL
 (-1765328188L)

	)

2800 
	#KRB5_CC_WRITE
 (-1765328187L)

	)

2801 
	#KRB5_CC_NOMEM
 (-1765328186L)

	)

2802 
	#KRB5_CC_FORMAT
 (-1765328185L)

	)

2803 
	#KRB5_CC_NOT_KTYPE
 (-1765328184L)

	)

2804 
	#KRB5_INVALID_FLAGS
 (-1765328183L)

	)

2805 
	#KRB5_NO_2ND_TKT
 (-1765328182L)

	)

2806 
	#KRB5_NOCREDS_SUPPLIED
 (-1765328181L)

	)

2807 
	#KRB5_SENDAUTH_BADAUTHVERS
 (-1765328180L)

	)

2808 
	#KRB5_SENDAUTH_BADAPPLVERS
 (-1765328179L)

	)

2809 
	#KRB5_SENDAUTH_BADRESPONSE
 (-1765328178L)

	)

2810 
	#KRB5_SENDAUTH_REJECTED
 (-1765328177L)

	)

2811 
	#KRB5_PREAUTH_BAD_TYPE
 (-1765328176L)

	)

2812 
	#KRB5_PREAUTH_NO_KEY
 (-1765328175L)

	)

2813 
	#KRB5_PREAUTH_FAILED
 (-1765328174L)

	)

2814 
	#KRB5_RCACHE_BADVNO
 (-1765328173L)

	)

2815 
	#KRB5_CCACHE_BADVNO
 (-1765328172L)

	)

2816 
	#KRB5_KEYTAB_BADVNO
 (-1765328171L)

	)

2817 
	#KRB5_PROG_ATYPE_NOSUPP
 (-1765328170L)

	)

2818 
	#KRB5_RC_REQUIRED
 (-1765328169L)

	)

2819 
	#KRB5_ERR_BAD_HOSTNAME
 (-1765328168L)

	)

2820 
	#KRB5_ERR_HOST_REALM_UNKNOWN
 (-1765328167L)

	)

2821 
	#KRB5_SNAME_UNSUPP_NAMETYPE
 (-1765328166L)

	)

2822 
	#KRB5KRB_AP_ERR_V4_REPLY
 (-1765328165L)

	)

2823 
	#KRB5_REALM_CANT_RESOLVE
 (-1765328164L)

	)

2824 
	#KRB5_TKT_NOT_FORWARDABLE
 (-1765328163L)

	)

2825 
	#KRB5_FWD_BAD_PRINCIPAL
 (-1765328162L)

	)

2826 
	#KRB5_GET_IN_TKT_LOOP
 (-1765328161L)

	)

2827 
	#KRB5_CONFIG_NODEFREALM
 (-1765328160L)

	)

2828 
	#KRB5_SAM_UNSUPPORTED
 (-1765328159L)

	)

2829 
	#KRB5_SAM_INVALID_ETYPE
 (-1765328158L)

	)

2830 
	#KRB5_SAM_NO_CHECKSUM
 (-1765328157L)

	)

2831 
	#KRB5_SAM_BAD_CHECKSUM
 (-1765328156L)

	)

2832 
	#KRB5_KT_NAME_TOOLONG
 (-1765328155L)

	)

2833 
	#KRB5_KT_KVNONOTFOUND
 (-1765328154L)

	)

2834 
	#KRB5_APPL_EXPIRED
 (-1765328153L)

	)

2835 
	#KRB5_LIB_EXPIRED
 (-1765328152L)

	)

2836 
	#KRB5_CHPW_PWDNULL
 (-1765328151L)

	)

2837 
	#KRB5_CHPW_FAIL
 (-1765328150L)

	)

2838 
	#KRB5_KT_FORMAT
 (-1765328149L)

	)

2839 
	#KRB5_NOPERM_ETYPE
 (-1765328148L)

	)

2840 
	#KRB5_CONFIG_ETYPE_NOSUPP
 (-1765328147L)

	)

2841 
	#KRB5_OBSOLETE_FN
 (-1765328146L)

	)

2842 
	#KRB5_EAI_FAIL
 (-1765328145L)

	)

2843 
	#KRB5_EAI_NODATA
 (-1765328144L)

	)

2844 
	#KRB5_EAI_NONAME
 (-1765328143L)

	)

2845 
	#KRB5_EAI_SERVICE
 (-1765328142L)

	)

2846 
	#KRB5_ERR_NUMERIC_REALM
 (-1765328141L)

	)

2847 
	#KRB5_ERR_BAD_S2K_PARAMS
 (-1765328140L)

	)

2848 
	#KRB5_ERR_NO_SERVICE
 (-1765328139L)

	)

2849 
	#KRB5_CC_READONLY
 (-1765328138L)

	)

2850 
	#KRB5_CC_NOSUPP
 (-1765328137L)

	)

2851 
	#KRB5_DELTAT_BADFORMAT
 (-1765328136L)

	)

2852 
	#KRB5_PLUGIN_NO_HANDLE
 (-1765328135L)

	)

2853 
	#KRB5_PLUGIN_OP_NOTSUPP
 (-1765328134L)

	)

2854 
	#KRB5_ERR_INVALID_UTF8
 (-1765328133L)

	)

2855 
	#KRB5_ERR_FAST_REQUIRED
 (-1765328132L)

	)

2856 
	#KRB5_LOCAL_ADDR_REQUIRED
 (-1765328131L)

	)

2857 
	#KRB5_REMOTE_ADDR_REQUIRED
 (-1765328130L)

	)

2858 c⁄° 
îr‹_èbÀ
 
ë_krb5_îr‹_èbÀ
;

2859 
	`öôülize_krb5_îr‹_èbÀ
();

2862 
	`öôülize_krb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

2864 
	#ERROR_TABLE_BASE_krb5
 (-1765328384L)

	)

2867 
	#öô_krb5_îr_tbl
 
öôülize_krb5_îr‹_èbÀ


	)

2868 
	#krb5_îr_ba£
 
ERROR_TABLE_BASE_krb5


	)

2874 
	~<ë/com_îr.h
>

2876 
	#KRB5_KDB_RCSID
 (-1780008448L)

	)

2877 
	#KRB5_KDB_INUSE
 (-1780008447L)

	)

2878 
	#KRB5_KDB_UK_SERROR
 (-1780008446L)

	)

2879 
	#KRB5_KDB_UK_RERROR
 (-1780008445L)

	)

2880 
	#KRB5_KDB_UNAUTH
 (-1780008444L)

	)

2881 
	#KRB5_KDB_NOENTRY
 (-1780008443L)

	)

2882 
	#KRB5_KDB_ILL_WILDCARD
 (-1780008442L)

	)

2883 
	#KRB5_KDB_DB_INUSE
 (-1780008441L)

	)

2884 
	#KRB5_KDB_DB_CHANGED
 (-1780008440L)

	)

2885 
	#KRB5_KDB_TRUNCATED_RECORD
 (-1780008439L)

	)

2886 
	#KRB5_KDB_RECURSIVELOCK
 (-1780008438L)

	)

2887 
	#KRB5_KDB_NOTLOCKED
 (-1780008437L)

	)

2888 
	#KRB5_KDB_BADLOCKMODE
 (-1780008436L)

	)

2889 
	#KRB5_KDB_DBNOTINITED
 (-1780008435L)

	)

2890 
	#KRB5_KDB_DBINITED
 (-1780008434L)

	)

2891 
	#KRB5_KDB_ILLDIRECTION
 (-1780008433L)

	)

2892 
	#KRB5_KDB_NOMASTERKEY
 (-1780008432L)

	)

2893 
	#KRB5_KDB_BADMASTERKEY
 (-1780008431L)

	)

2894 
	#KRB5_KDB_INVALIDKEYSIZE
 (-1780008430L)

	)

2895 
	#KRB5_KDB_CANTREAD_STORED
 (-1780008429L)

	)

2896 
	#KRB5_KDB_BADSTORED_MKEY
 (-1780008428L)

	)

2897 
	#KRB5_KDB_NOACTMASTERKEY
 (-1780008427L)

	)

2898 
	#KRB5_KDB_KVNONOMATCH
 (-1780008426L)

	)

2899 
	#KRB5_KDB_STORED_MKEY_NOTCURRENT
 (-1780008425L)

	)

2900 
	#KRB5_KDB_CANTLOCK_DB
 (-1780008424L)

	)

2901 
	#KRB5_KDB_DB_CORRUPT
 (-1780008423L)

	)

2902 
	#KRB5_KDB_BAD_VERSION
 (-1780008422L)

	)

2903 
	#KRB5_KDB_BAD_SALTTYPE
 (-1780008421L)

	)

2904 
	#KRB5_KDB_BAD_ENCTYPE
 (-1780008420L)

	)

2905 
	#KRB5_KDB_BAD_CREATEFLAGS
 (-1780008419L)

	)

2906 
	#KRB5_KDB_NO_PERMITTED_KEY
 (-1780008418L)

	)

2907 
	#KRB5_KDB_NO_MATCHING_KEY
 (-1780008417L)

	)

2908 
	#KRB5_KDB_DBTYPE_NOTFOUND
 (-1780008416L)

	)

2909 
	#KRB5_KDB_DBTYPE_NOSUP
 (-1780008415L)

	)

2910 
	#KRB5_KDB_DBTYPE_INIT
 (-1780008414L)

	)

2911 
	#KRB5_KDB_SERVER_INTERNAL_ERR
 (-1780008413L)

	)

2912 
	#KRB5_KDB_ACCESS_ERROR
 (-1780008412L)

	)

2913 
	#KRB5_KDB_INTERNAL_ERROR
 (-1780008411L)

	)

2914 
	#KRB5_KDB_CONSTRAINT_VIOLATION
 (-1780008410L)

	)

2915 
	#KRB5_LOG_CONV
 (-1780008409L)

	)

2916 
	#KRB5_LOG_UNSTABLE
 (-1780008408L)

	)

2917 
	#KRB5_LOG_CORRUPT
 (-1780008407L)

	)

2918 
	#KRB5_LOG_ERROR
 (-1780008406L)

	)

2919 c⁄° 
îr‹_èbÀ
 
ë_kdb5_îr‹_èbÀ
;

2920 
	`öôülize_kdb5_îr‹_èbÀ
();

2923 
	`öôülize_kdb5_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

2925 
	#ERROR_TABLE_BASE_kdb5
 (-1780008448L)

	)

2928 
	#öô_kdb5_îr_tbl
 
öôülize_kdb5_îr‹_èbÀ


	)

2929 
	#kdb5_îr_ba£
 
ERROR_TABLE_BASE_kdb5


	)

2935 
	~<ë/com_îr.h
>

2937 
	#KV5M_NONE
 (-1760647424L)

	)

2938 
	#KV5M_PRINCIPAL
 (-1760647423L)

	)

2939 
	#KV5M_DATA
 (-1760647422L)

	)

2940 
	#KV5M_KEYBLOCK
 (-1760647421L)

	)

2941 
	#KV5M_CHECKSUM
 (-1760647420L)

	)

2942 
	#KV5M_ENCRYPT_BLOCK
 (-1760647419L)

	)

2943 
	#KV5M_ENC_DATA
 (-1760647418L)

	)

2944 
	#KV5M_CRYPTOSYSTEM_ENTRY
 (-1760647417L)

	)

2945 
	#KV5M_CS_TABLE_ENTRY
 (-1760647416L)

	)

2946 
	#KV5M_CHECKSUM_ENTRY
 (-1760647415L)

	)

2947 
	#KV5M_AUTHDATA
 (-1760647414L)

	)

2948 
	#KV5M_TRANSITED
 (-1760647413L)

	)

2949 
	#KV5M_ENC_TKT_PART
 (-1760647412L)

	)

2950 
	#KV5M_TICKET
 (-1760647411L)

	)

2951 
	#KV5M_AUTHENTICATOR
 (-1760647410L)

	)

2952 
	#KV5M_TKT_AUTHENT
 (-1760647409L)

	)

2953 
	#KV5M_CREDS
 (-1760647408L)

	)

2954 
	#KV5M_LAST_REQ_ENTRY
 (-1760647407L)

	)

2955 
	#KV5M_PA_DATA
 (-1760647406L)

	)

2956 
	#KV5M_KDC_REQ
 (-1760647405L)

	)

2957 
	#KV5M_ENC_KDC_REP_PART
 (-1760647404L)

	)

2958 
	#KV5M_KDC_REP
 (-1760647403L)

	)

2959 
	#KV5M_ERROR
 (-1760647402L)

	)

2960 
	#KV5M_AP_REQ
 (-1760647401L)

	)

2961 
	#KV5M_AP_REP
 (-1760647400L)

	)

2962 
	#KV5M_AP_REP_ENC_PART
 (-1760647399L)

	)

2963 
	#KV5M_RESPONSE
 (-1760647398L)

	)

2964 
	#KV5M_SAFE
 (-1760647397L)

	)

2965 
	#KV5M_PRIV
 (-1760647396L)

	)

2966 
	#KV5M_PRIV_ENC_PART
 (-1760647395L)

	)

2967 
	#KV5M_CRED
 (-1760647394L)

	)

2968 
	#KV5M_CRED_INFO
 (-1760647393L)

	)

2969 
	#KV5M_CRED_ENC_PART
 (-1760647392L)

	)

2970 
	#KV5M_PWD_DATA
 (-1760647391L)

	)

2971 
	#KV5M_ADDRESS
 (-1760647390L)

	)

2972 
	#KV5M_KEYTAB_ENTRY
 (-1760647389L)

	)

2973 
	#KV5M_CONTEXT
 (-1760647388L)

	)

2974 
	#KV5M_OS_CONTEXT
 (-1760647387L)

	)

2975 
	#KV5M_ALT_METHOD
 (-1760647386L)

	)

2976 
	#KV5M_ETYPE_INFO_ENTRY
 (-1760647385L)

	)

2977 
	#KV5M_DB_CONTEXT
 (-1760647384L)

	)

2978 
	#KV5M_AUTH_CONTEXT
 (-1760647383L)

	)

2979 
	#KV5M_KEYTAB
 (-1760647382L)

	)

2980 
	#KV5M_RCACHE
 (-1760647381L)

	)

2981 
	#KV5M_CCACHE
 (-1760647380L)

	)

2982 
	#KV5M_PREAUTH_OPS
 (-1760647379L)

	)

2983 
	#KV5M_SAM_CHALLENGE
 (-1760647378L)

	)

2984 
	#KV5M_SAM_CHALLENGE_2
 (-1760647377L)

	)

2985 
	#KV5M_SAM_KEY
 (-1760647376L)

	)

2986 
	#KV5M_ENC_SAM_RESPONSE_ENC
 (-1760647375L)

	)

2987 
	#KV5M_ENC_SAM_RESPONSE_ENC_2
 (-1760647374L)

	)

2988 
	#KV5M_SAM_RESPONSE
 (-1760647373L)

	)

2989 
	#KV5M_SAM_RESPONSE_2
 (-1760647372L)

	)

2990 
	#KV5M_PREDICTED_SAM_RESPONSE
 (-1760647371L)

	)

2991 
	#KV5M_PASSWD_PHRASE_ELEMENT
 (-1760647370L)

	)

2992 
	#KV5M_GSS_OID
 (-1760647369L)

	)

2993 
	#KV5M_GSS_QUEUE
 (-1760647368L)

	)

2994 
	#KV5M_FAST_ARMORED_REQ
 (-1760647367L)

	)

2995 
	#KV5M_FAST_REQ
 (-1760647366L)

	)

2996 
	#KV5M_FAST_RESPONSE
 (-1760647365L)

	)

2997 
	#KV5M_AUTHDATA_CONTEXT
 (-1760647364L)

	)

2998 c⁄° 
îr‹_èbÀ
 
ë_kv5m_îr‹_èbÀ
;

2999 
	`öôülize_kv5m_îr‹_èbÀ
();

3002 
	`öôülize_kv5m_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

3004 
	#ERROR_TABLE_BASE_kv5m
 (-1760647424L)

	)

3007 
	#öô_kv5m_îr_tbl
 
öôülize_kv5m_îr‹_èbÀ


	)

3008 
	#kv5m_îr_ba£
 
ERROR_TABLE_BASE_kv5m


	)

3014 
	~<ë/com_îr.h
>

3016 
	#KRB524_BADKEY
 (-1750206208L)

	)

3017 
	#KRB524_BADADDR
 (-1750206207L)

	)

3018 
	#KRB524_BADPRINC
 (-1750206206L)

	)

3019 
	#KRB524_BADREALM
 (-1750206205L)

	)

3020 
	#KRB524_V4ERR
 (-1750206204L)

	)

3021 
	#KRB524_ENCFULL
 (-1750206203L)

	)

3022 
	#KRB524_DECEMPTY
 (-1750206202L)

	)

3023 
	#KRB524_NOTRESP
 (-1750206201L)

	)

3024 
	#KRB524_KRB4_DISABLED
 (-1750206200L)

	)

3025 c⁄° 
îr‹_èbÀ
 
ë_k524_îr‹_èbÀ
;

3026 
	`öôülize_k524_îr‹_èbÀ
();

3029 
	`öôülize_k524_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

3031 
	#ERROR_TABLE_BASE_k524
 (-1750206208L)

	)

3034 
	#öô_k524_îr_tbl
 
öôülize_k524_îr‹_èbÀ


	)

3035 
	#k524_îr_ba£
 
ERROR_TABLE_BASE_k524


	)

3041 
	~<ë/com_îr.h
>

3043 
	#ASN1_BAD_TIMEFORMAT
 (1859794432L)

	)

3044 
	#ASN1_MISSING_FIELD
 (1859794433L)

	)

3045 
	#ASN1_MISPLACED_FIELD
 (1859794434L)

	)

3046 
	#ASN1_TYPE_MISMATCH
 (1859794435L)

	)

3047 
	#ASN1_OVERFLOW
 (1859794436L)

	)

3048 
	#ASN1_OVERRUN
 (1859794437L)

	)

3049 
	#ASN1_BAD_ID
 (1859794438L)

	)

3050 
	#ASN1_BAD_LENGTH
 (1859794439L)

	)

3051 
	#ASN1_BAD_FORMAT
 (1859794440L)

	)

3052 
	#ASN1_PARSE_ERROR
 (1859794441L)

	)

3053 
	#ASN1_BAD_GMTIME
 (1859794442L)

	)

3054 
	#ASN1_MISMATCH_INDEF
 (1859794443L)

	)

3055 
	#ASN1_MISSING_EOC
 (1859794444L)

	)

3056 c⁄° 
îr‹_èbÀ
 
ë_a¢1_îr‹_èbÀ
;

3057 
	`öôülize_a¢1_îr‹_èbÀ
();

3060 
	`öôülize_a¢1_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

3062 
	#ERROR_TABLE_BASE_a¢1
 (1859794432L)

	)

3065 
	#öô_a¢1_îr_tbl
 
öôülize_a¢1_îr‹_èbÀ


	)

3066 
	#a¢1_îr_ba£
 
ERROR_TABLE_BASE_a¢1


	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__¨ch_swab16


49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #ifde‡
__¨ch_swab32


58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #ifde‡
__¨ch_swab64


67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 
	#__swab16
(
x
) \

100 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

101 
	`___c⁄°™t_swab16
(
x
) : \

102 
	`__fswab16
(
x
))

	)

108 
	#__swab32
(
x
) \

109 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

110 
	`___c⁄°™t_swab32
(
x
) : \

111 
	`__fswab32
(
x
))

	)

117 
	#__swab64
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

119 
	`___c⁄°™t_swab64
(
x
) : \

120 
	`__fswab64
(
x
))

	)

128 
	#__swahw32
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

130 
	`___c⁄°™t_swahw32
(
x
) : \

131 
	`__fswahw32
(
x
))

	)

139 
	#__swahb32
(
x
) \

140 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

141 
	`___c⁄°™t_swahb32
(
x
) : \

142 
	`__fswahb32
(
x
))

	)

148 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

150 #ifde‡
__¨ch_swab16p


151  
	`__¨ch_swab16p
(
p
);

153  
	`__swab16
(*
p
);

155 
	}
}

161 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

163 #ifde‡
__¨ch_swab32p


164  
	`__¨ch_swab32p
(
p
);

166  
	`__swab32
(*
p
);

168 
	}
}

174 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

176 #ifde‡
__¨ch_swab64p


177  
	`__¨ch_swab64p
(
p
);

179  
	`__swab64
(*
p
);

181 
	}
}

189 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

191 #ifde‡
__¨ch_swahw32p


192  
	`__¨ch_swahw32p
(
p
);

194  
	`__swahw32
(*
p
);

196 
	}
}

204 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

206 #ifde‡
__¨ch_swahb32p


207  
	`__¨ch_swahb32p
(
p
);

209  
	`__swahb32
(*
p
);

211 
	}
}

217 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

219 #ifde‡
__¨ch_swab16s


220 
	`__¨ch_swab16s
(
p
);

222 *
p
 = 
	`__swab16p
(p);

224 
	}
}

229 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

231 #ifde‡
__¨ch_swab32s


232 
	`__¨ch_swab32s
(
p
);

234 *
p
 = 
	`__swab32p
(p);

236 
	}
}

242 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

244 #ifde‡
__¨ch_swab64s


245 
	`__¨ch_swab64s
(
p
);

247 *
p
 = 
	`__swab64p
(p);

249 
	}
}

257 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

259 #ifde‡
__¨ch_swahw32s


260 
	`__¨ch_swahw32s
(
p
);

262 *
p
 = 
	`__swahw32p
(p);

264 
	}
}

272 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

274 #ifde‡
__¨ch_swahb32s


275 
	`__¨ch_swahb32s
(
p
);

277 *
p
 = 
	`__swahb32p
(p);

279 
	}
}

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 #ifde‡
__i386__


10 #ifde‡
CONFIG_X86_BSWAP


11 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

13 
	`__asm__
("xchgb %b0,%h0\n\t"

16 : "=q" (
vÆ
)

17 : "0" (
vÆ
));

21 
	`__asm__
("bswapl %0"

22 : "Ù" (
vÆ
)

23 : "0" (
vÆ
));

25  
vÆ
;

26 
	}
}

27 
	#__¨ch_swab32
 
__¨ch_swab32


	)

29 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

31 #ifde‡
__i386__


34 
__u32
 
a
;

35 
__u32
 
b
;

36 } 
s
;

37 
__u64
 
u
;

38 } 
v
;

39 
v
.
u
 = 
vÆ
;

40 #ifde‡
CONFIG_X86_BSWAP


41 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

42 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

43 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

45 
v
.
s
.
a
 = 
	`__¨ch_swab32
(v.s.a);

46 
v
.
s
.
b
 = 
	`__¨ch_swab32
(v.s.b);

47 
	`__asm__
("xchgl %0,%1"

48 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

49 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

51  
v
.
u
;

53 
	`__asm__
("bswapq %0"

54 : "Ù" (
vÆ
)

55 : "0" (
vÆ
));

56  
vÆ
;

58 
	}
}

59 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/et/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

47 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

48 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

49 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

52 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

53 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

54 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

55 c⁄° **
mesßges
,

56 
num_îr‹s
,

57 
ba£
);

58 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

61 
	`ë_li°_lock
();

62 
	`ë_li°_u∆ock
();

64 
	#__COM_ERR_H


	)

65 
	#__COM_ERR_H__


	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
476
13881
auto/lib/zlib/patch.zlib.h
objs/ngx_auto_config.h
objs/ngx_auto_headers.h
objs/ngx_modules.c
src/core/nginx.c
src/core/nginx.h
src/core/ngx_array.c
src/core/ngx_array.h
src/core/ngx_buf.c
src/core/ngx_buf.h
src/core/ngx_conf_file.c
src/core/ngx_conf_file.h
src/core/ngx_config.h
src/core/ngx_connection.c
src/core/ngx_connection.h
src/core/ngx_core.h
src/core/ngx_cpuinfo.c
src/core/ngx_crc.h
src/core/ngx_crc32.c
src/core/ngx_crc32.h
src/core/ngx_crypt.c
src/core/ngx_crypt.h
src/core/ngx_cycle.c
src/core/ngx_cycle.h
src/core/ngx_file.c
src/core/ngx_file.h
src/core/ngx_hash.c
src/core/ngx_hash.h
src/core/ngx_inet.c
src/core/ngx_inet.h
src/core/ngx_list.c
src/core/ngx_list.h
src/core/ngx_log.c
src/core/ngx_log.h
src/core/ngx_md5.c
src/core/ngx_md5.h
src/core/ngx_murmurhash.c
src/core/ngx_murmurhash.h
src/core/ngx_open_file_cache.c
src/core/ngx_open_file_cache.h
src/core/ngx_output_chain.c
src/core/ngx_palloc.c
src/core/ngx_palloc.h
src/core/ngx_parse.c
src/core/ngx_parse.h
src/core/ngx_queue.c
src/core/ngx_queue.h
src/core/ngx_radix_tree.c
src/core/ngx_radix_tree.h
src/core/ngx_rbtree.c
src/core/ngx_rbtree.h
src/core/ngx_regex.c
src/core/ngx_regex.h
src/core/ngx_resolver.c
src/core/ngx_resolver.h
src/core/ngx_sha1.h
src/core/ngx_shmtx.c
src/core/ngx_shmtx.h
src/core/ngx_slab.c
src/core/ngx_slab.h
src/core/ngx_spinlock.c
src/core/ngx_string.c
src/core/ngx_string.h
src/core/ngx_times.c
src/core/ngx_times.h
src/event/modules/ngx_aio_module.c
src/event/modules/ngx_devpoll_module.c
src/event/modules/ngx_epoll_module.c
src/event/modules/ngx_eventport_module.c
src/event/modules/ngx_kqueue_module.c
src/event/modules/ngx_poll_module.c
src/event/modules/ngx_rtsig_module.c
src/event/modules/ngx_select_module.c
src/event/modules/ngx_win32_select_module.c
src/event/ngx_event.c
src/event/ngx_event.h
src/event/ngx_event_accept.c
src/event/ngx_event_busy_lock.c
src/event/ngx_event_busy_lock.h
src/event/ngx_event_connect.c
src/event/ngx_event_connect.h
src/event/ngx_event_mutex.c
src/event/ngx_event_openssl.c
src/event/ngx_event_openssl.h
src/event/ngx_event_pipe.c
src/event/ngx_event_pipe.h
src/event/ngx_event_posted.c
src/event/ngx_event_posted.h
src/event/ngx_event_timer.c
src/event/ngx_event_timer.h
src/http/modules/ngx_http_access_module.c
src/http/modules/ngx_http_addition_filter_module.c
src/http/modules/ngx_http_auth_basic_module.c
src/http/modules/ngx_http_autoindex_module.c
src/http/modules/ngx_http_browser_module.c
src/http/modules/ngx_http_charset_filter_module.c
src/http/modules/ngx_http_chunked_filter_module.c
src/http/modules/ngx_http_dav_module.c
src/http/modules/ngx_http_degradation_module.c
src/http/modules/ngx_http_empty_gif_module.c
src/http/modules/ngx_http_fastcgi_module.c
src/http/modules/ngx_http_flv_module.c
src/http/modules/ngx_http_geo_module.c
src/http/modules/ngx_http_geoip_module.c
src/http/modules/ngx_http_gzip_filter_module.c
src/http/modules/ngx_http_gzip_static_module.c
src/http/modules/ngx_http_headers_filter_module.c
src/http/modules/ngx_http_image_filter_module.c
src/http/modules/ngx_http_index_module.c
src/http/modules/ngx_http_limit_conn_module.c
src/http/modules/ngx_http_limit_req_module.c
src/http/modules/ngx_http_log_module.c
src/http/modules/ngx_http_map_module.c
src/http/modules/ngx_http_memcached_module.c
src/http/modules/ngx_http_mp4_module.c
src/http/modules/ngx_http_not_modified_filter_module.c
src/http/modules/ngx_http_proxy_module.c
src/http/modules/ngx_http_random_index_module.c
src/http/modules/ngx_http_range_filter_module.c
src/http/modules/ngx_http_realip_module.c
src/http/modules/ngx_http_referer_module.c
src/http/modules/ngx_http_rewrite_module.c
src/http/modules/ngx_http_scgi_module.c
src/http/modules/ngx_http_secure_link_module.c
src/http/modules/ngx_http_split_clients_module.c
src/http/modules/ngx_http_ssi_filter_module.c
src/http/modules/ngx_http_ssi_filter_module.h
src/http/modules/ngx_http_ssl_module.c
src/http/modules/ngx_http_ssl_module.h
src/http/modules/ngx_http_static_module.c
src/http/modules/ngx_http_stub_status_module.c
src/http/modules/ngx_http_sub_filter_module.c
src/http/modules/ngx_http_upstream_ip_hash_module.c
src/http/modules/ngx_http_upstream_keepalive_module.c
src/http/modules/ngx_http_upstream_least_conn_module.c
src/http/modules/ngx_http_userid_filter_module.c
src/http/modules/ngx_http_uwsgi_module.c
src/http/modules/ngx_http_xslt_filter_module.c
src/http/modules/perl/ngx_http_perl_module.c
src/http/modules/perl/ngx_http_perl_module.h
src/http/ngx_http.c
src/http/ngx_http.h
src/http/ngx_http_busy_lock.c
src/http/ngx_http_busy_lock.h
src/http/ngx_http_cache.h
src/http/ngx_http_config.h
src/http/ngx_http_copy_filter_module.c
src/http/ngx_http_core_module.c
src/http/ngx_http_core_module.h
src/http/ngx_http_file_cache.c
src/http/ngx_http_header_filter_module.c
src/http/ngx_http_parse.c
src/http/ngx_http_parse_time.c
src/http/ngx_http_postpone_filter_module.c
src/http/ngx_http_request.c
src/http/ngx_http_request.h
src/http/ngx_http_request_body.c
src/http/ngx_http_script.c
src/http/ngx_http_script.h
src/http/ngx_http_special_response.c
src/http/ngx_http_upstream.c
src/http/ngx_http_upstream.h
src/http/ngx_http_upstream_round_robin.c
src/http/ngx_http_upstream_round_robin.h
src/http/ngx_http_variables.c
src/http/ngx_http_variables.h
src/http/ngx_http_write_filter_module.c
src/mail/ngx_mail.c
src/mail/ngx_mail.h
src/mail/ngx_mail_auth_http_module.c
src/mail/ngx_mail_core_module.c
src/mail/ngx_mail_handler.c
src/mail/ngx_mail_imap_handler.c
src/mail/ngx_mail_imap_module.c
src/mail/ngx_mail_imap_module.h
src/mail/ngx_mail_parse.c
src/mail/ngx_mail_pop3_handler.c
src/mail/ngx_mail_pop3_module.c
src/mail/ngx_mail_pop3_module.h
src/mail/ngx_mail_proxy_module.c
src/mail/ngx_mail_smtp_handler.c
src/mail/ngx_mail_smtp_module.c
src/mail/ngx_mail_smtp_module.h
src/mail/ngx_mail_ssl_module.c
src/mail/ngx_mail_ssl_module.h
src/misc/ngx_cpp_test_module.cpp
src/misc/ngx_google_perftools_module.c
src/os/unix/ngx_aio_read.c
src/os/unix/ngx_aio_read_chain.c
src/os/unix/ngx_aio_write.c
src/os/unix/ngx_aio_write_chain.c
src/os/unix/ngx_alloc.c
src/os/unix/ngx_alloc.h
src/os/unix/ngx_atomic.h
src/os/unix/ngx_channel.c
src/os/unix/ngx_channel.h
src/os/unix/ngx_daemon.c
src/os/unix/ngx_darwin.h
src/os/unix/ngx_darwin_config.h
src/os/unix/ngx_darwin_init.c
src/os/unix/ngx_darwin_sendfile_chain.c
src/os/unix/ngx_errno.c
src/os/unix/ngx_errno.h
src/os/unix/ngx_file_aio_read.c
src/os/unix/ngx_files.c
src/os/unix/ngx_files.h
src/os/unix/ngx_freebsd.h
src/os/unix/ngx_freebsd_config.h
src/os/unix/ngx_freebsd_init.c
src/os/unix/ngx_freebsd_rfork_thread.c
src/os/unix/ngx_freebsd_rfork_thread.h
src/os/unix/ngx_freebsd_sendfile_chain.c
src/os/unix/ngx_gcc_atomic_amd64.h
src/os/unix/ngx_gcc_atomic_ppc.h
src/os/unix/ngx_gcc_atomic_sparc64.h
src/os/unix/ngx_gcc_atomic_x86.h
src/os/unix/ngx_linux.h
src/os/unix/ngx_linux_aio_read.c
src/os/unix/ngx_linux_config.h
src/os/unix/ngx_linux_init.c
src/os/unix/ngx_linux_sendfile_chain.c
src/os/unix/ngx_os.h
src/os/unix/ngx_posix_config.h
src/os/unix/ngx_posix_init.c
src/os/unix/ngx_process.c
src/os/unix/ngx_process.h
src/os/unix/ngx_process_cycle.c
src/os/unix/ngx_process_cycle.h
src/os/unix/ngx_pthread_thread.c
src/os/unix/ngx_readv_chain.c
src/os/unix/ngx_recv.c
src/os/unix/ngx_send.c
src/os/unix/ngx_setaffinity.c
src/os/unix/ngx_setaffinity.h
src/os/unix/ngx_setproctitle.c
src/os/unix/ngx_setproctitle.h
src/os/unix/ngx_shmem.c
src/os/unix/ngx_shmem.h
src/os/unix/ngx_socket.c
src/os/unix/ngx_socket.h
src/os/unix/ngx_solaris.h
src/os/unix/ngx_solaris_config.h
src/os/unix/ngx_solaris_init.c
src/os/unix/ngx_solaris_sendfilev_chain.c
src/os/unix/ngx_sunpro_atomic_sparc64.h
src/os/unix/ngx_thread.h
src/os/unix/ngx_time.c
src/os/unix/ngx_time.h
src/os/unix/ngx_udp_recv.c
src/os/unix/ngx_user.c
src/os/unix/ngx_user.h
src/os/unix/ngx_writev_chain.c
/usr/include/aio.h
/usr/include/arpa/inet.h
/usr/include/crypt.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/glob.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/aio_abi.h
/usr/include/malloc.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/openssl/conf.h
/usr/include/openssl/engine.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/md5.h
/usr/include/openssl/sha.h
/usr/include/openssl/ssl.h
/usr/include/pcre.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/epoll.h
/usr/include/sys/ioctl.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/mount.h
/usr/include/sys/param.h
/usr/include/sys/prctl.h
/usr/include/sys/resource.h
/usr/include/sys/sem.h
/usr/include/sys/sendfile.h
/usr/include/sys/shm.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/statvfs.h
/usr/include/sys/syscall.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/un.h
/usr/include/sys/utsname.h
/usr/include/sys/vfs.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/xlocale.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm/byteorder.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/mman.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/sem.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/statvfs.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/prctl.h
/usr/include/linux/sysctl.h
/usr/include/linux/types.h
/usr/include/openssl/bio.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/fips.h
/usr/include/openssl/hmac.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/rand.h
/usr/include/openssl/rsa.h
/usr/include/openssl/safestack.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/ui.h
/usr/include/openssl/x509.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/poll.h
/usr/include/sys/select.h
/usr/include/sys/statfs.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/param.h
/usr/include/asm/socket.h
/usr/include/asm/types.h
/usr/include/assert.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/poll.h
/usr/include/bits/select.h
/usr/include/bits/statfs.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/krb5.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/posix_types.h
/usr/include/openssl/asn1.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/x509_vfy.h
/usr/include/sys/timeb.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/krb5/krb5.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/sockios.h
/usr/include/asm/swab.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/et/com_err.h
/usr/include/linux/ioctl.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/ioctl.h
